
import
  json, options, hashes, uri, strutils, tables, rest, os, uri, strutils, httpcore, sigv4

## auto-generated via openapi macro
## title: Amazon Neptune
## version: 2014-10-31
## termsOfService: https://aws.amazon.com/service-terms/
## license:
##     name: Apache 2.0 License
##     url: http://www.apache.org/licenses/
## 
## <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
## 
## Amazon Web Services documentation
## https://docs.aws.amazon.com/rds/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_612642 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_612642](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_612642): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    case js.kind
    of JInt, JFloat, JNull, JBool:
      head = $js
    of JString:
      head = js.getStr
    else:
      return
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  awsServers = {Scheme.Http: {"ap-northeast-1": "rds.ap-northeast-1.amazonaws.com", "ap-southeast-1": "rds.ap-southeast-1.amazonaws.com",
                           "us-west-2": "rds.us-west-2.amazonaws.com",
                           "eu-west-2": "rds.eu-west-2.amazonaws.com", "ap-northeast-3": "rds.ap-northeast-3.amazonaws.com",
                           "eu-central-1": "rds.eu-central-1.amazonaws.com",
                           "us-east-2": "rds.us-east-2.amazonaws.com",
                           "us-east-1": "rds.us-east-1.amazonaws.com", "cn-northwest-1": "rds.cn-northwest-1.amazonaws.com.cn",
                           "ap-south-1": "rds.ap-south-1.amazonaws.com",
                           "eu-north-1": "rds.eu-north-1.amazonaws.com", "ap-northeast-2": "rds.ap-northeast-2.amazonaws.com",
                           "us-west-1": "rds.us-west-1.amazonaws.com",
                           "us-gov-east-1": "rds.us-gov-east-1.amazonaws.com",
                           "eu-west-3": "rds.eu-west-3.amazonaws.com",
                           "cn-north-1": "rds.cn-north-1.amazonaws.com.cn",
                           "sa-east-1": "rds.sa-east-1.amazonaws.com",
                           "eu-west-1": "rds.eu-west-1.amazonaws.com",
                           "us-gov-west-1": "rds.us-gov-west-1.amazonaws.com", "ap-southeast-2": "rds.ap-southeast-2.amazonaws.com",
                           "ca-central-1": "rds.ca-central-1.amazonaws.com"}.toTable, Scheme.Https: {
      "ap-northeast-1": "rds.ap-northeast-1.amazonaws.com",
      "ap-southeast-1": "rds.ap-southeast-1.amazonaws.com",
      "us-west-2": "rds.us-west-2.amazonaws.com",
      "eu-west-2": "rds.eu-west-2.amazonaws.com",
      "ap-northeast-3": "rds.ap-northeast-3.amazonaws.com",
      "eu-central-1": "rds.eu-central-1.amazonaws.com",
      "us-east-2": "rds.us-east-2.amazonaws.com",
      "us-east-1": "rds.us-east-1.amazonaws.com",
      "cn-northwest-1": "rds.cn-northwest-1.amazonaws.com.cn",
      "ap-south-1": "rds.ap-south-1.amazonaws.com",
      "eu-north-1": "rds.eu-north-1.amazonaws.com",
      "ap-northeast-2": "rds.ap-northeast-2.amazonaws.com",
      "us-west-1": "rds.us-west-1.amazonaws.com",
      "us-gov-east-1": "rds.us-gov-east-1.amazonaws.com",
      "eu-west-3": "rds.eu-west-3.amazonaws.com",
      "cn-north-1": "rds.cn-north-1.amazonaws.com.cn",
      "sa-east-1": "rds.sa-east-1.amazonaws.com",
      "eu-west-1": "rds.eu-west-1.amazonaws.com",
      "us-gov-west-1": "rds.us-gov-west-1.amazonaws.com",
      "ap-southeast-2": "rds.ap-southeast-2.amazonaws.com",
      "ca-central-1": "rds.ca-central-1.amazonaws.com"}.toTable}.toTable
const
  awsServiceName = "neptune"
method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_PostAddRoleToDBCluster_613252 = ref object of OpenApiRestCall_612642
proc url_PostAddRoleToDBCluster_613254(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddRoleToDBCluster_613253(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Associates an Identity and Access Management (IAM) role from an Neptune DB cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613255 = query.getOrDefault("Action")
  valid_613255 = validateParameter(valid_613255, JString, required = true,
                                 default = newJString("AddRoleToDBCluster"))
  if valid_613255 != nil:
    section.add "Action", valid_613255
  var valid_613256 = query.getOrDefault("Version")
  valid_613256 = validateParameter(valid_613256, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613256 != nil:
    section.add "Version", valid_613256
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613257 = header.getOrDefault("X-Amz-Signature")
  valid_613257 = validateParameter(valid_613257, JString, required = false,
                                 default = nil)
  if valid_613257 != nil:
    section.add "X-Amz-Signature", valid_613257
  var valid_613258 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613258 = validateParameter(valid_613258, JString, required = false,
                                 default = nil)
  if valid_613258 != nil:
    section.add "X-Amz-Content-Sha256", valid_613258
  var valid_613259 = header.getOrDefault("X-Amz-Date")
  valid_613259 = validateParameter(valid_613259, JString, required = false,
                                 default = nil)
  if valid_613259 != nil:
    section.add "X-Amz-Date", valid_613259
  var valid_613260 = header.getOrDefault("X-Amz-Credential")
  valid_613260 = validateParameter(valid_613260, JString, required = false,
                                 default = nil)
  if valid_613260 != nil:
    section.add "X-Amz-Credential", valid_613260
  var valid_613261 = header.getOrDefault("X-Amz-Security-Token")
  valid_613261 = validateParameter(valid_613261, JString, required = false,
                                 default = nil)
  if valid_613261 != nil:
    section.add "X-Amz-Security-Token", valid_613261
  var valid_613262 = header.getOrDefault("X-Amz-Algorithm")
  valid_613262 = validateParameter(valid_613262, JString, required = false,
                                 default = nil)
  if valid_613262 != nil:
    section.add "X-Amz-Algorithm", valid_613262
  var valid_613263 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613263 = validateParameter(valid_613263, JString, required = false,
                                 default = nil)
  if valid_613263 != nil:
    section.add "X-Amz-SignedHeaders", valid_613263
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Neptune DB cluster, for example <code>arn:aws:iam::123456789012:role/NeptuneAccessRole</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleArn` field"
  var valid_613264 = formData.getOrDefault("RoleArn")
  valid_613264 = validateParameter(valid_613264, JString, required = true,
                                 default = nil)
  if valid_613264 != nil:
    section.add "RoleArn", valid_613264
  var valid_613265 = formData.getOrDefault("DBClusterIdentifier")
  valid_613265 = validateParameter(valid_613265, JString, required = true,
                                 default = nil)
  if valid_613265 != nil:
    section.add "DBClusterIdentifier", valid_613265
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613266: Call_PostAddRoleToDBCluster_613252; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Associates an Identity and Access Management (IAM) role from an Neptune DB cluster.
  ## 
  let valid = call_613266.validator(path, query, header, formData, body)
  let scheme = call_613266.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613266.url(scheme.get, call_613266.host, call_613266.base,
                         call_613266.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613266, url, valid)

proc call*(call_613267: Call_PostAddRoleToDBCluster_613252; RoleArn: string;
          DBClusterIdentifier: string; Action: string = "AddRoleToDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## postAddRoleToDBCluster
  ## Associates an Identity and Access Management (IAM) role from an Neptune DB cluster.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Neptune DB cluster, for example <code>arn:aws:iam::123456789012:role/NeptuneAccessRole</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  var query_613268 = newJObject()
  var formData_613269 = newJObject()
  add(formData_613269, "RoleArn", newJString(RoleArn))
  add(query_613268, "Action", newJString(Action))
  add(query_613268, "Version", newJString(Version))
  add(formData_613269, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_613267.call(nil, query_613268, nil, formData_613269, nil)

var postAddRoleToDBCluster* = Call_PostAddRoleToDBCluster_613252(
    name: "postAddRoleToDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=AddRoleToDBCluster",
    validator: validate_PostAddRoleToDBCluster_613253, base: "/",
    url: url_PostAddRoleToDBCluster_613254, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddRoleToDBCluster_612980 = ref object of OpenApiRestCall_612642
proc url_GetAddRoleToDBCluster_612982(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddRoleToDBCluster_612981(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Associates an Identity and Access Management (IAM) role from an Neptune DB cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Neptune DB cluster, for example <code>arn:aws:iam::123456789012:role/NeptuneAccessRole</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `RoleArn` field"
  var valid_613094 = query.getOrDefault("RoleArn")
  valid_613094 = validateParameter(valid_613094, JString, required = true,
                                 default = nil)
  if valid_613094 != nil:
    section.add "RoleArn", valid_613094
  var valid_613095 = query.getOrDefault("DBClusterIdentifier")
  valid_613095 = validateParameter(valid_613095, JString, required = true,
                                 default = nil)
  if valid_613095 != nil:
    section.add "DBClusterIdentifier", valid_613095
  var valid_613109 = query.getOrDefault("Action")
  valid_613109 = validateParameter(valid_613109, JString, required = true,
                                 default = newJString("AddRoleToDBCluster"))
  if valid_613109 != nil:
    section.add "Action", valid_613109
  var valid_613110 = query.getOrDefault("Version")
  valid_613110 = validateParameter(valid_613110, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613110 != nil:
    section.add "Version", valid_613110
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613111 = header.getOrDefault("X-Amz-Signature")
  valid_613111 = validateParameter(valid_613111, JString, required = false,
                                 default = nil)
  if valid_613111 != nil:
    section.add "X-Amz-Signature", valid_613111
  var valid_613112 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613112 = validateParameter(valid_613112, JString, required = false,
                                 default = nil)
  if valid_613112 != nil:
    section.add "X-Amz-Content-Sha256", valid_613112
  var valid_613113 = header.getOrDefault("X-Amz-Date")
  valid_613113 = validateParameter(valid_613113, JString, required = false,
                                 default = nil)
  if valid_613113 != nil:
    section.add "X-Amz-Date", valid_613113
  var valid_613114 = header.getOrDefault("X-Amz-Credential")
  valid_613114 = validateParameter(valid_613114, JString, required = false,
                                 default = nil)
  if valid_613114 != nil:
    section.add "X-Amz-Credential", valid_613114
  var valid_613115 = header.getOrDefault("X-Amz-Security-Token")
  valid_613115 = validateParameter(valid_613115, JString, required = false,
                                 default = nil)
  if valid_613115 != nil:
    section.add "X-Amz-Security-Token", valid_613115
  var valid_613116 = header.getOrDefault("X-Amz-Algorithm")
  valid_613116 = validateParameter(valid_613116, JString, required = false,
                                 default = nil)
  if valid_613116 != nil:
    section.add "X-Amz-Algorithm", valid_613116
  var valid_613117 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613117 = validateParameter(valid_613117, JString, required = false,
                                 default = nil)
  if valid_613117 != nil:
    section.add "X-Amz-SignedHeaders", valid_613117
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613140: Call_GetAddRoleToDBCluster_612980; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Associates an Identity and Access Management (IAM) role from an Neptune DB cluster.
  ## 
  let valid = call_613140.validator(path, query, header, formData, body)
  let scheme = call_613140.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613140.url(scheme.get, call_613140.host, call_613140.base,
                         call_613140.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613140, url, valid)

proc call*(call_613211: Call_GetAddRoleToDBCluster_612980; RoleArn: string;
          DBClusterIdentifier: string; Action: string = "AddRoleToDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## getAddRoleToDBCluster
  ## Associates an Identity and Access Management (IAM) role from an Neptune DB cluster.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Neptune DB cluster, for example <code>arn:aws:iam::123456789012:role/NeptuneAccessRole</code>.
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613212 = newJObject()
  add(query_613212, "RoleArn", newJString(RoleArn))
  add(query_613212, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_613212, "Action", newJString(Action))
  add(query_613212, "Version", newJString(Version))
  result = call_613211.call(nil, query_613212, nil, nil, nil)

var getAddRoleToDBCluster* = Call_GetAddRoleToDBCluster_612980(
    name: "getAddRoleToDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=AddRoleToDBCluster",
    validator: validate_GetAddRoleToDBCluster_612981, base: "/",
    url: url_GetAddRoleToDBCluster_612982, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddSourceIdentifierToSubscription_613287 = ref object of OpenApiRestCall_612642
proc url_PostAddSourceIdentifierToSubscription_613289(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddSourceIdentifierToSubscription_613288(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a source identifier to an existing event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613290 = query.getOrDefault("Action")
  valid_613290 = validateParameter(valid_613290, JString, required = true, default = newJString(
      "AddSourceIdentifierToSubscription"))
  if valid_613290 != nil:
    section.add "Action", valid_613290
  var valid_613291 = query.getOrDefault("Version")
  valid_613291 = validateParameter(valid_613291, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613291 != nil:
    section.add "Version", valid_613291
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613292 = header.getOrDefault("X-Amz-Signature")
  valid_613292 = validateParameter(valid_613292, JString, required = false,
                                 default = nil)
  if valid_613292 != nil:
    section.add "X-Amz-Signature", valid_613292
  var valid_613293 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613293 = validateParameter(valid_613293, JString, required = false,
                                 default = nil)
  if valid_613293 != nil:
    section.add "X-Amz-Content-Sha256", valid_613293
  var valid_613294 = header.getOrDefault("X-Amz-Date")
  valid_613294 = validateParameter(valid_613294, JString, required = false,
                                 default = nil)
  if valid_613294 != nil:
    section.add "X-Amz-Date", valid_613294
  var valid_613295 = header.getOrDefault("X-Amz-Credential")
  valid_613295 = validateParameter(valid_613295, JString, required = false,
                                 default = nil)
  if valid_613295 != nil:
    section.add "X-Amz-Credential", valid_613295
  var valid_613296 = header.getOrDefault("X-Amz-Security-Token")
  valid_613296 = validateParameter(valid_613296, JString, required = false,
                                 default = nil)
  if valid_613296 != nil:
    section.add "X-Amz-Security-Token", valid_613296
  var valid_613297 = header.getOrDefault("X-Amz-Algorithm")
  valid_613297 = validateParameter(valid_613297, JString, required = false,
                                 default = nil)
  if valid_613297 != nil:
    section.add "X-Amz-Algorithm", valid_613297
  var valid_613298 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613298 = validateParameter(valid_613298, JString, required = false,
                                 default = nil)
  if valid_613298 != nil:
    section.add "X-Amz-SignedHeaders", valid_613298
  result.add "header", section
  ## parameters in `formData` object:
  ##   SubscriptionName: JString (required)
  ##                   : The name of the event notification subscription you want to add a source identifier to.
  ##   SourceIdentifier: JString (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_613299 = formData.getOrDefault("SubscriptionName")
  valid_613299 = validateParameter(valid_613299, JString, required = true,
                                 default = nil)
  if valid_613299 != nil:
    section.add "SubscriptionName", valid_613299
  var valid_613300 = formData.getOrDefault("SourceIdentifier")
  valid_613300 = validateParameter(valid_613300, JString, required = true,
                                 default = nil)
  if valid_613300 != nil:
    section.add "SourceIdentifier", valid_613300
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613301: Call_PostAddSourceIdentifierToSubscription_613287;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a source identifier to an existing event notification subscription.
  ## 
  let valid = call_613301.validator(path, query, header, formData, body)
  let scheme = call_613301.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613301.url(scheme.get, call_613301.host, call_613301.base,
                         call_613301.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613301, url, valid)

proc call*(call_613302: Call_PostAddSourceIdentifierToSubscription_613287;
          SubscriptionName: string; SourceIdentifier: string;
          Action: string = "AddSourceIdentifierToSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## postAddSourceIdentifierToSubscription
  ## Adds a source identifier to an existing event notification subscription.
  ##   SubscriptionName: string (required)
  ##                   : The name of the event notification subscription you want to add a source identifier to.
  ##   SourceIdentifier: string (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613303 = newJObject()
  var formData_613304 = newJObject()
  add(formData_613304, "SubscriptionName", newJString(SubscriptionName))
  add(formData_613304, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_613303, "Action", newJString(Action))
  add(query_613303, "Version", newJString(Version))
  result = call_613302.call(nil, query_613303, nil, formData_613304, nil)

var postAddSourceIdentifierToSubscription* = Call_PostAddSourceIdentifierToSubscription_613287(
    name: "postAddSourceIdentifierToSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=AddSourceIdentifierToSubscription",
    validator: validate_PostAddSourceIdentifierToSubscription_613288, base: "/",
    url: url_PostAddSourceIdentifierToSubscription_613289,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddSourceIdentifierToSubscription_613270 = ref object of OpenApiRestCall_612642
proc url_GetAddSourceIdentifierToSubscription_613272(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddSourceIdentifierToSubscription_613271(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a source identifier to an existing event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceIdentifier: JString (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SubscriptionName: JString (required)
  ##                   : The name of the event notification subscription you want to add a source identifier to.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SourceIdentifier` field"
  var valid_613273 = query.getOrDefault("SourceIdentifier")
  valid_613273 = validateParameter(valid_613273, JString, required = true,
                                 default = nil)
  if valid_613273 != nil:
    section.add "SourceIdentifier", valid_613273
  var valid_613274 = query.getOrDefault("SubscriptionName")
  valid_613274 = validateParameter(valid_613274, JString, required = true,
                                 default = nil)
  if valid_613274 != nil:
    section.add "SubscriptionName", valid_613274
  var valid_613275 = query.getOrDefault("Action")
  valid_613275 = validateParameter(valid_613275, JString, required = true, default = newJString(
      "AddSourceIdentifierToSubscription"))
  if valid_613275 != nil:
    section.add "Action", valid_613275
  var valid_613276 = query.getOrDefault("Version")
  valid_613276 = validateParameter(valid_613276, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613276 != nil:
    section.add "Version", valid_613276
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613277 = header.getOrDefault("X-Amz-Signature")
  valid_613277 = validateParameter(valid_613277, JString, required = false,
                                 default = nil)
  if valid_613277 != nil:
    section.add "X-Amz-Signature", valid_613277
  var valid_613278 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613278 = validateParameter(valid_613278, JString, required = false,
                                 default = nil)
  if valid_613278 != nil:
    section.add "X-Amz-Content-Sha256", valid_613278
  var valid_613279 = header.getOrDefault("X-Amz-Date")
  valid_613279 = validateParameter(valid_613279, JString, required = false,
                                 default = nil)
  if valid_613279 != nil:
    section.add "X-Amz-Date", valid_613279
  var valid_613280 = header.getOrDefault("X-Amz-Credential")
  valid_613280 = validateParameter(valid_613280, JString, required = false,
                                 default = nil)
  if valid_613280 != nil:
    section.add "X-Amz-Credential", valid_613280
  var valid_613281 = header.getOrDefault("X-Amz-Security-Token")
  valid_613281 = validateParameter(valid_613281, JString, required = false,
                                 default = nil)
  if valid_613281 != nil:
    section.add "X-Amz-Security-Token", valid_613281
  var valid_613282 = header.getOrDefault("X-Amz-Algorithm")
  valid_613282 = validateParameter(valid_613282, JString, required = false,
                                 default = nil)
  if valid_613282 != nil:
    section.add "X-Amz-Algorithm", valid_613282
  var valid_613283 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613283 = validateParameter(valid_613283, JString, required = false,
                                 default = nil)
  if valid_613283 != nil:
    section.add "X-Amz-SignedHeaders", valid_613283
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613284: Call_GetAddSourceIdentifierToSubscription_613270;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a source identifier to an existing event notification subscription.
  ## 
  let valid = call_613284.validator(path, query, header, formData, body)
  let scheme = call_613284.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613284.url(scheme.get, call_613284.host, call_613284.base,
                         call_613284.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613284, url, valid)

proc call*(call_613285: Call_GetAddSourceIdentifierToSubscription_613270;
          SourceIdentifier: string; SubscriptionName: string;
          Action: string = "AddSourceIdentifierToSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## getAddSourceIdentifierToSubscription
  ## Adds a source identifier to an existing event notification subscription.
  ##   SourceIdentifier: string (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SubscriptionName: string (required)
  ##                   : The name of the event notification subscription you want to add a source identifier to.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613286 = newJObject()
  add(query_613286, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_613286, "SubscriptionName", newJString(SubscriptionName))
  add(query_613286, "Action", newJString(Action))
  add(query_613286, "Version", newJString(Version))
  result = call_613285.call(nil, query_613286, nil, nil, nil)

var getAddSourceIdentifierToSubscription* = Call_GetAddSourceIdentifierToSubscription_613270(
    name: "getAddSourceIdentifierToSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=AddSourceIdentifierToSubscription",
    validator: validate_GetAddSourceIdentifierToSubscription_613271, base: "/",
    url: url_GetAddSourceIdentifierToSubscription_613272,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddTagsToResource_613322 = ref object of OpenApiRestCall_612642
proc url_PostAddTagsToResource_613324(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddTagsToResource_613323(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds metadata tags to an Amazon Neptune resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon Neptune resources, or used in a Condition statement in an IAM policy for Amazon Neptune.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613325 = query.getOrDefault("Action")
  valid_613325 = validateParameter(valid_613325, JString, required = true,
                                 default = newJString("AddTagsToResource"))
  if valid_613325 != nil:
    section.add "Action", valid_613325
  var valid_613326 = query.getOrDefault("Version")
  valid_613326 = validateParameter(valid_613326, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613326 != nil:
    section.add "Version", valid_613326
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613327 = header.getOrDefault("X-Amz-Signature")
  valid_613327 = validateParameter(valid_613327, JString, required = false,
                                 default = nil)
  if valid_613327 != nil:
    section.add "X-Amz-Signature", valid_613327
  var valid_613328 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613328 = validateParameter(valid_613328, JString, required = false,
                                 default = nil)
  if valid_613328 != nil:
    section.add "X-Amz-Content-Sha256", valid_613328
  var valid_613329 = header.getOrDefault("X-Amz-Date")
  valid_613329 = validateParameter(valid_613329, JString, required = false,
                                 default = nil)
  if valid_613329 != nil:
    section.add "X-Amz-Date", valid_613329
  var valid_613330 = header.getOrDefault("X-Amz-Credential")
  valid_613330 = validateParameter(valid_613330, JString, required = false,
                                 default = nil)
  if valid_613330 != nil:
    section.add "X-Amz-Credential", valid_613330
  var valid_613331 = header.getOrDefault("X-Amz-Security-Token")
  valid_613331 = validateParameter(valid_613331, JString, required = false,
                                 default = nil)
  if valid_613331 != nil:
    section.add "X-Amz-Security-Token", valid_613331
  var valid_613332 = header.getOrDefault("X-Amz-Algorithm")
  valid_613332 = validateParameter(valid_613332, JString, required = false,
                                 default = nil)
  if valid_613332 != nil:
    section.add "X-Amz-Algorithm", valid_613332
  var valid_613333 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613333 = validateParameter(valid_613333, JString, required = false,
                                 default = nil)
  if valid_613333 != nil:
    section.add "X-Amz-SignedHeaders", valid_613333
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray (required)
  ##       : The tags to be assigned to the Amazon Neptune resource.
  ##   ResourceName: JString (required)
  ##               : The Amazon Neptune resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Tags` field"
  var valid_613334 = formData.getOrDefault("Tags")
  valid_613334 = validateParameter(valid_613334, JArray, required = true, default = nil)
  if valid_613334 != nil:
    section.add "Tags", valid_613334
  var valid_613335 = formData.getOrDefault("ResourceName")
  valid_613335 = validateParameter(valid_613335, JString, required = true,
                                 default = nil)
  if valid_613335 != nil:
    section.add "ResourceName", valid_613335
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613336: Call_PostAddTagsToResource_613322; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Adds metadata tags to an Amazon Neptune resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon Neptune resources, or used in a Condition statement in an IAM policy for Amazon Neptune.
  ## 
  let valid = call_613336.validator(path, query, header, formData, body)
  let scheme = call_613336.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613336.url(scheme.get, call_613336.host, call_613336.base,
                         call_613336.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613336, url, valid)

proc call*(call_613337: Call_PostAddTagsToResource_613322; Tags: JsonNode;
          ResourceName: string; Action: string = "AddTagsToResource";
          Version: string = "2014-10-31"): Recallable =
  ## postAddTagsToResource
  ## Adds metadata tags to an Amazon Neptune resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon Neptune resources, or used in a Condition statement in an IAM policy for Amazon Neptune.
  ##   Action: string (required)
  ##   Tags: JArray (required)
  ##       : The tags to be assigned to the Amazon Neptune resource.
  ##   Version: string (required)
  ##   ResourceName: string (required)
  ##               : The Amazon Neptune resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  var query_613338 = newJObject()
  var formData_613339 = newJObject()
  add(query_613338, "Action", newJString(Action))
  if Tags != nil:
    formData_613339.add "Tags", Tags
  add(query_613338, "Version", newJString(Version))
  add(formData_613339, "ResourceName", newJString(ResourceName))
  result = call_613337.call(nil, query_613338, nil, formData_613339, nil)

var postAddTagsToResource* = Call_PostAddTagsToResource_613322(
    name: "postAddTagsToResource", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=AddTagsToResource",
    validator: validate_PostAddTagsToResource_613323, base: "/",
    url: url_PostAddTagsToResource_613324, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddTagsToResource_613305 = ref object of OpenApiRestCall_612642
proc url_GetAddTagsToResource_613307(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddTagsToResource_613306(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds metadata tags to an Amazon Neptune resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon Neptune resources, or used in a Condition statement in an IAM policy for Amazon Neptune.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : The tags to be assigned to the Amazon Neptune resource.
  ##   ResourceName: JString (required)
  ##               : The Amazon Neptune resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_613308 = query.getOrDefault("Tags")
  valid_613308 = validateParameter(valid_613308, JArray, required = true, default = nil)
  if valid_613308 != nil:
    section.add "Tags", valid_613308
  var valid_613309 = query.getOrDefault("ResourceName")
  valid_613309 = validateParameter(valid_613309, JString, required = true,
                                 default = nil)
  if valid_613309 != nil:
    section.add "ResourceName", valid_613309
  var valid_613310 = query.getOrDefault("Action")
  valid_613310 = validateParameter(valid_613310, JString, required = true,
                                 default = newJString("AddTagsToResource"))
  if valid_613310 != nil:
    section.add "Action", valid_613310
  var valid_613311 = query.getOrDefault("Version")
  valid_613311 = validateParameter(valid_613311, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613311 != nil:
    section.add "Version", valid_613311
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613312 = header.getOrDefault("X-Amz-Signature")
  valid_613312 = validateParameter(valid_613312, JString, required = false,
                                 default = nil)
  if valid_613312 != nil:
    section.add "X-Amz-Signature", valid_613312
  var valid_613313 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613313 = validateParameter(valid_613313, JString, required = false,
                                 default = nil)
  if valid_613313 != nil:
    section.add "X-Amz-Content-Sha256", valid_613313
  var valid_613314 = header.getOrDefault("X-Amz-Date")
  valid_613314 = validateParameter(valid_613314, JString, required = false,
                                 default = nil)
  if valid_613314 != nil:
    section.add "X-Amz-Date", valid_613314
  var valid_613315 = header.getOrDefault("X-Amz-Credential")
  valid_613315 = validateParameter(valid_613315, JString, required = false,
                                 default = nil)
  if valid_613315 != nil:
    section.add "X-Amz-Credential", valid_613315
  var valid_613316 = header.getOrDefault("X-Amz-Security-Token")
  valid_613316 = validateParameter(valid_613316, JString, required = false,
                                 default = nil)
  if valid_613316 != nil:
    section.add "X-Amz-Security-Token", valid_613316
  var valid_613317 = header.getOrDefault("X-Amz-Algorithm")
  valid_613317 = validateParameter(valid_613317, JString, required = false,
                                 default = nil)
  if valid_613317 != nil:
    section.add "X-Amz-Algorithm", valid_613317
  var valid_613318 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613318 = validateParameter(valid_613318, JString, required = false,
                                 default = nil)
  if valid_613318 != nil:
    section.add "X-Amz-SignedHeaders", valid_613318
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613319: Call_GetAddTagsToResource_613305; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Adds metadata tags to an Amazon Neptune resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon Neptune resources, or used in a Condition statement in an IAM policy for Amazon Neptune.
  ## 
  let valid = call_613319.validator(path, query, header, formData, body)
  let scheme = call_613319.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613319.url(scheme.get, call_613319.host, call_613319.base,
                         call_613319.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613319, url, valid)

proc call*(call_613320: Call_GetAddTagsToResource_613305; Tags: JsonNode;
          ResourceName: string; Action: string = "AddTagsToResource";
          Version: string = "2014-10-31"): Recallable =
  ## getAddTagsToResource
  ## Adds metadata tags to an Amazon Neptune resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon Neptune resources, or used in a Condition statement in an IAM policy for Amazon Neptune.
  ##   Tags: JArray (required)
  ##       : The tags to be assigned to the Amazon Neptune resource.
  ##   ResourceName: string (required)
  ##               : The Amazon Neptune resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613321 = newJObject()
  if Tags != nil:
    query_613321.add "Tags", Tags
  add(query_613321, "ResourceName", newJString(ResourceName))
  add(query_613321, "Action", newJString(Action))
  add(query_613321, "Version", newJString(Version))
  result = call_613320.call(nil, query_613321, nil, nil, nil)

var getAddTagsToResource* = Call_GetAddTagsToResource_613305(
    name: "getAddTagsToResource", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=AddTagsToResource",
    validator: validate_GetAddTagsToResource_613306, base: "/",
    url: url_GetAddTagsToResource_613307, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostApplyPendingMaintenanceAction_613358 = ref object of OpenApiRestCall_612642
proc url_PostApplyPendingMaintenanceAction_613360(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostApplyPendingMaintenanceAction_613359(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613361 = query.getOrDefault("Action")
  valid_613361 = validateParameter(valid_613361, JString, required = true, default = newJString(
      "ApplyPendingMaintenanceAction"))
  if valid_613361 != nil:
    section.add "Action", valid_613361
  var valid_613362 = query.getOrDefault("Version")
  valid_613362 = validateParameter(valid_613362, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613362 != nil:
    section.add "Version", valid_613362
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613363 = header.getOrDefault("X-Amz-Signature")
  valid_613363 = validateParameter(valid_613363, JString, required = false,
                                 default = nil)
  if valid_613363 != nil:
    section.add "X-Amz-Signature", valid_613363
  var valid_613364 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613364 = validateParameter(valid_613364, JString, required = false,
                                 default = nil)
  if valid_613364 != nil:
    section.add "X-Amz-Content-Sha256", valid_613364
  var valid_613365 = header.getOrDefault("X-Amz-Date")
  valid_613365 = validateParameter(valid_613365, JString, required = false,
                                 default = nil)
  if valid_613365 != nil:
    section.add "X-Amz-Date", valid_613365
  var valid_613366 = header.getOrDefault("X-Amz-Credential")
  valid_613366 = validateParameter(valid_613366, JString, required = false,
                                 default = nil)
  if valid_613366 != nil:
    section.add "X-Amz-Credential", valid_613366
  var valid_613367 = header.getOrDefault("X-Amz-Security-Token")
  valid_613367 = validateParameter(valid_613367, JString, required = false,
                                 default = nil)
  if valid_613367 != nil:
    section.add "X-Amz-Security-Token", valid_613367
  var valid_613368 = header.getOrDefault("X-Amz-Algorithm")
  valid_613368 = validateParameter(valid_613368, JString, required = false,
                                 default = nil)
  if valid_613368 != nil:
    section.add "X-Amz-Algorithm", valid_613368
  var valid_613369 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613369 = validateParameter(valid_613369, JString, required = false,
                                 default = nil)
  if valid_613369 != nil:
    section.add "X-Amz-SignedHeaders", valid_613369
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResourceIdentifier: JString (required)
  ##                     : The Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   ApplyAction: JString (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code> </p>
  ##   OptInType: JString (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ResourceIdentifier` field"
  var valid_613370 = formData.getOrDefault("ResourceIdentifier")
  valid_613370 = validateParameter(valid_613370, JString, required = true,
                                 default = nil)
  if valid_613370 != nil:
    section.add "ResourceIdentifier", valid_613370
  var valid_613371 = formData.getOrDefault("ApplyAction")
  valid_613371 = validateParameter(valid_613371, JString, required = true,
                                 default = nil)
  if valid_613371 != nil:
    section.add "ApplyAction", valid_613371
  var valid_613372 = formData.getOrDefault("OptInType")
  valid_613372 = validateParameter(valid_613372, JString, required = true,
                                 default = nil)
  if valid_613372 != nil:
    section.add "OptInType", valid_613372
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613373: Call_PostApplyPendingMaintenanceAction_613358;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  let valid = call_613373.validator(path, query, header, formData, body)
  let scheme = call_613373.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613373.url(scheme.get, call_613373.host, call_613373.base,
                         call_613373.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613373, url, valid)

proc call*(call_613374: Call_PostApplyPendingMaintenanceAction_613358;
          ResourceIdentifier: string; ApplyAction: string; OptInType: string;
          Action: string = "ApplyPendingMaintenanceAction";
          Version: string = "2014-10-31"): Recallable =
  ## postApplyPendingMaintenanceAction
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ##   ResourceIdentifier: string (required)
  ##                     : The Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   ApplyAction: string (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code> </p>
  ##   Action: string (required)
  ##   OptInType: string (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  ##   Version: string (required)
  var query_613375 = newJObject()
  var formData_613376 = newJObject()
  add(formData_613376, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(formData_613376, "ApplyAction", newJString(ApplyAction))
  add(query_613375, "Action", newJString(Action))
  add(formData_613376, "OptInType", newJString(OptInType))
  add(query_613375, "Version", newJString(Version))
  result = call_613374.call(nil, query_613375, nil, formData_613376, nil)

var postApplyPendingMaintenanceAction* = Call_PostApplyPendingMaintenanceAction_613358(
    name: "postApplyPendingMaintenanceAction", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ApplyPendingMaintenanceAction",
    validator: validate_PostApplyPendingMaintenanceAction_613359, base: "/",
    url: url_PostApplyPendingMaintenanceAction_613360,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplyPendingMaintenanceAction_613340 = ref object of OpenApiRestCall_612642
proc url_GetApplyPendingMaintenanceAction_613342(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetApplyPendingMaintenanceAction_613341(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceIdentifier: JString (required)
  ##                     : The Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   ApplyAction: JString (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code> </p>
  ##   Action: JString (required)
  ##   OptInType: JString (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ResourceIdentifier` field"
  var valid_613343 = query.getOrDefault("ResourceIdentifier")
  valid_613343 = validateParameter(valid_613343, JString, required = true,
                                 default = nil)
  if valid_613343 != nil:
    section.add "ResourceIdentifier", valid_613343
  var valid_613344 = query.getOrDefault("ApplyAction")
  valid_613344 = validateParameter(valid_613344, JString, required = true,
                                 default = nil)
  if valid_613344 != nil:
    section.add "ApplyAction", valid_613344
  var valid_613345 = query.getOrDefault("Action")
  valid_613345 = validateParameter(valid_613345, JString, required = true, default = newJString(
      "ApplyPendingMaintenanceAction"))
  if valid_613345 != nil:
    section.add "Action", valid_613345
  var valid_613346 = query.getOrDefault("OptInType")
  valid_613346 = validateParameter(valid_613346, JString, required = true,
                                 default = nil)
  if valid_613346 != nil:
    section.add "OptInType", valid_613346
  var valid_613347 = query.getOrDefault("Version")
  valid_613347 = validateParameter(valid_613347, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613347 != nil:
    section.add "Version", valid_613347
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613348 = header.getOrDefault("X-Amz-Signature")
  valid_613348 = validateParameter(valid_613348, JString, required = false,
                                 default = nil)
  if valid_613348 != nil:
    section.add "X-Amz-Signature", valid_613348
  var valid_613349 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613349 = validateParameter(valid_613349, JString, required = false,
                                 default = nil)
  if valid_613349 != nil:
    section.add "X-Amz-Content-Sha256", valid_613349
  var valid_613350 = header.getOrDefault("X-Amz-Date")
  valid_613350 = validateParameter(valid_613350, JString, required = false,
                                 default = nil)
  if valid_613350 != nil:
    section.add "X-Amz-Date", valid_613350
  var valid_613351 = header.getOrDefault("X-Amz-Credential")
  valid_613351 = validateParameter(valid_613351, JString, required = false,
                                 default = nil)
  if valid_613351 != nil:
    section.add "X-Amz-Credential", valid_613351
  var valid_613352 = header.getOrDefault("X-Amz-Security-Token")
  valid_613352 = validateParameter(valid_613352, JString, required = false,
                                 default = nil)
  if valid_613352 != nil:
    section.add "X-Amz-Security-Token", valid_613352
  var valid_613353 = header.getOrDefault("X-Amz-Algorithm")
  valid_613353 = validateParameter(valid_613353, JString, required = false,
                                 default = nil)
  if valid_613353 != nil:
    section.add "X-Amz-Algorithm", valid_613353
  var valid_613354 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613354 = validateParameter(valid_613354, JString, required = false,
                                 default = nil)
  if valid_613354 != nil:
    section.add "X-Amz-SignedHeaders", valid_613354
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613355: Call_GetApplyPendingMaintenanceAction_613340;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  let valid = call_613355.validator(path, query, header, formData, body)
  let scheme = call_613355.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613355.url(scheme.get, call_613355.host, call_613355.base,
                         call_613355.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613355, url, valid)

proc call*(call_613356: Call_GetApplyPendingMaintenanceAction_613340;
          ResourceIdentifier: string; ApplyAction: string; OptInType: string;
          Action: string = "ApplyPendingMaintenanceAction";
          Version: string = "2014-10-31"): Recallable =
  ## getApplyPendingMaintenanceAction
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ##   ResourceIdentifier: string (required)
  ##                     : The Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   ApplyAction: string (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code> </p>
  ##   Action: string (required)
  ##   OptInType: string (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  ##   Version: string (required)
  var query_613357 = newJObject()
  add(query_613357, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(query_613357, "ApplyAction", newJString(ApplyAction))
  add(query_613357, "Action", newJString(Action))
  add(query_613357, "OptInType", newJString(OptInType))
  add(query_613357, "Version", newJString(Version))
  result = call_613356.call(nil, query_613357, nil, nil, nil)

var getApplyPendingMaintenanceAction* = Call_GetApplyPendingMaintenanceAction_613340(
    name: "getApplyPendingMaintenanceAction", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ApplyPendingMaintenanceAction",
    validator: validate_GetApplyPendingMaintenanceAction_613341, base: "/",
    url: url_GetApplyPendingMaintenanceAction_613342,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBClusterParameterGroup_613396 = ref object of OpenApiRestCall_612642
proc url_PostCopyDBClusterParameterGroup_613398(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCopyDBClusterParameterGroup_613397(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Copies the specified DB cluster parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613399 = query.getOrDefault("Action")
  valid_613399 = validateParameter(valid_613399, JString, required = true, default = newJString(
      "CopyDBClusterParameterGroup"))
  if valid_613399 != nil:
    section.add "Action", valid_613399
  var valid_613400 = query.getOrDefault("Version")
  valid_613400 = validateParameter(valid_613400, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613400 != nil:
    section.add "Version", valid_613400
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613401 = header.getOrDefault("X-Amz-Signature")
  valid_613401 = validateParameter(valid_613401, JString, required = false,
                                 default = nil)
  if valid_613401 != nil:
    section.add "X-Amz-Signature", valid_613401
  var valid_613402 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613402 = validateParameter(valid_613402, JString, required = false,
                                 default = nil)
  if valid_613402 != nil:
    section.add "X-Amz-Content-Sha256", valid_613402
  var valid_613403 = header.getOrDefault("X-Amz-Date")
  valid_613403 = validateParameter(valid_613403, JString, required = false,
                                 default = nil)
  if valid_613403 != nil:
    section.add "X-Amz-Date", valid_613403
  var valid_613404 = header.getOrDefault("X-Amz-Credential")
  valid_613404 = validateParameter(valid_613404, JString, required = false,
                                 default = nil)
  if valid_613404 != nil:
    section.add "X-Amz-Credential", valid_613404
  var valid_613405 = header.getOrDefault("X-Amz-Security-Token")
  valid_613405 = validateParameter(valid_613405, JString, required = false,
                                 default = nil)
  if valid_613405 != nil:
    section.add "X-Amz-Security-Token", valid_613405
  var valid_613406 = header.getOrDefault("X-Amz-Algorithm")
  valid_613406 = validateParameter(valid_613406, JString, required = false,
                                 default = nil)
  if valid_613406 != nil:
    section.add "X-Amz-Algorithm", valid_613406
  var valid_613407 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613407 = validateParameter(valid_613407, JString, required = false,
                                 default = nil)
  if valid_613407 != nil:
    section.add "X-Amz-SignedHeaders", valid_613407
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   SourceDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   Tags: JArray
  ##       : The tags to be assigned to the copied DB cluster parameter group.
  ##   TargetDBClusterParameterGroupDescription: JString (required)
  ##                                           : A description for the copied DB cluster parameter group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `TargetDBClusterParameterGroupIdentifier` field"
  var valid_613408 = formData.getOrDefault("TargetDBClusterParameterGroupIdentifier")
  valid_613408 = validateParameter(valid_613408, JString, required = true,
                                 default = nil)
  if valid_613408 != nil:
    section.add "TargetDBClusterParameterGroupIdentifier", valid_613408
  var valid_613409 = formData.getOrDefault("SourceDBClusterParameterGroupIdentifier")
  valid_613409 = validateParameter(valid_613409, JString, required = true,
                                 default = nil)
  if valid_613409 != nil:
    section.add "SourceDBClusterParameterGroupIdentifier", valid_613409
  var valid_613410 = formData.getOrDefault("Tags")
  valid_613410 = validateParameter(valid_613410, JArray, required = false,
                                 default = nil)
  if valid_613410 != nil:
    section.add "Tags", valid_613410
  var valid_613411 = formData.getOrDefault("TargetDBClusterParameterGroupDescription")
  valid_613411 = validateParameter(valid_613411, JString, required = true,
                                 default = nil)
  if valid_613411 != nil:
    section.add "TargetDBClusterParameterGroupDescription", valid_613411
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613412: Call_PostCopyDBClusterParameterGroup_613396;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Copies the specified DB cluster parameter group.
  ## 
  let valid = call_613412.validator(path, query, header, formData, body)
  let scheme = call_613412.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613412.url(scheme.get, call_613412.host, call_613412.base,
                         call_613412.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613412, url, valid)

proc call*(call_613413: Call_PostCopyDBClusterParameterGroup_613396;
          TargetDBClusterParameterGroupIdentifier: string;
          SourceDBClusterParameterGroupIdentifier: string;
          TargetDBClusterParameterGroupDescription: string;
          Action: string = "CopyDBClusterParameterGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCopyDBClusterParameterGroup
  ## Copies the specified DB cluster parameter group.
  ##   TargetDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   SourceDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : The tags to be assigned to the copied DB cluster parameter group.
  ##   Version: string (required)
  ##   TargetDBClusterParameterGroupDescription: string (required)
  ##                                           : A description for the copied DB cluster parameter group.
  var query_613414 = newJObject()
  var formData_613415 = newJObject()
  add(formData_613415, "TargetDBClusterParameterGroupIdentifier",
      newJString(TargetDBClusterParameterGroupIdentifier))
  add(formData_613415, "SourceDBClusterParameterGroupIdentifier",
      newJString(SourceDBClusterParameterGroupIdentifier))
  add(query_613414, "Action", newJString(Action))
  if Tags != nil:
    formData_613415.add "Tags", Tags
  add(query_613414, "Version", newJString(Version))
  add(formData_613415, "TargetDBClusterParameterGroupDescription",
      newJString(TargetDBClusterParameterGroupDescription))
  result = call_613413.call(nil, query_613414, nil, formData_613415, nil)

var postCopyDBClusterParameterGroup* = Call_PostCopyDBClusterParameterGroup_613396(
    name: "postCopyDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterParameterGroup",
    validator: validate_PostCopyDBClusterParameterGroup_613397, base: "/",
    url: url_PostCopyDBClusterParameterGroup_613398,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBClusterParameterGroup_613377 = ref object of OpenApiRestCall_612642
proc url_GetCopyDBClusterParameterGroup_613379(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCopyDBClusterParameterGroup_613378(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Copies the specified DB cluster parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TargetDBClusterParameterGroupDescription: JString (required)
  ##                                           : A description for the copied DB cluster parameter group.
  ##   Tags: JArray
  ##       : The tags to be assigned to the copied DB cluster parameter group.
  ##   TargetDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   Action: JString (required)
  ##   SourceDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `TargetDBClusterParameterGroupDescription` field"
  var valid_613380 = query.getOrDefault("TargetDBClusterParameterGroupDescription")
  valid_613380 = validateParameter(valid_613380, JString, required = true,
                                 default = nil)
  if valid_613380 != nil:
    section.add "TargetDBClusterParameterGroupDescription", valid_613380
  var valid_613381 = query.getOrDefault("Tags")
  valid_613381 = validateParameter(valid_613381, JArray, required = false,
                                 default = nil)
  if valid_613381 != nil:
    section.add "Tags", valid_613381
  var valid_613382 = query.getOrDefault("TargetDBClusterParameterGroupIdentifier")
  valid_613382 = validateParameter(valid_613382, JString, required = true,
                                 default = nil)
  if valid_613382 != nil:
    section.add "TargetDBClusterParameterGroupIdentifier", valid_613382
  var valid_613383 = query.getOrDefault("Action")
  valid_613383 = validateParameter(valid_613383, JString, required = true, default = newJString(
      "CopyDBClusterParameterGroup"))
  if valid_613383 != nil:
    section.add "Action", valid_613383
  var valid_613384 = query.getOrDefault("SourceDBClusterParameterGroupIdentifier")
  valid_613384 = validateParameter(valid_613384, JString, required = true,
                                 default = nil)
  if valid_613384 != nil:
    section.add "SourceDBClusterParameterGroupIdentifier", valid_613384
  var valid_613385 = query.getOrDefault("Version")
  valid_613385 = validateParameter(valid_613385, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613385 != nil:
    section.add "Version", valid_613385
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613386 = header.getOrDefault("X-Amz-Signature")
  valid_613386 = validateParameter(valid_613386, JString, required = false,
                                 default = nil)
  if valid_613386 != nil:
    section.add "X-Amz-Signature", valid_613386
  var valid_613387 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613387 = validateParameter(valid_613387, JString, required = false,
                                 default = nil)
  if valid_613387 != nil:
    section.add "X-Amz-Content-Sha256", valid_613387
  var valid_613388 = header.getOrDefault("X-Amz-Date")
  valid_613388 = validateParameter(valid_613388, JString, required = false,
                                 default = nil)
  if valid_613388 != nil:
    section.add "X-Amz-Date", valid_613388
  var valid_613389 = header.getOrDefault("X-Amz-Credential")
  valid_613389 = validateParameter(valid_613389, JString, required = false,
                                 default = nil)
  if valid_613389 != nil:
    section.add "X-Amz-Credential", valid_613389
  var valid_613390 = header.getOrDefault("X-Amz-Security-Token")
  valid_613390 = validateParameter(valid_613390, JString, required = false,
                                 default = nil)
  if valid_613390 != nil:
    section.add "X-Amz-Security-Token", valid_613390
  var valid_613391 = header.getOrDefault("X-Amz-Algorithm")
  valid_613391 = validateParameter(valid_613391, JString, required = false,
                                 default = nil)
  if valid_613391 != nil:
    section.add "X-Amz-Algorithm", valid_613391
  var valid_613392 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613392 = validateParameter(valid_613392, JString, required = false,
                                 default = nil)
  if valid_613392 != nil:
    section.add "X-Amz-SignedHeaders", valid_613392
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613393: Call_GetCopyDBClusterParameterGroup_613377; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the specified DB cluster parameter group.
  ## 
  let valid = call_613393.validator(path, query, header, formData, body)
  let scheme = call_613393.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613393.url(scheme.get, call_613393.host, call_613393.base,
                         call_613393.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613393, url, valid)

proc call*(call_613394: Call_GetCopyDBClusterParameterGroup_613377;
          TargetDBClusterParameterGroupDescription: string;
          TargetDBClusterParameterGroupIdentifier: string;
          SourceDBClusterParameterGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCopyDBClusterParameterGroup
  ## Copies the specified DB cluster parameter group.
  ##   TargetDBClusterParameterGroupDescription: string (required)
  ##                                           : A description for the copied DB cluster parameter group.
  ##   Tags: JArray
  ##       : The tags to be assigned to the copied DB cluster parameter group.
  ##   TargetDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   Action: string (required)
  ##   SourceDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   Version: string (required)
  var query_613395 = newJObject()
  add(query_613395, "TargetDBClusterParameterGroupDescription",
      newJString(TargetDBClusterParameterGroupDescription))
  if Tags != nil:
    query_613395.add "Tags", Tags
  add(query_613395, "TargetDBClusterParameterGroupIdentifier",
      newJString(TargetDBClusterParameterGroupIdentifier))
  add(query_613395, "Action", newJString(Action))
  add(query_613395, "SourceDBClusterParameterGroupIdentifier",
      newJString(SourceDBClusterParameterGroupIdentifier))
  add(query_613395, "Version", newJString(Version))
  result = call_613394.call(nil, query_613395, nil, nil, nil)

var getCopyDBClusterParameterGroup* = Call_GetCopyDBClusterParameterGroup_613377(
    name: "getCopyDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterParameterGroup",
    validator: validate_GetCopyDBClusterParameterGroup_613378, base: "/",
    url: url_GetCopyDBClusterParameterGroup_613379,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBClusterSnapshot_613437 = ref object of OpenApiRestCall_612642
proc url_PostCopyDBClusterSnapshot_613439(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCopyDBClusterSnapshot_613438(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can't copy from one AWS Region to another.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613440 = query.getOrDefault("Action")
  valid_613440 = validateParameter(valid_613440, JString, required = true,
                                 default = newJString("CopyDBClusterSnapshot"))
  if valid_613440 != nil:
    section.add "Action", valid_613440
  var valid_613441 = query.getOrDefault("Version")
  valid_613441 = validateParameter(valid_613441, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613441 != nil:
    section.add "Version", valid_613441
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613442 = header.getOrDefault("X-Amz-Signature")
  valid_613442 = validateParameter(valid_613442, JString, required = false,
                                 default = nil)
  if valid_613442 != nil:
    section.add "X-Amz-Signature", valid_613442
  var valid_613443 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613443 = validateParameter(valid_613443, JString, required = false,
                                 default = nil)
  if valid_613443 != nil:
    section.add "X-Amz-Content-Sha256", valid_613443
  var valid_613444 = header.getOrDefault("X-Amz-Date")
  valid_613444 = validateParameter(valid_613444, JString, required = false,
                                 default = nil)
  if valid_613444 != nil:
    section.add "X-Amz-Date", valid_613444
  var valid_613445 = header.getOrDefault("X-Amz-Credential")
  valid_613445 = validateParameter(valid_613445, JString, required = false,
                                 default = nil)
  if valid_613445 != nil:
    section.add "X-Amz-Credential", valid_613445
  var valid_613446 = header.getOrDefault("X-Amz-Security-Token")
  valid_613446 = validateParameter(valid_613446, JString, required = false,
                                 default = nil)
  if valid_613446 != nil:
    section.add "X-Amz-Security-Token", valid_613446
  var valid_613447 = header.getOrDefault("X-Amz-Algorithm")
  valid_613447 = validateParameter(valid_613447, JString, required = false,
                                 default = nil)
  if valid_613447 != nil:
    section.add "X-Amz-Algorithm", valid_613447
  var valid_613448 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613448 = validateParameter(valid_613448, JString, required = false,
                                 default = nil)
  if valid_613448 != nil:
    section.add "X-Amz-SignedHeaders", valid_613448
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive.</p> <p>You can't copy from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>Specify a valid DB snapshot identifier.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot.</p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>.</p> <p> KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>You cannot encrypt an unencrypted DB cluster snapshot when you copy it. If you try to copy an unencrypted DB cluster snapshot and specify a value for the KmsKeyId parameter, an error is returned.</p>
  ##   PreSignedUrl: JString
  ##               : Not currently supported.
  ##   CopyTags: JBool
  ##           : True to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot, and otherwise false. The default is false.
  ##   TargetDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   Tags: JArray
  ##       : The tags to assign to the new DB cluster snapshot copy.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SourceDBClusterSnapshotIdentifier` field"
  var valid_613449 = formData.getOrDefault("SourceDBClusterSnapshotIdentifier")
  valid_613449 = validateParameter(valid_613449, JString, required = true,
                                 default = nil)
  if valid_613449 != nil:
    section.add "SourceDBClusterSnapshotIdentifier", valid_613449
  var valid_613450 = formData.getOrDefault("KmsKeyId")
  valid_613450 = validateParameter(valid_613450, JString, required = false,
                                 default = nil)
  if valid_613450 != nil:
    section.add "KmsKeyId", valid_613450
  var valid_613451 = formData.getOrDefault("PreSignedUrl")
  valid_613451 = validateParameter(valid_613451, JString, required = false,
                                 default = nil)
  if valid_613451 != nil:
    section.add "PreSignedUrl", valid_613451
  var valid_613452 = formData.getOrDefault("CopyTags")
  valid_613452 = validateParameter(valid_613452, JBool, required = false, default = nil)
  if valid_613452 != nil:
    section.add "CopyTags", valid_613452
  var valid_613453 = formData.getOrDefault("TargetDBClusterSnapshotIdentifier")
  valid_613453 = validateParameter(valid_613453, JString, required = true,
                                 default = nil)
  if valid_613453 != nil:
    section.add "TargetDBClusterSnapshotIdentifier", valid_613453
  var valid_613454 = formData.getOrDefault("Tags")
  valid_613454 = validateParameter(valid_613454, JArray, required = false,
                                 default = nil)
  if valid_613454 != nil:
    section.add "Tags", valid_613454
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613455: Call_PostCopyDBClusterSnapshot_613437; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can't copy from one AWS Region to another.</p>
  ## 
  let valid = call_613455.validator(path, query, header, formData, body)
  let scheme = call_613455.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613455.url(scheme.get, call_613455.host, call_613455.base,
                         call_613455.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613455, url, valid)

proc call*(call_613456: Call_PostCopyDBClusterSnapshot_613437;
          SourceDBClusterSnapshotIdentifier: string;
          TargetDBClusterSnapshotIdentifier: string; KmsKeyId: string = "";
          PreSignedUrl: string = ""; CopyTags: bool = false;
          Action: string = "CopyDBClusterSnapshot"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCopyDBClusterSnapshot
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can't copy from one AWS Region to another.</p>
  ##   SourceDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive.</p> <p>You can't copy from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>Specify a valid DB snapshot identifier.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot.</p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>.</p> <p> KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>You cannot encrypt an unencrypted DB cluster snapshot when you copy it. If you try to copy an unencrypted DB cluster snapshot and specify a value for the KmsKeyId parameter, an error is returned.</p>
  ##   PreSignedUrl: string
  ##               : Not currently supported.
  ##   CopyTags: bool
  ##           : True to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot, and otherwise false. The default is false.
  ##   TargetDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : The tags to assign to the new DB cluster snapshot copy.
  ##   Version: string (required)
  var query_613457 = newJObject()
  var formData_613458 = newJObject()
  add(formData_613458, "SourceDBClusterSnapshotIdentifier",
      newJString(SourceDBClusterSnapshotIdentifier))
  add(formData_613458, "KmsKeyId", newJString(KmsKeyId))
  add(formData_613458, "PreSignedUrl", newJString(PreSignedUrl))
  add(formData_613458, "CopyTags", newJBool(CopyTags))
  add(formData_613458, "TargetDBClusterSnapshotIdentifier",
      newJString(TargetDBClusterSnapshotIdentifier))
  add(query_613457, "Action", newJString(Action))
  if Tags != nil:
    formData_613458.add "Tags", Tags
  add(query_613457, "Version", newJString(Version))
  result = call_613456.call(nil, query_613457, nil, formData_613458, nil)

var postCopyDBClusterSnapshot* = Call_PostCopyDBClusterSnapshot_613437(
    name: "postCopyDBClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterSnapshot",
    validator: validate_PostCopyDBClusterSnapshot_613438, base: "/",
    url: url_PostCopyDBClusterSnapshot_613439,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBClusterSnapshot_613416 = ref object of OpenApiRestCall_612642
proc url_GetCopyDBClusterSnapshot_613418(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCopyDBClusterSnapshot_613417(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can't copy from one AWS Region to another.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : The tags to assign to the new DB cluster snapshot copy.
  ##   KmsKeyId: JString
  ##           : <p>The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot.</p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>.</p> <p> KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>You cannot encrypt an unencrypted DB cluster snapshot when you copy it. If you try to copy an unencrypted DB cluster snapshot and specify a value for the KmsKeyId parameter, an error is returned.</p>
  ##   PreSignedUrl: JString
  ##               : Not currently supported.
  ##   TargetDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   SourceDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive.</p> <p>You can't copy from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>Specify a valid DB snapshot identifier.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   Action: JString (required)
  ##   CopyTags: JBool
  ##           : True to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot, and otherwise false. The default is false.
  ##   Version: JString (required)
  section = newJObject()
  var valid_613419 = query.getOrDefault("Tags")
  valid_613419 = validateParameter(valid_613419, JArray, required = false,
                                 default = nil)
  if valid_613419 != nil:
    section.add "Tags", valid_613419
  var valid_613420 = query.getOrDefault("KmsKeyId")
  valid_613420 = validateParameter(valid_613420, JString, required = false,
                                 default = nil)
  if valid_613420 != nil:
    section.add "KmsKeyId", valid_613420
  var valid_613421 = query.getOrDefault("PreSignedUrl")
  valid_613421 = validateParameter(valid_613421, JString, required = false,
                                 default = nil)
  if valid_613421 != nil:
    section.add "PreSignedUrl", valid_613421
  assert query != nil, "query argument is necessary due to required `TargetDBClusterSnapshotIdentifier` field"
  var valid_613422 = query.getOrDefault("TargetDBClusterSnapshotIdentifier")
  valid_613422 = validateParameter(valid_613422, JString, required = true,
                                 default = nil)
  if valid_613422 != nil:
    section.add "TargetDBClusterSnapshotIdentifier", valid_613422
  var valid_613423 = query.getOrDefault("SourceDBClusterSnapshotIdentifier")
  valid_613423 = validateParameter(valid_613423, JString, required = true,
                                 default = nil)
  if valid_613423 != nil:
    section.add "SourceDBClusterSnapshotIdentifier", valid_613423
  var valid_613424 = query.getOrDefault("Action")
  valid_613424 = validateParameter(valid_613424, JString, required = true,
                                 default = newJString("CopyDBClusterSnapshot"))
  if valid_613424 != nil:
    section.add "Action", valid_613424
  var valid_613425 = query.getOrDefault("CopyTags")
  valid_613425 = validateParameter(valid_613425, JBool, required = false, default = nil)
  if valid_613425 != nil:
    section.add "CopyTags", valid_613425
  var valid_613426 = query.getOrDefault("Version")
  valid_613426 = validateParameter(valid_613426, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613426 != nil:
    section.add "Version", valid_613426
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613427 = header.getOrDefault("X-Amz-Signature")
  valid_613427 = validateParameter(valid_613427, JString, required = false,
                                 default = nil)
  if valid_613427 != nil:
    section.add "X-Amz-Signature", valid_613427
  var valid_613428 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613428 = validateParameter(valid_613428, JString, required = false,
                                 default = nil)
  if valid_613428 != nil:
    section.add "X-Amz-Content-Sha256", valid_613428
  var valid_613429 = header.getOrDefault("X-Amz-Date")
  valid_613429 = validateParameter(valid_613429, JString, required = false,
                                 default = nil)
  if valid_613429 != nil:
    section.add "X-Amz-Date", valid_613429
  var valid_613430 = header.getOrDefault("X-Amz-Credential")
  valid_613430 = validateParameter(valid_613430, JString, required = false,
                                 default = nil)
  if valid_613430 != nil:
    section.add "X-Amz-Credential", valid_613430
  var valid_613431 = header.getOrDefault("X-Amz-Security-Token")
  valid_613431 = validateParameter(valid_613431, JString, required = false,
                                 default = nil)
  if valid_613431 != nil:
    section.add "X-Amz-Security-Token", valid_613431
  var valid_613432 = header.getOrDefault("X-Amz-Algorithm")
  valid_613432 = validateParameter(valid_613432, JString, required = false,
                                 default = nil)
  if valid_613432 != nil:
    section.add "X-Amz-Algorithm", valid_613432
  var valid_613433 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613433 = validateParameter(valid_613433, JString, required = false,
                                 default = nil)
  if valid_613433 != nil:
    section.add "X-Amz-SignedHeaders", valid_613433
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613434: Call_GetCopyDBClusterSnapshot_613416; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can't copy from one AWS Region to another.</p>
  ## 
  let valid = call_613434.validator(path, query, header, formData, body)
  let scheme = call_613434.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613434.url(scheme.get, call_613434.host, call_613434.base,
                         call_613434.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613434, url, valid)

proc call*(call_613435: Call_GetCopyDBClusterSnapshot_613416;
          TargetDBClusterSnapshotIdentifier: string;
          SourceDBClusterSnapshotIdentifier: string; Tags: JsonNode = nil;
          KmsKeyId: string = ""; PreSignedUrl: string = "";
          Action: string = "CopyDBClusterSnapshot"; CopyTags: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getCopyDBClusterSnapshot
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can't copy from one AWS Region to another.</p>
  ##   Tags: JArray
  ##       : The tags to assign to the new DB cluster snapshot copy.
  ##   KmsKeyId: string
  ##           : <p>The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot.</p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>.</p> <p> KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>You cannot encrypt an unencrypted DB cluster snapshot when you copy it. If you try to copy an unencrypted DB cluster snapshot and specify a value for the KmsKeyId parameter, an error is returned.</p>
  ##   PreSignedUrl: string
  ##               : Not currently supported.
  ##   TargetDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   SourceDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive.</p> <p>You can't copy from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>Specify a valid DB snapshot identifier.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   Action: string (required)
  ##   CopyTags: bool
  ##           : True to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot, and otherwise false. The default is false.
  ##   Version: string (required)
  var query_613436 = newJObject()
  if Tags != nil:
    query_613436.add "Tags", Tags
  add(query_613436, "KmsKeyId", newJString(KmsKeyId))
  add(query_613436, "PreSignedUrl", newJString(PreSignedUrl))
  add(query_613436, "TargetDBClusterSnapshotIdentifier",
      newJString(TargetDBClusterSnapshotIdentifier))
  add(query_613436, "SourceDBClusterSnapshotIdentifier",
      newJString(SourceDBClusterSnapshotIdentifier))
  add(query_613436, "Action", newJString(Action))
  add(query_613436, "CopyTags", newJBool(CopyTags))
  add(query_613436, "Version", newJString(Version))
  result = call_613435.call(nil, query_613436, nil, nil, nil)

var getCopyDBClusterSnapshot* = Call_GetCopyDBClusterSnapshot_613416(
    name: "getCopyDBClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterSnapshot",
    validator: validate_GetCopyDBClusterSnapshot_613417, base: "/",
    url: url_GetCopyDBClusterSnapshot_613418, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBParameterGroup_613478 = ref object of OpenApiRestCall_612642
proc url_PostCopyDBParameterGroup_613480(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCopyDBParameterGroup_613479(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Copies the specified DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613481 = query.getOrDefault("Action")
  valid_613481 = validateParameter(valid_613481, JString, required = true,
                                 default = newJString("CopyDBParameterGroup"))
  if valid_613481 != nil:
    section.add "Action", valid_613481
  var valid_613482 = query.getOrDefault("Version")
  valid_613482 = validateParameter(valid_613482, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613482 != nil:
    section.add "Version", valid_613482
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613483 = header.getOrDefault("X-Amz-Signature")
  valid_613483 = validateParameter(valid_613483, JString, required = false,
                                 default = nil)
  if valid_613483 != nil:
    section.add "X-Amz-Signature", valid_613483
  var valid_613484 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613484 = validateParameter(valid_613484, JString, required = false,
                                 default = nil)
  if valid_613484 != nil:
    section.add "X-Amz-Content-Sha256", valid_613484
  var valid_613485 = header.getOrDefault("X-Amz-Date")
  valid_613485 = validateParameter(valid_613485, JString, required = false,
                                 default = nil)
  if valid_613485 != nil:
    section.add "X-Amz-Date", valid_613485
  var valid_613486 = header.getOrDefault("X-Amz-Credential")
  valid_613486 = validateParameter(valid_613486, JString, required = false,
                                 default = nil)
  if valid_613486 != nil:
    section.add "X-Amz-Credential", valid_613486
  var valid_613487 = header.getOrDefault("X-Amz-Security-Token")
  valid_613487 = validateParameter(valid_613487, JString, required = false,
                                 default = nil)
  if valid_613487 != nil:
    section.add "X-Amz-Security-Token", valid_613487
  var valid_613488 = header.getOrDefault("X-Amz-Algorithm")
  valid_613488 = validateParameter(valid_613488, JString, required = false,
                                 default = nil)
  if valid_613488 != nil:
    section.add "X-Amz-Algorithm", valid_613488
  var valid_613489 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613489 = validateParameter(valid_613489, JString, required = false,
                                 default = nil)
  if valid_613489 != nil:
    section.add "X-Amz-SignedHeaders", valid_613489
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceDBParameterGroupIdentifier: JString (required)
  ##                                   : <p>The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   TargetDBParameterGroupIdentifier: JString (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank.</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  ##   TargetDBParameterGroupDescription: JString (required)
  ##                                    : A description for the copied DB parameter group.
  ##   Tags: JArray
  ##       : The tags to be assigned to the copied DB parameter group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SourceDBParameterGroupIdentifier` field"
  var valid_613490 = formData.getOrDefault("SourceDBParameterGroupIdentifier")
  valid_613490 = validateParameter(valid_613490, JString, required = true,
                                 default = nil)
  if valid_613490 != nil:
    section.add "SourceDBParameterGroupIdentifier", valid_613490
  var valid_613491 = formData.getOrDefault("TargetDBParameterGroupIdentifier")
  valid_613491 = validateParameter(valid_613491, JString, required = true,
                                 default = nil)
  if valid_613491 != nil:
    section.add "TargetDBParameterGroupIdentifier", valid_613491
  var valid_613492 = formData.getOrDefault("TargetDBParameterGroupDescription")
  valid_613492 = validateParameter(valid_613492, JString, required = true,
                                 default = nil)
  if valid_613492 != nil:
    section.add "TargetDBParameterGroupDescription", valid_613492
  var valid_613493 = formData.getOrDefault("Tags")
  valid_613493 = validateParameter(valid_613493, JArray, required = false,
                                 default = nil)
  if valid_613493 != nil:
    section.add "Tags", valid_613493
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613494: Call_PostCopyDBParameterGroup_613478; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the specified DB parameter group.
  ## 
  let valid = call_613494.validator(path, query, header, formData, body)
  let scheme = call_613494.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613494.url(scheme.get, call_613494.host, call_613494.base,
                         call_613494.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613494, url, valid)

proc call*(call_613495: Call_PostCopyDBParameterGroup_613478;
          SourceDBParameterGroupIdentifier: string;
          TargetDBParameterGroupIdentifier: string;
          TargetDBParameterGroupDescription: string;
          Action: string = "CopyDBParameterGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCopyDBParameterGroup
  ## Copies the specified DB parameter group.
  ##   SourceDBParameterGroupIdentifier: string (required)
  ##                                   : <p>The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   TargetDBParameterGroupIdentifier: string (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank.</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  ##   TargetDBParameterGroupDescription: string (required)
  ##                                    : A description for the copied DB parameter group.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : The tags to be assigned to the copied DB parameter group.
  ##   Version: string (required)
  var query_613496 = newJObject()
  var formData_613497 = newJObject()
  add(formData_613497, "SourceDBParameterGroupIdentifier",
      newJString(SourceDBParameterGroupIdentifier))
  add(formData_613497, "TargetDBParameterGroupIdentifier",
      newJString(TargetDBParameterGroupIdentifier))
  add(formData_613497, "TargetDBParameterGroupDescription",
      newJString(TargetDBParameterGroupDescription))
  add(query_613496, "Action", newJString(Action))
  if Tags != nil:
    formData_613497.add "Tags", Tags
  add(query_613496, "Version", newJString(Version))
  result = call_613495.call(nil, query_613496, nil, formData_613497, nil)

var postCopyDBParameterGroup* = Call_PostCopyDBParameterGroup_613478(
    name: "postCopyDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBParameterGroup",
    validator: validate_PostCopyDBParameterGroup_613479, base: "/",
    url: url_PostCopyDBParameterGroup_613480, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBParameterGroup_613459 = ref object of OpenApiRestCall_612642
proc url_GetCopyDBParameterGroup_613461(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCopyDBParameterGroup_613460(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Copies the specified DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceDBParameterGroupIdentifier: JString (required)
  ##                                   : <p>The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   Tags: JArray
  ##       : The tags to be assigned to the copied DB parameter group.
  ##   TargetDBParameterGroupDescription: JString (required)
  ##                                    : A description for the copied DB parameter group.
  ##   TargetDBParameterGroupIdentifier: JString (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank.</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `SourceDBParameterGroupIdentifier` field"
  var valid_613462 = query.getOrDefault("SourceDBParameterGroupIdentifier")
  valid_613462 = validateParameter(valid_613462, JString, required = true,
                                 default = nil)
  if valid_613462 != nil:
    section.add "SourceDBParameterGroupIdentifier", valid_613462
  var valid_613463 = query.getOrDefault("Tags")
  valid_613463 = validateParameter(valid_613463, JArray, required = false,
                                 default = nil)
  if valid_613463 != nil:
    section.add "Tags", valid_613463
  var valid_613464 = query.getOrDefault("TargetDBParameterGroupDescription")
  valid_613464 = validateParameter(valid_613464, JString, required = true,
                                 default = nil)
  if valid_613464 != nil:
    section.add "TargetDBParameterGroupDescription", valid_613464
  var valid_613465 = query.getOrDefault("TargetDBParameterGroupIdentifier")
  valid_613465 = validateParameter(valid_613465, JString, required = true,
                                 default = nil)
  if valid_613465 != nil:
    section.add "TargetDBParameterGroupIdentifier", valid_613465
  var valid_613466 = query.getOrDefault("Action")
  valid_613466 = validateParameter(valid_613466, JString, required = true,
                                 default = newJString("CopyDBParameterGroup"))
  if valid_613466 != nil:
    section.add "Action", valid_613466
  var valid_613467 = query.getOrDefault("Version")
  valid_613467 = validateParameter(valid_613467, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613467 != nil:
    section.add "Version", valid_613467
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613468 = header.getOrDefault("X-Amz-Signature")
  valid_613468 = validateParameter(valid_613468, JString, required = false,
                                 default = nil)
  if valid_613468 != nil:
    section.add "X-Amz-Signature", valid_613468
  var valid_613469 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613469 = validateParameter(valid_613469, JString, required = false,
                                 default = nil)
  if valid_613469 != nil:
    section.add "X-Amz-Content-Sha256", valid_613469
  var valid_613470 = header.getOrDefault("X-Amz-Date")
  valid_613470 = validateParameter(valid_613470, JString, required = false,
                                 default = nil)
  if valid_613470 != nil:
    section.add "X-Amz-Date", valid_613470
  var valid_613471 = header.getOrDefault("X-Amz-Credential")
  valid_613471 = validateParameter(valid_613471, JString, required = false,
                                 default = nil)
  if valid_613471 != nil:
    section.add "X-Amz-Credential", valid_613471
  var valid_613472 = header.getOrDefault("X-Amz-Security-Token")
  valid_613472 = validateParameter(valid_613472, JString, required = false,
                                 default = nil)
  if valid_613472 != nil:
    section.add "X-Amz-Security-Token", valid_613472
  var valid_613473 = header.getOrDefault("X-Amz-Algorithm")
  valid_613473 = validateParameter(valid_613473, JString, required = false,
                                 default = nil)
  if valid_613473 != nil:
    section.add "X-Amz-Algorithm", valid_613473
  var valid_613474 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613474 = validateParameter(valid_613474, JString, required = false,
                                 default = nil)
  if valid_613474 != nil:
    section.add "X-Amz-SignedHeaders", valid_613474
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613475: Call_GetCopyDBParameterGroup_613459; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the specified DB parameter group.
  ## 
  let valid = call_613475.validator(path, query, header, formData, body)
  let scheme = call_613475.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613475.url(scheme.get, call_613475.host, call_613475.base,
                         call_613475.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613475, url, valid)

proc call*(call_613476: Call_GetCopyDBParameterGroup_613459;
          SourceDBParameterGroupIdentifier: string;
          TargetDBParameterGroupDescription: string;
          TargetDBParameterGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCopyDBParameterGroup
  ## Copies the specified DB parameter group.
  ##   SourceDBParameterGroupIdentifier: string (required)
  ##                                   : <p>The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   Tags: JArray
  ##       : The tags to be assigned to the copied DB parameter group.
  ##   TargetDBParameterGroupDescription: string (required)
  ##                                    : A description for the copied DB parameter group.
  ##   TargetDBParameterGroupIdentifier: string (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank.</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613477 = newJObject()
  add(query_613477, "SourceDBParameterGroupIdentifier",
      newJString(SourceDBParameterGroupIdentifier))
  if Tags != nil:
    query_613477.add "Tags", Tags
  add(query_613477, "TargetDBParameterGroupDescription",
      newJString(TargetDBParameterGroupDescription))
  add(query_613477, "TargetDBParameterGroupIdentifier",
      newJString(TargetDBParameterGroupIdentifier))
  add(query_613477, "Action", newJString(Action))
  add(query_613477, "Version", newJString(Version))
  result = call_613476.call(nil, query_613477, nil, nil, nil)

var getCopyDBParameterGroup* = Call_GetCopyDBParameterGroup_613459(
    name: "getCopyDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBParameterGroup",
    validator: validate_GetCopyDBParameterGroup_613460, base: "/",
    url: url_GetCopyDBParameterGroup_613461, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBCluster_613537 = ref object of OpenApiRestCall_612642
proc url_PostCreateDBCluster_613539(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBCluster_613538(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Creates a new Amazon Neptune DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon Neptune DB instance.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613540 = query.getOrDefault("Action")
  valid_613540 = validateParameter(valid_613540, JString, required = true,
                                 default = newJString("CreateDBCluster"))
  if valid_613540 != nil:
    section.add "Action", valid_613540
  var valid_613541 = query.getOrDefault("Version")
  valid_613541 = validateParameter(valid_613541, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613541 != nil:
    section.add "Version", valid_613541
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613542 = header.getOrDefault("X-Amz-Signature")
  valid_613542 = validateParameter(valid_613542, JString, required = false,
                                 default = nil)
  if valid_613542 != nil:
    section.add "X-Amz-Signature", valid_613542
  var valid_613543 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613543 = validateParameter(valid_613543, JString, required = false,
                                 default = nil)
  if valid_613543 != nil:
    section.add "X-Amz-Content-Sha256", valid_613543
  var valid_613544 = header.getOrDefault("X-Amz-Date")
  valid_613544 = validateParameter(valid_613544, JString, required = false,
                                 default = nil)
  if valid_613544 != nil:
    section.add "X-Amz-Date", valid_613544
  var valid_613545 = header.getOrDefault("X-Amz-Credential")
  valid_613545 = validateParameter(valid_613545, JString, required = false,
                                 default = nil)
  if valid_613545 != nil:
    section.add "X-Amz-Credential", valid_613545
  var valid_613546 = header.getOrDefault("X-Amz-Security-Token")
  valid_613546 = validateParameter(valid_613546, JString, required = false,
                                 default = nil)
  if valid_613546 != nil:
    section.add "X-Amz-Security-Token", valid_613546
  var valid_613547 = header.getOrDefault("X-Amz-Algorithm")
  valid_613547 = validateParameter(valid_613547, JString, required = false,
                                 default = nil)
  if valid_613547 != nil:
    section.add "X-Amz-Algorithm", valid_613547
  var valid_613548 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613548 = validateParameter(valid_613548, JString, required = false,
                                 default = nil)
  if valid_613548 != nil:
    section.add "X-Amz-SignedHeaders", valid_613548
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>8182</code> </p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Neptune User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter.</p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Neptune User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   MasterUsername: JString
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use. Currently, setting this parameter has no effect.</p> <p>Example: <code>1.0.1</code> </p>
  ##   DatabaseName: JString
  ##               : The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Neptune will not create a database in the DB cluster you are creating.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   AvailabilityZones: JArray
  ##                    : A list of EC2 Availability Zones that instances in the DB cluster can be created in.
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>neptune</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key is not specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon Neptune will use the encryption key used to encrypt the source. Otherwise, Amazon Neptune will use your default encryption key.</p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is true and <code>ReplicationSourceIdentifier</code> is not specified, then Amazon Neptune will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   PreSignedUrl: JString
  ##               : This parameter is not currently supported.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs.
  ##   Tags: JArray
  ##       : The tags to assign to the new DB cluster.
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: JString
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   CharacterSetName: JString
  ##                   :  <i>(Not supported by Neptune)</i> 
  ##   DBClusterParameterGroupName: JString
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   ReplicationSourceIdentifier: JString
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   StorageEncrypted: JBool
  ##                   : Specifies whether the DB cluster is encrypted.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  section = newJObject()
  var valid_613549 = formData.getOrDefault("Port")
  valid_613549 = validateParameter(valid_613549, JInt, required = false, default = nil)
  if valid_613549 != nil:
    section.add "Port", valid_613549
  var valid_613550 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_613550 = validateParameter(valid_613550, JString, required = false,
                                 default = nil)
  if valid_613550 != nil:
    section.add "PreferredMaintenanceWindow", valid_613550
  var valid_613551 = formData.getOrDefault("PreferredBackupWindow")
  valid_613551 = validateParameter(valid_613551, JString, required = false,
                                 default = nil)
  if valid_613551 != nil:
    section.add "PreferredBackupWindow", valid_613551
  var valid_613552 = formData.getOrDefault("MasterUserPassword")
  valid_613552 = validateParameter(valid_613552, JString, required = false,
                                 default = nil)
  if valid_613552 != nil:
    section.add "MasterUserPassword", valid_613552
  var valid_613553 = formData.getOrDefault("MasterUsername")
  valid_613553 = validateParameter(valid_613553, JString, required = false,
                                 default = nil)
  if valid_613553 != nil:
    section.add "MasterUsername", valid_613553
  var valid_613554 = formData.getOrDefault("EngineVersion")
  valid_613554 = validateParameter(valid_613554, JString, required = false,
                                 default = nil)
  if valid_613554 != nil:
    section.add "EngineVersion", valid_613554
  var valid_613555 = formData.getOrDefault("DatabaseName")
  valid_613555 = validateParameter(valid_613555, JString, required = false,
                                 default = nil)
  if valid_613555 != nil:
    section.add "DatabaseName", valid_613555
  var valid_613556 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_613556 = validateParameter(valid_613556, JArray, required = false,
                                 default = nil)
  if valid_613556 != nil:
    section.add "VpcSecurityGroupIds", valid_613556
  var valid_613557 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_613557 = validateParameter(valid_613557, JBool, required = false, default = nil)
  if valid_613557 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_613557
  var valid_613558 = formData.getOrDefault("AvailabilityZones")
  valid_613558 = validateParameter(valid_613558, JArray, required = false,
                                 default = nil)
  if valid_613558 != nil:
    section.add "AvailabilityZones", valid_613558
  var valid_613559 = formData.getOrDefault("BackupRetentionPeriod")
  valid_613559 = validateParameter(valid_613559, JInt, required = false, default = nil)
  if valid_613559 != nil:
    section.add "BackupRetentionPeriod", valid_613559
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_613560 = formData.getOrDefault("Engine")
  valid_613560 = validateParameter(valid_613560, JString, required = true,
                                 default = nil)
  if valid_613560 != nil:
    section.add "Engine", valid_613560
  var valid_613561 = formData.getOrDefault("KmsKeyId")
  valid_613561 = validateParameter(valid_613561, JString, required = false,
                                 default = nil)
  if valid_613561 != nil:
    section.add "KmsKeyId", valid_613561
  var valid_613562 = formData.getOrDefault("PreSignedUrl")
  valid_613562 = validateParameter(valid_613562, JString, required = false,
                                 default = nil)
  if valid_613562 != nil:
    section.add "PreSignedUrl", valid_613562
  var valid_613563 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_613563 = validateParameter(valid_613563, JArray, required = false,
                                 default = nil)
  if valid_613563 != nil:
    section.add "EnableCloudwatchLogsExports", valid_613563
  var valid_613564 = formData.getOrDefault("Tags")
  valid_613564 = validateParameter(valid_613564, JArray, required = false,
                                 default = nil)
  if valid_613564 != nil:
    section.add "Tags", valid_613564
  var valid_613565 = formData.getOrDefault("DBSubnetGroupName")
  valid_613565 = validateParameter(valid_613565, JString, required = false,
                                 default = nil)
  if valid_613565 != nil:
    section.add "DBSubnetGroupName", valid_613565
  var valid_613566 = formData.getOrDefault("OptionGroupName")
  valid_613566 = validateParameter(valid_613566, JString, required = false,
                                 default = nil)
  if valid_613566 != nil:
    section.add "OptionGroupName", valid_613566
  var valid_613567 = formData.getOrDefault("CharacterSetName")
  valid_613567 = validateParameter(valid_613567, JString, required = false,
                                 default = nil)
  if valid_613567 != nil:
    section.add "CharacterSetName", valid_613567
  var valid_613568 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_613568 = validateParameter(valid_613568, JString, required = false,
                                 default = nil)
  if valid_613568 != nil:
    section.add "DBClusterParameterGroupName", valid_613568
  var valid_613569 = formData.getOrDefault("ReplicationSourceIdentifier")
  valid_613569 = validateParameter(valid_613569, JString, required = false,
                                 default = nil)
  if valid_613569 != nil:
    section.add "ReplicationSourceIdentifier", valid_613569
  var valid_613570 = formData.getOrDefault("StorageEncrypted")
  valid_613570 = validateParameter(valid_613570, JBool, required = false, default = nil)
  if valid_613570 != nil:
    section.add "StorageEncrypted", valid_613570
  var valid_613571 = formData.getOrDefault("DBClusterIdentifier")
  valid_613571 = validateParameter(valid_613571, JString, required = true,
                                 default = nil)
  if valid_613571 != nil:
    section.add "DBClusterIdentifier", valid_613571
  var valid_613572 = formData.getOrDefault("DeletionProtection")
  valid_613572 = validateParameter(valid_613572, JBool, required = false, default = nil)
  if valid_613572 != nil:
    section.add "DeletionProtection", valid_613572
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613573: Call_PostCreateDBCluster_613537; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new Amazon Neptune DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon Neptune DB instance.</p>
  ## 
  let valid = call_613573.validator(path, query, header, formData, body)
  let scheme = call_613573.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613573.url(scheme.get, call_613573.host, call_613573.base,
                         call_613573.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613573, url, valid)

proc call*(call_613574: Call_PostCreateDBCluster_613537; Engine: string;
          DBClusterIdentifier: string; Port: int = 0;
          PreferredMaintenanceWindow: string = "";
          PreferredBackupWindow: string = ""; MasterUserPassword: string = "";
          MasterUsername: string = ""; EngineVersion: string = "";
          DatabaseName: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false;
          AvailabilityZones: JsonNode = nil; BackupRetentionPeriod: int = 0;
          KmsKeyId: string = ""; PreSignedUrl: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "CreateDBCluster"; Tags: JsonNode = nil;
          DBSubnetGroupName: string = ""; OptionGroupName: string = "";
          CharacterSetName: string = ""; DBClusterParameterGroupName: string = "";
          ReplicationSourceIdentifier: string = ""; Version: string = "2014-10-31";
          StorageEncrypted: bool = false; DeletionProtection: bool = false): Recallable =
  ## postCreateDBCluster
  ## <p>Creates a new Amazon Neptune DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon Neptune DB instance.</p>
  ##   Port: int
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>8182</code> </p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Neptune User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter.</p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Neptune User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   MasterUsername: string
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use. Currently, setting this parameter has no effect.</p> <p>Example: <code>1.0.1</code> </p>
  ##   DatabaseName: string
  ##               : The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Neptune will not create a database in the DB cluster you are creating.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   AvailabilityZones: JArray
  ##                    : A list of EC2 Availability Zones that instances in the DB cluster can be created in.
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>neptune</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key is not specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon Neptune will use the encryption key used to encrypt the source. Otherwise, Amazon Neptune will use your default encryption key.</p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is true and <code>ReplicationSourceIdentifier</code> is not specified, then Amazon Neptune will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   PreSignedUrl: string
  ##               : This parameter is not currently supported.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : The tags to assign to the new DB cluster.
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: string
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   CharacterSetName: string
  ##                   :  <i>(Not supported by Neptune)</i> 
  ##   DBClusterParameterGroupName: string
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   ReplicationSourceIdentifier: string
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   Version: string (required)
  ##   StorageEncrypted: bool
  ##                   : Specifies whether the DB cluster is encrypted.
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  var query_613575 = newJObject()
  var formData_613576 = newJObject()
  add(formData_613576, "Port", newJInt(Port))
  add(formData_613576, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_613576, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_613576, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_613576, "MasterUsername", newJString(MasterUsername))
  add(formData_613576, "EngineVersion", newJString(EngineVersion))
  add(formData_613576, "DatabaseName", newJString(DatabaseName))
  if VpcSecurityGroupIds != nil:
    formData_613576.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_613576, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if AvailabilityZones != nil:
    formData_613576.add "AvailabilityZones", AvailabilityZones
  add(formData_613576, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_613576, "Engine", newJString(Engine))
  add(formData_613576, "KmsKeyId", newJString(KmsKeyId))
  add(formData_613576, "PreSignedUrl", newJString(PreSignedUrl))
  if EnableCloudwatchLogsExports != nil:
    formData_613576.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_613575, "Action", newJString(Action))
  if Tags != nil:
    formData_613576.add "Tags", Tags
  add(formData_613576, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_613576, "OptionGroupName", newJString(OptionGroupName))
  add(formData_613576, "CharacterSetName", newJString(CharacterSetName))
  add(formData_613576, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(formData_613576, "ReplicationSourceIdentifier",
      newJString(ReplicationSourceIdentifier))
  add(query_613575, "Version", newJString(Version))
  add(formData_613576, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_613576, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_613576, "DeletionProtection", newJBool(DeletionProtection))
  result = call_613574.call(nil, query_613575, nil, formData_613576, nil)

var postCreateDBCluster* = Call_PostCreateDBCluster_613537(
    name: "postCreateDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBCluster",
    validator: validate_PostCreateDBCluster_613538, base: "/",
    url: url_PostCreateDBCluster_613539, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBCluster_613498 = ref object of OpenApiRestCall_612642
proc url_GetCreateDBCluster_613500(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBCluster_613499(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Creates a new Amazon Neptune DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon Neptune DB instance.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DatabaseName: JString
  ##               : The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Neptune will not create a database in the DB cluster you are creating.
  ##   StorageEncrypted: JBool
  ##                   : Specifies whether the DB cluster is encrypted.
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>neptune</code> </p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CharacterSetName: JString
  ##                   :  <i>(Not supported by Neptune)</i> 
  ##   Tags: JArray
  ##       : The tags to assign to the new DB cluster.
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key is not specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon Neptune will use the encryption key used to encrypt the source. Otherwise, Amazon Neptune will use your default encryption key.</p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is true and <code>ReplicationSourceIdentifier</code> is not specified, then Amazon Neptune will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   PreSignedUrl: JString
  ##               : This parameter is not currently supported.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   AvailabilityZones: JArray
  ##                    : A list of EC2 Availability Zones that instances in the DB cluster can be created in.
  ##   MasterUsername: JString
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs.
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use. Currently, setting this parameter has no effect.</p> <p>Example: <code>1.0.1</code> </p>
  ##   Action: JString (required)
  ##   Port: JInt
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>8182</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   ReplicationSourceIdentifier: JString
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: JString
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter.</p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Neptune User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Neptune User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_613501 = query.getOrDefault("DatabaseName")
  valid_613501 = validateParameter(valid_613501, JString, required = false,
                                 default = nil)
  if valid_613501 != nil:
    section.add "DatabaseName", valid_613501
  var valid_613502 = query.getOrDefault("StorageEncrypted")
  valid_613502 = validateParameter(valid_613502, JBool, required = false, default = nil)
  if valid_613502 != nil:
    section.add "StorageEncrypted", valid_613502
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_613503 = query.getOrDefault("Engine")
  valid_613503 = validateParameter(valid_613503, JString, required = true,
                                 default = nil)
  if valid_613503 != nil:
    section.add "Engine", valid_613503
  var valid_613504 = query.getOrDefault("DeletionProtection")
  valid_613504 = validateParameter(valid_613504, JBool, required = false, default = nil)
  if valid_613504 != nil:
    section.add "DeletionProtection", valid_613504
  var valid_613505 = query.getOrDefault("CharacterSetName")
  valid_613505 = validateParameter(valid_613505, JString, required = false,
                                 default = nil)
  if valid_613505 != nil:
    section.add "CharacterSetName", valid_613505
  var valid_613506 = query.getOrDefault("Tags")
  valid_613506 = validateParameter(valid_613506, JArray, required = false,
                                 default = nil)
  if valid_613506 != nil:
    section.add "Tags", valid_613506
  var valid_613507 = query.getOrDefault("KmsKeyId")
  valid_613507 = validateParameter(valid_613507, JString, required = false,
                                 default = nil)
  if valid_613507 != nil:
    section.add "KmsKeyId", valid_613507
  var valid_613508 = query.getOrDefault("DBClusterIdentifier")
  valid_613508 = validateParameter(valid_613508, JString, required = true,
                                 default = nil)
  if valid_613508 != nil:
    section.add "DBClusterIdentifier", valid_613508
  var valid_613509 = query.getOrDefault("PreSignedUrl")
  valid_613509 = validateParameter(valid_613509, JString, required = false,
                                 default = nil)
  if valid_613509 != nil:
    section.add "PreSignedUrl", valid_613509
  var valid_613510 = query.getOrDefault("DBClusterParameterGroupName")
  valid_613510 = validateParameter(valid_613510, JString, required = false,
                                 default = nil)
  if valid_613510 != nil:
    section.add "DBClusterParameterGroupName", valid_613510
  var valid_613511 = query.getOrDefault("AvailabilityZones")
  valid_613511 = validateParameter(valid_613511, JArray, required = false,
                                 default = nil)
  if valid_613511 != nil:
    section.add "AvailabilityZones", valid_613511
  var valid_613512 = query.getOrDefault("MasterUsername")
  valid_613512 = validateParameter(valid_613512, JString, required = false,
                                 default = nil)
  if valid_613512 != nil:
    section.add "MasterUsername", valid_613512
  var valid_613513 = query.getOrDefault("BackupRetentionPeriod")
  valid_613513 = validateParameter(valid_613513, JInt, required = false, default = nil)
  if valid_613513 != nil:
    section.add "BackupRetentionPeriod", valid_613513
  var valid_613514 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_613514 = validateParameter(valid_613514, JBool, required = false, default = nil)
  if valid_613514 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_613514
  var valid_613515 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_613515 = validateParameter(valid_613515, JArray, required = false,
                                 default = nil)
  if valid_613515 != nil:
    section.add "EnableCloudwatchLogsExports", valid_613515
  var valid_613516 = query.getOrDefault("EngineVersion")
  valid_613516 = validateParameter(valid_613516, JString, required = false,
                                 default = nil)
  if valid_613516 != nil:
    section.add "EngineVersion", valid_613516
  var valid_613517 = query.getOrDefault("Action")
  valid_613517 = validateParameter(valid_613517, JString, required = true,
                                 default = newJString("CreateDBCluster"))
  if valid_613517 != nil:
    section.add "Action", valid_613517
  var valid_613518 = query.getOrDefault("Port")
  valid_613518 = validateParameter(valid_613518, JInt, required = false, default = nil)
  if valid_613518 != nil:
    section.add "Port", valid_613518
  var valid_613519 = query.getOrDefault("VpcSecurityGroupIds")
  valid_613519 = validateParameter(valid_613519, JArray, required = false,
                                 default = nil)
  if valid_613519 != nil:
    section.add "VpcSecurityGroupIds", valid_613519
  var valid_613520 = query.getOrDefault("ReplicationSourceIdentifier")
  valid_613520 = validateParameter(valid_613520, JString, required = false,
                                 default = nil)
  if valid_613520 != nil:
    section.add "ReplicationSourceIdentifier", valid_613520
  var valid_613521 = query.getOrDefault("MasterUserPassword")
  valid_613521 = validateParameter(valid_613521, JString, required = false,
                                 default = nil)
  if valid_613521 != nil:
    section.add "MasterUserPassword", valid_613521
  var valid_613522 = query.getOrDefault("OptionGroupName")
  valid_613522 = validateParameter(valid_613522, JString, required = false,
                                 default = nil)
  if valid_613522 != nil:
    section.add "OptionGroupName", valid_613522
  var valid_613523 = query.getOrDefault("DBSubnetGroupName")
  valid_613523 = validateParameter(valid_613523, JString, required = false,
                                 default = nil)
  if valid_613523 != nil:
    section.add "DBSubnetGroupName", valid_613523
  var valid_613524 = query.getOrDefault("PreferredBackupWindow")
  valid_613524 = validateParameter(valid_613524, JString, required = false,
                                 default = nil)
  if valid_613524 != nil:
    section.add "PreferredBackupWindow", valid_613524
  var valid_613525 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_613525 = validateParameter(valid_613525, JString, required = false,
                                 default = nil)
  if valid_613525 != nil:
    section.add "PreferredMaintenanceWindow", valid_613525
  var valid_613526 = query.getOrDefault("Version")
  valid_613526 = validateParameter(valid_613526, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613526 != nil:
    section.add "Version", valid_613526
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613527 = header.getOrDefault("X-Amz-Signature")
  valid_613527 = validateParameter(valid_613527, JString, required = false,
                                 default = nil)
  if valid_613527 != nil:
    section.add "X-Amz-Signature", valid_613527
  var valid_613528 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613528 = validateParameter(valid_613528, JString, required = false,
                                 default = nil)
  if valid_613528 != nil:
    section.add "X-Amz-Content-Sha256", valid_613528
  var valid_613529 = header.getOrDefault("X-Amz-Date")
  valid_613529 = validateParameter(valid_613529, JString, required = false,
                                 default = nil)
  if valid_613529 != nil:
    section.add "X-Amz-Date", valid_613529
  var valid_613530 = header.getOrDefault("X-Amz-Credential")
  valid_613530 = validateParameter(valid_613530, JString, required = false,
                                 default = nil)
  if valid_613530 != nil:
    section.add "X-Amz-Credential", valid_613530
  var valid_613531 = header.getOrDefault("X-Amz-Security-Token")
  valid_613531 = validateParameter(valid_613531, JString, required = false,
                                 default = nil)
  if valid_613531 != nil:
    section.add "X-Amz-Security-Token", valid_613531
  var valid_613532 = header.getOrDefault("X-Amz-Algorithm")
  valid_613532 = validateParameter(valid_613532, JString, required = false,
                                 default = nil)
  if valid_613532 != nil:
    section.add "X-Amz-Algorithm", valid_613532
  var valid_613533 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613533 = validateParameter(valid_613533, JString, required = false,
                                 default = nil)
  if valid_613533 != nil:
    section.add "X-Amz-SignedHeaders", valid_613533
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613534: Call_GetCreateDBCluster_613498; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new Amazon Neptune DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon Neptune DB instance.</p>
  ## 
  let valid = call_613534.validator(path, query, header, formData, body)
  let scheme = call_613534.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613534.url(scheme.get, call_613534.host, call_613534.base,
                         call_613534.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613534, url, valid)

proc call*(call_613535: Call_GetCreateDBCluster_613498; Engine: string;
          DBClusterIdentifier: string; DatabaseName: string = "";
          StorageEncrypted: bool = false; DeletionProtection: bool = false;
          CharacterSetName: string = ""; Tags: JsonNode = nil; KmsKeyId: string = "";
          PreSignedUrl: string = ""; DBClusterParameterGroupName: string = "";
          AvailabilityZones: JsonNode = nil; MasterUsername: string = "";
          BackupRetentionPeriod: int = 0;
          EnableIAMDatabaseAuthentication: bool = false;
          EnableCloudwatchLogsExports: JsonNode = nil; EngineVersion: string = "";
          Action: string = "CreateDBCluster"; Port: int = 0;
          VpcSecurityGroupIds: JsonNode = nil;
          ReplicationSourceIdentifier: string = ""; MasterUserPassword: string = "";
          OptionGroupName: string = ""; DBSubnetGroupName: string = "";
          PreferredBackupWindow: string = "";
          PreferredMaintenanceWindow: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getCreateDBCluster
  ## <p>Creates a new Amazon Neptune DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon Neptune DB instance.</p>
  ##   DatabaseName: string
  ##               : The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Neptune will not create a database in the DB cluster you are creating.
  ##   StorageEncrypted: bool
  ##                   : Specifies whether the DB cluster is encrypted.
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>neptune</code> </p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CharacterSetName: string
  ##                   :  <i>(Not supported by Neptune)</i> 
  ##   Tags: JArray
  ##       : The tags to assign to the new DB cluster.
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key is not specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon Neptune will use the encryption key used to encrypt the source. Otherwise, Amazon Neptune will use your default encryption key.</p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is true and <code>ReplicationSourceIdentifier</code> is not specified, then Amazon Neptune will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   PreSignedUrl: string
  ##               : This parameter is not currently supported.
  ##   DBClusterParameterGroupName: string
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   AvailabilityZones: JArray
  ##                    : A list of EC2 Availability Zones that instances in the DB cluster can be created in.
  ##   MasterUsername: string
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs.
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use. Currently, setting this parameter has no effect.</p> <p>Example: <code>1.0.1</code> </p>
  ##   Action: string (required)
  ##   Port: int
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>8182</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   ReplicationSourceIdentifier: string
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: string
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter.</p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Neptune User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Neptune User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   Version: string (required)
  var query_613536 = newJObject()
  add(query_613536, "DatabaseName", newJString(DatabaseName))
  add(query_613536, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_613536, "Engine", newJString(Engine))
  add(query_613536, "DeletionProtection", newJBool(DeletionProtection))
  add(query_613536, "CharacterSetName", newJString(CharacterSetName))
  if Tags != nil:
    query_613536.add "Tags", Tags
  add(query_613536, "KmsKeyId", newJString(KmsKeyId))
  add(query_613536, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_613536, "PreSignedUrl", newJString(PreSignedUrl))
  add(query_613536, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if AvailabilityZones != nil:
    query_613536.add "AvailabilityZones", AvailabilityZones
  add(query_613536, "MasterUsername", newJString(MasterUsername))
  add(query_613536, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_613536, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if EnableCloudwatchLogsExports != nil:
    query_613536.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_613536, "EngineVersion", newJString(EngineVersion))
  add(query_613536, "Action", newJString(Action))
  add(query_613536, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    query_613536.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_613536, "ReplicationSourceIdentifier",
      newJString(ReplicationSourceIdentifier))
  add(query_613536, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_613536, "OptionGroupName", newJString(OptionGroupName))
  add(query_613536, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_613536, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_613536, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_613536, "Version", newJString(Version))
  result = call_613535.call(nil, query_613536, nil, nil, nil)

var getCreateDBCluster* = Call_GetCreateDBCluster_613498(
    name: "getCreateDBCluster", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=CreateDBCluster", validator: validate_GetCreateDBCluster_613499,
    base: "/", url: url_GetCreateDBCluster_613500,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBClusterParameterGroup_613596 = ref object of OpenApiRestCall_612642
proc url_PostCreateDBClusterParameterGroup_613598(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBClusterParameterGroup_613597(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <a>ModifyDBClusterParameterGroup</a>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <a>ModifyDBCluster</a>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect.</p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon Neptune console</a> or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613599 = query.getOrDefault("Action")
  valid_613599 = validateParameter(valid_613599, JString, required = true, default = newJString(
      "CreateDBClusterParameterGroup"))
  if valid_613599 != nil:
    section.add "Action", valid_613599
  var valid_613600 = query.getOrDefault("Version")
  valid_613600 = validateParameter(valid_613600, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613600 != nil:
    section.add "Version", valid_613600
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613601 = header.getOrDefault("X-Amz-Signature")
  valid_613601 = validateParameter(valid_613601, JString, required = false,
                                 default = nil)
  if valid_613601 != nil:
    section.add "X-Amz-Signature", valid_613601
  var valid_613602 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613602 = validateParameter(valid_613602, JString, required = false,
                                 default = nil)
  if valid_613602 != nil:
    section.add "X-Amz-Content-Sha256", valid_613602
  var valid_613603 = header.getOrDefault("X-Amz-Date")
  valid_613603 = validateParameter(valid_613603, JString, required = false,
                                 default = nil)
  if valid_613603 != nil:
    section.add "X-Amz-Date", valid_613603
  var valid_613604 = header.getOrDefault("X-Amz-Credential")
  valid_613604 = validateParameter(valid_613604, JString, required = false,
                                 default = nil)
  if valid_613604 != nil:
    section.add "X-Amz-Credential", valid_613604
  var valid_613605 = header.getOrDefault("X-Amz-Security-Token")
  valid_613605 = validateParameter(valid_613605, JString, required = false,
                                 default = nil)
  if valid_613605 != nil:
    section.add "X-Amz-Security-Token", valid_613605
  var valid_613606 = header.getOrDefault("X-Amz-Algorithm")
  valid_613606 = validateParameter(valid_613606, JString, required = false,
                                 default = nil)
  if valid_613606 != nil:
    section.add "X-Amz-Algorithm", valid_613606
  var valid_613607 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613607 = validateParameter(valid_613607, JString, required = false,
                                 default = nil)
  if valid_613607 != nil:
    section.add "X-Amz-SignedHeaders", valid_613607
  result.add "header", section
  ## parameters in `formData` object:
  ##   Description: JString (required)
  ##              : The description for the DB cluster parameter group.
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB cluster parameter group.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DBClusterParameterGroup.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Description` field"
  var valid_613608 = formData.getOrDefault("Description")
  valid_613608 = validateParameter(valid_613608, JString, required = true,
                                 default = nil)
  if valid_613608 != nil:
    section.add "Description", valid_613608
  var valid_613609 = formData.getOrDefault("Tags")
  valid_613609 = validateParameter(valid_613609, JArray, required = false,
                                 default = nil)
  if valid_613609 != nil:
    section.add "Tags", valid_613609
  var valid_613610 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_613610 = validateParameter(valid_613610, JString, required = true,
                                 default = nil)
  if valid_613610 != nil:
    section.add "DBClusterParameterGroupName", valid_613610
  var valid_613611 = formData.getOrDefault("DBParameterGroupFamily")
  valid_613611 = validateParameter(valid_613611, JString, required = true,
                                 default = nil)
  if valid_613611 != nil:
    section.add "DBParameterGroupFamily", valid_613611
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613612: Call_PostCreateDBClusterParameterGroup_613596;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <a>ModifyDBClusterParameterGroup</a>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <a>ModifyDBCluster</a>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect.</p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon Neptune console</a> or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_613612.validator(path, query, header, formData, body)
  let scheme = call_613612.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613612.url(scheme.get, call_613612.host, call_613612.base,
                         call_613612.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613612, url, valid)

proc call*(call_613613: Call_PostCreateDBClusterParameterGroup_613596;
          Description: string; DBClusterParameterGroupName: string;
          DBParameterGroupFamily: string;
          Action: string = "CreateDBClusterParameterGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBClusterParameterGroup
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <a>ModifyDBClusterParameterGroup</a>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <a>ModifyDBCluster</a>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect.</p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon Neptune console</a> or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ##   Description: string (required)
  ##              : The description for the DB cluster parameter group.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB cluster parameter group.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DBClusterParameterGroup.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Version: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.
  var query_613614 = newJObject()
  var formData_613615 = newJObject()
  add(formData_613615, "Description", newJString(Description))
  add(query_613614, "Action", newJString(Action))
  if Tags != nil:
    formData_613615.add "Tags", Tags
  add(formData_613615, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_613614, "Version", newJString(Version))
  add(formData_613615, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  result = call_613613.call(nil, query_613614, nil, formData_613615, nil)

var postCreateDBClusterParameterGroup* = Call_PostCreateDBClusterParameterGroup_613596(
    name: "postCreateDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterParameterGroup",
    validator: validate_PostCreateDBClusterParameterGroup_613597, base: "/",
    url: url_PostCreateDBClusterParameterGroup_613598,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBClusterParameterGroup_613577 = ref object of OpenApiRestCall_612642
proc url_GetCreateDBClusterParameterGroup_613579(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBClusterParameterGroup_613578(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <a>ModifyDBClusterParameterGroup</a>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <a>ModifyDBCluster</a>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect.</p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon Neptune console</a> or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB cluster parameter group.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DBClusterParameterGroup.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Action: JString (required)
  ##   Description: JString (required)
  ##              : The description for the DB cluster parameter group.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_613580 = query.getOrDefault("DBParameterGroupFamily")
  valid_613580 = validateParameter(valid_613580, JString, required = true,
                                 default = nil)
  if valid_613580 != nil:
    section.add "DBParameterGroupFamily", valid_613580
  var valid_613581 = query.getOrDefault("Tags")
  valid_613581 = validateParameter(valid_613581, JArray, required = false,
                                 default = nil)
  if valid_613581 != nil:
    section.add "Tags", valid_613581
  var valid_613582 = query.getOrDefault("DBClusterParameterGroupName")
  valid_613582 = validateParameter(valid_613582, JString, required = true,
                                 default = nil)
  if valid_613582 != nil:
    section.add "DBClusterParameterGroupName", valid_613582
  var valid_613583 = query.getOrDefault("Action")
  valid_613583 = validateParameter(valid_613583, JString, required = true, default = newJString(
      "CreateDBClusterParameterGroup"))
  if valid_613583 != nil:
    section.add "Action", valid_613583
  var valid_613584 = query.getOrDefault("Description")
  valid_613584 = validateParameter(valid_613584, JString, required = true,
                                 default = nil)
  if valid_613584 != nil:
    section.add "Description", valid_613584
  var valid_613585 = query.getOrDefault("Version")
  valid_613585 = validateParameter(valid_613585, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613585 != nil:
    section.add "Version", valid_613585
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613586 = header.getOrDefault("X-Amz-Signature")
  valid_613586 = validateParameter(valid_613586, JString, required = false,
                                 default = nil)
  if valid_613586 != nil:
    section.add "X-Amz-Signature", valid_613586
  var valid_613587 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613587 = validateParameter(valid_613587, JString, required = false,
                                 default = nil)
  if valid_613587 != nil:
    section.add "X-Amz-Content-Sha256", valid_613587
  var valid_613588 = header.getOrDefault("X-Amz-Date")
  valid_613588 = validateParameter(valid_613588, JString, required = false,
                                 default = nil)
  if valid_613588 != nil:
    section.add "X-Amz-Date", valid_613588
  var valid_613589 = header.getOrDefault("X-Amz-Credential")
  valid_613589 = validateParameter(valid_613589, JString, required = false,
                                 default = nil)
  if valid_613589 != nil:
    section.add "X-Amz-Credential", valid_613589
  var valid_613590 = header.getOrDefault("X-Amz-Security-Token")
  valid_613590 = validateParameter(valid_613590, JString, required = false,
                                 default = nil)
  if valid_613590 != nil:
    section.add "X-Amz-Security-Token", valid_613590
  var valid_613591 = header.getOrDefault("X-Amz-Algorithm")
  valid_613591 = validateParameter(valid_613591, JString, required = false,
                                 default = nil)
  if valid_613591 != nil:
    section.add "X-Amz-Algorithm", valid_613591
  var valid_613592 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613592 = validateParameter(valid_613592, JString, required = false,
                                 default = nil)
  if valid_613592 != nil:
    section.add "X-Amz-SignedHeaders", valid_613592
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613593: Call_GetCreateDBClusterParameterGroup_613577;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <a>ModifyDBClusterParameterGroup</a>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <a>ModifyDBCluster</a>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect.</p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon Neptune console</a> or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_613593.validator(path, query, header, formData, body)
  let scheme = call_613593.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613593.url(scheme.get, call_613593.host, call_613593.base,
                         call_613593.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613593, url, valid)

proc call*(call_613594: Call_GetCreateDBClusterParameterGroup_613577;
          DBParameterGroupFamily: string; DBClusterParameterGroupName: string;
          Description: string; Tags: JsonNode = nil;
          Action: string = "CreateDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBClusterParameterGroup
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <a>ModifyDBClusterParameterGroup</a>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <a>ModifyDBCluster</a>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect.</p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon Neptune console</a> or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ##   DBParameterGroupFamily: string (required)
  ##                         : The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB cluster parameter group.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DBClusterParameterGroup.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Action: string (required)
  ##   Description: string (required)
  ##              : The description for the DB cluster parameter group.
  ##   Version: string (required)
  var query_613595 = newJObject()
  add(query_613595, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  if Tags != nil:
    query_613595.add "Tags", Tags
  add(query_613595, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_613595, "Action", newJString(Action))
  add(query_613595, "Description", newJString(Description))
  add(query_613595, "Version", newJString(Version))
  result = call_613594.call(nil, query_613595, nil, nil, nil)

var getCreateDBClusterParameterGroup* = Call_GetCreateDBClusterParameterGroup_613577(
    name: "getCreateDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterParameterGroup",
    validator: validate_GetCreateDBClusterParameterGroup_613578, base: "/",
    url: url_GetCreateDBClusterParameterGroup_613579,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBClusterSnapshot_613634 = ref object of OpenApiRestCall_612642
proc url_PostCreateDBClusterSnapshot_613636(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBClusterSnapshot_613635(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a snapshot of a DB cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613637 = query.getOrDefault("Action")
  valid_613637 = validateParameter(valid_613637, JString, required = true, default = newJString(
      "CreateDBClusterSnapshot"))
  if valid_613637 != nil:
    section.add "Action", valid_613637
  var valid_613638 = query.getOrDefault("Version")
  valid_613638 = validateParameter(valid_613638, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613638 != nil:
    section.add "Version", valid_613638
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613639 = header.getOrDefault("X-Amz-Signature")
  valid_613639 = validateParameter(valid_613639, JString, required = false,
                                 default = nil)
  if valid_613639 != nil:
    section.add "X-Amz-Signature", valid_613639
  var valid_613640 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613640 = validateParameter(valid_613640, JString, required = false,
                                 default = nil)
  if valid_613640 != nil:
    section.add "X-Amz-Content-Sha256", valid_613640
  var valid_613641 = header.getOrDefault("X-Amz-Date")
  valid_613641 = validateParameter(valid_613641, JString, required = false,
                                 default = nil)
  if valid_613641 != nil:
    section.add "X-Amz-Date", valid_613641
  var valid_613642 = header.getOrDefault("X-Amz-Credential")
  valid_613642 = validateParameter(valid_613642, JString, required = false,
                                 default = nil)
  if valid_613642 != nil:
    section.add "X-Amz-Credential", valid_613642
  var valid_613643 = header.getOrDefault("X-Amz-Security-Token")
  valid_613643 = validateParameter(valid_613643, JString, required = false,
                                 default = nil)
  if valid_613643 != nil:
    section.add "X-Amz-Security-Token", valid_613643
  var valid_613644 = header.getOrDefault("X-Amz-Algorithm")
  valid_613644 = validateParameter(valid_613644, JString, required = false,
                                 default = nil)
  if valid_613644 != nil:
    section.add "X-Amz-Algorithm", valid_613644
  var valid_613645 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613645 = validateParameter(valid_613645, JString, required = false,
                                 default = nil)
  if valid_613645 != nil:
    section.add "X-Amz-SignedHeaders", valid_613645
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : The tags to be assigned to the DB cluster snapshot.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_613646 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_613646 = validateParameter(valid_613646, JString, required = true,
                                 default = nil)
  if valid_613646 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_613646
  var valid_613647 = formData.getOrDefault("Tags")
  valid_613647 = validateParameter(valid_613647, JArray, required = false,
                                 default = nil)
  if valid_613647 != nil:
    section.add "Tags", valid_613647
  var valid_613648 = formData.getOrDefault("DBClusterIdentifier")
  valid_613648 = validateParameter(valid_613648, JString, required = true,
                                 default = nil)
  if valid_613648 != nil:
    section.add "DBClusterIdentifier", valid_613648
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613649: Call_PostCreateDBClusterSnapshot_613634; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a snapshot of a DB cluster.
  ## 
  let valid = call_613649.validator(path, query, header, formData, body)
  let scheme = call_613649.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613649.url(scheme.get, call_613649.host, call_613649.base,
                         call_613649.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613649, url, valid)

proc call*(call_613650: Call_PostCreateDBClusterSnapshot_613634;
          DBClusterSnapshotIdentifier: string; DBClusterIdentifier: string;
          Action: string = "CreateDBClusterSnapshot"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBClusterSnapshot
  ## Creates a snapshot of a DB cluster.
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : The tags to be assigned to the DB cluster snapshot.
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  var query_613651 = newJObject()
  var formData_613652 = newJObject()
  add(formData_613652, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_613651, "Action", newJString(Action))
  if Tags != nil:
    formData_613652.add "Tags", Tags
  add(query_613651, "Version", newJString(Version))
  add(formData_613652, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_613650.call(nil, query_613651, nil, formData_613652, nil)

var postCreateDBClusterSnapshot* = Call_PostCreateDBClusterSnapshot_613634(
    name: "postCreateDBClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterSnapshot",
    validator: validate_PostCreateDBClusterSnapshot_613635, base: "/",
    url: url_PostCreateDBClusterSnapshot_613636,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBClusterSnapshot_613616 = ref object of OpenApiRestCall_612642
proc url_GetCreateDBClusterSnapshot_613618(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBClusterSnapshot_613617(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a snapshot of a DB cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : The tags to be assigned to the DB cluster snapshot.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_613619 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_613619 = validateParameter(valid_613619, JString, required = true,
                                 default = nil)
  if valid_613619 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_613619
  var valid_613620 = query.getOrDefault("Tags")
  valid_613620 = validateParameter(valid_613620, JArray, required = false,
                                 default = nil)
  if valid_613620 != nil:
    section.add "Tags", valid_613620
  var valid_613621 = query.getOrDefault("DBClusterIdentifier")
  valid_613621 = validateParameter(valid_613621, JString, required = true,
                                 default = nil)
  if valid_613621 != nil:
    section.add "DBClusterIdentifier", valid_613621
  var valid_613622 = query.getOrDefault("Action")
  valid_613622 = validateParameter(valid_613622, JString, required = true, default = newJString(
      "CreateDBClusterSnapshot"))
  if valid_613622 != nil:
    section.add "Action", valid_613622
  var valid_613623 = query.getOrDefault("Version")
  valid_613623 = validateParameter(valid_613623, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613623 != nil:
    section.add "Version", valid_613623
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613624 = header.getOrDefault("X-Amz-Signature")
  valid_613624 = validateParameter(valid_613624, JString, required = false,
                                 default = nil)
  if valid_613624 != nil:
    section.add "X-Amz-Signature", valid_613624
  var valid_613625 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613625 = validateParameter(valid_613625, JString, required = false,
                                 default = nil)
  if valid_613625 != nil:
    section.add "X-Amz-Content-Sha256", valid_613625
  var valid_613626 = header.getOrDefault("X-Amz-Date")
  valid_613626 = validateParameter(valid_613626, JString, required = false,
                                 default = nil)
  if valid_613626 != nil:
    section.add "X-Amz-Date", valid_613626
  var valid_613627 = header.getOrDefault("X-Amz-Credential")
  valid_613627 = validateParameter(valid_613627, JString, required = false,
                                 default = nil)
  if valid_613627 != nil:
    section.add "X-Amz-Credential", valid_613627
  var valid_613628 = header.getOrDefault("X-Amz-Security-Token")
  valid_613628 = validateParameter(valid_613628, JString, required = false,
                                 default = nil)
  if valid_613628 != nil:
    section.add "X-Amz-Security-Token", valid_613628
  var valid_613629 = header.getOrDefault("X-Amz-Algorithm")
  valid_613629 = validateParameter(valid_613629, JString, required = false,
                                 default = nil)
  if valid_613629 != nil:
    section.add "X-Amz-Algorithm", valid_613629
  var valid_613630 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613630 = validateParameter(valid_613630, JString, required = false,
                                 default = nil)
  if valid_613630 != nil:
    section.add "X-Amz-SignedHeaders", valid_613630
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613631: Call_GetCreateDBClusterSnapshot_613616; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a snapshot of a DB cluster.
  ## 
  let valid = call_613631.validator(path, query, header, formData, body)
  let scheme = call_613631.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613631.url(scheme.get, call_613631.host, call_613631.base,
                         call_613631.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613631, url, valid)

proc call*(call_613632: Call_GetCreateDBClusterSnapshot_613616;
          DBClusterSnapshotIdentifier: string; DBClusterIdentifier: string;
          Tags: JsonNode = nil; Action: string = "CreateDBClusterSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBClusterSnapshot
  ## Creates a snapshot of a DB cluster.
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : The tags to be assigned to the DB cluster snapshot.
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613633 = newJObject()
  add(query_613633, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  if Tags != nil:
    query_613633.add "Tags", Tags
  add(query_613633, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_613633, "Action", newJString(Action))
  add(query_613633, "Version", newJString(Version))
  result = call_613632.call(nil, query_613633, nil, nil, nil)

var getCreateDBClusterSnapshot* = Call_GetCreateDBClusterSnapshot_613616(
    name: "getCreateDBClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterSnapshot",
    validator: validate_GetCreateDBClusterSnapshot_613617, base: "/",
    url: url_GetCreateDBClusterSnapshot_613618,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBInstance_613729 = ref object of OpenApiRestCall_612642
proc url_PostCreateDBInstance_613731(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBInstance_613730(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613732 = query.getOrDefault("Action")
  valid_613732 = validateParameter(valid_613732, JString, required = true,
                                 default = newJString("CreateDBInstance"))
  if valid_613732 != nil:
    section.add "Action", valid_613732
  var valid_613733 = query.getOrDefault("Version")
  valid_613733 = validateParameter(valid_613733, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613733 != nil:
    section.add "Version", valid_613733
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_613734 = header.getOrDefault("X-Amz-Security-Token")
  valid_613734 = validateParameter(valid_613734, JString, required = false,
                                 default = nil)
  if valid_613734 != nil:
    section.add "X-Amz-Security-Token", valid_613734
  var valid_613735 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613735 = validateParameter(valid_613735, JString, required = false,
                                 default = nil)
  if valid_613735 != nil:
    section.add "X-Amz-SignedHeaders", valid_613735
  var valid_613736 = header.getOrDefault("X-Amz-Signature")
  valid_613736 = validateParameter(valid_613736, JString, required = false,
                                 default = nil)
  if valid_613736 != nil:
    section.add "X-Amz-Signature", valid_613736
  var valid_613737 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613737 = validateParameter(valid_613737, JString, required = false,
                                 default = nil)
  if valid_613737 != nil:
    section.add "X-Amz-Content-Sha256", valid_613737
  var valid_613738 = header.getOrDefault("X-Amz-Date")
  valid_613738 = validateParameter(valid_613738, JString, required = false,
                                 default = nil)
  if valid_613738 != nil:
    section.add "X-Amz-Date", valid_613738
  var valid_613739 = header.getOrDefault("X-Amz-Credential")
  valid_613739 = validateParameter(valid_613739, JString, required = false,
                                 default = nil)
  if valid_613739 != nil:
    section.add "X-Amz-Credential", valid_613739
  var valid_613740 = header.getOrDefault("X-Amz-Algorithm")
  valid_613740 = validateParameter(valid_613740, JString, required = false,
                                 default = nil)
  if valid_613740 != nil:
    section.add "X-Amz-Algorithm", valid_613740
  result.add "header", section
  ## parameters in `formData` object:
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which an Read Replica is promoted to the primary instance after a failure of the existing primary instance. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p>Not applicable. The port is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p> Default: <code>8182</code> </p> <p>Type: Integer</p>
  ##   MultiAZ: JBool
  ##          : Specifies if the DB instance is a Multi-AZ deployment. You can't set the AvailabilityZone parameter if the MultiAZ parameter is set to true.
  ##   MasterUsername: JString
  ##                 : The name for the master user. Not used.
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to associate with this DB instance.</p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   AvailabilityZone: JString
  ##                   : <p> The EC2 Availability Zone that the DB instance is created in</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The AvailabilityZone parameter can't be specified if the MultiAZ parameter is set to <code>true</code>. The specified Availability Zone must be in the same AWS Region as the current endpoint.</p>
  ##   EnablePerformanceInsights: JBool
  ##                            :  <i>(Not supported by Neptune)</i> 
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs.
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   CharacterSetName: JString
  ##                   :  <i>(Not supported by Neptune)</i> 
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p>Not applicable. Storage is managed by the DB Cluster.</p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
  ##   DeletionProtection: JBool
  ##                     : <p>A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. </p> <p>You can enable or disable deletion protection for the DB cluster. For more information, see <a>CreateDBCluster</a>. DB instances in a DB cluster can be deleted even when deletion protection is enabled for the DB cluster. </p>
  ##   AllocatedStorage: JInt
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p>Not applicable. Neptune cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in a Neptune cluster volume.</p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.</p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   DBInstanceClass: JString (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions.
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created.</p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Not used.</p>
  ##   Domain: JString
  ##         : Specify the Active Directory Domain to create the instance in.
  ##   Timezone: JString
  ##           : The time zone of the DB instance.
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If this argument is omitted, the default DBParameterGroup for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : The version number of the database engine to use. Currently, setting this parameter has no effect.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable AWS Identity and Access Management (IAM) authentication for Neptune.</p> <p>Default: <code>false</code> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Cannot be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>If the <code>StorageEncrypted</code> parameter is true, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon Neptune will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance.</p> <p>Valid Values: <code>neptune</code> </p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : <p>Indicates that minor engine upgrades are applied automatically to the DB instance during the maintenance window.</p> <p>Default: <code>true</code> </p>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DBName: JString
  ##         : Not supported.
  ##   Iops: JInt
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   PubliclyAccessible: JBool
  ##                     : This flag should no longer be used.
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              :  <i>(Not supported by Neptune)</i> 
  ##   LicenseModel: JString
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : The tags to assign to the new instance.
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: JString
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   StorageEncrypted: JBool
  ##                   : <p>Specifies whether the DB instance is encrypted.</p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: false</p>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The identifier of the DB cluster that the instance will belong to.</p> <p>For information on creating a DB cluster, see <a>CreateDBCluster</a>.</p> <p>Type: String</p>
  section = newJObject()
  var valid_613741 = formData.getOrDefault("PromotionTier")
  valid_613741 = validateParameter(valid_613741, JInt, required = false, default = nil)
  if valid_613741 != nil:
    section.add "PromotionTier", valid_613741
  var valid_613742 = formData.getOrDefault("Port")
  valid_613742 = validateParameter(valid_613742, JInt, required = false, default = nil)
  if valid_613742 != nil:
    section.add "Port", valid_613742
  var valid_613743 = formData.getOrDefault("MultiAZ")
  valid_613743 = validateParameter(valid_613743, JBool, required = false, default = nil)
  if valid_613743 != nil:
    section.add "MultiAZ", valid_613743
  var valid_613744 = formData.getOrDefault("MasterUsername")
  valid_613744 = validateParameter(valid_613744, JString, required = false,
                                 default = nil)
  if valid_613744 != nil:
    section.add "MasterUsername", valid_613744
  var valid_613745 = formData.getOrDefault("MonitoringRoleArn")
  valid_613745 = validateParameter(valid_613745, JString, required = false,
                                 default = nil)
  if valid_613745 != nil:
    section.add "MonitoringRoleArn", valid_613745
  var valid_613746 = formData.getOrDefault("MonitoringInterval")
  valid_613746 = validateParameter(valid_613746, JInt, required = false, default = nil)
  if valid_613746 != nil:
    section.add "MonitoringInterval", valid_613746
  var valid_613747 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_613747 = validateParameter(valid_613747, JArray, required = false,
                                 default = nil)
  if valid_613747 != nil:
    section.add "VpcSecurityGroupIds", valid_613747
  var valid_613748 = formData.getOrDefault("AvailabilityZone")
  valid_613748 = validateParameter(valid_613748, JString, required = false,
                                 default = nil)
  if valid_613748 != nil:
    section.add "AvailabilityZone", valid_613748
  var valid_613749 = formData.getOrDefault("EnablePerformanceInsights")
  valid_613749 = validateParameter(valid_613749, JBool, required = false, default = nil)
  if valid_613749 != nil:
    section.add "EnablePerformanceInsights", valid_613749
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_613750 = formData.getOrDefault("DBInstanceIdentifier")
  valid_613750 = validateParameter(valid_613750, JString, required = true,
                                 default = nil)
  if valid_613750 != nil:
    section.add "DBInstanceIdentifier", valid_613750
  var valid_613751 = formData.getOrDefault("TdeCredentialArn")
  valid_613751 = validateParameter(valid_613751, JString, required = false,
                                 default = nil)
  if valid_613751 != nil:
    section.add "TdeCredentialArn", valid_613751
  var valid_613752 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_613752 = validateParameter(valid_613752, JArray, required = false,
                                 default = nil)
  if valid_613752 != nil:
    section.add "EnableCloudwatchLogsExports", valid_613752
  var valid_613753 = formData.getOrDefault("DBSubnetGroupName")
  valid_613753 = validateParameter(valid_613753, JString, required = false,
                                 default = nil)
  if valid_613753 != nil:
    section.add "DBSubnetGroupName", valid_613753
  var valid_613754 = formData.getOrDefault("CharacterSetName")
  valid_613754 = validateParameter(valid_613754, JString, required = false,
                                 default = nil)
  if valid_613754 != nil:
    section.add "CharacterSetName", valid_613754
  var valid_613755 = formData.getOrDefault("StorageType")
  valid_613755 = validateParameter(valid_613755, JString, required = false,
                                 default = nil)
  if valid_613755 != nil:
    section.add "StorageType", valid_613755
  var valid_613756 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_613756 = validateParameter(valid_613756, JBool, required = false, default = nil)
  if valid_613756 != nil:
    section.add "CopyTagsToSnapshot", valid_613756
  var valid_613757 = formData.getOrDefault("DeletionProtection")
  valid_613757 = validateParameter(valid_613757, JBool, required = false, default = nil)
  if valid_613757 != nil:
    section.add "DeletionProtection", valid_613757
  var valid_613758 = formData.getOrDefault("AllocatedStorage")
  valid_613758 = validateParameter(valid_613758, JInt, required = false, default = nil)
  if valid_613758 != nil:
    section.add "AllocatedStorage", valid_613758
  var valid_613759 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_613759 = validateParameter(valid_613759, JString, required = false,
                                 default = nil)
  if valid_613759 != nil:
    section.add "PreferredMaintenanceWindow", valid_613759
  var valid_613760 = formData.getOrDefault("DBInstanceClass")
  valid_613760 = validateParameter(valid_613760, JString, required = true,
                                 default = nil)
  if valid_613760 != nil:
    section.add "DBInstanceClass", valid_613760
  var valid_613761 = formData.getOrDefault("PreferredBackupWindow")
  valid_613761 = validateParameter(valid_613761, JString, required = false,
                                 default = nil)
  if valid_613761 != nil:
    section.add "PreferredBackupWindow", valid_613761
  var valid_613762 = formData.getOrDefault("MasterUserPassword")
  valid_613762 = validateParameter(valid_613762, JString, required = false,
                                 default = nil)
  if valid_613762 != nil:
    section.add "MasterUserPassword", valid_613762
  var valid_613763 = formData.getOrDefault("Domain")
  valid_613763 = validateParameter(valid_613763, JString, required = false,
                                 default = nil)
  if valid_613763 != nil:
    section.add "Domain", valid_613763
  var valid_613764 = formData.getOrDefault("Timezone")
  valid_613764 = validateParameter(valid_613764, JString, required = false,
                                 default = nil)
  if valid_613764 != nil:
    section.add "Timezone", valid_613764
  var valid_613765 = formData.getOrDefault("DBParameterGroupName")
  valid_613765 = validateParameter(valid_613765, JString, required = false,
                                 default = nil)
  if valid_613765 != nil:
    section.add "DBParameterGroupName", valid_613765
  var valid_613766 = formData.getOrDefault("EngineVersion")
  valid_613766 = validateParameter(valid_613766, JString, required = false,
                                 default = nil)
  if valid_613766 != nil:
    section.add "EngineVersion", valid_613766
  var valid_613767 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_613767 = validateParameter(valid_613767, JBool, required = false, default = nil)
  if valid_613767 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_613767
  var valid_613768 = formData.getOrDefault("BackupRetentionPeriod")
  valid_613768 = validateParameter(valid_613768, JInt, required = false, default = nil)
  if valid_613768 != nil:
    section.add "BackupRetentionPeriod", valid_613768
  var valid_613769 = formData.getOrDefault("KmsKeyId")
  valid_613769 = validateParameter(valid_613769, JString, required = false,
                                 default = nil)
  if valid_613769 != nil:
    section.add "KmsKeyId", valid_613769
  var valid_613770 = formData.getOrDefault("Engine")
  valid_613770 = validateParameter(valid_613770, JString, required = true,
                                 default = nil)
  if valid_613770 != nil:
    section.add "Engine", valid_613770
  var valid_613771 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_613771 = validateParameter(valid_613771, JBool, required = false, default = nil)
  if valid_613771 != nil:
    section.add "AutoMinorVersionUpgrade", valid_613771
  var valid_613772 = formData.getOrDefault("TdeCredentialPassword")
  valid_613772 = validateParameter(valid_613772, JString, required = false,
                                 default = nil)
  if valid_613772 != nil:
    section.add "TdeCredentialPassword", valid_613772
  var valid_613773 = formData.getOrDefault("DBName")
  valid_613773 = validateParameter(valid_613773, JString, required = false,
                                 default = nil)
  if valid_613773 != nil:
    section.add "DBName", valid_613773
  var valid_613774 = formData.getOrDefault("Iops")
  valid_613774 = validateParameter(valid_613774, JInt, required = false, default = nil)
  if valid_613774 != nil:
    section.add "Iops", valid_613774
  var valid_613775 = formData.getOrDefault("PubliclyAccessible")
  valid_613775 = validateParameter(valid_613775, JBool, required = false, default = nil)
  if valid_613775 != nil:
    section.add "PubliclyAccessible", valid_613775
  var valid_613776 = formData.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_613776 = validateParameter(valid_613776, JString, required = false,
                                 default = nil)
  if valid_613776 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_613776
  var valid_613777 = formData.getOrDefault("LicenseModel")
  valid_613777 = validateParameter(valid_613777, JString, required = false,
                                 default = nil)
  if valid_613777 != nil:
    section.add "LicenseModel", valid_613777
  var valid_613778 = formData.getOrDefault("Tags")
  valid_613778 = validateParameter(valid_613778, JArray, required = false,
                                 default = nil)
  if valid_613778 != nil:
    section.add "Tags", valid_613778
  var valid_613779 = formData.getOrDefault("DomainIAMRoleName")
  valid_613779 = validateParameter(valid_613779, JString, required = false,
                                 default = nil)
  if valid_613779 != nil:
    section.add "DomainIAMRoleName", valid_613779
  var valid_613780 = formData.getOrDefault("OptionGroupName")
  valid_613780 = validateParameter(valid_613780, JString, required = false,
                                 default = nil)
  if valid_613780 != nil:
    section.add "OptionGroupName", valid_613780
  var valid_613781 = formData.getOrDefault("DBSecurityGroups")
  valid_613781 = validateParameter(valid_613781, JArray, required = false,
                                 default = nil)
  if valid_613781 != nil:
    section.add "DBSecurityGroups", valid_613781
  var valid_613782 = formData.getOrDefault("StorageEncrypted")
  valid_613782 = validateParameter(valid_613782, JBool, required = false, default = nil)
  if valid_613782 != nil:
    section.add "StorageEncrypted", valid_613782
  var valid_613783 = formData.getOrDefault("DBClusterIdentifier")
  valid_613783 = validateParameter(valid_613783, JString, required = false,
                                 default = nil)
  if valid_613783 != nil:
    section.add "DBClusterIdentifier", valid_613783
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613784: Call_PostCreateDBInstance_613729; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB instance.
  ## 
  let valid = call_613784.validator(path, query, header, formData, body)
  let scheme = call_613784.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613784.url(scheme.get, call_613784.host, call_613784.base,
                         call_613784.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613784, url, valid)

proc call*(call_613785: Call_PostCreateDBInstance_613729;
          DBInstanceIdentifier: string; DBInstanceClass: string; Engine: string;
          PromotionTier: int = 0; Port: int = 0; MultiAZ: bool = false;
          MasterUsername: string = ""; MonitoringRoleArn: string = "";
          MonitoringInterval: int = 0; VpcSecurityGroupIds: JsonNode = nil;
          AvailabilityZone: string = ""; EnablePerformanceInsights: bool = false;
          TdeCredentialArn: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "CreateDBInstance"; DBSubnetGroupName: string = "";
          CharacterSetName: string = ""; StorageType: string = "";
          CopyTagsToSnapshot: bool = false; DeletionProtection: bool = false;
          AllocatedStorage: int = 0; PreferredMaintenanceWindow: string = "";
          PreferredBackupWindow: string = ""; MasterUserPassword: string = "";
          Domain: string = ""; Timezone: string = ""; DBParameterGroupName: string = "";
          EngineVersion: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          BackupRetentionPeriod: int = 0; KmsKeyId: string = "";
          AutoMinorVersionUpgrade: bool = false; TdeCredentialPassword: string = "";
          DBName: string = ""; Iops: int = 0; PubliclyAccessible: bool = false;
          PerformanceInsightsKMSKeyId: string = ""; LicenseModel: string = "";
          Tags: JsonNode = nil; DomainIAMRoleName: string = "";
          OptionGroupName: string = ""; Version: string = "2014-10-31";
          DBSecurityGroups: JsonNode = nil; StorageEncrypted: bool = false;
          DBClusterIdentifier: string = ""): Recallable =
  ## postCreateDBInstance
  ## Creates a new DB instance.
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which an Read Replica is promoted to the primary instance after a failure of the existing primary instance. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p>Not applicable. The port is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p> Default: <code>8182</code> </p> <p>Type: Integer</p>
  ##   MultiAZ: bool
  ##          : Specifies if the DB instance is a Multi-AZ deployment. You can't set the AvailabilityZone parameter if the MultiAZ parameter is set to true.
  ##   MasterUsername: string
  ##                 : The name for the master user. Not used.
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to associate with this DB instance.</p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   AvailabilityZone: string
  ##                   : <p> The EC2 Availability Zone that the DB instance is created in</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The AvailabilityZone parameter can't be specified if the MultiAZ parameter is set to <code>true</code>. The specified Availability Zone must be in the same AWS Region as the current endpoint.</p>
  ##   EnablePerformanceInsights: bool
  ##                            :  <i>(Not supported by Neptune)</i> 
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs.
  ##   Action: string (required)
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   CharacterSetName: string
  ##                   :  <i>(Not supported by Neptune)</i> 
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p>Not applicable. Storage is managed by the DB Cluster.</p>
  ##   CopyTagsToSnapshot: bool
  ##                     : True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
  ##   DeletionProtection: bool
  ##                     : <p>A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. </p> <p>You can enable or disable deletion protection for the DB cluster. For more information, see <a>CreateDBCluster</a>. DB instances in a DB cluster can be deleted even when deletion protection is enabled for the DB cluster. </p>
  ##   AllocatedStorage: int
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p>Not applicable. Neptune cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in a Neptune cluster volume.</p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.</p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   DBInstanceClass: string (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions.
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created.</p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Not used.</p>
  ##   Domain: string
  ##         : Specify the Active Directory Domain to create the instance in.
  ##   Timezone: string
  ##           : The time zone of the DB instance.
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If this argument is omitted, the default DBParameterGroup for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EngineVersion: string
  ##                : The version number of the database engine to use. Currently, setting this parameter has no effect.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable AWS Identity and Access Management (IAM) authentication for Neptune.</p> <p>Default: <code>false</code> </p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Cannot be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>If the <code>StorageEncrypted</code> parameter is true, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon Neptune will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance.</p> <p>Valid Values: <code>neptune</code> </p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : <p>Indicates that minor engine upgrades are applied automatically to the DB instance during the maintenance window.</p> <p>Default: <code>true</code> </p>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DBName: string
  ##         : Not supported.
  ##   Iops: int
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   PubliclyAccessible: bool
  ##                     : This flag should no longer be used.
  ##   PerformanceInsightsKMSKeyId: string
  ##                              :  <i>(Not supported by Neptune)</i> 
  ##   LicenseModel: string
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : The tags to assign to the new instance.
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: string
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   Version: string (required)
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   StorageEncrypted: bool
  ##                   : <p>Specifies whether the DB instance is encrypted.</p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: false</p>
  ##   DBClusterIdentifier: string
  ##                      : <p>The identifier of the DB cluster that the instance will belong to.</p> <p>For information on creating a DB cluster, see <a>CreateDBCluster</a>.</p> <p>Type: String</p>
  var query_613786 = newJObject()
  var formData_613787 = newJObject()
  add(formData_613787, "PromotionTier", newJInt(PromotionTier))
  add(formData_613787, "Port", newJInt(Port))
  add(formData_613787, "MultiAZ", newJBool(MultiAZ))
  add(formData_613787, "MasterUsername", newJString(MasterUsername))
  add(formData_613787, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(formData_613787, "MonitoringInterval", newJInt(MonitoringInterval))
  if VpcSecurityGroupIds != nil:
    formData_613787.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_613787, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_613787, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(formData_613787, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_613787, "TdeCredentialArn", newJString(TdeCredentialArn))
  if EnableCloudwatchLogsExports != nil:
    formData_613787.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_613786, "Action", newJString(Action))
  add(formData_613787, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_613787, "CharacterSetName", newJString(CharacterSetName))
  add(formData_613787, "StorageType", newJString(StorageType))
  add(formData_613787, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_613787, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_613787, "AllocatedStorage", newJInt(AllocatedStorage))
  add(formData_613787, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_613787, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_613787, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_613787, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_613787, "Domain", newJString(Domain))
  add(formData_613787, "Timezone", newJString(Timezone))
  add(formData_613787, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_613787, "EngineVersion", newJString(EngineVersion))
  add(formData_613787, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_613787, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_613787, "KmsKeyId", newJString(KmsKeyId))
  add(formData_613787, "Engine", newJString(Engine))
  add(formData_613787, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_613787, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(formData_613787, "DBName", newJString(DBName))
  add(formData_613787, "Iops", newJInt(Iops))
  add(formData_613787, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_613787, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(formData_613787, "LicenseModel", newJString(LicenseModel))
  if Tags != nil:
    formData_613787.add "Tags", Tags
  add(formData_613787, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(formData_613787, "OptionGroupName", newJString(OptionGroupName))
  add(query_613786, "Version", newJString(Version))
  if DBSecurityGroups != nil:
    formData_613787.add "DBSecurityGroups", DBSecurityGroups
  add(formData_613787, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_613787, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_613785.call(nil, query_613786, nil, formData_613787, nil)

var postCreateDBInstance* = Call_PostCreateDBInstance_613729(
    name: "postCreateDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBInstance",
    validator: validate_PostCreateDBInstance_613730, base: "/",
    url: url_PostCreateDBInstance_613731, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBInstance_613653 = ref object of OpenApiRestCall_612642
proc url_GetCreateDBInstance_613655(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBInstance_613654(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Creates a new DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance.</p> <p>Valid Values: <code>neptune</code> </p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>If the <code>StorageEncrypted</code> parameter is true, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon Neptune will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   MasterUsername: JString
  ##                 : The name for the master user. Not used.
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Cannot be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs.
  ##   EngineVersion: JString
  ##                : The version number of the database engine to use. Currently, setting this parameter has no effect.
  ##   Action: JString (required)
  ##   Domain: JString
  ##         : Specify the Active Directory Domain to create the instance in.
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to associate with this DB instance.</p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   AllocatedStorage: JInt
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p>Not applicable. Neptune cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in a Neptune cluster volume.</p>
  ##   EnablePerformanceInsights: JBool
  ##                            :  <i>(Not supported by Neptune)</i> 
  ##   PubliclyAccessible: JBool
  ##                     : This flag should no longer be used.
  ##   DBName: JString
  ##         : Not supported.
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   StorageEncrypted: JBool
  ##                   : <p>Specifies whether the DB instance is encrypted.</p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: false</p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If this argument is omitted, the default DBParameterGroup for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DeletionProtection: JBool
  ##                     : <p>A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. </p> <p>You can enable or disable deletion protection for the DB cluster. For more information, see <a>CreateDBCluster</a>. DB instances in a DB cluster can be deleted even when deletion protection is enabled for the DB cluster. </p>
  ##   CharacterSetName: JString
  ##                   :  <i>(Not supported by Neptune)</i> 
  ##   Tags: JArray
  ##       : The tags to assign to the new instance.
  ##   DBClusterIdentifier: JString
  ##                      : <p>The identifier of the DB cluster that the instance will belong to.</p> <p>For information on creating a DB cluster, see <a>CreateDBCluster</a>.</p> <p>Type: String</p>
  ##   LicenseModel: JString
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which an Read Replica is promoted to the primary instance after a failure of the existing primary instance. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p>Not applicable. Storage is managed by the DB Cluster.</p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable AWS Identity and Access Management (IAM) authentication for Neptune.</p> <p>Default: <code>false</code> </p>
  ##   MultiAZ: JBool
  ##          : Specifies if the DB instance is a Multi-AZ deployment. You can't set the AvailabilityZone parameter if the MultiAZ parameter is set to true.
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p>Not applicable. The port is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p> Default: <code>8182</code> </p> <p>Type: Integer</p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              :  <i>(Not supported by Neptune)</i> 
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Not used.</p>
  ##   AvailabilityZone: JString
  ##                   : <p> The EC2 Availability Zone that the DB instance is created in</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The AvailabilityZone parameter can't be specified if the MultiAZ parameter is set to <code>true</code>. The specified Availability Zone must be in the same AWS Region as the current endpoint.</p>
  ##   OptionGroupName: JString
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created.</p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p>
  ##   DBInstanceClass: JString (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions.
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.</p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   Timezone: JString
  ##           : The time zone of the DB instance.
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : <p>Indicates that minor engine upgrades are applied automatically to the DB instance during the maintenance window.</p> <p>Default: <code>true</code> </p>
  ##   Iops: JInt
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   Version: JString (required)
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_613674 = query.getOrDefault("Engine")
  valid_613674 = validateParameter(valid_613674, JString, required = true,
                                 default = nil)
  if valid_613674 != nil:
    section.add "Engine", valid_613674
  var valid_613675 = query.getOrDefault("CopyTagsToSnapshot")
  valid_613675 = validateParameter(valid_613675, JBool, required = false, default = nil)
  if valid_613675 != nil:
    section.add "CopyTagsToSnapshot", valid_613675
  var valid_613676 = query.getOrDefault("MonitoringInterval")
  valid_613676 = validateParameter(valid_613676, JInt, required = false, default = nil)
  if valid_613676 != nil:
    section.add "MonitoringInterval", valid_613676
  var valid_613677 = query.getOrDefault("KmsKeyId")
  valid_613677 = validateParameter(valid_613677, JString, required = false,
                                 default = nil)
  if valid_613677 != nil:
    section.add "KmsKeyId", valid_613677
  var valid_613678 = query.getOrDefault("MonitoringRoleArn")
  valid_613678 = validateParameter(valid_613678, JString, required = false,
                                 default = nil)
  if valid_613678 != nil:
    section.add "MonitoringRoleArn", valid_613678
  var valid_613679 = query.getOrDefault("MasterUsername")
  valid_613679 = validateParameter(valid_613679, JString, required = false,
                                 default = nil)
  if valid_613679 != nil:
    section.add "MasterUsername", valid_613679
  var valid_613680 = query.getOrDefault("BackupRetentionPeriod")
  valid_613680 = validateParameter(valid_613680, JInt, required = false, default = nil)
  if valid_613680 != nil:
    section.add "BackupRetentionPeriod", valid_613680
  var valid_613681 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_613681 = validateParameter(valid_613681, JArray, required = false,
                                 default = nil)
  if valid_613681 != nil:
    section.add "EnableCloudwatchLogsExports", valid_613681
  var valid_613682 = query.getOrDefault("EngineVersion")
  valid_613682 = validateParameter(valid_613682, JString, required = false,
                                 default = nil)
  if valid_613682 != nil:
    section.add "EngineVersion", valid_613682
  var valid_613683 = query.getOrDefault("Action")
  valid_613683 = validateParameter(valid_613683, JString, required = true,
                                 default = newJString("CreateDBInstance"))
  if valid_613683 != nil:
    section.add "Action", valid_613683
  var valid_613684 = query.getOrDefault("Domain")
  valid_613684 = validateParameter(valid_613684, JString, required = false,
                                 default = nil)
  if valid_613684 != nil:
    section.add "Domain", valid_613684
  var valid_613685 = query.getOrDefault("VpcSecurityGroupIds")
  valid_613685 = validateParameter(valid_613685, JArray, required = false,
                                 default = nil)
  if valid_613685 != nil:
    section.add "VpcSecurityGroupIds", valid_613685
  var valid_613686 = query.getOrDefault("AllocatedStorage")
  valid_613686 = validateParameter(valid_613686, JInt, required = false, default = nil)
  if valid_613686 != nil:
    section.add "AllocatedStorage", valid_613686
  var valid_613687 = query.getOrDefault("EnablePerformanceInsights")
  valid_613687 = validateParameter(valid_613687, JBool, required = false, default = nil)
  if valid_613687 != nil:
    section.add "EnablePerformanceInsights", valid_613687
  var valid_613688 = query.getOrDefault("PubliclyAccessible")
  valid_613688 = validateParameter(valid_613688, JBool, required = false, default = nil)
  if valid_613688 != nil:
    section.add "PubliclyAccessible", valid_613688
  var valid_613689 = query.getOrDefault("DBName")
  valid_613689 = validateParameter(valid_613689, JString, required = false,
                                 default = nil)
  if valid_613689 != nil:
    section.add "DBName", valid_613689
  var valid_613690 = query.getOrDefault("TdeCredentialPassword")
  valid_613690 = validateParameter(valid_613690, JString, required = false,
                                 default = nil)
  if valid_613690 != nil:
    section.add "TdeCredentialPassword", valid_613690
  var valid_613691 = query.getOrDefault("StorageEncrypted")
  valid_613691 = validateParameter(valid_613691, JBool, required = false, default = nil)
  if valid_613691 != nil:
    section.add "StorageEncrypted", valid_613691
  var valid_613692 = query.getOrDefault("DBParameterGroupName")
  valid_613692 = validateParameter(valid_613692, JString, required = false,
                                 default = nil)
  if valid_613692 != nil:
    section.add "DBParameterGroupName", valid_613692
  var valid_613693 = query.getOrDefault("DeletionProtection")
  valid_613693 = validateParameter(valid_613693, JBool, required = false, default = nil)
  if valid_613693 != nil:
    section.add "DeletionProtection", valid_613693
  var valid_613694 = query.getOrDefault("CharacterSetName")
  valid_613694 = validateParameter(valid_613694, JString, required = false,
                                 default = nil)
  if valid_613694 != nil:
    section.add "CharacterSetName", valid_613694
  var valid_613695 = query.getOrDefault("Tags")
  valid_613695 = validateParameter(valid_613695, JArray, required = false,
                                 default = nil)
  if valid_613695 != nil:
    section.add "Tags", valid_613695
  var valid_613696 = query.getOrDefault("DBClusterIdentifier")
  valid_613696 = validateParameter(valid_613696, JString, required = false,
                                 default = nil)
  if valid_613696 != nil:
    section.add "DBClusterIdentifier", valid_613696
  var valid_613697 = query.getOrDefault("LicenseModel")
  valid_613697 = validateParameter(valid_613697, JString, required = false,
                                 default = nil)
  if valid_613697 != nil:
    section.add "LicenseModel", valid_613697
  var valid_613698 = query.getOrDefault("DBInstanceIdentifier")
  valid_613698 = validateParameter(valid_613698, JString, required = true,
                                 default = nil)
  if valid_613698 != nil:
    section.add "DBInstanceIdentifier", valid_613698
  var valid_613699 = query.getOrDefault("TdeCredentialArn")
  valid_613699 = validateParameter(valid_613699, JString, required = false,
                                 default = nil)
  if valid_613699 != nil:
    section.add "TdeCredentialArn", valid_613699
  var valid_613700 = query.getOrDefault("PromotionTier")
  valid_613700 = validateParameter(valid_613700, JInt, required = false, default = nil)
  if valid_613700 != nil:
    section.add "PromotionTier", valid_613700
  var valid_613701 = query.getOrDefault("StorageType")
  valid_613701 = validateParameter(valid_613701, JString, required = false,
                                 default = nil)
  if valid_613701 != nil:
    section.add "StorageType", valid_613701
  var valid_613702 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_613702 = validateParameter(valid_613702, JBool, required = false, default = nil)
  if valid_613702 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_613702
  var valid_613703 = query.getOrDefault("MultiAZ")
  valid_613703 = validateParameter(valid_613703, JBool, required = false, default = nil)
  if valid_613703 != nil:
    section.add "MultiAZ", valid_613703
  var valid_613704 = query.getOrDefault("DBSecurityGroups")
  valid_613704 = validateParameter(valid_613704, JArray, required = false,
                                 default = nil)
  if valid_613704 != nil:
    section.add "DBSecurityGroups", valid_613704
  var valid_613705 = query.getOrDefault("Port")
  valid_613705 = validateParameter(valid_613705, JInt, required = false, default = nil)
  if valid_613705 != nil:
    section.add "Port", valid_613705
  var valid_613706 = query.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_613706 = validateParameter(valid_613706, JString, required = false,
                                 default = nil)
  if valid_613706 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_613706
  var valid_613707 = query.getOrDefault("MasterUserPassword")
  valid_613707 = validateParameter(valid_613707, JString, required = false,
                                 default = nil)
  if valid_613707 != nil:
    section.add "MasterUserPassword", valid_613707
  var valid_613708 = query.getOrDefault("AvailabilityZone")
  valid_613708 = validateParameter(valid_613708, JString, required = false,
                                 default = nil)
  if valid_613708 != nil:
    section.add "AvailabilityZone", valid_613708
  var valid_613709 = query.getOrDefault("OptionGroupName")
  valid_613709 = validateParameter(valid_613709, JString, required = false,
                                 default = nil)
  if valid_613709 != nil:
    section.add "OptionGroupName", valid_613709
  var valid_613710 = query.getOrDefault("DBSubnetGroupName")
  valid_613710 = validateParameter(valid_613710, JString, required = false,
                                 default = nil)
  if valid_613710 != nil:
    section.add "DBSubnetGroupName", valid_613710
  var valid_613711 = query.getOrDefault("PreferredBackupWindow")
  valid_613711 = validateParameter(valid_613711, JString, required = false,
                                 default = nil)
  if valid_613711 != nil:
    section.add "PreferredBackupWindow", valid_613711
  var valid_613712 = query.getOrDefault("DBInstanceClass")
  valid_613712 = validateParameter(valid_613712, JString, required = true,
                                 default = nil)
  if valid_613712 != nil:
    section.add "DBInstanceClass", valid_613712
  var valid_613713 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_613713 = validateParameter(valid_613713, JString, required = false,
                                 default = nil)
  if valid_613713 != nil:
    section.add "PreferredMaintenanceWindow", valid_613713
  var valid_613714 = query.getOrDefault("Timezone")
  valid_613714 = validateParameter(valid_613714, JString, required = false,
                                 default = nil)
  if valid_613714 != nil:
    section.add "Timezone", valid_613714
  var valid_613715 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_613715 = validateParameter(valid_613715, JBool, required = false, default = nil)
  if valid_613715 != nil:
    section.add "AutoMinorVersionUpgrade", valid_613715
  var valid_613716 = query.getOrDefault("Iops")
  valid_613716 = validateParameter(valid_613716, JInt, required = false, default = nil)
  if valid_613716 != nil:
    section.add "Iops", valid_613716
  var valid_613717 = query.getOrDefault("Version")
  valid_613717 = validateParameter(valid_613717, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613717 != nil:
    section.add "Version", valid_613717
  var valid_613718 = query.getOrDefault("DomainIAMRoleName")
  valid_613718 = validateParameter(valid_613718, JString, required = false,
                                 default = nil)
  if valid_613718 != nil:
    section.add "DomainIAMRoleName", valid_613718
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_613719 = header.getOrDefault("X-Amz-Security-Token")
  valid_613719 = validateParameter(valid_613719, JString, required = false,
                                 default = nil)
  if valid_613719 != nil:
    section.add "X-Amz-Security-Token", valid_613719
  var valid_613720 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613720 = validateParameter(valid_613720, JString, required = false,
                                 default = nil)
  if valid_613720 != nil:
    section.add "X-Amz-SignedHeaders", valid_613720
  var valid_613721 = header.getOrDefault("X-Amz-Signature")
  valid_613721 = validateParameter(valid_613721, JString, required = false,
                                 default = nil)
  if valid_613721 != nil:
    section.add "X-Amz-Signature", valid_613721
  var valid_613722 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613722 = validateParameter(valid_613722, JString, required = false,
                                 default = nil)
  if valid_613722 != nil:
    section.add "X-Amz-Content-Sha256", valid_613722
  var valid_613723 = header.getOrDefault("X-Amz-Date")
  valid_613723 = validateParameter(valid_613723, JString, required = false,
                                 default = nil)
  if valid_613723 != nil:
    section.add "X-Amz-Date", valid_613723
  var valid_613724 = header.getOrDefault("X-Amz-Credential")
  valid_613724 = validateParameter(valid_613724, JString, required = false,
                                 default = nil)
  if valid_613724 != nil:
    section.add "X-Amz-Credential", valid_613724
  var valid_613725 = header.getOrDefault("X-Amz-Algorithm")
  valid_613725 = validateParameter(valid_613725, JString, required = false,
                                 default = nil)
  if valid_613725 != nil:
    section.add "X-Amz-Algorithm", valid_613725
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613726: Call_GetCreateDBInstance_613653; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB instance.
  ## 
  let valid = call_613726.validator(path, query, header, formData, body)
  let scheme = call_613726.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613726.url(scheme.get, call_613726.host, call_613726.base,
                         call_613726.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613726, url, valid)

proc call*(call_613727: Call_GetCreateDBInstance_613653; Engine: string;
          DBInstanceIdentifier: string; DBInstanceClass: string;
          CopyTagsToSnapshot: bool = false; MonitoringInterval: int = 0;
          KmsKeyId: string = ""; MonitoringRoleArn: string = "";
          MasterUsername: string = ""; BackupRetentionPeriod: int = 0;
          EnableCloudwatchLogsExports: JsonNode = nil; EngineVersion: string = "";
          Action: string = "CreateDBInstance"; Domain: string = "";
          VpcSecurityGroupIds: JsonNode = nil; AllocatedStorage: int = 0;
          EnablePerformanceInsights: bool = false; PubliclyAccessible: bool = false;
          DBName: string = ""; TdeCredentialPassword: string = "";
          StorageEncrypted: bool = false; DBParameterGroupName: string = "";
          DeletionProtection: bool = false; CharacterSetName: string = "";
          Tags: JsonNode = nil; DBClusterIdentifier: string = "";
          LicenseModel: string = ""; TdeCredentialArn: string = "";
          PromotionTier: int = 0; StorageType: string = "";
          EnableIAMDatabaseAuthentication: bool = false; MultiAZ: bool = false;
          DBSecurityGroups: JsonNode = nil; Port: int = 0;
          PerformanceInsightsKMSKeyId: string = ""; MasterUserPassword: string = "";
          AvailabilityZone: string = ""; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; PreferredBackupWindow: string = "";
          PreferredMaintenanceWindow: string = ""; Timezone: string = "";
          AutoMinorVersionUpgrade: bool = false; Iops: int = 0;
          Version: string = "2014-10-31"; DomainIAMRoleName: string = ""): Recallable =
  ## getCreateDBInstance
  ## Creates a new DB instance.
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance.</p> <p>Valid Values: <code>neptune</code> </p>
  ##   CopyTagsToSnapshot: bool
  ##                     : True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>If the <code>StorageEncrypted</code> parameter is true, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon Neptune will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   MasterUsername: string
  ##                 : The name for the master user. Not used.
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Cannot be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs.
  ##   EngineVersion: string
  ##                : The version number of the database engine to use. Currently, setting this parameter has no effect.
  ##   Action: string (required)
  ##   Domain: string
  ##         : Specify the Active Directory Domain to create the instance in.
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to associate with this DB instance.</p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   AllocatedStorage: int
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p>Not applicable. Neptune cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in a Neptune cluster volume.</p>
  ##   EnablePerformanceInsights: bool
  ##                            :  <i>(Not supported by Neptune)</i> 
  ##   PubliclyAccessible: bool
  ##                     : This flag should no longer be used.
  ##   DBName: string
  ##         : Not supported.
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   StorageEncrypted: bool
  ##                   : <p>Specifies whether the DB instance is encrypted.</p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: false</p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If this argument is omitted, the default DBParameterGroup for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DeletionProtection: bool
  ##                     : <p>A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. </p> <p>You can enable or disable deletion protection for the DB cluster. For more information, see <a>CreateDBCluster</a>. DB instances in a DB cluster can be deleted even when deletion protection is enabled for the DB cluster. </p>
  ##   CharacterSetName: string
  ##                   :  <i>(Not supported by Neptune)</i> 
  ##   Tags: JArray
  ##       : The tags to assign to the new instance.
  ##   DBClusterIdentifier: string
  ##                      : <p>The identifier of the DB cluster that the instance will belong to.</p> <p>For information on creating a DB cluster, see <a>CreateDBCluster</a>.</p> <p>Type: String</p>
  ##   LicenseModel: string
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which an Read Replica is promoted to the primary instance after a failure of the existing primary instance. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p>Not applicable. Storage is managed by the DB Cluster.</p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable AWS Identity and Access Management (IAM) authentication for Neptune.</p> <p>Default: <code>false</code> </p>
  ##   MultiAZ: bool
  ##          : Specifies if the DB instance is a Multi-AZ deployment. You can't set the AvailabilityZone parameter if the MultiAZ parameter is set to true.
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p>Not applicable. The port is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p> Default: <code>8182</code> </p> <p>Type: Integer</p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              :  <i>(Not supported by Neptune)</i> 
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Not used.</p>
  ##   AvailabilityZone: string
  ##                   : <p> The EC2 Availability Zone that the DB instance is created in</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The AvailabilityZone parameter can't be specified if the MultiAZ parameter is set to <code>true</code>. The specified Availability Zone must be in the same AWS Region as the current endpoint.</p>
  ##   OptionGroupName: string
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created.</p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p>
  ##   DBInstanceClass: string (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions.
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.</p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   Timezone: string
  ##           : The time zone of the DB instance.
  ##   AutoMinorVersionUpgrade: bool
  ##                          : <p>Indicates that minor engine upgrades are applied automatically to the DB instance during the maintenance window.</p> <p>Default: <code>true</code> </p>
  ##   Iops: int
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   Version: string (required)
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  var query_613728 = newJObject()
  add(query_613728, "Engine", newJString(Engine))
  add(query_613728, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_613728, "MonitoringInterval", newJInt(MonitoringInterval))
  add(query_613728, "KmsKeyId", newJString(KmsKeyId))
  add(query_613728, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(query_613728, "MasterUsername", newJString(MasterUsername))
  add(query_613728, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  if EnableCloudwatchLogsExports != nil:
    query_613728.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_613728, "EngineVersion", newJString(EngineVersion))
  add(query_613728, "Action", newJString(Action))
  add(query_613728, "Domain", newJString(Domain))
  if VpcSecurityGroupIds != nil:
    query_613728.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_613728, "AllocatedStorage", newJInt(AllocatedStorage))
  add(query_613728, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(query_613728, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_613728, "DBName", newJString(DBName))
  add(query_613728, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(query_613728, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_613728, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_613728, "DeletionProtection", newJBool(DeletionProtection))
  add(query_613728, "CharacterSetName", newJString(CharacterSetName))
  if Tags != nil:
    query_613728.add "Tags", Tags
  add(query_613728, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_613728, "LicenseModel", newJString(LicenseModel))
  add(query_613728, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_613728, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(query_613728, "PromotionTier", newJInt(PromotionTier))
  add(query_613728, "StorageType", newJString(StorageType))
  add(query_613728, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_613728, "MultiAZ", newJBool(MultiAZ))
  if DBSecurityGroups != nil:
    query_613728.add "DBSecurityGroups", DBSecurityGroups
  add(query_613728, "Port", newJInt(Port))
  add(query_613728, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(query_613728, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_613728, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_613728, "OptionGroupName", newJString(OptionGroupName))
  add(query_613728, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_613728, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_613728, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_613728, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_613728, "Timezone", newJString(Timezone))
  add(query_613728, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_613728, "Iops", newJInt(Iops))
  add(query_613728, "Version", newJString(Version))
  add(query_613728, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  result = call_613727.call(nil, query_613728, nil, nil, nil)

var getCreateDBInstance* = Call_GetCreateDBInstance_613653(
    name: "getCreateDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBInstance",
    validator: validate_GetCreateDBInstance_613654, base: "/",
    url: url_GetCreateDBInstance_613655, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBParameterGroup_613807 = ref object of OpenApiRestCall_612642
proc url_PostCreateDBParameterGroup_613809(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBParameterGroup_613808(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB parameter group.</p> <p>A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect.</p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613810 = query.getOrDefault("Action")
  valid_613810 = validateParameter(valid_613810, JString, required = true,
                                 default = newJString("CreateDBParameterGroup"))
  if valid_613810 != nil:
    section.add "Action", valid_613810
  var valid_613811 = query.getOrDefault("Version")
  valid_613811 = validateParameter(valid_613811, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613811 != nil:
    section.add "Version", valid_613811
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613812 = header.getOrDefault("X-Amz-Signature")
  valid_613812 = validateParameter(valid_613812, JString, required = false,
                                 default = nil)
  if valid_613812 != nil:
    section.add "X-Amz-Signature", valid_613812
  var valid_613813 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613813 = validateParameter(valid_613813, JString, required = false,
                                 default = nil)
  if valid_613813 != nil:
    section.add "X-Amz-Content-Sha256", valid_613813
  var valid_613814 = header.getOrDefault("X-Amz-Date")
  valid_613814 = validateParameter(valid_613814, JString, required = false,
                                 default = nil)
  if valid_613814 != nil:
    section.add "X-Amz-Date", valid_613814
  var valid_613815 = header.getOrDefault("X-Amz-Credential")
  valid_613815 = validateParameter(valid_613815, JString, required = false,
                                 default = nil)
  if valid_613815 != nil:
    section.add "X-Amz-Credential", valid_613815
  var valid_613816 = header.getOrDefault("X-Amz-Security-Token")
  valid_613816 = validateParameter(valid_613816, JString, required = false,
                                 default = nil)
  if valid_613816 != nil:
    section.add "X-Amz-Security-Token", valid_613816
  var valid_613817 = header.getOrDefault("X-Amz-Algorithm")
  valid_613817 = validateParameter(valid_613817, JString, required = false,
                                 default = nil)
  if valid_613817 != nil:
    section.add "X-Amz-Algorithm", valid_613817
  var valid_613818 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613818 = validateParameter(valid_613818, JString, required = false,
                                 default = nil)
  if valid_613818 != nil:
    section.add "X-Amz-SignedHeaders", valid_613818
  result.add "header", section
  ## parameters in `formData` object:
  ##   Description: JString (required)
  ##              : The description for the DB parameter group.
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB parameter group.
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Description` field"
  var valid_613819 = formData.getOrDefault("Description")
  valid_613819 = validateParameter(valid_613819, JString, required = true,
                                 default = nil)
  if valid_613819 != nil:
    section.add "Description", valid_613819
  var valid_613820 = formData.getOrDefault("DBParameterGroupName")
  valid_613820 = validateParameter(valid_613820, JString, required = true,
                                 default = nil)
  if valid_613820 != nil:
    section.add "DBParameterGroupName", valid_613820
  var valid_613821 = formData.getOrDefault("Tags")
  valid_613821 = validateParameter(valid_613821, JArray, required = false,
                                 default = nil)
  if valid_613821 != nil:
    section.add "Tags", valid_613821
  var valid_613822 = formData.getOrDefault("DBParameterGroupFamily")
  valid_613822 = validateParameter(valid_613822, JString, required = true,
                                 default = nil)
  if valid_613822 != nil:
    section.add "DBParameterGroupFamily", valid_613822
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613823: Call_PostCreateDBParameterGroup_613807; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB parameter group.</p> <p>A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect.</p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_613823.validator(path, query, header, formData, body)
  let scheme = call_613823.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613823.url(scheme.get, call_613823.host, call_613823.base,
                         call_613823.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613823, url, valid)

proc call*(call_613824: Call_PostCreateDBParameterGroup_613807;
          Description: string; DBParameterGroupName: string;
          DBParameterGroupFamily: string;
          Action: string = "CreateDBParameterGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBParameterGroup
  ## <p>Creates a new DB parameter group.</p> <p>A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect.</p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   Description: string (required)
  ##              : The description for the DB parameter group.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB parameter group.
  ##   Version: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.
  var query_613825 = newJObject()
  var formData_613826 = newJObject()
  add(formData_613826, "Description", newJString(Description))
  add(formData_613826, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_613825, "Action", newJString(Action))
  if Tags != nil:
    formData_613826.add "Tags", Tags
  add(query_613825, "Version", newJString(Version))
  add(formData_613826, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  result = call_613824.call(nil, query_613825, nil, formData_613826, nil)

var postCreateDBParameterGroup* = Call_PostCreateDBParameterGroup_613807(
    name: "postCreateDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBParameterGroup",
    validator: validate_PostCreateDBParameterGroup_613808, base: "/",
    url: url_PostCreateDBParameterGroup_613809,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBParameterGroup_613788 = ref object of OpenApiRestCall_612642
proc url_GetCreateDBParameterGroup_613790(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBParameterGroup_613789(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB parameter group.</p> <p>A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect.</p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB parameter group.
  ##   Action: JString (required)
  ##   Description: JString (required)
  ##              : The description for the DB parameter group.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_613791 = query.getOrDefault("DBParameterGroupFamily")
  valid_613791 = validateParameter(valid_613791, JString, required = true,
                                 default = nil)
  if valid_613791 != nil:
    section.add "DBParameterGroupFamily", valid_613791
  var valid_613792 = query.getOrDefault("DBParameterGroupName")
  valid_613792 = validateParameter(valid_613792, JString, required = true,
                                 default = nil)
  if valid_613792 != nil:
    section.add "DBParameterGroupName", valid_613792
  var valid_613793 = query.getOrDefault("Tags")
  valid_613793 = validateParameter(valid_613793, JArray, required = false,
                                 default = nil)
  if valid_613793 != nil:
    section.add "Tags", valid_613793
  var valid_613794 = query.getOrDefault("Action")
  valid_613794 = validateParameter(valid_613794, JString, required = true,
                                 default = newJString("CreateDBParameterGroup"))
  if valid_613794 != nil:
    section.add "Action", valid_613794
  var valid_613795 = query.getOrDefault("Description")
  valid_613795 = validateParameter(valid_613795, JString, required = true,
                                 default = nil)
  if valid_613795 != nil:
    section.add "Description", valid_613795
  var valid_613796 = query.getOrDefault("Version")
  valid_613796 = validateParameter(valid_613796, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613796 != nil:
    section.add "Version", valid_613796
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613797 = header.getOrDefault("X-Amz-Signature")
  valid_613797 = validateParameter(valid_613797, JString, required = false,
                                 default = nil)
  if valid_613797 != nil:
    section.add "X-Amz-Signature", valid_613797
  var valid_613798 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613798 = validateParameter(valid_613798, JString, required = false,
                                 default = nil)
  if valid_613798 != nil:
    section.add "X-Amz-Content-Sha256", valid_613798
  var valid_613799 = header.getOrDefault("X-Amz-Date")
  valid_613799 = validateParameter(valid_613799, JString, required = false,
                                 default = nil)
  if valid_613799 != nil:
    section.add "X-Amz-Date", valid_613799
  var valid_613800 = header.getOrDefault("X-Amz-Credential")
  valid_613800 = validateParameter(valid_613800, JString, required = false,
                                 default = nil)
  if valid_613800 != nil:
    section.add "X-Amz-Credential", valid_613800
  var valid_613801 = header.getOrDefault("X-Amz-Security-Token")
  valid_613801 = validateParameter(valid_613801, JString, required = false,
                                 default = nil)
  if valid_613801 != nil:
    section.add "X-Amz-Security-Token", valid_613801
  var valid_613802 = header.getOrDefault("X-Amz-Algorithm")
  valid_613802 = validateParameter(valid_613802, JString, required = false,
                                 default = nil)
  if valid_613802 != nil:
    section.add "X-Amz-Algorithm", valid_613802
  var valid_613803 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613803 = validateParameter(valid_613803, JString, required = false,
                                 default = nil)
  if valid_613803 != nil:
    section.add "X-Amz-SignedHeaders", valid_613803
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613804: Call_GetCreateDBParameterGroup_613788; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB parameter group.</p> <p>A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect.</p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_613804.validator(path, query, header, formData, body)
  let scheme = call_613804.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613804.url(scheme.get, call_613804.host, call_613804.base,
                         call_613804.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613804, url, valid)

proc call*(call_613805: Call_GetCreateDBParameterGroup_613788;
          DBParameterGroupFamily: string; DBParameterGroupName: string;
          Description: string; Tags: JsonNode = nil;
          Action: string = "CreateDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCreateDBParameterGroup
  ## <p>Creates a new DB parameter group.</p> <p>A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect.</p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   DBParameterGroupFamily: string (required)
  ##                         : The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB parameter group.
  ##   Action: string (required)
  ##   Description: string (required)
  ##              : The description for the DB parameter group.
  ##   Version: string (required)
  var query_613806 = newJObject()
  add(query_613806, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  add(query_613806, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Tags != nil:
    query_613806.add "Tags", Tags
  add(query_613806, "Action", newJString(Action))
  add(query_613806, "Description", newJString(Description))
  add(query_613806, "Version", newJString(Version))
  result = call_613805.call(nil, query_613806, nil, nil, nil)

var getCreateDBParameterGroup* = Call_GetCreateDBParameterGroup_613788(
    name: "getCreateDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBParameterGroup",
    validator: validate_GetCreateDBParameterGroup_613789, base: "/",
    url: url_GetCreateDBParameterGroup_613790,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBSubnetGroup_613846 = ref object of OpenApiRestCall_612642
proc url_PostCreateDBSubnetGroup_613848(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBSubnetGroup_613847(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613849 = query.getOrDefault("Action")
  valid_613849 = validateParameter(valid_613849, JString, required = true,
                                 default = newJString("CreateDBSubnetGroup"))
  if valid_613849 != nil:
    section.add "Action", valid_613849
  var valid_613850 = query.getOrDefault("Version")
  valid_613850 = validateParameter(valid_613850, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613850 != nil:
    section.add "Version", valid_613850
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613851 = header.getOrDefault("X-Amz-Signature")
  valid_613851 = validateParameter(valid_613851, JString, required = false,
                                 default = nil)
  if valid_613851 != nil:
    section.add "X-Amz-Signature", valid_613851
  var valid_613852 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613852 = validateParameter(valid_613852, JString, required = false,
                                 default = nil)
  if valid_613852 != nil:
    section.add "X-Amz-Content-Sha256", valid_613852
  var valid_613853 = header.getOrDefault("X-Amz-Date")
  valid_613853 = validateParameter(valid_613853, JString, required = false,
                                 default = nil)
  if valid_613853 != nil:
    section.add "X-Amz-Date", valid_613853
  var valid_613854 = header.getOrDefault("X-Amz-Credential")
  valid_613854 = validateParameter(valid_613854, JString, required = false,
                                 default = nil)
  if valid_613854 != nil:
    section.add "X-Amz-Credential", valid_613854
  var valid_613855 = header.getOrDefault("X-Amz-Security-Token")
  valid_613855 = validateParameter(valid_613855, JString, required = false,
                                 default = nil)
  if valid_613855 != nil:
    section.add "X-Amz-Security-Token", valid_613855
  var valid_613856 = header.getOrDefault("X-Amz-Algorithm")
  valid_613856 = validateParameter(valid_613856, JString, required = false,
                                 default = nil)
  if valid_613856 != nil:
    section.add "X-Amz-Algorithm", valid_613856
  var valid_613857 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613857 = validateParameter(valid_613857, JString, required = false,
                                 default = nil)
  if valid_613857 != nil:
    section.add "X-Amz-SignedHeaders", valid_613857
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSubnetGroupDescription: JString (required)
  ##                           : The description for the DB subnet group.
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB subnet group.
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSubnetGroupDescription` field"
  var valid_613858 = formData.getOrDefault("DBSubnetGroupDescription")
  valid_613858 = validateParameter(valid_613858, JString, required = true,
                                 default = nil)
  if valid_613858 != nil:
    section.add "DBSubnetGroupDescription", valid_613858
  var valid_613859 = formData.getOrDefault("Tags")
  valid_613859 = validateParameter(valid_613859, JArray, required = false,
                                 default = nil)
  if valid_613859 != nil:
    section.add "Tags", valid_613859
  var valid_613860 = formData.getOrDefault("DBSubnetGroupName")
  valid_613860 = validateParameter(valid_613860, JString, required = true,
                                 default = nil)
  if valid_613860 != nil:
    section.add "DBSubnetGroupName", valid_613860
  var valid_613861 = formData.getOrDefault("SubnetIds")
  valid_613861 = validateParameter(valid_613861, JArray, required = true, default = nil)
  if valid_613861 != nil:
    section.add "SubnetIds", valid_613861
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613862: Call_PostCreateDBSubnetGroup_613846; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_613862.validator(path, query, header, formData, body)
  let scheme = call_613862.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613862.url(scheme.get, call_613862.host, call_613862.base,
                         call_613862.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613862, url, valid)

proc call*(call_613863: Call_PostCreateDBSubnetGroup_613846;
          DBSubnetGroupDescription: string; DBSubnetGroupName: string;
          SubnetIds: JsonNode; Action: string = "CreateDBSubnetGroup";
          Tags: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postCreateDBSubnetGroup
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   DBSubnetGroupDescription: string (required)
  ##                           : The description for the DB subnet group.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB subnet group.
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  var query_613864 = newJObject()
  var formData_613865 = newJObject()
  add(formData_613865, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_613864, "Action", newJString(Action))
  if Tags != nil:
    formData_613865.add "Tags", Tags
  add(formData_613865, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_613864, "Version", newJString(Version))
  if SubnetIds != nil:
    formData_613865.add "SubnetIds", SubnetIds
  result = call_613863.call(nil, query_613864, nil, formData_613865, nil)

var postCreateDBSubnetGroup* = Call_PostCreateDBSubnetGroup_613846(
    name: "postCreateDBSubnetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSubnetGroup",
    validator: validate_PostCreateDBSubnetGroup_613847, base: "/",
    url: url_PostCreateDBSubnetGroup_613848, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBSubnetGroup_613827 = ref object of OpenApiRestCall_612642
proc url_GetCreateDBSubnetGroup_613829(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBSubnetGroup_613828(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB subnet group.
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  ##   Action: JString (required)
  ##   DBSubnetGroupDescription: JString (required)
  ##                           : The description for the DB subnet group.
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_613830 = query.getOrDefault("Tags")
  valid_613830 = validateParameter(valid_613830, JArray, required = false,
                                 default = nil)
  if valid_613830 != nil:
    section.add "Tags", valid_613830
  assert query != nil,
        "query argument is necessary due to required `SubnetIds` field"
  var valid_613831 = query.getOrDefault("SubnetIds")
  valid_613831 = validateParameter(valid_613831, JArray, required = true, default = nil)
  if valid_613831 != nil:
    section.add "SubnetIds", valid_613831
  var valid_613832 = query.getOrDefault("Action")
  valid_613832 = validateParameter(valid_613832, JString, required = true,
                                 default = newJString("CreateDBSubnetGroup"))
  if valid_613832 != nil:
    section.add "Action", valid_613832
  var valid_613833 = query.getOrDefault("DBSubnetGroupDescription")
  valid_613833 = validateParameter(valid_613833, JString, required = true,
                                 default = nil)
  if valid_613833 != nil:
    section.add "DBSubnetGroupDescription", valid_613833
  var valid_613834 = query.getOrDefault("DBSubnetGroupName")
  valid_613834 = validateParameter(valid_613834, JString, required = true,
                                 default = nil)
  if valid_613834 != nil:
    section.add "DBSubnetGroupName", valid_613834
  var valid_613835 = query.getOrDefault("Version")
  valid_613835 = validateParameter(valid_613835, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613835 != nil:
    section.add "Version", valid_613835
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613836 = header.getOrDefault("X-Amz-Signature")
  valid_613836 = validateParameter(valid_613836, JString, required = false,
                                 default = nil)
  if valid_613836 != nil:
    section.add "X-Amz-Signature", valid_613836
  var valid_613837 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613837 = validateParameter(valid_613837, JString, required = false,
                                 default = nil)
  if valid_613837 != nil:
    section.add "X-Amz-Content-Sha256", valid_613837
  var valid_613838 = header.getOrDefault("X-Amz-Date")
  valid_613838 = validateParameter(valid_613838, JString, required = false,
                                 default = nil)
  if valid_613838 != nil:
    section.add "X-Amz-Date", valid_613838
  var valid_613839 = header.getOrDefault("X-Amz-Credential")
  valid_613839 = validateParameter(valid_613839, JString, required = false,
                                 default = nil)
  if valid_613839 != nil:
    section.add "X-Amz-Credential", valid_613839
  var valid_613840 = header.getOrDefault("X-Amz-Security-Token")
  valid_613840 = validateParameter(valid_613840, JString, required = false,
                                 default = nil)
  if valid_613840 != nil:
    section.add "X-Amz-Security-Token", valid_613840
  var valid_613841 = header.getOrDefault("X-Amz-Algorithm")
  valid_613841 = validateParameter(valid_613841, JString, required = false,
                                 default = nil)
  if valid_613841 != nil:
    section.add "X-Amz-Algorithm", valid_613841
  var valid_613842 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613842 = validateParameter(valid_613842, JString, required = false,
                                 default = nil)
  if valid_613842 != nil:
    section.add "X-Amz-SignedHeaders", valid_613842
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613843: Call_GetCreateDBSubnetGroup_613827; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_613843.validator(path, query, header, formData, body)
  let scheme = call_613843.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613843.url(scheme.get, call_613843.host, call_613843.base,
                         call_613843.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613843, url, valid)

proc call*(call_613844: Call_GetCreateDBSubnetGroup_613827; SubnetIds: JsonNode;
          DBSubnetGroupDescription: string; DBSubnetGroupName: string;
          Tags: JsonNode = nil; Action: string = "CreateDBSubnetGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBSubnetGroup
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB subnet group.
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  ##   Action: string (required)
  ##   DBSubnetGroupDescription: string (required)
  ##                           : The description for the DB subnet group.
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_613845 = newJObject()
  if Tags != nil:
    query_613845.add "Tags", Tags
  if SubnetIds != nil:
    query_613845.add "SubnetIds", SubnetIds
  add(query_613845, "Action", newJString(Action))
  add(query_613845, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_613845, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_613845, "Version", newJString(Version))
  result = call_613844.call(nil, query_613845, nil, nil, nil)

var getCreateDBSubnetGroup* = Call_GetCreateDBSubnetGroup_613827(
    name: "getCreateDBSubnetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSubnetGroup",
    validator: validate_GetCreateDBSubnetGroup_613828, base: "/",
    url: url_GetCreateDBSubnetGroup_613829, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateEventSubscription_613888 = ref object of OpenApiRestCall_612642
proc url_PostCreateEventSubscription_613890(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateEventSubscription_613889(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the Neptune console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of Neptune sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your Neptune sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all Neptune sources belonging to your customer account.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613891 = query.getOrDefault("Action")
  valid_613891 = validateParameter(valid_613891, JString, required = true, default = newJString(
      "CreateEventSubscription"))
  if valid_613891 != nil:
    section.add "Action", valid_613891
  var valid_613892 = query.getOrDefault("Version")
  valid_613892 = validateParameter(valid_613892, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613892 != nil:
    section.add "Version", valid_613892
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613893 = header.getOrDefault("X-Amz-Signature")
  valid_613893 = validateParameter(valid_613893, JString, required = false,
                                 default = nil)
  if valid_613893 != nil:
    section.add "X-Amz-Signature", valid_613893
  var valid_613894 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613894 = validateParameter(valid_613894, JString, required = false,
                                 default = nil)
  if valid_613894 != nil:
    section.add "X-Amz-Content-Sha256", valid_613894
  var valid_613895 = header.getOrDefault("X-Amz-Date")
  valid_613895 = validateParameter(valid_613895, JString, required = false,
                                 default = nil)
  if valid_613895 != nil:
    section.add "X-Amz-Date", valid_613895
  var valid_613896 = header.getOrDefault("X-Amz-Credential")
  valid_613896 = validateParameter(valid_613896, JString, required = false,
                                 default = nil)
  if valid_613896 != nil:
    section.add "X-Amz-Credential", valid_613896
  var valid_613897 = header.getOrDefault("X-Amz-Security-Token")
  valid_613897 = validateParameter(valid_613897, JString, required = false,
                                 default = nil)
  if valid_613897 != nil:
    section.add "X-Amz-Security-Token", valid_613897
  var valid_613898 = header.getOrDefault("X-Amz-Algorithm")
  valid_613898 = validateParameter(valid_613898, JString, required = false,
                                 default = nil)
  if valid_613898 != nil:
    section.add "X-Amz-Algorithm", valid_613898
  var valid_613899 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613899 = validateParameter(valid_613899, JString, required = false,
                                 default = nil)
  if valid_613899 != nil:
    section.add "X-Amz-SignedHeaders", valid_613899
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SnsTopicArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Enabled: JBool
  ##          :  A Boolean value; set to <b>true</b> to activate the subscription, set to <b>false</b> to create the subscription but not active it.
  ##   SubscriptionName: JString (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the <b>DescribeEventCategories</b> action.
  ##   Tags: JArray
  ##       : The tags to be applied to the new event subscription.
  section = newJObject()
  var valid_613900 = formData.getOrDefault("SourceIds")
  valid_613900 = validateParameter(valid_613900, JArray, required = false,
                                 default = nil)
  if valid_613900 != nil:
    section.add "SourceIds", valid_613900
  assert formData != nil,
        "formData argument is necessary due to required `SnsTopicArn` field"
  var valid_613901 = formData.getOrDefault("SnsTopicArn")
  valid_613901 = validateParameter(valid_613901, JString, required = true,
                                 default = nil)
  if valid_613901 != nil:
    section.add "SnsTopicArn", valid_613901
  var valid_613902 = formData.getOrDefault("Enabled")
  valid_613902 = validateParameter(valid_613902, JBool, required = false, default = nil)
  if valid_613902 != nil:
    section.add "Enabled", valid_613902
  var valid_613903 = formData.getOrDefault("SubscriptionName")
  valid_613903 = validateParameter(valid_613903, JString, required = true,
                                 default = nil)
  if valid_613903 != nil:
    section.add "SubscriptionName", valid_613903
  var valid_613904 = formData.getOrDefault("SourceType")
  valid_613904 = validateParameter(valid_613904, JString, required = false,
                                 default = nil)
  if valid_613904 != nil:
    section.add "SourceType", valid_613904
  var valid_613905 = formData.getOrDefault("EventCategories")
  valid_613905 = validateParameter(valid_613905, JArray, required = false,
                                 default = nil)
  if valid_613905 != nil:
    section.add "EventCategories", valid_613905
  var valid_613906 = formData.getOrDefault("Tags")
  valid_613906 = validateParameter(valid_613906, JArray, required = false,
                                 default = nil)
  if valid_613906 != nil:
    section.add "Tags", valid_613906
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613907: Call_PostCreateEventSubscription_613888; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the Neptune console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of Neptune sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your Neptune sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all Neptune sources belonging to your customer account.</p>
  ## 
  let valid = call_613907.validator(path, query, header, formData, body)
  let scheme = call_613907.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613907.url(scheme.get, call_613907.host, call_613907.base,
                         call_613907.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613907, url, valid)

proc call*(call_613908: Call_PostCreateEventSubscription_613888;
          SnsTopicArn: string; SubscriptionName: string; SourceIds: JsonNode = nil;
          Enabled: bool = false; SourceType: string = "";
          EventCategories: JsonNode = nil;
          Action: string = "CreateEventSubscription"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateEventSubscription
  ## <p>Creates an event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the Neptune console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of Neptune sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your Neptune sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all Neptune sources belonging to your customer account.</p>
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SnsTopicArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Enabled: bool
  ##          :  A Boolean value; set to <b>true</b> to activate the subscription, set to <b>false</b> to create the subscription but not active it.
  ##   SubscriptionName: string (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the <b>DescribeEventCategories</b> action.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : The tags to be applied to the new event subscription.
  ##   Version: string (required)
  var query_613909 = newJObject()
  var formData_613910 = newJObject()
  if SourceIds != nil:
    formData_613910.add "SourceIds", SourceIds
  add(formData_613910, "SnsTopicArn", newJString(SnsTopicArn))
  add(formData_613910, "Enabled", newJBool(Enabled))
  add(formData_613910, "SubscriptionName", newJString(SubscriptionName))
  add(formData_613910, "SourceType", newJString(SourceType))
  if EventCategories != nil:
    formData_613910.add "EventCategories", EventCategories
  add(query_613909, "Action", newJString(Action))
  if Tags != nil:
    formData_613910.add "Tags", Tags
  add(query_613909, "Version", newJString(Version))
  result = call_613908.call(nil, query_613909, nil, formData_613910, nil)

var postCreateEventSubscription* = Call_PostCreateEventSubscription_613888(
    name: "postCreateEventSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateEventSubscription",
    validator: validate_PostCreateEventSubscription_613889, base: "/",
    url: url_PostCreateEventSubscription_613890,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateEventSubscription_613866 = ref object of OpenApiRestCall_612642
proc url_GetCreateEventSubscription_613868(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateEventSubscription_613867(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the Neptune console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of Neptune sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your Neptune sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all Neptune sources belonging to your customer account.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : The tags to be applied to the new event subscription.
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  ##   Enabled: JBool
  ##          :  A Boolean value; set to <b>true</b> to activate the subscription, set to <b>false</b> to create the subscription but not active it.
  ##   SubscriptionName: JString (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the <b>DescribeEventCategories</b> action.
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Action: JString (required)
  ##   SnsTopicArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Version: JString (required)
  section = newJObject()
  var valid_613869 = query.getOrDefault("Tags")
  valid_613869 = validateParameter(valid_613869, JArray, required = false,
                                 default = nil)
  if valid_613869 != nil:
    section.add "Tags", valid_613869
  var valid_613870 = query.getOrDefault("SourceType")
  valid_613870 = validateParameter(valid_613870, JString, required = false,
                                 default = nil)
  if valid_613870 != nil:
    section.add "SourceType", valid_613870
  var valid_613871 = query.getOrDefault("Enabled")
  valid_613871 = validateParameter(valid_613871, JBool, required = false, default = nil)
  if valid_613871 != nil:
    section.add "Enabled", valid_613871
  assert query != nil,
        "query argument is necessary due to required `SubscriptionName` field"
  var valid_613872 = query.getOrDefault("SubscriptionName")
  valid_613872 = validateParameter(valid_613872, JString, required = true,
                                 default = nil)
  if valid_613872 != nil:
    section.add "SubscriptionName", valid_613872
  var valid_613873 = query.getOrDefault("EventCategories")
  valid_613873 = validateParameter(valid_613873, JArray, required = false,
                                 default = nil)
  if valid_613873 != nil:
    section.add "EventCategories", valid_613873
  var valid_613874 = query.getOrDefault("SourceIds")
  valid_613874 = validateParameter(valid_613874, JArray, required = false,
                                 default = nil)
  if valid_613874 != nil:
    section.add "SourceIds", valid_613874
  var valid_613875 = query.getOrDefault("Action")
  valid_613875 = validateParameter(valid_613875, JString, required = true, default = newJString(
      "CreateEventSubscription"))
  if valid_613875 != nil:
    section.add "Action", valid_613875
  var valid_613876 = query.getOrDefault("SnsTopicArn")
  valid_613876 = validateParameter(valid_613876, JString, required = true,
                                 default = nil)
  if valid_613876 != nil:
    section.add "SnsTopicArn", valid_613876
  var valid_613877 = query.getOrDefault("Version")
  valid_613877 = validateParameter(valid_613877, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613877 != nil:
    section.add "Version", valid_613877
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613878 = header.getOrDefault("X-Amz-Signature")
  valid_613878 = validateParameter(valid_613878, JString, required = false,
                                 default = nil)
  if valid_613878 != nil:
    section.add "X-Amz-Signature", valid_613878
  var valid_613879 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613879 = validateParameter(valid_613879, JString, required = false,
                                 default = nil)
  if valid_613879 != nil:
    section.add "X-Amz-Content-Sha256", valid_613879
  var valid_613880 = header.getOrDefault("X-Amz-Date")
  valid_613880 = validateParameter(valid_613880, JString, required = false,
                                 default = nil)
  if valid_613880 != nil:
    section.add "X-Amz-Date", valid_613880
  var valid_613881 = header.getOrDefault("X-Amz-Credential")
  valid_613881 = validateParameter(valid_613881, JString, required = false,
                                 default = nil)
  if valid_613881 != nil:
    section.add "X-Amz-Credential", valid_613881
  var valid_613882 = header.getOrDefault("X-Amz-Security-Token")
  valid_613882 = validateParameter(valid_613882, JString, required = false,
                                 default = nil)
  if valid_613882 != nil:
    section.add "X-Amz-Security-Token", valid_613882
  var valid_613883 = header.getOrDefault("X-Amz-Algorithm")
  valid_613883 = validateParameter(valid_613883, JString, required = false,
                                 default = nil)
  if valid_613883 != nil:
    section.add "X-Amz-Algorithm", valid_613883
  var valid_613884 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613884 = validateParameter(valid_613884, JString, required = false,
                                 default = nil)
  if valid_613884 != nil:
    section.add "X-Amz-SignedHeaders", valid_613884
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613885: Call_GetCreateEventSubscription_613866; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the Neptune console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of Neptune sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your Neptune sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all Neptune sources belonging to your customer account.</p>
  ## 
  let valid = call_613885.validator(path, query, header, formData, body)
  let scheme = call_613885.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613885.url(scheme.get, call_613885.host, call_613885.base,
                         call_613885.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613885, url, valid)

proc call*(call_613886: Call_GetCreateEventSubscription_613866;
          SubscriptionName: string; SnsTopicArn: string; Tags: JsonNode = nil;
          SourceType: string = ""; Enabled: bool = false;
          EventCategories: JsonNode = nil; SourceIds: JsonNode = nil;
          Action: string = "CreateEventSubscription"; Version: string = "2014-10-31"): Recallable =
  ## getCreateEventSubscription
  ## <p>Creates an event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the Neptune console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of Neptune sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your Neptune sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all Neptune sources belonging to your customer account.</p>
  ##   Tags: JArray
  ##       : The tags to be applied to the new event subscription.
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  ##   Enabled: bool
  ##          :  A Boolean value; set to <b>true</b> to activate the subscription, set to <b>false</b> to create the subscription but not active it.
  ##   SubscriptionName: string (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the <b>DescribeEventCategories</b> action.
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Action: string (required)
  ##   SnsTopicArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Version: string (required)
  var query_613887 = newJObject()
  if Tags != nil:
    query_613887.add "Tags", Tags
  add(query_613887, "SourceType", newJString(SourceType))
  add(query_613887, "Enabled", newJBool(Enabled))
  add(query_613887, "SubscriptionName", newJString(SubscriptionName))
  if EventCategories != nil:
    query_613887.add "EventCategories", EventCategories
  if SourceIds != nil:
    query_613887.add "SourceIds", SourceIds
  add(query_613887, "Action", newJString(Action))
  add(query_613887, "SnsTopicArn", newJString(SnsTopicArn))
  add(query_613887, "Version", newJString(Version))
  result = call_613886.call(nil, query_613887, nil, nil, nil)

var getCreateEventSubscription* = Call_GetCreateEventSubscription_613866(
    name: "getCreateEventSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateEventSubscription",
    validator: validate_GetCreateEventSubscription_613867, base: "/",
    url: url_GetCreateEventSubscription_613868,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBCluster_613929 = ref object of OpenApiRestCall_612642
proc url_PostDeleteDBCluster_613931(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBCluster_613930(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613932 = query.getOrDefault("Action")
  valid_613932 = validateParameter(valid_613932, JString, required = true,
                                 default = newJString("DeleteDBCluster"))
  if valid_613932 != nil:
    section.add "Action", valid_613932
  var valid_613933 = query.getOrDefault("Version")
  valid_613933 = validateParameter(valid_613933, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613933 != nil:
    section.add "Version", valid_613933
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613934 = header.getOrDefault("X-Amz-Signature")
  valid_613934 = validateParameter(valid_613934, JString, required = false,
                                 default = nil)
  if valid_613934 != nil:
    section.add "X-Amz-Signature", valid_613934
  var valid_613935 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613935 = validateParameter(valid_613935, JString, required = false,
                                 default = nil)
  if valid_613935 != nil:
    section.add "X-Amz-Content-Sha256", valid_613935
  var valid_613936 = header.getOrDefault("X-Amz-Date")
  valid_613936 = validateParameter(valid_613936, JString, required = false,
                                 default = nil)
  if valid_613936 != nil:
    section.add "X-Amz-Date", valid_613936
  var valid_613937 = header.getOrDefault("X-Amz-Credential")
  valid_613937 = validateParameter(valid_613937, JString, required = false,
                                 default = nil)
  if valid_613937 != nil:
    section.add "X-Amz-Credential", valid_613937
  var valid_613938 = header.getOrDefault("X-Amz-Security-Token")
  valid_613938 = validateParameter(valid_613938, JString, required = false,
                                 default = nil)
  if valid_613938 != nil:
    section.add "X-Amz-Security-Token", valid_613938
  var valid_613939 = header.getOrDefault("X-Amz-Algorithm")
  valid_613939 = validateParameter(valid_613939, JString, required = false,
                                 default = nil)
  if valid_613939 != nil:
    section.add "X-Amz-Algorithm", valid_613939
  var valid_613940 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613940 = validateParameter(valid_613940, JString, required = false,
                                 default = nil)
  if valid_613940 != nil:
    section.add "X-Amz-SignedHeaders", valid_613940
  result.add "header", section
  ## parameters in `formData` object:
  ##   SkipFinalSnapshot: JBool
  ##                    : <p> Determines whether a final DB cluster snapshot is created before the DB cluster is deleted. If <code>true</code> is specified, no DB cluster snapshot is created. If <code>false</code> is specified, a DB cluster snapshot is created before the DB cluster is deleted.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is set to <code>false</code>.</p> <note> <p> Specifying this parameter and also setting the <code>SkipFinalShapshot</code> parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  section = newJObject()
  var valid_613941 = formData.getOrDefault("SkipFinalSnapshot")
  valid_613941 = validateParameter(valid_613941, JBool, required = false, default = nil)
  if valid_613941 != nil:
    section.add "SkipFinalSnapshot", valid_613941
  var valid_613942 = formData.getOrDefault("FinalDBSnapshotIdentifier")
  valid_613942 = validateParameter(valid_613942, JString, required = false,
                                 default = nil)
  if valid_613942 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_613942
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_613943 = formData.getOrDefault("DBClusterIdentifier")
  valid_613943 = validateParameter(valid_613943, JString, required = true,
                                 default = nil)
  if valid_613943 != nil:
    section.add "DBClusterIdentifier", valid_613943
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613944: Call_PostDeleteDBCluster_613929; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.
  ## 
  let valid = call_613944.validator(path, query, header, formData, body)
  let scheme = call_613944.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613944.url(scheme.get, call_613944.host, call_613944.base,
                         call_613944.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613944, url, valid)

proc call*(call_613945: Call_PostDeleteDBCluster_613929;
          DBClusterIdentifier: string; Action: string = "DeleteDBCluster";
          SkipFinalSnapshot: bool = false; FinalDBSnapshotIdentifier: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBCluster
  ## The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.
  ##   Action: string (required)
  ##   SkipFinalSnapshot: bool
  ##                    : <p> Determines whether a final DB cluster snapshot is created before the DB cluster is deleted. If <code>true</code> is specified, no DB cluster snapshot is created. If <code>false</code> is specified, a DB cluster snapshot is created before the DB cluster is deleted.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is set to <code>false</code>.</p> <note> <p> Specifying this parameter and also setting the <code>SkipFinalShapshot</code> parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  var query_613946 = newJObject()
  var formData_613947 = newJObject()
  add(query_613946, "Action", newJString(Action))
  add(formData_613947, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  add(formData_613947, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  add(query_613946, "Version", newJString(Version))
  add(formData_613947, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_613945.call(nil, query_613946, nil, formData_613947, nil)

var postDeleteDBCluster* = Call_PostDeleteDBCluster_613929(
    name: "postDeleteDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBCluster",
    validator: validate_PostDeleteDBCluster_613930, base: "/",
    url: url_PostDeleteDBCluster_613931, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBCluster_613911 = ref object of OpenApiRestCall_612642
proc url_GetDeleteDBCluster_613913(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBCluster_613912(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   SkipFinalSnapshot: JBool
  ##                    : <p> Determines whether a final DB cluster snapshot is created before the DB cluster is deleted. If <code>true</code> is specified, no DB cluster snapshot is created. If <code>false</code> is specified, a DB cluster snapshot is created before the DB cluster is deleted.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is set to <code>false</code>.</p> <note> <p> Specifying this parameter and also setting the <code>SkipFinalShapshot</code> parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_613914 = query.getOrDefault("DBClusterIdentifier")
  valid_613914 = validateParameter(valid_613914, JString, required = true,
                                 default = nil)
  if valid_613914 != nil:
    section.add "DBClusterIdentifier", valid_613914
  var valid_613915 = query.getOrDefault("SkipFinalSnapshot")
  valid_613915 = validateParameter(valid_613915, JBool, required = false, default = nil)
  if valid_613915 != nil:
    section.add "SkipFinalSnapshot", valid_613915
  var valid_613916 = query.getOrDefault("Action")
  valid_613916 = validateParameter(valid_613916, JString, required = true,
                                 default = newJString("DeleteDBCluster"))
  if valid_613916 != nil:
    section.add "Action", valid_613916
  var valid_613917 = query.getOrDefault("Version")
  valid_613917 = validateParameter(valid_613917, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613917 != nil:
    section.add "Version", valid_613917
  var valid_613918 = query.getOrDefault("FinalDBSnapshotIdentifier")
  valid_613918 = validateParameter(valid_613918, JString, required = false,
                                 default = nil)
  if valid_613918 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_613918
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613919 = header.getOrDefault("X-Amz-Signature")
  valid_613919 = validateParameter(valid_613919, JString, required = false,
                                 default = nil)
  if valid_613919 != nil:
    section.add "X-Amz-Signature", valid_613919
  var valid_613920 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613920 = validateParameter(valid_613920, JString, required = false,
                                 default = nil)
  if valid_613920 != nil:
    section.add "X-Amz-Content-Sha256", valid_613920
  var valid_613921 = header.getOrDefault("X-Amz-Date")
  valid_613921 = validateParameter(valid_613921, JString, required = false,
                                 default = nil)
  if valid_613921 != nil:
    section.add "X-Amz-Date", valid_613921
  var valid_613922 = header.getOrDefault("X-Amz-Credential")
  valid_613922 = validateParameter(valid_613922, JString, required = false,
                                 default = nil)
  if valid_613922 != nil:
    section.add "X-Amz-Credential", valid_613922
  var valid_613923 = header.getOrDefault("X-Amz-Security-Token")
  valid_613923 = validateParameter(valid_613923, JString, required = false,
                                 default = nil)
  if valid_613923 != nil:
    section.add "X-Amz-Security-Token", valid_613923
  var valid_613924 = header.getOrDefault("X-Amz-Algorithm")
  valid_613924 = validateParameter(valid_613924, JString, required = false,
                                 default = nil)
  if valid_613924 != nil:
    section.add "X-Amz-Algorithm", valid_613924
  var valid_613925 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613925 = validateParameter(valid_613925, JString, required = false,
                                 default = nil)
  if valid_613925 != nil:
    section.add "X-Amz-SignedHeaders", valid_613925
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613926: Call_GetDeleteDBCluster_613911; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.
  ## 
  let valid = call_613926.validator(path, query, header, formData, body)
  let scheme = call_613926.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613926.url(scheme.get, call_613926.host, call_613926.base,
                         call_613926.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613926, url, valid)

proc call*(call_613927: Call_GetDeleteDBCluster_613911;
          DBClusterIdentifier: string; SkipFinalSnapshot: bool = false;
          Action: string = "DeleteDBCluster"; Version: string = "2014-10-31";
          FinalDBSnapshotIdentifier: string = ""): Recallable =
  ## getDeleteDBCluster
  ## The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   SkipFinalSnapshot: bool
  ##                    : <p> Determines whether a final DB cluster snapshot is created before the DB cluster is deleted. If <code>true</code> is specified, no DB cluster snapshot is created. If <code>false</code> is specified, a DB cluster snapshot is created before the DB cluster is deleted.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is set to <code>false</code>.</p> <note> <p> Specifying this parameter and also setting the <code>SkipFinalShapshot</code> parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  var query_613928 = newJObject()
  add(query_613928, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_613928, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  add(query_613928, "Action", newJString(Action))
  add(query_613928, "Version", newJString(Version))
  add(query_613928, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  result = call_613927.call(nil, query_613928, nil, nil, nil)

var getDeleteDBCluster* = Call_GetDeleteDBCluster_613911(
    name: "getDeleteDBCluster", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=DeleteDBCluster", validator: validate_GetDeleteDBCluster_613912,
    base: "/", url: url_GetDeleteDBCluster_613913,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBClusterParameterGroup_613964 = ref object of OpenApiRestCall_612642
proc url_PostDeleteDBClusterParameterGroup_613966(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBClusterParameterGroup_613965(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613967 = query.getOrDefault("Action")
  valid_613967 = validateParameter(valid_613967, JString, required = true, default = newJString(
      "DeleteDBClusterParameterGroup"))
  if valid_613967 != nil:
    section.add "Action", valid_613967
  var valid_613968 = query.getOrDefault("Version")
  valid_613968 = validateParameter(valid_613968, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613968 != nil:
    section.add "Version", valid_613968
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613969 = header.getOrDefault("X-Amz-Signature")
  valid_613969 = validateParameter(valid_613969, JString, required = false,
                                 default = nil)
  if valid_613969 != nil:
    section.add "X-Amz-Signature", valid_613969
  var valid_613970 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613970 = validateParameter(valid_613970, JString, required = false,
                                 default = nil)
  if valid_613970 != nil:
    section.add "X-Amz-Content-Sha256", valid_613970
  var valid_613971 = header.getOrDefault("X-Amz-Date")
  valid_613971 = validateParameter(valid_613971, JString, required = false,
                                 default = nil)
  if valid_613971 != nil:
    section.add "X-Amz-Date", valid_613971
  var valid_613972 = header.getOrDefault("X-Amz-Credential")
  valid_613972 = validateParameter(valid_613972, JString, required = false,
                                 default = nil)
  if valid_613972 != nil:
    section.add "X-Amz-Credential", valid_613972
  var valid_613973 = header.getOrDefault("X-Amz-Security-Token")
  valid_613973 = validateParameter(valid_613973, JString, required = false,
                                 default = nil)
  if valid_613973 != nil:
    section.add "X-Amz-Security-Token", valid_613973
  var valid_613974 = header.getOrDefault("X-Amz-Algorithm")
  valid_613974 = validateParameter(valid_613974, JString, required = false,
                                 default = nil)
  if valid_613974 != nil:
    section.add "X-Amz-Algorithm", valid_613974
  var valid_613975 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613975 = validateParameter(valid_613975, JString, required = false,
                                 default = nil)
  if valid_613975 != nil:
    section.add "X-Amz-SignedHeaders", valid_613975
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Cannot be associated with any DB clusters.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_613976 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_613976 = validateParameter(valid_613976, JString, required = true,
                                 default = nil)
  if valid_613976 != nil:
    section.add "DBClusterParameterGroupName", valid_613976
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613977: Call_PostDeleteDBClusterParameterGroup_613964;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.
  ## 
  let valid = call_613977.validator(path, query, header, formData, body)
  let scheme = call_613977.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613977.url(scheme.get, call_613977.host, call_613977.base,
                         call_613977.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613977, url, valid)

proc call*(call_613978: Call_PostDeleteDBClusterParameterGroup_613964;
          DBClusterParameterGroupName: string;
          Action: string = "DeleteDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBClusterParameterGroup
  ## Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Cannot be associated with any DB clusters.</p> </li> </ul>
  ##   Version: string (required)
  var query_613979 = newJObject()
  var formData_613980 = newJObject()
  add(query_613979, "Action", newJString(Action))
  add(formData_613980, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_613979, "Version", newJString(Version))
  result = call_613978.call(nil, query_613979, nil, formData_613980, nil)

var postDeleteDBClusterParameterGroup* = Call_PostDeleteDBClusterParameterGroup_613964(
    name: "postDeleteDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterParameterGroup",
    validator: validate_PostDeleteDBClusterParameterGroup_613965, base: "/",
    url: url_PostDeleteDBClusterParameterGroup_613966,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBClusterParameterGroup_613948 = ref object of OpenApiRestCall_612642
proc url_GetDeleteDBClusterParameterGroup_613950(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBClusterParameterGroup_613949(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Cannot be associated with any DB clusters.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_613951 = query.getOrDefault("DBClusterParameterGroupName")
  valid_613951 = validateParameter(valid_613951, JString, required = true,
                                 default = nil)
  if valid_613951 != nil:
    section.add "DBClusterParameterGroupName", valid_613951
  var valid_613952 = query.getOrDefault("Action")
  valid_613952 = validateParameter(valid_613952, JString, required = true, default = newJString(
      "DeleteDBClusterParameterGroup"))
  if valid_613952 != nil:
    section.add "Action", valid_613952
  var valid_613953 = query.getOrDefault("Version")
  valid_613953 = validateParameter(valid_613953, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613953 != nil:
    section.add "Version", valid_613953
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613954 = header.getOrDefault("X-Amz-Signature")
  valid_613954 = validateParameter(valid_613954, JString, required = false,
                                 default = nil)
  if valid_613954 != nil:
    section.add "X-Amz-Signature", valid_613954
  var valid_613955 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613955 = validateParameter(valid_613955, JString, required = false,
                                 default = nil)
  if valid_613955 != nil:
    section.add "X-Amz-Content-Sha256", valid_613955
  var valid_613956 = header.getOrDefault("X-Amz-Date")
  valid_613956 = validateParameter(valid_613956, JString, required = false,
                                 default = nil)
  if valid_613956 != nil:
    section.add "X-Amz-Date", valid_613956
  var valid_613957 = header.getOrDefault("X-Amz-Credential")
  valid_613957 = validateParameter(valid_613957, JString, required = false,
                                 default = nil)
  if valid_613957 != nil:
    section.add "X-Amz-Credential", valid_613957
  var valid_613958 = header.getOrDefault("X-Amz-Security-Token")
  valid_613958 = validateParameter(valid_613958, JString, required = false,
                                 default = nil)
  if valid_613958 != nil:
    section.add "X-Amz-Security-Token", valid_613958
  var valid_613959 = header.getOrDefault("X-Amz-Algorithm")
  valid_613959 = validateParameter(valid_613959, JString, required = false,
                                 default = nil)
  if valid_613959 != nil:
    section.add "X-Amz-Algorithm", valid_613959
  var valid_613960 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613960 = validateParameter(valid_613960, JString, required = false,
                                 default = nil)
  if valid_613960 != nil:
    section.add "X-Amz-SignedHeaders", valid_613960
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613961: Call_GetDeleteDBClusterParameterGroup_613948;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.
  ## 
  let valid = call_613961.validator(path, query, header, formData, body)
  let scheme = call_613961.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613961.url(scheme.get, call_613961.host, call_613961.base,
                         call_613961.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613961, url, valid)

proc call*(call_613962: Call_GetDeleteDBClusterParameterGroup_613948;
          DBClusterParameterGroupName: string;
          Action: string = "DeleteDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBClusterParameterGroup
  ## Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Cannot be associated with any DB clusters.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613963 = newJObject()
  add(query_613963, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_613963, "Action", newJString(Action))
  add(query_613963, "Version", newJString(Version))
  result = call_613962.call(nil, query_613963, nil, nil, nil)

var getDeleteDBClusterParameterGroup* = Call_GetDeleteDBClusterParameterGroup_613948(
    name: "getDeleteDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterParameterGroup",
    validator: validate_GetDeleteDBClusterParameterGroup_613949, base: "/",
    url: url_GetDeleteDBClusterParameterGroup_613950,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBClusterSnapshot_613997 = ref object of OpenApiRestCall_612642
proc url_PostDeleteDBClusterSnapshot_613999(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBClusterSnapshot_613998(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614000 = query.getOrDefault("Action")
  valid_614000 = validateParameter(valid_614000, JString, required = true, default = newJString(
      "DeleteDBClusterSnapshot"))
  if valid_614000 != nil:
    section.add "Action", valid_614000
  var valid_614001 = query.getOrDefault("Version")
  valid_614001 = validateParameter(valid_614001, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614001 != nil:
    section.add "Version", valid_614001
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614002 = header.getOrDefault("X-Amz-Signature")
  valid_614002 = validateParameter(valid_614002, JString, required = false,
                                 default = nil)
  if valid_614002 != nil:
    section.add "X-Amz-Signature", valid_614002
  var valid_614003 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614003 = validateParameter(valid_614003, JString, required = false,
                                 default = nil)
  if valid_614003 != nil:
    section.add "X-Amz-Content-Sha256", valid_614003
  var valid_614004 = header.getOrDefault("X-Amz-Date")
  valid_614004 = validateParameter(valid_614004, JString, required = false,
                                 default = nil)
  if valid_614004 != nil:
    section.add "X-Amz-Date", valid_614004
  var valid_614005 = header.getOrDefault("X-Amz-Credential")
  valid_614005 = validateParameter(valid_614005, JString, required = false,
                                 default = nil)
  if valid_614005 != nil:
    section.add "X-Amz-Credential", valid_614005
  var valid_614006 = header.getOrDefault("X-Amz-Security-Token")
  valid_614006 = validateParameter(valid_614006, JString, required = false,
                                 default = nil)
  if valid_614006 != nil:
    section.add "X-Amz-Security-Token", valid_614006
  var valid_614007 = header.getOrDefault("X-Amz-Algorithm")
  valid_614007 = validateParameter(valid_614007, JString, required = false,
                                 default = nil)
  if valid_614007 != nil:
    section.add "X-Amz-Algorithm", valid_614007
  var valid_614008 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614008 = validateParameter(valid_614008, JString, required = false,
                                 default = nil)
  if valid_614008 != nil:
    section.add "X-Amz-SignedHeaders", valid_614008
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_614009 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_614009 = validateParameter(valid_614009, JString, required = true,
                                 default = nil)
  if valid_614009 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_614009
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614010: Call_PostDeleteDBClusterSnapshot_613997; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  let valid = call_614010.validator(path, query, header, formData, body)
  let scheme = call_614010.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614010.url(scheme.get, call_614010.host, call_614010.base,
                         call_614010.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614010, url, valid)

proc call*(call_614011: Call_PostDeleteDBClusterSnapshot_613997;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DeleteDBClusterSnapshot"; Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBClusterSnapshot
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614012 = newJObject()
  var formData_614013 = newJObject()
  add(formData_614013, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_614012, "Action", newJString(Action))
  add(query_614012, "Version", newJString(Version))
  result = call_614011.call(nil, query_614012, nil, formData_614013, nil)

var postDeleteDBClusterSnapshot* = Call_PostDeleteDBClusterSnapshot_613997(
    name: "postDeleteDBClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterSnapshot",
    validator: validate_PostDeleteDBClusterSnapshot_613998, base: "/",
    url: url_PostDeleteDBClusterSnapshot_613999,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBClusterSnapshot_613981 = ref object of OpenApiRestCall_612642
proc url_GetDeleteDBClusterSnapshot_613983(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBClusterSnapshot_613982(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_613984 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_613984 = validateParameter(valid_613984, JString, required = true,
                                 default = nil)
  if valid_613984 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_613984
  var valid_613985 = query.getOrDefault("Action")
  valid_613985 = validateParameter(valid_613985, JString, required = true, default = newJString(
      "DeleteDBClusterSnapshot"))
  if valid_613985 != nil:
    section.add "Action", valid_613985
  var valid_613986 = query.getOrDefault("Version")
  valid_613986 = validateParameter(valid_613986, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613986 != nil:
    section.add "Version", valid_613986
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613987 = header.getOrDefault("X-Amz-Signature")
  valid_613987 = validateParameter(valid_613987, JString, required = false,
                                 default = nil)
  if valid_613987 != nil:
    section.add "X-Amz-Signature", valid_613987
  var valid_613988 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613988 = validateParameter(valid_613988, JString, required = false,
                                 default = nil)
  if valid_613988 != nil:
    section.add "X-Amz-Content-Sha256", valid_613988
  var valid_613989 = header.getOrDefault("X-Amz-Date")
  valid_613989 = validateParameter(valid_613989, JString, required = false,
                                 default = nil)
  if valid_613989 != nil:
    section.add "X-Amz-Date", valid_613989
  var valid_613990 = header.getOrDefault("X-Amz-Credential")
  valid_613990 = validateParameter(valid_613990, JString, required = false,
                                 default = nil)
  if valid_613990 != nil:
    section.add "X-Amz-Credential", valid_613990
  var valid_613991 = header.getOrDefault("X-Amz-Security-Token")
  valid_613991 = validateParameter(valid_613991, JString, required = false,
                                 default = nil)
  if valid_613991 != nil:
    section.add "X-Amz-Security-Token", valid_613991
  var valid_613992 = header.getOrDefault("X-Amz-Algorithm")
  valid_613992 = validateParameter(valid_613992, JString, required = false,
                                 default = nil)
  if valid_613992 != nil:
    section.add "X-Amz-Algorithm", valid_613992
  var valid_613993 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613993 = validateParameter(valid_613993, JString, required = false,
                                 default = nil)
  if valid_613993 != nil:
    section.add "X-Amz-SignedHeaders", valid_613993
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613994: Call_GetDeleteDBClusterSnapshot_613981; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  let valid = call_613994.validator(path, query, header, formData, body)
  let scheme = call_613994.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613994.url(scheme.get, call_613994.host, call_613994.base,
                         call_613994.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613994, url, valid)

proc call*(call_613995: Call_GetDeleteDBClusterSnapshot_613981;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DeleteDBClusterSnapshot"; Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBClusterSnapshot
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613996 = newJObject()
  add(query_613996, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_613996, "Action", newJString(Action))
  add(query_613996, "Version", newJString(Version))
  result = call_613995.call(nil, query_613996, nil, nil, nil)

var getDeleteDBClusterSnapshot* = Call_GetDeleteDBClusterSnapshot_613981(
    name: "getDeleteDBClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterSnapshot",
    validator: validate_GetDeleteDBClusterSnapshot_613982, base: "/",
    url: url_GetDeleteDBClusterSnapshot_613983,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBInstance_614032 = ref object of OpenApiRestCall_612642
proc url_PostDeleteDBInstance_614034(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBInstance_614033(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon Neptune DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted.</p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when the <code>SkipFinalSnapshot</code> parameter is set to <code>true</code>.</p> <p>You can't delete a DB instance if it is the only instance in the DB cluster.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614035 = query.getOrDefault("Action")
  valid_614035 = validateParameter(valid_614035, JString, required = true,
                                 default = newJString("DeleteDBInstance"))
  if valid_614035 != nil:
    section.add "Action", valid_614035
  var valid_614036 = query.getOrDefault("Version")
  valid_614036 = validateParameter(valid_614036, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614036 != nil:
    section.add "Version", valid_614036
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614037 = header.getOrDefault("X-Amz-Signature")
  valid_614037 = validateParameter(valid_614037, JString, required = false,
                                 default = nil)
  if valid_614037 != nil:
    section.add "X-Amz-Signature", valid_614037
  var valid_614038 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614038 = validateParameter(valid_614038, JString, required = false,
                                 default = nil)
  if valid_614038 != nil:
    section.add "X-Amz-Content-Sha256", valid_614038
  var valid_614039 = header.getOrDefault("X-Amz-Date")
  valid_614039 = validateParameter(valid_614039, JString, required = false,
                                 default = nil)
  if valid_614039 != nil:
    section.add "X-Amz-Date", valid_614039
  var valid_614040 = header.getOrDefault("X-Amz-Credential")
  valid_614040 = validateParameter(valid_614040, JString, required = false,
                                 default = nil)
  if valid_614040 != nil:
    section.add "X-Amz-Credential", valid_614040
  var valid_614041 = header.getOrDefault("X-Amz-Security-Token")
  valid_614041 = validateParameter(valid_614041, JString, required = false,
                                 default = nil)
  if valid_614041 != nil:
    section.add "X-Amz-Security-Token", valid_614041
  var valid_614042 = header.getOrDefault("X-Amz-Algorithm")
  valid_614042 = validateParameter(valid_614042, JString, required = false,
                                 default = nil)
  if valid_614042 != nil:
    section.add "X-Amz-Algorithm", valid_614042
  var valid_614043 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614043 = validateParameter(valid_614043, JString, required = false,
                                 default = nil)
  if valid_614043 != nil:
    section.add "X-Amz-SignedHeaders", valid_614043
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  ##   SkipFinalSnapshot: JBool
  ##                    : <p> Determines whether a final DB snapshot is created before the DB instance is deleted. If <code>true</code> is specified, no DBSnapshot is created. If <code>false</code> is specified, a DB snapshot is created before the DB instance is deleted.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when the SkipFinalSnapshot parameter is set to "true".</p> <p>Specify <code>true</code> when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if SkipFinalSnapshot is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The DBSnapshotIdentifier of the new DBSnapshot created when SkipFinalSnapshot is set to <code>false</code>.</p> <note> <p>Specifying this parameter and also setting the SkipFinalShapshot parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Cannot be specified when deleting a Read Replica.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_614044 = formData.getOrDefault("DBInstanceIdentifier")
  valid_614044 = validateParameter(valid_614044, JString, required = true,
                                 default = nil)
  if valid_614044 != nil:
    section.add "DBInstanceIdentifier", valid_614044
  var valid_614045 = formData.getOrDefault("SkipFinalSnapshot")
  valid_614045 = validateParameter(valid_614045, JBool, required = false, default = nil)
  if valid_614045 != nil:
    section.add "SkipFinalSnapshot", valid_614045
  var valid_614046 = formData.getOrDefault("FinalDBSnapshotIdentifier")
  valid_614046 = validateParameter(valid_614046, JString, required = false,
                                 default = nil)
  if valid_614046 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_614046
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614047: Call_PostDeleteDBInstance_614032; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon Neptune DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted.</p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when the <code>SkipFinalSnapshot</code> parameter is set to <code>true</code>.</p> <p>You can't delete a DB instance if it is the only instance in the DB cluster.</p>
  ## 
  let valid = call_614047.validator(path, query, header, formData, body)
  let scheme = call_614047.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614047.url(scheme.get, call_614047.host, call_614047.base,
                         call_614047.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614047, url, valid)

proc call*(call_614048: Call_PostDeleteDBInstance_614032;
          DBInstanceIdentifier: string; Action: string = "DeleteDBInstance";
          SkipFinalSnapshot: bool = false; FinalDBSnapshotIdentifier: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBInstance
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon Neptune DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted.</p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when the <code>SkipFinalSnapshot</code> parameter is set to <code>true</code>.</p> <p>You can't delete a DB instance if it is the only instance in the DB cluster.</p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  ##   Action: string (required)
  ##   SkipFinalSnapshot: bool
  ##                    : <p> Determines whether a final DB snapshot is created before the DB instance is deleted. If <code>true</code> is specified, no DBSnapshot is created. If <code>false</code> is specified, a DB snapshot is created before the DB instance is deleted.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when the SkipFinalSnapshot parameter is set to "true".</p> <p>Specify <code>true</code> when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if SkipFinalSnapshot is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The DBSnapshotIdentifier of the new DBSnapshot created when SkipFinalSnapshot is set to <code>false</code>.</p> <note> <p>Specifying this parameter and also setting the SkipFinalShapshot parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Cannot be specified when deleting a Read Replica.</p> </li> </ul>
  ##   Version: string (required)
  var query_614049 = newJObject()
  var formData_614050 = newJObject()
  add(formData_614050, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_614049, "Action", newJString(Action))
  add(formData_614050, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  add(formData_614050, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  add(query_614049, "Version", newJString(Version))
  result = call_614048.call(nil, query_614049, nil, formData_614050, nil)

var postDeleteDBInstance* = Call_PostDeleteDBInstance_614032(
    name: "postDeleteDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBInstance",
    validator: validate_PostDeleteDBInstance_614033, base: "/",
    url: url_PostDeleteDBInstance_614034, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBInstance_614014 = ref object of OpenApiRestCall_612642
proc url_GetDeleteDBInstance_614016(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBInstance_614015(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon Neptune DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted.</p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when the <code>SkipFinalSnapshot</code> parameter is set to <code>true</code>.</p> <p>You can't delete a DB instance if it is the only instance in the DB cluster.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  ##   SkipFinalSnapshot: JBool
  ##                    : <p> Determines whether a final DB snapshot is created before the DB instance is deleted. If <code>true</code> is specified, no DBSnapshot is created. If <code>false</code> is specified, a DB snapshot is created before the DB instance is deleted.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when the SkipFinalSnapshot parameter is set to "true".</p> <p>Specify <code>true</code> when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if SkipFinalSnapshot is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The DBSnapshotIdentifier of the new DBSnapshot created when SkipFinalSnapshot is set to <code>false</code>.</p> <note> <p>Specifying this parameter and also setting the SkipFinalShapshot parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Cannot be specified when deleting a Read Replica.</p> </li> </ul>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_614017 = query.getOrDefault("DBInstanceIdentifier")
  valid_614017 = validateParameter(valid_614017, JString, required = true,
                                 default = nil)
  if valid_614017 != nil:
    section.add "DBInstanceIdentifier", valid_614017
  var valid_614018 = query.getOrDefault("SkipFinalSnapshot")
  valid_614018 = validateParameter(valid_614018, JBool, required = false, default = nil)
  if valid_614018 != nil:
    section.add "SkipFinalSnapshot", valid_614018
  var valid_614019 = query.getOrDefault("Action")
  valid_614019 = validateParameter(valid_614019, JString, required = true,
                                 default = newJString("DeleteDBInstance"))
  if valid_614019 != nil:
    section.add "Action", valid_614019
  var valid_614020 = query.getOrDefault("Version")
  valid_614020 = validateParameter(valid_614020, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614020 != nil:
    section.add "Version", valid_614020
  var valid_614021 = query.getOrDefault("FinalDBSnapshotIdentifier")
  valid_614021 = validateParameter(valid_614021, JString, required = false,
                                 default = nil)
  if valid_614021 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_614021
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614022 = header.getOrDefault("X-Amz-Signature")
  valid_614022 = validateParameter(valid_614022, JString, required = false,
                                 default = nil)
  if valid_614022 != nil:
    section.add "X-Amz-Signature", valid_614022
  var valid_614023 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614023 = validateParameter(valid_614023, JString, required = false,
                                 default = nil)
  if valid_614023 != nil:
    section.add "X-Amz-Content-Sha256", valid_614023
  var valid_614024 = header.getOrDefault("X-Amz-Date")
  valid_614024 = validateParameter(valid_614024, JString, required = false,
                                 default = nil)
  if valid_614024 != nil:
    section.add "X-Amz-Date", valid_614024
  var valid_614025 = header.getOrDefault("X-Amz-Credential")
  valid_614025 = validateParameter(valid_614025, JString, required = false,
                                 default = nil)
  if valid_614025 != nil:
    section.add "X-Amz-Credential", valid_614025
  var valid_614026 = header.getOrDefault("X-Amz-Security-Token")
  valid_614026 = validateParameter(valid_614026, JString, required = false,
                                 default = nil)
  if valid_614026 != nil:
    section.add "X-Amz-Security-Token", valid_614026
  var valid_614027 = header.getOrDefault("X-Amz-Algorithm")
  valid_614027 = validateParameter(valid_614027, JString, required = false,
                                 default = nil)
  if valid_614027 != nil:
    section.add "X-Amz-Algorithm", valid_614027
  var valid_614028 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614028 = validateParameter(valid_614028, JString, required = false,
                                 default = nil)
  if valid_614028 != nil:
    section.add "X-Amz-SignedHeaders", valid_614028
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614029: Call_GetDeleteDBInstance_614014; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon Neptune DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted.</p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when the <code>SkipFinalSnapshot</code> parameter is set to <code>true</code>.</p> <p>You can't delete a DB instance if it is the only instance in the DB cluster.</p>
  ## 
  let valid = call_614029.validator(path, query, header, formData, body)
  let scheme = call_614029.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614029.url(scheme.get, call_614029.host, call_614029.base,
                         call_614029.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614029, url, valid)

proc call*(call_614030: Call_GetDeleteDBInstance_614014;
          DBInstanceIdentifier: string; SkipFinalSnapshot: bool = false;
          Action: string = "DeleteDBInstance"; Version: string = "2014-10-31";
          FinalDBSnapshotIdentifier: string = ""): Recallable =
  ## getDeleteDBInstance
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon Neptune DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted.</p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when the <code>SkipFinalSnapshot</code> parameter is set to <code>true</code>.</p> <p>You can't delete a DB instance if it is the only instance in the DB cluster.</p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  ##   SkipFinalSnapshot: bool
  ##                    : <p> Determines whether a final DB snapshot is created before the DB instance is deleted. If <code>true</code> is specified, no DBSnapshot is created. If <code>false</code> is specified, a DB snapshot is created before the DB instance is deleted.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when the SkipFinalSnapshot parameter is set to "true".</p> <p>Specify <code>true</code> when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if SkipFinalSnapshot is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The DBSnapshotIdentifier of the new DBSnapshot created when SkipFinalSnapshot is set to <code>false</code>.</p> <note> <p>Specifying this parameter and also setting the SkipFinalShapshot parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Cannot be specified when deleting a Read Replica.</p> </li> </ul>
  var query_614031 = newJObject()
  add(query_614031, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_614031, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  add(query_614031, "Action", newJString(Action))
  add(query_614031, "Version", newJString(Version))
  add(query_614031, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  result = call_614030.call(nil, query_614031, nil, nil, nil)

var getDeleteDBInstance* = Call_GetDeleteDBInstance_614014(
    name: "getDeleteDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBInstance",
    validator: validate_GetDeleteDBInstance_614015, base: "/",
    url: url_GetDeleteDBInstance_614016, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBParameterGroup_614067 = ref object of OpenApiRestCall_612642
proc url_PostDeleteDBParameterGroup_614069(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBParameterGroup_614068(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a specified DBParameterGroup. The DBParameterGroup to be deleted can't be associated with any DB instances.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614070 = query.getOrDefault("Action")
  valid_614070 = validateParameter(valid_614070, JString, required = true,
                                 default = newJString("DeleteDBParameterGroup"))
  if valid_614070 != nil:
    section.add "Action", valid_614070
  var valid_614071 = query.getOrDefault("Version")
  valid_614071 = validateParameter(valid_614071, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614071 != nil:
    section.add "Version", valid_614071
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614072 = header.getOrDefault("X-Amz-Signature")
  valid_614072 = validateParameter(valid_614072, JString, required = false,
                                 default = nil)
  if valid_614072 != nil:
    section.add "X-Amz-Signature", valid_614072
  var valid_614073 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614073 = validateParameter(valid_614073, JString, required = false,
                                 default = nil)
  if valid_614073 != nil:
    section.add "X-Amz-Content-Sha256", valid_614073
  var valid_614074 = header.getOrDefault("X-Amz-Date")
  valid_614074 = validateParameter(valid_614074, JString, required = false,
                                 default = nil)
  if valid_614074 != nil:
    section.add "X-Amz-Date", valid_614074
  var valid_614075 = header.getOrDefault("X-Amz-Credential")
  valid_614075 = validateParameter(valid_614075, JString, required = false,
                                 default = nil)
  if valid_614075 != nil:
    section.add "X-Amz-Credential", valid_614075
  var valid_614076 = header.getOrDefault("X-Amz-Security-Token")
  valid_614076 = validateParameter(valid_614076, JString, required = false,
                                 default = nil)
  if valid_614076 != nil:
    section.add "X-Amz-Security-Token", valid_614076
  var valid_614077 = header.getOrDefault("X-Amz-Algorithm")
  valid_614077 = validateParameter(valid_614077, JString, required = false,
                                 default = nil)
  if valid_614077 != nil:
    section.add "X-Amz-Algorithm", valid_614077
  var valid_614078 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614078 = validateParameter(valid_614078, JString, required = false,
                                 default = nil)
  if valid_614078 != nil:
    section.add "X-Amz-SignedHeaders", valid_614078
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Cannot be associated with any DB instances</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_614079 = formData.getOrDefault("DBParameterGroupName")
  valid_614079 = validateParameter(valid_614079, JString, required = true,
                                 default = nil)
  if valid_614079 != nil:
    section.add "DBParameterGroupName", valid_614079
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614080: Call_PostDeleteDBParameterGroup_614067; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a specified DBParameterGroup. The DBParameterGroup to be deleted can't be associated with any DB instances.
  ## 
  let valid = call_614080.validator(path, query, header, formData, body)
  let scheme = call_614080.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614080.url(scheme.get, call_614080.host, call_614080.base,
                         call_614080.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614080, url, valid)

proc call*(call_614081: Call_PostDeleteDBParameterGroup_614067;
          DBParameterGroupName: string; Action: string = "DeleteDBParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBParameterGroup
  ## Deletes a specified DBParameterGroup. The DBParameterGroup to be deleted can't be associated with any DB instances.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Cannot be associated with any DB instances</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614082 = newJObject()
  var formData_614083 = newJObject()
  add(formData_614083, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_614082, "Action", newJString(Action))
  add(query_614082, "Version", newJString(Version))
  result = call_614081.call(nil, query_614082, nil, formData_614083, nil)

var postDeleteDBParameterGroup* = Call_PostDeleteDBParameterGroup_614067(
    name: "postDeleteDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBParameterGroup",
    validator: validate_PostDeleteDBParameterGroup_614068, base: "/",
    url: url_PostDeleteDBParameterGroup_614069,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBParameterGroup_614051 = ref object of OpenApiRestCall_612642
proc url_GetDeleteDBParameterGroup_614053(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBParameterGroup_614052(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a specified DBParameterGroup. The DBParameterGroup to be deleted can't be associated with any DB instances.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Cannot be associated with any DB instances</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_614054 = query.getOrDefault("DBParameterGroupName")
  valid_614054 = validateParameter(valid_614054, JString, required = true,
                                 default = nil)
  if valid_614054 != nil:
    section.add "DBParameterGroupName", valid_614054
  var valid_614055 = query.getOrDefault("Action")
  valid_614055 = validateParameter(valid_614055, JString, required = true,
                                 default = newJString("DeleteDBParameterGroup"))
  if valid_614055 != nil:
    section.add "Action", valid_614055
  var valid_614056 = query.getOrDefault("Version")
  valid_614056 = validateParameter(valid_614056, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614056 != nil:
    section.add "Version", valid_614056
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614057 = header.getOrDefault("X-Amz-Signature")
  valid_614057 = validateParameter(valid_614057, JString, required = false,
                                 default = nil)
  if valid_614057 != nil:
    section.add "X-Amz-Signature", valid_614057
  var valid_614058 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614058 = validateParameter(valid_614058, JString, required = false,
                                 default = nil)
  if valid_614058 != nil:
    section.add "X-Amz-Content-Sha256", valid_614058
  var valid_614059 = header.getOrDefault("X-Amz-Date")
  valid_614059 = validateParameter(valid_614059, JString, required = false,
                                 default = nil)
  if valid_614059 != nil:
    section.add "X-Amz-Date", valid_614059
  var valid_614060 = header.getOrDefault("X-Amz-Credential")
  valid_614060 = validateParameter(valid_614060, JString, required = false,
                                 default = nil)
  if valid_614060 != nil:
    section.add "X-Amz-Credential", valid_614060
  var valid_614061 = header.getOrDefault("X-Amz-Security-Token")
  valid_614061 = validateParameter(valid_614061, JString, required = false,
                                 default = nil)
  if valid_614061 != nil:
    section.add "X-Amz-Security-Token", valid_614061
  var valid_614062 = header.getOrDefault("X-Amz-Algorithm")
  valid_614062 = validateParameter(valid_614062, JString, required = false,
                                 default = nil)
  if valid_614062 != nil:
    section.add "X-Amz-Algorithm", valid_614062
  var valid_614063 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614063 = validateParameter(valid_614063, JString, required = false,
                                 default = nil)
  if valid_614063 != nil:
    section.add "X-Amz-SignedHeaders", valid_614063
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614064: Call_GetDeleteDBParameterGroup_614051; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a specified DBParameterGroup. The DBParameterGroup to be deleted can't be associated with any DB instances.
  ## 
  let valid = call_614064.validator(path, query, header, formData, body)
  let scheme = call_614064.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614064.url(scheme.get, call_614064.host, call_614064.base,
                         call_614064.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614064, url, valid)

proc call*(call_614065: Call_GetDeleteDBParameterGroup_614051;
          DBParameterGroupName: string; Action: string = "DeleteDBParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBParameterGroup
  ## Deletes a specified DBParameterGroup. The DBParameterGroup to be deleted can't be associated with any DB instances.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Cannot be associated with any DB instances</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614066 = newJObject()
  add(query_614066, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_614066, "Action", newJString(Action))
  add(query_614066, "Version", newJString(Version))
  result = call_614065.call(nil, query_614066, nil, nil, nil)

var getDeleteDBParameterGroup* = Call_GetDeleteDBParameterGroup_614051(
    name: "getDeleteDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBParameterGroup",
    validator: validate_GetDeleteDBParameterGroup_614052, base: "/",
    url: url_GetDeleteDBParameterGroup_614053,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBSubnetGroup_614100 = ref object of OpenApiRestCall_612642
proc url_PostDeleteDBSubnetGroup_614102(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBSubnetGroup_614101(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614103 = query.getOrDefault("Action")
  valid_614103 = validateParameter(valid_614103, JString, required = true,
                                 default = newJString("DeleteDBSubnetGroup"))
  if valid_614103 != nil:
    section.add "Action", valid_614103
  var valid_614104 = query.getOrDefault("Version")
  valid_614104 = validateParameter(valid_614104, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614104 != nil:
    section.add "Version", valid_614104
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614105 = header.getOrDefault("X-Amz-Signature")
  valid_614105 = validateParameter(valid_614105, JString, required = false,
                                 default = nil)
  if valid_614105 != nil:
    section.add "X-Amz-Signature", valid_614105
  var valid_614106 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614106 = validateParameter(valid_614106, JString, required = false,
                                 default = nil)
  if valid_614106 != nil:
    section.add "X-Amz-Content-Sha256", valid_614106
  var valid_614107 = header.getOrDefault("X-Amz-Date")
  valid_614107 = validateParameter(valid_614107, JString, required = false,
                                 default = nil)
  if valid_614107 != nil:
    section.add "X-Amz-Date", valid_614107
  var valid_614108 = header.getOrDefault("X-Amz-Credential")
  valid_614108 = validateParameter(valid_614108, JString, required = false,
                                 default = nil)
  if valid_614108 != nil:
    section.add "X-Amz-Credential", valid_614108
  var valid_614109 = header.getOrDefault("X-Amz-Security-Token")
  valid_614109 = validateParameter(valid_614109, JString, required = false,
                                 default = nil)
  if valid_614109 != nil:
    section.add "X-Amz-Security-Token", valid_614109
  var valid_614110 = header.getOrDefault("X-Amz-Algorithm")
  valid_614110 = validateParameter(valid_614110, JString, required = false,
                                 default = nil)
  if valid_614110 != nil:
    section.add "X-Amz-Algorithm", valid_614110
  var valid_614111 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614111 = validateParameter(valid_614111, JString, required = false,
                                 default = nil)
  if valid_614111 != nil:
    section.add "X-Amz-SignedHeaders", valid_614111
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSubnetGroupName` field"
  var valid_614112 = formData.getOrDefault("DBSubnetGroupName")
  valid_614112 = validateParameter(valid_614112, JString, required = true,
                                 default = nil)
  if valid_614112 != nil:
    section.add "DBSubnetGroupName", valid_614112
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614113: Call_PostDeleteDBSubnetGroup_614100; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  let valid = call_614113.validator(path, query, header, formData, body)
  let scheme = call_614113.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614113.url(scheme.get, call_614113.host, call_614113.base,
                         call_614113.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614113, url, valid)

proc call*(call_614114: Call_PostDeleteDBSubnetGroup_614100;
          DBSubnetGroupName: string; Action: string = "DeleteDBSubnetGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBSubnetGroup
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ##   Action: string (required)
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_614115 = newJObject()
  var formData_614116 = newJObject()
  add(query_614115, "Action", newJString(Action))
  add(formData_614116, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_614115, "Version", newJString(Version))
  result = call_614114.call(nil, query_614115, nil, formData_614116, nil)

var postDeleteDBSubnetGroup* = Call_PostDeleteDBSubnetGroup_614100(
    name: "postDeleteDBSubnetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSubnetGroup",
    validator: validate_PostDeleteDBSubnetGroup_614101, base: "/",
    url: url_PostDeleteDBSubnetGroup_614102, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBSubnetGroup_614084 = ref object of OpenApiRestCall_612642
proc url_GetDeleteDBSubnetGroup_614086(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBSubnetGroup_614085(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_614087 = query.getOrDefault("Action")
  valid_614087 = validateParameter(valid_614087, JString, required = true,
                                 default = newJString("DeleteDBSubnetGroup"))
  if valid_614087 != nil:
    section.add "Action", valid_614087
  var valid_614088 = query.getOrDefault("DBSubnetGroupName")
  valid_614088 = validateParameter(valid_614088, JString, required = true,
                                 default = nil)
  if valid_614088 != nil:
    section.add "DBSubnetGroupName", valid_614088
  var valid_614089 = query.getOrDefault("Version")
  valid_614089 = validateParameter(valid_614089, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614089 != nil:
    section.add "Version", valid_614089
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614090 = header.getOrDefault("X-Amz-Signature")
  valid_614090 = validateParameter(valid_614090, JString, required = false,
                                 default = nil)
  if valid_614090 != nil:
    section.add "X-Amz-Signature", valid_614090
  var valid_614091 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614091 = validateParameter(valid_614091, JString, required = false,
                                 default = nil)
  if valid_614091 != nil:
    section.add "X-Amz-Content-Sha256", valid_614091
  var valid_614092 = header.getOrDefault("X-Amz-Date")
  valid_614092 = validateParameter(valid_614092, JString, required = false,
                                 default = nil)
  if valid_614092 != nil:
    section.add "X-Amz-Date", valid_614092
  var valid_614093 = header.getOrDefault("X-Amz-Credential")
  valid_614093 = validateParameter(valid_614093, JString, required = false,
                                 default = nil)
  if valid_614093 != nil:
    section.add "X-Amz-Credential", valid_614093
  var valid_614094 = header.getOrDefault("X-Amz-Security-Token")
  valid_614094 = validateParameter(valid_614094, JString, required = false,
                                 default = nil)
  if valid_614094 != nil:
    section.add "X-Amz-Security-Token", valid_614094
  var valid_614095 = header.getOrDefault("X-Amz-Algorithm")
  valid_614095 = validateParameter(valid_614095, JString, required = false,
                                 default = nil)
  if valid_614095 != nil:
    section.add "X-Amz-Algorithm", valid_614095
  var valid_614096 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614096 = validateParameter(valid_614096, JString, required = false,
                                 default = nil)
  if valid_614096 != nil:
    section.add "X-Amz-SignedHeaders", valid_614096
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614097: Call_GetDeleteDBSubnetGroup_614084; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  let valid = call_614097.validator(path, query, header, formData, body)
  let scheme = call_614097.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614097.url(scheme.get, call_614097.host, call_614097.base,
                         call_614097.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614097, url, valid)

proc call*(call_614098: Call_GetDeleteDBSubnetGroup_614084;
          DBSubnetGroupName: string; Action: string = "DeleteDBSubnetGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBSubnetGroup
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ##   Action: string (required)
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_614099 = newJObject()
  add(query_614099, "Action", newJString(Action))
  add(query_614099, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_614099, "Version", newJString(Version))
  result = call_614098.call(nil, query_614099, nil, nil, nil)

var getDeleteDBSubnetGroup* = Call_GetDeleteDBSubnetGroup_614084(
    name: "getDeleteDBSubnetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSubnetGroup",
    validator: validate_GetDeleteDBSubnetGroup_614085, base: "/",
    url: url_GetDeleteDBSubnetGroup_614086, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteEventSubscription_614133 = ref object of OpenApiRestCall_612642
proc url_PostDeleteEventSubscription_614135(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteEventSubscription_614134(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614136 = query.getOrDefault("Action")
  valid_614136 = validateParameter(valid_614136, JString, required = true, default = newJString(
      "DeleteEventSubscription"))
  if valid_614136 != nil:
    section.add "Action", valid_614136
  var valid_614137 = query.getOrDefault("Version")
  valid_614137 = validateParameter(valid_614137, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614137 != nil:
    section.add "Version", valid_614137
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614138 = header.getOrDefault("X-Amz-Signature")
  valid_614138 = validateParameter(valid_614138, JString, required = false,
                                 default = nil)
  if valid_614138 != nil:
    section.add "X-Amz-Signature", valid_614138
  var valid_614139 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614139 = validateParameter(valid_614139, JString, required = false,
                                 default = nil)
  if valid_614139 != nil:
    section.add "X-Amz-Content-Sha256", valid_614139
  var valid_614140 = header.getOrDefault("X-Amz-Date")
  valid_614140 = validateParameter(valid_614140, JString, required = false,
                                 default = nil)
  if valid_614140 != nil:
    section.add "X-Amz-Date", valid_614140
  var valid_614141 = header.getOrDefault("X-Amz-Credential")
  valid_614141 = validateParameter(valid_614141, JString, required = false,
                                 default = nil)
  if valid_614141 != nil:
    section.add "X-Amz-Credential", valid_614141
  var valid_614142 = header.getOrDefault("X-Amz-Security-Token")
  valid_614142 = validateParameter(valid_614142, JString, required = false,
                                 default = nil)
  if valid_614142 != nil:
    section.add "X-Amz-Security-Token", valid_614142
  var valid_614143 = header.getOrDefault("X-Amz-Algorithm")
  valid_614143 = validateParameter(valid_614143, JString, required = false,
                                 default = nil)
  if valid_614143 != nil:
    section.add "X-Amz-Algorithm", valid_614143
  var valid_614144 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614144 = validateParameter(valid_614144, JString, required = false,
                                 default = nil)
  if valid_614144 != nil:
    section.add "X-Amz-SignedHeaders", valid_614144
  result.add "header", section
  ## parameters in `formData` object:
  ##   SubscriptionName: JString (required)
  ##                   : The name of the event notification subscription you want to delete.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_614145 = formData.getOrDefault("SubscriptionName")
  valid_614145 = validateParameter(valid_614145, JString, required = true,
                                 default = nil)
  if valid_614145 != nil:
    section.add "SubscriptionName", valid_614145
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614146: Call_PostDeleteEventSubscription_614133; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an event notification subscription.
  ## 
  let valid = call_614146.validator(path, query, header, formData, body)
  let scheme = call_614146.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614146.url(scheme.get, call_614146.host, call_614146.base,
                         call_614146.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614146, url, valid)

proc call*(call_614147: Call_PostDeleteEventSubscription_614133;
          SubscriptionName: string; Action: string = "DeleteEventSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteEventSubscription
  ## Deletes an event notification subscription.
  ##   SubscriptionName: string (required)
  ##                   : The name of the event notification subscription you want to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614148 = newJObject()
  var formData_614149 = newJObject()
  add(formData_614149, "SubscriptionName", newJString(SubscriptionName))
  add(query_614148, "Action", newJString(Action))
  add(query_614148, "Version", newJString(Version))
  result = call_614147.call(nil, query_614148, nil, formData_614149, nil)

var postDeleteEventSubscription* = Call_PostDeleteEventSubscription_614133(
    name: "postDeleteEventSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteEventSubscription",
    validator: validate_PostDeleteEventSubscription_614134, base: "/",
    url: url_PostDeleteEventSubscription_614135,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteEventSubscription_614117 = ref object of OpenApiRestCall_612642
proc url_GetDeleteEventSubscription_614119(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteEventSubscription_614118(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SubscriptionName: JString (required)
  ##                   : The name of the event notification subscription you want to delete.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SubscriptionName` field"
  var valid_614120 = query.getOrDefault("SubscriptionName")
  valid_614120 = validateParameter(valid_614120, JString, required = true,
                                 default = nil)
  if valid_614120 != nil:
    section.add "SubscriptionName", valid_614120
  var valid_614121 = query.getOrDefault("Action")
  valid_614121 = validateParameter(valid_614121, JString, required = true, default = newJString(
      "DeleteEventSubscription"))
  if valid_614121 != nil:
    section.add "Action", valid_614121
  var valid_614122 = query.getOrDefault("Version")
  valid_614122 = validateParameter(valid_614122, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614122 != nil:
    section.add "Version", valid_614122
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614123 = header.getOrDefault("X-Amz-Signature")
  valid_614123 = validateParameter(valid_614123, JString, required = false,
                                 default = nil)
  if valid_614123 != nil:
    section.add "X-Amz-Signature", valid_614123
  var valid_614124 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614124 = validateParameter(valid_614124, JString, required = false,
                                 default = nil)
  if valid_614124 != nil:
    section.add "X-Amz-Content-Sha256", valid_614124
  var valid_614125 = header.getOrDefault("X-Amz-Date")
  valid_614125 = validateParameter(valid_614125, JString, required = false,
                                 default = nil)
  if valid_614125 != nil:
    section.add "X-Amz-Date", valid_614125
  var valid_614126 = header.getOrDefault("X-Amz-Credential")
  valid_614126 = validateParameter(valid_614126, JString, required = false,
                                 default = nil)
  if valid_614126 != nil:
    section.add "X-Amz-Credential", valid_614126
  var valid_614127 = header.getOrDefault("X-Amz-Security-Token")
  valid_614127 = validateParameter(valid_614127, JString, required = false,
                                 default = nil)
  if valid_614127 != nil:
    section.add "X-Amz-Security-Token", valid_614127
  var valid_614128 = header.getOrDefault("X-Amz-Algorithm")
  valid_614128 = validateParameter(valid_614128, JString, required = false,
                                 default = nil)
  if valid_614128 != nil:
    section.add "X-Amz-Algorithm", valid_614128
  var valid_614129 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614129 = validateParameter(valid_614129, JString, required = false,
                                 default = nil)
  if valid_614129 != nil:
    section.add "X-Amz-SignedHeaders", valid_614129
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614130: Call_GetDeleteEventSubscription_614117; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an event notification subscription.
  ## 
  let valid = call_614130.validator(path, query, header, formData, body)
  let scheme = call_614130.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614130.url(scheme.get, call_614130.host, call_614130.base,
                         call_614130.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614130, url, valid)

proc call*(call_614131: Call_GetDeleteEventSubscription_614117;
          SubscriptionName: string; Action: string = "DeleteEventSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteEventSubscription
  ## Deletes an event notification subscription.
  ##   SubscriptionName: string (required)
  ##                   : The name of the event notification subscription you want to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614132 = newJObject()
  add(query_614132, "SubscriptionName", newJString(SubscriptionName))
  add(query_614132, "Action", newJString(Action))
  add(query_614132, "Version", newJString(Version))
  result = call_614131.call(nil, query_614132, nil, nil, nil)

var getDeleteEventSubscription* = Call_GetDeleteEventSubscription_614117(
    name: "getDeleteEventSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteEventSubscription",
    validator: validate_GetDeleteEventSubscription_614118, base: "/",
    url: url_GetDeleteEventSubscription_614119,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterParameterGroups_614169 = ref object of OpenApiRestCall_612642
proc url_PostDescribeDBClusterParameterGroups_614171(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusterParameterGroups_614170(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614172 = query.getOrDefault("Action")
  valid_614172 = validateParameter(valid_614172, JString, required = true, default = newJString(
      "DescribeDBClusterParameterGroups"))
  if valid_614172 != nil:
    section.add "Action", valid_614172
  var valid_614173 = query.getOrDefault("Version")
  valid_614173 = validateParameter(valid_614173, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614173 != nil:
    section.add "Version", valid_614173
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614174 = header.getOrDefault("X-Amz-Signature")
  valid_614174 = validateParameter(valid_614174, JString, required = false,
                                 default = nil)
  if valid_614174 != nil:
    section.add "X-Amz-Signature", valid_614174
  var valid_614175 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614175 = validateParameter(valid_614175, JString, required = false,
                                 default = nil)
  if valid_614175 != nil:
    section.add "X-Amz-Content-Sha256", valid_614175
  var valid_614176 = header.getOrDefault("X-Amz-Date")
  valid_614176 = validateParameter(valid_614176, JString, required = false,
                                 default = nil)
  if valid_614176 != nil:
    section.add "X-Amz-Date", valid_614176
  var valid_614177 = header.getOrDefault("X-Amz-Credential")
  valid_614177 = validateParameter(valid_614177, JString, required = false,
                                 default = nil)
  if valid_614177 != nil:
    section.add "X-Amz-Credential", valid_614177
  var valid_614178 = header.getOrDefault("X-Amz-Security-Token")
  valid_614178 = validateParameter(valid_614178, JString, required = false,
                                 default = nil)
  if valid_614178 != nil:
    section.add "X-Amz-Security-Token", valid_614178
  var valid_614179 = header.getOrDefault("X-Amz-Algorithm")
  valid_614179 = validateParameter(valid_614179, JString, required = false,
                                 default = nil)
  if valid_614179 != nil:
    section.add "X-Amz-Algorithm", valid_614179
  var valid_614180 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614180 = validateParameter(valid_614180, JString, required = false,
                                 default = nil)
  if valid_614180 != nil:
    section.add "X-Amz-SignedHeaders", valid_614180
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  section = newJObject()
  var valid_614181 = formData.getOrDefault("MaxRecords")
  valid_614181 = validateParameter(valid_614181, JInt, required = false, default = nil)
  if valid_614181 != nil:
    section.add "MaxRecords", valid_614181
  var valid_614182 = formData.getOrDefault("Marker")
  valid_614182 = validateParameter(valid_614182, JString, required = false,
                                 default = nil)
  if valid_614182 != nil:
    section.add "Marker", valid_614182
  var valid_614183 = formData.getOrDefault("Filters")
  valid_614183 = validateParameter(valid_614183, JArray, required = false,
                                 default = nil)
  if valid_614183 != nil:
    section.add "Filters", valid_614183
  var valid_614184 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_614184 = validateParameter(valid_614184, JString, required = false,
                                 default = nil)
  if valid_614184 != nil:
    section.add "DBClusterParameterGroupName", valid_614184
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614185: Call_PostDescribeDBClusterParameterGroups_614169;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ##  Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group.
  ## 
  let valid = call_614185.validator(path, query, header, formData, body)
  let scheme = call_614185.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614185.url(scheme.get, call_614185.host, call_614185.base,
                         call_614185.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614185, url, valid)

proc call*(call_614186: Call_PostDescribeDBClusterParameterGroups_614169;
          MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeDBClusterParameterGroups";
          Filters: JsonNode = nil; DBClusterParameterGroupName: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterParameterGroups
  ##  Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Version: string (required)
  var query_614187 = newJObject()
  var formData_614188 = newJObject()
  add(formData_614188, "MaxRecords", newJInt(MaxRecords))
  add(formData_614188, "Marker", newJString(Marker))
  add(query_614187, "Action", newJString(Action))
  if Filters != nil:
    formData_614188.add "Filters", Filters
  add(formData_614188, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_614187, "Version", newJString(Version))
  result = call_614186.call(nil, query_614187, nil, formData_614188, nil)

var postDescribeDBClusterParameterGroups* = Call_PostDescribeDBClusterParameterGroups_614169(
    name: "postDescribeDBClusterParameterGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameterGroups",
    validator: validate_PostDescribeDBClusterParameterGroups_614170, base: "/",
    url: url_PostDescribeDBClusterParameterGroups_614171,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterParameterGroups_614150 = ref object of OpenApiRestCall_612642
proc url_GetDescribeDBClusterParameterGroups_614152(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusterParameterGroups_614151(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_614153 = query.getOrDefault("Marker")
  valid_614153 = validateParameter(valid_614153, JString, required = false,
                                 default = nil)
  if valid_614153 != nil:
    section.add "Marker", valid_614153
  var valid_614154 = query.getOrDefault("DBClusterParameterGroupName")
  valid_614154 = validateParameter(valid_614154, JString, required = false,
                                 default = nil)
  if valid_614154 != nil:
    section.add "DBClusterParameterGroupName", valid_614154
  var valid_614155 = query.getOrDefault("Action")
  valid_614155 = validateParameter(valid_614155, JString, required = true, default = newJString(
      "DescribeDBClusterParameterGroups"))
  if valid_614155 != nil:
    section.add "Action", valid_614155
  var valid_614156 = query.getOrDefault("Version")
  valid_614156 = validateParameter(valid_614156, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614156 != nil:
    section.add "Version", valid_614156
  var valid_614157 = query.getOrDefault("Filters")
  valid_614157 = validateParameter(valid_614157, JArray, required = false,
                                 default = nil)
  if valid_614157 != nil:
    section.add "Filters", valid_614157
  var valid_614158 = query.getOrDefault("MaxRecords")
  valid_614158 = validateParameter(valid_614158, JInt, required = false, default = nil)
  if valid_614158 != nil:
    section.add "MaxRecords", valid_614158
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614159 = header.getOrDefault("X-Amz-Signature")
  valid_614159 = validateParameter(valid_614159, JString, required = false,
                                 default = nil)
  if valid_614159 != nil:
    section.add "X-Amz-Signature", valid_614159
  var valid_614160 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614160 = validateParameter(valid_614160, JString, required = false,
                                 default = nil)
  if valid_614160 != nil:
    section.add "X-Amz-Content-Sha256", valid_614160
  var valid_614161 = header.getOrDefault("X-Amz-Date")
  valid_614161 = validateParameter(valid_614161, JString, required = false,
                                 default = nil)
  if valid_614161 != nil:
    section.add "X-Amz-Date", valid_614161
  var valid_614162 = header.getOrDefault("X-Amz-Credential")
  valid_614162 = validateParameter(valid_614162, JString, required = false,
                                 default = nil)
  if valid_614162 != nil:
    section.add "X-Amz-Credential", valid_614162
  var valid_614163 = header.getOrDefault("X-Amz-Security-Token")
  valid_614163 = validateParameter(valid_614163, JString, required = false,
                                 default = nil)
  if valid_614163 != nil:
    section.add "X-Amz-Security-Token", valid_614163
  var valid_614164 = header.getOrDefault("X-Amz-Algorithm")
  valid_614164 = validateParameter(valid_614164, JString, required = false,
                                 default = nil)
  if valid_614164 != nil:
    section.add "X-Amz-Algorithm", valid_614164
  var valid_614165 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614165 = validateParameter(valid_614165, JString, required = false,
                                 default = nil)
  if valid_614165 != nil:
    section.add "X-Amz-SignedHeaders", valid_614165
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614166: Call_GetDescribeDBClusterParameterGroups_614150;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ##  Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group.
  ## 
  let valid = call_614166.validator(path, query, header, formData, body)
  let scheme = call_614166.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614166.url(scheme.get, call_614166.host, call_614166.base,
                         call_614166.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614166, url, valid)

proc call*(call_614167: Call_GetDescribeDBClusterParameterGroups_614150;
          Marker: string = ""; DBClusterParameterGroupName: string = "";
          Action: string = "DescribeDBClusterParameterGroups";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusterParameterGroups
  ##  Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_614168 = newJObject()
  add(query_614168, "Marker", newJString(Marker))
  add(query_614168, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_614168, "Action", newJString(Action))
  add(query_614168, "Version", newJString(Version))
  if Filters != nil:
    query_614168.add "Filters", Filters
  add(query_614168, "MaxRecords", newJInt(MaxRecords))
  result = call_614167.call(nil, query_614168, nil, nil, nil)

var getDescribeDBClusterParameterGroups* = Call_GetDescribeDBClusterParameterGroups_614150(
    name: "getDescribeDBClusterParameterGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameterGroups",
    validator: validate_GetDescribeDBClusterParameterGroups_614151, base: "/",
    url: url_GetDescribeDBClusterParameterGroups_614152,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterParameters_614209 = ref object of OpenApiRestCall_612642
proc url_PostDescribeDBClusterParameters_614211(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusterParameters_614210(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular DB cluster parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614212 = query.getOrDefault("Action")
  valid_614212 = validateParameter(valid_614212, JString, required = true, default = newJString(
      "DescribeDBClusterParameters"))
  if valid_614212 != nil:
    section.add "Action", valid_614212
  var valid_614213 = query.getOrDefault("Version")
  valid_614213 = validateParameter(valid_614213, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614213 != nil:
    section.add "Version", valid_614213
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614214 = header.getOrDefault("X-Amz-Signature")
  valid_614214 = validateParameter(valid_614214, JString, required = false,
                                 default = nil)
  if valid_614214 != nil:
    section.add "X-Amz-Signature", valid_614214
  var valid_614215 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614215 = validateParameter(valid_614215, JString, required = false,
                                 default = nil)
  if valid_614215 != nil:
    section.add "X-Amz-Content-Sha256", valid_614215
  var valid_614216 = header.getOrDefault("X-Amz-Date")
  valid_614216 = validateParameter(valid_614216, JString, required = false,
                                 default = nil)
  if valid_614216 != nil:
    section.add "X-Amz-Date", valid_614216
  var valid_614217 = header.getOrDefault("X-Amz-Credential")
  valid_614217 = validateParameter(valid_614217, JString, required = false,
                                 default = nil)
  if valid_614217 != nil:
    section.add "X-Amz-Credential", valid_614217
  var valid_614218 = header.getOrDefault("X-Amz-Security-Token")
  valid_614218 = validateParameter(valid_614218, JString, required = false,
                                 default = nil)
  if valid_614218 != nil:
    section.add "X-Amz-Security-Token", valid_614218
  var valid_614219 = header.getOrDefault("X-Amz-Algorithm")
  valid_614219 = validateParameter(valid_614219, JString, required = false,
                                 default = nil)
  if valid_614219 != nil:
    section.add "X-Amz-Algorithm", valid_614219
  var valid_614220 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614220 = validateParameter(valid_614220, JString, required = false,
                                 default = nil)
  if valid_614220 != nil:
    section.add "X-Amz-SignedHeaders", valid_614220
  result.add "header", section
  ## parameters in `formData` object:
  ##   Source: JString
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  section = newJObject()
  var valid_614221 = formData.getOrDefault("Source")
  valid_614221 = validateParameter(valid_614221, JString, required = false,
                                 default = nil)
  if valid_614221 != nil:
    section.add "Source", valid_614221
  var valid_614222 = formData.getOrDefault("MaxRecords")
  valid_614222 = validateParameter(valid_614222, JInt, required = false, default = nil)
  if valid_614222 != nil:
    section.add "MaxRecords", valid_614222
  var valid_614223 = formData.getOrDefault("Marker")
  valid_614223 = validateParameter(valid_614223, JString, required = false,
                                 default = nil)
  if valid_614223 != nil:
    section.add "Marker", valid_614223
  var valid_614224 = formData.getOrDefault("Filters")
  valid_614224 = validateParameter(valid_614224, JArray, required = false,
                                 default = nil)
  if valid_614224 != nil:
    section.add "Filters", valid_614224
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_614225 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_614225 = validateParameter(valid_614225, JString, required = true,
                                 default = nil)
  if valid_614225 != nil:
    section.add "DBClusterParameterGroupName", valid_614225
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614226: Call_PostDescribeDBClusterParameters_614209;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular DB cluster parameter group.
  ## 
  let valid = call_614226.validator(path, query, header, formData, body)
  let scheme = call_614226.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614226.url(scheme.get, call_614226.host, call_614226.base,
                         call_614226.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614226, url, valid)

proc call*(call_614227: Call_PostDescribeDBClusterParameters_614209;
          DBClusterParameterGroupName: string; Source: string = "";
          MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeDBClusterParameters"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterParameters
  ## Returns the detailed parameter list for a particular DB cluster parameter group.
  ##   Source: string
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Version: string (required)
  var query_614228 = newJObject()
  var formData_614229 = newJObject()
  add(formData_614229, "Source", newJString(Source))
  add(formData_614229, "MaxRecords", newJInt(MaxRecords))
  add(formData_614229, "Marker", newJString(Marker))
  add(query_614228, "Action", newJString(Action))
  if Filters != nil:
    formData_614229.add "Filters", Filters
  add(formData_614229, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_614228, "Version", newJString(Version))
  result = call_614227.call(nil, query_614228, nil, formData_614229, nil)

var postDescribeDBClusterParameters* = Call_PostDescribeDBClusterParameters_614209(
    name: "postDescribeDBClusterParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameters",
    validator: validate_PostDescribeDBClusterParameters_614210, base: "/",
    url: url_PostDescribeDBClusterParameters_614211,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterParameters_614189 = ref object of OpenApiRestCall_612642
proc url_GetDescribeDBClusterParameters_614191(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusterParameters_614190(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular DB cluster parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Source: JString
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_614192 = query.getOrDefault("Marker")
  valid_614192 = validateParameter(valid_614192, JString, required = false,
                                 default = nil)
  if valid_614192 != nil:
    section.add "Marker", valid_614192
  var valid_614193 = query.getOrDefault("Source")
  valid_614193 = validateParameter(valid_614193, JString, required = false,
                                 default = nil)
  if valid_614193 != nil:
    section.add "Source", valid_614193
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_614194 = query.getOrDefault("DBClusterParameterGroupName")
  valid_614194 = validateParameter(valid_614194, JString, required = true,
                                 default = nil)
  if valid_614194 != nil:
    section.add "DBClusterParameterGroupName", valid_614194
  var valid_614195 = query.getOrDefault("Action")
  valid_614195 = validateParameter(valid_614195, JString, required = true, default = newJString(
      "DescribeDBClusterParameters"))
  if valid_614195 != nil:
    section.add "Action", valid_614195
  var valid_614196 = query.getOrDefault("Version")
  valid_614196 = validateParameter(valid_614196, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614196 != nil:
    section.add "Version", valid_614196
  var valid_614197 = query.getOrDefault("Filters")
  valid_614197 = validateParameter(valid_614197, JArray, required = false,
                                 default = nil)
  if valid_614197 != nil:
    section.add "Filters", valid_614197
  var valid_614198 = query.getOrDefault("MaxRecords")
  valid_614198 = validateParameter(valid_614198, JInt, required = false, default = nil)
  if valid_614198 != nil:
    section.add "MaxRecords", valid_614198
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614199 = header.getOrDefault("X-Amz-Signature")
  valid_614199 = validateParameter(valid_614199, JString, required = false,
                                 default = nil)
  if valid_614199 != nil:
    section.add "X-Amz-Signature", valid_614199
  var valid_614200 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614200 = validateParameter(valid_614200, JString, required = false,
                                 default = nil)
  if valid_614200 != nil:
    section.add "X-Amz-Content-Sha256", valid_614200
  var valid_614201 = header.getOrDefault("X-Amz-Date")
  valid_614201 = validateParameter(valid_614201, JString, required = false,
                                 default = nil)
  if valid_614201 != nil:
    section.add "X-Amz-Date", valid_614201
  var valid_614202 = header.getOrDefault("X-Amz-Credential")
  valid_614202 = validateParameter(valid_614202, JString, required = false,
                                 default = nil)
  if valid_614202 != nil:
    section.add "X-Amz-Credential", valid_614202
  var valid_614203 = header.getOrDefault("X-Amz-Security-Token")
  valid_614203 = validateParameter(valid_614203, JString, required = false,
                                 default = nil)
  if valid_614203 != nil:
    section.add "X-Amz-Security-Token", valid_614203
  var valid_614204 = header.getOrDefault("X-Amz-Algorithm")
  valid_614204 = validateParameter(valid_614204, JString, required = false,
                                 default = nil)
  if valid_614204 != nil:
    section.add "X-Amz-Algorithm", valid_614204
  var valid_614205 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614205 = validateParameter(valid_614205, JString, required = false,
                                 default = nil)
  if valid_614205 != nil:
    section.add "X-Amz-SignedHeaders", valid_614205
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614206: Call_GetDescribeDBClusterParameters_614189; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular DB cluster parameter group.
  ## 
  let valid = call_614206.validator(path, query, header, formData, body)
  let scheme = call_614206.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614206.url(scheme.get, call_614206.host, call_614206.base,
                         call_614206.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614206, url, valid)

proc call*(call_614207: Call_GetDescribeDBClusterParameters_614189;
          DBClusterParameterGroupName: string; Marker: string = "";
          Source: string = ""; Action: string = "DescribeDBClusterParameters";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusterParameters
  ## Returns the detailed parameter list for a particular DB cluster parameter group.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Source: string
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_614208 = newJObject()
  add(query_614208, "Marker", newJString(Marker))
  add(query_614208, "Source", newJString(Source))
  add(query_614208, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_614208, "Action", newJString(Action))
  add(query_614208, "Version", newJString(Version))
  if Filters != nil:
    query_614208.add "Filters", Filters
  add(query_614208, "MaxRecords", newJInt(MaxRecords))
  result = call_614207.call(nil, query_614208, nil, nil, nil)

var getDescribeDBClusterParameters* = Call_GetDescribeDBClusterParameters_614189(
    name: "getDescribeDBClusterParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameters",
    validator: validate_GetDescribeDBClusterParameters_614190, base: "/",
    url: url_GetDescribeDBClusterParameters_614191,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterSnapshotAttributes_614246 = ref object of OpenApiRestCall_612642
proc url_PostDescribeDBClusterSnapshotAttributes_614248(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusterSnapshotAttributes_614247(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614249 = query.getOrDefault("Action")
  valid_614249 = validateParameter(valid_614249, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshotAttributes"))
  if valid_614249 != nil:
    section.add "Action", valid_614249
  var valid_614250 = query.getOrDefault("Version")
  valid_614250 = validateParameter(valid_614250, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614250 != nil:
    section.add "Version", valid_614250
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614251 = header.getOrDefault("X-Amz-Signature")
  valid_614251 = validateParameter(valid_614251, JString, required = false,
                                 default = nil)
  if valid_614251 != nil:
    section.add "X-Amz-Signature", valid_614251
  var valid_614252 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614252 = validateParameter(valid_614252, JString, required = false,
                                 default = nil)
  if valid_614252 != nil:
    section.add "X-Amz-Content-Sha256", valid_614252
  var valid_614253 = header.getOrDefault("X-Amz-Date")
  valid_614253 = validateParameter(valid_614253, JString, required = false,
                                 default = nil)
  if valid_614253 != nil:
    section.add "X-Amz-Date", valid_614253
  var valid_614254 = header.getOrDefault("X-Amz-Credential")
  valid_614254 = validateParameter(valid_614254, JString, required = false,
                                 default = nil)
  if valid_614254 != nil:
    section.add "X-Amz-Credential", valid_614254
  var valid_614255 = header.getOrDefault("X-Amz-Security-Token")
  valid_614255 = validateParameter(valid_614255, JString, required = false,
                                 default = nil)
  if valid_614255 != nil:
    section.add "X-Amz-Security-Token", valid_614255
  var valid_614256 = header.getOrDefault("X-Amz-Algorithm")
  valid_614256 = validateParameter(valid_614256, JString, required = false,
                                 default = nil)
  if valid_614256 != nil:
    section.add "X-Amz-Algorithm", valid_614256
  var valid_614257 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614257 = validateParameter(valid_614257, JString, required = false,
                                 default = nil)
  if valid_614257 != nil:
    section.add "X-Amz-SignedHeaders", valid_614257
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_614258 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_614258 = validateParameter(valid_614258, JString, required = true,
                                 default = nil)
  if valid_614258 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_614258
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614259: Call_PostDescribeDBClusterSnapshotAttributes_614246;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ## 
  let valid = call_614259.validator(path, query, header, formData, body)
  let scheme = call_614259.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614259.url(scheme.get, call_614259.host, call_614259.base,
                         call_614259.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614259, url, valid)

proc call*(call_614260: Call_PostDescribeDBClusterSnapshotAttributes_614246;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DescribeDBClusterSnapshotAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterSnapshotAttributes
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614261 = newJObject()
  var formData_614262 = newJObject()
  add(formData_614262, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_614261, "Action", newJString(Action))
  add(query_614261, "Version", newJString(Version))
  result = call_614260.call(nil, query_614261, nil, formData_614262, nil)

var postDescribeDBClusterSnapshotAttributes* = Call_PostDescribeDBClusterSnapshotAttributes_614246(
    name: "postDescribeDBClusterSnapshotAttributes", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeDBClusterSnapshotAttributes",
    validator: validate_PostDescribeDBClusterSnapshotAttributes_614247, base: "/",
    url: url_PostDescribeDBClusterSnapshotAttributes_614248,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterSnapshotAttributes_614230 = ref object of OpenApiRestCall_612642
proc url_GetDescribeDBClusterSnapshotAttributes_614232(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusterSnapshotAttributes_614231(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_614233 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_614233 = validateParameter(valid_614233, JString, required = true,
                                 default = nil)
  if valid_614233 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_614233
  var valid_614234 = query.getOrDefault("Action")
  valid_614234 = validateParameter(valid_614234, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshotAttributes"))
  if valid_614234 != nil:
    section.add "Action", valid_614234
  var valid_614235 = query.getOrDefault("Version")
  valid_614235 = validateParameter(valid_614235, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614235 != nil:
    section.add "Version", valid_614235
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614236 = header.getOrDefault("X-Amz-Signature")
  valid_614236 = validateParameter(valid_614236, JString, required = false,
                                 default = nil)
  if valid_614236 != nil:
    section.add "X-Amz-Signature", valid_614236
  var valid_614237 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614237 = validateParameter(valid_614237, JString, required = false,
                                 default = nil)
  if valid_614237 != nil:
    section.add "X-Amz-Content-Sha256", valid_614237
  var valid_614238 = header.getOrDefault("X-Amz-Date")
  valid_614238 = validateParameter(valid_614238, JString, required = false,
                                 default = nil)
  if valid_614238 != nil:
    section.add "X-Amz-Date", valid_614238
  var valid_614239 = header.getOrDefault("X-Amz-Credential")
  valid_614239 = validateParameter(valid_614239, JString, required = false,
                                 default = nil)
  if valid_614239 != nil:
    section.add "X-Amz-Credential", valid_614239
  var valid_614240 = header.getOrDefault("X-Amz-Security-Token")
  valid_614240 = validateParameter(valid_614240, JString, required = false,
                                 default = nil)
  if valid_614240 != nil:
    section.add "X-Amz-Security-Token", valid_614240
  var valid_614241 = header.getOrDefault("X-Amz-Algorithm")
  valid_614241 = validateParameter(valid_614241, JString, required = false,
                                 default = nil)
  if valid_614241 != nil:
    section.add "X-Amz-Algorithm", valid_614241
  var valid_614242 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614242 = validateParameter(valid_614242, JString, required = false,
                                 default = nil)
  if valid_614242 != nil:
    section.add "X-Amz-SignedHeaders", valid_614242
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614243: Call_GetDescribeDBClusterSnapshotAttributes_614230;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ## 
  let valid = call_614243.validator(path, query, header, formData, body)
  let scheme = call_614243.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614243.url(scheme.get, call_614243.host, call_614243.base,
                         call_614243.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614243, url, valid)

proc call*(call_614244: Call_GetDescribeDBClusterSnapshotAttributes_614230;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DescribeDBClusterSnapshotAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBClusterSnapshotAttributes
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614245 = newJObject()
  add(query_614245, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_614245, "Action", newJString(Action))
  add(query_614245, "Version", newJString(Version))
  result = call_614244.call(nil, query_614245, nil, nil, nil)

var getDescribeDBClusterSnapshotAttributes* = Call_GetDescribeDBClusterSnapshotAttributes_614230(
    name: "getDescribeDBClusterSnapshotAttributes", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeDBClusterSnapshotAttributes",
    validator: validate_GetDescribeDBClusterSnapshotAttributes_614231, base: "/",
    url: url_GetDescribeDBClusterSnapshotAttributes_614232,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterSnapshots_614286 = ref object of OpenApiRestCall_612642
proc url_PostDescribeDBClusterSnapshots_614288(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusterSnapshots_614287(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about DB cluster snapshots. This API action supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614289 = query.getOrDefault("Action")
  valid_614289 = validateParameter(valid_614289, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshots"))
  if valid_614289 != nil:
    section.add "Action", valid_614289
  var valid_614290 = query.getOrDefault("Version")
  valid_614290 = validateParameter(valid_614290, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614290 != nil:
    section.add "Version", valid_614290
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614291 = header.getOrDefault("X-Amz-Signature")
  valid_614291 = validateParameter(valid_614291, JString, required = false,
                                 default = nil)
  if valid_614291 != nil:
    section.add "X-Amz-Signature", valid_614291
  var valid_614292 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614292 = validateParameter(valid_614292, JString, required = false,
                                 default = nil)
  if valid_614292 != nil:
    section.add "X-Amz-Content-Sha256", valid_614292
  var valid_614293 = header.getOrDefault("X-Amz-Date")
  valid_614293 = validateParameter(valid_614293, JString, required = false,
                                 default = nil)
  if valid_614293 != nil:
    section.add "X-Amz-Date", valid_614293
  var valid_614294 = header.getOrDefault("X-Amz-Credential")
  valid_614294 = validateParameter(valid_614294, JString, required = false,
                                 default = nil)
  if valid_614294 != nil:
    section.add "X-Amz-Credential", valid_614294
  var valid_614295 = header.getOrDefault("X-Amz-Security-Token")
  valid_614295 = validateParameter(valid_614295, JString, required = false,
                                 default = nil)
  if valid_614295 != nil:
    section.add "X-Amz-Security-Token", valid_614295
  var valid_614296 = header.getOrDefault("X-Amz-Algorithm")
  valid_614296 = validateParameter(valid_614296, JString, required = false,
                                 default = nil)
  if valid_614296 != nil:
    section.add "X-Amz-Algorithm", valid_614296
  var valid_614297 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614297 = validateParameter(valid_614297, JString, required = false,
                                 default = nil)
  if valid_614297 != nil:
    section.add "X-Amz-SignedHeaders", valid_614297
  result.add "header", section
  ## parameters in `formData` object:
  ##   SnapshotType: JString
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon Neptune for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by setting the <code>IncludeShared</code> parameter to <code>true</code>. You can include public DB cluster snapshots with these results by setting the <code>IncludePublic</code> parameter to <code>true</code>.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   IncludePublic: JBool
  ##                : <p>True to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account, and otherwise false. The default is <code>false</code>. The default is false.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterSnapshotIdentifier: JString
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   IncludeShared: JBool
  ##                : <p>True to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore, and otherwise false. The default is <code>false</code>.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   DBClusterIdentifier: JString
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  section = newJObject()
  var valid_614298 = formData.getOrDefault("SnapshotType")
  valid_614298 = validateParameter(valid_614298, JString, required = false,
                                 default = nil)
  if valid_614298 != nil:
    section.add "SnapshotType", valid_614298
  var valid_614299 = formData.getOrDefault("MaxRecords")
  valid_614299 = validateParameter(valid_614299, JInt, required = false, default = nil)
  if valid_614299 != nil:
    section.add "MaxRecords", valid_614299
  var valid_614300 = formData.getOrDefault("IncludePublic")
  valid_614300 = validateParameter(valid_614300, JBool, required = false, default = nil)
  if valid_614300 != nil:
    section.add "IncludePublic", valid_614300
  var valid_614301 = formData.getOrDefault("Marker")
  valid_614301 = validateParameter(valid_614301, JString, required = false,
                                 default = nil)
  if valid_614301 != nil:
    section.add "Marker", valid_614301
  var valid_614302 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_614302 = validateParameter(valid_614302, JString, required = false,
                                 default = nil)
  if valid_614302 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_614302
  var valid_614303 = formData.getOrDefault("IncludeShared")
  valid_614303 = validateParameter(valid_614303, JBool, required = false, default = nil)
  if valid_614303 != nil:
    section.add "IncludeShared", valid_614303
  var valid_614304 = formData.getOrDefault("Filters")
  valid_614304 = validateParameter(valid_614304, JArray, required = false,
                                 default = nil)
  if valid_614304 != nil:
    section.add "Filters", valid_614304
  var valid_614305 = formData.getOrDefault("DBClusterIdentifier")
  valid_614305 = validateParameter(valid_614305, JString, required = false,
                                 default = nil)
  if valid_614305 != nil:
    section.add "DBClusterIdentifier", valid_614305
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614306: Call_PostDescribeDBClusterSnapshots_614286; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about DB cluster snapshots. This API action supports pagination.
  ## 
  let valid = call_614306.validator(path, query, header, formData, body)
  let scheme = call_614306.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614306.url(scheme.get, call_614306.host, call_614306.base,
                         call_614306.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614306, url, valid)

proc call*(call_614307: Call_PostDescribeDBClusterSnapshots_614286;
          SnapshotType: string = ""; MaxRecords: int = 0; IncludePublic: bool = false;
          Marker: string = ""; DBClusterSnapshotIdentifier: string = "";
          IncludeShared: bool = false;
          Action: string = "DescribeDBClusterSnapshots"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"; DBClusterIdentifier: string = ""): Recallable =
  ## postDescribeDBClusterSnapshots
  ## Returns information about DB cluster snapshots. This API action supports pagination.
  ##   SnapshotType: string
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon Neptune for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by setting the <code>IncludeShared</code> parameter to <code>true</code>. You can include public DB cluster snapshots with these results by setting the <code>IncludePublic</code> parameter to <code>true</code>.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   IncludePublic: bool
  ##                : <p>True to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account, and otherwise false. The default is <code>false</code>. The default is false.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterSnapshotIdentifier: string
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   IncludeShared: bool
  ##                : <p>True to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore, and otherwise false. The default is <code>false</code>.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  ##   DBClusterIdentifier: string
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  var query_614308 = newJObject()
  var formData_614309 = newJObject()
  add(formData_614309, "SnapshotType", newJString(SnapshotType))
  add(formData_614309, "MaxRecords", newJInt(MaxRecords))
  add(formData_614309, "IncludePublic", newJBool(IncludePublic))
  add(formData_614309, "Marker", newJString(Marker))
  add(formData_614309, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(formData_614309, "IncludeShared", newJBool(IncludeShared))
  add(query_614308, "Action", newJString(Action))
  if Filters != nil:
    formData_614309.add "Filters", Filters
  add(query_614308, "Version", newJString(Version))
  add(formData_614309, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_614307.call(nil, query_614308, nil, formData_614309, nil)

var postDescribeDBClusterSnapshots* = Call_PostDescribeDBClusterSnapshots_614286(
    name: "postDescribeDBClusterSnapshots", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterSnapshots",
    validator: validate_PostDescribeDBClusterSnapshots_614287, base: "/",
    url: url_PostDescribeDBClusterSnapshots_614288,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterSnapshots_614263 = ref object of OpenApiRestCall_612642
proc url_GetDescribeDBClusterSnapshots_614265(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusterSnapshots_614264(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about DB cluster snapshots. This API action supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterSnapshotIdentifier: JString
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   SnapshotType: JString
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon Neptune for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by setting the <code>IncludeShared</code> parameter to <code>true</code>. You can include public DB cluster snapshots with these results by setting the <code>IncludePublic</code> parameter to <code>true</code>.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   IncludePublic: JBool
  ##                : <p>True to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account, and otherwise false. The default is <code>false</code>. The default is false.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Action: JString (required)
  ##   IncludeShared: JBool
  ##                : <p>True to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore, and otherwise false. The default is <code>false</code>.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_614266 = query.getOrDefault("Marker")
  valid_614266 = validateParameter(valid_614266, JString, required = false,
                                 default = nil)
  if valid_614266 != nil:
    section.add "Marker", valid_614266
  var valid_614267 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_614267 = validateParameter(valid_614267, JString, required = false,
                                 default = nil)
  if valid_614267 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_614267
  var valid_614268 = query.getOrDefault("DBClusterIdentifier")
  valid_614268 = validateParameter(valid_614268, JString, required = false,
                                 default = nil)
  if valid_614268 != nil:
    section.add "DBClusterIdentifier", valid_614268
  var valid_614269 = query.getOrDefault("SnapshotType")
  valid_614269 = validateParameter(valid_614269, JString, required = false,
                                 default = nil)
  if valid_614269 != nil:
    section.add "SnapshotType", valid_614269
  var valid_614270 = query.getOrDefault("IncludePublic")
  valid_614270 = validateParameter(valid_614270, JBool, required = false, default = nil)
  if valid_614270 != nil:
    section.add "IncludePublic", valid_614270
  var valid_614271 = query.getOrDefault("Action")
  valid_614271 = validateParameter(valid_614271, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshots"))
  if valid_614271 != nil:
    section.add "Action", valid_614271
  var valid_614272 = query.getOrDefault("IncludeShared")
  valid_614272 = validateParameter(valid_614272, JBool, required = false, default = nil)
  if valid_614272 != nil:
    section.add "IncludeShared", valid_614272
  var valid_614273 = query.getOrDefault("Version")
  valid_614273 = validateParameter(valid_614273, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614273 != nil:
    section.add "Version", valid_614273
  var valid_614274 = query.getOrDefault("Filters")
  valid_614274 = validateParameter(valid_614274, JArray, required = false,
                                 default = nil)
  if valid_614274 != nil:
    section.add "Filters", valid_614274
  var valid_614275 = query.getOrDefault("MaxRecords")
  valid_614275 = validateParameter(valid_614275, JInt, required = false, default = nil)
  if valid_614275 != nil:
    section.add "MaxRecords", valid_614275
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614276 = header.getOrDefault("X-Amz-Signature")
  valid_614276 = validateParameter(valid_614276, JString, required = false,
                                 default = nil)
  if valid_614276 != nil:
    section.add "X-Amz-Signature", valid_614276
  var valid_614277 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614277 = validateParameter(valid_614277, JString, required = false,
                                 default = nil)
  if valid_614277 != nil:
    section.add "X-Amz-Content-Sha256", valid_614277
  var valid_614278 = header.getOrDefault("X-Amz-Date")
  valid_614278 = validateParameter(valid_614278, JString, required = false,
                                 default = nil)
  if valid_614278 != nil:
    section.add "X-Amz-Date", valid_614278
  var valid_614279 = header.getOrDefault("X-Amz-Credential")
  valid_614279 = validateParameter(valid_614279, JString, required = false,
                                 default = nil)
  if valid_614279 != nil:
    section.add "X-Amz-Credential", valid_614279
  var valid_614280 = header.getOrDefault("X-Amz-Security-Token")
  valid_614280 = validateParameter(valid_614280, JString, required = false,
                                 default = nil)
  if valid_614280 != nil:
    section.add "X-Amz-Security-Token", valid_614280
  var valid_614281 = header.getOrDefault("X-Amz-Algorithm")
  valid_614281 = validateParameter(valid_614281, JString, required = false,
                                 default = nil)
  if valid_614281 != nil:
    section.add "X-Amz-Algorithm", valid_614281
  var valid_614282 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614282 = validateParameter(valid_614282, JString, required = false,
                                 default = nil)
  if valid_614282 != nil:
    section.add "X-Amz-SignedHeaders", valid_614282
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614283: Call_GetDescribeDBClusterSnapshots_614263; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about DB cluster snapshots. This API action supports pagination.
  ## 
  let valid = call_614283.validator(path, query, header, formData, body)
  let scheme = call_614283.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614283.url(scheme.get, call_614283.host, call_614283.base,
                         call_614283.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614283, url, valid)

proc call*(call_614284: Call_GetDescribeDBClusterSnapshots_614263;
          Marker: string = ""; DBClusterSnapshotIdentifier: string = "";
          DBClusterIdentifier: string = ""; SnapshotType: string = "";
          IncludePublic: bool = false;
          Action: string = "DescribeDBClusterSnapshots";
          IncludeShared: bool = false; Version: string = "2014-10-31";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusterSnapshots
  ## Returns information about DB cluster snapshots. This API action supports pagination.
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterSnapshotIdentifier: string
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   DBClusterIdentifier: string
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   SnapshotType: string
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon Neptune for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by setting the <code>IncludeShared</code> parameter to <code>true</code>. You can include public DB cluster snapshots with these results by setting the <code>IncludePublic</code> parameter to <code>true</code>.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   IncludePublic: bool
  ##                : <p>True to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account, and otherwise false. The default is <code>false</code>. The default is false.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Action: string (required)
  ##   IncludeShared: bool
  ##                : <p>True to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore, and otherwise false. The default is <code>false</code>.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_614285 = newJObject()
  add(query_614285, "Marker", newJString(Marker))
  add(query_614285, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_614285, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_614285, "SnapshotType", newJString(SnapshotType))
  add(query_614285, "IncludePublic", newJBool(IncludePublic))
  add(query_614285, "Action", newJString(Action))
  add(query_614285, "IncludeShared", newJBool(IncludeShared))
  add(query_614285, "Version", newJString(Version))
  if Filters != nil:
    query_614285.add "Filters", Filters
  add(query_614285, "MaxRecords", newJInt(MaxRecords))
  result = call_614284.call(nil, query_614285, nil, nil, nil)

var getDescribeDBClusterSnapshots* = Call_GetDescribeDBClusterSnapshots_614263(
    name: "getDescribeDBClusterSnapshots", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterSnapshots",
    validator: validate_GetDescribeDBClusterSnapshots_614264, base: "/",
    url: url_GetDescribeDBClusterSnapshots_614265,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusters_614329 = ref object of OpenApiRestCall_612642
proc url_PostDescribeDBClusters_614331(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusters_614330(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about provisioned DB clusters. This API supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614332 = query.getOrDefault("Action")
  valid_614332 = validateParameter(valid_614332, JString, required = true,
                                 default = newJString("DescribeDBClusters"))
  if valid_614332 != nil:
    section.add "Action", valid_614332
  var valid_614333 = query.getOrDefault("Version")
  valid_614333 = validateParameter(valid_614333, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614333 != nil:
    section.add "Version", valid_614333
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614334 = header.getOrDefault("X-Amz-Signature")
  valid_614334 = validateParameter(valid_614334, JString, required = false,
                                 default = nil)
  if valid_614334 != nil:
    section.add "X-Amz-Signature", valid_614334
  var valid_614335 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614335 = validateParameter(valid_614335, JString, required = false,
                                 default = nil)
  if valid_614335 != nil:
    section.add "X-Amz-Content-Sha256", valid_614335
  var valid_614336 = header.getOrDefault("X-Amz-Date")
  valid_614336 = validateParameter(valid_614336, JString, required = false,
                                 default = nil)
  if valid_614336 != nil:
    section.add "X-Amz-Date", valid_614336
  var valid_614337 = header.getOrDefault("X-Amz-Credential")
  valid_614337 = validateParameter(valid_614337, JString, required = false,
                                 default = nil)
  if valid_614337 != nil:
    section.add "X-Amz-Credential", valid_614337
  var valid_614338 = header.getOrDefault("X-Amz-Security-Token")
  valid_614338 = validateParameter(valid_614338, JString, required = false,
                                 default = nil)
  if valid_614338 != nil:
    section.add "X-Amz-Security-Token", valid_614338
  var valid_614339 = header.getOrDefault("X-Amz-Algorithm")
  valid_614339 = validateParameter(valid_614339, JString, required = false,
                                 default = nil)
  if valid_614339 != nil:
    section.add "X-Amz-Algorithm", valid_614339
  var valid_614340 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614340 = validateParameter(valid_614340, JString, required = false,
                                 default = nil)
  if valid_614340 != nil:
    section.add "X-Amz-SignedHeaders", valid_614340
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <a>DescribeDBClusters</a> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  section = newJObject()
  var valid_614341 = formData.getOrDefault("MaxRecords")
  valid_614341 = validateParameter(valid_614341, JInt, required = false, default = nil)
  if valid_614341 != nil:
    section.add "MaxRecords", valid_614341
  var valid_614342 = formData.getOrDefault("Marker")
  valid_614342 = validateParameter(valid_614342, JString, required = false,
                                 default = nil)
  if valid_614342 != nil:
    section.add "Marker", valid_614342
  var valid_614343 = formData.getOrDefault("Filters")
  valid_614343 = validateParameter(valid_614343, JArray, required = false,
                                 default = nil)
  if valid_614343 != nil:
    section.add "Filters", valid_614343
  var valid_614344 = formData.getOrDefault("DBClusterIdentifier")
  valid_614344 = validateParameter(valid_614344, JString, required = false,
                                 default = nil)
  if valid_614344 != nil:
    section.add "DBClusterIdentifier", valid_614344
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614345: Call_PostDescribeDBClusters_614329; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about provisioned DB clusters. This API supports pagination.
  ## 
  let valid = call_614345.validator(path, query, header, formData, body)
  let scheme = call_614345.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614345.url(scheme.get, call_614345.host, call_614345.base,
                         call_614345.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614345, url, valid)

proc call*(call_614346: Call_PostDescribeDBClusters_614329; MaxRecords: int = 0;
          Marker: string = ""; Action: string = "DescribeDBClusters";
          Filters: JsonNode = nil; Version: string = "2014-10-31";
          DBClusterIdentifier: string = ""): Recallable =
  ## postDescribeDBClusters
  ## Returns information about provisioned DB clusters. This API supports pagination.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <a>DescribeDBClusters</a> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  var query_614347 = newJObject()
  var formData_614348 = newJObject()
  add(formData_614348, "MaxRecords", newJInt(MaxRecords))
  add(formData_614348, "Marker", newJString(Marker))
  add(query_614347, "Action", newJString(Action))
  if Filters != nil:
    formData_614348.add "Filters", Filters
  add(query_614347, "Version", newJString(Version))
  add(formData_614348, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_614346.call(nil, query_614347, nil, formData_614348, nil)

var postDescribeDBClusters* = Call_PostDescribeDBClusters_614329(
    name: "postDescribeDBClusters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusters",
    validator: validate_PostDescribeDBClusters_614330, base: "/",
    url: url_PostDescribeDBClusters_614331, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusters_614310 = ref object of OpenApiRestCall_612642
proc url_GetDescribeDBClusters_614312(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusters_614311(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about provisioned DB clusters. This API supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <a>DescribeDBClusters</a> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBClusterIdentifier: JString
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_614313 = query.getOrDefault("Marker")
  valid_614313 = validateParameter(valid_614313, JString, required = false,
                                 default = nil)
  if valid_614313 != nil:
    section.add "Marker", valid_614313
  var valid_614314 = query.getOrDefault("DBClusterIdentifier")
  valid_614314 = validateParameter(valid_614314, JString, required = false,
                                 default = nil)
  if valid_614314 != nil:
    section.add "DBClusterIdentifier", valid_614314
  var valid_614315 = query.getOrDefault("Action")
  valid_614315 = validateParameter(valid_614315, JString, required = true,
                                 default = newJString("DescribeDBClusters"))
  if valid_614315 != nil:
    section.add "Action", valid_614315
  var valid_614316 = query.getOrDefault("Version")
  valid_614316 = validateParameter(valid_614316, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614316 != nil:
    section.add "Version", valid_614316
  var valid_614317 = query.getOrDefault("Filters")
  valid_614317 = validateParameter(valid_614317, JArray, required = false,
                                 default = nil)
  if valid_614317 != nil:
    section.add "Filters", valid_614317
  var valid_614318 = query.getOrDefault("MaxRecords")
  valid_614318 = validateParameter(valid_614318, JInt, required = false, default = nil)
  if valid_614318 != nil:
    section.add "MaxRecords", valid_614318
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614319 = header.getOrDefault("X-Amz-Signature")
  valid_614319 = validateParameter(valid_614319, JString, required = false,
                                 default = nil)
  if valid_614319 != nil:
    section.add "X-Amz-Signature", valid_614319
  var valid_614320 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614320 = validateParameter(valid_614320, JString, required = false,
                                 default = nil)
  if valid_614320 != nil:
    section.add "X-Amz-Content-Sha256", valid_614320
  var valid_614321 = header.getOrDefault("X-Amz-Date")
  valid_614321 = validateParameter(valid_614321, JString, required = false,
                                 default = nil)
  if valid_614321 != nil:
    section.add "X-Amz-Date", valid_614321
  var valid_614322 = header.getOrDefault("X-Amz-Credential")
  valid_614322 = validateParameter(valid_614322, JString, required = false,
                                 default = nil)
  if valid_614322 != nil:
    section.add "X-Amz-Credential", valid_614322
  var valid_614323 = header.getOrDefault("X-Amz-Security-Token")
  valid_614323 = validateParameter(valid_614323, JString, required = false,
                                 default = nil)
  if valid_614323 != nil:
    section.add "X-Amz-Security-Token", valid_614323
  var valid_614324 = header.getOrDefault("X-Amz-Algorithm")
  valid_614324 = validateParameter(valid_614324, JString, required = false,
                                 default = nil)
  if valid_614324 != nil:
    section.add "X-Amz-Algorithm", valid_614324
  var valid_614325 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614325 = validateParameter(valid_614325, JString, required = false,
                                 default = nil)
  if valid_614325 != nil:
    section.add "X-Amz-SignedHeaders", valid_614325
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614326: Call_GetDescribeDBClusters_614310; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about provisioned DB clusters. This API supports pagination.
  ## 
  let valid = call_614326.validator(path, query, header, formData, body)
  let scheme = call_614326.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614326.url(scheme.get, call_614326.host, call_614326.base,
                         call_614326.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614326, url, valid)

proc call*(call_614327: Call_GetDescribeDBClusters_614310; Marker: string = "";
          DBClusterIdentifier: string = ""; Action: string = "DescribeDBClusters";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusters
  ## Returns information about provisioned DB clusters. This API supports pagination.
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <a>DescribeDBClusters</a> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBClusterIdentifier: string
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_614328 = newJObject()
  add(query_614328, "Marker", newJString(Marker))
  add(query_614328, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_614328, "Action", newJString(Action))
  add(query_614328, "Version", newJString(Version))
  if Filters != nil:
    query_614328.add "Filters", Filters
  add(query_614328, "MaxRecords", newJInt(MaxRecords))
  result = call_614327.call(nil, query_614328, nil, nil, nil)

var getDescribeDBClusters* = Call_GetDescribeDBClusters_614310(
    name: "getDescribeDBClusters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusters",
    validator: validate_GetDescribeDBClusters_614311, base: "/",
    url: url_GetDescribeDBClusters_614312, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBEngineVersions_614373 = ref object of OpenApiRestCall_612642
proc url_PostDescribeDBEngineVersions_614375(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBEngineVersions_614374(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the available DB engines.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614376 = query.getOrDefault("Action")
  valid_614376 = validateParameter(valid_614376, JString, required = true, default = newJString(
      "DescribeDBEngineVersions"))
  if valid_614376 != nil:
    section.add "Action", valid_614376
  var valid_614377 = query.getOrDefault("Version")
  valid_614377 = validateParameter(valid_614377, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614377 != nil:
    section.add "Version", valid_614377
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614378 = header.getOrDefault("X-Amz-Signature")
  valid_614378 = validateParameter(valid_614378, JString, required = false,
                                 default = nil)
  if valid_614378 != nil:
    section.add "X-Amz-Signature", valid_614378
  var valid_614379 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614379 = validateParameter(valid_614379, JString, required = false,
                                 default = nil)
  if valid_614379 != nil:
    section.add "X-Amz-Content-Sha256", valid_614379
  var valid_614380 = header.getOrDefault("X-Amz-Date")
  valid_614380 = validateParameter(valid_614380, JString, required = false,
                                 default = nil)
  if valid_614380 != nil:
    section.add "X-Amz-Date", valid_614380
  var valid_614381 = header.getOrDefault("X-Amz-Credential")
  valid_614381 = validateParameter(valid_614381, JString, required = false,
                                 default = nil)
  if valid_614381 != nil:
    section.add "X-Amz-Credential", valid_614381
  var valid_614382 = header.getOrDefault("X-Amz-Security-Token")
  valid_614382 = validateParameter(valid_614382, JString, required = false,
                                 default = nil)
  if valid_614382 != nil:
    section.add "X-Amz-Security-Token", valid_614382
  var valid_614383 = header.getOrDefault("X-Amz-Algorithm")
  valid_614383 = validateParameter(valid_614383, JString, required = false,
                                 default = nil)
  if valid_614383 != nil:
    section.add "X-Amz-Algorithm", valid_614383
  var valid_614384 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614384 = validateParameter(valid_614384, JString, required = false,
                                 default = nil)
  if valid_614384 != nil:
    section.add "X-Amz-SignedHeaders", valid_614384
  result.add "header", section
  ## parameters in `formData` object:
  ##   DefaultOnly: JBool
  ##              : Indicates that only the default version of the specified engine or engine and major version combination is returned.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: JString
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Engine: JString
  ##         : The database engine to return.
  ##   ListSupportedCharacterSets: JBool
  ##                             : If this parameter is specified and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version.
  ##   ListSupportedTimezones: JBool
  ##                         : If this parameter is specified and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version.
  ##   Filters: JArray
  ##          : Not currently supported.
  ##   DBParameterGroupFamily: JString
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  section = newJObject()
  var valid_614385 = formData.getOrDefault("DefaultOnly")
  valid_614385 = validateParameter(valid_614385, JBool, required = false, default = nil)
  if valid_614385 != nil:
    section.add "DefaultOnly", valid_614385
  var valid_614386 = formData.getOrDefault("MaxRecords")
  valid_614386 = validateParameter(valid_614386, JInt, required = false, default = nil)
  if valid_614386 != nil:
    section.add "MaxRecords", valid_614386
  var valid_614387 = formData.getOrDefault("EngineVersion")
  valid_614387 = validateParameter(valid_614387, JString, required = false,
                                 default = nil)
  if valid_614387 != nil:
    section.add "EngineVersion", valid_614387
  var valid_614388 = formData.getOrDefault("Marker")
  valid_614388 = validateParameter(valid_614388, JString, required = false,
                                 default = nil)
  if valid_614388 != nil:
    section.add "Marker", valid_614388
  var valid_614389 = formData.getOrDefault("Engine")
  valid_614389 = validateParameter(valid_614389, JString, required = false,
                                 default = nil)
  if valid_614389 != nil:
    section.add "Engine", valid_614389
  var valid_614390 = formData.getOrDefault("ListSupportedCharacterSets")
  valid_614390 = validateParameter(valid_614390, JBool, required = false, default = nil)
  if valid_614390 != nil:
    section.add "ListSupportedCharacterSets", valid_614390
  var valid_614391 = formData.getOrDefault("ListSupportedTimezones")
  valid_614391 = validateParameter(valid_614391, JBool, required = false, default = nil)
  if valid_614391 != nil:
    section.add "ListSupportedTimezones", valid_614391
  var valid_614392 = formData.getOrDefault("Filters")
  valid_614392 = validateParameter(valid_614392, JArray, required = false,
                                 default = nil)
  if valid_614392 != nil:
    section.add "Filters", valid_614392
  var valid_614393 = formData.getOrDefault("DBParameterGroupFamily")
  valid_614393 = validateParameter(valid_614393, JString, required = false,
                                 default = nil)
  if valid_614393 != nil:
    section.add "DBParameterGroupFamily", valid_614393
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614394: Call_PostDescribeDBEngineVersions_614373; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the available DB engines.
  ## 
  let valid = call_614394.validator(path, query, header, formData, body)
  let scheme = call_614394.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614394.url(scheme.get, call_614394.host, call_614394.base,
                         call_614394.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614394, url, valid)

proc call*(call_614395: Call_PostDescribeDBEngineVersions_614373;
          DefaultOnly: bool = false; MaxRecords: int = 0; EngineVersion: string = "";
          Marker: string = ""; Engine: string = "";
          ListSupportedCharacterSets: bool = false;
          Action: string = "DescribeDBEngineVersions";
          ListSupportedTimezones: bool = false; Filters: JsonNode = nil;
          Version: string = "2014-10-31"; DBParameterGroupFamily: string = ""): Recallable =
  ## postDescribeDBEngineVersions
  ## Returns a list of the available DB engines.
  ##   DefaultOnly: bool
  ##              : Indicates that only the default version of the specified engine or engine and major version combination is returned.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: string
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Engine: string
  ##         : The database engine to return.
  ##   ListSupportedCharacterSets: bool
  ##                             : If this parameter is specified and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version.
  ##   Action: string (required)
  ##   ListSupportedTimezones: bool
  ##                         : If this parameter is specified and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version.
  ##   Filters: JArray
  ##          : Not currently supported.
  ##   Version: string (required)
  ##   DBParameterGroupFamily: string
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  var query_614396 = newJObject()
  var formData_614397 = newJObject()
  add(formData_614397, "DefaultOnly", newJBool(DefaultOnly))
  add(formData_614397, "MaxRecords", newJInt(MaxRecords))
  add(formData_614397, "EngineVersion", newJString(EngineVersion))
  add(formData_614397, "Marker", newJString(Marker))
  add(formData_614397, "Engine", newJString(Engine))
  add(formData_614397, "ListSupportedCharacterSets",
      newJBool(ListSupportedCharacterSets))
  add(query_614396, "Action", newJString(Action))
  add(formData_614397, "ListSupportedTimezones", newJBool(ListSupportedTimezones))
  if Filters != nil:
    formData_614397.add "Filters", Filters
  add(query_614396, "Version", newJString(Version))
  add(formData_614397, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  result = call_614395.call(nil, query_614396, nil, formData_614397, nil)

var postDescribeDBEngineVersions* = Call_PostDescribeDBEngineVersions_614373(
    name: "postDescribeDBEngineVersions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBEngineVersions",
    validator: validate_PostDescribeDBEngineVersions_614374, base: "/",
    url: url_PostDescribeDBEngineVersions_614375,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBEngineVersions_614349 = ref object of OpenApiRestCall_612642
proc url_GetDescribeDBEngineVersions_614351(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBEngineVersions_614350(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the available DB engines.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ListSupportedTimezones: JBool
  ##                         : If this parameter is specified and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version.
  ##   DBParameterGroupFamily: JString
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  ##   Engine: JString
  ##         : The database engine to return.
  ##   EngineVersion: JString
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   Action: JString (required)
  ##   ListSupportedCharacterSets: JBool
  ##                             : If this parameter is specified and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version.
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : Not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DefaultOnly: JBool
  ##              : Indicates that only the default version of the specified engine or engine and major version combination is returned.
  section = newJObject()
  var valid_614352 = query.getOrDefault("Marker")
  valid_614352 = validateParameter(valid_614352, JString, required = false,
                                 default = nil)
  if valid_614352 != nil:
    section.add "Marker", valid_614352
  var valid_614353 = query.getOrDefault("ListSupportedTimezones")
  valid_614353 = validateParameter(valid_614353, JBool, required = false, default = nil)
  if valid_614353 != nil:
    section.add "ListSupportedTimezones", valid_614353
  var valid_614354 = query.getOrDefault("DBParameterGroupFamily")
  valid_614354 = validateParameter(valid_614354, JString, required = false,
                                 default = nil)
  if valid_614354 != nil:
    section.add "DBParameterGroupFamily", valid_614354
  var valid_614355 = query.getOrDefault("Engine")
  valid_614355 = validateParameter(valid_614355, JString, required = false,
                                 default = nil)
  if valid_614355 != nil:
    section.add "Engine", valid_614355
  var valid_614356 = query.getOrDefault("EngineVersion")
  valid_614356 = validateParameter(valid_614356, JString, required = false,
                                 default = nil)
  if valid_614356 != nil:
    section.add "EngineVersion", valid_614356
  var valid_614357 = query.getOrDefault("Action")
  valid_614357 = validateParameter(valid_614357, JString, required = true, default = newJString(
      "DescribeDBEngineVersions"))
  if valid_614357 != nil:
    section.add "Action", valid_614357
  var valid_614358 = query.getOrDefault("ListSupportedCharacterSets")
  valid_614358 = validateParameter(valid_614358, JBool, required = false, default = nil)
  if valid_614358 != nil:
    section.add "ListSupportedCharacterSets", valid_614358
  var valid_614359 = query.getOrDefault("Version")
  valid_614359 = validateParameter(valid_614359, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614359 != nil:
    section.add "Version", valid_614359
  var valid_614360 = query.getOrDefault("Filters")
  valid_614360 = validateParameter(valid_614360, JArray, required = false,
                                 default = nil)
  if valid_614360 != nil:
    section.add "Filters", valid_614360
  var valid_614361 = query.getOrDefault("MaxRecords")
  valid_614361 = validateParameter(valid_614361, JInt, required = false, default = nil)
  if valid_614361 != nil:
    section.add "MaxRecords", valid_614361
  var valid_614362 = query.getOrDefault("DefaultOnly")
  valid_614362 = validateParameter(valid_614362, JBool, required = false, default = nil)
  if valid_614362 != nil:
    section.add "DefaultOnly", valid_614362
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614363 = header.getOrDefault("X-Amz-Signature")
  valid_614363 = validateParameter(valid_614363, JString, required = false,
                                 default = nil)
  if valid_614363 != nil:
    section.add "X-Amz-Signature", valid_614363
  var valid_614364 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614364 = validateParameter(valid_614364, JString, required = false,
                                 default = nil)
  if valid_614364 != nil:
    section.add "X-Amz-Content-Sha256", valid_614364
  var valid_614365 = header.getOrDefault("X-Amz-Date")
  valid_614365 = validateParameter(valid_614365, JString, required = false,
                                 default = nil)
  if valid_614365 != nil:
    section.add "X-Amz-Date", valid_614365
  var valid_614366 = header.getOrDefault("X-Amz-Credential")
  valid_614366 = validateParameter(valid_614366, JString, required = false,
                                 default = nil)
  if valid_614366 != nil:
    section.add "X-Amz-Credential", valid_614366
  var valid_614367 = header.getOrDefault("X-Amz-Security-Token")
  valid_614367 = validateParameter(valid_614367, JString, required = false,
                                 default = nil)
  if valid_614367 != nil:
    section.add "X-Amz-Security-Token", valid_614367
  var valid_614368 = header.getOrDefault("X-Amz-Algorithm")
  valid_614368 = validateParameter(valid_614368, JString, required = false,
                                 default = nil)
  if valid_614368 != nil:
    section.add "X-Amz-Algorithm", valid_614368
  var valid_614369 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614369 = validateParameter(valid_614369, JString, required = false,
                                 default = nil)
  if valid_614369 != nil:
    section.add "X-Amz-SignedHeaders", valid_614369
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614370: Call_GetDescribeDBEngineVersions_614349; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the available DB engines.
  ## 
  let valid = call_614370.validator(path, query, header, formData, body)
  let scheme = call_614370.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614370.url(scheme.get, call_614370.host, call_614370.base,
                         call_614370.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614370, url, valid)

proc call*(call_614371: Call_GetDescribeDBEngineVersions_614349;
          Marker: string = ""; ListSupportedTimezones: bool = false;
          DBParameterGroupFamily: string = ""; Engine: string = "";
          EngineVersion: string = ""; Action: string = "DescribeDBEngineVersions";
          ListSupportedCharacterSets: bool = false; Version: string = "2014-10-31";
          Filters: JsonNode = nil; MaxRecords: int = 0; DefaultOnly: bool = false): Recallable =
  ## getDescribeDBEngineVersions
  ## Returns a list of the available DB engines.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ListSupportedTimezones: bool
  ##                         : If this parameter is specified and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version.
  ##   DBParameterGroupFamily: string
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  ##   Engine: string
  ##         : The database engine to return.
  ##   EngineVersion: string
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   Action: string (required)
  ##   ListSupportedCharacterSets: bool
  ##                             : If this parameter is specified and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version.
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : Not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DefaultOnly: bool
  ##              : Indicates that only the default version of the specified engine or engine and major version combination is returned.
  var query_614372 = newJObject()
  add(query_614372, "Marker", newJString(Marker))
  add(query_614372, "ListSupportedTimezones", newJBool(ListSupportedTimezones))
  add(query_614372, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  add(query_614372, "Engine", newJString(Engine))
  add(query_614372, "EngineVersion", newJString(EngineVersion))
  add(query_614372, "Action", newJString(Action))
  add(query_614372, "ListSupportedCharacterSets",
      newJBool(ListSupportedCharacterSets))
  add(query_614372, "Version", newJString(Version))
  if Filters != nil:
    query_614372.add "Filters", Filters
  add(query_614372, "MaxRecords", newJInt(MaxRecords))
  add(query_614372, "DefaultOnly", newJBool(DefaultOnly))
  result = call_614371.call(nil, query_614372, nil, nil, nil)

var getDescribeDBEngineVersions* = Call_GetDescribeDBEngineVersions_614349(
    name: "getDescribeDBEngineVersions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBEngineVersions",
    validator: validate_GetDescribeDBEngineVersions_614350, base: "/",
    url: url_GetDescribeDBEngineVersions_614351,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBInstances_614417 = ref object of OpenApiRestCall_612642
proc url_PostDescribeDBInstances_614419(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBInstances_614418(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about provisioned instances. This API supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614420 = query.getOrDefault("Action")
  valid_614420 = validateParameter(valid_614420, JString, required = true,
                                 default = newJString("DescribeDBInstances"))
  if valid_614420 != nil:
    section.add "Action", valid_614420
  var valid_614421 = query.getOrDefault("Version")
  valid_614421 = validateParameter(valid_614421, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614421 != nil:
    section.add "Version", valid_614421
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614422 = header.getOrDefault("X-Amz-Signature")
  valid_614422 = validateParameter(valid_614422, JString, required = false,
                                 default = nil)
  if valid_614422 != nil:
    section.add "X-Amz-Signature", valid_614422
  var valid_614423 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614423 = validateParameter(valid_614423, JString, required = false,
                                 default = nil)
  if valid_614423 != nil:
    section.add "X-Amz-Content-Sha256", valid_614423
  var valid_614424 = header.getOrDefault("X-Amz-Date")
  valid_614424 = validateParameter(valid_614424, JString, required = false,
                                 default = nil)
  if valid_614424 != nil:
    section.add "X-Amz-Date", valid_614424
  var valid_614425 = header.getOrDefault("X-Amz-Credential")
  valid_614425 = validateParameter(valid_614425, JString, required = false,
                                 default = nil)
  if valid_614425 != nil:
    section.add "X-Amz-Credential", valid_614425
  var valid_614426 = header.getOrDefault("X-Amz-Security-Token")
  valid_614426 = validateParameter(valid_614426, JString, required = false,
                                 default = nil)
  if valid_614426 != nil:
    section.add "X-Amz-Security-Token", valid_614426
  var valid_614427 = header.getOrDefault("X-Amz-Algorithm")
  valid_614427 = validateParameter(valid_614427, JString, required = false,
                                 default = nil)
  if valid_614427 != nil:
    section.add "X-Amz-Algorithm", valid_614427
  var valid_614428 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614428 = validateParameter(valid_614428, JString, required = false,
                                 default = nil)
  if valid_614428 != nil:
    section.add "X-Amz-SignedHeaders", valid_614428
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBInstanceIdentifier: JString
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> </ul>
  section = newJObject()
  var valid_614429 = formData.getOrDefault("MaxRecords")
  valid_614429 = validateParameter(valid_614429, JInt, required = false, default = nil)
  if valid_614429 != nil:
    section.add "MaxRecords", valid_614429
  var valid_614430 = formData.getOrDefault("Marker")
  valid_614430 = validateParameter(valid_614430, JString, required = false,
                                 default = nil)
  if valid_614430 != nil:
    section.add "Marker", valid_614430
  var valid_614431 = formData.getOrDefault("DBInstanceIdentifier")
  valid_614431 = validateParameter(valid_614431, JString, required = false,
                                 default = nil)
  if valid_614431 != nil:
    section.add "DBInstanceIdentifier", valid_614431
  var valid_614432 = formData.getOrDefault("Filters")
  valid_614432 = validateParameter(valid_614432, JArray, required = false,
                                 default = nil)
  if valid_614432 != nil:
    section.add "Filters", valid_614432
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614433: Call_PostDescribeDBInstances_614417; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about provisioned instances. This API supports pagination.
  ## 
  let valid = call_614433.validator(path, query, header, formData, body)
  let scheme = call_614433.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614433.url(scheme.get, call_614433.host, call_614433.base,
                         call_614433.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614433, url, valid)

proc call*(call_614434: Call_PostDescribeDBInstances_614417; MaxRecords: int = 0;
          Marker: string = ""; DBInstanceIdentifier: string = "";
          Action: string = "DescribeDBInstances"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBInstances
  ## Returns information about provisioned instances. This API supports pagination.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBInstanceIdentifier: string
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> </ul>
  ##   Version: string (required)
  var query_614435 = newJObject()
  var formData_614436 = newJObject()
  add(formData_614436, "MaxRecords", newJInt(MaxRecords))
  add(formData_614436, "Marker", newJString(Marker))
  add(formData_614436, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_614435, "Action", newJString(Action))
  if Filters != nil:
    formData_614436.add "Filters", Filters
  add(query_614435, "Version", newJString(Version))
  result = call_614434.call(nil, query_614435, nil, formData_614436, nil)

var postDescribeDBInstances* = Call_PostDescribeDBInstances_614417(
    name: "postDescribeDBInstances", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBInstances",
    validator: validate_PostDescribeDBInstances_614418, base: "/",
    url: url_PostDescribeDBInstances_614419, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBInstances_614398 = ref object of OpenApiRestCall_612642
proc url_GetDescribeDBInstances_614400(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBInstances_614399(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about provisioned instances. This API supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBInstanceIdentifier: JString
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_614401 = query.getOrDefault("Marker")
  valid_614401 = validateParameter(valid_614401, JString, required = false,
                                 default = nil)
  if valid_614401 != nil:
    section.add "Marker", valid_614401
  var valid_614402 = query.getOrDefault("DBInstanceIdentifier")
  valid_614402 = validateParameter(valid_614402, JString, required = false,
                                 default = nil)
  if valid_614402 != nil:
    section.add "DBInstanceIdentifier", valid_614402
  var valid_614403 = query.getOrDefault("Action")
  valid_614403 = validateParameter(valid_614403, JString, required = true,
                                 default = newJString("DescribeDBInstances"))
  if valid_614403 != nil:
    section.add "Action", valid_614403
  var valid_614404 = query.getOrDefault("Version")
  valid_614404 = validateParameter(valid_614404, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614404 != nil:
    section.add "Version", valid_614404
  var valid_614405 = query.getOrDefault("Filters")
  valid_614405 = validateParameter(valid_614405, JArray, required = false,
                                 default = nil)
  if valid_614405 != nil:
    section.add "Filters", valid_614405
  var valid_614406 = query.getOrDefault("MaxRecords")
  valid_614406 = validateParameter(valid_614406, JInt, required = false, default = nil)
  if valid_614406 != nil:
    section.add "MaxRecords", valid_614406
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614407 = header.getOrDefault("X-Amz-Signature")
  valid_614407 = validateParameter(valid_614407, JString, required = false,
                                 default = nil)
  if valid_614407 != nil:
    section.add "X-Amz-Signature", valid_614407
  var valid_614408 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614408 = validateParameter(valid_614408, JString, required = false,
                                 default = nil)
  if valid_614408 != nil:
    section.add "X-Amz-Content-Sha256", valid_614408
  var valid_614409 = header.getOrDefault("X-Amz-Date")
  valid_614409 = validateParameter(valid_614409, JString, required = false,
                                 default = nil)
  if valid_614409 != nil:
    section.add "X-Amz-Date", valid_614409
  var valid_614410 = header.getOrDefault("X-Amz-Credential")
  valid_614410 = validateParameter(valid_614410, JString, required = false,
                                 default = nil)
  if valid_614410 != nil:
    section.add "X-Amz-Credential", valid_614410
  var valid_614411 = header.getOrDefault("X-Amz-Security-Token")
  valid_614411 = validateParameter(valid_614411, JString, required = false,
                                 default = nil)
  if valid_614411 != nil:
    section.add "X-Amz-Security-Token", valid_614411
  var valid_614412 = header.getOrDefault("X-Amz-Algorithm")
  valid_614412 = validateParameter(valid_614412, JString, required = false,
                                 default = nil)
  if valid_614412 != nil:
    section.add "X-Amz-Algorithm", valid_614412
  var valid_614413 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614413 = validateParameter(valid_614413, JString, required = false,
                                 default = nil)
  if valid_614413 != nil:
    section.add "X-Amz-SignedHeaders", valid_614413
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614414: Call_GetDescribeDBInstances_614398; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about provisioned instances. This API supports pagination.
  ## 
  let valid = call_614414.validator(path, query, header, formData, body)
  let scheme = call_614414.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614414.url(scheme.get, call_614414.host, call_614414.base,
                         call_614414.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614414, url, valid)

proc call*(call_614415: Call_GetDescribeDBInstances_614398; Marker: string = "";
          DBInstanceIdentifier: string = ""; Action: string = "DescribeDBInstances";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBInstances
  ## Returns information about provisioned instances. This API supports pagination.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBInstanceIdentifier: string
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_614416 = newJObject()
  add(query_614416, "Marker", newJString(Marker))
  add(query_614416, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_614416, "Action", newJString(Action))
  add(query_614416, "Version", newJString(Version))
  if Filters != nil:
    query_614416.add "Filters", Filters
  add(query_614416, "MaxRecords", newJInt(MaxRecords))
  result = call_614415.call(nil, query_614416, nil, nil, nil)

var getDescribeDBInstances* = Call_GetDescribeDBInstances_614398(
    name: "getDescribeDBInstances", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBInstances",
    validator: validate_GetDescribeDBInstances_614399, base: "/",
    url: url_GetDescribeDBInstances_614400, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBParameterGroups_614456 = ref object of OpenApiRestCall_612642
proc url_PostDescribeDBParameterGroups_614458(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBParameterGroups_614457(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614459 = query.getOrDefault("Action")
  valid_614459 = validateParameter(valid_614459, JString, required = true, default = newJString(
      "DescribeDBParameterGroups"))
  if valid_614459 != nil:
    section.add "Action", valid_614459
  var valid_614460 = query.getOrDefault("Version")
  valid_614460 = validateParameter(valid_614460, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614460 != nil:
    section.add "Version", valid_614460
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614461 = header.getOrDefault("X-Amz-Signature")
  valid_614461 = validateParameter(valid_614461, JString, required = false,
                                 default = nil)
  if valid_614461 != nil:
    section.add "X-Amz-Signature", valid_614461
  var valid_614462 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614462 = validateParameter(valid_614462, JString, required = false,
                                 default = nil)
  if valid_614462 != nil:
    section.add "X-Amz-Content-Sha256", valid_614462
  var valid_614463 = header.getOrDefault("X-Amz-Date")
  valid_614463 = validateParameter(valid_614463, JString, required = false,
                                 default = nil)
  if valid_614463 != nil:
    section.add "X-Amz-Date", valid_614463
  var valid_614464 = header.getOrDefault("X-Amz-Credential")
  valid_614464 = validateParameter(valid_614464, JString, required = false,
                                 default = nil)
  if valid_614464 != nil:
    section.add "X-Amz-Credential", valid_614464
  var valid_614465 = header.getOrDefault("X-Amz-Security-Token")
  valid_614465 = validateParameter(valid_614465, JString, required = false,
                                 default = nil)
  if valid_614465 != nil:
    section.add "X-Amz-Security-Token", valid_614465
  var valid_614466 = header.getOrDefault("X-Amz-Algorithm")
  valid_614466 = validateParameter(valid_614466, JString, required = false,
                                 default = nil)
  if valid_614466 != nil:
    section.add "X-Amz-Algorithm", valid_614466
  var valid_614467 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614467 = validateParameter(valid_614467, JString, required = false,
                                 default = nil)
  if valid_614467 != nil:
    section.add "X-Amz-SignedHeaders", valid_614467
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_614468 = formData.getOrDefault("MaxRecords")
  valid_614468 = validateParameter(valid_614468, JInt, required = false, default = nil)
  if valid_614468 != nil:
    section.add "MaxRecords", valid_614468
  var valid_614469 = formData.getOrDefault("DBParameterGroupName")
  valid_614469 = validateParameter(valid_614469, JString, required = false,
                                 default = nil)
  if valid_614469 != nil:
    section.add "DBParameterGroupName", valid_614469
  var valid_614470 = formData.getOrDefault("Marker")
  valid_614470 = validateParameter(valid_614470, JString, required = false,
                                 default = nil)
  if valid_614470 != nil:
    section.add "Marker", valid_614470
  var valid_614471 = formData.getOrDefault("Filters")
  valid_614471 = validateParameter(valid_614471, JArray, required = false,
                                 default = nil)
  if valid_614471 != nil:
    section.add "Filters", valid_614471
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614472: Call_PostDescribeDBParameterGroups_614456; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group.
  ## 
  let valid = call_614472.validator(path, query, header, formData, body)
  let scheme = call_614472.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614472.url(scheme.get, call_614472.host, call_614472.base,
                         call_614472.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614472, url, valid)

proc call*(call_614473: Call_PostDescribeDBParameterGroups_614456;
          MaxRecords: int = 0; DBParameterGroupName: string = ""; Marker: string = "";
          Action: string = "DescribeDBParameterGroups"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBParameterGroups
  ## Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_614474 = newJObject()
  var formData_614475 = newJObject()
  add(formData_614475, "MaxRecords", newJInt(MaxRecords))
  add(formData_614475, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_614475, "Marker", newJString(Marker))
  add(query_614474, "Action", newJString(Action))
  if Filters != nil:
    formData_614475.add "Filters", Filters
  add(query_614474, "Version", newJString(Version))
  result = call_614473.call(nil, query_614474, nil, formData_614475, nil)

var postDescribeDBParameterGroups* = Call_PostDescribeDBParameterGroups_614456(
    name: "postDescribeDBParameterGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameterGroups",
    validator: validate_PostDescribeDBParameterGroups_614457, base: "/",
    url: url_PostDescribeDBParameterGroups_614458,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBParameterGroups_614437 = ref object of OpenApiRestCall_612642
proc url_GetDescribeDBParameterGroups_614439(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBParameterGroups_614438(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_614440 = query.getOrDefault("Marker")
  valid_614440 = validateParameter(valid_614440, JString, required = false,
                                 default = nil)
  if valid_614440 != nil:
    section.add "Marker", valid_614440
  var valid_614441 = query.getOrDefault("DBParameterGroupName")
  valid_614441 = validateParameter(valid_614441, JString, required = false,
                                 default = nil)
  if valid_614441 != nil:
    section.add "DBParameterGroupName", valid_614441
  var valid_614442 = query.getOrDefault("Action")
  valid_614442 = validateParameter(valid_614442, JString, required = true, default = newJString(
      "DescribeDBParameterGroups"))
  if valid_614442 != nil:
    section.add "Action", valid_614442
  var valid_614443 = query.getOrDefault("Version")
  valid_614443 = validateParameter(valid_614443, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614443 != nil:
    section.add "Version", valid_614443
  var valid_614444 = query.getOrDefault("Filters")
  valid_614444 = validateParameter(valid_614444, JArray, required = false,
                                 default = nil)
  if valid_614444 != nil:
    section.add "Filters", valid_614444
  var valid_614445 = query.getOrDefault("MaxRecords")
  valid_614445 = validateParameter(valid_614445, JInt, required = false, default = nil)
  if valid_614445 != nil:
    section.add "MaxRecords", valid_614445
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614446 = header.getOrDefault("X-Amz-Signature")
  valid_614446 = validateParameter(valid_614446, JString, required = false,
                                 default = nil)
  if valid_614446 != nil:
    section.add "X-Amz-Signature", valid_614446
  var valid_614447 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614447 = validateParameter(valid_614447, JString, required = false,
                                 default = nil)
  if valid_614447 != nil:
    section.add "X-Amz-Content-Sha256", valid_614447
  var valid_614448 = header.getOrDefault("X-Amz-Date")
  valid_614448 = validateParameter(valid_614448, JString, required = false,
                                 default = nil)
  if valid_614448 != nil:
    section.add "X-Amz-Date", valid_614448
  var valid_614449 = header.getOrDefault("X-Amz-Credential")
  valid_614449 = validateParameter(valid_614449, JString, required = false,
                                 default = nil)
  if valid_614449 != nil:
    section.add "X-Amz-Credential", valid_614449
  var valid_614450 = header.getOrDefault("X-Amz-Security-Token")
  valid_614450 = validateParameter(valid_614450, JString, required = false,
                                 default = nil)
  if valid_614450 != nil:
    section.add "X-Amz-Security-Token", valid_614450
  var valid_614451 = header.getOrDefault("X-Amz-Algorithm")
  valid_614451 = validateParameter(valid_614451, JString, required = false,
                                 default = nil)
  if valid_614451 != nil:
    section.add "X-Amz-Algorithm", valid_614451
  var valid_614452 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614452 = validateParameter(valid_614452, JString, required = false,
                                 default = nil)
  if valid_614452 != nil:
    section.add "X-Amz-SignedHeaders", valid_614452
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614453: Call_GetDescribeDBParameterGroups_614437; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group.
  ## 
  let valid = call_614453.validator(path, query, header, formData, body)
  let scheme = call_614453.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614453.url(scheme.get, call_614453.host, call_614453.base,
                         call_614453.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614453, url, valid)

proc call*(call_614454: Call_GetDescribeDBParameterGroups_614437;
          Marker: string = ""; DBParameterGroupName: string = "";
          Action: string = "DescribeDBParameterGroups";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBParameterGroups
  ## Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group.
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBParameterGroupName: string
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_614455 = newJObject()
  add(query_614455, "Marker", newJString(Marker))
  add(query_614455, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_614455, "Action", newJString(Action))
  add(query_614455, "Version", newJString(Version))
  if Filters != nil:
    query_614455.add "Filters", Filters
  add(query_614455, "MaxRecords", newJInt(MaxRecords))
  result = call_614454.call(nil, query_614455, nil, nil, nil)

var getDescribeDBParameterGroups* = Call_GetDescribeDBParameterGroups_614437(
    name: "getDescribeDBParameterGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameterGroups",
    validator: validate_GetDescribeDBParameterGroups_614438, base: "/",
    url: url_GetDescribeDBParameterGroups_614439,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBParameters_614496 = ref object of OpenApiRestCall_612642
proc url_PostDescribeDBParameters_614498(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBParameters_614497(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614499 = query.getOrDefault("Action")
  valid_614499 = validateParameter(valid_614499, JString, required = true,
                                 default = newJString("DescribeDBParameters"))
  if valid_614499 != nil:
    section.add "Action", valid_614499
  var valid_614500 = query.getOrDefault("Version")
  valid_614500 = validateParameter(valid_614500, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614500 != nil:
    section.add "Version", valid_614500
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614501 = header.getOrDefault("X-Amz-Signature")
  valid_614501 = validateParameter(valid_614501, JString, required = false,
                                 default = nil)
  if valid_614501 != nil:
    section.add "X-Amz-Signature", valid_614501
  var valid_614502 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614502 = validateParameter(valid_614502, JString, required = false,
                                 default = nil)
  if valid_614502 != nil:
    section.add "X-Amz-Content-Sha256", valid_614502
  var valid_614503 = header.getOrDefault("X-Amz-Date")
  valid_614503 = validateParameter(valid_614503, JString, required = false,
                                 default = nil)
  if valid_614503 != nil:
    section.add "X-Amz-Date", valid_614503
  var valid_614504 = header.getOrDefault("X-Amz-Credential")
  valid_614504 = validateParameter(valid_614504, JString, required = false,
                                 default = nil)
  if valid_614504 != nil:
    section.add "X-Amz-Credential", valid_614504
  var valid_614505 = header.getOrDefault("X-Amz-Security-Token")
  valid_614505 = validateParameter(valid_614505, JString, required = false,
                                 default = nil)
  if valid_614505 != nil:
    section.add "X-Amz-Security-Token", valid_614505
  var valid_614506 = header.getOrDefault("X-Amz-Algorithm")
  valid_614506 = validateParameter(valid_614506, JString, required = false,
                                 default = nil)
  if valid_614506 != nil:
    section.add "X-Amz-Algorithm", valid_614506
  var valid_614507 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614507 = validateParameter(valid_614507, JString, required = false,
                                 default = nil)
  if valid_614507 != nil:
    section.add "X-Amz-SignedHeaders", valid_614507
  result.add "header", section
  ## parameters in `formData` object:
  ##   Source: JString
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_614508 = formData.getOrDefault("Source")
  valid_614508 = validateParameter(valid_614508, JString, required = false,
                                 default = nil)
  if valid_614508 != nil:
    section.add "Source", valid_614508
  var valid_614509 = formData.getOrDefault("MaxRecords")
  valid_614509 = validateParameter(valid_614509, JInt, required = false, default = nil)
  if valid_614509 != nil:
    section.add "MaxRecords", valid_614509
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_614510 = formData.getOrDefault("DBParameterGroupName")
  valid_614510 = validateParameter(valid_614510, JString, required = true,
                                 default = nil)
  if valid_614510 != nil:
    section.add "DBParameterGroupName", valid_614510
  var valid_614511 = formData.getOrDefault("Marker")
  valid_614511 = validateParameter(valid_614511, JString, required = false,
                                 default = nil)
  if valid_614511 != nil:
    section.add "Marker", valid_614511
  var valid_614512 = formData.getOrDefault("Filters")
  valid_614512 = validateParameter(valid_614512, JArray, required = false,
                                 default = nil)
  if valid_614512 != nil:
    section.add "Filters", valid_614512
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614513: Call_PostDescribeDBParameters_614496; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  let valid = call_614513.validator(path, query, header, formData, body)
  let scheme = call_614513.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614513.url(scheme.get, call_614513.host, call_614513.base,
                         call_614513.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614513, url, valid)

proc call*(call_614514: Call_PostDescribeDBParameters_614496;
          DBParameterGroupName: string; Source: string = ""; MaxRecords: int = 0;
          Marker: string = ""; Action: string = "DescribeDBParameters";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBParameters
  ## Returns the detailed parameter list for a particular DB parameter group.
  ##   Source: string
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_614515 = newJObject()
  var formData_614516 = newJObject()
  add(formData_614516, "Source", newJString(Source))
  add(formData_614516, "MaxRecords", newJInt(MaxRecords))
  add(formData_614516, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_614516, "Marker", newJString(Marker))
  add(query_614515, "Action", newJString(Action))
  if Filters != nil:
    formData_614516.add "Filters", Filters
  add(query_614515, "Version", newJString(Version))
  result = call_614514.call(nil, query_614515, nil, formData_614516, nil)

var postDescribeDBParameters* = Call_PostDescribeDBParameters_614496(
    name: "postDescribeDBParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameters",
    validator: validate_PostDescribeDBParameters_614497, base: "/",
    url: url_PostDescribeDBParameters_614498, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBParameters_614476 = ref object of OpenApiRestCall_612642
proc url_GetDescribeDBParameters_614478(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBParameters_614477(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Source: JString
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_614479 = query.getOrDefault("Marker")
  valid_614479 = validateParameter(valid_614479, JString, required = false,
                                 default = nil)
  if valid_614479 != nil:
    section.add "Marker", valid_614479
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_614480 = query.getOrDefault("DBParameterGroupName")
  valid_614480 = validateParameter(valid_614480, JString, required = true,
                                 default = nil)
  if valid_614480 != nil:
    section.add "DBParameterGroupName", valid_614480
  var valid_614481 = query.getOrDefault("Source")
  valid_614481 = validateParameter(valid_614481, JString, required = false,
                                 default = nil)
  if valid_614481 != nil:
    section.add "Source", valid_614481
  var valid_614482 = query.getOrDefault("Action")
  valid_614482 = validateParameter(valid_614482, JString, required = true,
                                 default = newJString("DescribeDBParameters"))
  if valid_614482 != nil:
    section.add "Action", valid_614482
  var valid_614483 = query.getOrDefault("Version")
  valid_614483 = validateParameter(valid_614483, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614483 != nil:
    section.add "Version", valid_614483
  var valid_614484 = query.getOrDefault("Filters")
  valid_614484 = validateParameter(valid_614484, JArray, required = false,
                                 default = nil)
  if valid_614484 != nil:
    section.add "Filters", valid_614484
  var valid_614485 = query.getOrDefault("MaxRecords")
  valid_614485 = validateParameter(valid_614485, JInt, required = false, default = nil)
  if valid_614485 != nil:
    section.add "MaxRecords", valid_614485
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614486 = header.getOrDefault("X-Amz-Signature")
  valid_614486 = validateParameter(valid_614486, JString, required = false,
                                 default = nil)
  if valid_614486 != nil:
    section.add "X-Amz-Signature", valid_614486
  var valid_614487 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614487 = validateParameter(valid_614487, JString, required = false,
                                 default = nil)
  if valid_614487 != nil:
    section.add "X-Amz-Content-Sha256", valid_614487
  var valid_614488 = header.getOrDefault("X-Amz-Date")
  valid_614488 = validateParameter(valid_614488, JString, required = false,
                                 default = nil)
  if valid_614488 != nil:
    section.add "X-Amz-Date", valid_614488
  var valid_614489 = header.getOrDefault("X-Amz-Credential")
  valid_614489 = validateParameter(valid_614489, JString, required = false,
                                 default = nil)
  if valid_614489 != nil:
    section.add "X-Amz-Credential", valid_614489
  var valid_614490 = header.getOrDefault("X-Amz-Security-Token")
  valid_614490 = validateParameter(valid_614490, JString, required = false,
                                 default = nil)
  if valid_614490 != nil:
    section.add "X-Amz-Security-Token", valid_614490
  var valid_614491 = header.getOrDefault("X-Amz-Algorithm")
  valid_614491 = validateParameter(valid_614491, JString, required = false,
                                 default = nil)
  if valid_614491 != nil:
    section.add "X-Amz-Algorithm", valid_614491
  var valid_614492 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614492 = validateParameter(valid_614492, JString, required = false,
                                 default = nil)
  if valid_614492 != nil:
    section.add "X-Amz-SignedHeaders", valid_614492
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614493: Call_GetDescribeDBParameters_614476; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  let valid = call_614493.validator(path, query, header, formData, body)
  let scheme = call_614493.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614493.url(scheme.get, call_614493.host, call_614493.base,
                         call_614493.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614493, url, valid)

proc call*(call_614494: Call_GetDescribeDBParameters_614476;
          DBParameterGroupName: string; Marker: string = ""; Source: string = "";
          Action: string = "DescribeDBParameters"; Version: string = "2014-10-31";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBParameters
  ## Returns the detailed parameter list for a particular DB parameter group.
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Source: string
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_614495 = newJObject()
  add(query_614495, "Marker", newJString(Marker))
  add(query_614495, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_614495, "Source", newJString(Source))
  add(query_614495, "Action", newJString(Action))
  add(query_614495, "Version", newJString(Version))
  if Filters != nil:
    query_614495.add "Filters", Filters
  add(query_614495, "MaxRecords", newJInt(MaxRecords))
  result = call_614494.call(nil, query_614495, nil, nil, nil)

var getDescribeDBParameters* = Call_GetDescribeDBParameters_614476(
    name: "getDescribeDBParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameters",
    validator: validate_GetDescribeDBParameters_614477, base: "/",
    url: url_GetDescribeDBParameters_614478, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBSubnetGroups_614536 = ref object of OpenApiRestCall_612642
proc url_PostDescribeDBSubnetGroups_614538(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBSubnetGroups_614537(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614539 = query.getOrDefault("Action")
  valid_614539 = validateParameter(valid_614539, JString, required = true,
                                 default = newJString("DescribeDBSubnetGroups"))
  if valid_614539 != nil:
    section.add "Action", valid_614539
  var valid_614540 = query.getOrDefault("Version")
  valid_614540 = validateParameter(valid_614540, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614540 != nil:
    section.add "Version", valid_614540
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614541 = header.getOrDefault("X-Amz-Signature")
  valid_614541 = validateParameter(valid_614541, JString, required = false,
                                 default = nil)
  if valid_614541 != nil:
    section.add "X-Amz-Signature", valid_614541
  var valid_614542 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614542 = validateParameter(valid_614542, JString, required = false,
                                 default = nil)
  if valid_614542 != nil:
    section.add "X-Amz-Content-Sha256", valid_614542
  var valid_614543 = header.getOrDefault("X-Amz-Date")
  valid_614543 = validateParameter(valid_614543, JString, required = false,
                                 default = nil)
  if valid_614543 != nil:
    section.add "X-Amz-Date", valid_614543
  var valid_614544 = header.getOrDefault("X-Amz-Credential")
  valid_614544 = validateParameter(valid_614544, JString, required = false,
                                 default = nil)
  if valid_614544 != nil:
    section.add "X-Amz-Credential", valid_614544
  var valid_614545 = header.getOrDefault("X-Amz-Security-Token")
  valid_614545 = validateParameter(valid_614545, JString, required = false,
                                 default = nil)
  if valid_614545 != nil:
    section.add "X-Amz-Security-Token", valid_614545
  var valid_614546 = header.getOrDefault("X-Amz-Algorithm")
  valid_614546 = validateParameter(valid_614546, JString, required = false,
                                 default = nil)
  if valid_614546 != nil:
    section.add "X-Amz-Algorithm", valid_614546
  var valid_614547 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614547 = validateParameter(valid_614547, JString, required = false,
                                 default = nil)
  if valid_614547 != nil:
    section.add "X-Amz-SignedHeaders", valid_614547
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBSubnetGroupName: JString
  ##                    : The name of the DB subnet group to return details for.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_614548 = formData.getOrDefault("MaxRecords")
  valid_614548 = validateParameter(valid_614548, JInt, required = false, default = nil)
  if valid_614548 != nil:
    section.add "MaxRecords", valid_614548
  var valid_614549 = formData.getOrDefault("Marker")
  valid_614549 = validateParameter(valid_614549, JString, required = false,
                                 default = nil)
  if valid_614549 != nil:
    section.add "Marker", valid_614549
  var valid_614550 = formData.getOrDefault("DBSubnetGroupName")
  valid_614550 = validateParameter(valid_614550, JString, required = false,
                                 default = nil)
  if valid_614550 != nil:
    section.add "DBSubnetGroupName", valid_614550
  var valid_614551 = formData.getOrDefault("Filters")
  valid_614551 = validateParameter(valid_614551, JArray, required = false,
                                 default = nil)
  if valid_614551 != nil:
    section.add "Filters", valid_614551
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614552: Call_PostDescribeDBSubnetGroups_614536; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>.</p>
  ## 
  let valid = call_614552.validator(path, query, header, formData, body)
  let scheme = call_614552.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614552.url(scheme.get, call_614552.host, call_614552.base,
                         call_614552.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614552, url, valid)

proc call*(call_614553: Call_PostDescribeDBSubnetGroups_614536;
          MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeDBSubnetGroups"; DBSubnetGroupName: string = "";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBSubnetGroups
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>.</p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   DBSubnetGroupName: string
  ##                    : The name of the DB subnet group to return details for.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_614554 = newJObject()
  var formData_614555 = newJObject()
  add(formData_614555, "MaxRecords", newJInt(MaxRecords))
  add(formData_614555, "Marker", newJString(Marker))
  add(query_614554, "Action", newJString(Action))
  add(formData_614555, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  if Filters != nil:
    formData_614555.add "Filters", Filters
  add(query_614554, "Version", newJString(Version))
  result = call_614553.call(nil, query_614554, nil, formData_614555, nil)

var postDescribeDBSubnetGroups* = Call_PostDescribeDBSubnetGroups_614536(
    name: "postDescribeDBSubnetGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSubnetGroups",
    validator: validate_PostDescribeDBSubnetGroups_614537, base: "/",
    url: url_PostDescribeDBSubnetGroups_614538,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBSubnetGroups_614517 = ref object of OpenApiRestCall_612642
proc url_GetDescribeDBSubnetGroups_614519(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBSubnetGroups_614518(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString
  ##                    : The name of the DB subnet group to return details for.
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_614520 = query.getOrDefault("Marker")
  valid_614520 = validateParameter(valid_614520, JString, required = false,
                                 default = nil)
  if valid_614520 != nil:
    section.add "Marker", valid_614520
  var valid_614521 = query.getOrDefault("Action")
  valid_614521 = validateParameter(valid_614521, JString, required = true,
                                 default = newJString("DescribeDBSubnetGroups"))
  if valid_614521 != nil:
    section.add "Action", valid_614521
  var valid_614522 = query.getOrDefault("DBSubnetGroupName")
  valid_614522 = validateParameter(valid_614522, JString, required = false,
                                 default = nil)
  if valid_614522 != nil:
    section.add "DBSubnetGroupName", valid_614522
  var valid_614523 = query.getOrDefault("Version")
  valid_614523 = validateParameter(valid_614523, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614523 != nil:
    section.add "Version", valid_614523
  var valid_614524 = query.getOrDefault("Filters")
  valid_614524 = validateParameter(valid_614524, JArray, required = false,
                                 default = nil)
  if valid_614524 != nil:
    section.add "Filters", valid_614524
  var valid_614525 = query.getOrDefault("MaxRecords")
  valid_614525 = validateParameter(valid_614525, JInt, required = false, default = nil)
  if valid_614525 != nil:
    section.add "MaxRecords", valid_614525
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614526 = header.getOrDefault("X-Amz-Signature")
  valid_614526 = validateParameter(valid_614526, JString, required = false,
                                 default = nil)
  if valid_614526 != nil:
    section.add "X-Amz-Signature", valid_614526
  var valid_614527 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614527 = validateParameter(valid_614527, JString, required = false,
                                 default = nil)
  if valid_614527 != nil:
    section.add "X-Amz-Content-Sha256", valid_614527
  var valid_614528 = header.getOrDefault("X-Amz-Date")
  valid_614528 = validateParameter(valid_614528, JString, required = false,
                                 default = nil)
  if valid_614528 != nil:
    section.add "X-Amz-Date", valid_614528
  var valid_614529 = header.getOrDefault("X-Amz-Credential")
  valid_614529 = validateParameter(valid_614529, JString, required = false,
                                 default = nil)
  if valid_614529 != nil:
    section.add "X-Amz-Credential", valid_614529
  var valid_614530 = header.getOrDefault("X-Amz-Security-Token")
  valid_614530 = validateParameter(valid_614530, JString, required = false,
                                 default = nil)
  if valid_614530 != nil:
    section.add "X-Amz-Security-Token", valid_614530
  var valid_614531 = header.getOrDefault("X-Amz-Algorithm")
  valid_614531 = validateParameter(valid_614531, JString, required = false,
                                 default = nil)
  if valid_614531 != nil:
    section.add "X-Amz-Algorithm", valid_614531
  var valid_614532 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614532 = validateParameter(valid_614532, JString, required = false,
                                 default = nil)
  if valid_614532 != nil:
    section.add "X-Amz-SignedHeaders", valid_614532
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614533: Call_GetDescribeDBSubnetGroups_614517; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>.</p>
  ## 
  let valid = call_614533.validator(path, query, header, formData, body)
  let scheme = call_614533.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614533.url(scheme.get, call_614533.host, call_614533.base,
                         call_614533.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614533, url, valid)

proc call*(call_614534: Call_GetDescribeDBSubnetGroups_614517; Marker: string = "";
          Action: string = "DescribeDBSubnetGroups"; DBSubnetGroupName: string = "";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBSubnetGroups
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   DBSubnetGroupName: string
  ##                    : The name of the DB subnet group to return details for.
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_614535 = newJObject()
  add(query_614535, "Marker", newJString(Marker))
  add(query_614535, "Action", newJString(Action))
  add(query_614535, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_614535, "Version", newJString(Version))
  if Filters != nil:
    query_614535.add "Filters", Filters
  add(query_614535, "MaxRecords", newJInt(MaxRecords))
  result = call_614534.call(nil, query_614535, nil, nil, nil)

var getDescribeDBSubnetGroups* = Call_GetDescribeDBSubnetGroups_614517(
    name: "getDescribeDBSubnetGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSubnetGroups",
    validator: validate_GetDescribeDBSubnetGroups_614518, base: "/",
    url: url_GetDescribeDBSubnetGroups_614519,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEngineDefaultClusterParameters_614575 = ref object of OpenApiRestCall_612642
proc url_PostDescribeEngineDefaultClusterParameters_614577(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEngineDefaultClusterParameters_614576(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the cluster database engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614578 = query.getOrDefault("Action")
  valid_614578 = validateParameter(valid_614578, JString, required = true, default = newJString(
      "DescribeEngineDefaultClusterParameters"))
  if valid_614578 != nil:
    section.add "Action", valid_614578
  var valid_614579 = query.getOrDefault("Version")
  valid_614579 = validateParameter(valid_614579, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614579 != nil:
    section.add "Version", valid_614579
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614580 = header.getOrDefault("X-Amz-Signature")
  valid_614580 = validateParameter(valid_614580, JString, required = false,
                                 default = nil)
  if valid_614580 != nil:
    section.add "X-Amz-Signature", valid_614580
  var valid_614581 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614581 = validateParameter(valid_614581, JString, required = false,
                                 default = nil)
  if valid_614581 != nil:
    section.add "X-Amz-Content-Sha256", valid_614581
  var valid_614582 = header.getOrDefault("X-Amz-Date")
  valid_614582 = validateParameter(valid_614582, JString, required = false,
                                 default = nil)
  if valid_614582 != nil:
    section.add "X-Amz-Date", valid_614582
  var valid_614583 = header.getOrDefault("X-Amz-Credential")
  valid_614583 = validateParameter(valid_614583, JString, required = false,
                                 default = nil)
  if valid_614583 != nil:
    section.add "X-Amz-Credential", valid_614583
  var valid_614584 = header.getOrDefault("X-Amz-Security-Token")
  valid_614584 = validateParameter(valid_614584, JString, required = false,
                                 default = nil)
  if valid_614584 != nil:
    section.add "X-Amz-Security-Token", valid_614584
  var valid_614585 = header.getOrDefault("X-Amz-Algorithm")
  valid_614585 = validateParameter(valid_614585, JString, required = false,
                                 default = nil)
  if valid_614585 != nil:
    section.add "X-Amz-Algorithm", valid_614585
  var valid_614586 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614586 = validateParameter(valid_614586, JString, required = false,
                                 default = nil)
  if valid_614586 != nil:
    section.add "X-Amz-SignedHeaders", valid_614586
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  section = newJObject()
  var valid_614587 = formData.getOrDefault("MaxRecords")
  valid_614587 = validateParameter(valid_614587, JInt, required = false, default = nil)
  if valid_614587 != nil:
    section.add "MaxRecords", valid_614587
  var valid_614588 = formData.getOrDefault("Marker")
  valid_614588 = validateParameter(valid_614588, JString, required = false,
                                 default = nil)
  if valid_614588 != nil:
    section.add "Marker", valid_614588
  var valid_614589 = formData.getOrDefault("Filters")
  valid_614589 = validateParameter(valid_614589, JArray, required = false,
                                 default = nil)
  if valid_614589 != nil:
    section.add "Filters", valid_614589
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_614590 = formData.getOrDefault("DBParameterGroupFamily")
  valid_614590 = validateParameter(valid_614590, JString, required = true,
                                 default = nil)
  if valid_614590 != nil:
    section.add "DBParameterGroupFamily", valid_614590
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614591: Call_PostDescribeEngineDefaultClusterParameters_614575;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the cluster database engine.
  ## 
  let valid = call_614591.validator(path, query, header, formData, body)
  let scheme = call_614591.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614591.url(scheme.get, call_614591.host, call_614591.base,
                         call_614591.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614591, url, valid)

proc call*(call_614592: Call_PostDescribeEngineDefaultClusterParameters_614575;
          DBParameterGroupFamily: string; MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeEngineDefaultClusterParameters";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeEngineDefaultClusterParameters
  ## Returns the default engine and system parameter information for the cluster database engine.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  var query_614593 = newJObject()
  var formData_614594 = newJObject()
  add(formData_614594, "MaxRecords", newJInt(MaxRecords))
  add(formData_614594, "Marker", newJString(Marker))
  add(query_614593, "Action", newJString(Action))
  if Filters != nil:
    formData_614594.add "Filters", Filters
  add(query_614593, "Version", newJString(Version))
  add(formData_614594, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  result = call_614592.call(nil, query_614593, nil, formData_614594, nil)

var postDescribeEngineDefaultClusterParameters* = Call_PostDescribeEngineDefaultClusterParameters_614575(
    name: "postDescribeEngineDefaultClusterParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeEngineDefaultClusterParameters",
    validator: validate_PostDescribeEngineDefaultClusterParameters_614576,
    base: "/", url: url_PostDescribeEngineDefaultClusterParameters_614577,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEngineDefaultClusterParameters_614556 = ref object of OpenApiRestCall_612642
proc url_GetDescribeEngineDefaultClusterParameters_614558(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEngineDefaultClusterParameters_614557(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the cluster database engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_614559 = query.getOrDefault("Marker")
  valid_614559 = validateParameter(valid_614559, JString, required = false,
                                 default = nil)
  if valid_614559 != nil:
    section.add "Marker", valid_614559
  assert query != nil, "query argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_614560 = query.getOrDefault("DBParameterGroupFamily")
  valid_614560 = validateParameter(valid_614560, JString, required = true,
                                 default = nil)
  if valid_614560 != nil:
    section.add "DBParameterGroupFamily", valid_614560
  var valid_614561 = query.getOrDefault("Action")
  valid_614561 = validateParameter(valid_614561, JString, required = true, default = newJString(
      "DescribeEngineDefaultClusterParameters"))
  if valid_614561 != nil:
    section.add "Action", valid_614561
  var valid_614562 = query.getOrDefault("Version")
  valid_614562 = validateParameter(valid_614562, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614562 != nil:
    section.add "Version", valid_614562
  var valid_614563 = query.getOrDefault("Filters")
  valid_614563 = validateParameter(valid_614563, JArray, required = false,
                                 default = nil)
  if valid_614563 != nil:
    section.add "Filters", valid_614563
  var valid_614564 = query.getOrDefault("MaxRecords")
  valid_614564 = validateParameter(valid_614564, JInt, required = false, default = nil)
  if valid_614564 != nil:
    section.add "MaxRecords", valid_614564
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614565 = header.getOrDefault("X-Amz-Signature")
  valid_614565 = validateParameter(valid_614565, JString, required = false,
                                 default = nil)
  if valid_614565 != nil:
    section.add "X-Amz-Signature", valid_614565
  var valid_614566 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614566 = validateParameter(valid_614566, JString, required = false,
                                 default = nil)
  if valid_614566 != nil:
    section.add "X-Amz-Content-Sha256", valid_614566
  var valid_614567 = header.getOrDefault("X-Amz-Date")
  valid_614567 = validateParameter(valid_614567, JString, required = false,
                                 default = nil)
  if valid_614567 != nil:
    section.add "X-Amz-Date", valid_614567
  var valid_614568 = header.getOrDefault("X-Amz-Credential")
  valid_614568 = validateParameter(valid_614568, JString, required = false,
                                 default = nil)
  if valid_614568 != nil:
    section.add "X-Amz-Credential", valid_614568
  var valid_614569 = header.getOrDefault("X-Amz-Security-Token")
  valid_614569 = validateParameter(valid_614569, JString, required = false,
                                 default = nil)
  if valid_614569 != nil:
    section.add "X-Amz-Security-Token", valid_614569
  var valid_614570 = header.getOrDefault("X-Amz-Algorithm")
  valid_614570 = validateParameter(valid_614570, JString, required = false,
                                 default = nil)
  if valid_614570 != nil:
    section.add "X-Amz-Algorithm", valid_614570
  var valid_614571 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614571 = validateParameter(valid_614571, JString, required = false,
                                 default = nil)
  if valid_614571 != nil:
    section.add "X-Amz-SignedHeaders", valid_614571
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614572: Call_GetDescribeEngineDefaultClusterParameters_614556;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the cluster database engine.
  ## 
  let valid = call_614572.validator(path, query, header, formData, body)
  let scheme = call_614572.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614572.url(scheme.get, call_614572.host, call_614572.base,
                         call_614572.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614572, url, valid)

proc call*(call_614573: Call_GetDescribeEngineDefaultClusterParameters_614556;
          DBParameterGroupFamily: string; Marker: string = "";
          Action: string = "DescribeEngineDefaultClusterParameters";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeEngineDefaultClusterParameters
  ## Returns the default engine and system parameter information for the cluster database engine.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_614574 = newJObject()
  add(query_614574, "Marker", newJString(Marker))
  add(query_614574, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  add(query_614574, "Action", newJString(Action))
  add(query_614574, "Version", newJString(Version))
  if Filters != nil:
    query_614574.add "Filters", Filters
  add(query_614574, "MaxRecords", newJInt(MaxRecords))
  result = call_614573.call(nil, query_614574, nil, nil, nil)

var getDescribeEngineDefaultClusterParameters* = Call_GetDescribeEngineDefaultClusterParameters_614556(
    name: "getDescribeEngineDefaultClusterParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeEngineDefaultClusterParameters",
    validator: validate_GetDescribeEngineDefaultClusterParameters_614557,
    base: "/", url: url_GetDescribeEngineDefaultClusterParameters_614558,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEngineDefaultParameters_614614 = ref object of OpenApiRestCall_612642
proc url_PostDescribeEngineDefaultParameters_614616(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEngineDefaultParameters_614615(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614617 = query.getOrDefault("Action")
  valid_614617 = validateParameter(valid_614617, JString, required = true, default = newJString(
      "DescribeEngineDefaultParameters"))
  if valid_614617 != nil:
    section.add "Action", valid_614617
  var valid_614618 = query.getOrDefault("Version")
  valid_614618 = validateParameter(valid_614618, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614618 != nil:
    section.add "Version", valid_614618
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614619 = header.getOrDefault("X-Amz-Signature")
  valid_614619 = validateParameter(valid_614619, JString, required = false,
                                 default = nil)
  if valid_614619 != nil:
    section.add "X-Amz-Signature", valid_614619
  var valid_614620 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614620 = validateParameter(valid_614620, JString, required = false,
                                 default = nil)
  if valid_614620 != nil:
    section.add "X-Amz-Content-Sha256", valid_614620
  var valid_614621 = header.getOrDefault("X-Amz-Date")
  valid_614621 = validateParameter(valid_614621, JString, required = false,
                                 default = nil)
  if valid_614621 != nil:
    section.add "X-Amz-Date", valid_614621
  var valid_614622 = header.getOrDefault("X-Amz-Credential")
  valid_614622 = validateParameter(valid_614622, JString, required = false,
                                 default = nil)
  if valid_614622 != nil:
    section.add "X-Amz-Credential", valid_614622
  var valid_614623 = header.getOrDefault("X-Amz-Security-Token")
  valid_614623 = validateParameter(valid_614623, JString, required = false,
                                 default = nil)
  if valid_614623 != nil:
    section.add "X-Amz-Security-Token", valid_614623
  var valid_614624 = header.getOrDefault("X-Amz-Algorithm")
  valid_614624 = validateParameter(valid_614624, JString, required = false,
                                 default = nil)
  if valid_614624 != nil:
    section.add "X-Amz-Algorithm", valid_614624
  var valid_614625 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614625 = validateParameter(valid_614625, JString, required = false,
                                 default = nil)
  if valid_614625 != nil:
    section.add "X-Amz-SignedHeaders", valid_614625
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : Not currently supported.
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB parameter group family.
  section = newJObject()
  var valid_614626 = formData.getOrDefault("MaxRecords")
  valid_614626 = validateParameter(valid_614626, JInt, required = false, default = nil)
  if valid_614626 != nil:
    section.add "MaxRecords", valid_614626
  var valid_614627 = formData.getOrDefault("Marker")
  valid_614627 = validateParameter(valid_614627, JString, required = false,
                                 default = nil)
  if valid_614627 != nil:
    section.add "Marker", valid_614627
  var valid_614628 = formData.getOrDefault("Filters")
  valid_614628 = validateParameter(valid_614628, JArray, required = false,
                                 default = nil)
  if valid_614628 != nil:
    section.add "Filters", valid_614628
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_614629 = formData.getOrDefault("DBParameterGroupFamily")
  valid_614629 = validateParameter(valid_614629, JString, required = true,
                                 default = nil)
  if valid_614629 != nil:
    section.add "DBParameterGroupFamily", valid_614629
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614630: Call_PostDescribeEngineDefaultParameters_614614;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  let valid = call_614630.validator(path, query, header, formData, body)
  let scheme = call_614630.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614630.url(scheme.get, call_614630.host, call_614630.base,
                         call_614630.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614630, url, valid)

proc call*(call_614631: Call_PostDescribeEngineDefaultParameters_614614;
          DBParameterGroupFamily: string; MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeEngineDefaultParameters";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeEngineDefaultParameters
  ## Returns the default engine and system parameter information for the specified database engine.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : Not currently supported.
  ##   Version: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB parameter group family.
  var query_614632 = newJObject()
  var formData_614633 = newJObject()
  add(formData_614633, "MaxRecords", newJInt(MaxRecords))
  add(formData_614633, "Marker", newJString(Marker))
  add(query_614632, "Action", newJString(Action))
  if Filters != nil:
    formData_614633.add "Filters", Filters
  add(query_614632, "Version", newJString(Version))
  add(formData_614633, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  result = call_614631.call(nil, query_614632, nil, formData_614633, nil)

var postDescribeEngineDefaultParameters* = Call_PostDescribeEngineDefaultParameters_614614(
    name: "postDescribeEngineDefaultParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEngineDefaultParameters",
    validator: validate_PostDescribeEngineDefaultParameters_614615, base: "/",
    url: url_PostDescribeEngineDefaultParameters_614616,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEngineDefaultParameters_614595 = ref object of OpenApiRestCall_612642
proc url_GetDescribeEngineDefaultParameters_614597(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEngineDefaultParameters_614596(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB parameter group family.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : Not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_614598 = query.getOrDefault("Marker")
  valid_614598 = validateParameter(valid_614598, JString, required = false,
                                 default = nil)
  if valid_614598 != nil:
    section.add "Marker", valid_614598
  assert query != nil, "query argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_614599 = query.getOrDefault("DBParameterGroupFamily")
  valid_614599 = validateParameter(valid_614599, JString, required = true,
                                 default = nil)
  if valid_614599 != nil:
    section.add "DBParameterGroupFamily", valid_614599
  var valid_614600 = query.getOrDefault("Action")
  valid_614600 = validateParameter(valid_614600, JString, required = true, default = newJString(
      "DescribeEngineDefaultParameters"))
  if valid_614600 != nil:
    section.add "Action", valid_614600
  var valid_614601 = query.getOrDefault("Version")
  valid_614601 = validateParameter(valid_614601, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614601 != nil:
    section.add "Version", valid_614601
  var valid_614602 = query.getOrDefault("Filters")
  valid_614602 = validateParameter(valid_614602, JArray, required = false,
                                 default = nil)
  if valid_614602 != nil:
    section.add "Filters", valid_614602
  var valid_614603 = query.getOrDefault("MaxRecords")
  valid_614603 = validateParameter(valid_614603, JInt, required = false, default = nil)
  if valid_614603 != nil:
    section.add "MaxRecords", valid_614603
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614604 = header.getOrDefault("X-Amz-Signature")
  valid_614604 = validateParameter(valid_614604, JString, required = false,
                                 default = nil)
  if valid_614604 != nil:
    section.add "X-Amz-Signature", valid_614604
  var valid_614605 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614605 = validateParameter(valid_614605, JString, required = false,
                                 default = nil)
  if valid_614605 != nil:
    section.add "X-Amz-Content-Sha256", valid_614605
  var valid_614606 = header.getOrDefault("X-Amz-Date")
  valid_614606 = validateParameter(valid_614606, JString, required = false,
                                 default = nil)
  if valid_614606 != nil:
    section.add "X-Amz-Date", valid_614606
  var valid_614607 = header.getOrDefault("X-Amz-Credential")
  valid_614607 = validateParameter(valid_614607, JString, required = false,
                                 default = nil)
  if valid_614607 != nil:
    section.add "X-Amz-Credential", valid_614607
  var valid_614608 = header.getOrDefault("X-Amz-Security-Token")
  valid_614608 = validateParameter(valid_614608, JString, required = false,
                                 default = nil)
  if valid_614608 != nil:
    section.add "X-Amz-Security-Token", valid_614608
  var valid_614609 = header.getOrDefault("X-Amz-Algorithm")
  valid_614609 = validateParameter(valid_614609, JString, required = false,
                                 default = nil)
  if valid_614609 != nil:
    section.add "X-Amz-Algorithm", valid_614609
  var valid_614610 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614610 = validateParameter(valid_614610, JString, required = false,
                                 default = nil)
  if valid_614610 != nil:
    section.add "X-Amz-SignedHeaders", valid_614610
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614611: Call_GetDescribeEngineDefaultParameters_614595;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  let valid = call_614611.validator(path, query, header, formData, body)
  let scheme = call_614611.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614611.url(scheme.get, call_614611.host, call_614611.base,
                         call_614611.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614611, url, valid)

proc call*(call_614612: Call_GetDescribeEngineDefaultParameters_614595;
          DBParameterGroupFamily: string; Marker: string = "";
          Action: string = "DescribeEngineDefaultParameters";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeEngineDefaultParameters
  ## Returns the default engine and system parameter information for the specified database engine.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB parameter group family.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : Not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_614613 = newJObject()
  add(query_614613, "Marker", newJString(Marker))
  add(query_614613, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  add(query_614613, "Action", newJString(Action))
  add(query_614613, "Version", newJString(Version))
  if Filters != nil:
    query_614613.add "Filters", Filters
  add(query_614613, "MaxRecords", newJInt(MaxRecords))
  result = call_614612.call(nil, query_614613, nil, nil, nil)

var getDescribeEngineDefaultParameters* = Call_GetDescribeEngineDefaultParameters_614595(
    name: "getDescribeEngineDefaultParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEngineDefaultParameters",
    validator: validate_GetDescribeEngineDefaultParameters_614596, base: "/",
    url: url_GetDescribeEngineDefaultParameters_614597,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEventCategories_614651 = ref object of OpenApiRestCall_612642
proc url_PostDescribeEventCategories_614653(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEventCategories_614652(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614654 = query.getOrDefault("Action")
  valid_614654 = validateParameter(valid_614654, JString, required = true, default = newJString(
      "DescribeEventCategories"))
  if valid_614654 != nil:
    section.add "Action", valid_614654
  var valid_614655 = query.getOrDefault("Version")
  valid_614655 = validateParameter(valid_614655, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614655 != nil:
    section.add "Version", valid_614655
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614656 = header.getOrDefault("X-Amz-Signature")
  valid_614656 = validateParameter(valid_614656, JString, required = false,
                                 default = nil)
  if valid_614656 != nil:
    section.add "X-Amz-Signature", valid_614656
  var valid_614657 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614657 = validateParameter(valid_614657, JString, required = false,
                                 default = nil)
  if valid_614657 != nil:
    section.add "X-Amz-Content-Sha256", valid_614657
  var valid_614658 = header.getOrDefault("X-Amz-Date")
  valid_614658 = validateParameter(valid_614658, JString, required = false,
                                 default = nil)
  if valid_614658 != nil:
    section.add "X-Amz-Date", valid_614658
  var valid_614659 = header.getOrDefault("X-Amz-Credential")
  valid_614659 = validateParameter(valid_614659, JString, required = false,
                                 default = nil)
  if valid_614659 != nil:
    section.add "X-Amz-Credential", valid_614659
  var valid_614660 = header.getOrDefault("X-Amz-Security-Token")
  valid_614660 = validateParameter(valid_614660, JString, required = false,
                                 default = nil)
  if valid_614660 != nil:
    section.add "X-Amz-Security-Token", valid_614660
  var valid_614661 = header.getOrDefault("X-Amz-Algorithm")
  valid_614661 = validateParameter(valid_614661, JString, required = false,
                                 default = nil)
  if valid_614661 != nil:
    section.add "X-Amz-Algorithm", valid_614661
  var valid_614662 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614662 = validateParameter(valid_614662, JString, required = false,
                                 default = nil)
  if valid_614662 != nil:
    section.add "X-Amz-SignedHeaders", valid_614662
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_614663 = formData.getOrDefault("SourceType")
  valid_614663 = validateParameter(valid_614663, JString, required = false,
                                 default = nil)
  if valid_614663 != nil:
    section.add "SourceType", valid_614663
  var valid_614664 = formData.getOrDefault("Filters")
  valid_614664 = validateParameter(valid_614664, JArray, required = false,
                                 default = nil)
  if valid_614664 != nil:
    section.add "Filters", valid_614664
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614665: Call_PostDescribeEventCategories_614651; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type.
  ## 
  let valid = call_614665.validator(path, query, header, formData, body)
  let scheme = call_614665.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614665.url(scheme.get, call_614665.host, call_614665.base,
                         call_614665.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614665, url, valid)

proc call*(call_614666: Call_PostDescribeEventCategories_614651;
          SourceType: string = ""; Action: string = "DescribeEventCategories";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeEventCategories
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type.
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_614667 = newJObject()
  var formData_614668 = newJObject()
  add(formData_614668, "SourceType", newJString(SourceType))
  add(query_614667, "Action", newJString(Action))
  if Filters != nil:
    formData_614668.add "Filters", Filters
  add(query_614667, "Version", newJString(Version))
  result = call_614666.call(nil, query_614667, nil, formData_614668, nil)

var postDescribeEventCategories* = Call_PostDescribeEventCategories_614651(
    name: "postDescribeEventCategories", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventCategories",
    validator: validate_PostDescribeEventCategories_614652, base: "/",
    url: url_PostDescribeEventCategories_614653,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEventCategories_614634 = ref object of OpenApiRestCall_612642
proc url_GetDescribeEventCategories_614636(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEventCategories_614635(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_614637 = query.getOrDefault("SourceType")
  valid_614637 = validateParameter(valid_614637, JString, required = false,
                                 default = nil)
  if valid_614637 != nil:
    section.add "SourceType", valid_614637
  var valid_614638 = query.getOrDefault("Action")
  valid_614638 = validateParameter(valid_614638, JString, required = true, default = newJString(
      "DescribeEventCategories"))
  if valid_614638 != nil:
    section.add "Action", valid_614638
  var valid_614639 = query.getOrDefault("Version")
  valid_614639 = validateParameter(valid_614639, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614639 != nil:
    section.add "Version", valid_614639
  var valid_614640 = query.getOrDefault("Filters")
  valid_614640 = validateParameter(valid_614640, JArray, required = false,
                                 default = nil)
  if valid_614640 != nil:
    section.add "Filters", valid_614640
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614641 = header.getOrDefault("X-Amz-Signature")
  valid_614641 = validateParameter(valid_614641, JString, required = false,
                                 default = nil)
  if valid_614641 != nil:
    section.add "X-Amz-Signature", valid_614641
  var valid_614642 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614642 = validateParameter(valid_614642, JString, required = false,
                                 default = nil)
  if valid_614642 != nil:
    section.add "X-Amz-Content-Sha256", valid_614642
  var valid_614643 = header.getOrDefault("X-Amz-Date")
  valid_614643 = validateParameter(valid_614643, JString, required = false,
                                 default = nil)
  if valid_614643 != nil:
    section.add "X-Amz-Date", valid_614643
  var valid_614644 = header.getOrDefault("X-Amz-Credential")
  valid_614644 = validateParameter(valid_614644, JString, required = false,
                                 default = nil)
  if valid_614644 != nil:
    section.add "X-Amz-Credential", valid_614644
  var valid_614645 = header.getOrDefault("X-Amz-Security-Token")
  valid_614645 = validateParameter(valid_614645, JString, required = false,
                                 default = nil)
  if valid_614645 != nil:
    section.add "X-Amz-Security-Token", valid_614645
  var valid_614646 = header.getOrDefault("X-Amz-Algorithm")
  valid_614646 = validateParameter(valid_614646, JString, required = false,
                                 default = nil)
  if valid_614646 != nil:
    section.add "X-Amz-Algorithm", valid_614646
  var valid_614647 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614647 = validateParameter(valid_614647, JString, required = false,
                                 default = nil)
  if valid_614647 != nil:
    section.add "X-Amz-SignedHeaders", valid_614647
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614648: Call_GetDescribeEventCategories_614634; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type.
  ## 
  let valid = call_614648.validator(path, query, header, formData, body)
  let scheme = call_614648.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614648.url(scheme.get, call_614648.host, call_614648.base,
                         call_614648.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614648, url, valid)

proc call*(call_614649: Call_GetDescribeEventCategories_614634;
          SourceType: string = ""; Action: string = "DescribeEventCategories";
          Version: string = "2014-10-31"; Filters: JsonNode = nil): Recallable =
  ## getDescribeEventCategories
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type.
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  var query_614650 = newJObject()
  add(query_614650, "SourceType", newJString(SourceType))
  add(query_614650, "Action", newJString(Action))
  add(query_614650, "Version", newJString(Version))
  if Filters != nil:
    query_614650.add "Filters", Filters
  result = call_614649.call(nil, query_614650, nil, nil, nil)

var getDescribeEventCategories* = Call_GetDescribeEventCategories_614634(
    name: "getDescribeEventCategories", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventCategories",
    validator: validate_GetDescribeEventCategories_614635, base: "/",
    url: url_GetDescribeEventCategories_614636,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEventSubscriptions_614688 = ref object of OpenApiRestCall_612642
proc url_PostDescribeEventSubscriptions_614690(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEventSubscriptions_614689(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614691 = query.getOrDefault("Action")
  valid_614691 = validateParameter(valid_614691, JString, required = true, default = newJString(
      "DescribeEventSubscriptions"))
  if valid_614691 != nil:
    section.add "Action", valid_614691
  var valid_614692 = query.getOrDefault("Version")
  valid_614692 = validateParameter(valid_614692, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614692 != nil:
    section.add "Version", valid_614692
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614693 = header.getOrDefault("X-Amz-Signature")
  valid_614693 = validateParameter(valid_614693, JString, required = false,
                                 default = nil)
  if valid_614693 != nil:
    section.add "X-Amz-Signature", valid_614693
  var valid_614694 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614694 = validateParameter(valid_614694, JString, required = false,
                                 default = nil)
  if valid_614694 != nil:
    section.add "X-Amz-Content-Sha256", valid_614694
  var valid_614695 = header.getOrDefault("X-Amz-Date")
  valid_614695 = validateParameter(valid_614695, JString, required = false,
                                 default = nil)
  if valid_614695 != nil:
    section.add "X-Amz-Date", valid_614695
  var valid_614696 = header.getOrDefault("X-Amz-Credential")
  valid_614696 = validateParameter(valid_614696, JString, required = false,
                                 default = nil)
  if valid_614696 != nil:
    section.add "X-Amz-Credential", valid_614696
  var valid_614697 = header.getOrDefault("X-Amz-Security-Token")
  valid_614697 = validateParameter(valid_614697, JString, required = false,
                                 default = nil)
  if valid_614697 != nil:
    section.add "X-Amz-Security-Token", valid_614697
  var valid_614698 = header.getOrDefault("X-Amz-Algorithm")
  valid_614698 = validateParameter(valid_614698, JString, required = false,
                                 default = nil)
  if valid_614698 != nil:
    section.add "X-Amz-Algorithm", valid_614698
  var valid_614699 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614699 = validateParameter(valid_614699, JString, required = false,
                                 default = nil)
  if valid_614699 != nil:
    section.add "X-Amz-SignedHeaders", valid_614699
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> .
  ##   SubscriptionName: JString
  ##                   : The name of the event notification subscription you want to describe.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_614700 = formData.getOrDefault("MaxRecords")
  valid_614700 = validateParameter(valid_614700, JInt, required = false, default = nil)
  if valid_614700 != nil:
    section.add "MaxRecords", valid_614700
  var valid_614701 = formData.getOrDefault("Marker")
  valid_614701 = validateParameter(valid_614701, JString, required = false,
                                 default = nil)
  if valid_614701 != nil:
    section.add "Marker", valid_614701
  var valid_614702 = formData.getOrDefault("SubscriptionName")
  valid_614702 = validateParameter(valid_614702, JString, required = false,
                                 default = nil)
  if valid_614702 != nil:
    section.add "SubscriptionName", valid_614702
  var valid_614703 = formData.getOrDefault("Filters")
  valid_614703 = validateParameter(valid_614703, JArray, required = false,
                                 default = nil)
  if valid_614703 != nil:
    section.add "Filters", valid_614703
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614704: Call_PostDescribeEventSubscriptions_614688; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  let valid = call_614704.validator(path, query, header, formData, body)
  let scheme = call_614704.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614704.url(scheme.get, call_614704.host, call_614704.base,
                         call_614704.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614704, url, valid)

proc call*(call_614705: Call_PostDescribeEventSubscriptions_614688;
          MaxRecords: int = 0; Marker: string = ""; SubscriptionName: string = "";
          Action: string = "DescribeEventSubscriptions"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeEventSubscriptions
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> .
  ##   SubscriptionName: string
  ##                   : The name of the event notification subscription you want to describe.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_614706 = newJObject()
  var formData_614707 = newJObject()
  add(formData_614707, "MaxRecords", newJInt(MaxRecords))
  add(formData_614707, "Marker", newJString(Marker))
  add(formData_614707, "SubscriptionName", newJString(SubscriptionName))
  add(query_614706, "Action", newJString(Action))
  if Filters != nil:
    formData_614707.add "Filters", Filters
  add(query_614706, "Version", newJString(Version))
  result = call_614705.call(nil, query_614706, nil, formData_614707, nil)

var postDescribeEventSubscriptions* = Call_PostDescribeEventSubscriptions_614688(
    name: "postDescribeEventSubscriptions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventSubscriptions",
    validator: validate_PostDescribeEventSubscriptions_614689, base: "/",
    url: url_PostDescribeEventSubscriptions_614690,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEventSubscriptions_614669 = ref object of OpenApiRestCall_612642
proc url_GetDescribeEventSubscriptions_614671(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEventSubscriptions_614670(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> .
  ##   SubscriptionName: JString
  ##                   : The name of the event notification subscription you want to describe.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_614672 = query.getOrDefault("Marker")
  valid_614672 = validateParameter(valid_614672, JString, required = false,
                                 default = nil)
  if valid_614672 != nil:
    section.add "Marker", valid_614672
  var valid_614673 = query.getOrDefault("SubscriptionName")
  valid_614673 = validateParameter(valid_614673, JString, required = false,
                                 default = nil)
  if valid_614673 != nil:
    section.add "SubscriptionName", valid_614673
  var valid_614674 = query.getOrDefault("Action")
  valid_614674 = validateParameter(valid_614674, JString, required = true, default = newJString(
      "DescribeEventSubscriptions"))
  if valid_614674 != nil:
    section.add "Action", valid_614674
  var valid_614675 = query.getOrDefault("Version")
  valid_614675 = validateParameter(valid_614675, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614675 != nil:
    section.add "Version", valid_614675
  var valid_614676 = query.getOrDefault("Filters")
  valid_614676 = validateParameter(valid_614676, JArray, required = false,
                                 default = nil)
  if valid_614676 != nil:
    section.add "Filters", valid_614676
  var valid_614677 = query.getOrDefault("MaxRecords")
  valid_614677 = validateParameter(valid_614677, JInt, required = false, default = nil)
  if valid_614677 != nil:
    section.add "MaxRecords", valid_614677
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614678 = header.getOrDefault("X-Amz-Signature")
  valid_614678 = validateParameter(valid_614678, JString, required = false,
                                 default = nil)
  if valid_614678 != nil:
    section.add "X-Amz-Signature", valid_614678
  var valid_614679 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614679 = validateParameter(valid_614679, JString, required = false,
                                 default = nil)
  if valid_614679 != nil:
    section.add "X-Amz-Content-Sha256", valid_614679
  var valid_614680 = header.getOrDefault("X-Amz-Date")
  valid_614680 = validateParameter(valid_614680, JString, required = false,
                                 default = nil)
  if valid_614680 != nil:
    section.add "X-Amz-Date", valid_614680
  var valid_614681 = header.getOrDefault("X-Amz-Credential")
  valid_614681 = validateParameter(valid_614681, JString, required = false,
                                 default = nil)
  if valid_614681 != nil:
    section.add "X-Amz-Credential", valid_614681
  var valid_614682 = header.getOrDefault("X-Amz-Security-Token")
  valid_614682 = validateParameter(valid_614682, JString, required = false,
                                 default = nil)
  if valid_614682 != nil:
    section.add "X-Amz-Security-Token", valid_614682
  var valid_614683 = header.getOrDefault("X-Amz-Algorithm")
  valid_614683 = validateParameter(valid_614683, JString, required = false,
                                 default = nil)
  if valid_614683 != nil:
    section.add "X-Amz-Algorithm", valid_614683
  var valid_614684 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614684 = validateParameter(valid_614684, JString, required = false,
                                 default = nil)
  if valid_614684 != nil:
    section.add "X-Amz-SignedHeaders", valid_614684
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614685: Call_GetDescribeEventSubscriptions_614669; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  let valid = call_614685.validator(path, query, header, formData, body)
  let scheme = call_614685.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614685.url(scheme.get, call_614685.host, call_614685.base,
                         call_614685.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614685, url, valid)

proc call*(call_614686: Call_GetDescribeEventSubscriptions_614669;
          Marker: string = ""; SubscriptionName: string = "";
          Action: string = "DescribeEventSubscriptions";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeEventSubscriptions
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> .
  ##   SubscriptionName: string
  ##                   : The name of the event notification subscription you want to describe.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_614687 = newJObject()
  add(query_614687, "Marker", newJString(Marker))
  add(query_614687, "SubscriptionName", newJString(SubscriptionName))
  add(query_614687, "Action", newJString(Action))
  add(query_614687, "Version", newJString(Version))
  if Filters != nil:
    query_614687.add "Filters", Filters
  add(query_614687, "MaxRecords", newJInt(MaxRecords))
  result = call_614686.call(nil, query_614687, nil, nil, nil)

var getDescribeEventSubscriptions* = Call_GetDescribeEventSubscriptions_614669(
    name: "getDescribeEventSubscriptions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventSubscriptions",
    validator: validate_GetDescribeEventSubscriptions_614670, base: "/",
    url: url_GetDescribeEventSubscriptions_614671,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEvents_614732 = ref object of OpenApiRestCall_612642
proc url_PostDescribeEvents_614734(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEvents_614733(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614735 = query.getOrDefault("Action")
  valid_614735 = validateParameter(valid_614735, JString, required = true,
                                 default = newJString("DescribeEvents"))
  if valid_614735 != nil:
    section.add "Action", valid_614735
  var valid_614736 = query.getOrDefault("Version")
  valid_614736 = validateParameter(valid_614736, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614736 != nil:
    section.add "Version", valid_614736
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614737 = header.getOrDefault("X-Amz-Signature")
  valid_614737 = validateParameter(valid_614737, JString, required = false,
                                 default = nil)
  if valid_614737 != nil:
    section.add "X-Amz-Signature", valid_614737
  var valid_614738 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614738 = validateParameter(valid_614738, JString, required = false,
                                 default = nil)
  if valid_614738 != nil:
    section.add "X-Amz-Content-Sha256", valid_614738
  var valid_614739 = header.getOrDefault("X-Amz-Date")
  valid_614739 = validateParameter(valid_614739, JString, required = false,
                                 default = nil)
  if valid_614739 != nil:
    section.add "X-Amz-Date", valid_614739
  var valid_614740 = header.getOrDefault("X-Amz-Credential")
  valid_614740 = validateParameter(valid_614740, JString, required = false,
                                 default = nil)
  if valid_614740 != nil:
    section.add "X-Amz-Credential", valid_614740
  var valid_614741 = header.getOrDefault("X-Amz-Security-Token")
  valid_614741 = validateParameter(valid_614741, JString, required = false,
                                 default = nil)
  if valid_614741 != nil:
    section.add "X-Amz-Security-Token", valid_614741
  var valid_614742 = header.getOrDefault("X-Amz-Algorithm")
  valid_614742 = validateParameter(valid_614742, JString, required = false,
                                 default = nil)
  if valid_614742 != nil:
    section.add "X-Amz-Algorithm", valid_614742
  var valid_614743 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614743 = validateParameter(valid_614743, JString, required = false,
                                 default = nil)
  if valid_614743 != nil:
    section.add "X-Amz-SignedHeaders", valid_614743
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   SourceIdentifier: JString
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   SourceType: JString
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   Duration: JInt
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   EndTime: JString
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   StartTime: JString
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_614744 = formData.getOrDefault("MaxRecords")
  valid_614744 = validateParameter(valid_614744, JInt, required = false, default = nil)
  if valid_614744 != nil:
    section.add "MaxRecords", valid_614744
  var valid_614745 = formData.getOrDefault("Marker")
  valid_614745 = validateParameter(valid_614745, JString, required = false,
                                 default = nil)
  if valid_614745 != nil:
    section.add "Marker", valid_614745
  var valid_614746 = formData.getOrDefault("SourceIdentifier")
  valid_614746 = validateParameter(valid_614746, JString, required = false,
                                 default = nil)
  if valid_614746 != nil:
    section.add "SourceIdentifier", valid_614746
  var valid_614747 = formData.getOrDefault("SourceType")
  valid_614747 = validateParameter(valid_614747, JString, required = false,
                                 default = newJString("db-instance"))
  if valid_614747 != nil:
    section.add "SourceType", valid_614747
  var valid_614748 = formData.getOrDefault("Duration")
  valid_614748 = validateParameter(valid_614748, JInt, required = false, default = nil)
  if valid_614748 != nil:
    section.add "Duration", valid_614748
  var valid_614749 = formData.getOrDefault("EndTime")
  valid_614749 = validateParameter(valid_614749, JString, required = false,
                                 default = nil)
  if valid_614749 != nil:
    section.add "EndTime", valid_614749
  var valid_614750 = formData.getOrDefault("StartTime")
  valid_614750 = validateParameter(valid_614750, JString, required = false,
                                 default = nil)
  if valid_614750 != nil:
    section.add "StartTime", valid_614750
  var valid_614751 = formData.getOrDefault("EventCategories")
  valid_614751 = validateParameter(valid_614751, JArray, required = false,
                                 default = nil)
  if valid_614751 != nil:
    section.add "EventCategories", valid_614751
  var valid_614752 = formData.getOrDefault("Filters")
  valid_614752 = validateParameter(valid_614752, JArray, required = false,
                                 default = nil)
  if valid_614752 != nil:
    section.add "Filters", valid_614752
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614753: Call_PostDescribeEvents_614732; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  let valid = call_614753.validator(path, query, header, formData, body)
  let scheme = call_614753.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614753.url(scheme.get, call_614753.host, call_614753.base,
                         call_614753.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614753, url, valid)

proc call*(call_614754: Call_PostDescribeEvents_614732; MaxRecords: int = 0;
          Marker: string = ""; SourceIdentifier: string = "";
          SourceType: string = "db-instance"; Duration: int = 0; EndTime: string = "";
          StartTime: string = ""; EventCategories: JsonNode = nil;
          Action: string = "DescribeEvents"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeEvents
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   SourceIdentifier: string
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   SourceType: string
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   Duration: int
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   EndTime: string
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   StartTime: string
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_614755 = newJObject()
  var formData_614756 = newJObject()
  add(formData_614756, "MaxRecords", newJInt(MaxRecords))
  add(formData_614756, "Marker", newJString(Marker))
  add(formData_614756, "SourceIdentifier", newJString(SourceIdentifier))
  add(formData_614756, "SourceType", newJString(SourceType))
  add(formData_614756, "Duration", newJInt(Duration))
  add(formData_614756, "EndTime", newJString(EndTime))
  add(formData_614756, "StartTime", newJString(StartTime))
  if EventCategories != nil:
    formData_614756.add "EventCategories", EventCategories
  add(query_614755, "Action", newJString(Action))
  if Filters != nil:
    formData_614756.add "Filters", Filters
  add(query_614755, "Version", newJString(Version))
  result = call_614754.call(nil, query_614755, nil, formData_614756, nil)

var postDescribeEvents* = Call_PostDescribeEvents_614732(
    name: "postDescribeEvents", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEvents",
    validator: validate_PostDescribeEvents_614733, base: "/",
    url: url_PostDescribeEvents_614734, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEvents_614708 = ref object of OpenApiRestCall_612642
proc url_GetDescribeEvents_614710(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEvents_614709(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   SourceType: JString
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   SourceIdentifier: JString
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Action: JString (required)
  ##   StartTime: JString
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Duration: JInt
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   EndTime: JString
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_614711 = query.getOrDefault("Marker")
  valid_614711 = validateParameter(valid_614711, JString, required = false,
                                 default = nil)
  if valid_614711 != nil:
    section.add "Marker", valid_614711
  var valid_614712 = query.getOrDefault("SourceType")
  valid_614712 = validateParameter(valid_614712, JString, required = false,
                                 default = newJString("db-instance"))
  if valid_614712 != nil:
    section.add "SourceType", valid_614712
  var valid_614713 = query.getOrDefault("SourceIdentifier")
  valid_614713 = validateParameter(valid_614713, JString, required = false,
                                 default = nil)
  if valid_614713 != nil:
    section.add "SourceIdentifier", valid_614713
  var valid_614714 = query.getOrDefault("EventCategories")
  valid_614714 = validateParameter(valid_614714, JArray, required = false,
                                 default = nil)
  if valid_614714 != nil:
    section.add "EventCategories", valid_614714
  var valid_614715 = query.getOrDefault("Action")
  valid_614715 = validateParameter(valid_614715, JString, required = true,
                                 default = newJString("DescribeEvents"))
  if valid_614715 != nil:
    section.add "Action", valid_614715
  var valid_614716 = query.getOrDefault("StartTime")
  valid_614716 = validateParameter(valid_614716, JString, required = false,
                                 default = nil)
  if valid_614716 != nil:
    section.add "StartTime", valid_614716
  var valid_614717 = query.getOrDefault("Duration")
  valid_614717 = validateParameter(valid_614717, JInt, required = false, default = nil)
  if valid_614717 != nil:
    section.add "Duration", valid_614717
  var valid_614718 = query.getOrDefault("EndTime")
  valid_614718 = validateParameter(valid_614718, JString, required = false,
                                 default = nil)
  if valid_614718 != nil:
    section.add "EndTime", valid_614718
  var valid_614719 = query.getOrDefault("Version")
  valid_614719 = validateParameter(valid_614719, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614719 != nil:
    section.add "Version", valid_614719
  var valid_614720 = query.getOrDefault("Filters")
  valid_614720 = validateParameter(valid_614720, JArray, required = false,
                                 default = nil)
  if valid_614720 != nil:
    section.add "Filters", valid_614720
  var valid_614721 = query.getOrDefault("MaxRecords")
  valid_614721 = validateParameter(valid_614721, JInt, required = false, default = nil)
  if valid_614721 != nil:
    section.add "MaxRecords", valid_614721
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614722 = header.getOrDefault("X-Amz-Signature")
  valid_614722 = validateParameter(valid_614722, JString, required = false,
                                 default = nil)
  if valid_614722 != nil:
    section.add "X-Amz-Signature", valid_614722
  var valid_614723 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614723 = validateParameter(valid_614723, JString, required = false,
                                 default = nil)
  if valid_614723 != nil:
    section.add "X-Amz-Content-Sha256", valid_614723
  var valid_614724 = header.getOrDefault("X-Amz-Date")
  valid_614724 = validateParameter(valid_614724, JString, required = false,
                                 default = nil)
  if valid_614724 != nil:
    section.add "X-Amz-Date", valid_614724
  var valid_614725 = header.getOrDefault("X-Amz-Credential")
  valid_614725 = validateParameter(valid_614725, JString, required = false,
                                 default = nil)
  if valid_614725 != nil:
    section.add "X-Amz-Credential", valid_614725
  var valid_614726 = header.getOrDefault("X-Amz-Security-Token")
  valid_614726 = validateParameter(valid_614726, JString, required = false,
                                 default = nil)
  if valid_614726 != nil:
    section.add "X-Amz-Security-Token", valid_614726
  var valid_614727 = header.getOrDefault("X-Amz-Algorithm")
  valid_614727 = validateParameter(valid_614727, JString, required = false,
                                 default = nil)
  if valid_614727 != nil:
    section.add "X-Amz-Algorithm", valid_614727
  var valid_614728 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614728 = validateParameter(valid_614728, JString, required = false,
                                 default = nil)
  if valid_614728 != nil:
    section.add "X-Amz-SignedHeaders", valid_614728
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614729: Call_GetDescribeEvents_614708; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  let valid = call_614729.validator(path, query, header, formData, body)
  let scheme = call_614729.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614729.url(scheme.get, call_614729.host, call_614729.base,
                         call_614729.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614729, url, valid)

proc call*(call_614730: Call_GetDescribeEvents_614708; Marker: string = "";
          SourceType: string = "db-instance"; SourceIdentifier: string = "";
          EventCategories: JsonNode = nil; Action: string = "DescribeEvents";
          StartTime: string = ""; Duration: int = 0; EndTime: string = "";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeEvents
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   SourceType: string
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   SourceIdentifier: string
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Action: string (required)
  ##   StartTime: string
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Duration: int
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   EndTime: string
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_614731 = newJObject()
  add(query_614731, "Marker", newJString(Marker))
  add(query_614731, "SourceType", newJString(SourceType))
  add(query_614731, "SourceIdentifier", newJString(SourceIdentifier))
  if EventCategories != nil:
    query_614731.add "EventCategories", EventCategories
  add(query_614731, "Action", newJString(Action))
  add(query_614731, "StartTime", newJString(StartTime))
  add(query_614731, "Duration", newJInt(Duration))
  add(query_614731, "EndTime", newJString(EndTime))
  add(query_614731, "Version", newJString(Version))
  if Filters != nil:
    query_614731.add "Filters", Filters
  add(query_614731, "MaxRecords", newJInt(MaxRecords))
  result = call_614730.call(nil, query_614731, nil, nil, nil)

var getDescribeEvents* = Call_GetDescribeEvents_614708(name: "getDescribeEvents",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=DescribeEvents", validator: validate_GetDescribeEvents_614709,
    base: "/", url: url_GetDescribeEvents_614710,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeOrderableDBInstanceOptions_614780 = ref object of OpenApiRestCall_612642
proc url_PostDescribeOrderableDBInstanceOptions_614782(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeOrderableDBInstanceOptions_614781(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614783 = query.getOrDefault("Action")
  valid_614783 = validateParameter(valid_614783, JString, required = true, default = newJString(
      "DescribeOrderableDBInstanceOptions"))
  if valid_614783 != nil:
    section.add "Action", valid_614783
  var valid_614784 = query.getOrDefault("Version")
  valid_614784 = validateParameter(valid_614784, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614784 != nil:
    section.add "Version", valid_614784
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614785 = header.getOrDefault("X-Amz-Signature")
  valid_614785 = validateParameter(valid_614785, JString, required = false,
                                 default = nil)
  if valid_614785 != nil:
    section.add "X-Amz-Signature", valid_614785
  var valid_614786 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614786 = validateParameter(valid_614786, JString, required = false,
                                 default = nil)
  if valid_614786 != nil:
    section.add "X-Amz-Content-Sha256", valid_614786
  var valid_614787 = header.getOrDefault("X-Amz-Date")
  valid_614787 = validateParameter(valid_614787, JString, required = false,
                                 default = nil)
  if valid_614787 != nil:
    section.add "X-Amz-Date", valid_614787
  var valid_614788 = header.getOrDefault("X-Amz-Credential")
  valid_614788 = validateParameter(valid_614788, JString, required = false,
                                 default = nil)
  if valid_614788 != nil:
    section.add "X-Amz-Credential", valid_614788
  var valid_614789 = header.getOrDefault("X-Amz-Security-Token")
  valid_614789 = validateParameter(valid_614789, JString, required = false,
                                 default = nil)
  if valid_614789 != nil:
    section.add "X-Amz-Security-Token", valid_614789
  var valid_614790 = header.getOrDefault("X-Amz-Algorithm")
  valid_614790 = validateParameter(valid_614790, JString, required = false,
                                 default = nil)
  if valid_614790 != nil:
    section.add "X-Amz-Algorithm", valid_614790
  var valid_614791 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614791 = validateParameter(valid_614791, JString, required = false,
                                 default = nil)
  if valid_614791 != nil:
    section.add "X-Amz-SignedHeaders", valid_614791
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: JString
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> .
  ##   Engine: JString (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   Vpc: JBool
  ##      : The VPC filter value. Specify this parameter to show only the available VPC or non-VPC offerings.
  ##   LicenseModel: JString
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_614792 = formData.getOrDefault("DBInstanceClass")
  valid_614792 = validateParameter(valid_614792, JString, required = false,
                                 default = nil)
  if valid_614792 != nil:
    section.add "DBInstanceClass", valid_614792
  var valid_614793 = formData.getOrDefault("MaxRecords")
  valid_614793 = validateParameter(valid_614793, JInt, required = false, default = nil)
  if valid_614793 != nil:
    section.add "MaxRecords", valid_614793
  var valid_614794 = formData.getOrDefault("EngineVersion")
  valid_614794 = validateParameter(valid_614794, JString, required = false,
                                 default = nil)
  if valid_614794 != nil:
    section.add "EngineVersion", valid_614794
  var valid_614795 = formData.getOrDefault("Marker")
  valid_614795 = validateParameter(valid_614795, JString, required = false,
                                 default = nil)
  if valid_614795 != nil:
    section.add "Marker", valid_614795
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_614796 = formData.getOrDefault("Engine")
  valid_614796 = validateParameter(valid_614796, JString, required = true,
                                 default = nil)
  if valid_614796 != nil:
    section.add "Engine", valid_614796
  var valid_614797 = formData.getOrDefault("Vpc")
  valid_614797 = validateParameter(valid_614797, JBool, required = false, default = nil)
  if valid_614797 != nil:
    section.add "Vpc", valid_614797
  var valid_614798 = formData.getOrDefault("LicenseModel")
  valid_614798 = validateParameter(valid_614798, JString, required = false,
                                 default = nil)
  if valid_614798 != nil:
    section.add "LicenseModel", valid_614798
  var valid_614799 = formData.getOrDefault("Filters")
  valid_614799 = validateParameter(valid_614799, JArray, required = false,
                                 default = nil)
  if valid_614799 != nil:
    section.add "Filters", valid_614799
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614800: Call_PostDescribeOrderableDBInstanceOptions_614780;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  let valid = call_614800.validator(path, query, header, formData, body)
  let scheme = call_614800.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614800.url(scheme.get, call_614800.host, call_614800.base,
                         call_614800.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614800, url, valid)

proc call*(call_614801: Call_PostDescribeOrderableDBInstanceOptions_614780;
          Engine: string; DBInstanceClass: string = ""; MaxRecords: int = 0;
          EngineVersion: string = ""; Marker: string = ""; Vpc: bool = false;
          Action: string = "DescribeOrderableDBInstanceOptions";
          LicenseModel: string = ""; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeOrderableDBInstanceOptions
  ## Returns a list of orderable DB instance options for the specified engine.
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: string
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> .
  ##   Engine: string (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   Vpc: bool
  ##      : The VPC filter value. Specify this parameter to show only the available VPC or non-VPC offerings.
  ##   Action: string (required)
  ##   LicenseModel: string
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_614802 = newJObject()
  var formData_614803 = newJObject()
  add(formData_614803, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_614803, "MaxRecords", newJInt(MaxRecords))
  add(formData_614803, "EngineVersion", newJString(EngineVersion))
  add(formData_614803, "Marker", newJString(Marker))
  add(formData_614803, "Engine", newJString(Engine))
  add(formData_614803, "Vpc", newJBool(Vpc))
  add(query_614802, "Action", newJString(Action))
  add(formData_614803, "LicenseModel", newJString(LicenseModel))
  if Filters != nil:
    formData_614803.add "Filters", Filters
  add(query_614802, "Version", newJString(Version))
  result = call_614801.call(nil, query_614802, nil, formData_614803, nil)

var postDescribeOrderableDBInstanceOptions* = Call_PostDescribeOrderableDBInstanceOptions_614780(
    name: "postDescribeOrderableDBInstanceOptions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeOrderableDBInstanceOptions",
    validator: validate_PostDescribeOrderableDBInstanceOptions_614781, base: "/",
    url: url_PostDescribeOrderableDBInstanceOptions_614782,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeOrderableDBInstanceOptions_614757 = ref object of OpenApiRestCall_612642
proc url_GetDescribeOrderableDBInstanceOptions_614759(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeOrderableDBInstanceOptions_614758(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> .
  ##   Engine: JString (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   LicenseModel: JString
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   Vpc: JBool
  ##      : The VPC filter value. Specify this parameter to show only the available VPC or non-VPC offerings.
  ##   EngineVersion: JString
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_614760 = query.getOrDefault("Marker")
  valid_614760 = validateParameter(valid_614760, JString, required = false,
                                 default = nil)
  if valid_614760 != nil:
    section.add "Marker", valid_614760
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_614761 = query.getOrDefault("Engine")
  valid_614761 = validateParameter(valid_614761, JString, required = true,
                                 default = nil)
  if valid_614761 != nil:
    section.add "Engine", valid_614761
  var valid_614762 = query.getOrDefault("LicenseModel")
  valid_614762 = validateParameter(valid_614762, JString, required = false,
                                 default = nil)
  if valid_614762 != nil:
    section.add "LicenseModel", valid_614762
  var valid_614763 = query.getOrDefault("Vpc")
  valid_614763 = validateParameter(valid_614763, JBool, required = false, default = nil)
  if valid_614763 != nil:
    section.add "Vpc", valid_614763
  var valid_614764 = query.getOrDefault("EngineVersion")
  valid_614764 = validateParameter(valid_614764, JString, required = false,
                                 default = nil)
  if valid_614764 != nil:
    section.add "EngineVersion", valid_614764
  var valid_614765 = query.getOrDefault("Action")
  valid_614765 = validateParameter(valid_614765, JString, required = true, default = newJString(
      "DescribeOrderableDBInstanceOptions"))
  if valid_614765 != nil:
    section.add "Action", valid_614765
  var valid_614766 = query.getOrDefault("Version")
  valid_614766 = validateParameter(valid_614766, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614766 != nil:
    section.add "Version", valid_614766
  var valid_614767 = query.getOrDefault("DBInstanceClass")
  valid_614767 = validateParameter(valid_614767, JString, required = false,
                                 default = nil)
  if valid_614767 != nil:
    section.add "DBInstanceClass", valid_614767
  var valid_614768 = query.getOrDefault("Filters")
  valid_614768 = validateParameter(valid_614768, JArray, required = false,
                                 default = nil)
  if valid_614768 != nil:
    section.add "Filters", valid_614768
  var valid_614769 = query.getOrDefault("MaxRecords")
  valid_614769 = validateParameter(valid_614769, JInt, required = false, default = nil)
  if valid_614769 != nil:
    section.add "MaxRecords", valid_614769
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614770 = header.getOrDefault("X-Amz-Signature")
  valid_614770 = validateParameter(valid_614770, JString, required = false,
                                 default = nil)
  if valid_614770 != nil:
    section.add "X-Amz-Signature", valid_614770
  var valid_614771 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614771 = validateParameter(valid_614771, JString, required = false,
                                 default = nil)
  if valid_614771 != nil:
    section.add "X-Amz-Content-Sha256", valid_614771
  var valid_614772 = header.getOrDefault("X-Amz-Date")
  valid_614772 = validateParameter(valid_614772, JString, required = false,
                                 default = nil)
  if valid_614772 != nil:
    section.add "X-Amz-Date", valid_614772
  var valid_614773 = header.getOrDefault("X-Amz-Credential")
  valid_614773 = validateParameter(valid_614773, JString, required = false,
                                 default = nil)
  if valid_614773 != nil:
    section.add "X-Amz-Credential", valid_614773
  var valid_614774 = header.getOrDefault("X-Amz-Security-Token")
  valid_614774 = validateParameter(valid_614774, JString, required = false,
                                 default = nil)
  if valid_614774 != nil:
    section.add "X-Amz-Security-Token", valid_614774
  var valid_614775 = header.getOrDefault("X-Amz-Algorithm")
  valid_614775 = validateParameter(valid_614775, JString, required = false,
                                 default = nil)
  if valid_614775 != nil:
    section.add "X-Amz-Algorithm", valid_614775
  var valid_614776 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614776 = validateParameter(valid_614776, JString, required = false,
                                 default = nil)
  if valid_614776 != nil:
    section.add "X-Amz-SignedHeaders", valid_614776
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614777: Call_GetDescribeOrderableDBInstanceOptions_614757;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  let valid = call_614777.validator(path, query, header, formData, body)
  let scheme = call_614777.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614777.url(scheme.get, call_614777.host, call_614777.base,
                         call_614777.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614777, url, valid)

proc call*(call_614778: Call_GetDescribeOrderableDBInstanceOptions_614757;
          Engine: string; Marker: string = ""; LicenseModel: string = "";
          Vpc: bool = false; EngineVersion: string = "";
          Action: string = "DescribeOrderableDBInstanceOptions";
          Version: string = "2014-10-31"; DBInstanceClass: string = "";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeOrderableDBInstanceOptions
  ## Returns a list of orderable DB instance options for the specified engine.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> .
  ##   Engine: string (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   LicenseModel: string
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   Vpc: bool
  ##      : The VPC filter value. Specify this parameter to show only the available VPC or non-VPC offerings.
  ##   EngineVersion: string
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_614779 = newJObject()
  add(query_614779, "Marker", newJString(Marker))
  add(query_614779, "Engine", newJString(Engine))
  add(query_614779, "LicenseModel", newJString(LicenseModel))
  add(query_614779, "Vpc", newJBool(Vpc))
  add(query_614779, "EngineVersion", newJString(EngineVersion))
  add(query_614779, "Action", newJString(Action))
  add(query_614779, "Version", newJString(Version))
  add(query_614779, "DBInstanceClass", newJString(DBInstanceClass))
  if Filters != nil:
    query_614779.add "Filters", Filters
  add(query_614779, "MaxRecords", newJInt(MaxRecords))
  result = call_614778.call(nil, query_614779, nil, nil, nil)

var getDescribeOrderableDBInstanceOptions* = Call_GetDescribeOrderableDBInstanceOptions_614757(
    name: "getDescribeOrderableDBInstanceOptions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeOrderableDBInstanceOptions",
    validator: validate_GetDescribeOrderableDBInstanceOptions_614758, base: "/",
    url: url_GetDescribeOrderableDBInstanceOptions_614759,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribePendingMaintenanceActions_614823 = ref object of OpenApiRestCall_612642
proc url_PostDescribePendingMaintenanceActions_614825(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribePendingMaintenanceActions_614824(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614826 = query.getOrDefault("Action")
  valid_614826 = validateParameter(valid_614826, JString, required = true, default = newJString(
      "DescribePendingMaintenanceActions"))
  if valid_614826 != nil:
    section.add "Action", valid_614826
  var valid_614827 = query.getOrDefault("Version")
  valid_614827 = validateParameter(valid_614827, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614827 != nil:
    section.add "Version", valid_614827
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614828 = header.getOrDefault("X-Amz-Signature")
  valid_614828 = validateParameter(valid_614828, JString, required = false,
                                 default = nil)
  if valid_614828 != nil:
    section.add "X-Amz-Signature", valid_614828
  var valid_614829 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614829 = validateParameter(valid_614829, JString, required = false,
                                 default = nil)
  if valid_614829 != nil:
    section.add "X-Amz-Content-Sha256", valid_614829
  var valid_614830 = header.getOrDefault("X-Amz-Date")
  valid_614830 = validateParameter(valid_614830, JString, required = false,
                                 default = nil)
  if valid_614830 != nil:
    section.add "X-Amz-Date", valid_614830
  var valid_614831 = header.getOrDefault("X-Amz-Credential")
  valid_614831 = validateParameter(valid_614831, JString, required = false,
                                 default = nil)
  if valid_614831 != nil:
    section.add "X-Amz-Credential", valid_614831
  var valid_614832 = header.getOrDefault("X-Amz-Security-Token")
  valid_614832 = validateParameter(valid_614832, JString, required = false,
                                 default = nil)
  if valid_614832 != nil:
    section.add "X-Amz-Security-Token", valid_614832
  var valid_614833 = header.getOrDefault("X-Amz-Algorithm")
  valid_614833 = validateParameter(valid_614833, JString, required = false,
                                 default = nil)
  if valid_614833 != nil:
    section.add "X-Amz-Algorithm", valid_614833
  var valid_614834 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614834 = validateParameter(valid_614834, JString, required = false,
                                 default = nil)
  if valid_614834 != nil:
    section.add "X-Amz-SignedHeaders", valid_614834
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>.
  ##   ResourceIdentifier: JString
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  section = newJObject()
  var valid_614835 = formData.getOrDefault("MaxRecords")
  valid_614835 = validateParameter(valid_614835, JInt, required = false, default = nil)
  if valid_614835 != nil:
    section.add "MaxRecords", valid_614835
  var valid_614836 = formData.getOrDefault("Marker")
  valid_614836 = validateParameter(valid_614836, JString, required = false,
                                 default = nil)
  if valid_614836 != nil:
    section.add "Marker", valid_614836
  var valid_614837 = formData.getOrDefault("ResourceIdentifier")
  valid_614837 = validateParameter(valid_614837, JString, required = false,
                                 default = nil)
  if valid_614837 != nil:
    section.add "ResourceIdentifier", valid_614837
  var valid_614838 = formData.getOrDefault("Filters")
  valid_614838 = validateParameter(valid_614838, JArray, required = false,
                                 default = nil)
  if valid_614838 != nil:
    section.add "Filters", valid_614838
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614839: Call_PostDescribePendingMaintenanceActions_614823;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  let valid = call_614839.validator(path, query, header, formData, body)
  let scheme = call_614839.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614839.url(scheme.get, call_614839.host, call_614839.base,
                         call_614839.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614839, url, valid)

proc call*(call_614840: Call_PostDescribePendingMaintenanceActions_614823;
          MaxRecords: int = 0; Marker: string = ""; ResourceIdentifier: string = "";
          Action: string = "DescribePendingMaintenanceActions";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribePendingMaintenanceActions
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>.
  ##   ResourceIdentifier: string
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   Version: string (required)
  var query_614841 = newJObject()
  var formData_614842 = newJObject()
  add(formData_614842, "MaxRecords", newJInt(MaxRecords))
  add(formData_614842, "Marker", newJString(Marker))
  add(formData_614842, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(query_614841, "Action", newJString(Action))
  if Filters != nil:
    formData_614842.add "Filters", Filters
  add(query_614841, "Version", newJString(Version))
  result = call_614840.call(nil, query_614841, nil, formData_614842, nil)

var postDescribePendingMaintenanceActions* = Call_PostDescribePendingMaintenanceActions_614823(
    name: "postDescribePendingMaintenanceActions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribePendingMaintenanceActions",
    validator: validate_PostDescribePendingMaintenanceActions_614824, base: "/",
    url: url_PostDescribePendingMaintenanceActions_614825,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribePendingMaintenanceActions_614804 = ref object of OpenApiRestCall_612642
proc url_GetDescribePendingMaintenanceActions_614806(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribePendingMaintenanceActions_614805(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceIdentifier: JString
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_614807 = query.getOrDefault("ResourceIdentifier")
  valid_614807 = validateParameter(valid_614807, JString, required = false,
                                 default = nil)
  if valid_614807 != nil:
    section.add "ResourceIdentifier", valid_614807
  var valid_614808 = query.getOrDefault("Marker")
  valid_614808 = validateParameter(valid_614808, JString, required = false,
                                 default = nil)
  if valid_614808 != nil:
    section.add "Marker", valid_614808
  var valid_614809 = query.getOrDefault("Action")
  valid_614809 = validateParameter(valid_614809, JString, required = true, default = newJString(
      "DescribePendingMaintenanceActions"))
  if valid_614809 != nil:
    section.add "Action", valid_614809
  var valid_614810 = query.getOrDefault("Version")
  valid_614810 = validateParameter(valid_614810, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614810 != nil:
    section.add "Version", valid_614810
  var valid_614811 = query.getOrDefault("Filters")
  valid_614811 = validateParameter(valid_614811, JArray, required = false,
                                 default = nil)
  if valid_614811 != nil:
    section.add "Filters", valid_614811
  var valid_614812 = query.getOrDefault("MaxRecords")
  valid_614812 = validateParameter(valid_614812, JInt, required = false, default = nil)
  if valid_614812 != nil:
    section.add "MaxRecords", valid_614812
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614813 = header.getOrDefault("X-Amz-Signature")
  valid_614813 = validateParameter(valid_614813, JString, required = false,
                                 default = nil)
  if valid_614813 != nil:
    section.add "X-Amz-Signature", valid_614813
  var valid_614814 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614814 = validateParameter(valid_614814, JString, required = false,
                                 default = nil)
  if valid_614814 != nil:
    section.add "X-Amz-Content-Sha256", valid_614814
  var valid_614815 = header.getOrDefault("X-Amz-Date")
  valid_614815 = validateParameter(valid_614815, JString, required = false,
                                 default = nil)
  if valid_614815 != nil:
    section.add "X-Amz-Date", valid_614815
  var valid_614816 = header.getOrDefault("X-Amz-Credential")
  valid_614816 = validateParameter(valid_614816, JString, required = false,
                                 default = nil)
  if valid_614816 != nil:
    section.add "X-Amz-Credential", valid_614816
  var valid_614817 = header.getOrDefault("X-Amz-Security-Token")
  valid_614817 = validateParameter(valid_614817, JString, required = false,
                                 default = nil)
  if valid_614817 != nil:
    section.add "X-Amz-Security-Token", valid_614817
  var valid_614818 = header.getOrDefault("X-Amz-Algorithm")
  valid_614818 = validateParameter(valid_614818, JString, required = false,
                                 default = nil)
  if valid_614818 != nil:
    section.add "X-Amz-Algorithm", valid_614818
  var valid_614819 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614819 = validateParameter(valid_614819, JString, required = false,
                                 default = nil)
  if valid_614819 != nil:
    section.add "X-Amz-SignedHeaders", valid_614819
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614820: Call_GetDescribePendingMaintenanceActions_614804;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  let valid = call_614820.validator(path, query, header, formData, body)
  let scheme = call_614820.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614820.url(scheme.get, call_614820.host, call_614820.base,
                         call_614820.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614820, url, valid)

proc call*(call_614821: Call_GetDescribePendingMaintenanceActions_614804;
          ResourceIdentifier: string = ""; Marker: string = "";
          Action: string = "DescribePendingMaintenanceActions";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribePendingMaintenanceActions
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ##   ResourceIdentifier: string
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_614822 = newJObject()
  add(query_614822, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(query_614822, "Marker", newJString(Marker))
  add(query_614822, "Action", newJString(Action))
  add(query_614822, "Version", newJString(Version))
  if Filters != nil:
    query_614822.add "Filters", Filters
  add(query_614822, "MaxRecords", newJInt(MaxRecords))
  result = call_614821.call(nil, query_614822, nil, nil, nil)

var getDescribePendingMaintenanceActions* = Call_GetDescribePendingMaintenanceActions_614804(
    name: "getDescribePendingMaintenanceActions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribePendingMaintenanceActions",
    validator: validate_GetDescribePendingMaintenanceActions_614805, base: "/",
    url: url_GetDescribePendingMaintenanceActions_614806,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeValidDBInstanceModifications_614859 = ref object of OpenApiRestCall_612642
proc url_PostDescribeValidDBInstanceModifications_614861(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeValidDBInstanceModifications_614860(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## You can call <a>DescribeValidDBInstanceModifications</a> to learn what modifications you can make to your DB instance. You can use this information when you call <a>ModifyDBInstance</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614862 = query.getOrDefault("Action")
  valid_614862 = validateParameter(valid_614862, JString, required = true, default = newJString(
      "DescribeValidDBInstanceModifications"))
  if valid_614862 != nil:
    section.add "Action", valid_614862
  var valid_614863 = query.getOrDefault("Version")
  valid_614863 = validateParameter(valid_614863, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614863 != nil:
    section.add "Version", valid_614863
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614864 = header.getOrDefault("X-Amz-Signature")
  valid_614864 = validateParameter(valid_614864, JString, required = false,
                                 default = nil)
  if valid_614864 != nil:
    section.add "X-Amz-Signature", valid_614864
  var valid_614865 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614865 = validateParameter(valid_614865, JString, required = false,
                                 default = nil)
  if valid_614865 != nil:
    section.add "X-Amz-Content-Sha256", valid_614865
  var valid_614866 = header.getOrDefault("X-Amz-Date")
  valid_614866 = validateParameter(valid_614866, JString, required = false,
                                 default = nil)
  if valid_614866 != nil:
    section.add "X-Amz-Date", valid_614866
  var valid_614867 = header.getOrDefault("X-Amz-Credential")
  valid_614867 = validateParameter(valid_614867, JString, required = false,
                                 default = nil)
  if valid_614867 != nil:
    section.add "X-Amz-Credential", valid_614867
  var valid_614868 = header.getOrDefault("X-Amz-Security-Token")
  valid_614868 = validateParameter(valid_614868, JString, required = false,
                                 default = nil)
  if valid_614868 != nil:
    section.add "X-Amz-Security-Token", valid_614868
  var valid_614869 = header.getOrDefault("X-Amz-Algorithm")
  valid_614869 = validateParameter(valid_614869, JString, required = false,
                                 default = nil)
  if valid_614869 != nil:
    section.add "X-Amz-Algorithm", valid_614869
  var valid_614870 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614870 = validateParameter(valid_614870, JString, required = false,
                                 default = nil)
  if valid_614870 != nil:
    section.add "X-Amz-SignedHeaders", valid_614870
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The customer identifier or the ARN of your DB instance.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_614871 = formData.getOrDefault("DBInstanceIdentifier")
  valid_614871 = validateParameter(valid_614871, JString, required = true,
                                 default = nil)
  if valid_614871 != nil:
    section.add "DBInstanceIdentifier", valid_614871
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614872: Call_PostDescribeValidDBInstanceModifications_614859;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## You can call <a>DescribeValidDBInstanceModifications</a> to learn what modifications you can make to your DB instance. You can use this information when you call <a>ModifyDBInstance</a>.
  ## 
  let valid = call_614872.validator(path, query, header, formData, body)
  let scheme = call_614872.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614872.url(scheme.get, call_614872.host, call_614872.base,
                         call_614872.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614872, url, valid)

proc call*(call_614873: Call_PostDescribeValidDBInstanceModifications_614859;
          DBInstanceIdentifier: string;
          Action: string = "DescribeValidDBInstanceModifications";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeValidDBInstanceModifications
  ## You can call <a>DescribeValidDBInstanceModifications</a> to learn what modifications you can make to your DB instance. You can use this information when you call <a>ModifyDBInstance</a>.
  ##   DBInstanceIdentifier: string (required)
  ##                       : The customer identifier or the ARN of your DB instance.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614874 = newJObject()
  var formData_614875 = newJObject()
  add(formData_614875, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_614874, "Action", newJString(Action))
  add(query_614874, "Version", newJString(Version))
  result = call_614873.call(nil, query_614874, nil, formData_614875, nil)

var postDescribeValidDBInstanceModifications* = Call_PostDescribeValidDBInstanceModifications_614859(
    name: "postDescribeValidDBInstanceModifications", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeValidDBInstanceModifications",
    validator: validate_PostDescribeValidDBInstanceModifications_614860,
    base: "/", url: url_PostDescribeValidDBInstanceModifications_614861,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeValidDBInstanceModifications_614843 = ref object of OpenApiRestCall_612642
proc url_GetDescribeValidDBInstanceModifications_614845(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeValidDBInstanceModifications_614844(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## You can call <a>DescribeValidDBInstanceModifications</a> to learn what modifications you can make to your DB instance. You can use this information when you call <a>ModifyDBInstance</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The customer identifier or the ARN of your DB instance.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_614846 = query.getOrDefault("DBInstanceIdentifier")
  valid_614846 = validateParameter(valid_614846, JString, required = true,
                                 default = nil)
  if valid_614846 != nil:
    section.add "DBInstanceIdentifier", valid_614846
  var valid_614847 = query.getOrDefault("Action")
  valid_614847 = validateParameter(valid_614847, JString, required = true, default = newJString(
      "DescribeValidDBInstanceModifications"))
  if valid_614847 != nil:
    section.add "Action", valid_614847
  var valid_614848 = query.getOrDefault("Version")
  valid_614848 = validateParameter(valid_614848, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614848 != nil:
    section.add "Version", valid_614848
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614849 = header.getOrDefault("X-Amz-Signature")
  valid_614849 = validateParameter(valid_614849, JString, required = false,
                                 default = nil)
  if valid_614849 != nil:
    section.add "X-Amz-Signature", valid_614849
  var valid_614850 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614850 = validateParameter(valid_614850, JString, required = false,
                                 default = nil)
  if valid_614850 != nil:
    section.add "X-Amz-Content-Sha256", valid_614850
  var valid_614851 = header.getOrDefault("X-Amz-Date")
  valid_614851 = validateParameter(valid_614851, JString, required = false,
                                 default = nil)
  if valid_614851 != nil:
    section.add "X-Amz-Date", valid_614851
  var valid_614852 = header.getOrDefault("X-Amz-Credential")
  valid_614852 = validateParameter(valid_614852, JString, required = false,
                                 default = nil)
  if valid_614852 != nil:
    section.add "X-Amz-Credential", valid_614852
  var valid_614853 = header.getOrDefault("X-Amz-Security-Token")
  valid_614853 = validateParameter(valid_614853, JString, required = false,
                                 default = nil)
  if valid_614853 != nil:
    section.add "X-Amz-Security-Token", valid_614853
  var valid_614854 = header.getOrDefault("X-Amz-Algorithm")
  valid_614854 = validateParameter(valid_614854, JString, required = false,
                                 default = nil)
  if valid_614854 != nil:
    section.add "X-Amz-Algorithm", valid_614854
  var valid_614855 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614855 = validateParameter(valid_614855, JString, required = false,
                                 default = nil)
  if valid_614855 != nil:
    section.add "X-Amz-SignedHeaders", valid_614855
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614856: Call_GetDescribeValidDBInstanceModifications_614843;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## You can call <a>DescribeValidDBInstanceModifications</a> to learn what modifications you can make to your DB instance. You can use this information when you call <a>ModifyDBInstance</a>.
  ## 
  let valid = call_614856.validator(path, query, header, formData, body)
  let scheme = call_614856.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614856.url(scheme.get, call_614856.host, call_614856.base,
                         call_614856.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614856, url, valid)

proc call*(call_614857: Call_GetDescribeValidDBInstanceModifications_614843;
          DBInstanceIdentifier: string;
          Action: string = "DescribeValidDBInstanceModifications";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeValidDBInstanceModifications
  ## You can call <a>DescribeValidDBInstanceModifications</a> to learn what modifications you can make to your DB instance. You can use this information when you call <a>ModifyDBInstance</a>.
  ##   DBInstanceIdentifier: string (required)
  ##                       : The customer identifier or the ARN of your DB instance.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614858 = newJObject()
  add(query_614858, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_614858, "Action", newJString(Action))
  add(query_614858, "Version", newJString(Version))
  result = call_614857.call(nil, query_614858, nil, nil, nil)

var getDescribeValidDBInstanceModifications* = Call_GetDescribeValidDBInstanceModifications_614843(
    name: "getDescribeValidDBInstanceModifications", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeValidDBInstanceModifications",
    validator: validate_GetDescribeValidDBInstanceModifications_614844, base: "/",
    url: url_GetDescribeValidDBInstanceModifications_614845,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostFailoverDBCluster_614893 = ref object of OpenApiRestCall_612642
proc url_PostFailoverDBCluster_614895(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostFailoverDBCluster_614894(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Read Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Neptune will automatically fail over to a Read Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614896 = query.getOrDefault("Action")
  valid_614896 = validateParameter(valid_614896, JString, required = true,
                                 default = newJString("FailoverDBCluster"))
  if valid_614896 != nil:
    section.add "Action", valid_614896
  var valid_614897 = query.getOrDefault("Version")
  valid_614897 = validateParameter(valid_614897, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614897 != nil:
    section.add "Version", valid_614897
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614898 = header.getOrDefault("X-Amz-Signature")
  valid_614898 = validateParameter(valid_614898, JString, required = false,
                                 default = nil)
  if valid_614898 != nil:
    section.add "X-Amz-Signature", valid_614898
  var valid_614899 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614899 = validateParameter(valid_614899, JString, required = false,
                                 default = nil)
  if valid_614899 != nil:
    section.add "X-Amz-Content-Sha256", valid_614899
  var valid_614900 = header.getOrDefault("X-Amz-Date")
  valid_614900 = validateParameter(valid_614900, JString, required = false,
                                 default = nil)
  if valid_614900 != nil:
    section.add "X-Amz-Date", valid_614900
  var valid_614901 = header.getOrDefault("X-Amz-Credential")
  valid_614901 = validateParameter(valid_614901, JString, required = false,
                                 default = nil)
  if valid_614901 != nil:
    section.add "X-Amz-Credential", valid_614901
  var valid_614902 = header.getOrDefault("X-Amz-Security-Token")
  valid_614902 = validateParameter(valid_614902, JString, required = false,
                                 default = nil)
  if valid_614902 != nil:
    section.add "X-Amz-Security-Token", valid_614902
  var valid_614903 = header.getOrDefault("X-Amz-Algorithm")
  valid_614903 = validateParameter(valid_614903, JString, required = false,
                                 default = nil)
  if valid_614903 != nil:
    section.add "X-Amz-Algorithm", valid_614903
  var valid_614904 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614904 = validateParameter(valid_614904, JString, required = false,
                                 default = nil)
  if valid_614904 != nil:
    section.add "X-Amz-SignedHeaders", valid_614904
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetDBInstanceIdentifier: JString
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Read Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   DBClusterIdentifier: JString
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  section = newJObject()
  var valid_614905 = formData.getOrDefault("TargetDBInstanceIdentifier")
  valid_614905 = validateParameter(valid_614905, JString, required = false,
                                 default = nil)
  if valid_614905 != nil:
    section.add "TargetDBInstanceIdentifier", valid_614905
  var valid_614906 = formData.getOrDefault("DBClusterIdentifier")
  valid_614906 = validateParameter(valid_614906, JString, required = false,
                                 default = nil)
  if valid_614906 != nil:
    section.add "DBClusterIdentifier", valid_614906
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614907: Call_PostFailoverDBCluster_614893; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Read Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Neptune will automatically fail over to a Read Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p>
  ## 
  let valid = call_614907.validator(path, query, header, formData, body)
  let scheme = call_614907.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614907.url(scheme.get, call_614907.host, call_614907.base,
                         call_614907.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614907, url, valid)

proc call*(call_614908: Call_PostFailoverDBCluster_614893;
          Action: string = "FailoverDBCluster";
          TargetDBInstanceIdentifier: string = ""; Version: string = "2014-10-31";
          DBClusterIdentifier: string = ""): Recallable =
  ## postFailoverDBCluster
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Read Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Neptune will automatically fail over to a Read Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p>
  ##   Action: string (required)
  ##   TargetDBInstanceIdentifier: string
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Read Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  var query_614909 = newJObject()
  var formData_614910 = newJObject()
  add(query_614909, "Action", newJString(Action))
  add(formData_614910, "TargetDBInstanceIdentifier",
      newJString(TargetDBInstanceIdentifier))
  add(query_614909, "Version", newJString(Version))
  add(formData_614910, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_614908.call(nil, query_614909, nil, formData_614910, nil)

var postFailoverDBCluster* = Call_PostFailoverDBCluster_614893(
    name: "postFailoverDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=FailoverDBCluster",
    validator: validate_PostFailoverDBCluster_614894, base: "/",
    url: url_PostFailoverDBCluster_614895, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetFailoverDBCluster_614876 = ref object of OpenApiRestCall_612642
proc url_GetFailoverDBCluster_614878(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetFailoverDBCluster_614877(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Read Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Neptune will automatically fail over to a Read Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   TargetDBInstanceIdentifier: JString
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Read Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614879 = query.getOrDefault("DBClusterIdentifier")
  valid_614879 = validateParameter(valid_614879, JString, required = false,
                                 default = nil)
  if valid_614879 != nil:
    section.add "DBClusterIdentifier", valid_614879
  var valid_614880 = query.getOrDefault("TargetDBInstanceIdentifier")
  valid_614880 = validateParameter(valid_614880, JString, required = false,
                                 default = nil)
  if valid_614880 != nil:
    section.add "TargetDBInstanceIdentifier", valid_614880
  var valid_614881 = query.getOrDefault("Action")
  valid_614881 = validateParameter(valid_614881, JString, required = true,
                                 default = newJString("FailoverDBCluster"))
  if valid_614881 != nil:
    section.add "Action", valid_614881
  var valid_614882 = query.getOrDefault("Version")
  valid_614882 = validateParameter(valid_614882, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614882 != nil:
    section.add "Version", valid_614882
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614883 = header.getOrDefault("X-Amz-Signature")
  valid_614883 = validateParameter(valid_614883, JString, required = false,
                                 default = nil)
  if valid_614883 != nil:
    section.add "X-Amz-Signature", valid_614883
  var valid_614884 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614884 = validateParameter(valid_614884, JString, required = false,
                                 default = nil)
  if valid_614884 != nil:
    section.add "X-Amz-Content-Sha256", valid_614884
  var valid_614885 = header.getOrDefault("X-Amz-Date")
  valid_614885 = validateParameter(valid_614885, JString, required = false,
                                 default = nil)
  if valid_614885 != nil:
    section.add "X-Amz-Date", valid_614885
  var valid_614886 = header.getOrDefault("X-Amz-Credential")
  valid_614886 = validateParameter(valid_614886, JString, required = false,
                                 default = nil)
  if valid_614886 != nil:
    section.add "X-Amz-Credential", valid_614886
  var valid_614887 = header.getOrDefault("X-Amz-Security-Token")
  valid_614887 = validateParameter(valid_614887, JString, required = false,
                                 default = nil)
  if valid_614887 != nil:
    section.add "X-Amz-Security-Token", valid_614887
  var valid_614888 = header.getOrDefault("X-Amz-Algorithm")
  valid_614888 = validateParameter(valid_614888, JString, required = false,
                                 default = nil)
  if valid_614888 != nil:
    section.add "X-Amz-Algorithm", valid_614888
  var valid_614889 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614889 = validateParameter(valid_614889, JString, required = false,
                                 default = nil)
  if valid_614889 != nil:
    section.add "X-Amz-SignedHeaders", valid_614889
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614890: Call_GetFailoverDBCluster_614876; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Read Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Neptune will automatically fail over to a Read Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p>
  ## 
  let valid = call_614890.validator(path, query, header, formData, body)
  let scheme = call_614890.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614890.url(scheme.get, call_614890.host, call_614890.base,
                         call_614890.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614890, url, valid)

proc call*(call_614891: Call_GetFailoverDBCluster_614876;
          DBClusterIdentifier: string = ""; TargetDBInstanceIdentifier: string = "";
          Action: string = "FailoverDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getFailoverDBCluster
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Read Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Neptune will automatically fail over to a Read Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p>
  ##   DBClusterIdentifier: string
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   TargetDBInstanceIdentifier: string
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Read Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614892 = newJObject()
  add(query_614892, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_614892, "TargetDBInstanceIdentifier",
      newJString(TargetDBInstanceIdentifier))
  add(query_614892, "Action", newJString(Action))
  add(query_614892, "Version", newJString(Version))
  result = call_614891.call(nil, query_614892, nil, nil, nil)

var getFailoverDBCluster* = Call_GetFailoverDBCluster_614876(
    name: "getFailoverDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=FailoverDBCluster",
    validator: validate_GetFailoverDBCluster_614877, base: "/",
    url: url_GetFailoverDBCluster_614878, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListTagsForResource_614928 = ref object of OpenApiRestCall_612642
proc url_PostListTagsForResource_614930(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListTagsForResource_614929(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists all tags on an Amazon Neptune resource.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614931 = query.getOrDefault("Action")
  valid_614931 = validateParameter(valid_614931, JString, required = true,
                                 default = newJString("ListTagsForResource"))
  if valid_614931 != nil:
    section.add "Action", valid_614931
  var valid_614932 = query.getOrDefault("Version")
  valid_614932 = validateParameter(valid_614932, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614932 != nil:
    section.add "Version", valid_614932
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614933 = header.getOrDefault("X-Amz-Signature")
  valid_614933 = validateParameter(valid_614933, JString, required = false,
                                 default = nil)
  if valid_614933 != nil:
    section.add "X-Amz-Signature", valid_614933
  var valid_614934 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614934 = validateParameter(valid_614934, JString, required = false,
                                 default = nil)
  if valid_614934 != nil:
    section.add "X-Amz-Content-Sha256", valid_614934
  var valid_614935 = header.getOrDefault("X-Amz-Date")
  valid_614935 = validateParameter(valid_614935, JString, required = false,
                                 default = nil)
  if valid_614935 != nil:
    section.add "X-Amz-Date", valid_614935
  var valid_614936 = header.getOrDefault("X-Amz-Credential")
  valid_614936 = validateParameter(valid_614936, JString, required = false,
                                 default = nil)
  if valid_614936 != nil:
    section.add "X-Amz-Credential", valid_614936
  var valid_614937 = header.getOrDefault("X-Amz-Security-Token")
  valid_614937 = validateParameter(valid_614937, JString, required = false,
                                 default = nil)
  if valid_614937 != nil:
    section.add "X-Amz-Security-Token", valid_614937
  var valid_614938 = header.getOrDefault("X-Amz-Algorithm")
  valid_614938 = validateParameter(valid_614938, JString, required = false,
                                 default = nil)
  if valid_614938 != nil:
    section.add "X-Amz-Algorithm", valid_614938
  var valid_614939 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614939 = validateParameter(valid_614939, JString, required = false,
                                 default = nil)
  if valid_614939 != nil:
    section.add "X-Amz-SignedHeaders", valid_614939
  result.add "header", section
  ## parameters in `formData` object:
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   ResourceName: JString (required)
  ##               : The Amazon Neptune resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  section = newJObject()
  var valid_614940 = formData.getOrDefault("Filters")
  valid_614940 = validateParameter(valid_614940, JArray, required = false,
                                 default = nil)
  if valid_614940 != nil:
    section.add "Filters", valid_614940
  assert formData != nil,
        "formData argument is necessary due to required `ResourceName` field"
  var valid_614941 = formData.getOrDefault("ResourceName")
  valid_614941 = validateParameter(valid_614941, JString, required = true,
                                 default = nil)
  if valid_614941 != nil:
    section.add "ResourceName", valid_614941
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614942: Call_PostListTagsForResource_614928; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists all tags on an Amazon Neptune resource.
  ## 
  let valid = call_614942.validator(path, query, header, formData, body)
  let scheme = call_614942.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614942.url(scheme.get, call_614942.host, call_614942.base,
                         call_614942.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614942, url, valid)

proc call*(call_614943: Call_PostListTagsForResource_614928; ResourceName: string;
          Action: string = "ListTagsForResource"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postListTagsForResource
  ## Lists all tags on an Amazon Neptune resource.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  ##   ResourceName: string (required)
  ##               : The Amazon Neptune resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  var query_614944 = newJObject()
  var formData_614945 = newJObject()
  add(query_614944, "Action", newJString(Action))
  if Filters != nil:
    formData_614945.add "Filters", Filters
  add(query_614944, "Version", newJString(Version))
  add(formData_614945, "ResourceName", newJString(ResourceName))
  result = call_614943.call(nil, query_614944, nil, formData_614945, nil)

var postListTagsForResource* = Call_PostListTagsForResource_614928(
    name: "postListTagsForResource", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ListTagsForResource",
    validator: validate_PostListTagsForResource_614929, base: "/",
    url: url_PostListTagsForResource_614930, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListTagsForResource_614911 = ref object of OpenApiRestCall_612642
proc url_GetListTagsForResource_614913(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListTagsForResource_614912(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists all tags on an Amazon Neptune resource.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceName: JString (required)
  ##               : The Amazon Neptune resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceName` field"
  var valid_614914 = query.getOrDefault("ResourceName")
  valid_614914 = validateParameter(valid_614914, JString, required = true,
                                 default = nil)
  if valid_614914 != nil:
    section.add "ResourceName", valid_614914
  var valid_614915 = query.getOrDefault("Action")
  valid_614915 = validateParameter(valid_614915, JString, required = true,
                                 default = newJString("ListTagsForResource"))
  if valid_614915 != nil:
    section.add "Action", valid_614915
  var valid_614916 = query.getOrDefault("Version")
  valid_614916 = validateParameter(valid_614916, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614916 != nil:
    section.add "Version", valid_614916
  var valid_614917 = query.getOrDefault("Filters")
  valid_614917 = validateParameter(valid_614917, JArray, required = false,
                                 default = nil)
  if valid_614917 != nil:
    section.add "Filters", valid_614917
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614918 = header.getOrDefault("X-Amz-Signature")
  valid_614918 = validateParameter(valid_614918, JString, required = false,
                                 default = nil)
  if valid_614918 != nil:
    section.add "X-Amz-Signature", valid_614918
  var valid_614919 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614919 = validateParameter(valid_614919, JString, required = false,
                                 default = nil)
  if valid_614919 != nil:
    section.add "X-Amz-Content-Sha256", valid_614919
  var valid_614920 = header.getOrDefault("X-Amz-Date")
  valid_614920 = validateParameter(valid_614920, JString, required = false,
                                 default = nil)
  if valid_614920 != nil:
    section.add "X-Amz-Date", valid_614920
  var valid_614921 = header.getOrDefault("X-Amz-Credential")
  valid_614921 = validateParameter(valid_614921, JString, required = false,
                                 default = nil)
  if valid_614921 != nil:
    section.add "X-Amz-Credential", valid_614921
  var valid_614922 = header.getOrDefault("X-Amz-Security-Token")
  valid_614922 = validateParameter(valid_614922, JString, required = false,
                                 default = nil)
  if valid_614922 != nil:
    section.add "X-Amz-Security-Token", valid_614922
  var valid_614923 = header.getOrDefault("X-Amz-Algorithm")
  valid_614923 = validateParameter(valid_614923, JString, required = false,
                                 default = nil)
  if valid_614923 != nil:
    section.add "X-Amz-Algorithm", valid_614923
  var valid_614924 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614924 = validateParameter(valid_614924, JString, required = false,
                                 default = nil)
  if valid_614924 != nil:
    section.add "X-Amz-SignedHeaders", valid_614924
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614925: Call_GetListTagsForResource_614911; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists all tags on an Amazon Neptune resource.
  ## 
  let valid = call_614925.validator(path, query, header, formData, body)
  let scheme = call_614925.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614925.url(scheme.get, call_614925.host, call_614925.base,
                         call_614925.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614925, url, valid)

proc call*(call_614926: Call_GetListTagsForResource_614911; ResourceName: string;
          Action: string = "ListTagsForResource"; Version: string = "2014-10-31";
          Filters: JsonNode = nil): Recallable =
  ## getListTagsForResource
  ## Lists all tags on an Amazon Neptune resource.
  ##   ResourceName: string (required)
  ##               : The Amazon Neptune resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  var query_614927 = newJObject()
  add(query_614927, "ResourceName", newJString(ResourceName))
  add(query_614927, "Action", newJString(Action))
  add(query_614927, "Version", newJString(Version))
  if Filters != nil:
    query_614927.add "Filters", Filters
  result = call_614926.call(nil, query_614927, nil, nil, nil)

var getListTagsForResource* = Call_GetListTagsForResource_614911(
    name: "getListTagsForResource", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ListTagsForResource",
    validator: validate_GetListTagsForResource_614912, base: "/",
    url: url_GetListTagsForResource_614913, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBCluster_614977 = ref object of OpenApiRestCall_612642
proc url_PostModifyDBCluster_614979(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBCluster_614978(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Modify a setting for a DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614980 = query.getOrDefault("Action")
  valid_614980 = validateParameter(valid_614980, JString, required = true,
                                 default = newJString("ModifyDBCluster"))
  if valid_614980 != nil:
    section.add "Action", valid_614980
  var valid_614981 = query.getOrDefault("Version")
  valid_614981 = validateParameter(valid_614981, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614981 != nil:
    section.add "Version", valid_614981
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614982 = header.getOrDefault("X-Amz-Signature")
  valid_614982 = validateParameter(valid_614982, JString, required = false,
                                 default = nil)
  if valid_614982 != nil:
    section.add "X-Amz-Signature", valid_614982
  var valid_614983 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614983 = validateParameter(valid_614983, JString, required = false,
                                 default = nil)
  if valid_614983 != nil:
    section.add "X-Amz-Content-Sha256", valid_614983
  var valid_614984 = header.getOrDefault("X-Amz-Date")
  valid_614984 = validateParameter(valid_614984, JString, required = false,
                                 default = nil)
  if valid_614984 != nil:
    section.add "X-Amz-Date", valid_614984
  var valid_614985 = header.getOrDefault("X-Amz-Credential")
  valid_614985 = validateParameter(valid_614985, JString, required = false,
                                 default = nil)
  if valid_614985 != nil:
    section.add "X-Amz-Credential", valid_614985
  var valid_614986 = header.getOrDefault("X-Amz-Security-Token")
  valid_614986 = validateParameter(valid_614986, JString, required = false,
                                 default = nil)
  if valid_614986 != nil:
    section.add "X-Amz-Security-Token", valid_614986
  var valid_614987 = header.getOrDefault("X-Amz-Algorithm")
  valid_614987 = validateParameter(valid_614987, JString, required = false,
                                 default = nil)
  if valid_614987 != nil:
    section.add "X-Amz-Algorithm", valid_614987
  var valid_614988 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614988 = validateParameter(valid_614988, JString, required = false,
                                 default = nil)
  if valid_614988 != nil:
    section.add "X-Amz-SignedHeaders", valid_614988
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.</p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter.</p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to disable.
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to enable.
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine. Currently, setting this parameter has no effect. To upgrade your database engine to the most recent release, use the <a>ApplyPendingMaintenanceAction</a> API.</p> <p>For a list of valid engine versions, see <a>CreateDBInstance</a>, or call <a>DescribeDBEngineVersions</a>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ApplyImmediately: JBool
  ##                   : <p>A value that specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is set to <code>false</code>, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values. If you set the <code>ApplyImmediately</code> parameter value to false, then changes to the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>Default: <code>false</code> </p>
  ##   OptionGroupName: JString
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   DBClusterParameterGroupName: JString
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   NewDBClusterIdentifier: JString
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  section = newJObject()
  var valid_614989 = formData.getOrDefault("Port")
  valid_614989 = validateParameter(valid_614989, JInt, required = false, default = nil)
  if valid_614989 != nil:
    section.add "Port", valid_614989
  var valid_614990 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_614990 = validateParameter(valid_614990, JString, required = false,
                                 default = nil)
  if valid_614990 != nil:
    section.add "PreferredMaintenanceWindow", valid_614990
  var valid_614991 = formData.getOrDefault("PreferredBackupWindow")
  valid_614991 = validateParameter(valid_614991, JString, required = false,
                                 default = nil)
  if valid_614991 != nil:
    section.add "PreferredBackupWindow", valid_614991
  var valid_614992 = formData.getOrDefault("MasterUserPassword")
  valid_614992 = validateParameter(valid_614992, JString, required = false,
                                 default = nil)
  if valid_614992 != nil:
    section.add "MasterUserPassword", valid_614992
  var valid_614993 = formData.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_614993 = validateParameter(valid_614993, JArray, required = false,
                                 default = nil)
  if valid_614993 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_614993
  var valid_614994 = formData.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_614994 = validateParameter(valid_614994, JArray, required = false,
                                 default = nil)
  if valid_614994 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_614994
  var valid_614995 = formData.getOrDefault("EngineVersion")
  valid_614995 = validateParameter(valid_614995, JString, required = false,
                                 default = nil)
  if valid_614995 != nil:
    section.add "EngineVersion", valid_614995
  var valid_614996 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_614996 = validateParameter(valid_614996, JArray, required = false,
                                 default = nil)
  if valid_614996 != nil:
    section.add "VpcSecurityGroupIds", valid_614996
  var valid_614997 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_614997 = validateParameter(valid_614997, JBool, required = false, default = nil)
  if valid_614997 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_614997
  var valid_614998 = formData.getOrDefault("BackupRetentionPeriod")
  valid_614998 = validateParameter(valid_614998, JInt, required = false, default = nil)
  if valid_614998 != nil:
    section.add "BackupRetentionPeriod", valid_614998
  var valid_614999 = formData.getOrDefault("ApplyImmediately")
  valid_614999 = validateParameter(valid_614999, JBool, required = false, default = nil)
  if valid_614999 != nil:
    section.add "ApplyImmediately", valid_614999
  var valid_615000 = formData.getOrDefault("OptionGroupName")
  valid_615000 = validateParameter(valid_615000, JString, required = false,
                                 default = nil)
  if valid_615000 != nil:
    section.add "OptionGroupName", valid_615000
  var valid_615001 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_615001 = validateParameter(valid_615001, JString, required = false,
                                 default = nil)
  if valid_615001 != nil:
    section.add "DBClusterParameterGroupName", valid_615001
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_615002 = formData.getOrDefault("DBClusterIdentifier")
  valid_615002 = validateParameter(valid_615002, JString, required = true,
                                 default = nil)
  if valid_615002 != nil:
    section.add "DBClusterIdentifier", valid_615002
  var valid_615003 = formData.getOrDefault("DeletionProtection")
  valid_615003 = validateParameter(valid_615003, JBool, required = false, default = nil)
  if valid_615003 != nil:
    section.add "DeletionProtection", valid_615003
  var valid_615004 = formData.getOrDefault("NewDBClusterIdentifier")
  valid_615004 = validateParameter(valid_615004, JString, required = false,
                                 default = nil)
  if valid_615004 != nil:
    section.add "NewDBClusterIdentifier", valid_615004
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615005: Call_PostModifyDBCluster_614977; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modify a setting for a DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
  ## 
  let valid = call_615005.validator(path, query, header, formData, body)
  let scheme = call_615005.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615005.url(scheme.get, call_615005.host, call_615005.base,
                         call_615005.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615005, url, valid)

proc call*(call_615006: Call_PostModifyDBCluster_614977;
          DBClusterIdentifier: string; Port: int = 0;
          PreferredMaintenanceWindow: string = "";
          PreferredBackupWindow: string = ""; MasterUserPassword: string = "";
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          EngineVersion: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false;
          BackupRetentionPeriod: int = 0; ApplyImmediately: bool = false;
          Action: string = "ModifyDBCluster"; OptionGroupName: string = "";
          DBClusterParameterGroupName: string = ""; Version: string = "2014-10-31";
          DeletionProtection: bool = false; NewDBClusterIdentifier: string = ""): Recallable =
  ## postModifyDBCluster
  ## Modify a setting for a DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
  ##   Port: int
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.</p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter.</p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to disable.
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to enable.
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine. Currently, setting this parameter has no effect. To upgrade your database engine to the most recent release, use the <a>ApplyPendingMaintenanceAction</a> API.</p> <p>For a list of valid engine versions, see <a>CreateDBInstance</a>, or call <a>DescribeDBEngineVersions</a>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ApplyImmediately: bool
  ##                   : <p>A value that specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is set to <code>false</code>, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values. If you set the <code>ApplyImmediately</code> parameter value to false, then changes to the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>Default: <code>false</code> </p>
  ##   Action: string (required)
  ##   OptionGroupName: string
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   DBClusterParameterGroupName: string
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   NewDBClusterIdentifier: string
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  var query_615007 = newJObject()
  var formData_615008 = newJObject()
  add(formData_615008, "Port", newJInt(Port))
  add(formData_615008, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_615008, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_615008, "MasterUserPassword", newJString(MasterUserPassword))
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    formData_615008.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                       CloudwatchLogsExportConfigurationDisableLogTypes
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    formData_615008.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                       CloudwatchLogsExportConfigurationEnableLogTypes
  add(formData_615008, "EngineVersion", newJString(EngineVersion))
  if VpcSecurityGroupIds != nil:
    formData_615008.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_615008, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_615008, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_615008, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_615007, "Action", newJString(Action))
  add(formData_615008, "OptionGroupName", newJString(OptionGroupName))
  add(formData_615008, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_615007, "Version", newJString(Version))
  add(formData_615008, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_615008, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_615008, "NewDBClusterIdentifier",
      newJString(NewDBClusterIdentifier))
  result = call_615006.call(nil, query_615007, nil, formData_615008, nil)

var postModifyDBCluster* = Call_PostModifyDBCluster_614977(
    name: "postModifyDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBCluster",
    validator: validate_PostModifyDBCluster_614978, base: "/",
    url: url_PostModifyDBCluster_614979, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBCluster_614946 = ref object of OpenApiRestCall_612642
proc url_GetModifyDBCluster_614948(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBCluster_614947(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Modify a setting for a DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   DBClusterParameterGroupName: JString
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to enable.
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to disable.
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine. Currently, setting this parameter has no effect. To upgrade your database engine to the most recent release, use the <a>ApplyPendingMaintenanceAction</a> API.</p> <p>For a list of valid engine versions, see <a>CreateDBInstance</a>, or call <a>DescribeDBEngineVersions</a>.</p>
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : <p>A value that specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is set to <code>false</code>, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values. If you set the <code>ApplyImmediately</code> parameter value to false, then changes to the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>Default: <code>false</code> </p>
  ##   NewDBClusterIdentifier: JString
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   Port: JInt
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: JString
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   Version: JString (required)
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter.</p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.</p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  section = newJObject()
  var valid_614949 = query.getOrDefault("DeletionProtection")
  valid_614949 = validateParameter(valid_614949, JBool, required = false, default = nil)
  if valid_614949 != nil:
    section.add "DeletionProtection", valid_614949
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_614950 = query.getOrDefault("DBClusterIdentifier")
  valid_614950 = validateParameter(valid_614950, JString, required = true,
                                 default = nil)
  if valid_614950 != nil:
    section.add "DBClusterIdentifier", valid_614950
  var valid_614951 = query.getOrDefault("DBClusterParameterGroupName")
  valid_614951 = validateParameter(valid_614951, JString, required = false,
                                 default = nil)
  if valid_614951 != nil:
    section.add "DBClusterParameterGroupName", valid_614951
  var valid_614952 = query.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_614952 = validateParameter(valid_614952, JArray, required = false,
                                 default = nil)
  if valid_614952 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_614952
  var valid_614953 = query.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_614953 = validateParameter(valid_614953, JArray, required = false,
                                 default = nil)
  if valid_614953 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_614953
  var valid_614954 = query.getOrDefault("BackupRetentionPeriod")
  valid_614954 = validateParameter(valid_614954, JInt, required = false, default = nil)
  if valid_614954 != nil:
    section.add "BackupRetentionPeriod", valid_614954
  var valid_614955 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_614955 = validateParameter(valid_614955, JBool, required = false, default = nil)
  if valid_614955 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_614955
  var valid_614956 = query.getOrDefault("EngineVersion")
  valid_614956 = validateParameter(valid_614956, JString, required = false,
                                 default = nil)
  if valid_614956 != nil:
    section.add "EngineVersion", valid_614956
  var valid_614957 = query.getOrDefault("Action")
  valid_614957 = validateParameter(valid_614957, JString, required = true,
                                 default = newJString("ModifyDBCluster"))
  if valid_614957 != nil:
    section.add "Action", valid_614957
  var valid_614958 = query.getOrDefault("ApplyImmediately")
  valid_614958 = validateParameter(valid_614958, JBool, required = false, default = nil)
  if valid_614958 != nil:
    section.add "ApplyImmediately", valid_614958
  var valid_614959 = query.getOrDefault("NewDBClusterIdentifier")
  valid_614959 = validateParameter(valid_614959, JString, required = false,
                                 default = nil)
  if valid_614959 != nil:
    section.add "NewDBClusterIdentifier", valid_614959
  var valid_614960 = query.getOrDefault("Port")
  valid_614960 = validateParameter(valid_614960, JInt, required = false, default = nil)
  if valid_614960 != nil:
    section.add "Port", valid_614960
  var valid_614961 = query.getOrDefault("VpcSecurityGroupIds")
  valid_614961 = validateParameter(valid_614961, JArray, required = false,
                                 default = nil)
  if valid_614961 != nil:
    section.add "VpcSecurityGroupIds", valid_614961
  var valid_614962 = query.getOrDefault("MasterUserPassword")
  valid_614962 = validateParameter(valid_614962, JString, required = false,
                                 default = nil)
  if valid_614962 != nil:
    section.add "MasterUserPassword", valid_614962
  var valid_614963 = query.getOrDefault("OptionGroupName")
  valid_614963 = validateParameter(valid_614963, JString, required = false,
                                 default = nil)
  if valid_614963 != nil:
    section.add "OptionGroupName", valid_614963
  var valid_614964 = query.getOrDefault("Version")
  valid_614964 = validateParameter(valid_614964, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614964 != nil:
    section.add "Version", valid_614964
  var valid_614965 = query.getOrDefault("PreferredBackupWindow")
  valid_614965 = validateParameter(valid_614965, JString, required = false,
                                 default = nil)
  if valid_614965 != nil:
    section.add "PreferredBackupWindow", valid_614965
  var valid_614966 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_614966 = validateParameter(valid_614966, JString, required = false,
                                 default = nil)
  if valid_614966 != nil:
    section.add "PreferredMaintenanceWindow", valid_614966
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614967 = header.getOrDefault("X-Amz-Signature")
  valid_614967 = validateParameter(valid_614967, JString, required = false,
                                 default = nil)
  if valid_614967 != nil:
    section.add "X-Amz-Signature", valid_614967
  var valid_614968 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614968 = validateParameter(valid_614968, JString, required = false,
                                 default = nil)
  if valid_614968 != nil:
    section.add "X-Amz-Content-Sha256", valid_614968
  var valid_614969 = header.getOrDefault("X-Amz-Date")
  valid_614969 = validateParameter(valid_614969, JString, required = false,
                                 default = nil)
  if valid_614969 != nil:
    section.add "X-Amz-Date", valid_614969
  var valid_614970 = header.getOrDefault("X-Amz-Credential")
  valid_614970 = validateParameter(valid_614970, JString, required = false,
                                 default = nil)
  if valid_614970 != nil:
    section.add "X-Amz-Credential", valid_614970
  var valid_614971 = header.getOrDefault("X-Amz-Security-Token")
  valid_614971 = validateParameter(valid_614971, JString, required = false,
                                 default = nil)
  if valid_614971 != nil:
    section.add "X-Amz-Security-Token", valid_614971
  var valid_614972 = header.getOrDefault("X-Amz-Algorithm")
  valid_614972 = validateParameter(valid_614972, JString, required = false,
                                 default = nil)
  if valid_614972 != nil:
    section.add "X-Amz-Algorithm", valid_614972
  var valid_614973 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614973 = validateParameter(valid_614973, JString, required = false,
                                 default = nil)
  if valid_614973 != nil:
    section.add "X-Amz-SignedHeaders", valid_614973
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614974: Call_GetModifyDBCluster_614946; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modify a setting for a DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
  ## 
  let valid = call_614974.validator(path, query, header, formData, body)
  let scheme = call_614974.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614974.url(scheme.get, call_614974.host, call_614974.base,
                         call_614974.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614974, url, valid)

proc call*(call_614975: Call_GetModifyDBCluster_614946;
          DBClusterIdentifier: string; DeletionProtection: bool = false;
          DBClusterParameterGroupName: string = "";
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          BackupRetentionPeriod: int = 0;
          EnableIAMDatabaseAuthentication: bool = false; EngineVersion: string = "";
          Action: string = "ModifyDBCluster"; ApplyImmediately: bool = false;
          NewDBClusterIdentifier: string = ""; Port: int = 0;
          VpcSecurityGroupIds: JsonNode = nil; MasterUserPassword: string = "";
          OptionGroupName: string = ""; Version: string = "2014-10-31";
          PreferredBackupWindow: string = "";
          PreferredMaintenanceWindow: string = ""): Recallable =
  ## getModifyDBCluster
  ## Modify a setting for a DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   DBClusterParameterGroupName: string
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to enable.
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to disable.
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine. Currently, setting this parameter has no effect. To upgrade your database engine to the most recent release, use the <a>ApplyPendingMaintenanceAction</a> API.</p> <p>For a list of valid engine versions, see <a>CreateDBInstance</a>, or call <a>DescribeDBEngineVersions</a>.</p>
  ##   Action: string (required)
  ##   ApplyImmediately: bool
  ##                   : <p>A value that specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is set to <code>false</code>, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values. If you set the <code>ApplyImmediately</code> parameter value to false, then changes to the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>Default: <code>false</code> </p>
  ##   NewDBClusterIdentifier: string
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   Port: int
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: string
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   Version: string (required)
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter.</p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.</p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  var query_614976 = newJObject()
  add(query_614976, "DeletionProtection", newJBool(DeletionProtection))
  add(query_614976, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_614976, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    query_614976.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                    CloudwatchLogsExportConfigurationEnableLogTypes
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    query_614976.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                    CloudwatchLogsExportConfigurationDisableLogTypes
  add(query_614976, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_614976, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_614976, "EngineVersion", newJString(EngineVersion))
  add(query_614976, "Action", newJString(Action))
  add(query_614976, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_614976, "NewDBClusterIdentifier", newJString(NewDBClusterIdentifier))
  add(query_614976, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    query_614976.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_614976, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_614976, "OptionGroupName", newJString(OptionGroupName))
  add(query_614976, "Version", newJString(Version))
  add(query_614976, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_614976, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  result = call_614975.call(nil, query_614976, nil, nil, nil)

var getModifyDBCluster* = Call_GetModifyDBCluster_614946(
    name: "getModifyDBCluster", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=ModifyDBCluster", validator: validate_GetModifyDBCluster_614947,
    base: "/", url: url_GetModifyDBCluster_614948,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBClusterParameterGroup_615026 = ref object of OpenApiRestCall_612642
proc url_PostModifyDBClusterParameterGroup_615028(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBClusterParameterGroup_615027(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615029 = query.getOrDefault("Action")
  valid_615029 = validateParameter(valid_615029, JString, required = true, default = newJString(
      "ModifyDBClusterParameterGroup"))
  if valid_615029 != nil:
    section.add "Action", valid_615029
  var valid_615030 = query.getOrDefault("Version")
  valid_615030 = validateParameter(valid_615030, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615030 != nil:
    section.add "Version", valid_615030
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615031 = header.getOrDefault("X-Amz-Signature")
  valid_615031 = validateParameter(valid_615031, JString, required = false,
                                 default = nil)
  if valid_615031 != nil:
    section.add "X-Amz-Signature", valid_615031
  var valid_615032 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615032 = validateParameter(valid_615032, JString, required = false,
                                 default = nil)
  if valid_615032 != nil:
    section.add "X-Amz-Content-Sha256", valid_615032
  var valid_615033 = header.getOrDefault("X-Amz-Date")
  valid_615033 = validateParameter(valid_615033, JString, required = false,
                                 default = nil)
  if valid_615033 != nil:
    section.add "X-Amz-Date", valid_615033
  var valid_615034 = header.getOrDefault("X-Amz-Credential")
  valid_615034 = validateParameter(valid_615034, JString, required = false,
                                 default = nil)
  if valid_615034 != nil:
    section.add "X-Amz-Credential", valid_615034
  var valid_615035 = header.getOrDefault("X-Amz-Security-Token")
  valid_615035 = validateParameter(valid_615035, JString, required = false,
                                 default = nil)
  if valid_615035 != nil:
    section.add "X-Amz-Security-Token", valid_615035
  var valid_615036 = header.getOrDefault("X-Amz-Algorithm")
  valid_615036 = validateParameter(valid_615036, JString, required = false,
                                 default = nil)
  if valid_615036 != nil:
    section.add "X-Amz-Algorithm", valid_615036
  var valid_615037 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615037 = validateParameter(valid_615037, JString, required = false,
                                 default = nil)
  if valid_615037 != nil:
    section.add "X-Amz-SignedHeaders", valid_615037
  result.add "header", section
  ## parameters in `formData` object:
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to modify.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Parameters` field"
  var valid_615038 = formData.getOrDefault("Parameters")
  valid_615038 = validateParameter(valid_615038, JArray, required = true, default = nil)
  if valid_615038 != nil:
    section.add "Parameters", valid_615038
  var valid_615039 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_615039 = validateParameter(valid_615039, JString, required = true,
                                 default = nil)
  if valid_615039 != nil:
    section.add "DBClusterParameterGroupName", valid_615039
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615040: Call_PostModifyDBClusterParameterGroup_615026;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_615040.validator(path, query, header, formData, body)
  let scheme = call_615040.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615040.url(scheme.get, call_615040.host, call_615040.base,
                         call_615040.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615040, url, valid)

proc call*(call_615041: Call_PostModifyDBClusterParameterGroup_615026;
          Parameters: JsonNode; DBClusterParameterGroupName: string;
          Action: string = "ModifyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postModifyDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ##   Action: string (required)
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to modify.
  ##   Version: string (required)
  var query_615042 = newJObject()
  var formData_615043 = newJObject()
  add(query_615042, "Action", newJString(Action))
  if Parameters != nil:
    formData_615043.add "Parameters", Parameters
  add(formData_615043, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_615042, "Version", newJString(Version))
  result = call_615041.call(nil, query_615042, nil, formData_615043, nil)

var postModifyDBClusterParameterGroup* = Call_PostModifyDBClusterParameterGroup_615026(
    name: "postModifyDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterParameterGroup",
    validator: validate_PostModifyDBClusterParameterGroup_615027, base: "/",
    url: url_PostModifyDBClusterParameterGroup_615028,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBClusterParameterGroup_615009 = ref object of OpenApiRestCall_612642
proc url_GetModifyDBClusterParameterGroup_615011(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBClusterParameterGroup_615010(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to modify.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Parameters` field"
  var valid_615012 = query.getOrDefault("Parameters")
  valid_615012 = validateParameter(valid_615012, JArray, required = true, default = nil)
  if valid_615012 != nil:
    section.add "Parameters", valid_615012
  var valid_615013 = query.getOrDefault("DBClusterParameterGroupName")
  valid_615013 = validateParameter(valid_615013, JString, required = true,
                                 default = nil)
  if valid_615013 != nil:
    section.add "DBClusterParameterGroupName", valid_615013
  var valid_615014 = query.getOrDefault("Action")
  valid_615014 = validateParameter(valid_615014, JString, required = true, default = newJString(
      "ModifyDBClusterParameterGroup"))
  if valid_615014 != nil:
    section.add "Action", valid_615014
  var valid_615015 = query.getOrDefault("Version")
  valid_615015 = validateParameter(valid_615015, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615015 != nil:
    section.add "Version", valid_615015
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615016 = header.getOrDefault("X-Amz-Signature")
  valid_615016 = validateParameter(valid_615016, JString, required = false,
                                 default = nil)
  if valid_615016 != nil:
    section.add "X-Amz-Signature", valid_615016
  var valid_615017 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615017 = validateParameter(valid_615017, JString, required = false,
                                 default = nil)
  if valid_615017 != nil:
    section.add "X-Amz-Content-Sha256", valid_615017
  var valid_615018 = header.getOrDefault("X-Amz-Date")
  valid_615018 = validateParameter(valid_615018, JString, required = false,
                                 default = nil)
  if valid_615018 != nil:
    section.add "X-Amz-Date", valid_615018
  var valid_615019 = header.getOrDefault("X-Amz-Credential")
  valid_615019 = validateParameter(valid_615019, JString, required = false,
                                 default = nil)
  if valid_615019 != nil:
    section.add "X-Amz-Credential", valid_615019
  var valid_615020 = header.getOrDefault("X-Amz-Security-Token")
  valid_615020 = validateParameter(valid_615020, JString, required = false,
                                 default = nil)
  if valid_615020 != nil:
    section.add "X-Amz-Security-Token", valid_615020
  var valid_615021 = header.getOrDefault("X-Amz-Algorithm")
  valid_615021 = validateParameter(valid_615021, JString, required = false,
                                 default = nil)
  if valid_615021 != nil:
    section.add "X-Amz-Algorithm", valid_615021
  var valid_615022 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615022 = validateParameter(valid_615022, JString, required = false,
                                 default = nil)
  if valid_615022 != nil:
    section.add "X-Amz-SignedHeaders", valid_615022
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615023: Call_GetModifyDBClusterParameterGroup_615009;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_615023.validator(path, query, header, formData, body)
  let scheme = call_615023.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615023.url(scheme.get, call_615023.host, call_615023.base,
                         call_615023.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615023, url, valid)

proc call*(call_615024: Call_GetModifyDBClusterParameterGroup_615009;
          Parameters: JsonNode; DBClusterParameterGroupName: string;
          Action: string = "ModifyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getModifyDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to modify.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615025 = newJObject()
  if Parameters != nil:
    query_615025.add "Parameters", Parameters
  add(query_615025, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_615025, "Action", newJString(Action))
  add(query_615025, "Version", newJString(Version))
  result = call_615024.call(nil, query_615025, nil, nil, nil)

var getModifyDBClusterParameterGroup* = Call_GetModifyDBClusterParameterGroup_615009(
    name: "getModifyDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterParameterGroup",
    validator: validate_GetModifyDBClusterParameterGroup_615010, base: "/",
    url: url_GetModifyDBClusterParameterGroup_615011,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBClusterSnapshotAttribute_615063 = ref object of OpenApiRestCall_612642
proc url_PostModifyDBClusterSnapshotAttribute_615065(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBClusterSnapshotAttribute_615064(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <a>DescribeDBClusterSnapshotAttributes</a> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615066 = query.getOrDefault("Action")
  valid_615066 = validateParameter(valid_615066, JString, required = true, default = newJString(
      "ModifyDBClusterSnapshotAttribute"))
  if valid_615066 != nil:
    section.add "Action", valid_615066
  var valid_615067 = query.getOrDefault("Version")
  valid_615067 = validateParameter(valid_615067, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615067 != nil:
    section.add "Version", valid_615067
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615068 = header.getOrDefault("X-Amz-Signature")
  valid_615068 = validateParameter(valid_615068, JString, required = false,
                                 default = nil)
  if valid_615068 != nil:
    section.add "X-Amz-Signature", valid_615068
  var valid_615069 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615069 = validateParameter(valid_615069, JString, required = false,
                                 default = nil)
  if valid_615069 != nil:
    section.add "X-Amz-Content-Sha256", valid_615069
  var valid_615070 = header.getOrDefault("X-Amz-Date")
  valid_615070 = validateParameter(valid_615070, JString, required = false,
                                 default = nil)
  if valid_615070 != nil:
    section.add "X-Amz-Date", valid_615070
  var valid_615071 = header.getOrDefault("X-Amz-Credential")
  valid_615071 = validateParameter(valid_615071, JString, required = false,
                                 default = nil)
  if valid_615071 != nil:
    section.add "X-Amz-Credential", valid_615071
  var valid_615072 = header.getOrDefault("X-Amz-Security-Token")
  valid_615072 = validateParameter(valid_615072, JString, required = false,
                                 default = nil)
  if valid_615072 != nil:
    section.add "X-Amz-Security-Token", valid_615072
  var valid_615073 = header.getOrDefault("X-Amz-Algorithm")
  valid_615073 = validateParameter(valid_615073, JString, required = false,
                                 default = nil)
  if valid_615073 != nil:
    section.add "X-Amz-Algorithm", valid_615073
  var valid_615074 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615074 = validateParameter(valid_615074, JString, required = false,
                                 default = nil)
  if valid_615074 != nil:
    section.add "X-Amz-SignedHeaders", valid_615074
  result.add "header", section
  ## parameters in `formData` object:
  ##   AttributeName: JString (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AttributeName` field"
  var valid_615075 = formData.getOrDefault("AttributeName")
  valid_615075 = validateParameter(valid_615075, JString, required = true,
                                 default = nil)
  if valid_615075 != nil:
    section.add "AttributeName", valid_615075
  var valid_615076 = formData.getOrDefault("ValuesToAdd")
  valid_615076 = validateParameter(valid_615076, JArray, required = false,
                                 default = nil)
  if valid_615076 != nil:
    section.add "ValuesToAdd", valid_615076
  var valid_615077 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_615077 = validateParameter(valid_615077, JString, required = true,
                                 default = nil)
  if valid_615077 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_615077
  var valid_615078 = formData.getOrDefault("ValuesToRemove")
  valid_615078 = validateParameter(valid_615078, JArray, required = false,
                                 default = nil)
  if valid_615078 != nil:
    section.add "ValuesToRemove", valid_615078
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615079: Call_PostModifyDBClusterSnapshotAttribute_615063;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <a>DescribeDBClusterSnapshotAttributes</a> API action.</p>
  ## 
  let valid = call_615079.validator(path, query, header, formData, body)
  let scheme = call_615079.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615079.url(scheme.get, call_615079.host, call_615079.base,
                         call_615079.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615079, url, valid)

proc call*(call_615080: Call_PostModifyDBClusterSnapshotAttribute_615063;
          AttributeName: string; DBClusterSnapshotIdentifier: string;
          ValuesToAdd: JsonNode = nil;
          Action: string = "ModifyDBClusterSnapshotAttribute";
          ValuesToRemove: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBClusterSnapshotAttribute
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <a>DescribeDBClusterSnapshotAttributes</a> API action.</p>
  ##   AttributeName: string (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   Action: string (required)
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   Version: string (required)
  var query_615081 = newJObject()
  var formData_615082 = newJObject()
  add(formData_615082, "AttributeName", newJString(AttributeName))
  if ValuesToAdd != nil:
    formData_615082.add "ValuesToAdd", ValuesToAdd
  add(formData_615082, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_615081, "Action", newJString(Action))
  if ValuesToRemove != nil:
    formData_615082.add "ValuesToRemove", ValuesToRemove
  add(query_615081, "Version", newJString(Version))
  result = call_615080.call(nil, query_615081, nil, formData_615082, nil)

var postModifyDBClusterSnapshotAttribute* = Call_PostModifyDBClusterSnapshotAttribute_615063(
    name: "postModifyDBClusterSnapshotAttribute", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterSnapshotAttribute",
    validator: validate_PostModifyDBClusterSnapshotAttribute_615064, base: "/",
    url: url_PostModifyDBClusterSnapshotAttribute_615065,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBClusterSnapshotAttribute_615044 = ref object of OpenApiRestCall_612642
proc url_GetModifyDBClusterSnapshotAttribute_615046(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBClusterSnapshotAttribute_615045(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <a>DescribeDBClusterSnapshotAttributes</a> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   Action: JString (required)
  ##   AttributeName: JString (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_615047 = query.getOrDefault("ValuesToRemove")
  valid_615047 = validateParameter(valid_615047, JArray, required = false,
                                 default = nil)
  if valid_615047 != nil:
    section.add "ValuesToRemove", valid_615047
  assert query != nil, "query argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_615048 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_615048 = validateParameter(valid_615048, JString, required = true,
                                 default = nil)
  if valid_615048 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_615048
  var valid_615049 = query.getOrDefault("Action")
  valid_615049 = validateParameter(valid_615049, JString, required = true, default = newJString(
      "ModifyDBClusterSnapshotAttribute"))
  if valid_615049 != nil:
    section.add "Action", valid_615049
  var valid_615050 = query.getOrDefault("AttributeName")
  valid_615050 = validateParameter(valid_615050, JString, required = true,
                                 default = nil)
  if valid_615050 != nil:
    section.add "AttributeName", valid_615050
  var valid_615051 = query.getOrDefault("ValuesToAdd")
  valid_615051 = validateParameter(valid_615051, JArray, required = false,
                                 default = nil)
  if valid_615051 != nil:
    section.add "ValuesToAdd", valid_615051
  var valid_615052 = query.getOrDefault("Version")
  valid_615052 = validateParameter(valid_615052, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615052 != nil:
    section.add "Version", valid_615052
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615053 = header.getOrDefault("X-Amz-Signature")
  valid_615053 = validateParameter(valid_615053, JString, required = false,
                                 default = nil)
  if valid_615053 != nil:
    section.add "X-Amz-Signature", valid_615053
  var valid_615054 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615054 = validateParameter(valid_615054, JString, required = false,
                                 default = nil)
  if valid_615054 != nil:
    section.add "X-Amz-Content-Sha256", valid_615054
  var valid_615055 = header.getOrDefault("X-Amz-Date")
  valid_615055 = validateParameter(valid_615055, JString, required = false,
                                 default = nil)
  if valid_615055 != nil:
    section.add "X-Amz-Date", valid_615055
  var valid_615056 = header.getOrDefault("X-Amz-Credential")
  valid_615056 = validateParameter(valid_615056, JString, required = false,
                                 default = nil)
  if valid_615056 != nil:
    section.add "X-Amz-Credential", valid_615056
  var valid_615057 = header.getOrDefault("X-Amz-Security-Token")
  valid_615057 = validateParameter(valid_615057, JString, required = false,
                                 default = nil)
  if valid_615057 != nil:
    section.add "X-Amz-Security-Token", valid_615057
  var valid_615058 = header.getOrDefault("X-Amz-Algorithm")
  valid_615058 = validateParameter(valid_615058, JString, required = false,
                                 default = nil)
  if valid_615058 != nil:
    section.add "X-Amz-Algorithm", valid_615058
  var valid_615059 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615059 = validateParameter(valid_615059, JString, required = false,
                                 default = nil)
  if valid_615059 != nil:
    section.add "X-Amz-SignedHeaders", valid_615059
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615060: Call_GetModifyDBClusterSnapshotAttribute_615044;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <a>DescribeDBClusterSnapshotAttributes</a> API action.</p>
  ## 
  let valid = call_615060.validator(path, query, header, formData, body)
  let scheme = call_615060.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615060.url(scheme.get, call_615060.host, call_615060.base,
                         call_615060.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615060, url, valid)

proc call*(call_615061: Call_GetModifyDBClusterSnapshotAttribute_615044;
          DBClusterSnapshotIdentifier: string; AttributeName: string;
          ValuesToRemove: JsonNode = nil;
          Action: string = "ModifyDBClusterSnapshotAttribute";
          ValuesToAdd: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBClusterSnapshotAttribute
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <a>DescribeDBClusterSnapshotAttributes</a> API action.</p>
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   Action: string (required)
  ##   AttributeName: string (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Version: string (required)
  var query_615062 = newJObject()
  if ValuesToRemove != nil:
    query_615062.add "ValuesToRemove", ValuesToRemove
  add(query_615062, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_615062, "Action", newJString(Action))
  add(query_615062, "AttributeName", newJString(AttributeName))
  if ValuesToAdd != nil:
    query_615062.add "ValuesToAdd", ValuesToAdd
  add(query_615062, "Version", newJString(Version))
  result = call_615061.call(nil, query_615062, nil, nil, nil)

var getModifyDBClusterSnapshotAttribute* = Call_GetModifyDBClusterSnapshotAttribute_615044(
    name: "getModifyDBClusterSnapshotAttribute", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterSnapshotAttribute",
    validator: validate_GetModifyDBClusterSnapshotAttribute_615045, base: "/",
    url: url_GetModifyDBClusterSnapshotAttribute_615046,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBInstance_615136 = ref object of OpenApiRestCall_612642
proc url_PostModifyDBInstance_615138(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBInstance_615137(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <a>DescribeValidDBInstanceModifications</a> before you call <a>ModifyDBInstance</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615139 = query.getOrDefault("Action")
  valid_615139 = validateParameter(valid_615139, JString, required = true,
                                 default = newJString("ModifyDBInstance"))
  if valid_615139 != nil:
    section.add "Action", valid_615139
  var valid_615140 = query.getOrDefault("Version")
  valid_615140 = validateParameter(valid_615140, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615140 != nil:
    section.add "Version", valid_615140
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_615141 = header.getOrDefault("X-Amz-Security-Token")
  valid_615141 = validateParameter(valid_615141, JString, required = false,
                                 default = nil)
  if valid_615141 != nil:
    section.add "X-Amz-Security-Token", valid_615141
  var valid_615142 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615142 = validateParameter(valid_615142, JString, required = false,
                                 default = nil)
  if valid_615142 != nil:
    section.add "X-Amz-SignedHeaders", valid_615142
  var valid_615143 = header.getOrDefault("X-Amz-Signature")
  valid_615143 = validateParameter(valid_615143, JString, required = false,
                                 default = nil)
  if valid_615143 != nil:
    section.add "X-Amz-Signature", valid_615143
  var valid_615144 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615144 = validateParameter(valid_615144, JString, required = false,
                                 default = nil)
  if valid_615144 != nil:
    section.add "X-Amz-Content-Sha256", valid_615144
  var valid_615145 = header.getOrDefault("X-Amz-Date")
  valid_615145 = validateParameter(valid_615145, JString, required = false,
                                 default = nil)
  if valid_615145 != nil:
    section.add "X-Amz-Date", valid_615145
  var valid_615146 = header.getOrDefault("X-Amz-Credential")
  valid_615146 = validateParameter(valid_615146, JString, required = false,
                                 default = nil)
  if valid_615146 != nil:
    section.add "X-Amz-Credential", valid_615146
  var valid_615147 = header.getOrDefault("X-Amz-Algorithm")
  valid_615147 = validateParameter(valid_615147, JString, required = false,
                                 default = nil)
  if valid_615147 != nil:
    section.add "X-Amz-Algorithm", valid_615147
  result.add "header", section
  ## parameters in `formData` object:
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which a Read Replica is promoted to the primary instance after a failure of the existing primary instance.</p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   MultiAZ: JBool
  ##          : Specifies if the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   CACertificateIdentifier: JString
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   EnablePerformanceInsights: JBool
  ##                            :  <i>(Not supported by Neptune)</i> 
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   DBSubnetGroupName: JString
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC.</p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you specify <code>true</code> for the <code>ApplyImmediately</code> parameter.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   AllowMajorVersionUpgrade: JBool
  ##                           : Indicates that major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.
  ##   StorageType: JString
  ##              : Not supported.
  ##   CopyTagsToSnapshot: JBool
  ##                     : True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   AllocatedStorage: JInt
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Not applicable. Storage is managed by the DB Cluster.</p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  ##   DBInstanceClass: JString
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions.</p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is specified as <code>true</code> for this request.</p> <p>Default: Uses existing setting</p>
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled.</p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : Not applicable.
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to disable.
  ##   Domain: JString
  ##         : Not supported.
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to enable.
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. The db instance will NOT be rebooted automatically and the parameter changes will NOT be applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   EngineVersion: JString
  ##                : The version number of the database engine to upgrade to. Currently, setting this parameter has no effect. To upgrade your database engine to the most recent release, use the <a>ApplyPendingMaintenanceAction</a> API.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>You can enable IAM database authentication for the following database engines</p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: <code>false</code> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: Uses existing setting</p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          :  Indicates that minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage will result if this parameter is set to <code>true</code> during the maintenance window, and a newer minor version is available, and Neptune has enabled auto patching for that engine version.
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   ApplyImmediately: JBool
  ##                   : <p>Specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance.</p> <p> If this parameter is set to <code>false</code>, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot.</p> <p>Default: <code>false</code> </p>
  ##   Iops: JInt
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the instance.</p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.</p> <p>Default: Uses existing setting</p>
  ##   PubliclyAccessible: JBool
  ##                     : This flag should no longer be used.
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              :  <i>(Not supported by Neptune)</i> 
  ##   LicenseModel: JString
  ##               : Not supported.
  ##   DomainIAMRoleName: JString
  ##                    : Not supported
  ##   OptionGroupName: JString
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   NewDBInstanceIdentifier: JString
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot will occur immediately if you set <code>Apply Immediately</code> to true, or will occur during the next maintenance window if <code>Apply Immediately</code> to false. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   DBPortNumber: JInt
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> Default: <code>8182</code> </p>
  section = newJObject()
  var valid_615148 = formData.getOrDefault("PromotionTier")
  valid_615148 = validateParameter(valid_615148, JInt, required = false, default = nil)
  if valid_615148 != nil:
    section.add "PromotionTier", valid_615148
  var valid_615149 = formData.getOrDefault("MultiAZ")
  valid_615149 = validateParameter(valid_615149, JBool, required = false, default = nil)
  if valid_615149 != nil:
    section.add "MultiAZ", valid_615149
  var valid_615150 = formData.getOrDefault("MonitoringRoleArn")
  valid_615150 = validateParameter(valid_615150, JString, required = false,
                                 default = nil)
  if valid_615150 != nil:
    section.add "MonitoringRoleArn", valid_615150
  var valid_615151 = formData.getOrDefault("CACertificateIdentifier")
  valid_615151 = validateParameter(valid_615151, JString, required = false,
                                 default = nil)
  if valid_615151 != nil:
    section.add "CACertificateIdentifier", valid_615151
  var valid_615152 = formData.getOrDefault("MonitoringInterval")
  valid_615152 = validateParameter(valid_615152, JInt, required = false, default = nil)
  if valid_615152 != nil:
    section.add "MonitoringInterval", valid_615152
  var valid_615153 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_615153 = validateParameter(valid_615153, JArray, required = false,
                                 default = nil)
  if valid_615153 != nil:
    section.add "VpcSecurityGroupIds", valid_615153
  var valid_615154 = formData.getOrDefault("EnablePerformanceInsights")
  valid_615154 = validateParameter(valid_615154, JBool, required = false, default = nil)
  if valid_615154 != nil:
    section.add "EnablePerformanceInsights", valid_615154
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_615155 = formData.getOrDefault("DBInstanceIdentifier")
  valid_615155 = validateParameter(valid_615155, JString, required = true,
                                 default = nil)
  if valid_615155 != nil:
    section.add "DBInstanceIdentifier", valid_615155
  var valid_615156 = formData.getOrDefault("TdeCredentialArn")
  valid_615156 = validateParameter(valid_615156, JString, required = false,
                                 default = nil)
  if valid_615156 != nil:
    section.add "TdeCredentialArn", valid_615156
  var valid_615157 = formData.getOrDefault("DBSubnetGroupName")
  valid_615157 = validateParameter(valid_615157, JString, required = false,
                                 default = nil)
  if valid_615157 != nil:
    section.add "DBSubnetGroupName", valid_615157
  var valid_615158 = formData.getOrDefault("AllowMajorVersionUpgrade")
  valid_615158 = validateParameter(valid_615158, JBool, required = false, default = nil)
  if valid_615158 != nil:
    section.add "AllowMajorVersionUpgrade", valid_615158
  var valid_615159 = formData.getOrDefault("StorageType")
  valid_615159 = validateParameter(valid_615159, JString, required = false,
                                 default = nil)
  if valid_615159 != nil:
    section.add "StorageType", valid_615159
  var valid_615160 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_615160 = validateParameter(valid_615160, JBool, required = false, default = nil)
  if valid_615160 != nil:
    section.add "CopyTagsToSnapshot", valid_615160
  var valid_615161 = formData.getOrDefault("DeletionProtection")
  valid_615161 = validateParameter(valid_615161, JBool, required = false, default = nil)
  if valid_615161 != nil:
    section.add "DeletionProtection", valid_615161
  var valid_615162 = formData.getOrDefault("AllocatedStorage")
  valid_615162 = validateParameter(valid_615162, JInt, required = false, default = nil)
  if valid_615162 != nil:
    section.add "AllocatedStorage", valid_615162
  var valid_615163 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_615163 = validateParameter(valid_615163, JString, required = false,
                                 default = nil)
  if valid_615163 != nil:
    section.add "PreferredMaintenanceWindow", valid_615163
  var valid_615164 = formData.getOrDefault("DBInstanceClass")
  valid_615164 = validateParameter(valid_615164, JString, required = false,
                                 default = nil)
  if valid_615164 != nil:
    section.add "DBInstanceClass", valid_615164
  var valid_615165 = formData.getOrDefault("PreferredBackupWindow")
  valid_615165 = validateParameter(valid_615165, JString, required = false,
                                 default = nil)
  if valid_615165 != nil:
    section.add "PreferredBackupWindow", valid_615165
  var valid_615166 = formData.getOrDefault("MasterUserPassword")
  valid_615166 = validateParameter(valid_615166, JString, required = false,
                                 default = nil)
  if valid_615166 != nil:
    section.add "MasterUserPassword", valid_615166
  var valid_615167 = formData.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_615167 = validateParameter(valid_615167, JArray, required = false,
                                 default = nil)
  if valid_615167 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_615167
  var valid_615168 = formData.getOrDefault("Domain")
  valid_615168 = validateParameter(valid_615168, JString, required = false,
                                 default = nil)
  if valid_615168 != nil:
    section.add "Domain", valid_615168
  var valid_615169 = formData.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_615169 = validateParameter(valid_615169, JArray, required = false,
                                 default = nil)
  if valid_615169 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_615169
  var valid_615170 = formData.getOrDefault("DBParameterGroupName")
  valid_615170 = validateParameter(valid_615170, JString, required = false,
                                 default = nil)
  if valid_615170 != nil:
    section.add "DBParameterGroupName", valid_615170
  var valid_615171 = formData.getOrDefault("EngineVersion")
  valid_615171 = validateParameter(valid_615171, JString, required = false,
                                 default = nil)
  if valid_615171 != nil:
    section.add "EngineVersion", valid_615171
  var valid_615172 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_615172 = validateParameter(valid_615172, JBool, required = false, default = nil)
  if valid_615172 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_615172
  var valid_615173 = formData.getOrDefault("BackupRetentionPeriod")
  valid_615173 = validateParameter(valid_615173, JInt, required = false, default = nil)
  if valid_615173 != nil:
    section.add "BackupRetentionPeriod", valid_615173
  var valid_615174 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_615174 = validateParameter(valid_615174, JBool, required = false, default = nil)
  if valid_615174 != nil:
    section.add "AutoMinorVersionUpgrade", valid_615174
  var valid_615175 = formData.getOrDefault("TdeCredentialPassword")
  valid_615175 = validateParameter(valid_615175, JString, required = false,
                                 default = nil)
  if valid_615175 != nil:
    section.add "TdeCredentialPassword", valid_615175
  var valid_615176 = formData.getOrDefault("ApplyImmediately")
  valid_615176 = validateParameter(valid_615176, JBool, required = false, default = nil)
  if valid_615176 != nil:
    section.add "ApplyImmediately", valid_615176
  var valid_615177 = formData.getOrDefault("Iops")
  valid_615177 = validateParameter(valid_615177, JInt, required = false, default = nil)
  if valid_615177 != nil:
    section.add "Iops", valid_615177
  var valid_615178 = formData.getOrDefault("PubliclyAccessible")
  valid_615178 = validateParameter(valid_615178, JBool, required = false, default = nil)
  if valid_615178 != nil:
    section.add "PubliclyAccessible", valid_615178
  var valid_615179 = formData.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_615179 = validateParameter(valid_615179, JString, required = false,
                                 default = nil)
  if valid_615179 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_615179
  var valid_615180 = formData.getOrDefault("LicenseModel")
  valid_615180 = validateParameter(valid_615180, JString, required = false,
                                 default = nil)
  if valid_615180 != nil:
    section.add "LicenseModel", valid_615180
  var valid_615181 = formData.getOrDefault("DomainIAMRoleName")
  valid_615181 = validateParameter(valid_615181, JString, required = false,
                                 default = nil)
  if valid_615181 != nil:
    section.add "DomainIAMRoleName", valid_615181
  var valid_615182 = formData.getOrDefault("OptionGroupName")
  valid_615182 = validateParameter(valid_615182, JString, required = false,
                                 default = nil)
  if valid_615182 != nil:
    section.add "OptionGroupName", valid_615182
  var valid_615183 = formData.getOrDefault("NewDBInstanceIdentifier")
  valid_615183 = validateParameter(valid_615183, JString, required = false,
                                 default = nil)
  if valid_615183 != nil:
    section.add "NewDBInstanceIdentifier", valid_615183
  var valid_615184 = formData.getOrDefault("DBSecurityGroups")
  valid_615184 = validateParameter(valid_615184, JArray, required = false,
                                 default = nil)
  if valid_615184 != nil:
    section.add "DBSecurityGroups", valid_615184
  var valid_615185 = formData.getOrDefault("DBPortNumber")
  valid_615185 = validateParameter(valid_615185, JInt, required = false, default = nil)
  if valid_615185 != nil:
    section.add "DBPortNumber", valid_615185
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615186: Call_PostModifyDBInstance_615136; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <a>DescribeValidDBInstanceModifications</a> before you call <a>ModifyDBInstance</a>.
  ## 
  let valid = call_615186.validator(path, query, header, formData, body)
  let scheme = call_615186.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615186.url(scheme.get, call_615186.host, call_615186.base,
                         call_615186.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615186, url, valid)

proc call*(call_615187: Call_PostModifyDBInstance_615136;
          DBInstanceIdentifier: string; PromotionTier: int = 0; MultiAZ: bool = false;
          MonitoringRoleArn: string = ""; CACertificateIdentifier: string = "";
          MonitoringInterval: int = 0; VpcSecurityGroupIds: JsonNode = nil;
          EnablePerformanceInsights: bool = false; TdeCredentialArn: string = "";
          Action: string = "ModifyDBInstance"; DBSubnetGroupName: string = "";
          AllowMajorVersionUpgrade: bool = false; StorageType: string = "";
          CopyTagsToSnapshot: bool = false; DeletionProtection: bool = false;
          AllocatedStorage: int = 0; PreferredMaintenanceWindow: string = "";
          DBInstanceClass: string = ""; PreferredBackupWindow: string = "";
          MasterUserPassword: string = "";
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          Domain: string = "";
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          DBParameterGroupName: string = ""; EngineVersion: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          BackupRetentionPeriod: int = 0; AutoMinorVersionUpgrade: bool = false;
          TdeCredentialPassword: string = ""; ApplyImmediately: bool = false;
          Iops: int = 0; PubliclyAccessible: bool = false;
          PerformanceInsightsKMSKeyId: string = ""; LicenseModel: string = "";
          DomainIAMRoleName: string = ""; OptionGroupName: string = "";
          NewDBInstanceIdentifier: string = ""; Version: string = "2014-10-31";
          DBSecurityGroups: JsonNode = nil; DBPortNumber: int = 0): Recallable =
  ## postModifyDBInstance
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <a>DescribeValidDBInstanceModifications</a> before you call <a>ModifyDBInstance</a>.
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which a Read Replica is promoted to the primary instance after a failure of the existing primary instance.</p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   MultiAZ: bool
  ##          : Specifies if the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   CACertificateIdentifier: string
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   EnablePerformanceInsights: bool
  ##                            :  <i>(Not supported by Neptune)</i> 
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   Action: string (required)
  ##   DBSubnetGroupName: string
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC.</p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you specify <code>true</code> for the <code>ApplyImmediately</code> parameter.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   AllowMajorVersionUpgrade: bool
  ##                           : Indicates that major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.
  ##   StorageType: string
  ##              : Not supported.
  ##   CopyTagsToSnapshot: bool
  ##                     : True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   AllocatedStorage: int
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Not applicable. Storage is managed by the DB Cluster.</p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  ##   DBInstanceClass: string
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions.</p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is specified as <code>true</code> for this request.</p> <p>Default: Uses existing setting</p>
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled.</p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : Not applicable.
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to disable.
  ##   Domain: string
  ##         : Not supported.
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to enable.
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. The db instance will NOT be rebooted automatically and the parameter changes will NOT be applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   EngineVersion: string
  ##                : The version number of the database engine to upgrade to. Currently, setting this parameter has no effect. To upgrade your database engine to the most recent release, use the <a>ApplyPendingMaintenanceAction</a> API.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>You can enable IAM database authentication for the following database engines</p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: <code>false</code> </p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: Uses existing setting</p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          :  Indicates that minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage will result if this parameter is set to <code>true</code> during the maintenance window, and a newer minor version is available, and Neptune has enabled auto patching for that engine version.
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   ApplyImmediately: bool
  ##                   : <p>Specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance.</p> <p> If this parameter is set to <code>false</code>, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot.</p> <p>Default: <code>false</code> </p>
  ##   Iops: int
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the instance.</p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.</p> <p>Default: Uses existing setting</p>
  ##   PubliclyAccessible: bool
  ##                     : This flag should no longer be used.
  ##   PerformanceInsightsKMSKeyId: string
  ##                              :  <i>(Not supported by Neptune)</i> 
  ##   LicenseModel: string
  ##               : Not supported.
  ##   DomainIAMRoleName: string
  ##                    : Not supported
  ##   OptionGroupName: string
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   NewDBInstanceIdentifier: string
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot will occur immediately if you set <code>Apply Immediately</code> to true, or will occur during the next maintenance window if <code>Apply Immediately</code> to false. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   Version: string (required)
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   DBPortNumber: int
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> Default: <code>8182</code> </p>
  var query_615188 = newJObject()
  var formData_615189 = newJObject()
  add(formData_615189, "PromotionTier", newJInt(PromotionTier))
  add(formData_615189, "MultiAZ", newJBool(MultiAZ))
  add(formData_615189, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(formData_615189, "CACertificateIdentifier",
      newJString(CACertificateIdentifier))
  add(formData_615189, "MonitoringInterval", newJInt(MonitoringInterval))
  if VpcSecurityGroupIds != nil:
    formData_615189.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_615189, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(formData_615189, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_615189, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(query_615188, "Action", newJString(Action))
  add(formData_615189, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_615189, "AllowMajorVersionUpgrade",
      newJBool(AllowMajorVersionUpgrade))
  add(formData_615189, "StorageType", newJString(StorageType))
  add(formData_615189, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_615189, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_615189, "AllocatedStorage", newJInt(AllocatedStorage))
  add(formData_615189, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_615189, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_615189, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_615189, "MasterUserPassword", newJString(MasterUserPassword))
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    formData_615189.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                       CloudwatchLogsExportConfigurationDisableLogTypes
  add(formData_615189, "Domain", newJString(Domain))
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    formData_615189.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                       CloudwatchLogsExportConfigurationEnableLogTypes
  add(formData_615189, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_615189, "EngineVersion", newJString(EngineVersion))
  add(formData_615189, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_615189, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_615189, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_615189, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(formData_615189, "ApplyImmediately", newJBool(ApplyImmediately))
  add(formData_615189, "Iops", newJInt(Iops))
  add(formData_615189, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_615189, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(formData_615189, "LicenseModel", newJString(LicenseModel))
  add(formData_615189, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(formData_615189, "OptionGroupName", newJString(OptionGroupName))
  add(formData_615189, "NewDBInstanceIdentifier",
      newJString(NewDBInstanceIdentifier))
  add(query_615188, "Version", newJString(Version))
  if DBSecurityGroups != nil:
    formData_615189.add "DBSecurityGroups", DBSecurityGroups
  add(formData_615189, "DBPortNumber", newJInt(DBPortNumber))
  result = call_615187.call(nil, query_615188, nil, formData_615189, nil)

var postModifyDBInstance* = Call_PostModifyDBInstance_615136(
    name: "postModifyDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBInstance",
    validator: validate_PostModifyDBInstance_615137, base: "/",
    url: url_PostModifyDBInstance_615138, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBInstance_615083 = ref object of OpenApiRestCall_612642
proc url_GetModifyDBInstance_615085(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBInstance_615084(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <a>DescribeValidDBInstanceModifications</a> before you call <a>ModifyDBInstance</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CopyTagsToSnapshot: JBool
  ##                     : True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   DBPortNumber: JInt
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> Default: <code>8182</code> </p>
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to enable.
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to disable.
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: Uses existing setting</p>
  ##   EngineVersion: JString
  ##                : The version number of the database engine to upgrade to. Currently, setting this parameter has no effect. To upgrade your database engine to the most recent release, use the <a>ApplyPendingMaintenanceAction</a> API.
  ##   Action: JString (required)
  ##   Domain: JString
  ##         : Not supported.
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   AllocatedStorage: JInt
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Not applicable. Storage is managed by the DB Cluster.</p>
  ##   EnablePerformanceInsights: JBool
  ##                            :  <i>(Not supported by Neptune)</i> 
  ##   PubliclyAccessible: JBool
  ##                     : This flag should no longer be used.
  ##   NewDBInstanceIdentifier: JString
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot will occur immediately if you set <code>Apply Immediately</code> to true, or will occur during the next maintenance window if <code>Apply Immediately</code> to false. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. The db instance will NOT be rebooted automatically and the parameter changes will NOT be applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   LicenseModel: JString
  ##               : Not supported.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which a Read Replica is promoted to the primary instance after a failure of the existing primary instance.</p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   CACertificateIdentifier: JString
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   StorageType: JString
  ##              : Not supported.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>You can enable IAM database authentication for the following database engines</p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: <code>false</code> </p>
  ##   MultiAZ: JBool
  ##          : Specifies if the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   ApplyImmediately: JBool
  ##                   : <p>Specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance.</p> <p> If this parameter is set to <code>false</code>, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot.</p> <p>Default: <code>false</code> </p>
  ##   AllowMajorVersionUpgrade: JBool
  ##                           : Indicates that major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.
  ##   MasterUserPassword: JString
  ##                     : Not applicable.
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              :  <i>(Not supported by Neptune)</i> 
  ##   OptionGroupName: JString
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   Version: JString (required)
  ##   DBSubnetGroupName: JString
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC.</p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you specify <code>true</code> for the <code>ApplyImmediately</code> parameter.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   DBInstanceClass: JString
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions.</p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is specified as <code>true</code> for this request.</p> <p>Default: Uses existing setting</p>
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled.</p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          :  Indicates that minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage will result if this parameter is set to <code>true</code> during the maintenance window, and a newer minor version is available, and Neptune has enabled auto patching for that engine version.
  ##   Iops: JInt
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the instance.</p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.</p> <p>Default: Uses existing setting</p>
  ##   DomainIAMRoleName: JString
  ##                    : Not supported
  section = newJObject()
  var valid_615086 = query.getOrDefault("CopyTagsToSnapshot")
  valid_615086 = validateParameter(valid_615086, JBool, required = false, default = nil)
  if valid_615086 != nil:
    section.add "CopyTagsToSnapshot", valid_615086
  var valid_615087 = query.getOrDefault("MonitoringInterval")
  valid_615087 = validateParameter(valid_615087, JInt, required = false, default = nil)
  if valid_615087 != nil:
    section.add "MonitoringInterval", valid_615087
  var valid_615088 = query.getOrDefault("MonitoringRoleArn")
  valid_615088 = validateParameter(valid_615088, JString, required = false,
                                 default = nil)
  if valid_615088 != nil:
    section.add "MonitoringRoleArn", valid_615088
  var valid_615089 = query.getOrDefault("DBPortNumber")
  valid_615089 = validateParameter(valid_615089, JInt, required = false, default = nil)
  if valid_615089 != nil:
    section.add "DBPortNumber", valid_615089
  var valid_615090 = query.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_615090 = validateParameter(valid_615090, JArray, required = false,
                                 default = nil)
  if valid_615090 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_615090
  var valid_615091 = query.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_615091 = validateParameter(valid_615091, JArray, required = false,
                                 default = nil)
  if valid_615091 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_615091
  var valid_615092 = query.getOrDefault("BackupRetentionPeriod")
  valid_615092 = validateParameter(valid_615092, JInt, required = false, default = nil)
  if valid_615092 != nil:
    section.add "BackupRetentionPeriod", valid_615092
  var valid_615093 = query.getOrDefault("EngineVersion")
  valid_615093 = validateParameter(valid_615093, JString, required = false,
                                 default = nil)
  if valid_615093 != nil:
    section.add "EngineVersion", valid_615093
  var valid_615094 = query.getOrDefault("Action")
  valid_615094 = validateParameter(valid_615094, JString, required = true,
                                 default = newJString("ModifyDBInstance"))
  if valid_615094 != nil:
    section.add "Action", valid_615094
  var valid_615095 = query.getOrDefault("Domain")
  valid_615095 = validateParameter(valid_615095, JString, required = false,
                                 default = nil)
  if valid_615095 != nil:
    section.add "Domain", valid_615095
  var valid_615096 = query.getOrDefault("VpcSecurityGroupIds")
  valid_615096 = validateParameter(valid_615096, JArray, required = false,
                                 default = nil)
  if valid_615096 != nil:
    section.add "VpcSecurityGroupIds", valid_615096
  var valid_615097 = query.getOrDefault("AllocatedStorage")
  valid_615097 = validateParameter(valid_615097, JInt, required = false, default = nil)
  if valid_615097 != nil:
    section.add "AllocatedStorage", valid_615097
  var valid_615098 = query.getOrDefault("EnablePerformanceInsights")
  valid_615098 = validateParameter(valid_615098, JBool, required = false, default = nil)
  if valid_615098 != nil:
    section.add "EnablePerformanceInsights", valid_615098
  var valid_615099 = query.getOrDefault("PubliclyAccessible")
  valid_615099 = validateParameter(valid_615099, JBool, required = false, default = nil)
  if valid_615099 != nil:
    section.add "PubliclyAccessible", valid_615099
  var valid_615100 = query.getOrDefault("NewDBInstanceIdentifier")
  valid_615100 = validateParameter(valid_615100, JString, required = false,
                                 default = nil)
  if valid_615100 != nil:
    section.add "NewDBInstanceIdentifier", valid_615100
  var valid_615101 = query.getOrDefault("TdeCredentialPassword")
  valid_615101 = validateParameter(valid_615101, JString, required = false,
                                 default = nil)
  if valid_615101 != nil:
    section.add "TdeCredentialPassword", valid_615101
  var valid_615102 = query.getOrDefault("DeletionProtection")
  valid_615102 = validateParameter(valid_615102, JBool, required = false, default = nil)
  if valid_615102 != nil:
    section.add "DeletionProtection", valid_615102
  var valid_615103 = query.getOrDefault("DBParameterGroupName")
  valid_615103 = validateParameter(valid_615103, JString, required = false,
                                 default = nil)
  if valid_615103 != nil:
    section.add "DBParameterGroupName", valid_615103
  var valid_615104 = query.getOrDefault("LicenseModel")
  valid_615104 = validateParameter(valid_615104, JString, required = false,
                                 default = nil)
  if valid_615104 != nil:
    section.add "LicenseModel", valid_615104
  var valid_615105 = query.getOrDefault("DBInstanceIdentifier")
  valid_615105 = validateParameter(valid_615105, JString, required = true,
                                 default = nil)
  if valid_615105 != nil:
    section.add "DBInstanceIdentifier", valid_615105
  var valid_615106 = query.getOrDefault("TdeCredentialArn")
  valid_615106 = validateParameter(valid_615106, JString, required = false,
                                 default = nil)
  if valid_615106 != nil:
    section.add "TdeCredentialArn", valid_615106
  var valid_615107 = query.getOrDefault("PromotionTier")
  valid_615107 = validateParameter(valid_615107, JInt, required = false, default = nil)
  if valid_615107 != nil:
    section.add "PromotionTier", valid_615107
  var valid_615108 = query.getOrDefault("CACertificateIdentifier")
  valid_615108 = validateParameter(valid_615108, JString, required = false,
                                 default = nil)
  if valid_615108 != nil:
    section.add "CACertificateIdentifier", valid_615108
  var valid_615109 = query.getOrDefault("StorageType")
  valid_615109 = validateParameter(valid_615109, JString, required = false,
                                 default = nil)
  if valid_615109 != nil:
    section.add "StorageType", valid_615109
  var valid_615110 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_615110 = validateParameter(valid_615110, JBool, required = false, default = nil)
  if valid_615110 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_615110
  var valid_615111 = query.getOrDefault("MultiAZ")
  valid_615111 = validateParameter(valid_615111, JBool, required = false, default = nil)
  if valid_615111 != nil:
    section.add "MultiAZ", valid_615111
  var valid_615112 = query.getOrDefault("DBSecurityGroups")
  valid_615112 = validateParameter(valid_615112, JArray, required = false,
                                 default = nil)
  if valid_615112 != nil:
    section.add "DBSecurityGroups", valid_615112
  var valid_615113 = query.getOrDefault("ApplyImmediately")
  valid_615113 = validateParameter(valid_615113, JBool, required = false, default = nil)
  if valid_615113 != nil:
    section.add "ApplyImmediately", valid_615113
  var valid_615114 = query.getOrDefault("AllowMajorVersionUpgrade")
  valid_615114 = validateParameter(valid_615114, JBool, required = false, default = nil)
  if valid_615114 != nil:
    section.add "AllowMajorVersionUpgrade", valid_615114
  var valid_615115 = query.getOrDefault("MasterUserPassword")
  valid_615115 = validateParameter(valid_615115, JString, required = false,
                                 default = nil)
  if valid_615115 != nil:
    section.add "MasterUserPassword", valid_615115
  var valid_615116 = query.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_615116 = validateParameter(valid_615116, JString, required = false,
                                 default = nil)
  if valid_615116 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_615116
  var valid_615117 = query.getOrDefault("OptionGroupName")
  valid_615117 = validateParameter(valid_615117, JString, required = false,
                                 default = nil)
  if valid_615117 != nil:
    section.add "OptionGroupName", valid_615117
  var valid_615118 = query.getOrDefault("Version")
  valid_615118 = validateParameter(valid_615118, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615118 != nil:
    section.add "Version", valid_615118
  var valid_615119 = query.getOrDefault("DBSubnetGroupName")
  valid_615119 = validateParameter(valid_615119, JString, required = false,
                                 default = nil)
  if valid_615119 != nil:
    section.add "DBSubnetGroupName", valid_615119
  var valid_615120 = query.getOrDefault("DBInstanceClass")
  valid_615120 = validateParameter(valid_615120, JString, required = false,
                                 default = nil)
  if valid_615120 != nil:
    section.add "DBInstanceClass", valid_615120
  var valid_615121 = query.getOrDefault("PreferredBackupWindow")
  valid_615121 = validateParameter(valid_615121, JString, required = false,
                                 default = nil)
  if valid_615121 != nil:
    section.add "PreferredBackupWindow", valid_615121
  var valid_615122 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_615122 = validateParameter(valid_615122, JString, required = false,
                                 default = nil)
  if valid_615122 != nil:
    section.add "PreferredMaintenanceWindow", valid_615122
  var valid_615123 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_615123 = validateParameter(valid_615123, JBool, required = false, default = nil)
  if valid_615123 != nil:
    section.add "AutoMinorVersionUpgrade", valid_615123
  var valid_615124 = query.getOrDefault("Iops")
  valid_615124 = validateParameter(valid_615124, JInt, required = false, default = nil)
  if valid_615124 != nil:
    section.add "Iops", valid_615124
  var valid_615125 = query.getOrDefault("DomainIAMRoleName")
  valid_615125 = validateParameter(valid_615125, JString, required = false,
                                 default = nil)
  if valid_615125 != nil:
    section.add "DomainIAMRoleName", valid_615125
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_615126 = header.getOrDefault("X-Amz-Security-Token")
  valid_615126 = validateParameter(valid_615126, JString, required = false,
                                 default = nil)
  if valid_615126 != nil:
    section.add "X-Amz-Security-Token", valid_615126
  var valid_615127 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615127 = validateParameter(valid_615127, JString, required = false,
                                 default = nil)
  if valid_615127 != nil:
    section.add "X-Amz-SignedHeaders", valid_615127
  var valid_615128 = header.getOrDefault("X-Amz-Signature")
  valid_615128 = validateParameter(valid_615128, JString, required = false,
                                 default = nil)
  if valid_615128 != nil:
    section.add "X-Amz-Signature", valid_615128
  var valid_615129 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615129 = validateParameter(valid_615129, JString, required = false,
                                 default = nil)
  if valid_615129 != nil:
    section.add "X-Amz-Content-Sha256", valid_615129
  var valid_615130 = header.getOrDefault("X-Amz-Date")
  valid_615130 = validateParameter(valid_615130, JString, required = false,
                                 default = nil)
  if valid_615130 != nil:
    section.add "X-Amz-Date", valid_615130
  var valid_615131 = header.getOrDefault("X-Amz-Credential")
  valid_615131 = validateParameter(valid_615131, JString, required = false,
                                 default = nil)
  if valid_615131 != nil:
    section.add "X-Amz-Credential", valid_615131
  var valid_615132 = header.getOrDefault("X-Amz-Algorithm")
  valid_615132 = validateParameter(valid_615132, JString, required = false,
                                 default = nil)
  if valid_615132 != nil:
    section.add "X-Amz-Algorithm", valid_615132
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615133: Call_GetModifyDBInstance_615083; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <a>DescribeValidDBInstanceModifications</a> before you call <a>ModifyDBInstance</a>.
  ## 
  let valid = call_615133.validator(path, query, header, formData, body)
  let scheme = call_615133.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615133.url(scheme.get, call_615133.host, call_615133.base,
                         call_615133.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615133, url, valid)

proc call*(call_615134: Call_GetModifyDBInstance_615083;
          DBInstanceIdentifier: string; CopyTagsToSnapshot: bool = false;
          MonitoringInterval: int = 0; MonitoringRoleArn: string = "";
          DBPortNumber: int = 0;
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          BackupRetentionPeriod: int = 0; EngineVersion: string = "";
          Action: string = "ModifyDBInstance"; Domain: string = "";
          VpcSecurityGroupIds: JsonNode = nil; AllocatedStorage: int = 0;
          EnablePerformanceInsights: bool = false; PubliclyAccessible: bool = false;
          NewDBInstanceIdentifier: string = ""; TdeCredentialPassword: string = "";
          DeletionProtection: bool = false; DBParameterGroupName: string = "";
          LicenseModel: string = ""; TdeCredentialArn: string = "";
          PromotionTier: int = 0; CACertificateIdentifier: string = "";
          StorageType: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          MultiAZ: bool = false; DBSecurityGroups: JsonNode = nil;
          ApplyImmediately: bool = false; AllowMajorVersionUpgrade: bool = false;
          MasterUserPassword: string = ""; PerformanceInsightsKMSKeyId: string = "";
          OptionGroupName: string = ""; Version: string = "2014-10-31";
          DBSubnetGroupName: string = ""; DBInstanceClass: string = "";
          PreferredBackupWindow: string = "";
          PreferredMaintenanceWindow: string = "";
          AutoMinorVersionUpgrade: bool = false; Iops: int = 0;
          DomainIAMRoleName: string = ""): Recallable =
  ## getModifyDBInstance
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <a>DescribeValidDBInstanceModifications</a> before you call <a>ModifyDBInstance</a>.
  ##   CopyTagsToSnapshot: bool
  ##                     : True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   DBPortNumber: int
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> Default: <code>8182</code> </p>
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to enable.
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to disable.
  ##   BackupRetentionPeriod: int
  ##                        : <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: Uses existing setting</p>
  ##   EngineVersion: string
  ##                : The version number of the database engine to upgrade to. Currently, setting this parameter has no effect. To upgrade your database engine to the most recent release, use the <a>ApplyPendingMaintenanceAction</a> API.
  ##   Action: string (required)
  ##   Domain: string
  ##         : Not supported.
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   AllocatedStorage: int
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Not applicable. Storage is managed by the DB Cluster.</p>
  ##   EnablePerformanceInsights: bool
  ##                            :  <i>(Not supported by Neptune)</i> 
  ##   PubliclyAccessible: bool
  ##                     : This flag should no longer be used.
  ##   NewDBInstanceIdentifier: string
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot will occur immediately if you set <code>Apply Immediately</code> to true, or will occur during the next maintenance window if <code>Apply Immediately</code> to false. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. The db instance will NOT be rebooted automatically and the parameter changes will NOT be applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   LicenseModel: string
  ##               : Not supported.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which a Read Replica is promoted to the primary instance after a failure of the existing primary instance.</p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   CACertificateIdentifier: string
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   StorageType: string
  ##              : Not supported.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>You can enable IAM database authentication for the following database engines</p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: <code>false</code> </p>
  ##   MultiAZ: bool
  ##          : Specifies if the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   ApplyImmediately: bool
  ##                   : <p>Specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance.</p> <p> If this parameter is set to <code>false</code>, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot.</p> <p>Default: <code>false</code> </p>
  ##   AllowMajorVersionUpgrade: bool
  ##                           : Indicates that major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.
  ##   MasterUserPassword: string
  ##                     : Not applicable.
  ##   PerformanceInsightsKMSKeyId: string
  ##                              :  <i>(Not supported by Neptune)</i> 
  ##   OptionGroupName: string
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   Version: string (required)
  ##   DBSubnetGroupName: string
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC.</p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you specify <code>true</code> for the <code>ApplyImmediately</code> parameter.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   DBInstanceClass: string
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions.</p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is specified as <code>true</code> for this request.</p> <p>Default: Uses existing setting</p>
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled.</p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          :  Indicates that minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage will result if this parameter is set to <code>true</code> during the maintenance window, and a newer minor version is available, and Neptune has enabled auto patching for that engine version.
  ##   Iops: int
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the instance.</p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.</p> <p>Default: Uses existing setting</p>
  ##   DomainIAMRoleName: string
  ##                    : Not supported
  var query_615135 = newJObject()
  add(query_615135, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_615135, "MonitoringInterval", newJInt(MonitoringInterval))
  add(query_615135, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(query_615135, "DBPortNumber", newJInt(DBPortNumber))
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    query_615135.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                    CloudwatchLogsExportConfigurationEnableLogTypes
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    query_615135.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                    CloudwatchLogsExportConfigurationDisableLogTypes
  add(query_615135, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_615135, "EngineVersion", newJString(EngineVersion))
  add(query_615135, "Action", newJString(Action))
  add(query_615135, "Domain", newJString(Domain))
  if VpcSecurityGroupIds != nil:
    query_615135.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_615135, "AllocatedStorage", newJInt(AllocatedStorage))
  add(query_615135, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(query_615135, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_615135, "NewDBInstanceIdentifier", newJString(NewDBInstanceIdentifier))
  add(query_615135, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(query_615135, "DeletionProtection", newJBool(DeletionProtection))
  add(query_615135, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_615135, "LicenseModel", newJString(LicenseModel))
  add(query_615135, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_615135, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(query_615135, "PromotionTier", newJInt(PromotionTier))
  add(query_615135, "CACertificateIdentifier", newJString(CACertificateIdentifier))
  add(query_615135, "StorageType", newJString(StorageType))
  add(query_615135, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_615135, "MultiAZ", newJBool(MultiAZ))
  if DBSecurityGroups != nil:
    query_615135.add "DBSecurityGroups", DBSecurityGroups
  add(query_615135, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_615135, "AllowMajorVersionUpgrade", newJBool(AllowMajorVersionUpgrade))
  add(query_615135, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_615135, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(query_615135, "OptionGroupName", newJString(OptionGroupName))
  add(query_615135, "Version", newJString(Version))
  add(query_615135, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_615135, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_615135, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_615135, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_615135, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_615135, "Iops", newJInt(Iops))
  add(query_615135, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  result = call_615134.call(nil, query_615135, nil, nil, nil)

var getModifyDBInstance* = Call_GetModifyDBInstance_615083(
    name: "getModifyDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBInstance",
    validator: validate_GetModifyDBInstance_615084, base: "/",
    url: url_GetModifyDBInstance_615085, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBParameterGroup_615207 = ref object of OpenApiRestCall_612642
proc url_PostModifyDBParameterGroup_615209(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBParameterGroup_615208(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615210 = query.getOrDefault("Action")
  valid_615210 = validateParameter(valid_615210, JString, required = true,
                                 default = newJString("ModifyDBParameterGroup"))
  if valid_615210 != nil:
    section.add "Action", valid_615210
  var valid_615211 = query.getOrDefault("Version")
  valid_615211 = validateParameter(valid_615211, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615211 != nil:
    section.add "Version", valid_615211
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615212 = header.getOrDefault("X-Amz-Signature")
  valid_615212 = validateParameter(valid_615212, JString, required = false,
                                 default = nil)
  if valid_615212 != nil:
    section.add "X-Amz-Signature", valid_615212
  var valid_615213 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615213 = validateParameter(valid_615213, JString, required = false,
                                 default = nil)
  if valid_615213 != nil:
    section.add "X-Amz-Content-Sha256", valid_615213
  var valid_615214 = header.getOrDefault("X-Amz-Date")
  valid_615214 = validateParameter(valid_615214, JString, required = false,
                                 default = nil)
  if valid_615214 != nil:
    section.add "X-Amz-Date", valid_615214
  var valid_615215 = header.getOrDefault("X-Amz-Credential")
  valid_615215 = validateParameter(valid_615215, JString, required = false,
                                 default = nil)
  if valid_615215 != nil:
    section.add "X-Amz-Credential", valid_615215
  var valid_615216 = header.getOrDefault("X-Amz-Security-Token")
  valid_615216 = validateParameter(valid_615216, JString, required = false,
                                 default = nil)
  if valid_615216 != nil:
    section.add "X-Amz-Security-Token", valid_615216
  var valid_615217 = header.getOrDefault("X-Amz-Algorithm")
  valid_615217 = validateParameter(valid_615217, JString, required = false,
                                 default = nil)
  if valid_615217 != nil:
    section.add "X-Amz-Algorithm", valid_615217
  var valid_615218 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615218 = validateParameter(valid_615218, JString, required = false,
                                 default = nil)
  if valid_615218 != nil:
    section.add "X-Amz-SignedHeaders", valid_615218
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_615219 = formData.getOrDefault("DBParameterGroupName")
  valid_615219 = validateParameter(valid_615219, JString, required = true,
                                 default = nil)
  if valid_615219 != nil:
    section.add "DBParameterGroupName", valid_615219
  var valid_615220 = formData.getOrDefault("Parameters")
  valid_615220 = validateParameter(valid_615220, JArray, required = true, default = nil)
  if valid_615220 != nil:
    section.add "Parameters", valid_615220
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615221: Call_PostModifyDBParameterGroup_615207; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_615221.validator(path, query, header, formData, body)
  let scheme = call_615221.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615221.url(scheme.get, call_615221.host, call_615221.base,
                         call_615221.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615221, url, valid)

proc call*(call_615222: Call_PostModifyDBParameterGroup_615207;
          DBParameterGroupName: string; Parameters: JsonNode;
          Action: string = "ModifyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBParameterGroup
  ## <p>Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Action: string (required)
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  ##   Version: string (required)
  var query_615223 = newJObject()
  var formData_615224 = newJObject()
  add(formData_615224, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_615223, "Action", newJString(Action))
  if Parameters != nil:
    formData_615224.add "Parameters", Parameters
  add(query_615223, "Version", newJString(Version))
  result = call_615222.call(nil, query_615223, nil, formData_615224, nil)

var postModifyDBParameterGroup* = Call_PostModifyDBParameterGroup_615207(
    name: "postModifyDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBParameterGroup",
    validator: validate_PostModifyDBParameterGroup_615208, base: "/",
    url: url_PostModifyDBParameterGroup_615209,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBParameterGroup_615190 = ref object of OpenApiRestCall_612642
proc url_GetModifyDBParameterGroup_615192(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBParameterGroup_615191(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_615193 = query.getOrDefault("DBParameterGroupName")
  valid_615193 = validateParameter(valid_615193, JString, required = true,
                                 default = nil)
  if valid_615193 != nil:
    section.add "DBParameterGroupName", valid_615193
  var valid_615194 = query.getOrDefault("Parameters")
  valid_615194 = validateParameter(valid_615194, JArray, required = true, default = nil)
  if valid_615194 != nil:
    section.add "Parameters", valid_615194
  var valid_615195 = query.getOrDefault("Action")
  valid_615195 = validateParameter(valid_615195, JString, required = true,
                                 default = newJString("ModifyDBParameterGroup"))
  if valid_615195 != nil:
    section.add "Action", valid_615195
  var valid_615196 = query.getOrDefault("Version")
  valid_615196 = validateParameter(valid_615196, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615196 != nil:
    section.add "Version", valid_615196
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615197 = header.getOrDefault("X-Amz-Signature")
  valid_615197 = validateParameter(valid_615197, JString, required = false,
                                 default = nil)
  if valid_615197 != nil:
    section.add "X-Amz-Signature", valid_615197
  var valid_615198 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615198 = validateParameter(valid_615198, JString, required = false,
                                 default = nil)
  if valid_615198 != nil:
    section.add "X-Amz-Content-Sha256", valid_615198
  var valid_615199 = header.getOrDefault("X-Amz-Date")
  valid_615199 = validateParameter(valid_615199, JString, required = false,
                                 default = nil)
  if valid_615199 != nil:
    section.add "X-Amz-Date", valid_615199
  var valid_615200 = header.getOrDefault("X-Amz-Credential")
  valid_615200 = validateParameter(valid_615200, JString, required = false,
                                 default = nil)
  if valid_615200 != nil:
    section.add "X-Amz-Credential", valid_615200
  var valid_615201 = header.getOrDefault("X-Amz-Security-Token")
  valid_615201 = validateParameter(valid_615201, JString, required = false,
                                 default = nil)
  if valid_615201 != nil:
    section.add "X-Amz-Security-Token", valid_615201
  var valid_615202 = header.getOrDefault("X-Amz-Algorithm")
  valid_615202 = validateParameter(valid_615202, JString, required = false,
                                 default = nil)
  if valid_615202 != nil:
    section.add "X-Amz-Algorithm", valid_615202
  var valid_615203 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615203 = validateParameter(valid_615203, JString, required = false,
                                 default = nil)
  if valid_615203 != nil:
    section.add "X-Amz-SignedHeaders", valid_615203
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615204: Call_GetModifyDBParameterGroup_615190; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_615204.validator(path, query, header, formData, body)
  let scheme = call_615204.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615204.url(scheme.get, call_615204.host, call_615204.base,
                         call_615204.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615204, url, valid)

proc call*(call_615205: Call_GetModifyDBParameterGroup_615190;
          DBParameterGroupName: string; Parameters: JsonNode;
          Action: string = "ModifyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBParameterGroup
  ## <p>Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615206 = newJObject()
  add(query_615206, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Parameters != nil:
    query_615206.add "Parameters", Parameters
  add(query_615206, "Action", newJString(Action))
  add(query_615206, "Version", newJString(Version))
  result = call_615205.call(nil, query_615206, nil, nil, nil)

var getModifyDBParameterGroup* = Call_GetModifyDBParameterGroup_615190(
    name: "getModifyDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBParameterGroup",
    validator: validate_GetModifyDBParameterGroup_615191, base: "/",
    url: url_GetModifyDBParameterGroup_615192,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBSubnetGroup_615243 = ref object of OpenApiRestCall_612642
proc url_PostModifyDBSubnetGroup_615245(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBSubnetGroup_615244(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615246 = query.getOrDefault("Action")
  valid_615246 = validateParameter(valid_615246, JString, required = true,
                                 default = newJString("ModifyDBSubnetGroup"))
  if valid_615246 != nil:
    section.add "Action", valid_615246
  var valid_615247 = query.getOrDefault("Version")
  valid_615247 = validateParameter(valid_615247, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615247 != nil:
    section.add "Version", valid_615247
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615248 = header.getOrDefault("X-Amz-Signature")
  valid_615248 = validateParameter(valid_615248, JString, required = false,
                                 default = nil)
  if valid_615248 != nil:
    section.add "X-Amz-Signature", valid_615248
  var valid_615249 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615249 = validateParameter(valid_615249, JString, required = false,
                                 default = nil)
  if valid_615249 != nil:
    section.add "X-Amz-Content-Sha256", valid_615249
  var valid_615250 = header.getOrDefault("X-Amz-Date")
  valid_615250 = validateParameter(valid_615250, JString, required = false,
                                 default = nil)
  if valid_615250 != nil:
    section.add "X-Amz-Date", valid_615250
  var valid_615251 = header.getOrDefault("X-Amz-Credential")
  valid_615251 = validateParameter(valid_615251, JString, required = false,
                                 default = nil)
  if valid_615251 != nil:
    section.add "X-Amz-Credential", valid_615251
  var valid_615252 = header.getOrDefault("X-Amz-Security-Token")
  valid_615252 = validateParameter(valid_615252, JString, required = false,
                                 default = nil)
  if valid_615252 != nil:
    section.add "X-Amz-Security-Token", valid_615252
  var valid_615253 = header.getOrDefault("X-Amz-Algorithm")
  valid_615253 = validateParameter(valid_615253, JString, required = false,
                                 default = nil)
  if valid_615253 != nil:
    section.add "X-Amz-Algorithm", valid_615253
  var valid_615254 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615254 = validateParameter(valid_615254, JString, required = false,
                                 default = nil)
  if valid_615254 != nil:
    section.add "X-Amz-SignedHeaders", valid_615254
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSubnetGroupDescription: JString
  ##                           : The description for the DB subnet group.
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  section = newJObject()
  var valid_615255 = formData.getOrDefault("DBSubnetGroupDescription")
  valid_615255 = validateParameter(valid_615255, JString, required = false,
                                 default = nil)
  if valid_615255 != nil:
    section.add "DBSubnetGroupDescription", valid_615255
  assert formData != nil, "formData argument is necessary due to required `DBSubnetGroupName` field"
  var valid_615256 = formData.getOrDefault("DBSubnetGroupName")
  valid_615256 = validateParameter(valid_615256, JString, required = true,
                                 default = nil)
  if valid_615256 != nil:
    section.add "DBSubnetGroupName", valid_615256
  var valid_615257 = formData.getOrDefault("SubnetIds")
  valid_615257 = validateParameter(valid_615257, JArray, required = true, default = nil)
  if valid_615257 != nil:
    section.add "SubnetIds", valid_615257
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615258: Call_PostModifyDBSubnetGroup_615243; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_615258.validator(path, query, header, formData, body)
  let scheme = call_615258.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615258.url(scheme.get, call_615258.host, call_615258.base,
                         call_615258.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615258, url, valid)

proc call*(call_615259: Call_PostModifyDBSubnetGroup_615243;
          DBSubnetGroupName: string; SubnetIds: JsonNode;
          DBSubnetGroupDescription: string = "";
          Action: string = "ModifyDBSubnetGroup"; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBSubnetGroup
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   DBSubnetGroupDescription: string
  ##                           : The description for the DB subnet group.
  ##   Action: string (required)
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  var query_615260 = newJObject()
  var formData_615261 = newJObject()
  add(formData_615261, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_615260, "Action", newJString(Action))
  add(formData_615261, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_615260, "Version", newJString(Version))
  if SubnetIds != nil:
    formData_615261.add "SubnetIds", SubnetIds
  result = call_615259.call(nil, query_615260, nil, formData_615261, nil)

var postModifyDBSubnetGroup* = Call_PostModifyDBSubnetGroup_615243(
    name: "postModifyDBSubnetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSubnetGroup",
    validator: validate_PostModifyDBSubnetGroup_615244, base: "/",
    url: url_PostModifyDBSubnetGroup_615245, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBSubnetGroup_615225 = ref object of OpenApiRestCall_612642
proc url_GetModifyDBSubnetGroup_615227(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBSubnetGroup_615226(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  ##   Action: JString (required)
  ##   DBSubnetGroupDescription: JString
  ##                           : The description for the DB subnet group.
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SubnetIds` field"
  var valid_615228 = query.getOrDefault("SubnetIds")
  valid_615228 = validateParameter(valid_615228, JArray, required = true, default = nil)
  if valid_615228 != nil:
    section.add "SubnetIds", valid_615228
  var valid_615229 = query.getOrDefault("Action")
  valid_615229 = validateParameter(valid_615229, JString, required = true,
                                 default = newJString("ModifyDBSubnetGroup"))
  if valid_615229 != nil:
    section.add "Action", valid_615229
  var valid_615230 = query.getOrDefault("DBSubnetGroupDescription")
  valid_615230 = validateParameter(valid_615230, JString, required = false,
                                 default = nil)
  if valid_615230 != nil:
    section.add "DBSubnetGroupDescription", valid_615230
  var valid_615231 = query.getOrDefault("DBSubnetGroupName")
  valid_615231 = validateParameter(valid_615231, JString, required = true,
                                 default = nil)
  if valid_615231 != nil:
    section.add "DBSubnetGroupName", valid_615231
  var valid_615232 = query.getOrDefault("Version")
  valid_615232 = validateParameter(valid_615232, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615232 != nil:
    section.add "Version", valid_615232
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615233 = header.getOrDefault("X-Amz-Signature")
  valid_615233 = validateParameter(valid_615233, JString, required = false,
                                 default = nil)
  if valid_615233 != nil:
    section.add "X-Amz-Signature", valid_615233
  var valid_615234 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615234 = validateParameter(valid_615234, JString, required = false,
                                 default = nil)
  if valid_615234 != nil:
    section.add "X-Amz-Content-Sha256", valid_615234
  var valid_615235 = header.getOrDefault("X-Amz-Date")
  valid_615235 = validateParameter(valid_615235, JString, required = false,
                                 default = nil)
  if valid_615235 != nil:
    section.add "X-Amz-Date", valid_615235
  var valid_615236 = header.getOrDefault("X-Amz-Credential")
  valid_615236 = validateParameter(valid_615236, JString, required = false,
                                 default = nil)
  if valid_615236 != nil:
    section.add "X-Amz-Credential", valid_615236
  var valid_615237 = header.getOrDefault("X-Amz-Security-Token")
  valid_615237 = validateParameter(valid_615237, JString, required = false,
                                 default = nil)
  if valid_615237 != nil:
    section.add "X-Amz-Security-Token", valid_615237
  var valid_615238 = header.getOrDefault("X-Amz-Algorithm")
  valid_615238 = validateParameter(valid_615238, JString, required = false,
                                 default = nil)
  if valid_615238 != nil:
    section.add "X-Amz-Algorithm", valid_615238
  var valid_615239 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615239 = validateParameter(valid_615239, JString, required = false,
                                 default = nil)
  if valid_615239 != nil:
    section.add "X-Amz-SignedHeaders", valid_615239
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615240: Call_GetModifyDBSubnetGroup_615225; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_615240.validator(path, query, header, formData, body)
  let scheme = call_615240.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615240.url(scheme.get, call_615240.host, call_615240.base,
                         call_615240.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615240, url, valid)

proc call*(call_615241: Call_GetModifyDBSubnetGroup_615225; SubnetIds: JsonNode;
          DBSubnetGroupName: string; Action: string = "ModifyDBSubnetGroup";
          DBSubnetGroupDescription: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBSubnetGroup
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  ##   Action: string (required)
  ##   DBSubnetGroupDescription: string
  ##                           : The description for the DB subnet group.
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_615242 = newJObject()
  if SubnetIds != nil:
    query_615242.add "SubnetIds", SubnetIds
  add(query_615242, "Action", newJString(Action))
  add(query_615242, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_615242, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_615242, "Version", newJString(Version))
  result = call_615241.call(nil, query_615242, nil, nil, nil)

var getModifyDBSubnetGroup* = Call_GetModifyDBSubnetGroup_615225(
    name: "getModifyDBSubnetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSubnetGroup",
    validator: validate_GetModifyDBSubnetGroup_615226, base: "/",
    url: url_GetModifyDBSubnetGroup_615227, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyEventSubscription_615282 = ref object of OpenApiRestCall_612642
proc url_PostModifyEventSubscription_615284(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyEventSubscription_615283(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies an existing event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <a>AddSourceIdentifierToSubscription</a> and <a>RemoveSourceIdentifierFromSubscription</a> calls.</p> <p>You can see a list of the event categories for a given SourceType by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615285 = query.getOrDefault("Action")
  valid_615285 = validateParameter(valid_615285, JString, required = true, default = newJString(
      "ModifyEventSubscription"))
  if valid_615285 != nil:
    section.add "Action", valid_615285
  var valid_615286 = query.getOrDefault("Version")
  valid_615286 = validateParameter(valid_615286, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615286 != nil:
    section.add "Version", valid_615286
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615287 = header.getOrDefault("X-Amz-Signature")
  valid_615287 = validateParameter(valid_615287, JString, required = false,
                                 default = nil)
  if valid_615287 != nil:
    section.add "X-Amz-Signature", valid_615287
  var valid_615288 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615288 = validateParameter(valid_615288, JString, required = false,
                                 default = nil)
  if valid_615288 != nil:
    section.add "X-Amz-Content-Sha256", valid_615288
  var valid_615289 = header.getOrDefault("X-Amz-Date")
  valid_615289 = validateParameter(valid_615289, JString, required = false,
                                 default = nil)
  if valid_615289 != nil:
    section.add "X-Amz-Date", valid_615289
  var valid_615290 = header.getOrDefault("X-Amz-Credential")
  valid_615290 = validateParameter(valid_615290, JString, required = false,
                                 default = nil)
  if valid_615290 != nil:
    section.add "X-Amz-Credential", valid_615290
  var valid_615291 = header.getOrDefault("X-Amz-Security-Token")
  valid_615291 = validateParameter(valid_615291, JString, required = false,
                                 default = nil)
  if valid_615291 != nil:
    section.add "X-Amz-Security-Token", valid_615291
  var valid_615292 = header.getOrDefault("X-Amz-Algorithm")
  valid_615292 = validateParameter(valid_615292, JString, required = false,
                                 default = nil)
  if valid_615292 != nil:
    section.add "X-Amz-Algorithm", valid_615292
  var valid_615293 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615293 = validateParameter(valid_615293, JString, required = false,
                                 default = nil)
  if valid_615293 != nil:
    section.add "X-Amz-SignedHeaders", valid_615293
  result.add "header", section
  ## parameters in `formData` object:
  ##   SnsTopicArn: JString
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Enabled: JBool
  ##          :  A Boolean value; set to <b>true</b> to activate the subscription.
  ##   SubscriptionName: JString (required)
  ##                   : The name of the event notification subscription.
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the <b>DescribeEventCategories</b> action.
  section = newJObject()
  var valid_615294 = formData.getOrDefault("SnsTopicArn")
  valid_615294 = validateParameter(valid_615294, JString, required = false,
                                 default = nil)
  if valid_615294 != nil:
    section.add "SnsTopicArn", valid_615294
  var valid_615295 = formData.getOrDefault("Enabled")
  valid_615295 = validateParameter(valid_615295, JBool, required = false, default = nil)
  if valid_615295 != nil:
    section.add "Enabled", valid_615295
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_615296 = formData.getOrDefault("SubscriptionName")
  valid_615296 = validateParameter(valid_615296, JString, required = true,
                                 default = nil)
  if valid_615296 != nil:
    section.add "SubscriptionName", valid_615296
  var valid_615297 = formData.getOrDefault("SourceType")
  valid_615297 = validateParameter(valid_615297, JString, required = false,
                                 default = nil)
  if valid_615297 != nil:
    section.add "SourceType", valid_615297
  var valid_615298 = formData.getOrDefault("EventCategories")
  valid_615298 = validateParameter(valid_615298, JArray, required = false,
                                 default = nil)
  if valid_615298 != nil:
    section.add "EventCategories", valid_615298
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615299: Call_PostModifyEventSubscription_615282; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies an existing event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <a>AddSourceIdentifierToSubscription</a> and <a>RemoveSourceIdentifierFromSubscription</a> calls.</p> <p>You can see a list of the event categories for a given SourceType by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  let valid = call_615299.validator(path, query, header, formData, body)
  let scheme = call_615299.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615299.url(scheme.get, call_615299.host, call_615299.base,
                         call_615299.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615299, url, valid)

proc call*(call_615300: Call_PostModifyEventSubscription_615282;
          SubscriptionName: string; SnsTopicArn: string = ""; Enabled: bool = false;
          SourceType: string = ""; EventCategories: JsonNode = nil;
          Action: string = "ModifyEventSubscription"; Version: string = "2014-10-31"): Recallable =
  ## postModifyEventSubscription
  ## <p>Modifies an existing event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <a>AddSourceIdentifierToSubscription</a> and <a>RemoveSourceIdentifierFromSubscription</a> calls.</p> <p>You can see a list of the event categories for a given SourceType by using the <b>DescribeEventCategories</b> action.</p>
  ##   SnsTopicArn: string
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Enabled: bool
  ##          :  A Boolean value; set to <b>true</b> to activate the subscription.
  ##   SubscriptionName: string (required)
  ##                   : The name of the event notification subscription.
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the <b>DescribeEventCategories</b> action.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615301 = newJObject()
  var formData_615302 = newJObject()
  add(formData_615302, "SnsTopicArn", newJString(SnsTopicArn))
  add(formData_615302, "Enabled", newJBool(Enabled))
  add(formData_615302, "SubscriptionName", newJString(SubscriptionName))
  add(formData_615302, "SourceType", newJString(SourceType))
  if EventCategories != nil:
    formData_615302.add "EventCategories", EventCategories
  add(query_615301, "Action", newJString(Action))
  add(query_615301, "Version", newJString(Version))
  result = call_615300.call(nil, query_615301, nil, formData_615302, nil)

var postModifyEventSubscription* = Call_PostModifyEventSubscription_615282(
    name: "postModifyEventSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyEventSubscription",
    validator: validate_PostModifyEventSubscription_615283, base: "/",
    url: url_PostModifyEventSubscription_615284,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyEventSubscription_615262 = ref object of OpenApiRestCall_612642
proc url_GetModifyEventSubscription_615264(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyEventSubscription_615263(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies an existing event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <a>AddSourceIdentifierToSubscription</a> and <a>RemoveSourceIdentifierFromSubscription</a> calls.</p> <p>You can see a list of the event categories for a given SourceType by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Enabled: JBool
  ##          :  A Boolean value; set to <b>true</b> to activate the subscription.
  ##   SubscriptionName: JString (required)
  ##                   : The name of the event notification subscription.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the <b>DescribeEventCategories</b> action.
  ##   Action: JString (required)
  ##   SnsTopicArn: JString
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Version: JString (required)
  section = newJObject()
  var valid_615265 = query.getOrDefault("SourceType")
  valid_615265 = validateParameter(valid_615265, JString, required = false,
                                 default = nil)
  if valid_615265 != nil:
    section.add "SourceType", valid_615265
  var valid_615266 = query.getOrDefault("Enabled")
  valid_615266 = validateParameter(valid_615266, JBool, required = false, default = nil)
  if valid_615266 != nil:
    section.add "Enabled", valid_615266
  assert query != nil,
        "query argument is necessary due to required `SubscriptionName` field"
  var valid_615267 = query.getOrDefault("SubscriptionName")
  valid_615267 = validateParameter(valid_615267, JString, required = true,
                                 default = nil)
  if valid_615267 != nil:
    section.add "SubscriptionName", valid_615267
  var valid_615268 = query.getOrDefault("EventCategories")
  valid_615268 = validateParameter(valid_615268, JArray, required = false,
                                 default = nil)
  if valid_615268 != nil:
    section.add "EventCategories", valid_615268
  var valid_615269 = query.getOrDefault("Action")
  valid_615269 = validateParameter(valid_615269, JString, required = true, default = newJString(
      "ModifyEventSubscription"))
  if valid_615269 != nil:
    section.add "Action", valid_615269
  var valid_615270 = query.getOrDefault("SnsTopicArn")
  valid_615270 = validateParameter(valid_615270, JString, required = false,
                                 default = nil)
  if valid_615270 != nil:
    section.add "SnsTopicArn", valid_615270
  var valid_615271 = query.getOrDefault("Version")
  valid_615271 = validateParameter(valid_615271, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615271 != nil:
    section.add "Version", valid_615271
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615272 = header.getOrDefault("X-Amz-Signature")
  valid_615272 = validateParameter(valid_615272, JString, required = false,
                                 default = nil)
  if valid_615272 != nil:
    section.add "X-Amz-Signature", valid_615272
  var valid_615273 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615273 = validateParameter(valid_615273, JString, required = false,
                                 default = nil)
  if valid_615273 != nil:
    section.add "X-Amz-Content-Sha256", valid_615273
  var valid_615274 = header.getOrDefault("X-Amz-Date")
  valid_615274 = validateParameter(valid_615274, JString, required = false,
                                 default = nil)
  if valid_615274 != nil:
    section.add "X-Amz-Date", valid_615274
  var valid_615275 = header.getOrDefault("X-Amz-Credential")
  valid_615275 = validateParameter(valid_615275, JString, required = false,
                                 default = nil)
  if valid_615275 != nil:
    section.add "X-Amz-Credential", valid_615275
  var valid_615276 = header.getOrDefault("X-Amz-Security-Token")
  valid_615276 = validateParameter(valid_615276, JString, required = false,
                                 default = nil)
  if valid_615276 != nil:
    section.add "X-Amz-Security-Token", valid_615276
  var valid_615277 = header.getOrDefault("X-Amz-Algorithm")
  valid_615277 = validateParameter(valid_615277, JString, required = false,
                                 default = nil)
  if valid_615277 != nil:
    section.add "X-Amz-Algorithm", valid_615277
  var valid_615278 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615278 = validateParameter(valid_615278, JString, required = false,
                                 default = nil)
  if valid_615278 != nil:
    section.add "X-Amz-SignedHeaders", valid_615278
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615279: Call_GetModifyEventSubscription_615262; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies an existing event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <a>AddSourceIdentifierToSubscription</a> and <a>RemoveSourceIdentifierFromSubscription</a> calls.</p> <p>You can see a list of the event categories for a given SourceType by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  let valid = call_615279.validator(path, query, header, formData, body)
  let scheme = call_615279.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615279.url(scheme.get, call_615279.host, call_615279.base,
                         call_615279.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615279, url, valid)

proc call*(call_615280: Call_GetModifyEventSubscription_615262;
          SubscriptionName: string; SourceType: string = ""; Enabled: bool = false;
          EventCategories: JsonNode = nil;
          Action: string = "ModifyEventSubscription"; SnsTopicArn: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getModifyEventSubscription
  ## <p>Modifies an existing event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <a>AddSourceIdentifierToSubscription</a> and <a>RemoveSourceIdentifierFromSubscription</a> calls.</p> <p>You can see a list of the event categories for a given SourceType by using the <b>DescribeEventCategories</b> action.</p>
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Enabled: bool
  ##          :  A Boolean value; set to <b>true</b> to activate the subscription.
  ##   SubscriptionName: string (required)
  ##                   : The name of the event notification subscription.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the <b>DescribeEventCategories</b> action.
  ##   Action: string (required)
  ##   SnsTopicArn: string
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Version: string (required)
  var query_615281 = newJObject()
  add(query_615281, "SourceType", newJString(SourceType))
  add(query_615281, "Enabled", newJBool(Enabled))
  add(query_615281, "SubscriptionName", newJString(SubscriptionName))
  if EventCategories != nil:
    query_615281.add "EventCategories", EventCategories
  add(query_615281, "Action", newJString(Action))
  add(query_615281, "SnsTopicArn", newJString(SnsTopicArn))
  add(query_615281, "Version", newJString(Version))
  result = call_615280.call(nil, query_615281, nil, nil, nil)

var getModifyEventSubscription* = Call_GetModifyEventSubscription_615262(
    name: "getModifyEventSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyEventSubscription",
    validator: validate_GetModifyEventSubscription_615263, base: "/",
    url: url_GetModifyEventSubscription_615264,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPromoteReadReplicaDBCluster_615319 = ref object of OpenApiRestCall_612642
proc url_PostPromoteReadReplicaDBCluster_615321(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPromoteReadReplicaDBCluster_615320(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Not supported.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615322 = query.getOrDefault("Action")
  valid_615322 = validateParameter(valid_615322, JString, required = true, default = newJString(
      "PromoteReadReplicaDBCluster"))
  if valid_615322 != nil:
    section.add "Action", valid_615322
  var valid_615323 = query.getOrDefault("Version")
  valid_615323 = validateParameter(valid_615323, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615323 != nil:
    section.add "Version", valid_615323
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615324 = header.getOrDefault("X-Amz-Signature")
  valid_615324 = validateParameter(valid_615324, JString, required = false,
                                 default = nil)
  if valid_615324 != nil:
    section.add "X-Amz-Signature", valid_615324
  var valid_615325 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615325 = validateParameter(valid_615325, JString, required = false,
                                 default = nil)
  if valid_615325 != nil:
    section.add "X-Amz-Content-Sha256", valid_615325
  var valid_615326 = header.getOrDefault("X-Amz-Date")
  valid_615326 = validateParameter(valid_615326, JString, required = false,
                                 default = nil)
  if valid_615326 != nil:
    section.add "X-Amz-Date", valid_615326
  var valid_615327 = header.getOrDefault("X-Amz-Credential")
  valid_615327 = validateParameter(valid_615327, JString, required = false,
                                 default = nil)
  if valid_615327 != nil:
    section.add "X-Amz-Credential", valid_615327
  var valid_615328 = header.getOrDefault("X-Amz-Security-Token")
  valid_615328 = validateParameter(valid_615328, JString, required = false,
                                 default = nil)
  if valid_615328 != nil:
    section.add "X-Amz-Security-Token", valid_615328
  var valid_615329 = header.getOrDefault("X-Amz-Algorithm")
  valid_615329 = validateParameter(valid_615329, JString, required = false,
                                 default = nil)
  if valid_615329 != nil:
    section.add "X-Amz-Algorithm", valid_615329
  var valid_615330 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615330 = validateParameter(valid_615330, JString, required = false,
                                 default = nil)
  if valid_615330 != nil:
    section.add "X-Amz-SignedHeaders", valid_615330
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : Not supported.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_615331 = formData.getOrDefault("DBClusterIdentifier")
  valid_615331 = validateParameter(valid_615331, JString, required = true,
                                 default = nil)
  if valid_615331 != nil:
    section.add "DBClusterIdentifier", valid_615331
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615332: Call_PostPromoteReadReplicaDBCluster_615319;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Not supported.
  ## 
  let valid = call_615332.validator(path, query, header, formData, body)
  let scheme = call_615332.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615332.url(scheme.get, call_615332.host, call_615332.base,
                         call_615332.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615332, url, valid)

proc call*(call_615333: Call_PostPromoteReadReplicaDBCluster_615319;
          DBClusterIdentifier: string;
          Action: string = "PromoteReadReplicaDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## postPromoteReadReplicaDBCluster
  ## Not supported.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : Not supported.
  var query_615334 = newJObject()
  var formData_615335 = newJObject()
  add(query_615334, "Action", newJString(Action))
  add(query_615334, "Version", newJString(Version))
  add(formData_615335, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_615333.call(nil, query_615334, nil, formData_615335, nil)

var postPromoteReadReplicaDBCluster* = Call_PostPromoteReadReplicaDBCluster_615319(
    name: "postPromoteReadReplicaDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=PromoteReadReplicaDBCluster",
    validator: validate_PostPromoteReadReplicaDBCluster_615320, base: "/",
    url: url_PostPromoteReadReplicaDBCluster_615321,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPromoteReadReplicaDBCluster_615303 = ref object of OpenApiRestCall_612642
proc url_GetPromoteReadReplicaDBCluster_615305(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPromoteReadReplicaDBCluster_615304(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Not supported.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : Not supported.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_615306 = query.getOrDefault("DBClusterIdentifier")
  valid_615306 = validateParameter(valid_615306, JString, required = true,
                                 default = nil)
  if valid_615306 != nil:
    section.add "DBClusterIdentifier", valid_615306
  var valid_615307 = query.getOrDefault("Action")
  valid_615307 = validateParameter(valid_615307, JString, required = true, default = newJString(
      "PromoteReadReplicaDBCluster"))
  if valid_615307 != nil:
    section.add "Action", valid_615307
  var valid_615308 = query.getOrDefault("Version")
  valid_615308 = validateParameter(valid_615308, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615308 != nil:
    section.add "Version", valid_615308
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615309 = header.getOrDefault("X-Amz-Signature")
  valid_615309 = validateParameter(valid_615309, JString, required = false,
                                 default = nil)
  if valid_615309 != nil:
    section.add "X-Amz-Signature", valid_615309
  var valid_615310 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615310 = validateParameter(valid_615310, JString, required = false,
                                 default = nil)
  if valid_615310 != nil:
    section.add "X-Amz-Content-Sha256", valid_615310
  var valid_615311 = header.getOrDefault("X-Amz-Date")
  valid_615311 = validateParameter(valid_615311, JString, required = false,
                                 default = nil)
  if valid_615311 != nil:
    section.add "X-Amz-Date", valid_615311
  var valid_615312 = header.getOrDefault("X-Amz-Credential")
  valid_615312 = validateParameter(valid_615312, JString, required = false,
                                 default = nil)
  if valid_615312 != nil:
    section.add "X-Amz-Credential", valid_615312
  var valid_615313 = header.getOrDefault("X-Amz-Security-Token")
  valid_615313 = validateParameter(valid_615313, JString, required = false,
                                 default = nil)
  if valid_615313 != nil:
    section.add "X-Amz-Security-Token", valid_615313
  var valid_615314 = header.getOrDefault("X-Amz-Algorithm")
  valid_615314 = validateParameter(valid_615314, JString, required = false,
                                 default = nil)
  if valid_615314 != nil:
    section.add "X-Amz-Algorithm", valid_615314
  var valid_615315 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615315 = validateParameter(valid_615315, JString, required = false,
                                 default = nil)
  if valid_615315 != nil:
    section.add "X-Amz-SignedHeaders", valid_615315
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615316: Call_GetPromoteReadReplicaDBCluster_615303; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Not supported.
  ## 
  let valid = call_615316.validator(path, query, header, formData, body)
  let scheme = call_615316.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615316.url(scheme.get, call_615316.host, call_615316.base,
                         call_615316.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615316, url, valid)

proc call*(call_615317: Call_GetPromoteReadReplicaDBCluster_615303;
          DBClusterIdentifier: string;
          Action: string = "PromoteReadReplicaDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## getPromoteReadReplicaDBCluster
  ## Not supported.
  ##   DBClusterIdentifier: string (required)
  ##                      : Not supported.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615318 = newJObject()
  add(query_615318, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_615318, "Action", newJString(Action))
  add(query_615318, "Version", newJString(Version))
  result = call_615317.call(nil, query_615318, nil, nil, nil)

var getPromoteReadReplicaDBCluster* = Call_GetPromoteReadReplicaDBCluster_615303(
    name: "getPromoteReadReplicaDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=PromoteReadReplicaDBCluster",
    validator: validate_GetPromoteReadReplicaDBCluster_615304, base: "/",
    url: url_GetPromoteReadReplicaDBCluster_615305,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRebootDBInstance_615353 = ref object of OpenApiRestCall_612642
proc url_PostRebootDBInstance_615355(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRebootDBInstance_615354(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect.</p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615356 = query.getOrDefault("Action")
  valid_615356 = validateParameter(valid_615356, JString, required = true,
                                 default = newJString("RebootDBInstance"))
  if valid_615356 != nil:
    section.add "Action", valid_615356
  var valid_615357 = query.getOrDefault("Version")
  valid_615357 = validateParameter(valid_615357, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615357 != nil:
    section.add "Version", valid_615357
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615358 = header.getOrDefault("X-Amz-Signature")
  valid_615358 = validateParameter(valid_615358, JString, required = false,
                                 default = nil)
  if valid_615358 != nil:
    section.add "X-Amz-Signature", valid_615358
  var valid_615359 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615359 = validateParameter(valid_615359, JString, required = false,
                                 default = nil)
  if valid_615359 != nil:
    section.add "X-Amz-Content-Sha256", valid_615359
  var valid_615360 = header.getOrDefault("X-Amz-Date")
  valid_615360 = validateParameter(valid_615360, JString, required = false,
                                 default = nil)
  if valid_615360 != nil:
    section.add "X-Amz-Date", valid_615360
  var valid_615361 = header.getOrDefault("X-Amz-Credential")
  valid_615361 = validateParameter(valid_615361, JString, required = false,
                                 default = nil)
  if valid_615361 != nil:
    section.add "X-Amz-Credential", valid_615361
  var valid_615362 = header.getOrDefault("X-Amz-Security-Token")
  valid_615362 = validateParameter(valid_615362, JString, required = false,
                                 default = nil)
  if valid_615362 != nil:
    section.add "X-Amz-Security-Token", valid_615362
  var valid_615363 = header.getOrDefault("X-Amz-Algorithm")
  valid_615363 = validateParameter(valid_615363, JString, required = false,
                                 default = nil)
  if valid_615363 != nil:
    section.add "X-Amz-Algorithm", valid_615363
  var valid_615364 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615364 = validateParameter(valid_615364, JString, required = false,
                                 default = nil)
  if valid_615364 != nil:
    section.add "X-Amz-SignedHeaders", valid_615364
  result.add "header", section
  ## parameters in `formData` object:
  ##   ForceFailover: JBool
  ##                : <p> When <code>true</code>, the reboot is conducted through a MultiAZ failover.</p> <p>Constraint: You can't specify <code>true</code> if the instance is not configured for MultiAZ.</p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  section = newJObject()
  var valid_615365 = formData.getOrDefault("ForceFailover")
  valid_615365 = validateParameter(valid_615365, JBool, required = false, default = nil)
  if valid_615365 != nil:
    section.add "ForceFailover", valid_615365
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_615366 = formData.getOrDefault("DBInstanceIdentifier")
  valid_615366 = validateParameter(valid_615366, JString, required = true,
                                 default = nil)
  if valid_615366 != nil:
    section.add "DBInstanceIdentifier", valid_615366
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615367: Call_PostRebootDBInstance_615353; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect.</p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting.</p>
  ## 
  let valid = call_615367.validator(path, query, header, formData, body)
  let scheme = call_615367.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615367.url(scheme.get, call_615367.host, call_615367.base,
                         call_615367.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615367, url, valid)

proc call*(call_615368: Call_PostRebootDBInstance_615353;
          DBInstanceIdentifier: string; ForceFailover: bool = false;
          Action: string = "RebootDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## postRebootDBInstance
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect.</p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting.</p>
  ##   ForceFailover: bool
  ##                : <p> When <code>true</code>, the reboot is conducted through a MultiAZ failover.</p> <p>Constraint: You can't specify <code>true</code> if the instance is not configured for MultiAZ.</p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615369 = newJObject()
  var formData_615370 = newJObject()
  add(formData_615370, "ForceFailover", newJBool(ForceFailover))
  add(formData_615370, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_615369, "Action", newJString(Action))
  add(query_615369, "Version", newJString(Version))
  result = call_615368.call(nil, query_615369, nil, formData_615370, nil)

var postRebootDBInstance* = Call_PostRebootDBInstance_615353(
    name: "postRebootDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RebootDBInstance",
    validator: validate_PostRebootDBInstance_615354, base: "/",
    url: url_PostRebootDBInstance_615355, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRebootDBInstance_615336 = ref object of OpenApiRestCall_612642
proc url_GetRebootDBInstance_615338(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRebootDBInstance_615337(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect.</p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ForceFailover: JBool
  ##                : <p> When <code>true</code>, the reboot is conducted through a MultiAZ failover.</p> <p>Constraint: You can't specify <code>true</code> if the instance is not configured for MultiAZ.</p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615339 = query.getOrDefault("ForceFailover")
  valid_615339 = validateParameter(valid_615339, JBool, required = false, default = nil)
  if valid_615339 != nil:
    section.add "ForceFailover", valid_615339
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_615340 = query.getOrDefault("DBInstanceIdentifier")
  valid_615340 = validateParameter(valid_615340, JString, required = true,
                                 default = nil)
  if valid_615340 != nil:
    section.add "DBInstanceIdentifier", valid_615340
  var valid_615341 = query.getOrDefault("Action")
  valid_615341 = validateParameter(valid_615341, JString, required = true,
                                 default = newJString("RebootDBInstance"))
  if valid_615341 != nil:
    section.add "Action", valid_615341
  var valid_615342 = query.getOrDefault("Version")
  valid_615342 = validateParameter(valid_615342, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615342 != nil:
    section.add "Version", valid_615342
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615343 = header.getOrDefault("X-Amz-Signature")
  valid_615343 = validateParameter(valid_615343, JString, required = false,
                                 default = nil)
  if valid_615343 != nil:
    section.add "X-Amz-Signature", valid_615343
  var valid_615344 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615344 = validateParameter(valid_615344, JString, required = false,
                                 default = nil)
  if valid_615344 != nil:
    section.add "X-Amz-Content-Sha256", valid_615344
  var valid_615345 = header.getOrDefault("X-Amz-Date")
  valid_615345 = validateParameter(valid_615345, JString, required = false,
                                 default = nil)
  if valid_615345 != nil:
    section.add "X-Amz-Date", valid_615345
  var valid_615346 = header.getOrDefault("X-Amz-Credential")
  valid_615346 = validateParameter(valid_615346, JString, required = false,
                                 default = nil)
  if valid_615346 != nil:
    section.add "X-Amz-Credential", valid_615346
  var valid_615347 = header.getOrDefault("X-Amz-Security-Token")
  valid_615347 = validateParameter(valid_615347, JString, required = false,
                                 default = nil)
  if valid_615347 != nil:
    section.add "X-Amz-Security-Token", valid_615347
  var valid_615348 = header.getOrDefault("X-Amz-Algorithm")
  valid_615348 = validateParameter(valid_615348, JString, required = false,
                                 default = nil)
  if valid_615348 != nil:
    section.add "X-Amz-Algorithm", valid_615348
  var valid_615349 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615349 = validateParameter(valid_615349, JString, required = false,
                                 default = nil)
  if valid_615349 != nil:
    section.add "X-Amz-SignedHeaders", valid_615349
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615350: Call_GetRebootDBInstance_615336; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect.</p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting.</p>
  ## 
  let valid = call_615350.validator(path, query, header, formData, body)
  let scheme = call_615350.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615350.url(scheme.get, call_615350.host, call_615350.base,
                         call_615350.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615350, url, valid)

proc call*(call_615351: Call_GetRebootDBInstance_615336;
          DBInstanceIdentifier: string; ForceFailover: bool = false;
          Action: string = "RebootDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## getRebootDBInstance
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect.</p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting.</p>
  ##   ForceFailover: bool
  ##                : <p> When <code>true</code>, the reboot is conducted through a MultiAZ failover.</p> <p>Constraint: You can't specify <code>true</code> if the instance is not configured for MultiAZ.</p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615352 = newJObject()
  add(query_615352, "ForceFailover", newJBool(ForceFailover))
  add(query_615352, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_615352, "Action", newJString(Action))
  add(query_615352, "Version", newJString(Version))
  result = call_615351.call(nil, query_615352, nil, nil, nil)

var getRebootDBInstance* = Call_GetRebootDBInstance_615336(
    name: "getRebootDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RebootDBInstance",
    validator: validate_GetRebootDBInstance_615337, base: "/",
    url: url_GetRebootDBInstance_615338, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveRoleFromDBCluster_615388 = ref object of OpenApiRestCall_612642
proc url_PostRemoveRoleFromDBCluster_615390(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveRoleFromDBCluster_615389(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disassociates an Identity and Access Management (IAM) role from a DB cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615391 = query.getOrDefault("Action")
  valid_615391 = validateParameter(valid_615391, JString, required = true, default = newJString(
      "RemoveRoleFromDBCluster"))
  if valid_615391 != nil:
    section.add "Action", valid_615391
  var valid_615392 = query.getOrDefault("Version")
  valid_615392 = validateParameter(valid_615392, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615392 != nil:
    section.add "Version", valid_615392
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615393 = header.getOrDefault("X-Amz-Signature")
  valid_615393 = validateParameter(valid_615393, JString, required = false,
                                 default = nil)
  if valid_615393 != nil:
    section.add "X-Amz-Signature", valid_615393
  var valid_615394 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615394 = validateParameter(valid_615394, JString, required = false,
                                 default = nil)
  if valid_615394 != nil:
    section.add "X-Amz-Content-Sha256", valid_615394
  var valid_615395 = header.getOrDefault("X-Amz-Date")
  valid_615395 = validateParameter(valid_615395, JString, required = false,
                                 default = nil)
  if valid_615395 != nil:
    section.add "X-Amz-Date", valid_615395
  var valid_615396 = header.getOrDefault("X-Amz-Credential")
  valid_615396 = validateParameter(valid_615396, JString, required = false,
                                 default = nil)
  if valid_615396 != nil:
    section.add "X-Amz-Credential", valid_615396
  var valid_615397 = header.getOrDefault("X-Amz-Security-Token")
  valid_615397 = validateParameter(valid_615397, JString, required = false,
                                 default = nil)
  if valid_615397 != nil:
    section.add "X-Amz-Security-Token", valid_615397
  var valid_615398 = header.getOrDefault("X-Amz-Algorithm")
  valid_615398 = validateParameter(valid_615398, JString, required = false,
                                 default = nil)
  if valid_615398 != nil:
    section.add "X-Amz-Algorithm", valid_615398
  var valid_615399 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615399 = validateParameter(valid_615399, JString, required = false,
                                 default = nil)
  if valid_615399 != nil:
    section.add "X-Amz-SignedHeaders", valid_615399
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB cluster, for example <code>arn:aws:iam::123456789012:role/NeptuneAccessRole</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleArn` field"
  var valid_615400 = formData.getOrDefault("RoleArn")
  valid_615400 = validateParameter(valid_615400, JString, required = true,
                                 default = nil)
  if valid_615400 != nil:
    section.add "RoleArn", valid_615400
  var valid_615401 = formData.getOrDefault("DBClusterIdentifier")
  valid_615401 = validateParameter(valid_615401, JString, required = true,
                                 default = nil)
  if valid_615401 != nil:
    section.add "DBClusterIdentifier", valid_615401
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615402: Call_PostRemoveRoleFromDBCluster_615388; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disassociates an Identity and Access Management (IAM) role from a DB cluster.
  ## 
  let valid = call_615402.validator(path, query, header, formData, body)
  let scheme = call_615402.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615402.url(scheme.get, call_615402.host, call_615402.base,
                         call_615402.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615402, url, valid)

proc call*(call_615403: Call_PostRemoveRoleFromDBCluster_615388; RoleArn: string;
          DBClusterIdentifier: string; Action: string = "RemoveRoleFromDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## postRemoveRoleFromDBCluster
  ## Disassociates an Identity and Access Management (IAM) role from a DB cluster.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB cluster, for example <code>arn:aws:iam::123456789012:role/NeptuneAccessRole</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  var query_615404 = newJObject()
  var formData_615405 = newJObject()
  add(formData_615405, "RoleArn", newJString(RoleArn))
  add(query_615404, "Action", newJString(Action))
  add(query_615404, "Version", newJString(Version))
  add(formData_615405, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_615403.call(nil, query_615404, nil, formData_615405, nil)

var postRemoveRoleFromDBCluster* = Call_PostRemoveRoleFromDBCluster_615388(
    name: "postRemoveRoleFromDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RemoveRoleFromDBCluster",
    validator: validate_PostRemoveRoleFromDBCluster_615389, base: "/",
    url: url_PostRemoveRoleFromDBCluster_615390,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveRoleFromDBCluster_615371 = ref object of OpenApiRestCall_612642
proc url_GetRemoveRoleFromDBCluster_615373(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveRoleFromDBCluster_615372(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disassociates an Identity and Access Management (IAM) role from a DB cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB cluster, for example <code>arn:aws:iam::123456789012:role/NeptuneAccessRole</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `RoleArn` field"
  var valid_615374 = query.getOrDefault("RoleArn")
  valid_615374 = validateParameter(valid_615374, JString, required = true,
                                 default = nil)
  if valid_615374 != nil:
    section.add "RoleArn", valid_615374
  var valid_615375 = query.getOrDefault("DBClusterIdentifier")
  valid_615375 = validateParameter(valid_615375, JString, required = true,
                                 default = nil)
  if valid_615375 != nil:
    section.add "DBClusterIdentifier", valid_615375
  var valid_615376 = query.getOrDefault("Action")
  valid_615376 = validateParameter(valid_615376, JString, required = true, default = newJString(
      "RemoveRoleFromDBCluster"))
  if valid_615376 != nil:
    section.add "Action", valid_615376
  var valid_615377 = query.getOrDefault("Version")
  valid_615377 = validateParameter(valid_615377, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615377 != nil:
    section.add "Version", valid_615377
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615378 = header.getOrDefault("X-Amz-Signature")
  valid_615378 = validateParameter(valid_615378, JString, required = false,
                                 default = nil)
  if valid_615378 != nil:
    section.add "X-Amz-Signature", valid_615378
  var valid_615379 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615379 = validateParameter(valid_615379, JString, required = false,
                                 default = nil)
  if valid_615379 != nil:
    section.add "X-Amz-Content-Sha256", valid_615379
  var valid_615380 = header.getOrDefault("X-Amz-Date")
  valid_615380 = validateParameter(valid_615380, JString, required = false,
                                 default = nil)
  if valid_615380 != nil:
    section.add "X-Amz-Date", valid_615380
  var valid_615381 = header.getOrDefault("X-Amz-Credential")
  valid_615381 = validateParameter(valid_615381, JString, required = false,
                                 default = nil)
  if valid_615381 != nil:
    section.add "X-Amz-Credential", valid_615381
  var valid_615382 = header.getOrDefault("X-Amz-Security-Token")
  valid_615382 = validateParameter(valid_615382, JString, required = false,
                                 default = nil)
  if valid_615382 != nil:
    section.add "X-Amz-Security-Token", valid_615382
  var valid_615383 = header.getOrDefault("X-Amz-Algorithm")
  valid_615383 = validateParameter(valid_615383, JString, required = false,
                                 default = nil)
  if valid_615383 != nil:
    section.add "X-Amz-Algorithm", valid_615383
  var valid_615384 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615384 = validateParameter(valid_615384, JString, required = false,
                                 default = nil)
  if valid_615384 != nil:
    section.add "X-Amz-SignedHeaders", valid_615384
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615385: Call_GetRemoveRoleFromDBCluster_615371; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disassociates an Identity and Access Management (IAM) role from a DB cluster.
  ## 
  let valid = call_615385.validator(path, query, header, formData, body)
  let scheme = call_615385.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615385.url(scheme.get, call_615385.host, call_615385.base,
                         call_615385.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615385, url, valid)

proc call*(call_615386: Call_GetRemoveRoleFromDBCluster_615371; RoleArn: string;
          DBClusterIdentifier: string; Action: string = "RemoveRoleFromDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## getRemoveRoleFromDBCluster
  ## Disassociates an Identity and Access Management (IAM) role from a DB cluster.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB cluster, for example <code>arn:aws:iam::123456789012:role/NeptuneAccessRole</code>.
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615387 = newJObject()
  add(query_615387, "RoleArn", newJString(RoleArn))
  add(query_615387, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_615387, "Action", newJString(Action))
  add(query_615387, "Version", newJString(Version))
  result = call_615386.call(nil, query_615387, nil, nil, nil)

var getRemoveRoleFromDBCluster* = Call_GetRemoveRoleFromDBCluster_615371(
    name: "getRemoveRoleFromDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RemoveRoleFromDBCluster",
    validator: validate_GetRemoveRoleFromDBCluster_615372, base: "/",
    url: url_GetRemoveRoleFromDBCluster_615373,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveSourceIdentifierFromSubscription_615423 = ref object of OpenApiRestCall_612642
proc url_PostRemoveSourceIdentifierFromSubscription_615425(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveSourceIdentifierFromSubscription_615424(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes a source identifier from an existing event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615426 = query.getOrDefault("Action")
  valid_615426 = validateParameter(valid_615426, JString, required = true, default = newJString(
      "RemoveSourceIdentifierFromSubscription"))
  if valid_615426 != nil:
    section.add "Action", valid_615426
  var valid_615427 = query.getOrDefault("Version")
  valid_615427 = validateParameter(valid_615427, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615427 != nil:
    section.add "Version", valid_615427
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615428 = header.getOrDefault("X-Amz-Signature")
  valid_615428 = validateParameter(valid_615428, JString, required = false,
                                 default = nil)
  if valid_615428 != nil:
    section.add "X-Amz-Signature", valid_615428
  var valid_615429 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615429 = validateParameter(valid_615429, JString, required = false,
                                 default = nil)
  if valid_615429 != nil:
    section.add "X-Amz-Content-Sha256", valid_615429
  var valid_615430 = header.getOrDefault("X-Amz-Date")
  valid_615430 = validateParameter(valid_615430, JString, required = false,
                                 default = nil)
  if valid_615430 != nil:
    section.add "X-Amz-Date", valid_615430
  var valid_615431 = header.getOrDefault("X-Amz-Credential")
  valid_615431 = validateParameter(valid_615431, JString, required = false,
                                 default = nil)
  if valid_615431 != nil:
    section.add "X-Amz-Credential", valid_615431
  var valid_615432 = header.getOrDefault("X-Amz-Security-Token")
  valid_615432 = validateParameter(valid_615432, JString, required = false,
                                 default = nil)
  if valid_615432 != nil:
    section.add "X-Amz-Security-Token", valid_615432
  var valid_615433 = header.getOrDefault("X-Amz-Algorithm")
  valid_615433 = validateParameter(valid_615433, JString, required = false,
                                 default = nil)
  if valid_615433 != nil:
    section.add "X-Amz-Algorithm", valid_615433
  var valid_615434 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615434 = validateParameter(valid_615434, JString, required = false,
                                 default = nil)
  if valid_615434 != nil:
    section.add "X-Amz-SignedHeaders", valid_615434
  result.add "header", section
  ## parameters in `formData` object:
  ##   SubscriptionName: JString (required)
  ##                   : The name of the event notification subscription you want to remove a source identifier from.
  ##   SourceIdentifier: JString (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_615435 = formData.getOrDefault("SubscriptionName")
  valid_615435 = validateParameter(valid_615435, JString, required = true,
                                 default = nil)
  if valid_615435 != nil:
    section.add "SubscriptionName", valid_615435
  var valid_615436 = formData.getOrDefault("SourceIdentifier")
  valid_615436 = validateParameter(valid_615436, JString, required = true,
                                 default = nil)
  if valid_615436 != nil:
    section.add "SourceIdentifier", valid_615436
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615437: Call_PostRemoveSourceIdentifierFromSubscription_615423;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Removes a source identifier from an existing event notification subscription.
  ## 
  let valid = call_615437.validator(path, query, header, formData, body)
  let scheme = call_615437.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615437.url(scheme.get, call_615437.host, call_615437.base,
                         call_615437.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615437, url, valid)

proc call*(call_615438: Call_PostRemoveSourceIdentifierFromSubscription_615423;
          SubscriptionName: string; SourceIdentifier: string;
          Action: string = "RemoveSourceIdentifierFromSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## postRemoveSourceIdentifierFromSubscription
  ## Removes a source identifier from an existing event notification subscription.
  ##   SubscriptionName: string (required)
  ##                   : The name of the event notification subscription you want to remove a source identifier from.
  ##   SourceIdentifier: string (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615439 = newJObject()
  var formData_615440 = newJObject()
  add(formData_615440, "SubscriptionName", newJString(SubscriptionName))
  add(formData_615440, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_615439, "Action", newJString(Action))
  add(query_615439, "Version", newJString(Version))
  result = call_615438.call(nil, query_615439, nil, formData_615440, nil)

var postRemoveSourceIdentifierFromSubscription* = Call_PostRemoveSourceIdentifierFromSubscription_615423(
    name: "postRemoveSourceIdentifierFromSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=RemoveSourceIdentifierFromSubscription",
    validator: validate_PostRemoveSourceIdentifierFromSubscription_615424,
    base: "/", url: url_PostRemoveSourceIdentifierFromSubscription_615425,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveSourceIdentifierFromSubscription_615406 = ref object of OpenApiRestCall_612642
proc url_GetRemoveSourceIdentifierFromSubscription_615408(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveSourceIdentifierFromSubscription_615407(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes a source identifier from an existing event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceIdentifier: JString (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group.
  ##   SubscriptionName: JString (required)
  ##                   : The name of the event notification subscription you want to remove a source identifier from.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SourceIdentifier` field"
  var valid_615409 = query.getOrDefault("SourceIdentifier")
  valid_615409 = validateParameter(valid_615409, JString, required = true,
                                 default = nil)
  if valid_615409 != nil:
    section.add "SourceIdentifier", valid_615409
  var valid_615410 = query.getOrDefault("SubscriptionName")
  valid_615410 = validateParameter(valid_615410, JString, required = true,
                                 default = nil)
  if valid_615410 != nil:
    section.add "SubscriptionName", valid_615410
  var valid_615411 = query.getOrDefault("Action")
  valid_615411 = validateParameter(valid_615411, JString, required = true, default = newJString(
      "RemoveSourceIdentifierFromSubscription"))
  if valid_615411 != nil:
    section.add "Action", valid_615411
  var valid_615412 = query.getOrDefault("Version")
  valid_615412 = validateParameter(valid_615412, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615412 != nil:
    section.add "Version", valid_615412
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615413 = header.getOrDefault("X-Amz-Signature")
  valid_615413 = validateParameter(valid_615413, JString, required = false,
                                 default = nil)
  if valid_615413 != nil:
    section.add "X-Amz-Signature", valid_615413
  var valid_615414 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615414 = validateParameter(valid_615414, JString, required = false,
                                 default = nil)
  if valid_615414 != nil:
    section.add "X-Amz-Content-Sha256", valid_615414
  var valid_615415 = header.getOrDefault("X-Amz-Date")
  valid_615415 = validateParameter(valid_615415, JString, required = false,
                                 default = nil)
  if valid_615415 != nil:
    section.add "X-Amz-Date", valid_615415
  var valid_615416 = header.getOrDefault("X-Amz-Credential")
  valid_615416 = validateParameter(valid_615416, JString, required = false,
                                 default = nil)
  if valid_615416 != nil:
    section.add "X-Amz-Credential", valid_615416
  var valid_615417 = header.getOrDefault("X-Amz-Security-Token")
  valid_615417 = validateParameter(valid_615417, JString, required = false,
                                 default = nil)
  if valid_615417 != nil:
    section.add "X-Amz-Security-Token", valid_615417
  var valid_615418 = header.getOrDefault("X-Amz-Algorithm")
  valid_615418 = validateParameter(valid_615418, JString, required = false,
                                 default = nil)
  if valid_615418 != nil:
    section.add "X-Amz-Algorithm", valid_615418
  var valid_615419 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615419 = validateParameter(valid_615419, JString, required = false,
                                 default = nil)
  if valid_615419 != nil:
    section.add "X-Amz-SignedHeaders", valid_615419
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615420: Call_GetRemoveSourceIdentifierFromSubscription_615406;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Removes a source identifier from an existing event notification subscription.
  ## 
  let valid = call_615420.validator(path, query, header, formData, body)
  let scheme = call_615420.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615420.url(scheme.get, call_615420.host, call_615420.base,
                         call_615420.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615420, url, valid)

proc call*(call_615421: Call_GetRemoveSourceIdentifierFromSubscription_615406;
          SourceIdentifier: string; SubscriptionName: string;
          Action: string = "RemoveSourceIdentifierFromSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## getRemoveSourceIdentifierFromSubscription
  ## Removes a source identifier from an existing event notification subscription.
  ##   SourceIdentifier: string (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group.
  ##   SubscriptionName: string (required)
  ##                   : The name of the event notification subscription you want to remove a source identifier from.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615422 = newJObject()
  add(query_615422, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_615422, "SubscriptionName", newJString(SubscriptionName))
  add(query_615422, "Action", newJString(Action))
  add(query_615422, "Version", newJString(Version))
  result = call_615421.call(nil, query_615422, nil, nil, nil)

var getRemoveSourceIdentifierFromSubscription* = Call_GetRemoveSourceIdentifierFromSubscription_615406(
    name: "getRemoveSourceIdentifierFromSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=RemoveSourceIdentifierFromSubscription",
    validator: validate_GetRemoveSourceIdentifierFromSubscription_615407,
    base: "/", url: url_GetRemoveSourceIdentifierFromSubscription_615408,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveTagsFromResource_615458 = ref object of OpenApiRestCall_612642
proc url_PostRemoveTagsFromResource_615460(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveTagsFromResource_615459(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes metadata tags from an Amazon Neptune resource.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615461 = query.getOrDefault("Action")
  valid_615461 = validateParameter(valid_615461, JString, required = true,
                                 default = newJString("RemoveTagsFromResource"))
  if valid_615461 != nil:
    section.add "Action", valid_615461
  var valid_615462 = query.getOrDefault("Version")
  valid_615462 = validateParameter(valid_615462, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615462 != nil:
    section.add "Version", valid_615462
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615463 = header.getOrDefault("X-Amz-Signature")
  valid_615463 = validateParameter(valid_615463, JString, required = false,
                                 default = nil)
  if valid_615463 != nil:
    section.add "X-Amz-Signature", valid_615463
  var valid_615464 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615464 = validateParameter(valid_615464, JString, required = false,
                                 default = nil)
  if valid_615464 != nil:
    section.add "X-Amz-Content-Sha256", valid_615464
  var valid_615465 = header.getOrDefault("X-Amz-Date")
  valid_615465 = validateParameter(valid_615465, JString, required = false,
                                 default = nil)
  if valid_615465 != nil:
    section.add "X-Amz-Date", valid_615465
  var valid_615466 = header.getOrDefault("X-Amz-Credential")
  valid_615466 = validateParameter(valid_615466, JString, required = false,
                                 default = nil)
  if valid_615466 != nil:
    section.add "X-Amz-Credential", valid_615466
  var valid_615467 = header.getOrDefault("X-Amz-Security-Token")
  valid_615467 = validateParameter(valid_615467, JString, required = false,
                                 default = nil)
  if valid_615467 != nil:
    section.add "X-Amz-Security-Token", valid_615467
  var valid_615468 = header.getOrDefault("X-Amz-Algorithm")
  valid_615468 = validateParameter(valid_615468, JString, required = false,
                                 default = nil)
  if valid_615468 != nil:
    section.add "X-Amz-Algorithm", valid_615468
  var valid_615469 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615469 = validateParameter(valid_615469, JString, required = false,
                                 default = nil)
  if valid_615469 != nil:
    section.add "X-Amz-SignedHeaders", valid_615469
  result.add "header", section
  ## parameters in `formData` object:
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   ResourceName: JString (required)
  ##               : The Amazon Neptune resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TagKeys` field"
  var valid_615470 = formData.getOrDefault("TagKeys")
  valid_615470 = validateParameter(valid_615470, JArray, required = true, default = nil)
  if valid_615470 != nil:
    section.add "TagKeys", valid_615470
  var valid_615471 = formData.getOrDefault("ResourceName")
  valid_615471 = validateParameter(valid_615471, JString, required = true,
                                 default = nil)
  if valid_615471 != nil:
    section.add "ResourceName", valid_615471
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615472: Call_PostRemoveTagsFromResource_615458; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes metadata tags from an Amazon Neptune resource.
  ## 
  let valid = call_615472.validator(path, query, header, formData, body)
  let scheme = call_615472.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615472.url(scheme.get, call_615472.host, call_615472.base,
                         call_615472.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615472, url, valid)

proc call*(call_615473: Call_PostRemoveTagsFromResource_615458; TagKeys: JsonNode;
          ResourceName: string; Action: string = "RemoveTagsFromResource";
          Version: string = "2014-10-31"): Recallable =
  ## postRemoveTagsFromResource
  ## Removes metadata tags from an Amazon Neptune resource.
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ResourceName: string (required)
  ##               : The Amazon Neptune resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  var query_615474 = newJObject()
  var formData_615475 = newJObject()
  if TagKeys != nil:
    formData_615475.add "TagKeys", TagKeys
  add(query_615474, "Action", newJString(Action))
  add(query_615474, "Version", newJString(Version))
  add(formData_615475, "ResourceName", newJString(ResourceName))
  result = call_615473.call(nil, query_615474, nil, formData_615475, nil)

var postRemoveTagsFromResource* = Call_PostRemoveTagsFromResource_615458(
    name: "postRemoveTagsFromResource", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RemoveTagsFromResource",
    validator: validate_PostRemoveTagsFromResource_615459, base: "/",
    url: url_PostRemoveTagsFromResource_615460,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveTagsFromResource_615441 = ref object of OpenApiRestCall_612642
proc url_GetRemoveTagsFromResource_615443(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveTagsFromResource_615442(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes metadata tags from an Amazon Neptune resource.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceName: JString (required)
  ##               : The Amazon Neptune resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceName` field"
  var valid_615444 = query.getOrDefault("ResourceName")
  valid_615444 = validateParameter(valid_615444, JString, required = true,
                                 default = nil)
  if valid_615444 != nil:
    section.add "ResourceName", valid_615444
  var valid_615445 = query.getOrDefault("TagKeys")
  valid_615445 = validateParameter(valid_615445, JArray, required = true, default = nil)
  if valid_615445 != nil:
    section.add "TagKeys", valid_615445
  var valid_615446 = query.getOrDefault("Action")
  valid_615446 = validateParameter(valid_615446, JString, required = true,
                                 default = newJString("RemoveTagsFromResource"))
  if valid_615446 != nil:
    section.add "Action", valid_615446
  var valid_615447 = query.getOrDefault("Version")
  valid_615447 = validateParameter(valid_615447, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615447 != nil:
    section.add "Version", valid_615447
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615448 = header.getOrDefault("X-Amz-Signature")
  valid_615448 = validateParameter(valid_615448, JString, required = false,
                                 default = nil)
  if valid_615448 != nil:
    section.add "X-Amz-Signature", valid_615448
  var valid_615449 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615449 = validateParameter(valid_615449, JString, required = false,
                                 default = nil)
  if valid_615449 != nil:
    section.add "X-Amz-Content-Sha256", valid_615449
  var valid_615450 = header.getOrDefault("X-Amz-Date")
  valid_615450 = validateParameter(valid_615450, JString, required = false,
                                 default = nil)
  if valid_615450 != nil:
    section.add "X-Amz-Date", valid_615450
  var valid_615451 = header.getOrDefault("X-Amz-Credential")
  valid_615451 = validateParameter(valid_615451, JString, required = false,
                                 default = nil)
  if valid_615451 != nil:
    section.add "X-Amz-Credential", valid_615451
  var valid_615452 = header.getOrDefault("X-Amz-Security-Token")
  valid_615452 = validateParameter(valid_615452, JString, required = false,
                                 default = nil)
  if valid_615452 != nil:
    section.add "X-Amz-Security-Token", valid_615452
  var valid_615453 = header.getOrDefault("X-Amz-Algorithm")
  valid_615453 = validateParameter(valid_615453, JString, required = false,
                                 default = nil)
  if valid_615453 != nil:
    section.add "X-Amz-Algorithm", valid_615453
  var valid_615454 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615454 = validateParameter(valid_615454, JString, required = false,
                                 default = nil)
  if valid_615454 != nil:
    section.add "X-Amz-SignedHeaders", valid_615454
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615455: Call_GetRemoveTagsFromResource_615441; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes metadata tags from an Amazon Neptune resource.
  ## 
  let valid = call_615455.validator(path, query, header, formData, body)
  let scheme = call_615455.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615455.url(scheme.get, call_615455.host, call_615455.base,
                         call_615455.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615455, url, valid)

proc call*(call_615456: Call_GetRemoveTagsFromResource_615441;
          ResourceName: string; TagKeys: JsonNode;
          Action: string = "RemoveTagsFromResource"; Version: string = "2014-10-31"): Recallable =
  ## getRemoveTagsFromResource
  ## Removes metadata tags from an Amazon Neptune resource.
  ##   ResourceName: string (required)
  ##               : The Amazon Neptune resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615457 = newJObject()
  add(query_615457, "ResourceName", newJString(ResourceName))
  if TagKeys != nil:
    query_615457.add "TagKeys", TagKeys
  add(query_615457, "Action", newJString(Action))
  add(query_615457, "Version", newJString(Version))
  result = call_615456.call(nil, query_615457, nil, nil, nil)

var getRemoveTagsFromResource* = Call_GetRemoveTagsFromResource_615441(
    name: "getRemoveTagsFromResource", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RemoveTagsFromResource",
    validator: validate_GetRemoveTagsFromResource_615442, base: "/",
    url: url_GetRemoveTagsFromResource_615443,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResetDBClusterParameterGroup_615494 = ref object of OpenApiRestCall_612642
proc url_PostResetDBClusterParameterGroup_615496(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostResetDBClusterParameterGroup_615495(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters.</p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <a>RebootDBInstance</a> request. You must call <a>RebootDBInstance</a> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615497 = query.getOrDefault("Action")
  valid_615497 = validateParameter(valid_615497, JString, required = true, default = newJString(
      "ResetDBClusterParameterGroup"))
  if valid_615497 != nil:
    section.add "Action", valid_615497
  var valid_615498 = query.getOrDefault("Version")
  valid_615498 = validateParameter(valid_615498, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615498 != nil:
    section.add "Version", valid_615498
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615499 = header.getOrDefault("X-Amz-Signature")
  valid_615499 = validateParameter(valid_615499, JString, required = false,
                                 default = nil)
  if valid_615499 != nil:
    section.add "X-Amz-Signature", valid_615499
  var valid_615500 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615500 = validateParameter(valid_615500, JString, required = false,
                                 default = nil)
  if valid_615500 != nil:
    section.add "X-Amz-Content-Sha256", valid_615500
  var valid_615501 = header.getOrDefault("X-Amz-Date")
  valid_615501 = validateParameter(valid_615501, JString, required = false,
                                 default = nil)
  if valid_615501 != nil:
    section.add "X-Amz-Date", valid_615501
  var valid_615502 = header.getOrDefault("X-Amz-Credential")
  valid_615502 = validateParameter(valid_615502, JString, required = false,
                                 default = nil)
  if valid_615502 != nil:
    section.add "X-Amz-Credential", valid_615502
  var valid_615503 = header.getOrDefault("X-Amz-Security-Token")
  valid_615503 = validateParameter(valid_615503, JString, required = false,
                                 default = nil)
  if valid_615503 != nil:
    section.add "X-Amz-Security-Token", valid_615503
  var valid_615504 = header.getOrDefault("X-Amz-Algorithm")
  valid_615504 = validateParameter(valid_615504, JString, required = false,
                                 default = nil)
  if valid_615504 != nil:
    section.add "X-Amz-Algorithm", valid_615504
  var valid_615505 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615505 = validateParameter(valid_615505, JString, required = false,
                                 default = nil)
  if valid_615505 != nil:
    section.add "X-Amz-SignedHeaders", valid_615505
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResetAllParameters: JBool
  ##                     : A value that is set to <code>true</code> to reset all parameters in the DB cluster parameter group to their default values, and <code>false</code> otherwise. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is set to <code>true</code>.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to reset.
  section = newJObject()
  var valid_615506 = formData.getOrDefault("ResetAllParameters")
  valid_615506 = validateParameter(valid_615506, JBool, required = false, default = nil)
  if valid_615506 != nil:
    section.add "ResetAllParameters", valid_615506
  var valid_615507 = formData.getOrDefault("Parameters")
  valid_615507 = validateParameter(valid_615507, JArray, required = false,
                                 default = nil)
  if valid_615507 != nil:
    section.add "Parameters", valid_615507
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_615508 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_615508 = validateParameter(valid_615508, JString, required = true,
                                 default = nil)
  if valid_615508 != nil:
    section.add "DBClusterParameterGroupName", valid_615508
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615509: Call_PostResetDBClusterParameterGroup_615494;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters.</p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <a>RebootDBInstance</a> request. You must call <a>RebootDBInstance</a> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p>
  ## 
  let valid = call_615509.validator(path, query, header, formData, body)
  let scheme = call_615509.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615509.url(scheme.get, call_615509.host, call_615509.base,
                         call_615509.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615509, url, valid)

proc call*(call_615510: Call_PostResetDBClusterParameterGroup_615494;
          DBClusterParameterGroupName: string; ResetAllParameters: bool = false;
          Action: string = "ResetDBClusterParameterGroup";
          Parameters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postResetDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters.</p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <a>RebootDBInstance</a> request. You must call <a>RebootDBInstance</a> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p>
  ##   ResetAllParameters: bool
  ##                     : A value that is set to <code>true</code> to reset all parameters in the DB cluster parameter group to their default values, and <code>false</code> otherwise. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Action: string (required)
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is set to <code>true</code>.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   Version: string (required)
  var query_615511 = newJObject()
  var formData_615512 = newJObject()
  add(formData_615512, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_615511, "Action", newJString(Action))
  if Parameters != nil:
    formData_615512.add "Parameters", Parameters
  add(formData_615512, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_615511, "Version", newJString(Version))
  result = call_615510.call(nil, query_615511, nil, formData_615512, nil)

var postResetDBClusterParameterGroup* = Call_PostResetDBClusterParameterGroup_615494(
    name: "postResetDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBClusterParameterGroup",
    validator: validate_PostResetDBClusterParameterGroup_615495, base: "/",
    url: url_PostResetDBClusterParameterGroup_615496,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResetDBClusterParameterGroup_615476 = ref object of OpenApiRestCall_612642
proc url_GetResetDBClusterParameterGroup_615478(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetResetDBClusterParameterGroup_615477(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters.</p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <a>RebootDBInstance</a> request. You must call <a>RebootDBInstance</a> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is set to <code>true</code>.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   ResetAllParameters: JBool
  ##                     : A value that is set to <code>true</code> to reset all parameters in the DB cluster parameter group to their default values, and <code>false</code> otherwise. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615479 = query.getOrDefault("Parameters")
  valid_615479 = validateParameter(valid_615479, JArray, required = false,
                                 default = nil)
  if valid_615479 != nil:
    section.add "Parameters", valid_615479
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_615480 = query.getOrDefault("DBClusterParameterGroupName")
  valid_615480 = validateParameter(valid_615480, JString, required = true,
                                 default = nil)
  if valid_615480 != nil:
    section.add "DBClusterParameterGroupName", valid_615480
  var valid_615481 = query.getOrDefault("ResetAllParameters")
  valid_615481 = validateParameter(valid_615481, JBool, required = false, default = nil)
  if valid_615481 != nil:
    section.add "ResetAllParameters", valid_615481
  var valid_615482 = query.getOrDefault("Action")
  valid_615482 = validateParameter(valid_615482, JString, required = true, default = newJString(
      "ResetDBClusterParameterGroup"))
  if valid_615482 != nil:
    section.add "Action", valid_615482
  var valid_615483 = query.getOrDefault("Version")
  valid_615483 = validateParameter(valid_615483, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615483 != nil:
    section.add "Version", valid_615483
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615484 = header.getOrDefault("X-Amz-Signature")
  valid_615484 = validateParameter(valid_615484, JString, required = false,
                                 default = nil)
  if valid_615484 != nil:
    section.add "X-Amz-Signature", valid_615484
  var valid_615485 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615485 = validateParameter(valid_615485, JString, required = false,
                                 default = nil)
  if valid_615485 != nil:
    section.add "X-Amz-Content-Sha256", valid_615485
  var valid_615486 = header.getOrDefault("X-Amz-Date")
  valid_615486 = validateParameter(valid_615486, JString, required = false,
                                 default = nil)
  if valid_615486 != nil:
    section.add "X-Amz-Date", valid_615486
  var valid_615487 = header.getOrDefault("X-Amz-Credential")
  valid_615487 = validateParameter(valid_615487, JString, required = false,
                                 default = nil)
  if valid_615487 != nil:
    section.add "X-Amz-Credential", valid_615487
  var valid_615488 = header.getOrDefault("X-Amz-Security-Token")
  valid_615488 = validateParameter(valid_615488, JString, required = false,
                                 default = nil)
  if valid_615488 != nil:
    section.add "X-Amz-Security-Token", valid_615488
  var valid_615489 = header.getOrDefault("X-Amz-Algorithm")
  valid_615489 = validateParameter(valid_615489, JString, required = false,
                                 default = nil)
  if valid_615489 != nil:
    section.add "X-Amz-Algorithm", valid_615489
  var valid_615490 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615490 = validateParameter(valid_615490, JString, required = false,
                                 default = nil)
  if valid_615490 != nil:
    section.add "X-Amz-SignedHeaders", valid_615490
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615491: Call_GetResetDBClusterParameterGroup_615476;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters.</p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <a>RebootDBInstance</a> request. You must call <a>RebootDBInstance</a> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p>
  ## 
  let valid = call_615491.validator(path, query, header, formData, body)
  let scheme = call_615491.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615491.url(scheme.get, call_615491.host, call_615491.base,
                         call_615491.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615491, url, valid)

proc call*(call_615492: Call_GetResetDBClusterParameterGroup_615476;
          DBClusterParameterGroupName: string; Parameters: JsonNode = nil;
          ResetAllParameters: bool = false;
          Action: string = "ResetDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getResetDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters.</p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <a>RebootDBInstance</a> request. You must call <a>RebootDBInstance</a> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p>
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is set to <code>true</code>.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   ResetAllParameters: bool
  ##                     : A value that is set to <code>true</code> to reset all parameters in the DB cluster parameter group to their default values, and <code>false</code> otherwise. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615493 = newJObject()
  if Parameters != nil:
    query_615493.add "Parameters", Parameters
  add(query_615493, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_615493, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_615493, "Action", newJString(Action))
  add(query_615493, "Version", newJString(Version))
  result = call_615492.call(nil, query_615493, nil, nil, nil)

var getResetDBClusterParameterGroup* = Call_GetResetDBClusterParameterGroup_615476(
    name: "getResetDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBClusterParameterGroup",
    validator: validate_GetResetDBClusterParameterGroup_615477, base: "/",
    url: url_GetResetDBClusterParameterGroup_615478,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResetDBParameterGroup_615531 = ref object of OpenApiRestCall_612642
proc url_PostResetDBParameterGroup_615533(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostResetDBParameterGroup_615532(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615534 = query.getOrDefault("Action")
  valid_615534 = validateParameter(valid_615534, JString, required = true,
                                 default = newJString("ResetDBParameterGroup"))
  if valid_615534 != nil:
    section.add "Action", valid_615534
  var valid_615535 = query.getOrDefault("Version")
  valid_615535 = validateParameter(valid_615535, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615535 != nil:
    section.add "Version", valid_615535
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615536 = header.getOrDefault("X-Amz-Signature")
  valid_615536 = validateParameter(valid_615536, JString, required = false,
                                 default = nil)
  if valid_615536 != nil:
    section.add "X-Amz-Signature", valid_615536
  var valid_615537 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615537 = validateParameter(valid_615537, JString, required = false,
                                 default = nil)
  if valid_615537 != nil:
    section.add "X-Amz-Content-Sha256", valid_615537
  var valid_615538 = header.getOrDefault("X-Amz-Date")
  valid_615538 = validateParameter(valid_615538, JString, required = false,
                                 default = nil)
  if valid_615538 != nil:
    section.add "X-Amz-Date", valid_615538
  var valid_615539 = header.getOrDefault("X-Amz-Credential")
  valid_615539 = validateParameter(valid_615539, JString, required = false,
                                 default = nil)
  if valid_615539 != nil:
    section.add "X-Amz-Credential", valid_615539
  var valid_615540 = header.getOrDefault("X-Amz-Security-Token")
  valid_615540 = validateParameter(valid_615540, JString, required = false,
                                 default = nil)
  if valid_615540 != nil:
    section.add "X-Amz-Security-Token", valid_615540
  var valid_615541 = header.getOrDefault("X-Amz-Algorithm")
  valid_615541 = validateParameter(valid_615541, JString, required = false,
                                 default = nil)
  if valid_615541 != nil:
    section.add "X-Amz-Algorithm", valid_615541
  var valid_615542 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615542 = validateParameter(valid_615542, JString, required = false,
                                 default = nil)
  if valid_615542 != nil:
    section.add "X-Amz-SignedHeaders", valid_615542
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResetAllParameters: JBool
  ##                     : <p>Specifies whether (<code>true</code>) or not (<code>false</code>) to reset all parameters in the DB parameter group to default values.</p> <p>Default: <code>true</code> </p>
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  section = newJObject()
  var valid_615543 = formData.getOrDefault("ResetAllParameters")
  valid_615543 = validateParameter(valid_615543, JBool, required = false, default = nil)
  if valid_615543 != nil:
    section.add "ResetAllParameters", valid_615543
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_615544 = formData.getOrDefault("DBParameterGroupName")
  valid_615544 = validateParameter(valid_615544, JString, required = true,
                                 default = nil)
  if valid_615544 != nil:
    section.add "DBParameterGroupName", valid_615544
  var valid_615545 = formData.getOrDefault("Parameters")
  valid_615545 = validateParameter(valid_615545, JArray, required = false,
                                 default = nil)
  if valid_615545 != nil:
    section.add "Parameters", valid_615545
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615546: Call_PostResetDBParameterGroup_615531; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request.
  ## 
  let valid = call_615546.validator(path, query, header, formData, body)
  let scheme = call_615546.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615546.url(scheme.get, call_615546.host, call_615546.base,
                         call_615546.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615546, url, valid)

proc call*(call_615547: Call_PostResetDBParameterGroup_615531;
          DBParameterGroupName: string; ResetAllParameters: bool = false;
          Action: string = "ResetDBParameterGroup"; Parameters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postResetDBParameterGroup
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request.
  ##   ResetAllParameters: bool
  ##                     : <p>Specifies whether (<code>true</code>) or not (<code>false</code>) to reset all parameters in the DB parameter group to default values.</p> <p>Default: <code>true</code> </p>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Action: string (required)
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   Version: string (required)
  var query_615548 = newJObject()
  var formData_615549 = newJObject()
  add(formData_615549, "ResetAllParameters", newJBool(ResetAllParameters))
  add(formData_615549, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_615548, "Action", newJString(Action))
  if Parameters != nil:
    formData_615549.add "Parameters", Parameters
  add(query_615548, "Version", newJString(Version))
  result = call_615547.call(nil, query_615548, nil, formData_615549, nil)

var postResetDBParameterGroup* = Call_PostResetDBParameterGroup_615531(
    name: "postResetDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBParameterGroup",
    validator: validate_PostResetDBParameterGroup_615532, base: "/",
    url: url_PostResetDBParameterGroup_615533,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResetDBParameterGroup_615513 = ref object of OpenApiRestCall_612642
proc url_GetResetDBParameterGroup_615515(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetResetDBParameterGroup_615514(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   ResetAllParameters: JBool
  ##                     : <p>Specifies whether (<code>true</code>) or not (<code>false</code>) to reset all parameters in the DB parameter group to default values.</p> <p>Default: <code>true</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_615516 = query.getOrDefault("DBParameterGroupName")
  valid_615516 = validateParameter(valid_615516, JString, required = true,
                                 default = nil)
  if valid_615516 != nil:
    section.add "DBParameterGroupName", valid_615516
  var valid_615517 = query.getOrDefault("Parameters")
  valid_615517 = validateParameter(valid_615517, JArray, required = false,
                                 default = nil)
  if valid_615517 != nil:
    section.add "Parameters", valid_615517
  var valid_615518 = query.getOrDefault("ResetAllParameters")
  valid_615518 = validateParameter(valid_615518, JBool, required = false, default = nil)
  if valid_615518 != nil:
    section.add "ResetAllParameters", valid_615518
  var valid_615519 = query.getOrDefault("Action")
  valid_615519 = validateParameter(valid_615519, JString, required = true,
                                 default = newJString("ResetDBParameterGroup"))
  if valid_615519 != nil:
    section.add "Action", valid_615519
  var valid_615520 = query.getOrDefault("Version")
  valid_615520 = validateParameter(valid_615520, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615520 != nil:
    section.add "Version", valid_615520
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615521 = header.getOrDefault("X-Amz-Signature")
  valid_615521 = validateParameter(valid_615521, JString, required = false,
                                 default = nil)
  if valid_615521 != nil:
    section.add "X-Amz-Signature", valid_615521
  var valid_615522 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615522 = validateParameter(valid_615522, JString, required = false,
                                 default = nil)
  if valid_615522 != nil:
    section.add "X-Amz-Content-Sha256", valid_615522
  var valid_615523 = header.getOrDefault("X-Amz-Date")
  valid_615523 = validateParameter(valid_615523, JString, required = false,
                                 default = nil)
  if valid_615523 != nil:
    section.add "X-Amz-Date", valid_615523
  var valid_615524 = header.getOrDefault("X-Amz-Credential")
  valid_615524 = validateParameter(valid_615524, JString, required = false,
                                 default = nil)
  if valid_615524 != nil:
    section.add "X-Amz-Credential", valid_615524
  var valid_615525 = header.getOrDefault("X-Amz-Security-Token")
  valid_615525 = validateParameter(valid_615525, JString, required = false,
                                 default = nil)
  if valid_615525 != nil:
    section.add "X-Amz-Security-Token", valid_615525
  var valid_615526 = header.getOrDefault("X-Amz-Algorithm")
  valid_615526 = validateParameter(valid_615526, JString, required = false,
                                 default = nil)
  if valid_615526 != nil:
    section.add "X-Amz-Algorithm", valid_615526
  var valid_615527 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615527 = validateParameter(valid_615527, JString, required = false,
                                 default = nil)
  if valid_615527 != nil:
    section.add "X-Amz-SignedHeaders", valid_615527
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615528: Call_GetResetDBParameterGroup_615513; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request.
  ## 
  let valid = call_615528.validator(path, query, header, formData, body)
  let scheme = call_615528.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615528.url(scheme.get, call_615528.host, call_615528.base,
                         call_615528.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615528, url, valid)

proc call*(call_615529: Call_GetResetDBParameterGroup_615513;
          DBParameterGroupName: string; Parameters: JsonNode = nil;
          ResetAllParameters: bool = false;
          Action: string = "ResetDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getResetDBParameterGroup
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   ResetAllParameters: bool
  ##                     : <p>Specifies whether (<code>true</code>) or not (<code>false</code>) to reset all parameters in the DB parameter group to default values.</p> <p>Default: <code>true</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615530 = newJObject()
  add(query_615530, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Parameters != nil:
    query_615530.add "Parameters", Parameters
  add(query_615530, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_615530, "Action", newJString(Action))
  add(query_615530, "Version", newJString(Version))
  result = call_615529.call(nil, query_615530, nil, nil, nil)

var getResetDBParameterGroup* = Call_GetResetDBParameterGroup_615513(
    name: "getResetDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBParameterGroup",
    validator: validate_GetResetDBParameterGroup_615514, base: "/",
    url: url_GetResetDBParameterGroup_615515, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBClusterFromSnapshot_615581 = ref object of OpenApiRestCall_612642
proc url_PostRestoreDBClusterFromSnapshot_615583(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRestoreDBClusterFromSnapshot_615582(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615584 = query.getOrDefault("Action")
  valid_615584 = validateParameter(valid_615584, JString, required = true, default = newJString(
      "RestoreDBClusterFromSnapshot"))
  if valid_615584 != nil:
    section.add "Action", valid_615584
  var valid_615585 = query.getOrDefault("Version")
  valid_615585 = validateParameter(valid_615585, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615585 != nil:
    section.add "Version", valid_615585
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615586 = header.getOrDefault("X-Amz-Signature")
  valid_615586 = validateParameter(valid_615586, JString, required = false,
                                 default = nil)
  if valid_615586 != nil:
    section.add "X-Amz-Signature", valid_615586
  var valid_615587 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615587 = validateParameter(valid_615587, JString, required = false,
                                 default = nil)
  if valid_615587 != nil:
    section.add "X-Amz-Content-Sha256", valid_615587
  var valid_615588 = header.getOrDefault("X-Amz-Date")
  valid_615588 = validateParameter(valid_615588, JString, required = false,
                                 default = nil)
  if valid_615588 != nil:
    section.add "X-Amz-Date", valid_615588
  var valid_615589 = header.getOrDefault("X-Amz-Credential")
  valid_615589 = validateParameter(valid_615589, JString, required = false,
                                 default = nil)
  if valid_615589 != nil:
    section.add "X-Amz-Credential", valid_615589
  var valid_615590 = header.getOrDefault("X-Amz-Security-Token")
  valid_615590 = validateParameter(valid_615590, JString, required = false,
                                 default = nil)
  if valid_615590 != nil:
    section.add "X-Amz-Security-Token", valid_615590
  var valid_615591 = header.getOrDefault("X-Amz-Algorithm")
  valid_615591 = validateParameter(valid_615591, JString, required = false,
                                 default = nil)
  if valid_615591 != nil:
    section.add "X-Amz-Algorithm", valid_615591
  var valid_615592 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615592 = validateParameter(valid_615592, JString, required = false,
                                 default = nil)
  if valid_615592 != nil:
    section.add "X-Amz-SignedHeaders", valid_615592
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   EngineVersion: JString
  ##                : The version of the database engine to use for the new DB cluster.
  ##   DatabaseName: JString
  ##               : Not supported.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of EC2 Availability Zones that instances in the restored DB cluster can be created in.
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul>
  ##   Engine: JString (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   SnapshotIdentifier: JString (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs.
  ##   Tags: JArray
  ##       : The tags to be assigned to the restored DB cluster.
  ##   DBSubnetGroupName: JString
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: JString
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with the new DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  section = newJObject()
  var valid_615593 = formData.getOrDefault("Port")
  valid_615593 = validateParameter(valid_615593, JInt, required = false, default = nil)
  if valid_615593 != nil:
    section.add "Port", valid_615593
  var valid_615594 = formData.getOrDefault("EngineVersion")
  valid_615594 = validateParameter(valid_615594, JString, required = false,
                                 default = nil)
  if valid_615594 != nil:
    section.add "EngineVersion", valid_615594
  var valid_615595 = formData.getOrDefault("DatabaseName")
  valid_615595 = validateParameter(valid_615595, JString, required = false,
                                 default = nil)
  if valid_615595 != nil:
    section.add "DatabaseName", valid_615595
  var valid_615596 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_615596 = validateParameter(valid_615596, JArray, required = false,
                                 default = nil)
  if valid_615596 != nil:
    section.add "VpcSecurityGroupIds", valid_615596
  var valid_615597 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_615597 = validateParameter(valid_615597, JBool, required = false, default = nil)
  if valid_615597 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_615597
  var valid_615598 = formData.getOrDefault("AvailabilityZones")
  valid_615598 = validateParameter(valid_615598, JArray, required = false,
                                 default = nil)
  if valid_615598 != nil:
    section.add "AvailabilityZones", valid_615598
  var valid_615599 = formData.getOrDefault("KmsKeyId")
  valid_615599 = validateParameter(valid_615599, JString, required = false,
                                 default = nil)
  if valid_615599 != nil:
    section.add "KmsKeyId", valid_615599
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_615600 = formData.getOrDefault("Engine")
  valid_615600 = validateParameter(valid_615600, JString, required = true,
                                 default = nil)
  if valid_615600 != nil:
    section.add "Engine", valid_615600
  var valid_615601 = formData.getOrDefault("SnapshotIdentifier")
  valid_615601 = validateParameter(valid_615601, JString, required = true,
                                 default = nil)
  if valid_615601 != nil:
    section.add "SnapshotIdentifier", valid_615601
  var valid_615602 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_615602 = validateParameter(valid_615602, JArray, required = false,
                                 default = nil)
  if valid_615602 != nil:
    section.add "EnableCloudwatchLogsExports", valid_615602
  var valid_615603 = formData.getOrDefault("Tags")
  valid_615603 = validateParameter(valid_615603, JArray, required = false,
                                 default = nil)
  if valid_615603 != nil:
    section.add "Tags", valid_615603
  var valid_615604 = formData.getOrDefault("DBSubnetGroupName")
  valid_615604 = validateParameter(valid_615604, JString, required = false,
                                 default = nil)
  if valid_615604 != nil:
    section.add "DBSubnetGroupName", valid_615604
  var valid_615605 = formData.getOrDefault("OptionGroupName")
  valid_615605 = validateParameter(valid_615605, JString, required = false,
                                 default = nil)
  if valid_615605 != nil:
    section.add "OptionGroupName", valid_615605
  var valid_615606 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_615606 = validateParameter(valid_615606, JString, required = false,
                                 default = nil)
  if valid_615606 != nil:
    section.add "DBClusterParameterGroupName", valid_615606
  var valid_615607 = formData.getOrDefault("DBClusterIdentifier")
  valid_615607 = validateParameter(valid_615607, JString, required = true,
                                 default = nil)
  if valid_615607 != nil:
    section.add "DBClusterIdentifier", valid_615607
  var valid_615608 = formData.getOrDefault("DeletionProtection")
  valid_615608 = validateParameter(valid_615608, JBool, required = false, default = nil)
  if valid_615608 != nil:
    section.add "DeletionProtection", valid_615608
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615609: Call_PostRestoreDBClusterFromSnapshot_615581;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p>
  ## 
  let valid = call_615609.validator(path, query, header, formData, body)
  let scheme = call_615609.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615609.url(scheme.get, call_615609.host, call_615609.base,
                         call_615609.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615609, url, valid)

proc call*(call_615610: Call_PostRestoreDBClusterFromSnapshot_615581;
          Engine: string; SnapshotIdentifier: string; DBClusterIdentifier: string;
          Port: int = 0; EngineVersion: string = ""; DatabaseName: string = "";
          VpcSecurityGroupIds: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false;
          AvailabilityZones: JsonNode = nil; KmsKeyId: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "RestoreDBClusterFromSnapshot"; Tags: JsonNode = nil;
          DBSubnetGroupName: string = ""; OptionGroupName: string = "";
          DBClusterParameterGroupName: string = ""; Version: string = "2014-10-31";
          DeletionProtection: bool = false): Recallable =
  ## postRestoreDBClusterFromSnapshot
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p>
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   EngineVersion: string
  ##                : The version of the database engine to use for the new DB cluster.
  ##   DatabaseName: string
  ##               : Not supported.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of EC2 Availability Zones that instances in the restored DB cluster can be created in.
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul>
  ##   Engine: string (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   SnapshotIdentifier: string (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : The tags to be assigned to the restored DB cluster.
  ##   DBSubnetGroupName: string
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: string
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with the new DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  var query_615611 = newJObject()
  var formData_615612 = newJObject()
  add(formData_615612, "Port", newJInt(Port))
  add(formData_615612, "EngineVersion", newJString(EngineVersion))
  add(formData_615612, "DatabaseName", newJString(DatabaseName))
  if VpcSecurityGroupIds != nil:
    formData_615612.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_615612, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if AvailabilityZones != nil:
    formData_615612.add "AvailabilityZones", AvailabilityZones
  add(formData_615612, "KmsKeyId", newJString(KmsKeyId))
  add(formData_615612, "Engine", newJString(Engine))
  add(formData_615612, "SnapshotIdentifier", newJString(SnapshotIdentifier))
  if EnableCloudwatchLogsExports != nil:
    formData_615612.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_615611, "Action", newJString(Action))
  if Tags != nil:
    formData_615612.add "Tags", Tags
  add(formData_615612, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_615612, "OptionGroupName", newJString(OptionGroupName))
  add(formData_615612, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_615611, "Version", newJString(Version))
  add(formData_615612, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_615612, "DeletionProtection", newJBool(DeletionProtection))
  result = call_615610.call(nil, query_615611, nil, formData_615612, nil)

var postRestoreDBClusterFromSnapshot* = Call_PostRestoreDBClusterFromSnapshot_615581(
    name: "postRestoreDBClusterFromSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterFromSnapshot",
    validator: validate_PostRestoreDBClusterFromSnapshot_615582, base: "/",
    url: url_PostRestoreDBClusterFromSnapshot_615583,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBClusterFromSnapshot_615550 = ref object of OpenApiRestCall_612642
proc url_GetRestoreDBClusterFromSnapshot_615552(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRestoreDBClusterFromSnapshot_615551(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DatabaseName: JString
  ##               : Not supported.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   Engine: JString (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   SnapshotIdentifier: JString (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   Tags: JArray
  ##       : The tags to be assigned to the restored DB cluster.
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with the new DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of EC2 Availability Zones that instances in the restored DB cluster can be created in.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs.
  ##   EngineVersion: JString
  ##                : The version of the database engine to use for the new DB cluster.
  ##   Action: JString (required)
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   OptionGroupName: JString
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_615553 = query.getOrDefault("DatabaseName")
  valid_615553 = validateParameter(valid_615553, JString, required = false,
                                 default = nil)
  if valid_615553 != nil:
    section.add "DatabaseName", valid_615553
  var valid_615554 = query.getOrDefault("DeletionProtection")
  valid_615554 = validateParameter(valid_615554, JBool, required = false, default = nil)
  if valid_615554 != nil:
    section.add "DeletionProtection", valid_615554
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_615555 = query.getOrDefault("Engine")
  valid_615555 = validateParameter(valid_615555, JString, required = true,
                                 default = nil)
  if valid_615555 != nil:
    section.add "Engine", valid_615555
  var valid_615556 = query.getOrDefault("SnapshotIdentifier")
  valid_615556 = validateParameter(valid_615556, JString, required = true,
                                 default = nil)
  if valid_615556 != nil:
    section.add "SnapshotIdentifier", valid_615556
  var valid_615557 = query.getOrDefault("Tags")
  valid_615557 = validateParameter(valid_615557, JArray, required = false,
                                 default = nil)
  if valid_615557 != nil:
    section.add "Tags", valid_615557
  var valid_615558 = query.getOrDefault("KmsKeyId")
  valid_615558 = validateParameter(valid_615558, JString, required = false,
                                 default = nil)
  if valid_615558 != nil:
    section.add "KmsKeyId", valid_615558
  var valid_615559 = query.getOrDefault("DBClusterIdentifier")
  valid_615559 = validateParameter(valid_615559, JString, required = true,
                                 default = nil)
  if valid_615559 != nil:
    section.add "DBClusterIdentifier", valid_615559
  var valid_615560 = query.getOrDefault("DBClusterParameterGroupName")
  valid_615560 = validateParameter(valid_615560, JString, required = false,
                                 default = nil)
  if valid_615560 != nil:
    section.add "DBClusterParameterGroupName", valid_615560
  var valid_615561 = query.getOrDefault("AvailabilityZones")
  valid_615561 = validateParameter(valid_615561, JArray, required = false,
                                 default = nil)
  if valid_615561 != nil:
    section.add "AvailabilityZones", valid_615561
  var valid_615562 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_615562 = validateParameter(valid_615562, JBool, required = false, default = nil)
  if valid_615562 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_615562
  var valid_615563 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_615563 = validateParameter(valid_615563, JArray, required = false,
                                 default = nil)
  if valid_615563 != nil:
    section.add "EnableCloudwatchLogsExports", valid_615563
  var valid_615564 = query.getOrDefault("EngineVersion")
  valid_615564 = validateParameter(valid_615564, JString, required = false,
                                 default = nil)
  if valid_615564 != nil:
    section.add "EngineVersion", valid_615564
  var valid_615565 = query.getOrDefault("Action")
  valid_615565 = validateParameter(valid_615565, JString, required = true, default = newJString(
      "RestoreDBClusterFromSnapshot"))
  if valid_615565 != nil:
    section.add "Action", valid_615565
  var valid_615566 = query.getOrDefault("Port")
  valid_615566 = validateParameter(valid_615566, JInt, required = false, default = nil)
  if valid_615566 != nil:
    section.add "Port", valid_615566
  var valid_615567 = query.getOrDefault("VpcSecurityGroupIds")
  valid_615567 = validateParameter(valid_615567, JArray, required = false,
                                 default = nil)
  if valid_615567 != nil:
    section.add "VpcSecurityGroupIds", valid_615567
  var valid_615568 = query.getOrDefault("OptionGroupName")
  valid_615568 = validateParameter(valid_615568, JString, required = false,
                                 default = nil)
  if valid_615568 != nil:
    section.add "OptionGroupName", valid_615568
  var valid_615569 = query.getOrDefault("DBSubnetGroupName")
  valid_615569 = validateParameter(valid_615569, JString, required = false,
                                 default = nil)
  if valid_615569 != nil:
    section.add "DBSubnetGroupName", valid_615569
  var valid_615570 = query.getOrDefault("Version")
  valid_615570 = validateParameter(valid_615570, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615570 != nil:
    section.add "Version", valid_615570
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615571 = header.getOrDefault("X-Amz-Signature")
  valid_615571 = validateParameter(valid_615571, JString, required = false,
                                 default = nil)
  if valid_615571 != nil:
    section.add "X-Amz-Signature", valid_615571
  var valid_615572 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615572 = validateParameter(valid_615572, JString, required = false,
                                 default = nil)
  if valid_615572 != nil:
    section.add "X-Amz-Content-Sha256", valid_615572
  var valid_615573 = header.getOrDefault("X-Amz-Date")
  valid_615573 = validateParameter(valid_615573, JString, required = false,
                                 default = nil)
  if valid_615573 != nil:
    section.add "X-Amz-Date", valid_615573
  var valid_615574 = header.getOrDefault("X-Amz-Credential")
  valid_615574 = validateParameter(valid_615574, JString, required = false,
                                 default = nil)
  if valid_615574 != nil:
    section.add "X-Amz-Credential", valid_615574
  var valid_615575 = header.getOrDefault("X-Amz-Security-Token")
  valid_615575 = validateParameter(valid_615575, JString, required = false,
                                 default = nil)
  if valid_615575 != nil:
    section.add "X-Amz-Security-Token", valid_615575
  var valid_615576 = header.getOrDefault("X-Amz-Algorithm")
  valid_615576 = validateParameter(valid_615576, JString, required = false,
                                 default = nil)
  if valid_615576 != nil:
    section.add "X-Amz-Algorithm", valid_615576
  var valid_615577 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615577 = validateParameter(valid_615577, JString, required = false,
                                 default = nil)
  if valid_615577 != nil:
    section.add "X-Amz-SignedHeaders", valid_615577
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615578: Call_GetRestoreDBClusterFromSnapshot_615550;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p>
  ## 
  let valid = call_615578.validator(path, query, header, formData, body)
  let scheme = call_615578.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615578.url(scheme.get, call_615578.host, call_615578.base,
                         call_615578.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615578, url, valid)

proc call*(call_615579: Call_GetRestoreDBClusterFromSnapshot_615550;
          Engine: string; SnapshotIdentifier: string; DBClusterIdentifier: string;
          DatabaseName: string = ""; DeletionProtection: bool = false;
          Tags: JsonNode = nil; KmsKeyId: string = "";
          DBClusterParameterGroupName: string = "";
          AvailabilityZones: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false;
          EnableCloudwatchLogsExports: JsonNode = nil; EngineVersion: string = "";
          Action: string = "RestoreDBClusterFromSnapshot"; Port: int = 0;
          VpcSecurityGroupIds: JsonNode = nil; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getRestoreDBClusterFromSnapshot
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p>
  ##   DatabaseName: string
  ##               : Not supported.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   Engine: string (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   SnapshotIdentifier: string (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   Tags: JArray
  ##       : The tags to be assigned to the restored DB cluster.
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with the new DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of EC2 Availability Zones that instances in the restored DB cluster can be created in.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs.
  ##   EngineVersion: string
  ##                : The version of the database engine to use for the new DB cluster.
  ##   Action: string (required)
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   OptionGroupName: string
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   DBSubnetGroupName: string
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_615580 = newJObject()
  add(query_615580, "DatabaseName", newJString(DatabaseName))
  add(query_615580, "DeletionProtection", newJBool(DeletionProtection))
  add(query_615580, "Engine", newJString(Engine))
  add(query_615580, "SnapshotIdentifier", newJString(SnapshotIdentifier))
  if Tags != nil:
    query_615580.add "Tags", Tags
  add(query_615580, "KmsKeyId", newJString(KmsKeyId))
  add(query_615580, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_615580, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if AvailabilityZones != nil:
    query_615580.add "AvailabilityZones", AvailabilityZones
  add(query_615580, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if EnableCloudwatchLogsExports != nil:
    query_615580.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_615580, "EngineVersion", newJString(EngineVersion))
  add(query_615580, "Action", newJString(Action))
  add(query_615580, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    query_615580.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_615580, "OptionGroupName", newJString(OptionGroupName))
  add(query_615580, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_615580, "Version", newJString(Version))
  result = call_615579.call(nil, query_615580, nil, nil, nil)

var getRestoreDBClusterFromSnapshot* = Call_GetRestoreDBClusterFromSnapshot_615550(
    name: "getRestoreDBClusterFromSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterFromSnapshot",
    validator: validate_GetRestoreDBClusterFromSnapshot_615551, base: "/",
    url: url_GetRestoreDBClusterFromSnapshot_615552,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBClusterToPointInTime_615643 = ref object of OpenApiRestCall_612642
proc url_PostRestoreDBClusterToPointInTime_615645(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRestoreDBClusterToPointInTime_615644(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group.</p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <a>CreateDBInstance</a> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615646 = query.getOrDefault("Action")
  valid_615646 = validateParameter(valid_615646, JString, required = true, default = newJString(
      "RestoreDBClusterToPointInTime"))
  if valid_615646 != nil:
    section.add "Action", valid_615646
  var valid_615647 = query.getOrDefault("Version")
  valid_615647 = validateParameter(valid_615647, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615647 != nil:
    section.add "Version", valid_615647
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615648 = header.getOrDefault("X-Amz-Signature")
  valid_615648 = validateParameter(valid_615648, JString, required = false,
                                 default = nil)
  if valid_615648 != nil:
    section.add "X-Amz-Signature", valid_615648
  var valid_615649 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615649 = validateParameter(valid_615649, JString, required = false,
                                 default = nil)
  if valid_615649 != nil:
    section.add "X-Amz-Content-Sha256", valid_615649
  var valid_615650 = header.getOrDefault("X-Amz-Date")
  valid_615650 = validateParameter(valid_615650, JString, required = false,
                                 default = nil)
  if valid_615650 != nil:
    section.add "X-Amz-Date", valid_615650
  var valid_615651 = header.getOrDefault("X-Amz-Credential")
  valid_615651 = validateParameter(valid_615651, JString, required = false,
                                 default = nil)
  if valid_615651 != nil:
    section.add "X-Amz-Credential", valid_615651
  var valid_615652 = header.getOrDefault("X-Amz-Security-Token")
  valid_615652 = validateParameter(valid_615652, JString, required = false,
                                 default = nil)
  if valid_615652 != nil:
    section.add "X-Amz-Security-Token", valid_615652
  var valid_615653 = header.getOrDefault("X-Amz-Algorithm")
  valid_615653 = validateParameter(valid_615653, JString, required = false,
                                 default = nil)
  if valid_615653 != nil:
    section.add "X-Amz-Algorithm", valid_615653
  var valid_615654 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615654 = validateParameter(valid_615654, JString, required = false,
                                 default = nil)
  if valid_615654 != nil:
    section.add "X-Amz-SignedHeaders", valid_615654
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   SourceDBClusterIdentifier: JString (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that is not encrypted, then the restore request is rejected.</p>
  ##   RestoreType: JString
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   UseLatestRestorableTime: JBool
  ##                          : <p>A value that is set to <code>true</code> to restore the DB cluster to the latest restorable backup time, and <code>false</code> otherwise.</p> <p>Default: <code>false</code> </p> <p>Constraints: Cannot be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   RestoreToTime: JString
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter is not provided</p> </li> <li> <p>Cannot be specified if <code>UseLatestRestorableTime</code> parameter is true</p> </li> <li> <p>Cannot be specified if <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs.
  ##   Tags: JArray
  ##       : The tags to be applied to the restored DB cluster.
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: JString
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with the new DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  section = newJObject()
  var valid_615655 = formData.getOrDefault("Port")
  valid_615655 = validateParameter(valid_615655, JInt, required = false, default = nil)
  if valid_615655 != nil:
    section.add "Port", valid_615655
  var valid_615656 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_615656 = validateParameter(valid_615656, JArray, required = false,
                                 default = nil)
  if valid_615656 != nil:
    section.add "VpcSecurityGroupIds", valid_615656
  assert formData != nil, "formData argument is necessary due to required `SourceDBClusterIdentifier` field"
  var valid_615657 = formData.getOrDefault("SourceDBClusterIdentifier")
  valid_615657 = validateParameter(valid_615657, JString, required = true,
                                 default = nil)
  if valid_615657 != nil:
    section.add "SourceDBClusterIdentifier", valid_615657
  var valid_615658 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_615658 = validateParameter(valid_615658, JBool, required = false, default = nil)
  if valid_615658 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_615658
  var valid_615659 = formData.getOrDefault("KmsKeyId")
  valid_615659 = validateParameter(valid_615659, JString, required = false,
                                 default = nil)
  if valid_615659 != nil:
    section.add "KmsKeyId", valid_615659
  var valid_615660 = formData.getOrDefault("RestoreType")
  valid_615660 = validateParameter(valid_615660, JString, required = false,
                                 default = nil)
  if valid_615660 != nil:
    section.add "RestoreType", valid_615660
  var valid_615661 = formData.getOrDefault("UseLatestRestorableTime")
  valid_615661 = validateParameter(valid_615661, JBool, required = false, default = nil)
  if valid_615661 != nil:
    section.add "UseLatestRestorableTime", valid_615661
  var valid_615662 = formData.getOrDefault("RestoreToTime")
  valid_615662 = validateParameter(valid_615662, JString, required = false,
                                 default = nil)
  if valid_615662 != nil:
    section.add "RestoreToTime", valid_615662
  var valid_615663 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_615663 = validateParameter(valid_615663, JArray, required = false,
                                 default = nil)
  if valid_615663 != nil:
    section.add "EnableCloudwatchLogsExports", valid_615663
  var valid_615664 = formData.getOrDefault("Tags")
  valid_615664 = validateParameter(valid_615664, JArray, required = false,
                                 default = nil)
  if valid_615664 != nil:
    section.add "Tags", valid_615664
  var valid_615665 = formData.getOrDefault("DBSubnetGroupName")
  valid_615665 = validateParameter(valid_615665, JString, required = false,
                                 default = nil)
  if valid_615665 != nil:
    section.add "DBSubnetGroupName", valid_615665
  var valid_615666 = formData.getOrDefault("OptionGroupName")
  valid_615666 = validateParameter(valid_615666, JString, required = false,
                                 default = nil)
  if valid_615666 != nil:
    section.add "OptionGroupName", valid_615666
  var valid_615667 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_615667 = validateParameter(valid_615667, JString, required = false,
                                 default = nil)
  if valid_615667 != nil:
    section.add "DBClusterParameterGroupName", valid_615667
  var valid_615668 = formData.getOrDefault("DBClusterIdentifier")
  valid_615668 = validateParameter(valid_615668, JString, required = true,
                                 default = nil)
  if valid_615668 != nil:
    section.add "DBClusterIdentifier", valid_615668
  var valid_615669 = formData.getOrDefault("DeletionProtection")
  valid_615669 = validateParameter(valid_615669, JBool, required = false, default = nil)
  if valid_615669 != nil:
    section.add "DeletionProtection", valid_615669
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615670: Call_PostRestoreDBClusterToPointInTime_615643;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group.</p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <a>CreateDBInstance</a> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note>
  ## 
  let valid = call_615670.validator(path, query, header, formData, body)
  let scheme = call_615670.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615670.url(scheme.get, call_615670.host, call_615670.base,
                         call_615670.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615670, url, valid)

proc call*(call_615671: Call_PostRestoreDBClusterToPointInTime_615643;
          SourceDBClusterIdentifier: string; DBClusterIdentifier: string;
          Port: int = 0; VpcSecurityGroupIds: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false; KmsKeyId: string = "";
          RestoreType: string = ""; UseLatestRestorableTime: bool = false;
          RestoreToTime: string = ""; EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "RestoreDBClusterToPointInTime"; Tags: JsonNode = nil;
          DBSubnetGroupName: string = ""; OptionGroupName: string = "";
          DBClusterParameterGroupName: string = ""; Version: string = "2014-10-31";
          DeletionProtection: bool = false): Recallable =
  ## postRestoreDBClusterToPointInTime
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group.</p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <a>CreateDBInstance</a> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note>
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   SourceDBClusterIdentifier: string (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that is not encrypted, then the restore request is rejected.</p>
  ##   RestoreType: string
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   UseLatestRestorableTime: bool
  ##                          : <p>A value that is set to <code>true</code> to restore the DB cluster to the latest restorable backup time, and <code>false</code> otherwise.</p> <p>Default: <code>false</code> </p> <p>Constraints: Cannot be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   RestoreToTime: string
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter is not provided</p> </li> <li> <p>Cannot be specified if <code>UseLatestRestorableTime</code> parameter is true</p> </li> <li> <p>Cannot be specified if <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : The tags to be applied to the restored DB cluster.
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: string
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with the new DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  var query_615672 = newJObject()
  var formData_615673 = newJObject()
  add(formData_615673, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    formData_615673.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_615673, "SourceDBClusterIdentifier",
      newJString(SourceDBClusterIdentifier))
  add(formData_615673, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_615673, "KmsKeyId", newJString(KmsKeyId))
  add(formData_615673, "RestoreType", newJString(RestoreType))
  add(formData_615673, "UseLatestRestorableTime",
      newJBool(UseLatestRestorableTime))
  add(formData_615673, "RestoreToTime", newJString(RestoreToTime))
  if EnableCloudwatchLogsExports != nil:
    formData_615673.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_615672, "Action", newJString(Action))
  if Tags != nil:
    formData_615673.add "Tags", Tags
  add(formData_615673, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_615673, "OptionGroupName", newJString(OptionGroupName))
  add(formData_615673, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_615672, "Version", newJString(Version))
  add(formData_615673, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_615673, "DeletionProtection", newJBool(DeletionProtection))
  result = call_615671.call(nil, query_615672, nil, formData_615673, nil)

var postRestoreDBClusterToPointInTime* = Call_PostRestoreDBClusterToPointInTime_615643(
    name: "postRestoreDBClusterToPointInTime", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterToPointInTime",
    validator: validate_PostRestoreDBClusterToPointInTime_615644, base: "/",
    url: url_PostRestoreDBClusterToPointInTime_615645,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBClusterToPointInTime_615613 = ref object of OpenApiRestCall_612642
proc url_GetRestoreDBClusterToPointInTime_615615(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRestoreDBClusterToPointInTime_615614(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group.</p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <a>CreateDBInstance</a> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   RestoreType: JString
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   UseLatestRestorableTime: JBool
  ##                          : <p>A value that is set to <code>true</code> to restore the DB cluster to the latest restorable backup time, and <code>false</code> otherwise.</p> <p>Default: <code>false</code> </p> <p>Constraints: Cannot be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   Tags: JArray
  ##       : The tags to be applied to the restored DB cluster.
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that is not encrypted, then the restore request is rejected.</p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   SourceDBClusterIdentifier: JString (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with the new DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   RestoreToTime: JString
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter is not provided</p> </li> <li> <p>Cannot be specified if <code>UseLatestRestorableTime</code> parameter is true</p> </li> <li> <p>Cannot be specified if <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs.
  ##   Action: JString (required)
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   OptionGroupName: JString
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_615616 = query.getOrDefault("DeletionProtection")
  valid_615616 = validateParameter(valid_615616, JBool, required = false, default = nil)
  if valid_615616 != nil:
    section.add "DeletionProtection", valid_615616
  var valid_615617 = query.getOrDefault("RestoreType")
  valid_615617 = validateParameter(valid_615617, JString, required = false,
                                 default = nil)
  if valid_615617 != nil:
    section.add "RestoreType", valid_615617
  var valid_615618 = query.getOrDefault("UseLatestRestorableTime")
  valid_615618 = validateParameter(valid_615618, JBool, required = false, default = nil)
  if valid_615618 != nil:
    section.add "UseLatestRestorableTime", valid_615618
  var valid_615619 = query.getOrDefault("Tags")
  valid_615619 = validateParameter(valid_615619, JArray, required = false,
                                 default = nil)
  if valid_615619 != nil:
    section.add "Tags", valid_615619
  var valid_615620 = query.getOrDefault("KmsKeyId")
  valid_615620 = validateParameter(valid_615620, JString, required = false,
                                 default = nil)
  if valid_615620 != nil:
    section.add "KmsKeyId", valid_615620
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_615621 = query.getOrDefault("DBClusterIdentifier")
  valid_615621 = validateParameter(valid_615621, JString, required = true,
                                 default = nil)
  if valid_615621 != nil:
    section.add "DBClusterIdentifier", valid_615621
  var valid_615622 = query.getOrDefault("SourceDBClusterIdentifier")
  valid_615622 = validateParameter(valid_615622, JString, required = true,
                                 default = nil)
  if valid_615622 != nil:
    section.add "SourceDBClusterIdentifier", valid_615622
  var valid_615623 = query.getOrDefault("DBClusterParameterGroupName")
  valid_615623 = validateParameter(valid_615623, JString, required = false,
                                 default = nil)
  if valid_615623 != nil:
    section.add "DBClusterParameterGroupName", valid_615623
  var valid_615624 = query.getOrDefault("RestoreToTime")
  valid_615624 = validateParameter(valid_615624, JString, required = false,
                                 default = nil)
  if valid_615624 != nil:
    section.add "RestoreToTime", valid_615624
  var valid_615625 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_615625 = validateParameter(valid_615625, JBool, required = false, default = nil)
  if valid_615625 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_615625
  var valid_615626 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_615626 = validateParameter(valid_615626, JArray, required = false,
                                 default = nil)
  if valid_615626 != nil:
    section.add "EnableCloudwatchLogsExports", valid_615626
  var valid_615627 = query.getOrDefault("Action")
  valid_615627 = validateParameter(valid_615627, JString, required = true, default = newJString(
      "RestoreDBClusterToPointInTime"))
  if valid_615627 != nil:
    section.add "Action", valid_615627
  var valid_615628 = query.getOrDefault("Port")
  valid_615628 = validateParameter(valid_615628, JInt, required = false, default = nil)
  if valid_615628 != nil:
    section.add "Port", valid_615628
  var valid_615629 = query.getOrDefault("VpcSecurityGroupIds")
  valid_615629 = validateParameter(valid_615629, JArray, required = false,
                                 default = nil)
  if valid_615629 != nil:
    section.add "VpcSecurityGroupIds", valid_615629
  var valid_615630 = query.getOrDefault("OptionGroupName")
  valid_615630 = validateParameter(valid_615630, JString, required = false,
                                 default = nil)
  if valid_615630 != nil:
    section.add "OptionGroupName", valid_615630
  var valid_615631 = query.getOrDefault("DBSubnetGroupName")
  valid_615631 = validateParameter(valid_615631, JString, required = false,
                                 default = nil)
  if valid_615631 != nil:
    section.add "DBSubnetGroupName", valid_615631
  var valid_615632 = query.getOrDefault("Version")
  valid_615632 = validateParameter(valid_615632, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615632 != nil:
    section.add "Version", valid_615632
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615633 = header.getOrDefault("X-Amz-Signature")
  valid_615633 = validateParameter(valid_615633, JString, required = false,
                                 default = nil)
  if valid_615633 != nil:
    section.add "X-Amz-Signature", valid_615633
  var valid_615634 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615634 = validateParameter(valid_615634, JString, required = false,
                                 default = nil)
  if valid_615634 != nil:
    section.add "X-Amz-Content-Sha256", valid_615634
  var valid_615635 = header.getOrDefault("X-Amz-Date")
  valid_615635 = validateParameter(valid_615635, JString, required = false,
                                 default = nil)
  if valid_615635 != nil:
    section.add "X-Amz-Date", valid_615635
  var valid_615636 = header.getOrDefault("X-Amz-Credential")
  valid_615636 = validateParameter(valid_615636, JString, required = false,
                                 default = nil)
  if valid_615636 != nil:
    section.add "X-Amz-Credential", valid_615636
  var valid_615637 = header.getOrDefault("X-Amz-Security-Token")
  valid_615637 = validateParameter(valid_615637, JString, required = false,
                                 default = nil)
  if valid_615637 != nil:
    section.add "X-Amz-Security-Token", valid_615637
  var valid_615638 = header.getOrDefault("X-Amz-Algorithm")
  valid_615638 = validateParameter(valid_615638, JString, required = false,
                                 default = nil)
  if valid_615638 != nil:
    section.add "X-Amz-Algorithm", valid_615638
  var valid_615639 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615639 = validateParameter(valid_615639, JString, required = false,
                                 default = nil)
  if valid_615639 != nil:
    section.add "X-Amz-SignedHeaders", valid_615639
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615640: Call_GetRestoreDBClusterToPointInTime_615613;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group.</p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <a>CreateDBInstance</a> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note>
  ## 
  let valid = call_615640.validator(path, query, header, formData, body)
  let scheme = call_615640.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615640.url(scheme.get, call_615640.host, call_615640.base,
                         call_615640.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615640, url, valid)

proc call*(call_615641: Call_GetRestoreDBClusterToPointInTime_615613;
          DBClusterIdentifier: string; SourceDBClusterIdentifier: string;
          DeletionProtection: bool = false; RestoreType: string = "";
          UseLatestRestorableTime: bool = false; Tags: JsonNode = nil;
          KmsKeyId: string = ""; DBClusterParameterGroupName: string = "";
          RestoreToTime: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "RestoreDBClusterToPointInTime"; Port: int = 0;
          VpcSecurityGroupIds: JsonNode = nil; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getRestoreDBClusterToPointInTime
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group.</p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <a>CreateDBInstance</a> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   RestoreType: string
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   UseLatestRestorableTime: bool
  ##                          : <p>A value that is set to <code>true</code> to restore the DB cluster to the latest restorable backup time, and <code>false</code> otherwise.</p> <p>Default: <code>false</code> </p> <p>Constraints: Cannot be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   Tags: JArray
  ##       : The tags to be applied to the restored DB cluster.
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that is not encrypted, then the restore request is rejected.</p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   SourceDBClusterIdentifier: string (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with the new DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   RestoreToTime: string
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter is not provided</p> </li> <li> <p>Cannot be specified if <code>UseLatestRestorableTime</code> parameter is true</p> </li> <li> <p>Cannot be specified if <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs.
  ##   Action: string (required)
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   OptionGroupName: string
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_615642 = newJObject()
  add(query_615642, "DeletionProtection", newJBool(DeletionProtection))
  add(query_615642, "RestoreType", newJString(RestoreType))
  add(query_615642, "UseLatestRestorableTime", newJBool(UseLatestRestorableTime))
  if Tags != nil:
    query_615642.add "Tags", Tags
  add(query_615642, "KmsKeyId", newJString(KmsKeyId))
  add(query_615642, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_615642, "SourceDBClusterIdentifier",
      newJString(SourceDBClusterIdentifier))
  add(query_615642, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_615642, "RestoreToTime", newJString(RestoreToTime))
  add(query_615642, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if EnableCloudwatchLogsExports != nil:
    query_615642.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_615642, "Action", newJString(Action))
  add(query_615642, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    query_615642.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_615642, "OptionGroupName", newJString(OptionGroupName))
  add(query_615642, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_615642, "Version", newJString(Version))
  result = call_615641.call(nil, query_615642, nil, nil, nil)

var getRestoreDBClusterToPointInTime* = Call_GetRestoreDBClusterToPointInTime_615613(
    name: "getRestoreDBClusterToPointInTime", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterToPointInTime",
    validator: validate_GetRestoreDBClusterToPointInTime_615614, base: "/",
    url: url_GetRestoreDBClusterToPointInTime_615615,
    schemes: {Scheme.Https, Scheme.Http})
export
  rest

type
  EnvKind = enum
    BakeIntoBinary = "Baking $1 into the binary",
    FetchFromEnv = "Fetch $1 from the environment"
template sloppyConst(via: EnvKind; name: untyped): untyped =
  import
    macros

  const
    name {.strdefine.}: string = case via
    of BakeIntoBinary:
      getEnv(astToStr(name), "")
    of FetchFromEnv:
      ""
  static :
    let msg = block:
      if name == "":
        "Missing $1 in the environment"
      else:
        $via
    warning msg % [astToStr(name)]

sloppyConst FetchFromEnv, AWS_ACCESS_KEY_ID
sloppyConst FetchFromEnv, AWS_SECRET_ACCESS_KEY
sloppyConst BakeIntoBinary, AWS_REGION
sloppyConst FetchFromEnv, AWS_ACCOUNT_ID
proc atozSign(recall: var Recallable; query: JsonNode; algo: SigningAlgo = SHA256) =
  let
    date = makeDateTime()
    access = os.getEnv("AWS_ACCESS_KEY_ID", AWS_ACCESS_KEY_ID)
    secret = os.getEnv("AWS_SECRET_ACCESS_KEY", AWS_SECRET_ACCESS_KEY)
    region = os.getEnv("AWS_REGION", AWS_REGION)
  assert secret != "", "need $AWS_SECRET_ACCESS_KEY in environment"
  assert access != "", "need $AWS_ACCESS_KEY_ID in environment"
  assert region != "", "need $AWS_REGION in environment"
  var
    normal: PathNormal
    url = normalizeUrl(recall.url, query, normalize = normal)
    scheme = parseEnum[Scheme](url.scheme)
  assert scheme in awsServers, "unknown scheme `" & $scheme & "`"
  assert region in awsServers[scheme], "unknown region `" & region & "`"
  url.hostname = awsServers[scheme][region]
  case awsServiceName.toLowerAscii
  of "s3":
    normal = PathNormal.S3
  else:
    normal = PathNormal.Default
  recall.headers["Host"] = url.hostname
  recall.headers["X-Amz-Date"] = date
  let
    algo = SHA256
    scope = credentialScope(region = region, service = awsServiceName, date = date)
    request = canonicalRequest(recall.meth, $url, query, recall.headers, recall.body,
                             normalize = normal, digest = algo)
    sts = stringToSign(request.hash(algo), scope, date = date, digest = algo)
    signature = calculateSignature(secret = secret, date = date, region = region,
                                 service = awsServiceName, sts, digest = algo)
  var auth = $algo & " "
  auth &= "Credential=" & access / scope & ", "
  auth &= "SignedHeaders=" & recall.headers.signedHeaders & ", "
  auth &= "Signature=" & signature
  recall.headers["Authorization"] = auth
  recall.headers.del "Host"
  recall.url = $url

method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  ## the hook is a terrible earworm
  var headers = newHttpHeaders(massageHeaders(input.getOrDefault("header")))
  let
    body = input.getOrDefault("body")
    text = if body == nil:
      "" elif body.kind == JString:
      body.getStr else:
      $body
  if body != nil and body.kind != JString:
    if not headers.hasKey("content-type"):
      headers["content-type"] = "application/x-amz-json-1.0"
  const
    XAmzSecurityToken = "X-Amz-Security-Token"
  if not headers.hasKey(XAmzSecurityToken):
    let session = getEnv("AWS_SESSION_TOKEN", "")
    if session != "":
      headers[XAmzSecurityToken] = session
  result = newRecallable(call, url, headers, text)
  result.atozSign(input.getOrDefault("query"), SHA256)
