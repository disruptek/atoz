
import
  json, options, hashes, tables, openapi/rest, os, uri, strutils, httpcore, sigv4

## auto-generated via openapi macro
## title: Amazon Neptune
## version: 2014-10-31
## termsOfService: https://aws.amazon.com/service-terms/
## license:
##     name: Apache 2.0 License
##     url: http://www.apache.org/licenses/
## 
## <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
## 
## Amazon Web Services documentation
## https://docs.aws.amazon.com/rds/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode): string

  OpenApiRestCall_772581 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_772581](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_772581): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    if js.kind notin {JString, JInt, JFloat, JNull, JBool}:
      return
    head = $js
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get())

const
  awsServers = {Scheme.Http: {"ap-northeast-1": "rds.ap-northeast-1.amazonaws.com", "ap-southeast-1": "rds.ap-southeast-1.amazonaws.com",
                           "us-west-2": "rds.us-west-2.amazonaws.com",
                           "eu-west-2": "rds.eu-west-2.amazonaws.com", "ap-northeast-3": "rds.ap-northeast-3.amazonaws.com",
                           "eu-central-1": "rds.eu-central-1.amazonaws.com",
                           "us-east-2": "rds.us-east-2.amazonaws.com",
                           "us-east-1": "rds.us-east-1.amazonaws.com", "cn-northwest-1": "rds.cn-northwest-1.amazonaws.com.cn",
                           "ap-south-1": "rds.ap-south-1.amazonaws.com",
                           "eu-north-1": "rds.eu-north-1.amazonaws.com", "ap-northeast-2": "rds.ap-northeast-2.amazonaws.com",
                           "us-west-1": "rds.us-west-1.amazonaws.com",
                           "us-gov-east-1": "rds.us-gov-east-1.amazonaws.com",
                           "eu-west-3": "rds.eu-west-3.amazonaws.com",
                           "cn-north-1": "rds.cn-north-1.amazonaws.com.cn",
                           "sa-east-1": "rds.sa-east-1.amazonaws.com",
                           "eu-west-1": "rds.eu-west-1.amazonaws.com",
                           "us-gov-west-1": "rds.us-gov-west-1.amazonaws.com", "ap-southeast-2": "rds.ap-southeast-2.amazonaws.com",
                           "ca-central-1": "rds.ca-central-1.amazonaws.com"}.toTable, Scheme.Https: {
      "ap-northeast-1": "rds.ap-northeast-1.amazonaws.com",
      "ap-southeast-1": "rds.ap-southeast-1.amazonaws.com",
      "us-west-2": "rds.us-west-2.amazonaws.com",
      "eu-west-2": "rds.eu-west-2.amazonaws.com",
      "ap-northeast-3": "rds.ap-northeast-3.amazonaws.com",
      "eu-central-1": "rds.eu-central-1.amazonaws.com",
      "us-east-2": "rds.us-east-2.amazonaws.com",
      "us-east-1": "rds.us-east-1.amazonaws.com",
      "cn-northwest-1": "rds.cn-northwest-1.amazonaws.com.cn",
      "ap-south-1": "rds.ap-south-1.amazonaws.com",
      "eu-north-1": "rds.eu-north-1.amazonaws.com",
      "ap-northeast-2": "rds.ap-northeast-2.amazonaws.com",
      "us-west-1": "rds.us-west-1.amazonaws.com",
      "us-gov-east-1": "rds.us-gov-east-1.amazonaws.com",
      "eu-west-3": "rds.eu-west-3.amazonaws.com",
      "cn-north-1": "rds.cn-north-1.amazonaws.com.cn",
      "sa-east-1": "rds.sa-east-1.amazonaws.com",
      "eu-west-1": "rds.eu-west-1.amazonaws.com",
      "us-gov-west-1": "rds.us-gov-west-1.amazonaws.com",
      "ap-southeast-2": "rds.ap-southeast-2.amazonaws.com",
      "ca-central-1": "rds.ca-central-1.amazonaws.com"}.toTable}.toTable
const
  awsServiceName = "neptune"
method hook(call: OpenApiRestCall; url: string; input: JsonNode): Recallable {.base.}
type
  Call_PostAddRoleToDBCluster_773189 = ref object of OpenApiRestCall_772581
proc url_PostAddRoleToDBCluster_773191(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostAddRoleToDBCluster_773190(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Associates an Identity and Access Management (IAM) role from an Neptune DB cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773192 = query.getOrDefault("Action")
  valid_773192 = validateParameter(valid_773192, JString, required = true,
                                 default = newJString("AddRoleToDBCluster"))
  if valid_773192 != nil:
    section.add "Action", valid_773192
  var valid_773193 = query.getOrDefault("Version")
  valid_773193 = validateParameter(valid_773193, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773193 != nil:
    section.add "Version", valid_773193
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773194 = header.getOrDefault("X-Amz-Date")
  valid_773194 = validateParameter(valid_773194, JString, required = false,
                                 default = nil)
  if valid_773194 != nil:
    section.add "X-Amz-Date", valid_773194
  var valid_773195 = header.getOrDefault("X-Amz-Security-Token")
  valid_773195 = validateParameter(valid_773195, JString, required = false,
                                 default = nil)
  if valid_773195 != nil:
    section.add "X-Amz-Security-Token", valid_773195
  var valid_773196 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773196 = validateParameter(valid_773196, JString, required = false,
                                 default = nil)
  if valid_773196 != nil:
    section.add "X-Amz-Content-Sha256", valid_773196
  var valid_773197 = header.getOrDefault("X-Amz-Algorithm")
  valid_773197 = validateParameter(valid_773197, JString, required = false,
                                 default = nil)
  if valid_773197 != nil:
    section.add "X-Amz-Algorithm", valid_773197
  var valid_773198 = header.getOrDefault("X-Amz-Signature")
  valid_773198 = validateParameter(valid_773198, JString, required = false,
                                 default = nil)
  if valid_773198 != nil:
    section.add "X-Amz-Signature", valid_773198
  var valid_773199 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773199 = validateParameter(valid_773199, JString, required = false,
                                 default = nil)
  if valid_773199 != nil:
    section.add "X-Amz-SignedHeaders", valid_773199
  var valid_773200 = header.getOrDefault("X-Amz-Credential")
  valid_773200 = validateParameter(valid_773200, JString, required = false,
                                 default = nil)
  if valid_773200 != nil:
    section.add "X-Amz-Credential", valid_773200
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Neptune DB cluster, for example <code>arn:aws:iam::123456789012:role/NeptuneAccessRole</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleArn` field"
  var valid_773201 = formData.getOrDefault("RoleArn")
  valid_773201 = validateParameter(valid_773201, JString, required = true,
                                 default = nil)
  if valid_773201 != nil:
    section.add "RoleArn", valid_773201
  var valid_773202 = formData.getOrDefault("DBClusterIdentifier")
  valid_773202 = validateParameter(valid_773202, JString, required = true,
                                 default = nil)
  if valid_773202 != nil:
    section.add "DBClusterIdentifier", valid_773202
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773203: Call_PostAddRoleToDBCluster_773189; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Associates an Identity and Access Management (IAM) role from an Neptune DB cluster.
  ## 
  let valid = call_773203.validator(path, query, header, formData, body)
  let scheme = call_773203.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773203.url(scheme.get, call_773203.host, call_773203.base,
                         call_773203.route, valid.getOrDefault("path"))
  result = hook(call_773203, url, valid)

proc call*(call_773204: Call_PostAddRoleToDBCluster_773189; RoleArn: string;
          DBClusterIdentifier: string; Action: string = "AddRoleToDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## postAddRoleToDBCluster
  ## Associates an Identity and Access Management (IAM) role from an Neptune DB cluster.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Neptune DB cluster, for example <code>arn:aws:iam::123456789012:role/NeptuneAccessRole</code>.
  ##   Action: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  ##   Version: string (required)
  var query_773205 = newJObject()
  var formData_773206 = newJObject()
  add(formData_773206, "RoleArn", newJString(RoleArn))
  add(query_773205, "Action", newJString(Action))
  add(formData_773206, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_773205, "Version", newJString(Version))
  result = call_773204.call(nil, query_773205, nil, formData_773206, nil)

var postAddRoleToDBCluster* = Call_PostAddRoleToDBCluster_773189(
    name: "postAddRoleToDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=AddRoleToDBCluster",
    validator: validate_PostAddRoleToDBCluster_773190, base: "/",
    url: url_PostAddRoleToDBCluster_773191, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddRoleToDBCluster_772917 = ref object of OpenApiRestCall_772581
proc url_GetAddRoleToDBCluster_772919(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetAddRoleToDBCluster_772918(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Associates an Identity and Access Management (IAM) role from an Neptune DB cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Neptune DB cluster, for example <code>arn:aws:iam::123456789012:role/NeptuneAccessRole</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_773031 = query.getOrDefault("DBClusterIdentifier")
  valid_773031 = validateParameter(valid_773031, JString, required = true,
                                 default = nil)
  if valid_773031 != nil:
    section.add "DBClusterIdentifier", valid_773031
  var valid_773032 = query.getOrDefault("RoleArn")
  valid_773032 = validateParameter(valid_773032, JString, required = true,
                                 default = nil)
  if valid_773032 != nil:
    section.add "RoleArn", valid_773032
  var valid_773046 = query.getOrDefault("Action")
  valid_773046 = validateParameter(valid_773046, JString, required = true,
                                 default = newJString("AddRoleToDBCluster"))
  if valid_773046 != nil:
    section.add "Action", valid_773046
  var valid_773047 = query.getOrDefault("Version")
  valid_773047 = validateParameter(valid_773047, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773047 != nil:
    section.add "Version", valid_773047
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773048 = header.getOrDefault("X-Amz-Date")
  valid_773048 = validateParameter(valid_773048, JString, required = false,
                                 default = nil)
  if valid_773048 != nil:
    section.add "X-Amz-Date", valid_773048
  var valid_773049 = header.getOrDefault("X-Amz-Security-Token")
  valid_773049 = validateParameter(valid_773049, JString, required = false,
                                 default = nil)
  if valid_773049 != nil:
    section.add "X-Amz-Security-Token", valid_773049
  var valid_773050 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773050 = validateParameter(valid_773050, JString, required = false,
                                 default = nil)
  if valid_773050 != nil:
    section.add "X-Amz-Content-Sha256", valid_773050
  var valid_773051 = header.getOrDefault("X-Amz-Algorithm")
  valid_773051 = validateParameter(valid_773051, JString, required = false,
                                 default = nil)
  if valid_773051 != nil:
    section.add "X-Amz-Algorithm", valid_773051
  var valid_773052 = header.getOrDefault("X-Amz-Signature")
  valid_773052 = validateParameter(valid_773052, JString, required = false,
                                 default = nil)
  if valid_773052 != nil:
    section.add "X-Amz-Signature", valid_773052
  var valid_773053 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773053 = validateParameter(valid_773053, JString, required = false,
                                 default = nil)
  if valid_773053 != nil:
    section.add "X-Amz-SignedHeaders", valid_773053
  var valid_773054 = header.getOrDefault("X-Amz-Credential")
  valid_773054 = validateParameter(valid_773054, JString, required = false,
                                 default = nil)
  if valid_773054 != nil:
    section.add "X-Amz-Credential", valid_773054
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773077: Call_GetAddRoleToDBCluster_772917; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Associates an Identity and Access Management (IAM) role from an Neptune DB cluster.
  ## 
  let valid = call_773077.validator(path, query, header, formData, body)
  let scheme = call_773077.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773077.url(scheme.get, call_773077.host, call_773077.base,
                         call_773077.route, valid.getOrDefault("path"))
  result = hook(call_773077, url, valid)

proc call*(call_773148: Call_GetAddRoleToDBCluster_772917;
          DBClusterIdentifier: string; RoleArn: string;
          Action: string = "AddRoleToDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getAddRoleToDBCluster
  ## Associates an Identity and Access Management (IAM) role from an Neptune DB cluster.
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Neptune DB cluster, for example <code>arn:aws:iam::123456789012:role/NeptuneAccessRole</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773149 = newJObject()
  add(query_773149, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_773149, "RoleArn", newJString(RoleArn))
  add(query_773149, "Action", newJString(Action))
  add(query_773149, "Version", newJString(Version))
  result = call_773148.call(nil, query_773149, nil, nil, nil)

var getAddRoleToDBCluster* = Call_GetAddRoleToDBCluster_772917(
    name: "getAddRoleToDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=AddRoleToDBCluster",
    validator: validate_GetAddRoleToDBCluster_772918, base: "/",
    url: url_GetAddRoleToDBCluster_772919, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddSourceIdentifierToSubscription_773224 = ref object of OpenApiRestCall_772581
proc url_PostAddSourceIdentifierToSubscription_773226(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostAddSourceIdentifierToSubscription_773225(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a source identifier to an existing event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773227 = query.getOrDefault("Action")
  valid_773227 = validateParameter(valid_773227, JString, required = true, default = newJString(
      "AddSourceIdentifierToSubscription"))
  if valid_773227 != nil:
    section.add "Action", valid_773227
  var valid_773228 = query.getOrDefault("Version")
  valid_773228 = validateParameter(valid_773228, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773228 != nil:
    section.add "Version", valid_773228
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773229 = header.getOrDefault("X-Amz-Date")
  valid_773229 = validateParameter(valid_773229, JString, required = false,
                                 default = nil)
  if valid_773229 != nil:
    section.add "X-Amz-Date", valid_773229
  var valid_773230 = header.getOrDefault("X-Amz-Security-Token")
  valid_773230 = validateParameter(valid_773230, JString, required = false,
                                 default = nil)
  if valid_773230 != nil:
    section.add "X-Amz-Security-Token", valid_773230
  var valid_773231 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773231 = validateParameter(valid_773231, JString, required = false,
                                 default = nil)
  if valid_773231 != nil:
    section.add "X-Amz-Content-Sha256", valid_773231
  var valid_773232 = header.getOrDefault("X-Amz-Algorithm")
  valid_773232 = validateParameter(valid_773232, JString, required = false,
                                 default = nil)
  if valid_773232 != nil:
    section.add "X-Amz-Algorithm", valid_773232
  var valid_773233 = header.getOrDefault("X-Amz-Signature")
  valid_773233 = validateParameter(valid_773233, JString, required = false,
                                 default = nil)
  if valid_773233 != nil:
    section.add "X-Amz-Signature", valid_773233
  var valid_773234 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773234 = validateParameter(valid_773234, JString, required = false,
                                 default = nil)
  if valid_773234 != nil:
    section.add "X-Amz-SignedHeaders", valid_773234
  var valid_773235 = header.getOrDefault("X-Amz-Credential")
  valid_773235 = validateParameter(valid_773235, JString, required = false,
                                 default = nil)
  if valid_773235 != nil:
    section.add "X-Amz-Credential", valid_773235
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceIdentifier: JString (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SubscriptionName: JString (required)
  ##                   : The name of the event notification subscription you want to add a source identifier to.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SourceIdentifier` field"
  var valid_773236 = formData.getOrDefault("SourceIdentifier")
  valid_773236 = validateParameter(valid_773236, JString, required = true,
                                 default = nil)
  if valid_773236 != nil:
    section.add "SourceIdentifier", valid_773236
  var valid_773237 = formData.getOrDefault("SubscriptionName")
  valid_773237 = validateParameter(valid_773237, JString, required = true,
                                 default = nil)
  if valid_773237 != nil:
    section.add "SubscriptionName", valid_773237
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773238: Call_PostAddSourceIdentifierToSubscription_773224;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a source identifier to an existing event notification subscription.
  ## 
  let valid = call_773238.validator(path, query, header, formData, body)
  let scheme = call_773238.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773238.url(scheme.get, call_773238.host, call_773238.base,
                         call_773238.route, valid.getOrDefault("path"))
  result = hook(call_773238, url, valid)

proc call*(call_773239: Call_PostAddSourceIdentifierToSubscription_773224;
          SourceIdentifier: string; SubscriptionName: string;
          Action: string = "AddSourceIdentifierToSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## postAddSourceIdentifierToSubscription
  ## Adds a source identifier to an existing event notification subscription.
  ##   SourceIdentifier: string (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SubscriptionName: string (required)
  ##                   : The name of the event notification subscription you want to add a source identifier to.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773240 = newJObject()
  var formData_773241 = newJObject()
  add(formData_773241, "SourceIdentifier", newJString(SourceIdentifier))
  add(formData_773241, "SubscriptionName", newJString(SubscriptionName))
  add(query_773240, "Action", newJString(Action))
  add(query_773240, "Version", newJString(Version))
  result = call_773239.call(nil, query_773240, nil, formData_773241, nil)

var postAddSourceIdentifierToSubscription* = Call_PostAddSourceIdentifierToSubscription_773224(
    name: "postAddSourceIdentifierToSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=AddSourceIdentifierToSubscription",
    validator: validate_PostAddSourceIdentifierToSubscription_773225, base: "/",
    url: url_PostAddSourceIdentifierToSubscription_773226,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddSourceIdentifierToSubscription_773207 = ref object of OpenApiRestCall_772581
proc url_GetAddSourceIdentifierToSubscription_773209(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetAddSourceIdentifierToSubscription_773208(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a source identifier to an existing event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   SourceIdentifier: JString (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SubscriptionName: JString (required)
  ##                   : The name of the event notification subscription you want to add a source identifier to.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773210 = query.getOrDefault("Action")
  valid_773210 = validateParameter(valid_773210, JString, required = true, default = newJString(
      "AddSourceIdentifierToSubscription"))
  if valid_773210 != nil:
    section.add "Action", valid_773210
  var valid_773211 = query.getOrDefault("SourceIdentifier")
  valid_773211 = validateParameter(valid_773211, JString, required = true,
                                 default = nil)
  if valid_773211 != nil:
    section.add "SourceIdentifier", valid_773211
  var valid_773212 = query.getOrDefault("SubscriptionName")
  valid_773212 = validateParameter(valid_773212, JString, required = true,
                                 default = nil)
  if valid_773212 != nil:
    section.add "SubscriptionName", valid_773212
  var valid_773213 = query.getOrDefault("Version")
  valid_773213 = validateParameter(valid_773213, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773213 != nil:
    section.add "Version", valid_773213
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773214 = header.getOrDefault("X-Amz-Date")
  valid_773214 = validateParameter(valid_773214, JString, required = false,
                                 default = nil)
  if valid_773214 != nil:
    section.add "X-Amz-Date", valid_773214
  var valid_773215 = header.getOrDefault("X-Amz-Security-Token")
  valid_773215 = validateParameter(valid_773215, JString, required = false,
                                 default = nil)
  if valid_773215 != nil:
    section.add "X-Amz-Security-Token", valid_773215
  var valid_773216 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773216 = validateParameter(valid_773216, JString, required = false,
                                 default = nil)
  if valid_773216 != nil:
    section.add "X-Amz-Content-Sha256", valid_773216
  var valid_773217 = header.getOrDefault("X-Amz-Algorithm")
  valid_773217 = validateParameter(valid_773217, JString, required = false,
                                 default = nil)
  if valid_773217 != nil:
    section.add "X-Amz-Algorithm", valid_773217
  var valid_773218 = header.getOrDefault("X-Amz-Signature")
  valid_773218 = validateParameter(valid_773218, JString, required = false,
                                 default = nil)
  if valid_773218 != nil:
    section.add "X-Amz-Signature", valid_773218
  var valid_773219 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773219 = validateParameter(valid_773219, JString, required = false,
                                 default = nil)
  if valid_773219 != nil:
    section.add "X-Amz-SignedHeaders", valid_773219
  var valid_773220 = header.getOrDefault("X-Amz-Credential")
  valid_773220 = validateParameter(valid_773220, JString, required = false,
                                 default = nil)
  if valid_773220 != nil:
    section.add "X-Amz-Credential", valid_773220
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773221: Call_GetAddSourceIdentifierToSubscription_773207;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a source identifier to an existing event notification subscription.
  ## 
  let valid = call_773221.validator(path, query, header, formData, body)
  let scheme = call_773221.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773221.url(scheme.get, call_773221.host, call_773221.base,
                         call_773221.route, valid.getOrDefault("path"))
  result = hook(call_773221, url, valid)

proc call*(call_773222: Call_GetAddSourceIdentifierToSubscription_773207;
          SourceIdentifier: string; SubscriptionName: string;
          Action: string = "AddSourceIdentifierToSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## getAddSourceIdentifierToSubscription
  ## Adds a source identifier to an existing event notification subscription.
  ##   Action: string (required)
  ##   SourceIdentifier: string (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SubscriptionName: string (required)
  ##                   : The name of the event notification subscription you want to add a source identifier to.
  ##   Version: string (required)
  var query_773223 = newJObject()
  add(query_773223, "Action", newJString(Action))
  add(query_773223, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_773223, "SubscriptionName", newJString(SubscriptionName))
  add(query_773223, "Version", newJString(Version))
  result = call_773222.call(nil, query_773223, nil, nil, nil)

var getAddSourceIdentifierToSubscription* = Call_GetAddSourceIdentifierToSubscription_773207(
    name: "getAddSourceIdentifierToSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=AddSourceIdentifierToSubscription",
    validator: validate_GetAddSourceIdentifierToSubscription_773208, base: "/",
    url: url_GetAddSourceIdentifierToSubscription_773209,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddTagsToResource_773259 = ref object of OpenApiRestCall_772581
proc url_PostAddTagsToResource_773261(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostAddTagsToResource_773260(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds metadata tags to an Amazon Neptune resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon Neptune resources, or used in a Condition statement in an IAM policy for Amazon Neptune.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773262 = query.getOrDefault("Action")
  valid_773262 = validateParameter(valid_773262, JString, required = true,
                                 default = newJString("AddTagsToResource"))
  if valid_773262 != nil:
    section.add "Action", valid_773262
  var valid_773263 = query.getOrDefault("Version")
  valid_773263 = validateParameter(valid_773263, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773263 != nil:
    section.add "Version", valid_773263
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773264 = header.getOrDefault("X-Amz-Date")
  valid_773264 = validateParameter(valid_773264, JString, required = false,
                                 default = nil)
  if valid_773264 != nil:
    section.add "X-Amz-Date", valid_773264
  var valid_773265 = header.getOrDefault("X-Amz-Security-Token")
  valid_773265 = validateParameter(valid_773265, JString, required = false,
                                 default = nil)
  if valid_773265 != nil:
    section.add "X-Amz-Security-Token", valid_773265
  var valid_773266 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773266 = validateParameter(valid_773266, JString, required = false,
                                 default = nil)
  if valid_773266 != nil:
    section.add "X-Amz-Content-Sha256", valid_773266
  var valid_773267 = header.getOrDefault("X-Amz-Algorithm")
  valid_773267 = validateParameter(valid_773267, JString, required = false,
                                 default = nil)
  if valid_773267 != nil:
    section.add "X-Amz-Algorithm", valid_773267
  var valid_773268 = header.getOrDefault("X-Amz-Signature")
  valid_773268 = validateParameter(valid_773268, JString, required = false,
                                 default = nil)
  if valid_773268 != nil:
    section.add "X-Amz-Signature", valid_773268
  var valid_773269 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773269 = validateParameter(valid_773269, JString, required = false,
                                 default = nil)
  if valid_773269 != nil:
    section.add "X-Amz-SignedHeaders", valid_773269
  var valid_773270 = header.getOrDefault("X-Amz-Credential")
  valid_773270 = validateParameter(valid_773270, JString, required = false,
                                 default = nil)
  if valid_773270 != nil:
    section.add "X-Amz-Credential", valid_773270
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray (required)
  ##       : The tags to be assigned to the Amazon Neptune resource.
  ##   ResourceName: JString (required)
  ##               : The Amazon Neptune resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Tags` field"
  var valid_773271 = formData.getOrDefault("Tags")
  valid_773271 = validateParameter(valid_773271, JArray, required = true, default = nil)
  if valid_773271 != nil:
    section.add "Tags", valid_773271
  var valid_773272 = formData.getOrDefault("ResourceName")
  valid_773272 = validateParameter(valid_773272, JString, required = true,
                                 default = nil)
  if valid_773272 != nil:
    section.add "ResourceName", valid_773272
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773273: Call_PostAddTagsToResource_773259; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Adds metadata tags to an Amazon Neptune resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon Neptune resources, or used in a Condition statement in an IAM policy for Amazon Neptune.
  ## 
  let valid = call_773273.validator(path, query, header, formData, body)
  let scheme = call_773273.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773273.url(scheme.get, call_773273.host, call_773273.base,
                         call_773273.route, valid.getOrDefault("path"))
  result = hook(call_773273, url, valid)

proc call*(call_773274: Call_PostAddTagsToResource_773259; Tags: JsonNode;
          ResourceName: string; Action: string = "AddTagsToResource";
          Version: string = "2014-10-31"): Recallable =
  ## postAddTagsToResource
  ## Adds metadata tags to an Amazon Neptune resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon Neptune resources, or used in a Condition statement in an IAM policy for Amazon Neptune.
  ##   Tags: JArray (required)
  ##       : The tags to be assigned to the Amazon Neptune resource.
  ##   Action: string (required)
  ##   ResourceName: string (required)
  ##               : The Amazon Neptune resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   Version: string (required)
  var query_773275 = newJObject()
  var formData_773276 = newJObject()
  if Tags != nil:
    formData_773276.add "Tags", Tags
  add(query_773275, "Action", newJString(Action))
  add(formData_773276, "ResourceName", newJString(ResourceName))
  add(query_773275, "Version", newJString(Version))
  result = call_773274.call(nil, query_773275, nil, formData_773276, nil)

var postAddTagsToResource* = Call_PostAddTagsToResource_773259(
    name: "postAddTagsToResource", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=AddTagsToResource",
    validator: validate_PostAddTagsToResource_773260, base: "/",
    url: url_PostAddTagsToResource_773261, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddTagsToResource_773242 = ref object of OpenApiRestCall_772581
proc url_GetAddTagsToResource_773244(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetAddTagsToResource_773243(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds metadata tags to an Amazon Neptune resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon Neptune resources, or used in a Condition statement in an IAM policy for Amazon Neptune.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : The tags to be assigned to the Amazon Neptune resource.
  ##   ResourceName: JString (required)
  ##               : The Amazon Neptune resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_773245 = query.getOrDefault("Tags")
  valid_773245 = validateParameter(valid_773245, JArray, required = true, default = nil)
  if valid_773245 != nil:
    section.add "Tags", valid_773245
  var valid_773246 = query.getOrDefault("ResourceName")
  valid_773246 = validateParameter(valid_773246, JString, required = true,
                                 default = nil)
  if valid_773246 != nil:
    section.add "ResourceName", valid_773246
  var valid_773247 = query.getOrDefault("Action")
  valid_773247 = validateParameter(valid_773247, JString, required = true,
                                 default = newJString("AddTagsToResource"))
  if valid_773247 != nil:
    section.add "Action", valid_773247
  var valid_773248 = query.getOrDefault("Version")
  valid_773248 = validateParameter(valid_773248, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773248 != nil:
    section.add "Version", valid_773248
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773249 = header.getOrDefault("X-Amz-Date")
  valid_773249 = validateParameter(valid_773249, JString, required = false,
                                 default = nil)
  if valid_773249 != nil:
    section.add "X-Amz-Date", valid_773249
  var valid_773250 = header.getOrDefault("X-Amz-Security-Token")
  valid_773250 = validateParameter(valid_773250, JString, required = false,
                                 default = nil)
  if valid_773250 != nil:
    section.add "X-Amz-Security-Token", valid_773250
  var valid_773251 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773251 = validateParameter(valid_773251, JString, required = false,
                                 default = nil)
  if valid_773251 != nil:
    section.add "X-Amz-Content-Sha256", valid_773251
  var valid_773252 = header.getOrDefault("X-Amz-Algorithm")
  valid_773252 = validateParameter(valid_773252, JString, required = false,
                                 default = nil)
  if valid_773252 != nil:
    section.add "X-Amz-Algorithm", valid_773252
  var valid_773253 = header.getOrDefault("X-Amz-Signature")
  valid_773253 = validateParameter(valid_773253, JString, required = false,
                                 default = nil)
  if valid_773253 != nil:
    section.add "X-Amz-Signature", valid_773253
  var valid_773254 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773254 = validateParameter(valid_773254, JString, required = false,
                                 default = nil)
  if valid_773254 != nil:
    section.add "X-Amz-SignedHeaders", valid_773254
  var valid_773255 = header.getOrDefault("X-Amz-Credential")
  valid_773255 = validateParameter(valid_773255, JString, required = false,
                                 default = nil)
  if valid_773255 != nil:
    section.add "X-Amz-Credential", valid_773255
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773256: Call_GetAddTagsToResource_773242; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Adds metadata tags to an Amazon Neptune resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon Neptune resources, or used in a Condition statement in an IAM policy for Amazon Neptune.
  ## 
  let valid = call_773256.validator(path, query, header, formData, body)
  let scheme = call_773256.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773256.url(scheme.get, call_773256.host, call_773256.base,
                         call_773256.route, valid.getOrDefault("path"))
  result = hook(call_773256, url, valid)

proc call*(call_773257: Call_GetAddTagsToResource_773242; Tags: JsonNode;
          ResourceName: string; Action: string = "AddTagsToResource";
          Version: string = "2014-10-31"): Recallable =
  ## getAddTagsToResource
  ## Adds metadata tags to an Amazon Neptune resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon Neptune resources, or used in a Condition statement in an IAM policy for Amazon Neptune.
  ##   Tags: JArray (required)
  ##       : The tags to be assigned to the Amazon Neptune resource.
  ##   ResourceName: string (required)
  ##               : The Amazon Neptune resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773258 = newJObject()
  if Tags != nil:
    query_773258.add "Tags", Tags
  add(query_773258, "ResourceName", newJString(ResourceName))
  add(query_773258, "Action", newJString(Action))
  add(query_773258, "Version", newJString(Version))
  result = call_773257.call(nil, query_773258, nil, nil, nil)

var getAddTagsToResource* = Call_GetAddTagsToResource_773242(
    name: "getAddTagsToResource", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=AddTagsToResource",
    validator: validate_GetAddTagsToResource_773243, base: "/",
    url: url_GetAddTagsToResource_773244, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostApplyPendingMaintenanceAction_773295 = ref object of OpenApiRestCall_772581
proc url_PostApplyPendingMaintenanceAction_773297(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostApplyPendingMaintenanceAction_773296(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773298 = query.getOrDefault("Action")
  valid_773298 = validateParameter(valid_773298, JString, required = true, default = newJString(
      "ApplyPendingMaintenanceAction"))
  if valid_773298 != nil:
    section.add "Action", valid_773298
  var valid_773299 = query.getOrDefault("Version")
  valid_773299 = validateParameter(valid_773299, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773299 != nil:
    section.add "Version", valid_773299
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773300 = header.getOrDefault("X-Amz-Date")
  valid_773300 = validateParameter(valid_773300, JString, required = false,
                                 default = nil)
  if valid_773300 != nil:
    section.add "X-Amz-Date", valid_773300
  var valid_773301 = header.getOrDefault("X-Amz-Security-Token")
  valid_773301 = validateParameter(valid_773301, JString, required = false,
                                 default = nil)
  if valid_773301 != nil:
    section.add "X-Amz-Security-Token", valid_773301
  var valid_773302 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773302 = validateParameter(valid_773302, JString, required = false,
                                 default = nil)
  if valid_773302 != nil:
    section.add "X-Amz-Content-Sha256", valid_773302
  var valid_773303 = header.getOrDefault("X-Amz-Algorithm")
  valid_773303 = validateParameter(valid_773303, JString, required = false,
                                 default = nil)
  if valid_773303 != nil:
    section.add "X-Amz-Algorithm", valid_773303
  var valid_773304 = header.getOrDefault("X-Amz-Signature")
  valid_773304 = validateParameter(valid_773304, JString, required = false,
                                 default = nil)
  if valid_773304 != nil:
    section.add "X-Amz-Signature", valid_773304
  var valid_773305 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773305 = validateParameter(valid_773305, JString, required = false,
                                 default = nil)
  if valid_773305 != nil:
    section.add "X-Amz-SignedHeaders", valid_773305
  var valid_773306 = header.getOrDefault("X-Amz-Credential")
  valid_773306 = validateParameter(valid_773306, JString, required = false,
                                 default = nil)
  if valid_773306 != nil:
    section.add "X-Amz-Credential", valid_773306
  result.add "header", section
  ## parameters in `formData` object:
  ##   ApplyAction: JString (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code> </p>
  ##   ResourceIdentifier: JString (required)
  ##                     : The Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   OptInType: JString (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `ApplyAction` field"
  var valid_773307 = formData.getOrDefault("ApplyAction")
  valid_773307 = validateParameter(valid_773307, JString, required = true,
                                 default = nil)
  if valid_773307 != nil:
    section.add "ApplyAction", valid_773307
  var valid_773308 = formData.getOrDefault("ResourceIdentifier")
  valid_773308 = validateParameter(valid_773308, JString, required = true,
                                 default = nil)
  if valid_773308 != nil:
    section.add "ResourceIdentifier", valid_773308
  var valid_773309 = formData.getOrDefault("OptInType")
  valid_773309 = validateParameter(valid_773309, JString, required = true,
                                 default = nil)
  if valid_773309 != nil:
    section.add "OptInType", valid_773309
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773310: Call_PostApplyPendingMaintenanceAction_773295;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  let valid = call_773310.validator(path, query, header, formData, body)
  let scheme = call_773310.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773310.url(scheme.get, call_773310.host, call_773310.base,
                         call_773310.route, valid.getOrDefault("path"))
  result = hook(call_773310, url, valid)

proc call*(call_773311: Call_PostApplyPendingMaintenanceAction_773295;
          ApplyAction: string; ResourceIdentifier: string; OptInType: string;
          Action: string = "ApplyPendingMaintenanceAction";
          Version: string = "2014-10-31"): Recallable =
  ## postApplyPendingMaintenanceAction
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ##   Action: string (required)
  ##   ApplyAction: string (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code> </p>
  ##   ResourceIdentifier: string (required)
  ##                     : The Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   OptInType: string (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  ##   Version: string (required)
  var query_773312 = newJObject()
  var formData_773313 = newJObject()
  add(query_773312, "Action", newJString(Action))
  add(formData_773313, "ApplyAction", newJString(ApplyAction))
  add(formData_773313, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(formData_773313, "OptInType", newJString(OptInType))
  add(query_773312, "Version", newJString(Version))
  result = call_773311.call(nil, query_773312, nil, formData_773313, nil)

var postApplyPendingMaintenanceAction* = Call_PostApplyPendingMaintenanceAction_773295(
    name: "postApplyPendingMaintenanceAction", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ApplyPendingMaintenanceAction",
    validator: validate_PostApplyPendingMaintenanceAction_773296, base: "/",
    url: url_PostApplyPendingMaintenanceAction_773297,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplyPendingMaintenanceAction_773277 = ref object of OpenApiRestCall_772581
proc url_GetApplyPendingMaintenanceAction_773279(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetApplyPendingMaintenanceAction_773278(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ApplyAction: JString (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code> </p>
  ##   ResourceIdentifier: JString (required)
  ##                     : The Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   Action: JString (required)
  ##   OptInType: JString (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ApplyAction` field"
  var valid_773280 = query.getOrDefault("ApplyAction")
  valid_773280 = validateParameter(valid_773280, JString, required = true,
                                 default = nil)
  if valid_773280 != nil:
    section.add "ApplyAction", valid_773280
  var valid_773281 = query.getOrDefault("ResourceIdentifier")
  valid_773281 = validateParameter(valid_773281, JString, required = true,
                                 default = nil)
  if valid_773281 != nil:
    section.add "ResourceIdentifier", valid_773281
  var valid_773282 = query.getOrDefault("Action")
  valid_773282 = validateParameter(valid_773282, JString, required = true, default = newJString(
      "ApplyPendingMaintenanceAction"))
  if valid_773282 != nil:
    section.add "Action", valid_773282
  var valid_773283 = query.getOrDefault("OptInType")
  valid_773283 = validateParameter(valid_773283, JString, required = true,
                                 default = nil)
  if valid_773283 != nil:
    section.add "OptInType", valid_773283
  var valid_773284 = query.getOrDefault("Version")
  valid_773284 = validateParameter(valid_773284, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773284 != nil:
    section.add "Version", valid_773284
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773285 = header.getOrDefault("X-Amz-Date")
  valid_773285 = validateParameter(valid_773285, JString, required = false,
                                 default = nil)
  if valid_773285 != nil:
    section.add "X-Amz-Date", valid_773285
  var valid_773286 = header.getOrDefault("X-Amz-Security-Token")
  valid_773286 = validateParameter(valid_773286, JString, required = false,
                                 default = nil)
  if valid_773286 != nil:
    section.add "X-Amz-Security-Token", valid_773286
  var valid_773287 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773287 = validateParameter(valid_773287, JString, required = false,
                                 default = nil)
  if valid_773287 != nil:
    section.add "X-Amz-Content-Sha256", valid_773287
  var valid_773288 = header.getOrDefault("X-Amz-Algorithm")
  valid_773288 = validateParameter(valid_773288, JString, required = false,
                                 default = nil)
  if valid_773288 != nil:
    section.add "X-Amz-Algorithm", valid_773288
  var valid_773289 = header.getOrDefault("X-Amz-Signature")
  valid_773289 = validateParameter(valid_773289, JString, required = false,
                                 default = nil)
  if valid_773289 != nil:
    section.add "X-Amz-Signature", valid_773289
  var valid_773290 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773290 = validateParameter(valid_773290, JString, required = false,
                                 default = nil)
  if valid_773290 != nil:
    section.add "X-Amz-SignedHeaders", valid_773290
  var valid_773291 = header.getOrDefault("X-Amz-Credential")
  valid_773291 = validateParameter(valid_773291, JString, required = false,
                                 default = nil)
  if valid_773291 != nil:
    section.add "X-Amz-Credential", valid_773291
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773292: Call_GetApplyPendingMaintenanceAction_773277;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  let valid = call_773292.validator(path, query, header, formData, body)
  let scheme = call_773292.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773292.url(scheme.get, call_773292.host, call_773292.base,
                         call_773292.route, valid.getOrDefault("path"))
  result = hook(call_773292, url, valid)

proc call*(call_773293: Call_GetApplyPendingMaintenanceAction_773277;
          ApplyAction: string; ResourceIdentifier: string; OptInType: string;
          Action: string = "ApplyPendingMaintenanceAction";
          Version: string = "2014-10-31"): Recallable =
  ## getApplyPendingMaintenanceAction
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ##   ApplyAction: string (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code> </p>
  ##   ResourceIdentifier: string (required)
  ##                     : The Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   Action: string (required)
  ##   OptInType: string (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  ##   Version: string (required)
  var query_773294 = newJObject()
  add(query_773294, "ApplyAction", newJString(ApplyAction))
  add(query_773294, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(query_773294, "Action", newJString(Action))
  add(query_773294, "OptInType", newJString(OptInType))
  add(query_773294, "Version", newJString(Version))
  result = call_773293.call(nil, query_773294, nil, nil, nil)

var getApplyPendingMaintenanceAction* = Call_GetApplyPendingMaintenanceAction_773277(
    name: "getApplyPendingMaintenanceAction", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ApplyPendingMaintenanceAction",
    validator: validate_GetApplyPendingMaintenanceAction_773278, base: "/",
    url: url_GetApplyPendingMaintenanceAction_773279,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBClusterParameterGroup_773333 = ref object of OpenApiRestCall_772581
proc url_PostCopyDBClusterParameterGroup_773335(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCopyDBClusterParameterGroup_773334(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Copies the specified DB cluster parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773336 = query.getOrDefault("Action")
  valid_773336 = validateParameter(valid_773336, JString, required = true, default = newJString(
      "CopyDBClusterParameterGroup"))
  if valid_773336 != nil:
    section.add "Action", valid_773336
  var valid_773337 = query.getOrDefault("Version")
  valid_773337 = validateParameter(valid_773337, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773337 != nil:
    section.add "Version", valid_773337
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773338 = header.getOrDefault("X-Amz-Date")
  valid_773338 = validateParameter(valid_773338, JString, required = false,
                                 default = nil)
  if valid_773338 != nil:
    section.add "X-Amz-Date", valid_773338
  var valid_773339 = header.getOrDefault("X-Amz-Security-Token")
  valid_773339 = validateParameter(valid_773339, JString, required = false,
                                 default = nil)
  if valid_773339 != nil:
    section.add "X-Amz-Security-Token", valid_773339
  var valid_773340 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773340 = validateParameter(valid_773340, JString, required = false,
                                 default = nil)
  if valid_773340 != nil:
    section.add "X-Amz-Content-Sha256", valid_773340
  var valid_773341 = header.getOrDefault("X-Amz-Algorithm")
  valid_773341 = validateParameter(valid_773341, JString, required = false,
                                 default = nil)
  if valid_773341 != nil:
    section.add "X-Amz-Algorithm", valid_773341
  var valid_773342 = header.getOrDefault("X-Amz-Signature")
  valid_773342 = validateParameter(valid_773342, JString, required = false,
                                 default = nil)
  if valid_773342 != nil:
    section.add "X-Amz-Signature", valid_773342
  var valid_773343 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773343 = validateParameter(valid_773343, JString, required = false,
                                 default = nil)
  if valid_773343 != nil:
    section.add "X-Amz-SignedHeaders", valid_773343
  var valid_773344 = header.getOrDefault("X-Amz-Credential")
  valid_773344 = validateParameter(valid_773344, JString, required = false,
                                 default = nil)
  if valid_773344 != nil:
    section.add "X-Amz-Credential", valid_773344
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetDBClusterParameterGroupDescription: JString (required)
  ##                                           : A description for the copied DB cluster parameter group.
  ##   Tags: JArray
  ##       : The tags to be assigned to the copied DB cluster parameter group.
  ##   SourceDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   TargetDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `TargetDBClusterParameterGroupDescription` field"
  var valid_773345 = formData.getOrDefault("TargetDBClusterParameterGroupDescription")
  valid_773345 = validateParameter(valid_773345, JString, required = true,
                                 default = nil)
  if valid_773345 != nil:
    section.add "TargetDBClusterParameterGroupDescription", valid_773345
  var valid_773346 = formData.getOrDefault("Tags")
  valid_773346 = validateParameter(valid_773346, JArray, required = false,
                                 default = nil)
  if valid_773346 != nil:
    section.add "Tags", valid_773346
  var valid_773347 = formData.getOrDefault("SourceDBClusterParameterGroupIdentifier")
  valid_773347 = validateParameter(valid_773347, JString, required = true,
                                 default = nil)
  if valid_773347 != nil:
    section.add "SourceDBClusterParameterGroupIdentifier", valid_773347
  var valid_773348 = formData.getOrDefault("TargetDBClusterParameterGroupIdentifier")
  valid_773348 = validateParameter(valid_773348, JString, required = true,
                                 default = nil)
  if valid_773348 != nil:
    section.add "TargetDBClusterParameterGroupIdentifier", valid_773348
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773349: Call_PostCopyDBClusterParameterGroup_773333;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Copies the specified DB cluster parameter group.
  ## 
  let valid = call_773349.validator(path, query, header, formData, body)
  let scheme = call_773349.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773349.url(scheme.get, call_773349.host, call_773349.base,
                         call_773349.route, valid.getOrDefault("path"))
  result = hook(call_773349, url, valid)

proc call*(call_773350: Call_PostCopyDBClusterParameterGroup_773333;
          TargetDBClusterParameterGroupDescription: string;
          SourceDBClusterParameterGroupIdentifier: string;
          TargetDBClusterParameterGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postCopyDBClusterParameterGroup
  ## Copies the specified DB cluster parameter group.
  ##   TargetDBClusterParameterGroupDescription: string (required)
  ##                                           : A description for the copied DB cluster parameter group.
  ##   Tags: JArray
  ##       : The tags to be assigned to the copied DB cluster parameter group.
  ##   Action: string (required)
  ##   SourceDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   TargetDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   Version: string (required)
  var query_773351 = newJObject()
  var formData_773352 = newJObject()
  add(formData_773352, "TargetDBClusterParameterGroupDescription",
      newJString(TargetDBClusterParameterGroupDescription))
  if Tags != nil:
    formData_773352.add "Tags", Tags
  add(query_773351, "Action", newJString(Action))
  add(formData_773352, "SourceDBClusterParameterGroupIdentifier",
      newJString(SourceDBClusterParameterGroupIdentifier))
  add(formData_773352, "TargetDBClusterParameterGroupIdentifier",
      newJString(TargetDBClusterParameterGroupIdentifier))
  add(query_773351, "Version", newJString(Version))
  result = call_773350.call(nil, query_773351, nil, formData_773352, nil)

var postCopyDBClusterParameterGroup* = Call_PostCopyDBClusterParameterGroup_773333(
    name: "postCopyDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterParameterGroup",
    validator: validate_PostCopyDBClusterParameterGroup_773334, base: "/",
    url: url_PostCopyDBClusterParameterGroup_773335,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBClusterParameterGroup_773314 = ref object of OpenApiRestCall_772581
proc url_GetCopyDBClusterParameterGroup_773316(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCopyDBClusterParameterGroup_773315(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Copies the specified DB cluster parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   Tags: JArray
  ##       : The tags to be assigned to the copied DB cluster parameter group.
  ##   TargetDBClusterParameterGroupDescription: JString (required)
  ##                                           : A description for the copied DB cluster parameter group.
  ##   Action: JString (required)
  ##   TargetDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `SourceDBClusterParameterGroupIdentifier` field"
  var valid_773317 = query.getOrDefault("SourceDBClusterParameterGroupIdentifier")
  valid_773317 = validateParameter(valid_773317, JString, required = true,
                                 default = nil)
  if valid_773317 != nil:
    section.add "SourceDBClusterParameterGroupIdentifier", valid_773317
  var valid_773318 = query.getOrDefault("Tags")
  valid_773318 = validateParameter(valid_773318, JArray, required = false,
                                 default = nil)
  if valid_773318 != nil:
    section.add "Tags", valid_773318
  var valid_773319 = query.getOrDefault("TargetDBClusterParameterGroupDescription")
  valid_773319 = validateParameter(valid_773319, JString, required = true,
                                 default = nil)
  if valid_773319 != nil:
    section.add "TargetDBClusterParameterGroupDescription", valid_773319
  var valid_773320 = query.getOrDefault("Action")
  valid_773320 = validateParameter(valid_773320, JString, required = true, default = newJString(
      "CopyDBClusterParameterGroup"))
  if valid_773320 != nil:
    section.add "Action", valid_773320
  var valid_773321 = query.getOrDefault("TargetDBClusterParameterGroupIdentifier")
  valid_773321 = validateParameter(valid_773321, JString, required = true,
                                 default = nil)
  if valid_773321 != nil:
    section.add "TargetDBClusterParameterGroupIdentifier", valid_773321
  var valid_773322 = query.getOrDefault("Version")
  valid_773322 = validateParameter(valid_773322, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773322 != nil:
    section.add "Version", valid_773322
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773323 = header.getOrDefault("X-Amz-Date")
  valid_773323 = validateParameter(valid_773323, JString, required = false,
                                 default = nil)
  if valid_773323 != nil:
    section.add "X-Amz-Date", valid_773323
  var valid_773324 = header.getOrDefault("X-Amz-Security-Token")
  valid_773324 = validateParameter(valid_773324, JString, required = false,
                                 default = nil)
  if valid_773324 != nil:
    section.add "X-Amz-Security-Token", valid_773324
  var valid_773325 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773325 = validateParameter(valid_773325, JString, required = false,
                                 default = nil)
  if valid_773325 != nil:
    section.add "X-Amz-Content-Sha256", valid_773325
  var valid_773326 = header.getOrDefault("X-Amz-Algorithm")
  valid_773326 = validateParameter(valid_773326, JString, required = false,
                                 default = nil)
  if valid_773326 != nil:
    section.add "X-Amz-Algorithm", valid_773326
  var valid_773327 = header.getOrDefault("X-Amz-Signature")
  valid_773327 = validateParameter(valid_773327, JString, required = false,
                                 default = nil)
  if valid_773327 != nil:
    section.add "X-Amz-Signature", valid_773327
  var valid_773328 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773328 = validateParameter(valid_773328, JString, required = false,
                                 default = nil)
  if valid_773328 != nil:
    section.add "X-Amz-SignedHeaders", valid_773328
  var valid_773329 = header.getOrDefault("X-Amz-Credential")
  valid_773329 = validateParameter(valid_773329, JString, required = false,
                                 default = nil)
  if valid_773329 != nil:
    section.add "X-Amz-Credential", valid_773329
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773330: Call_GetCopyDBClusterParameterGroup_773314; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the specified DB cluster parameter group.
  ## 
  let valid = call_773330.validator(path, query, header, formData, body)
  let scheme = call_773330.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773330.url(scheme.get, call_773330.host, call_773330.base,
                         call_773330.route, valid.getOrDefault("path"))
  result = hook(call_773330, url, valid)

proc call*(call_773331: Call_GetCopyDBClusterParameterGroup_773314;
          SourceDBClusterParameterGroupIdentifier: string;
          TargetDBClusterParameterGroupDescription: string;
          TargetDBClusterParameterGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCopyDBClusterParameterGroup
  ## Copies the specified DB cluster parameter group.
  ##   SourceDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   Tags: JArray
  ##       : The tags to be assigned to the copied DB cluster parameter group.
  ##   TargetDBClusterParameterGroupDescription: string (required)
  ##                                           : A description for the copied DB cluster parameter group.
  ##   Action: string (required)
  ##   TargetDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   Version: string (required)
  var query_773332 = newJObject()
  add(query_773332, "SourceDBClusterParameterGroupIdentifier",
      newJString(SourceDBClusterParameterGroupIdentifier))
  if Tags != nil:
    query_773332.add "Tags", Tags
  add(query_773332, "TargetDBClusterParameterGroupDescription",
      newJString(TargetDBClusterParameterGroupDescription))
  add(query_773332, "Action", newJString(Action))
  add(query_773332, "TargetDBClusterParameterGroupIdentifier",
      newJString(TargetDBClusterParameterGroupIdentifier))
  add(query_773332, "Version", newJString(Version))
  result = call_773331.call(nil, query_773332, nil, nil, nil)

var getCopyDBClusterParameterGroup* = Call_GetCopyDBClusterParameterGroup_773314(
    name: "getCopyDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterParameterGroup",
    validator: validate_GetCopyDBClusterParameterGroup_773315, base: "/",
    url: url_GetCopyDBClusterParameterGroup_773316,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBClusterSnapshot_773374 = ref object of OpenApiRestCall_772581
proc url_PostCopyDBClusterSnapshot_773376(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCopyDBClusterSnapshot_773375(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can't copy from one AWS Region to another.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773377 = query.getOrDefault("Action")
  valid_773377 = validateParameter(valid_773377, JString, required = true,
                                 default = newJString("CopyDBClusterSnapshot"))
  if valid_773377 != nil:
    section.add "Action", valid_773377
  var valid_773378 = query.getOrDefault("Version")
  valid_773378 = validateParameter(valid_773378, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773378 != nil:
    section.add "Version", valid_773378
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773379 = header.getOrDefault("X-Amz-Date")
  valid_773379 = validateParameter(valid_773379, JString, required = false,
                                 default = nil)
  if valid_773379 != nil:
    section.add "X-Amz-Date", valid_773379
  var valid_773380 = header.getOrDefault("X-Amz-Security-Token")
  valid_773380 = validateParameter(valid_773380, JString, required = false,
                                 default = nil)
  if valid_773380 != nil:
    section.add "X-Amz-Security-Token", valid_773380
  var valid_773381 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773381 = validateParameter(valid_773381, JString, required = false,
                                 default = nil)
  if valid_773381 != nil:
    section.add "X-Amz-Content-Sha256", valid_773381
  var valid_773382 = header.getOrDefault("X-Amz-Algorithm")
  valid_773382 = validateParameter(valid_773382, JString, required = false,
                                 default = nil)
  if valid_773382 != nil:
    section.add "X-Amz-Algorithm", valid_773382
  var valid_773383 = header.getOrDefault("X-Amz-Signature")
  valid_773383 = validateParameter(valid_773383, JString, required = false,
                                 default = nil)
  if valid_773383 != nil:
    section.add "X-Amz-Signature", valid_773383
  var valid_773384 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773384 = validateParameter(valid_773384, JString, required = false,
                                 default = nil)
  if valid_773384 != nil:
    section.add "X-Amz-SignedHeaders", valid_773384
  var valid_773385 = header.getOrDefault("X-Amz-Credential")
  valid_773385 = validateParameter(valid_773385, JString, required = false,
                                 default = nil)
  if valid_773385 != nil:
    section.add "X-Amz-Credential", valid_773385
  result.add "header", section
  ## parameters in `formData` object:
  ##   PreSignedUrl: JString
  ##               : Not currently supported.
  ##   Tags: JArray
  ##       : The tags to assign to the new DB cluster snapshot copy.
  ##   CopyTags: JBool
  ##           : True to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot, and otherwise false. The default is false.
  ##   SourceDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive.</p> <p>You can't copy from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>Specify a valid DB snapshot identifier.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   TargetDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, Amazon Neptune encrypts the target DB cluster snapshot using the specified KMS encryption key.</p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot.</p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>.</p> <p> KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p>
  section = newJObject()
  var valid_773386 = formData.getOrDefault("PreSignedUrl")
  valid_773386 = validateParameter(valid_773386, JString, required = false,
                                 default = nil)
  if valid_773386 != nil:
    section.add "PreSignedUrl", valid_773386
  var valid_773387 = formData.getOrDefault("Tags")
  valid_773387 = validateParameter(valid_773387, JArray, required = false,
                                 default = nil)
  if valid_773387 != nil:
    section.add "Tags", valid_773387
  var valid_773388 = formData.getOrDefault("CopyTags")
  valid_773388 = validateParameter(valid_773388, JBool, required = false, default = nil)
  if valid_773388 != nil:
    section.add "CopyTags", valid_773388
  assert formData != nil, "formData argument is necessary due to required `SourceDBClusterSnapshotIdentifier` field"
  var valid_773389 = formData.getOrDefault("SourceDBClusterSnapshotIdentifier")
  valid_773389 = validateParameter(valid_773389, JString, required = true,
                                 default = nil)
  if valid_773389 != nil:
    section.add "SourceDBClusterSnapshotIdentifier", valid_773389
  var valid_773390 = formData.getOrDefault("TargetDBClusterSnapshotIdentifier")
  valid_773390 = validateParameter(valid_773390, JString, required = true,
                                 default = nil)
  if valid_773390 != nil:
    section.add "TargetDBClusterSnapshotIdentifier", valid_773390
  var valid_773391 = formData.getOrDefault("KmsKeyId")
  valid_773391 = validateParameter(valid_773391, JString, required = false,
                                 default = nil)
  if valid_773391 != nil:
    section.add "KmsKeyId", valid_773391
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773392: Call_PostCopyDBClusterSnapshot_773374; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can't copy from one AWS Region to another.</p>
  ## 
  let valid = call_773392.validator(path, query, header, formData, body)
  let scheme = call_773392.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773392.url(scheme.get, call_773392.host, call_773392.base,
                         call_773392.route, valid.getOrDefault("path"))
  result = hook(call_773392, url, valid)

proc call*(call_773393: Call_PostCopyDBClusterSnapshot_773374;
          SourceDBClusterSnapshotIdentifier: string;
          TargetDBClusterSnapshotIdentifier: string; PreSignedUrl: string = "";
          Tags: JsonNode = nil; CopyTags: bool = false;
          Action: string = "CopyDBClusterSnapshot"; KmsKeyId: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postCopyDBClusterSnapshot
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can't copy from one AWS Region to another.</p>
  ##   PreSignedUrl: string
  ##               : Not currently supported.
  ##   Tags: JArray
  ##       : The tags to assign to the new DB cluster snapshot copy.
  ##   CopyTags: bool
  ##           : True to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot, and otherwise false. The default is false.
  ##   SourceDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive.</p> <p>You can't copy from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>Specify a valid DB snapshot identifier.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   TargetDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   Action: string (required)
  ##   KmsKeyId: string
  ##           : <p>The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, Amazon Neptune encrypts the target DB cluster snapshot using the specified KMS encryption key.</p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot.</p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>.</p> <p> KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p>
  ##   Version: string (required)
  var query_773394 = newJObject()
  var formData_773395 = newJObject()
  add(formData_773395, "PreSignedUrl", newJString(PreSignedUrl))
  if Tags != nil:
    formData_773395.add "Tags", Tags
  add(formData_773395, "CopyTags", newJBool(CopyTags))
  add(formData_773395, "SourceDBClusterSnapshotIdentifier",
      newJString(SourceDBClusterSnapshotIdentifier))
  add(formData_773395, "TargetDBClusterSnapshotIdentifier",
      newJString(TargetDBClusterSnapshotIdentifier))
  add(query_773394, "Action", newJString(Action))
  add(formData_773395, "KmsKeyId", newJString(KmsKeyId))
  add(query_773394, "Version", newJString(Version))
  result = call_773393.call(nil, query_773394, nil, formData_773395, nil)

var postCopyDBClusterSnapshot* = Call_PostCopyDBClusterSnapshot_773374(
    name: "postCopyDBClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterSnapshot",
    validator: validate_PostCopyDBClusterSnapshot_773375, base: "/",
    url: url_PostCopyDBClusterSnapshot_773376,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBClusterSnapshot_773353 = ref object of OpenApiRestCall_772581
proc url_GetCopyDBClusterSnapshot_773355(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCopyDBClusterSnapshot_773354(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can't copy from one AWS Region to another.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PreSignedUrl: JString
  ##               : Not currently supported.
  ##   TargetDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   Tags: JArray
  ##       : The tags to assign to the new DB cluster snapshot copy.
  ##   Action: JString (required)
  ##   KmsKeyId: JString
  ##           : <p>The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, Amazon Neptune encrypts the target DB cluster snapshot using the specified KMS encryption key.</p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot.</p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>.</p> <p> KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p>
  ##   SourceDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive.</p> <p>You can't copy from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>Specify a valid DB snapshot identifier.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   Version: JString (required)
  ##   CopyTags: JBool
  ##           : True to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot, and otherwise false. The default is false.
  section = newJObject()
  var valid_773356 = query.getOrDefault("PreSignedUrl")
  valid_773356 = validateParameter(valid_773356, JString, required = false,
                                 default = nil)
  if valid_773356 != nil:
    section.add "PreSignedUrl", valid_773356
  assert query != nil, "query argument is necessary due to required `TargetDBClusterSnapshotIdentifier` field"
  var valid_773357 = query.getOrDefault("TargetDBClusterSnapshotIdentifier")
  valid_773357 = validateParameter(valid_773357, JString, required = true,
                                 default = nil)
  if valid_773357 != nil:
    section.add "TargetDBClusterSnapshotIdentifier", valid_773357
  var valid_773358 = query.getOrDefault("Tags")
  valid_773358 = validateParameter(valid_773358, JArray, required = false,
                                 default = nil)
  if valid_773358 != nil:
    section.add "Tags", valid_773358
  var valid_773359 = query.getOrDefault("Action")
  valid_773359 = validateParameter(valid_773359, JString, required = true,
                                 default = newJString("CopyDBClusterSnapshot"))
  if valid_773359 != nil:
    section.add "Action", valid_773359
  var valid_773360 = query.getOrDefault("KmsKeyId")
  valid_773360 = validateParameter(valid_773360, JString, required = false,
                                 default = nil)
  if valid_773360 != nil:
    section.add "KmsKeyId", valid_773360
  var valid_773361 = query.getOrDefault("SourceDBClusterSnapshotIdentifier")
  valid_773361 = validateParameter(valid_773361, JString, required = true,
                                 default = nil)
  if valid_773361 != nil:
    section.add "SourceDBClusterSnapshotIdentifier", valid_773361
  var valid_773362 = query.getOrDefault("Version")
  valid_773362 = validateParameter(valid_773362, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773362 != nil:
    section.add "Version", valid_773362
  var valid_773363 = query.getOrDefault("CopyTags")
  valid_773363 = validateParameter(valid_773363, JBool, required = false, default = nil)
  if valid_773363 != nil:
    section.add "CopyTags", valid_773363
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773364 = header.getOrDefault("X-Amz-Date")
  valid_773364 = validateParameter(valid_773364, JString, required = false,
                                 default = nil)
  if valid_773364 != nil:
    section.add "X-Amz-Date", valid_773364
  var valid_773365 = header.getOrDefault("X-Amz-Security-Token")
  valid_773365 = validateParameter(valid_773365, JString, required = false,
                                 default = nil)
  if valid_773365 != nil:
    section.add "X-Amz-Security-Token", valid_773365
  var valid_773366 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773366 = validateParameter(valid_773366, JString, required = false,
                                 default = nil)
  if valid_773366 != nil:
    section.add "X-Amz-Content-Sha256", valid_773366
  var valid_773367 = header.getOrDefault("X-Amz-Algorithm")
  valid_773367 = validateParameter(valid_773367, JString, required = false,
                                 default = nil)
  if valid_773367 != nil:
    section.add "X-Amz-Algorithm", valid_773367
  var valid_773368 = header.getOrDefault("X-Amz-Signature")
  valid_773368 = validateParameter(valid_773368, JString, required = false,
                                 default = nil)
  if valid_773368 != nil:
    section.add "X-Amz-Signature", valid_773368
  var valid_773369 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773369 = validateParameter(valid_773369, JString, required = false,
                                 default = nil)
  if valid_773369 != nil:
    section.add "X-Amz-SignedHeaders", valid_773369
  var valid_773370 = header.getOrDefault("X-Amz-Credential")
  valid_773370 = validateParameter(valid_773370, JString, required = false,
                                 default = nil)
  if valid_773370 != nil:
    section.add "X-Amz-Credential", valid_773370
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773371: Call_GetCopyDBClusterSnapshot_773353; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can't copy from one AWS Region to another.</p>
  ## 
  let valid = call_773371.validator(path, query, header, formData, body)
  let scheme = call_773371.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773371.url(scheme.get, call_773371.host, call_773371.base,
                         call_773371.route, valid.getOrDefault("path"))
  result = hook(call_773371, url, valid)

proc call*(call_773372: Call_GetCopyDBClusterSnapshot_773353;
          TargetDBClusterSnapshotIdentifier: string;
          SourceDBClusterSnapshotIdentifier: string; PreSignedUrl: string = "";
          Tags: JsonNode = nil; Action: string = "CopyDBClusterSnapshot";
          KmsKeyId: string = ""; Version: string = "2014-10-31"; CopyTags: bool = false): Recallable =
  ## getCopyDBClusterSnapshot
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can't copy from one AWS Region to another.</p>
  ##   PreSignedUrl: string
  ##               : Not currently supported.
  ##   TargetDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   Tags: JArray
  ##       : The tags to assign to the new DB cluster snapshot copy.
  ##   Action: string (required)
  ##   KmsKeyId: string
  ##           : <p>The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, Amazon Neptune encrypts the target DB cluster snapshot using the specified KMS encryption key.</p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot.</p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>.</p> <p> KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p>
  ##   SourceDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive.</p> <p>You can't copy from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>Specify a valid DB snapshot identifier.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   Version: string (required)
  ##   CopyTags: bool
  ##           : True to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot, and otherwise false. The default is false.
  var query_773373 = newJObject()
  add(query_773373, "PreSignedUrl", newJString(PreSignedUrl))
  add(query_773373, "TargetDBClusterSnapshotIdentifier",
      newJString(TargetDBClusterSnapshotIdentifier))
  if Tags != nil:
    query_773373.add "Tags", Tags
  add(query_773373, "Action", newJString(Action))
  add(query_773373, "KmsKeyId", newJString(KmsKeyId))
  add(query_773373, "SourceDBClusterSnapshotIdentifier",
      newJString(SourceDBClusterSnapshotIdentifier))
  add(query_773373, "Version", newJString(Version))
  add(query_773373, "CopyTags", newJBool(CopyTags))
  result = call_773372.call(nil, query_773373, nil, nil, nil)

var getCopyDBClusterSnapshot* = Call_GetCopyDBClusterSnapshot_773353(
    name: "getCopyDBClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterSnapshot",
    validator: validate_GetCopyDBClusterSnapshot_773354, base: "/",
    url: url_GetCopyDBClusterSnapshot_773355, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBParameterGroup_773415 = ref object of OpenApiRestCall_772581
proc url_PostCopyDBParameterGroup_773417(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCopyDBParameterGroup_773416(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Copies the specified DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773418 = query.getOrDefault("Action")
  valid_773418 = validateParameter(valid_773418, JString, required = true,
                                 default = newJString("CopyDBParameterGroup"))
  if valid_773418 != nil:
    section.add "Action", valid_773418
  var valid_773419 = query.getOrDefault("Version")
  valid_773419 = validateParameter(valid_773419, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773419 != nil:
    section.add "Version", valid_773419
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773420 = header.getOrDefault("X-Amz-Date")
  valid_773420 = validateParameter(valid_773420, JString, required = false,
                                 default = nil)
  if valid_773420 != nil:
    section.add "X-Amz-Date", valid_773420
  var valid_773421 = header.getOrDefault("X-Amz-Security-Token")
  valid_773421 = validateParameter(valid_773421, JString, required = false,
                                 default = nil)
  if valid_773421 != nil:
    section.add "X-Amz-Security-Token", valid_773421
  var valid_773422 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773422 = validateParameter(valid_773422, JString, required = false,
                                 default = nil)
  if valid_773422 != nil:
    section.add "X-Amz-Content-Sha256", valid_773422
  var valid_773423 = header.getOrDefault("X-Amz-Algorithm")
  valid_773423 = validateParameter(valid_773423, JString, required = false,
                                 default = nil)
  if valid_773423 != nil:
    section.add "X-Amz-Algorithm", valid_773423
  var valid_773424 = header.getOrDefault("X-Amz-Signature")
  valid_773424 = validateParameter(valid_773424, JString, required = false,
                                 default = nil)
  if valid_773424 != nil:
    section.add "X-Amz-Signature", valid_773424
  var valid_773425 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773425 = validateParameter(valid_773425, JString, required = false,
                                 default = nil)
  if valid_773425 != nil:
    section.add "X-Amz-SignedHeaders", valid_773425
  var valid_773426 = header.getOrDefault("X-Amz-Credential")
  valid_773426 = validateParameter(valid_773426, JString, required = false,
                                 default = nil)
  if valid_773426 != nil:
    section.add "X-Amz-Credential", valid_773426
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetDBParameterGroupIdentifier: JString (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank.</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  ##   Tags: JArray
  ##       : The tags to be assigned to the copied DB parameter group.
  ##   TargetDBParameterGroupDescription: JString (required)
  ##                                    : A description for the copied DB parameter group.
  ##   SourceDBParameterGroupIdentifier: JString (required)
  ##                                   : <p>The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `TargetDBParameterGroupIdentifier` field"
  var valid_773427 = formData.getOrDefault("TargetDBParameterGroupIdentifier")
  valid_773427 = validateParameter(valid_773427, JString, required = true,
                                 default = nil)
  if valid_773427 != nil:
    section.add "TargetDBParameterGroupIdentifier", valid_773427
  var valid_773428 = formData.getOrDefault("Tags")
  valid_773428 = validateParameter(valid_773428, JArray, required = false,
                                 default = nil)
  if valid_773428 != nil:
    section.add "Tags", valid_773428
  var valid_773429 = formData.getOrDefault("TargetDBParameterGroupDescription")
  valid_773429 = validateParameter(valid_773429, JString, required = true,
                                 default = nil)
  if valid_773429 != nil:
    section.add "TargetDBParameterGroupDescription", valid_773429
  var valid_773430 = formData.getOrDefault("SourceDBParameterGroupIdentifier")
  valid_773430 = validateParameter(valid_773430, JString, required = true,
                                 default = nil)
  if valid_773430 != nil:
    section.add "SourceDBParameterGroupIdentifier", valid_773430
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773431: Call_PostCopyDBParameterGroup_773415; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the specified DB parameter group.
  ## 
  let valid = call_773431.validator(path, query, header, formData, body)
  let scheme = call_773431.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773431.url(scheme.get, call_773431.host, call_773431.base,
                         call_773431.route, valid.getOrDefault("path"))
  result = hook(call_773431, url, valid)

proc call*(call_773432: Call_PostCopyDBParameterGroup_773415;
          TargetDBParameterGroupIdentifier: string;
          TargetDBParameterGroupDescription: string;
          SourceDBParameterGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## postCopyDBParameterGroup
  ## Copies the specified DB parameter group.
  ##   TargetDBParameterGroupIdentifier: string (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank.</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  ##   Tags: JArray
  ##       : The tags to be assigned to the copied DB parameter group.
  ##   Action: string (required)
  ##   TargetDBParameterGroupDescription: string (required)
  ##                                    : A description for the copied DB parameter group.
  ##   SourceDBParameterGroupIdentifier: string (required)
  ##                                   : <p>The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   Version: string (required)
  var query_773433 = newJObject()
  var formData_773434 = newJObject()
  add(formData_773434, "TargetDBParameterGroupIdentifier",
      newJString(TargetDBParameterGroupIdentifier))
  if Tags != nil:
    formData_773434.add "Tags", Tags
  add(query_773433, "Action", newJString(Action))
  add(formData_773434, "TargetDBParameterGroupDescription",
      newJString(TargetDBParameterGroupDescription))
  add(formData_773434, "SourceDBParameterGroupIdentifier",
      newJString(SourceDBParameterGroupIdentifier))
  add(query_773433, "Version", newJString(Version))
  result = call_773432.call(nil, query_773433, nil, formData_773434, nil)

var postCopyDBParameterGroup* = Call_PostCopyDBParameterGroup_773415(
    name: "postCopyDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBParameterGroup",
    validator: validate_PostCopyDBParameterGroup_773416, base: "/",
    url: url_PostCopyDBParameterGroup_773417, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBParameterGroup_773396 = ref object of OpenApiRestCall_772581
proc url_GetCopyDBParameterGroup_773398(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCopyDBParameterGroup_773397(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Copies the specified DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : The tags to be assigned to the copied DB parameter group.
  ##   Action: JString (required)
  ##   SourceDBParameterGroupIdentifier: JString (required)
  ##                                   : <p>The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   Version: JString (required)
  ##   TargetDBParameterGroupDescription: JString (required)
  ##                                    : A description for the copied DB parameter group.
  ##   TargetDBParameterGroupIdentifier: JString (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank.</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  section = newJObject()
  var valid_773399 = query.getOrDefault("Tags")
  valid_773399 = validateParameter(valid_773399, JArray, required = false,
                                 default = nil)
  if valid_773399 != nil:
    section.add "Tags", valid_773399
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773400 = query.getOrDefault("Action")
  valid_773400 = validateParameter(valid_773400, JString, required = true,
                                 default = newJString("CopyDBParameterGroup"))
  if valid_773400 != nil:
    section.add "Action", valid_773400
  var valid_773401 = query.getOrDefault("SourceDBParameterGroupIdentifier")
  valid_773401 = validateParameter(valid_773401, JString, required = true,
                                 default = nil)
  if valid_773401 != nil:
    section.add "SourceDBParameterGroupIdentifier", valid_773401
  var valid_773402 = query.getOrDefault("Version")
  valid_773402 = validateParameter(valid_773402, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773402 != nil:
    section.add "Version", valid_773402
  var valid_773403 = query.getOrDefault("TargetDBParameterGroupDescription")
  valid_773403 = validateParameter(valid_773403, JString, required = true,
                                 default = nil)
  if valid_773403 != nil:
    section.add "TargetDBParameterGroupDescription", valid_773403
  var valid_773404 = query.getOrDefault("TargetDBParameterGroupIdentifier")
  valid_773404 = validateParameter(valid_773404, JString, required = true,
                                 default = nil)
  if valid_773404 != nil:
    section.add "TargetDBParameterGroupIdentifier", valid_773404
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773405 = header.getOrDefault("X-Amz-Date")
  valid_773405 = validateParameter(valid_773405, JString, required = false,
                                 default = nil)
  if valid_773405 != nil:
    section.add "X-Amz-Date", valid_773405
  var valid_773406 = header.getOrDefault("X-Amz-Security-Token")
  valid_773406 = validateParameter(valid_773406, JString, required = false,
                                 default = nil)
  if valid_773406 != nil:
    section.add "X-Amz-Security-Token", valid_773406
  var valid_773407 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773407 = validateParameter(valid_773407, JString, required = false,
                                 default = nil)
  if valid_773407 != nil:
    section.add "X-Amz-Content-Sha256", valid_773407
  var valid_773408 = header.getOrDefault("X-Amz-Algorithm")
  valid_773408 = validateParameter(valid_773408, JString, required = false,
                                 default = nil)
  if valid_773408 != nil:
    section.add "X-Amz-Algorithm", valid_773408
  var valid_773409 = header.getOrDefault("X-Amz-Signature")
  valid_773409 = validateParameter(valid_773409, JString, required = false,
                                 default = nil)
  if valid_773409 != nil:
    section.add "X-Amz-Signature", valid_773409
  var valid_773410 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773410 = validateParameter(valid_773410, JString, required = false,
                                 default = nil)
  if valid_773410 != nil:
    section.add "X-Amz-SignedHeaders", valid_773410
  var valid_773411 = header.getOrDefault("X-Amz-Credential")
  valid_773411 = validateParameter(valid_773411, JString, required = false,
                                 default = nil)
  if valid_773411 != nil:
    section.add "X-Amz-Credential", valid_773411
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773412: Call_GetCopyDBParameterGroup_773396; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the specified DB parameter group.
  ## 
  let valid = call_773412.validator(path, query, header, formData, body)
  let scheme = call_773412.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773412.url(scheme.get, call_773412.host, call_773412.base,
                         call_773412.route, valid.getOrDefault("path"))
  result = hook(call_773412, url, valid)

proc call*(call_773413: Call_GetCopyDBParameterGroup_773396;
          SourceDBParameterGroupIdentifier: string;
          TargetDBParameterGroupDescription: string;
          TargetDBParameterGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCopyDBParameterGroup
  ## Copies the specified DB parameter group.
  ##   Tags: JArray
  ##       : The tags to be assigned to the copied DB parameter group.
  ##   Action: string (required)
  ##   SourceDBParameterGroupIdentifier: string (required)
  ##                                   : <p>The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   Version: string (required)
  ##   TargetDBParameterGroupDescription: string (required)
  ##                                    : A description for the copied DB parameter group.
  ##   TargetDBParameterGroupIdentifier: string (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank.</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  var query_773414 = newJObject()
  if Tags != nil:
    query_773414.add "Tags", Tags
  add(query_773414, "Action", newJString(Action))
  add(query_773414, "SourceDBParameterGroupIdentifier",
      newJString(SourceDBParameterGroupIdentifier))
  add(query_773414, "Version", newJString(Version))
  add(query_773414, "TargetDBParameterGroupDescription",
      newJString(TargetDBParameterGroupDescription))
  add(query_773414, "TargetDBParameterGroupIdentifier",
      newJString(TargetDBParameterGroupIdentifier))
  result = call_773413.call(nil, query_773414, nil, nil, nil)

var getCopyDBParameterGroup* = Call_GetCopyDBParameterGroup_773396(
    name: "getCopyDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBParameterGroup",
    validator: validate_GetCopyDBParameterGroup_773397, base: "/",
    url: url_GetCopyDBParameterGroup_773398, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBCluster_773473 = ref object of OpenApiRestCall_772581
proc url_PostCreateDBCluster_773475(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateDBCluster_773474(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Creates a new Amazon Neptune DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon Neptune DB instance.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773476 = query.getOrDefault("Action")
  valid_773476 = validateParameter(valid_773476, JString, required = true,
                                 default = newJString("CreateDBCluster"))
  if valid_773476 != nil:
    section.add "Action", valid_773476
  var valid_773477 = query.getOrDefault("Version")
  valid_773477 = validateParameter(valid_773477, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773477 != nil:
    section.add "Version", valid_773477
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773478 = header.getOrDefault("X-Amz-Date")
  valid_773478 = validateParameter(valid_773478, JString, required = false,
                                 default = nil)
  if valid_773478 != nil:
    section.add "X-Amz-Date", valid_773478
  var valid_773479 = header.getOrDefault("X-Amz-Security-Token")
  valid_773479 = validateParameter(valid_773479, JString, required = false,
                                 default = nil)
  if valid_773479 != nil:
    section.add "X-Amz-Security-Token", valid_773479
  var valid_773480 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773480 = validateParameter(valid_773480, JString, required = false,
                                 default = nil)
  if valid_773480 != nil:
    section.add "X-Amz-Content-Sha256", valid_773480
  var valid_773481 = header.getOrDefault("X-Amz-Algorithm")
  valid_773481 = validateParameter(valid_773481, JString, required = false,
                                 default = nil)
  if valid_773481 != nil:
    section.add "X-Amz-Algorithm", valid_773481
  var valid_773482 = header.getOrDefault("X-Amz-Signature")
  valid_773482 = validateParameter(valid_773482, JString, required = false,
                                 default = nil)
  if valid_773482 != nil:
    section.add "X-Amz-Signature", valid_773482
  var valid_773483 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773483 = validateParameter(valid_773483, JString, required = false,
                                 default = nil)
  if valid_773483 != nil:
    section.add "X-Amz-SignedHeaders", valid_773483
  var valid_773484 = header.getOrDefault("X-Amz-Credential")
  valid_773484 = validateParameter(valid_773484, JString, required = false,
                                 default = nil)
  if valid_773484 != nil:
    section.add "X-Amz-Credential", valid_773484
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>8182</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>neptune</code> </p>
  ##   PreSignedUrl: JString
  ##               : This parameter is not currently supported.
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   Tags: JArray
  ##       : The tags to assign to the new DB cluster.
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   ReplicationSourceIdentifier: JString
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   AvailabilityZones: JArray
  ##                    : A list of EC2 Availability Zones that instances in the DB cluster can be created in.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   MasterUsername: JString
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   DatabaseName: JString
  ##               : The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Neptune will not create a database in the DB cluster you are creating.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs.
  ##   CharacterSetName: JString
  ##                   : A value that indicates that the DB cluster should be associated with the specified CharacterSet.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter.</p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Neptune User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key is not specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon Neptune will use the encryption key used to encrypt the source. Otherwise, Amazon Neptune will use your default encryption key.</p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is true and <code>ReplicationSourceIdentifier</code> is not specified, then Amazon Neptune will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   StorageEncrypted: JBool
  ##                   : Specifies whether the DB cluster is encrypted.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>Example: <code>1.0.1</code> </p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Neptune User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  section = newJObject()
  var valid_773485 = formData.getOrDefault("Port")
  valid_773485 = validateParameter(valid_773485, JInt, required = false, default = nil)
  if valid_773485 != nil:
    section.add "Port", valid_773485
  var valid_773486 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_773486 = validateParameter(valid_773486, JArray, required = false,
                                 default = nil)
  if valid_773486 != nil:
    section.add "VpcSecurityGroupIds", valid_773486
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_773487 = formData.getOrDefault("Engine")
  valid_773487 = validateParameter(valid_773487, JString, required = true,
                                 default = nil)
  if valid_773487 != nil:
    section.add "Engine", valid_773487
  var valid_773488 = formData.getOrDefault("PreSignedUrl")
  valid_773488 = validateParameter(valid_773488, JString, required = false,
                                 default = nil)
  if valid_773488 != nil:
    section.add "PreSignedUrl", valid_773488
  var valid_773489 = formData.getOrDefault("OptionGroupName")
  valid_773489 = validateParameter(valid_773489, JString, required = false,
                                 default = nil)
  if valid_773489 != nil:
    section.add "OptionGroupName", valid_773489
  var valid_773490 = formData.getOrDefault("BackupRetentionPeriod")
  valid_773490 = validateParameter(valid_773490, JInt, required = false, default = nil)
  if valid_773490 != nil:
    section.add "BackupRetentionPeriod", valid_773490
  var valid_773491 = formData.getOrDefault("Tags")
  valid_773491 = validateParameter(valid_773491, JArray, required = false,
                                 default = nil)
  if valid_773491 != nil:
    section.add "Tags", valid_773491
  var valid_773492 = formData.getOrDefault("MasterUserPassword")
  valid_773492 = validateParameter(valid_773492, JString, required = false,
                                 default = nil)
  if valid_773492 != nil:
    section.add "MasterUserPassword", valid_773492
  var valid_773493 = formData.getOrDefault("DBSubnetGroupName")
  valid_773493 = validateParameter(valid_773493, JString, required = false,
                                 default = nil)
  if valid_773493 != nil:
    section.add "DBSubnetGroupName", valid_773493
  var valid_773494 = formData.getOrDefault("ReplicationSourceIdentifier")
  valid_773494 = validateParameter(valid_773494, JString, required = false,
                                 default = nil)
  if valid_773494 != nil:
    section.add "ReplicationSourceIdentifier", valid_773494
  var valid_773495 = formData.getOrDefault("AvailabilityZones")
  valid_773495 = validateParameter(valid_773495, JArray, required = false,
                                 default = nil)
  if valid_773495 != nil:
    section.add "AvailabilityZones", valid_773495
  var valid_773496 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_773496 = validateParameter(valid_773496, JString, required = false,
                                 default = nil)
  if valid_773496 != nil:
    section.add "DBClusterParameterGroupName", valid_773496
  var valid_773497 = formData.getOrDefault("MasterUsername")
  valid_773497 = validateParameter(valid_773497, JString, required = false,
                                 default = nil)
  if valid_773497 != nil:
    section.add "MasterUsername", valid_773497
  var valid_773498 = formData.getOrDefault("DatabaseName")
  valid_773498 = validateParameter(valid_773498, JString, required = false,
                                 default = nil)
  if valid_773498 != nil:
    section.add "DatabaseName", valid_773498
  var valid_773499 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_773499 = validateParameter(valid_773499, JArray, required = false,
                                 default = nil)
  if valid_773499 != nil:
    section.add "EnableCloudwatchLogsExports", valid_773499
  var valid_773500 = formData.getOrDefault("CharacterSetName")
  valid_773500 = validateParameter(valid_773500, JString, required = false,
                                 default = nil)
  if valid_773500 != nil:
    section.add "CharacterSetName", valid_773500
  var valid_773501 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_773501 = validateParameter(valid_773501, JBool, required = false, default = nil)
  if valid_773501 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_773501
  var valid_773502 = formData.getOrDefault("PreferredBackupWindow")
  valid_773502 = validateParameter(valid_773502, JString, required = false,
                                 default = nil)
  if valid_773502 != nil:
    section.add "PreferredBackupWindow", valid_773502
  var valid_773503 = formData.getOrDefault("KmsKeyId")
  valid_773503 = validateParameter(valid_773503, JString, required = false,
                                 default = nil)
  if valid_773503 != nil:
    section.add "KmsKeyId", valid_773503
  var valid_773504 = formData.getOrDefault("StorageEncrypted")
  valid_773504 = validateParameter(valid_773504, JBool, required = false, default = nil)
  if valid_773504 != nil:
    section.add "StorageEncrypted", valid_773504
  var valid_773505 = formData.getOrDefault("DBClusterIdentifier")
  valid_773505 = validateParameter(valid_773505, JString, required = true,
                                 default = nil)
  if valid_773505 != nil:
    section.add "DBClusterIdentifier", valid_773505
  var valid_773506 = formData.getOrDefault("EngineVersion")
  valid_773506 = validateParameter(valid_773506, JString, required = false,
                                 default = nil)
  if valid_773506 != nil:
    section.add "EngineVersion", valid_773506
  var valid_773507 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_773507 = validateParameter(valid_773507, JString, required = false,
                                 default = nil)
  if valid_773507 != nil:
    section.add "PreferredMaintenanceWindow", valid_773507
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773508: Call_PostCreateDBCluster_773473; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new Amazon Neptune DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon Neptune DB instance.</p>
  ## 
  let valid = call_773508.validator(path, query, header, formData, body)
  let scheme = call_773508.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773508.url(scheme.get, call_773508.host, call_773508.base,
                         call_773508.route, valid.getOrDefault("path"))
  result = hook(call_773508, url, valid)

proc call*(call_773509: Call_PostCreateDBCluster_773473; Engine: string;
          DBClusterIdentifier: string; Port: int = 0;
          VpcSecurityGroupIds: JsonNode = nil; PreSignedUrl: string = "";
          OptionGroupName: string = ""; BackupRetentionPeriod: int = 0;
          Tags: JsonNode = nil; MasterUserPassword: string = "";
          DBSubnetGroupName: string = ""; ReplicationSourceIdentifier: string = "";
          Action: string = "CreateDBCluster"; AvailabilityZones: JsonNode = nil;
          DBClusterParameterGroupName: string = ""; MasterUsername: string = "";
          DatabaseName: string = ""; EnableCloudwatchLogsExports: JsonNode = nil;
          CharacterSetName: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          PreferredBackupWindow: string = ""; KmsKeyId: string = "";
          StorageEncrypted: bool = false; EngineVersion: string = "";
          Version: string = "2014-10-31"; PreferredMaintenanceWindow: string = ""): Recallable =
  ## postCreateDBCluster
  ## <p>Creates a new Amazon Neptune DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon Neptune DB instance.</p>
  ##   Port: int
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>8182</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>neptune</code> </p>
  ##   PreSignedUrl: string
  ##               : This parameter is not currently supported.
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   Tags: JArray
  ##       : The tags to assign to the new DB cluster.
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   ReplicationSourceIdentifier: string
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   Action: string (required)
  ##   AvailabilityZones: JArray
  ##                    : A list of EC2 Availability Zones that instances in the DB cluster can be created in.
  ##   DBClusterParameterGroupName: string
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   MasterUsername: string
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   DatabaseName: string
  ##               : The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Neptune will not create a database in the DB cluster you are creating.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs.
  ##   CharacterSetName: string
  ##                   : A value that indicates that the DB cluster should be associated with the specified CharacterSet.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter.</p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Neptune User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key is not specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon Neptune will use the encryption key used to encrypt the source. Otherwise, Amazon Neptune will use your default encryption key.</p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is true and <code>ReplicationSourceIdentifier</code> is not specified, then Amazon Neptune will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   StorageEncrypted: bool
  ##                   : Specifies whether the DB cluster is encrypted.
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>Example: <code>1.0.1</code> </p>
  ##   Version: string (required)
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Neptune User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  var query_773510 = newJObject()
  var formData_773511 = newJObject()
  add(formData_773511, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    formData_773511.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_773511, "Engine", newJString(Engine))
  add(formData_773511, "PreSignedUrl", newJString(PreSignedUrl))
  add(formData_773511, "OptionGroupName", newJString(OptionGroupName))
  add(formData_773511, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  if Tags != nil:
    formData_773511.add "Tags", Tags
  add(formData_773511, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_773511, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_773511, "ReplicationSourceIdentifier",
      newJString(ReplicationSourceIdentifier))
  add(query_773510, "Action", newJString(Action))
  if AvailabilityZones != nil:
    formData_773511.add "AvailabilityZones", AvailabilityZones
  add(formData_773511, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(formData_773511, "MasterUsername", newJString(MasterUsername))
  add(formData_773511, "DatabaseName", newJString(DatabaseName))
  if EnableCloudwatchLogsExports != nil:
    formData_773511.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_773511, "CharacterSetName", newJString(CharacterSetName))
  add(formData_773511, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_773511, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_773511, "KmsKeyId", newJString(KmsKeyId))
  add(formData_773511, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_773511, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_773511, "EngineVersion", newJString(EngineVersion))
  add(query_773510, "Version", newJString(Version))
  add(formData_773511, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  result = call_773509.call(nil, query_773510, nil, formData_773511, nil)

var postCreateDBCluster* = Call_PostCreateDBCluster_773473(
    name: "postCreateDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBCluster",
    validator: validate_PostCreateDBCluster_773474, base: "/",
    url: url_PostCreateDBCluster_773475, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBCluster_773435 = ref object of OpenApiRestCall_772581
proc url_GetCreateDBCluster_773437(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateDBCluster_773436(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Creates a new Amazon Neptune DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon Neptune DB instance.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>neptune</code> </p>
  ##   ReplicationSourceIdentifier: JString
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Neptune User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   StorageEncrypted: JBool
  ##                   : Specifies whether the DB cluster is encrypted.
  ##   AvailabilityZones: JArray
  ##                    : A list of EC2 Availability Zones that instances in the DB cluster can be created in.
  ##   DatabaseName: JString
  ##               : The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Neptune will not create a database in the DB cluster you are creating.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   PreSignedUrl: JString
  ##               : This parameter is not currently supported.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs.
  ##   Tags: JArray
  ##       : The tags to assign to the new DB cluster.
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   Action: JString (required)
  ##   CharacterSetName: JString
  ##                   : A value that indicates that the DB cluster should be associated with the specified CharacterSet.
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key is not specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon Neptune will use the encryption key used to encrypt the source. Otherwise, Amazon Neptune will use your default encryption key.</p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is true and <code>ReplicationSourceIdentifier</code> is not specified, then Amazon Neptune will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>Example: <code>1.0.1</code> </p>
  ##   Port: JInt
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>8182</code> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter.</p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Neptune User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   Version: JString (required)
  ##   MasterUsername: JString
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot be a reserved word for the chosen database engine.</p> </li> </ul>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_773438 = query.getOrDefault("Engine")
  valid_773438 = validateParameter(valid_773438, JString, required = true,
                                 default = nil)
  if valid_773438 != nil:
    section.add "Engine", valid_773438
  var valid_773439 = query.getOrDefault("ReplicationSourceIdentifier")
  valid_773439 = validateParameter(valid_773439, JString, required = false,
                                 default = nil)
  if valid_773439 != nil:
    section.add "ReplicationSourceIdentifier", valid_773439
  var valid_773440 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_773440 = validateParameter(valid_773440, JString, required = false,
                                 default = nil)
  if valid_773440 != nil:
    section.add "PreferredMaintenanceWindow", valid_773440
  var valid_773441 = query.getOrDefault("DBClusterParameterGroupName")
  valid_773441 = validateParameter(valid_773441, JString, required = false,
                                 default = nil)
  if valid_773441 != nil:
    section.add "DBClusterParameterGroupName", valid_773441
  var valid_773442 = query.getOrDefault("StorageEncrypted")
  valid_773442 = validateParameter(valid_773442, JBool, required = false, default = nil)
  if valid_773442 != nil:
    section.add "StorageEncrypted", valid_773442
  var valid_773443 = query.getOrDefault("AvailabilityZones")
  valid_773443 = validateParameter(valid_773443, JArray, required = false,
                                 default = nil)
  if valid_773443 != nil:
    section.add "AvailabilityZones", valid_773443
  var valid_773444 = query.getOrDefault("DatabaseName")
  valid_773444 = validateParameter(valid_773444, JString, required = false,
                                 default = nil)
  if valid_773444 != nil:
    section.add "DatabaseName", valid_773444
  var valid_773445 = query.getOrDefault("DBClusterIdentifier")
  valid_773445 = validateParameter(valid_773445, JString, required = true,
                                 default = nil)
  if valid_773445 != nil:
    section.add "DBClusterIdentifier", valid_773445
  var valid_773446 = query.getOrDefault("OptionGroupName")
  valid_773446 = validateParameter(valid_773446, JString, required = false,
                                 default = nil)
  if valid_773446 != nil:
    section.add "OptionGroupName", valid_773446
  var valid_773447 = query.getOrDefault("MasterUserPassword")
  valid_773447 = validateParameter(valid_773447, JString, required = false,
                                 default = nil)
  if valid_773447 != nil:
    section.add "MasterUserPassword", valid_773447
  var valid_773448 = query.getOrDefault("PreSignedUrl")
  valid_773448 = validateParameter(valid_773448, JString, required = false,
                                 default = nil)
  if valid_773448 != nil:
    section.add "PreSignedUrl", valid_773448
  var valid_773449 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_773449 = validateParameter(valid_773449, JBool, required = false, default = nil)
  if valid_773449 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_773449
  var valid_773450 = query.getOrDefault("VpcSecurityGroupIds")
  valid_773450 = validateParameter(valid_773450, JArray, required = false,
                                 default = nil)
  if valid_773450 != nil:
    section.add "VpcSecurityGroupIds", valid_773450
  var valid_773451 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_773451 = validateParameter(valid_773451, JArray, required = false,
                                 default = nil)
  if valid_773451 != nil:
    section.add "EnableCloudwatchLogsExports", valid_773451
  var valid_773452 = query.getOrDefault("Tags")
  valid_773452 = validateParameter(valid_773452, JArray, required = false,
                                 default = nil)
  if valid_773452 != nil:
    section.add "Tags", valid_773452
  var valid_773453 = query.getOrDefault("BackupRetentionPeriod")
  valid_773453 = validateParameter(valid_773453, JInt, required = false, default = nil)
  if valid_773453 != nil:
    section.add "BackupRetentionPeriod", valid_773453
  var valid_773454 = query.getOrDefault("Action")
  valid_773454 = validateParameter(valid_773454, JString, required = true,
                                 default = newJString("CreateDBCluster"))
  if valid_773454 != nil:
    section.add "Action", valid_773454
  var valid_773455 = query.getOrDefault("CharacterSetName")
  valid_773455 = validateParameter(valid_773455, JString, required = false,
                                 default = nil)
  if valid_773455 != nil:
    section.add "CharacterSetName", valid_773455
  var valid_773456 = query.getOrDefault("DBSubnetGroupName")
  valid_773456 = validateParameter(valid_773456, JString, required = false,
                                 default = nil)
  if valid_773456 != nil:
    section.add "DBSubnetGroupName", valid_773456
  var valid_773457 = query.getOrDefault("KmsKeyId")
  valid_773457 = validateParameter(valid_773457, JString, required = false,
                                 default = nil)
  if valid_773457 != nil:
    section.add "KmsKeyId", valid_773457
  var valid_773458 = query.getOrDefault("EngineVersion")
  valid_773458 = validateParameter(valid_773458, JString, required = false,
                                 default = nil)
  if valid_773458 != nil:
    section.add "EngineVersion", valid_773458
  var valid_773459 = query.getOrDefault("Port")
  valid_773459 = validateParameter(valid_773459, JInt, required = false, default = nil)
  if valid_773459 != nil:
    section.add "Port", valid_773459
  var valid_773460 = query.getOrDefault("PreferredBackupWindow")
  valid_773460 = validateParameter(valid_773460, JString, required = false,
                                 default = nil)
  if valid_773460 != nil:
    section.add "PreferredBackupWindow", valid_773460
  var valid_773461 = query.getOrDefault("Version")
  valid_773461 = validateParameter(valid_773461, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773461 != nil:
    section.add "Version", valid_773461
  var valid_773462 = query.getOrDefault("MasterUsername")
  valid_773462 = validateParameter(valid_773462, JString, required = false,
                                 default = nil)
  if valid_773462 != nil:
    section.add "MasterUsername", valid_773462
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773463 = header.getOrDefault("X-Amz-Date")
  valid_773463 = validateParameter(valid_773463, JString, required = false,
                                 default = nil)
  if valid_773463 != nil:
    section.add "X-Amz-Date", valid_773463
  var valid_773464 = header.getOrDefault("X-Amz-Security-Token")
  valid_773464 = validateParameter(valid_773464, JString, required = false,
                                 default = nil)
  if valid_773464 != nil:
    section.add "X-Amz-Security-Token", valid_773464
  var valid_773465 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773465 = validateParameter(valid_773465, JString, required = false,
                                 default = nil)
  if valid_773465 != nil:
    section.add "X-Amz-Content-Sha256", valid_773465
  var valid_773466 = header.getOrDefault("X-Amz-Algorithm")
  valid_773466 = validateParameter(valid_773466, JString, required = false,
                                 default = nil)
  if valid_773466 != nil:
    section.add "X-Amz-Algorithm", valid_773466
  var valid_773467 = header.getOrDefault("X-Amz-Signature")
  valid_773467 = validateParameter(valid_773467, JString, required = false,
                                 default = nil)
  if valid_773467 != nil:
    section.add "X-Amz-Signature", valid_773467
  var valid_773468 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773468 = validateParameter(valid_773468, JString, required = false,
                                 default = nil)
  if valid_773468 != nil:
    section.add "X-Amz-SignedHeaders", valid_773468
  var valid_773469 = header.getOrDefault("X-Amz-Credential")
  valid_773469 = validateParameter(valid_773469, JString, required = false,
                                 default = nil)
  if valid_773469 != nil:
    section.add "X-Amz-Credential", valid_773469
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773470: Call_GetCreateDBCluster_773435; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new Amazon Neptune DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon Neptune DB instance.</p>
  ## 
  let valid = call_773470.validator(path, query, header, formData, body)
  let scheme = call_773470.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773470.url(scheme.get, call_773470.host, call_773470.base,
                         call_773470.route, valid.getOrDefault("path"))
  result = hook(call_773470, url, valid)

proc call*(call_773471: Call_GetCreateDBCluster_773435; Engine: string;
          DBClusterIdentifier: string; ReplicationSourceIdentifier: string = "";
          PreferredMaintenanceWindow: string = "";
          DBClusterParameterGroupName: string = ""; StorageEncrypted: bool = false;
          AvailabilityZones: JsonNode = nil; DatabaseName: string = "";
          OptionGroupName: string = ""; MasterUserPassword: string = "";
          PreSignedUrl: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          VpcSecurityGroupIds: JsonNode = nil;
          EnableCloudwatchLogsExports: JsonNode = nil; Tags: JsonNode = nil;
          BackupRetentionPeriod: int = 0; Action: string = "CreateDBCluster";
          CharacterSetName: string = ""; DBSubnetGroupName: string = "";
          KmsKeyId: string = ""; EngineVersion: string = ""; Port: int = 0;
          PreferredBackupWindow: string = ""; Version: string = "2014-10-31";
          MasterUsername: string = ""): Recallable =
  ## getCreateDBCluster
  ## <p>Creates a new Amazon Neptune DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon Neptune DB instance.</p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>neptune</code> </p>
  ##   ReplicationSourceIdentifier: string
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Neptune User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   DBClusterParameterGroupName: string
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   StorageEncrypted: bool
  ##                   : Specifies whether the DB cluster is encrypted.
  ##   AvailabilityZones: JArray
  ##                    : A list of EC2 Availability Zones that instances in the DB cluster can be created in.
  ##   DatabaseName: string
  ##               : The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Neptune will not create a database in the DB cluster you are creating.
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   PreSignedUrl: string
  ##               : This parameter is not currently supported.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs.
  ##   Tags: JArray
  ##       : The tags to assign to the new DB cluster.
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   Action: string (required)
  ##   CharacterSetName: string
  ##                   : A value that indicates that the DB cluster should be associated with the specified CharacterSet.
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key is not specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon Neptune will use the encryption key used to encrypt the source. Otherwise, Amazon Neptune will use your default encryption key.</p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is true and <code>ReplicationSourceIdentifier</code> is not specified, then Amazon Neptune will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>Example: <code>1.0.1</code> </p>
  ##   Port: int
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>8182</code> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter.</p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Neptune User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   Version: string (required)
  ##   MasterUsername: string
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot be a reserved word for the chosen database engine.</p> </li> </ul>
  var query_773472 = newJObject()
  add(query_773472, "Engine", newJString(Engine))
  add(query_773472, "ReplicationSourceIdentifier",
      newJString(ReplicationSourceIdentifier))
  add(query_773472, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_773472, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_773472, "StorageEncrypted", newJBool(StorageEncrypted))
  if AvailabilityZones != nil:
    query_773472.add "AvailabilityZones", AvailabilityZones
  add(query_773472, "DatabaseName", newJString(DatabaseName))
  add(query_773472, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_773472, "OptionGroupName", newJString(OptionGroupName))
  add(query_773472, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_773472, "PreSignedUrl", newJString(PreSignedUrl))
  add(query_773472, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if VpcSecurityGroupIds != nil:
    query_773472.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if EnableCloudwatchLogsExports != nil:
    query_773472.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  if Tags != nil:
    query_773472.add "Tags", Tags
  add(query_773472, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_773472, "Action", newJString(Action))
  add(query_773472, "CharacterSetName", newJString(CharacterSetName))
  add(query_773472, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_773472, "KmsKeyId", newJString(KmsKeyId))
  add(query_773472, "EngineVersion", newJString(EngineVersion))
  add(query_773472, "Port", newJInt(Port))
  add(query_773472, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_773472, "Version", newJString(Version))
  add(query_773472, "MasterUsername", newJString(MasterUsername))
  result = call_773471.call(nil, query_773472, nil, nil, nil)

var getCreateDBCluster* = Call_GetCreateDBCluster_773435(
    name: "getCreateDBCluster", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=CreateDBCluster", validator: validate_GetCreateDBCluster_773436,
    base: "/", url: url_GetCreateDBCluster_773437,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBClusterParameterGroup_773531 = ref object of OpenApiRestCall_772581
proc url_PostCreateDBClusterParameterGroup_773533(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateDBClusterParameterGroup_773532(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <a>ModifyDBClusterParameterGroup</a>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <a>ModifyDBCluster</a>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect.</p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon Neptune console</a> or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773534 = query.getOrDefault("Action")
  valid_773534 = validateParameter(valid_773534, JString, required = true, default = newJString(
      "CreateDBClusterParameterGroup"))
  if valid_773534 != nil:
    section.add "Action", valid_773534
  var valid_773535 = query.getOrDefault("Version")
  valid_773535 = validateParameter(valid_773535, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773535 != nil:
    section.add "Version", valid_773535
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773536 = header.getOrDefault("X-Amz-Date")
  valid_773536 = validateParameter(valid_773536, JString, required = false,
                                 default = nil)
  if valid_773536 != nil:
    section.add "X-Amz-Date", valid_773536
  var valid_773537 = header.getOrDefault("X-Amz-Security-Token")
  valid_773537 = validateParameter(valid_773537, JString, required = false,
                                 default = nil)
  if valid_773537 != nil:
    section.add "X-Amz-Security-Token", valid_773537
  var valid_773538 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773538 = validateParameter(valid_773538, JString, required = false,
                                 default = nil)
  if valid_773538 != nil:
    section.add "X-Amz-Content-Sha256", valid_773538
  var valid_773539 = header.getOrDefault("X-Amz-Algorithm")
  valid_773539 = validateParameter(valid_773539, JString, required = false,
                                 default = nil)
  if valid_773539 != nil:
    section.add "X-Amz-Algorithm", valid_773539
  var valid_773540 = header.getOrDefault("X-Amz-Signature")
  valid_773540 = validateParameter(valid_773540, JString, required = false,
                                 default = nil)
  if valid_773540 != nil:
    section.add "X-Amz-Signature", valid_773540
  var valid_773541 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773541 = validateParameter(valid_773541, JString, required = false,
                                 default = nil)
  if valid_773541 != nil:
    section.add "X-Amz-SignedHeaders", valid_773541
  var valid_773542 = header.getOrDefault("X-Amz-Credential")
  valid_773542 = validateParameter(valid_773542, JString, required = false,
                                 default = nil)
  if valid_773542 != nil:
    section.add "X-Amz-Credential", valid_773542
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB cluster parameter group.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DBClusterParameterGroup.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.
  ##   Description: JString (required)
  ##              : The description for the DB cluster parameter group.
  section = newJObject()
  var valid_773543 = formData.getOrDefault("Tags")
  valid_773543 = validateParameter(valid_773543, JArray, required = false,
                                 default = nil)
  if valid_773543 != nil:
    section.add "Tags", valid_773543
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_773544 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_773544 = validateParameter(valid_773544, JString, required = true,
                                 default = nil)
  if valid_773544 != nil:
    section.add "DBClusterParameterGroupName", valid_773544
  var valid_773545 = formData.getOrDefault("DBParameterGroupFamily")
  valid_773545 = validateParameter(valid_773545, JString, required = true,
                                 default = nil)
  if valid_773545 != nil:
    section.add "DBParameterGroupFamily", valid_773545
  var valid_773546 = formData.getOrDefault("Description")
  valid_773546 = validateParameter(valid_773546, JString, required = true,
                                 default = nil)
  if valid_773546 != nil:
    section.add "Description", valid_773546
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773547: Call_PostCreateDBClusterParameterGroup_773531;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <a>ModifyDBClusterParameterGroup</a>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <a>ModifyDBCluster</a>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect.</p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon Neptune console</a> or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_773547.validator(path, query, header, formData, body)
  let scheme = call_773547.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773547.url(scheme.get, call_773547.host, call_773547.base,
                         call_773547.route, valid.getOrDefault("path"))
  result = hook(call_773547, url, valid)

proc call*(call_773548: Call_PostCreateDBClusterParameterGroup_773531;
          DBClusterParameterGroupName: string; DBParameterGroupFamily: string;
          Description: string; Tags: JsonNode = nil;
          Action: string = "CreateDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBClusterParameterGroup
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <a>ModifyDBClusterParameterGroup</a>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <a>ModifyDBCluster</a>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect.</p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon Neptune console</a> or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB cluster parameter group.
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DBClusterParameterGroup.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   DBParameterGroupFamily: string (required)
  ##                         : The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.
  ##   Version: string (required)
  ##   Description: string (required)
  ##              : The description for the DB cluster parameter group.
  var query_773549 = newJObject()
  var formData_773550 = newJObject()
  if Tags != nil:
    formData_773550.add "Tags", Tags
  add(query_773549, "Action", newJString(Action))
  add(formData_773550, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(formData_773550, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  add(query_773549, "Version", newJString(Version))
  add(formData_773550, "Description", newJString(Description))
  result = call_773548.call(nil, query_773549, nil, formData_773550, nil)

var postCreateDBClusterParameterGroup* = Call_PostCreateDBClusterParameterGroup_773531(
    name: "postCreateDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterParameterGroup",
    validator: validate_PostCreateDBClusterParameterGroup_773532, base: "/",
    url: url_PostCreateDBClusterParameterGroup_773533,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBClusterParameterGroup_773512 = ref object of OpenApiRestCall_772581
proc url_GetCreateDBClusterParameterGroup_773514(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateDBClusterParameterGroup_773513(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <a>ModifyDBClusterParameterGroup</a>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <a>ModifyDBCluster</a>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect.</p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon Neptune console</a> or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DBClusterParameterGroup.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Description: JString (required)
  ##              : The description for the DB cluster parameter group.
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB cluster parameter group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_773515 = query.getOrDefault("DBClusterParameterGroupName")
  valid_773515 = validateParameter(valid_773515, JString, required = true,
                                 default = nil)
  if valid_773515 != nil:
    section.add "DBClusterParameterGroupName", valid_773515
  var valid_773516 = query.getOrDefault("Description")
  valid_773516 = validateParameter(valid_773516, JString, required = true,
                                 default = nil)
  if valid_773516 != nil:
    section.add "Description", valid_773516
  var valid_773517 = query.getOrDefault("DBParameterGroupFamily")
  valid_773517 = validateParameter(valid_773517, JString, required = true,
                                 default = nil)
  if valid_773517 != nil:
    section.add "DBParameterGroupFamily", valid_773517
  var valid_773518 = query.getOrDefault("Tags")
  valid_773518 = validateParameter(valid_773518, JArray, required = false,
                                 default = nil)
  if valid_773518 != nil:
    section.add "Tags", valid_773518
  var valid_773519 = query.getOrDefault("Action")
  valid_773519 = validateParameter(valid_773519, JString, required = true, default = newJString(
      "CreateDBClusterParameterGroup"))
  if valid_773519 != nil:
    section.add "Action", valid_773519
  var valid_773520 = query.getOrDefault("Version")
  valid_773520 = validateParameter(valid_773520, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773520 != nil:
    section.add "Version", valid_773520
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773521 = header.getOrDefault("X-Amz-Date")
  valid_773521 = validateParameter(valid_773521, JString, required = false,
                                 default = nil)
  if valid_773521 != nil:
    section.add "X-Amz-Date", valid_773521
  var valid_773522 = header.getOrDefault("X-Amz-Security-Token")
  valid_773522 = validateParameter(valid_773522, JString, required = false,
                                 default = nil)
  if valid_773522 != nil:
    section.add "X-Amz-Security-Token", valid_773522
  var valid_773523 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773523 = validateParameter(valid_773523, JString, required = false,
                                 default = nil)
  if valid_773523 != nil:
    section.add "X-Amz-Content-Sha256", valid_773523
  var valid_773524 = header.getOrDefault("X-Amz-Algorithm")
  valid_773524 = validateParameter(valid_773524, JString, required = false,
                                 default = nil)
  if valid_773524 != nil:
    section.add "X-Amz-Algorithm", valid_773524
  var valid_773525 = header.getOrDefault("X-Amz-Signature")
  valid_773525 = validateParameter(valid_773525, JString, required = false,
                                 default = nil)
  if valid_773525 != nil:
    section.add "X-Amz-Signature", valid_773525
  var valid_773526 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773526 = validateParameter(valid_773526, JString, required = false,
                                 default = nil)
  if valid_773526 != nil:
    section.add "X-Amz-SignedHeaders", valid_773526
  var valid_773527 = header.getOrDefault("X-Amz-Credential")
  valid_773527 = validateParameter(valid_773527, JString, required = false,
                                 default = nil)
  if valid_773527 != nil:
    section.add "X-Amz-Credential", valid_773527
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773528: Call_GetCreateDBClusterParameterGroup_773512;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <a>ModifyDBClusterParameterGroup</a>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <a>ModifyDBCluster</a>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect.</p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon Neptune console</a> or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_773528.validator(path, query, header, formData, body)
  let scheme = call_773528.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773528.url(scheme.get, call_773528.host, call_773528.base,
                         call_773528.route, valid.getOrDefault("path"))
  result = hook(call_773528, url, valid)

proc call*(call_773529: Call_GetCreateDBClusterParameterGroup_773512;
          DBClusterParameterGroupName: string; Description: string;
          DBParameterGroupFamily: string; Tags: JsonNode = nil;
          Action: string = "CreateDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBClusterParameterGroup
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <a>ModifyDBClusterParameterGroup</a>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <a>ModifyDBCluster</a>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect.</p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon Neptune console</a> or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DBClusterParameterGroup.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Description: string (required)
  ##              : The description for the DB cluster parameter group.
  ##   DBParameterGroupFamily: string (required)
  ##                         : The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB cluster parameter group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773530 = newJObject()
  add(query_773530, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_773530, "Description", newJString(Description))
  add(query_773530, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  if Tags != nil:
    query_773530.add "Tags", Tags
  add(query_773530, "Action", newJString(Action))
  add(query_773530, "Version", newJString(Version))
  result = call_773529.call(nil, query_773530, nil, nil, nil)

var getCreateDBClusterParameterGroup* = Call_GetCreateDBClusterParameterGroup_773512(
    name: "getCreateDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterParameterGroup",
    validator: validate_GetCreateDBClusterParameterGroup_773513, base: "/",
    url: url_GetCreateDBClusterParameterGroup_773514,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBClusterSnapshot_773569 = ref object of OpenApiRestCall_772581
proc url_PostCreateDBClusterSnapshot_773571(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateDBClusterSnapshot_773570(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a snapshot of a DB cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773572 = query.getOrDefault("Action")
  valid_773572 = validateParameter(valid_773572, JString, required = true, default = newJString(
      "CreateDBClusterSnapshot"))
  if valid_773572 != nil:
    section.add "Action", valid_773572
  var valid_773573 = query.getOrDefault("Version")
  valid_773573 = validateParameter(valid_773573, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773573 != nil:
    section.add "Version", valid_773573
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773574 = header.getOrDefault("X-Amz-Date")
  valid_773574 = validateParameter(valid_773574, JString, required = false,
                                 default = nil)
  if valid_773574 != nil:
    section.add "X-Amz-Date", valid_773574
  var valid_773575 = header.getOrDefault("X-Amz-Security-Token")
  valid_773575 = validateParameter(valid_773575, JString, required = false,
                                 default = nil)
  if valid_773575 != nil:
    section.add "X-Amz-Security-Token", valid_773575
  var valid_773576 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773576 = validateParameter(valid_773576, JString, required = false,
                                 default = nil)
  if valid_773576 != nil:
    section.add "X-Amz-Content-Sha256", valid_773576
  var valid_773577 = header.getOrDefault("X-Amz-Algorithm")
  valid_773577 = validateParameter(valid_773577, JString, required = false,
                                 default = nil)
  if valid_773577 != nil:
    section.add "X-Amz-Algorithm", valid_773577
  var valid_773578 = header.getOrDefault("X-Amz-Signature")
  valid_773578 = validateParameter(valid_773578, JString, required = false,
                                 default = nil)
  if valid_773578 != nil:
    section.add "X-Amz-Signature", valid_773578
  var valid_773579 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773579 = validateParameter(valid_773579, JString, required = false,
                                 default = nil)
  if valid_773579 != nil:
    section.add "X-Amz-SignedHeaders", valid_773579
  var valid_773580 = header.getOrDefault("X-Amz-Credential")
  valid_773580 = validateParameter(valid_773580, JString, required = false,
                                 default = nil)
  if valid_773580 != nil:
    section.add "X-Amz-Credential", valid_773580
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : The tags to be assigned to the DB cluster snapshot.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_773581 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_773581 = validateParameter(valid_773581, JString, required = true,
                                 default = nil)
  if valid_773581 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_773581
  var valid_773582 = formData.getOrDefault("Tags")
  valid_773582 = validateParameter(valid_773582, JArray, required = false,
                                 default = nil)
  if valid_773582 != nil:
    section.add "Tags", valid_773582
  var valid_773583 = formData.getOrDefault("DBClusterIdentifier")
  valid_773583 = validateParameter(valid_773583, JString, required = true,
                                 default = nil)
  if valid_773583 != nil:
    section.add "DBClusterIdentifier", valid_773583
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773584: Call_PostCreateDBClusterSnapshot_773569; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a snapshot of a DB cluster.
  ## 
  let valid = call_773584.validator(path, query, header, formData, body)
  let scheme = call_773584.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773584.url(scheme.get, call_773584.host, call_773584.base,
                         call_773584.route, valid.getOrDefault("path"))
  result = hook(call_773584, url, valid)

proc call*(call_773585: Call_PostCreateDBClusterSnapshot_773569;
          DBClusterSnapshotIdentifier: string; DBClusterIdentifier: string;
          Tags: JsonNode = nil; Action: string = "CreateDBClusterSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBClusterSnapshot
  ## Creates a snapshot of a DB cluster.
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : The tags to be assigned to the DB cluster snapshot.
  ##   Action: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   Version: string (required)
  var query_773586 = newJObject()
  var formData_773587 = newJObject()
  add(formData_773587, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  if Tags != nil:
    formData_773587.add "Tags", Tags
  add(query_773586, "Action", newJString(Action))
  add(formData_773587, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_773586, "Version", newJString(Version))
  result = call_773585.call(nil, query_773586, nil, formData_773587, nil)

var postCreateDBClusterSnapshot* = Call_PostCreateDBClusterSnapshot_773569(
    name: "postCreateDBClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterSnapshot",
    validator: validate_PostCreateDBClusterSnapshot_773570, base: "/",
    url: url_PostCreateDBClusterSnapshot_773571,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBClusterSnapshot_773551 = ref object of OpenApiRestCall_772581
proc url_GetCreateDBClusterSnapshot_773553(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateDBClusterSnapshot_773552(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a snapshot of a DB cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : The tags to be assigned to the DB cluster snapshot.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_773554 = query.getOrDefault("DBClusterIdentifier")
  valid_773554 = validateParameter(valid_773554, JString, required = true,
                                 default = nil)
  if valid_773554 != nil:
    section.add "DBClusterIdentifier", valid_773554
  var valid_773555 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_773555 = validateParameter(valid_773555, JString, required = true,
                                 default = nil)
  if valid_773555 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_773555
  var valid_773556 = query.getOrDefault("Tags")
  valid_773556 = validateParameter(valid_773556, JArray, required = false,
                                 default = nil)
  if valid_773556 != nil:
    section.add "Tags", valid_773556
  var valid_773557 = query.getOrDefault("Action")
  valid_773557 = validateParameter(valid_773557, JString, required = true, default = newJString(
      "CreateDBClusterSnapshot"))
  if valid_773557 != nil:
    section.add "Action", valid_773557
  var valid_773558 = query.getOrDefault("Version")
  valid_773558 = validateParameter(valid_773558, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773558 != nil:
    section.add "Version", valid_773558
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773559 = header.getOrDefault("X-Amz-Date")
  valid_773559 = validateParameter(valid_773559, JString, required = false,
                                 default = nil)
  if valid_773559 != nil:
    section.add "X-Amz-Date", valid_773559
  var valid_773560 = header.getOrDefault("X-Amz-Security-Token")
  valid_773560 = validateParameter(valid_773560, JString, required = false,
                                 default = nil)
  if valid_773560 != nil:
    section.add "X-Amz-Security-Token", valid_773560
  var valid_773561 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773561 = validateParameter(valid_773561, JString, required = false,
                                 default = nil)
  if valid_773561 != nil:
    section.add "X-Amz-Content-Sha256", valid_773561
  var valid_773562 = header.getOrDefault("X-Amz-Algorithm")
  valid_773562 = validateParameter(valid_773562, JString, required = false,
                                 default = nil)
  if valid_773562 != nil:
    section.add "X-Amz-Algorithm", valid_773562
  var valid_773563 = header.getOrDefault("X-Amz-Signature")
  valid_773563 = validateParameter(valid_773563, JString, required = false,
                                 default = nil)
  if valid_773563 != nil:
    section.add "X-Amz-Signature", valid_773563
  var valid_773564 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773564 = validateParameter(valid_773564, JString, required = false,
                                 default = nil)
  if valid_773564 != nil:
    section.add "X-Amz-SignedHeaders", valid_773564
  var valid_773565 = header.getOrDefault("X-Amz-Credential")
  valid_773565 = validateParameter(valid_773565, JString, required = false,
                                 default = nil)
  if valid_773565 != nil:
    section.add "X-Amz-Credential", valid_773565
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773566: Call_GetCreateDBClusterSnapshot_773551; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a snapshot of a DB cluster.
  ## 
  let valid = call_773566.validator(path, query, header, formData, body)
  let scheme = call_773566.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773566.url(scheme.get, call_773566.host, call_773566.base,
                         call_773566.route, valid.getOrDefault("path"))
  result = hook(call_773566, url, valid)

proc call*(call_773567: Call_GetCreateDBClusterSnapshot_773551;
          DBClusterIdentifier: string; DBClusterSnapshotIdentifier: string;
          Tags: JsonNode = nil; Action: string = "CreateDBClusterSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBClusterSnapshot
  ## Creates a snapshot of a DB cluster.
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : The tags to be assigned to the DB cluster snapshot.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773568 = newJObject()
  add(query_773568, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_773568, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  if Tags != nil:
    query_773568.add "Tags", Tags
  add(query_773568, "Action", newJString(Action))
  add(query_773568, "Version", newJString(Version))
  result = call_773567.call(nil, query_773568, nil, nil, nil)

var getCreateDBClusterSnapshot* = Call_GetCreateDBClusterSnapshot_773551(
    name: "getCreateDBClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterSnapshot",
    validator: validate_GetCreateDBClusterSnapshot_773552, base: "/",
    url: url_GetCreateDBClusterSnapshot_773553,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBInstance_773663 = ref object of OpenApiRestCall_772581
proc url_PostCreateDBInstance_773665(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateDBInstance_773664(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773666 = query.getOrDefault("Action")
  valid_773666 = validateParameter(valid_773666, JString, required = true,
                                 default = newJString("CreateDBInstance"))
  if valid_773666 != nil:
    section.add "Action", valid_773666
  var valid_773667 = query.getOrDefault("Version")
  valid_773667 = validateParameter(valid_773667, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773667 != nil:
    section.add "Version", valid_773667
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773668 = header.getOrDefault("X-Amz-Date")
  valid_773668 = validateParameter(valid_773668, JString, required = false,
                                 default = nil)
  if valid_773668 != nil:
    section.add "X-Amz-Date", valid_773668
  var valid_773669 = header.getOrDefault("X-Amz-Security-Token")
  valid_773669 = validateParameter(valid_773669, JString, required = false,
                                 default = nil)
  if valid_773669 != nil:
    section.add "X-Amz-Security-Token", valid_773669
  var valid_773670 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773670 = validateParameter(valid_773670, JString, required = false,
                                 default = nil)
  if valid_773670 != nil:
    section.add "X-Amz-Content-Sha256", valid_773670
  var valid_773671 = header.getOrDefault("X-Amz-Algorithm")
  valid_773671 = validateParameter(valid_773671, JString, required = false,
                                 default = nil)
  if valid_773671 != nil:
    section.add "X-Amz-Algorithm", valid_773671
  var valid_773672 = header.getOrDefault("X-Amz-Signature")
  valid_773672 = validateParameter(valid_773672, JString, required = false,
                                 default = nil)
  if valid_773672 != nil:
    section.add "X-Amz-Signature", valid_773672
  var valid_773673 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773673 = validateParameter(valid_773673, JString, required = false,
                                 default = nil)
  if valid_773673 != nil:
    section.add "X-Amz-SignedHeaders", valid_773673
  var valid_773674 = header.getOrDefault("X-Amz-Credential")
  valid_773674 = validateParameter(valid_773674, JString, required = false,
                                 default = nil)
  if valid_773674 != nil:
    section.add "X-Amz-Credential", valid_773674
  result.add "header", section
  ## parameters in `formData` object:
  ##   EnablePerformanceInsights: JBool
  ##                            : True to enable Performance Insights for the DB instance, and otherwise false.
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance.</p> <p>Valid Values: <code>neptune</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to associate with this DB instance.</p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   Iops: JInt
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Cannot be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   Tags: JArray
  ##       : The tags to assign to the new instance.
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   MultiAZ: JBool
  ##          : Specifies if the DB instance is a Multi-AZ deployment. You can't set the AvailabilityZone parameter if the MultiAZ parameter is set to true.
  ##   PubliclyAccessible: JBool
  ##                     : This flag should no longer be used.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p>Not applicable. Storage is managed by the DB Cluster.</p>
  ##   Timezone: JString
  ##           : The time zone of the DB instance.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs.
  ##   CharacterSetName: JString
  ##                   : <p>Indicates that the DB instance should be associated with the specified CharacterSet.</p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p>
  ##   Domain: JString
  ##         : Specify the Active Directory Domain to create the instance in.
  ##   LicenseModel: JString
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>If the <code>StorageEncrypted</code> parameter is true, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon Neptune will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   StorageEncrypted: JBool
  ##                   : <p>Specifies whether the DB instance is encrypted.</p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: false</p>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The identifier of the DB cluster that the instance will belong to.</p> <p>For information on creating a DB cluster, see <a>CreateDBCluster</a>.</p> <p>Type: String</p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p>Not applicable. The port is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p> Default: <code>8182</code> </p> <p>Type: Integer</p>
  ##   DBName: JString
  ##         : Not supported.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   OptionGroupName: JString
  ##                  : <p>Indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If this argument is omitted, the default DBParameterGroup for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Not used.</p>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   AvailabilityZone: JString
  ##                   : <p> The EC2 Availability Zone that the DB instance is created in</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The AvailabilityZone parameter can't be specified if the MultiAZ parameter is set to <code>true</code>. The specified Availability Zone must be in the same AWS Region as the current endpoint.</p>
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   AllocatedStorage: JInt
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p>Not applicable. Neptune cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in a Neptune cluster volume.</p>
  ##   MasterUsername: JString
  ##                 : The name for the master user. Not used.
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which an Read Replica is promoted to the primary instance after a failure of the existing primary instance. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   DBInstanceClass: JString (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable AWS Identity and Access Management (IAM) authentication for Neptune.</p> <p>Default: <code>false</code> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created.</p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : <p>Indicates that minor engine upgrades are applied automatically to the DB instance during the maintenance window.</p> <p>Default: <code>true</code> </p>
  ##   EngineVersion: JString
  ##                : The version number of the database engine to use.
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.</p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  section = newJObject()
  var valid_773675 = formData.getOrDefault("EnablePerformanceInsights")
  valid_773675 = validateParameter(valid_773675, JBool, required = false, default = nil)
  if valid_773675 != nil:
    section.add "EnablePerformanceInsights", valid_773675
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_773676 = formData.getOrDefault("Engine")
  valid_773676 = validateParameter(valid_773676, JString, required = true,
                                 default = nil)
  if valid_773676 != nil:
    section.add "Engine", valid_773676
  var valid_773677 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_773677 = validateParameter(valid_773677, JArray, required = false,
                                 default = nil)
  if valid_773677 != nil:
    section.add "VpcSecurityGroupIds", valid_773677
  var valid_773678 = formData.getOrDefault("Iops")
  valid_773678 = validateParameter(valid_773678, JInt, required = false, default = nil)
  if valid_773678 != nil:
    section.add "Iops", valid_773678
  var valid_773679 = formData.getOrDefault("BackupRetentionPeriod")
  valid_773679 = validateParameter(valid_773679, JInt, required = false, default = nil)
  if valid_773679 != nil:
    section.add "BackupRetentionPeriod", valid_773679
  var valid_773680 = formData.getOrDefault("Tags")
  valid_773680 = validateParameter(valid_773680, JArray, required = false,
                                 default = nil)
  if valid_773680 != nil:
    section.add "Tags", valid_773680
  var valid_773681 = formData.getOrDefault("TdeCredentialArn")
  valid_773681 = validateParameter(valid_773681, JString, required = false,
                                 default = nil)
  if valid_773681 != nil:
    section.add "TdeCredentialArn", valid_773681
  var valid_773682 = formData.getOrDefault("DBSubnetGroupName")
  valid_773682 = validateParameter(valid_773682, JString, required = false,
                                 default = nil)
  if valid_773682 != nil:
    section.add "DBSubnetGroupName", valid_773682
  var valid_773683 = formData.getOrDefault("MultiAZ")
  valid_773683 = validateParameter(valid_773683, JBool, required = false, default = nil)
  if valid_773683 != nil:
    section.add "MultiAZ", valid_773683
  var valid_773684 = formData.getOrDefault("PubliclyAccessible")
  valid_773684 = validateParameter(valid_773684, JBool, required = false, default = nil)
  if valid_773684 != nil:
    section.add "PubliclyAccessible", valid_773684
  var valid_773685 = formData.getOrDefault("StorageType")
  valid_773685 = validateParameter(valid_773685, JString, required = false,
                                 default = nil)
  if valid_773685 != nil:
    section.add "StorageType", valid_773685
  var valid_773686 = formData.getOrDefault("Timezone")
  valid_773686 = validateParameter(valid_773686, JString, required = false,
                                 default = nil)
  if valid_773686 != nil:
    section.add "Timezone", valid_773686
  var valid_773687 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_773687 = validateParameter(valid_773687, JArray, required = false,
                                 default = nil)
  if valid_773687 != nil:
    section.add "EnableCloudwatchLogsExports", valid_773687
  var valid_773688 = formData.getOrDefault("CharacterSetName")
  valid_773688 = validateParameter(valid_773688, JString, required = false,
                                 default = nil)
  if valid_773688 != nil:
    section.add "CharacterSetName", valid_773688
  var valid_773689 = formData.getOrDefault("Domain")
  valid_773689 = validateParameter(valid_773689, JString, required = false,
                                 default = nil)
  if valid_773689 != nil:
    section.add "Domain", valid_773689
  var valid_773690 = formData.getOrDefault("LicenseModel")
  valid_773690 = validateParameter(valid_773690, JString, required = false,
                                 default = nil)
  if valid_773690 != nil:
    section.add "LicenseModel", valid_773690
  var valid_773691 = formData.getOrDefault("KmsKeyId")
  valid_773691 = validateParameter(valid_773691, JString, required = false,
                                 default = nil)
  if valid_773691 != nil:
    section.add "KmsKeyId", valid_773691
  var valid_773692 = formData.getOrDefault("StorageEncrypted")
  valid_773692 = validateParameter(valid_773692, JBool, required = false, default = nil)
  if valid_773692 != nil:
    section.add "StorageEncrypted", valid_773692
  var valid_773693 = formData.getOrDefault("DBClusterIdentifier")
  valid_773693 = validateParameter(valid_773693, JString, required = false,
                                 default = nil)
  if valid_773693 != nil:
    section.add "DBClusterIdentifier", valid_773693
  var valid_773694 = formData.getOrDefault("MonitoringRoleArn")
  valid_773694 = validateParameter(valid_773694, JString, required = false,
                                 default = nil)
  if valid_773694 != nil:
    section.add "MonitoringRoleArn", valid_773694
  var valid_773695 = formData.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_773695 = validateParameter(valid_773695, JString, required = false,
                                 default = nil)
  if valid_773695 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_773695
  var valid_773696 = formData.getOrDefault("DBSecurityGroups")
  valid_773696 = validateParameter(valid_773696, JArray, required = false,
                                 default = nil)
  if valid_773696 != nil:
    section.add "DBSecurityGroups", valid_773696
  var valid_773697 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_773697 = validateParameter(valid_773697, JBool, required = false, default = nil)
  if valid_773697 != nil:
    section.add "CopyTagsToSnapshot", valid_773697
  var valid_773698 = formData.getOrDefault("Port")
  valid_773698 = validateParameter(valid_773698, JInt, required = false, default = nil)
  if valid_773698 != nil:
    section.add "Port", valid_773698
  var valid_773699 = formData.getOrDefault("DBName")
  valid_773699 = validateParameter(valid_773699, JString, required = false,
                                 default = nil)
  if valid_773699 != nil:
    section.add "DBName", valid_773699
  var valid_773700 = formData.getOrDefault("DBInstanceIdentifier")
  valid_773700 = validateParameter(valid_773700, JString, required = true,
                                 default = nil)
  if valid_773700 != nil:
    section.add "DBInstanceIdentifier", valid_773700
  var valid_773701 = formData.getOrDefault("OptionGroupName")
  valid_773701 = validateParameter(valid_773701, JString, required = false,
                                 default = nil)
  if valid_773701 != nil:
    section.add "OptionGroupName", valid_773701
  var valid_773702 = formData.getOrDefault("DBParameterGroupName")
  valid_773702 = validateParameter(valid_773702, JString, required = false,
                                 default = nil)
  if valid_773702 != nil:
    section.add "DBParameterGroupName", valid_773702
  var valid_773703 = formData.getOrDefault("MasterUserPassword")
  valid_773703 = validateParameter(valid_773703, JString, required = false,
                                 default = nil)
  if valid_773703 != nil:
    section.add "MasterUserPassword", valid_773703
  var valid_773704 = formData.getOrDefault("TdeCredentialPassword")
  valid_773704 = validateParameter(valid_773704, JString, required = false,
                                 default = nil)
  if valid_773704 != nil:
    section.add "TdeCredentialPassword", valid_773704
  var valid_773705 = formData.getOrDefault("AvailabilityZone")
  valid_773705 = validateParameter(valid_773705, JString, required = false,
                                 default = nil)
  if valid_773705 != nil:
    section.add "AvailabilityZone", valid_773705
  var valid_773706 = formData.getOrDefault("MonitoringInterval")
  valid_773706 = validateParameter(valid_773706, JInt, required = false, default = nil)
  if valid_773706 != nil:
    section.add "MonitoringInterval", valid_773706
  var valid_773707 = formData.getOrDefault("DomainIAMRoleName")
  valid_773707 = validateParameter(valid_773707, JString, required = false,
                                 default = nil)
  if valid_773707 != nil:
    section.add "DomainIAMRoleName", valid_773707
  var valid_773708 = formData.getOrDefault("AllocatedStorage")
  valid_773708 = validateParameter(valid_773708, JInt, required = false, default = nil)
  if valid_773708 != nil:
    section.add "AllocatedStorage", valid_773708
  var valid_773709 = formData.getOrDefault("MasterUsername")
  valid_773709 = validateParameter(valid_773709, JString, required = false,
                                 default = nil)
  if valid_773709 != nil:
    section.add "MasterUsername", valid_773709
  var valid_773710 = formData.getOrDefault("PromotionTier")
  valid_773710 = validateParameter(valid_773710, JInt, required = false, default = nil)
  if valid_773710 != nil:
    section.add "PromotionTier", valid_773710
  var valid_773711 = formData.getOrDefault("DBInstanceClass")
  valid_773711 = validateParameter(valid_773711, JString, required = true,
                                 default = nil)
  if valid_773711 != nil:
    section.add "DBInstanceClass", valid_773711
  var valid_773712 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_773712 = validateParameter(valid_773712, JBool, required = false, default = nil)
  if valid_773712 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_773712
  var valid_773713 = formData.getOrDefault("PreferredBackupWindow")
  valid_773713 = validateParameter(valid_773713, JString, required = false,
                                 default = nil)
  if valid_773713 != nil:
    section.add "PreferredBackupWindow", valid_773713
  var valid_773714 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_773714 = validateParameter(valid_773714, JBool, required = false, default = nil)
  if valid_773714 != nil:
    section.add "AutoMinorVersionUpgrade", valid_773714
  var valid_773715 = formData.getOrDefault("EngineVersion")
  valid_773715 = validateParameter(valid_773715, JString, required = false,
                                 default = nil)
  if valid_773715 != nil:
    section.add "EngineVersion", valid_773715
  var valid_773716 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_773716 = validateParameter(valid_773716, JString, required = false,
                                 default = nil)
  if valid_773716 != nil:
    section.add "PreferredMaintenanceWindow", valid_773716
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773717: Call_PostCreateDBInstance_773663; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB instance.
  ## 
  let valid = call_773717.validator(path, query, header, formData, body)
  let scheme = call_773717.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773717.url(scheme.get, call_773717.host, call_773717.base,
                         call_773717.route, valid.getOrDefault("path"))
  result = hook(call_773717, url, valid)

proc call*(call_773718: Call_PostCreateDBInstance_773663; Engine: string;
          DBInstanceIdentifier: string; DBInstanceClass: string;
          EnablePerformanceInsights: bool = false;
          VpcSecurityGroupIds: JsonNode = nil; Iops: int = 0;
          BackupRetentionPeriod: int = 0; Tags: JsonNode = nil;
          TdeCredentialArn: string = ""; DBSubnetGroupName: string = "";
          MultiAZ: bool = false; PubliclyAccessible: bool = false;
          StorageType: string = ""; Timezone: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          CharacterSetName: string = ""; Domain: string = ""; LicenseModel: string = "";
          KmsKeyId: string = ""; StorageEncrypted: bool = false;
          DBClusterIdentifier: string = ""; MonitoringRoleArn: string = "";
          PerformanceInsightsKMSKeyId: string = "";
          DBSecurityGroups: JsonNode = nil; CopyTagsToSnapshot: bool = false;
          Port: int = 0; DBName: string = ""; OptionGroupName: string = "";
          DBParameterGroupName: string = ""; MasterUserPassword: string = "";
          TdeCredentialPassword: string = ""; AvailabilityZone: string = "";
          MonitoringInterval: int = 0; DomainIAMRoleName: string = "";
          Action: string = "CreateDBInstance"; AllocatedStorage: int = 0;
          MasterUsername: string = ""; PromotionTier: int = 0;
          EnableIAMDatabaseAuthentication: bool = false;
          PreferredBackupWindow: string = ""; AutoMinorVersionUpgrade: bool = false;
          EngineVersion: string = ""; Version: string = "2014-10-31";
          PreferredMaintenanceWindow: string = ""): Recallable =
  ## postCreateDBInstance
  ## Creates a new DB instance.
  ##   EnablePerformanceInsights: bool
  ##                            : True to enable Performance Insights for the DB instance, and otherwise false.
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance.</p> <p>Valid Values: <code>neptune</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to associate with this DB instance.</p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   Iops: int
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Cannot be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   Tags: JArray
  ##       : The tags to assign to the new instance.
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   MultiAZ: bool
  ##          : Specifies if the DB instance is a Multi-AZ deployment. You can't set the AvailabilityZone parameter if the MultiAZ parameter is set to true.
  ##   PubliclyAccessible: bool
  ##                     : This flag should no longer be used.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p>Not applicable. Storage is managed by the DB Cluster.</p>
  ##   Timezone: string
  ##           : The time zone of the DB instance.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs.
  ##   CharacterSetName: string
  ##                   : <p>Indicates that the DB instance should be associated with the specified CharacterSet.</p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p>
  ##   Domain: string
  ##         : Specify the Active Directory Domain to create the instance in.
  ##   LicenseModel: string
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>If the <code>StorageEncrypted</code> parameter is true, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon Neptune will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   StorageEncrypted: bool
  ##                   : <p>Specifies whether the DB instance is encrypted.</p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: false</p>
  ##   DBClusterIdentifier: string
  ##                      : <p>The identifier of the DB cluster that the instance will belong to.</p> <p>For information on creating a DB cluster, see <a>CreateDBCluster</a>.</p> <p>Type: String</p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   CopyTagsToSnapshot: bool
  ##                     : True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p>Not applicable. The port is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p> Default: <code>8182</code> </p> <p>Type: Integer</p>
  ##   DBName: string
  ##         : Not supported.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   OptionGroupName: string
  ##                  : <p>Indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If this argument is omitted, the default DBParameterGroup for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Not used.</p>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   AvailabilityZone: string
  ##                   : <p> The EC2 Availability Zone that the DB instance is created in</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The AvailabilityZone parameter can't be specified if the MultiAZ parameter is set to <code>true</code>. The specified Availability Zone must be in the same AWS Region as the current endpoint.</p>
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   Action: string (required)
  ##   AllocatedStorage: int
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p>Not applicable. Neptune cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in a Neptune cluster volume.</p>
  ##   MasterUsername: string
  ##                 : The name for the master user. Not used.
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which an Read Replica is promoted to the primary instance after a failure of the existing primary instance. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   DBInstanceClass: string (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable AWS Identity and Access Management (IAM) authentication for Neptune.</p> <p>Default: <code>false</code> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created.</p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : <p>Indicates that minor engine upgrades are applied automatically to the DB instance during the maintenance window.</p> <p>Default: <code>true</code> </p>
  ##   EngineVersion: string
  ##                : The version number of the database engine to use.
  ##   Version: string (required)
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.</p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  var query_773719 = newJObject()
  var formData_773720 = newJObject()
  add(formData_773720, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(formData_773720, "Engine", newJString(Engine))
  if VpcSecurityGroupIds != nil:
    formData_773720.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_773720, "Iops", newJInt(Iops))
  add(formData_773720, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  if Tags != nil:
    formData_773720.add "Tags", Tags
  add(formData_773720, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(formData_773720, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_773720, "MultiAZ", newJBool(MultiAZ))
  add(formData_773720, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_773720, "StorageType", newJString(StorageType))
  add(formData_773720, "Timezone", newJString(Timezone))
  if EnableCloudwatchLogsExports != nil:
    formData_773720.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_773720, "CharacterSetName", newJString(CharacterSetName))
  add(formData_773720, "Domain", newJString(Domain))
  add(formData_773720, "LicenseModel", newJString(LicenseModel))
  add(formData_773720, "KmsKeyId", newJString(KmsKeyId))
  add(formData_773720, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_773720, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_773720, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(formData_773720, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  if DBSecurityGroups != nil:
    formData_773720.add "DBSecurityGroups", DBSecurityGroups
  add(formData_773720, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_773720, "Port", newJInt(Port))
  add(formData_773720, "DBName", newJString(DBName))
  add(formData_773720, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_773720, "OptionGroupName", newJString(OptionGroupName))
  add(formData_773720, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_773720, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_773720, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(formData_773720, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_773720, "MonitoringInterval", newJInt(MonitoringInterval))
  add(formData_773720, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(query_773719, "Action", newJString(Action))
  add(formData_773720, "AllocatedStorage", newJInt(AllocatedStorage))
  add(formData_773720, "MasterUsername", newJString(MasterUsername))
  add(formData_773720, "PromotionTier", newJInt(PromotionTier))
  add(formData_773720, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_773720, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_773720, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_773720, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_773720, "EngineVersion", newJString(EngineVersion))
  add(query_773719, "Version", newJString(Version))
  add(formData_773720, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  result = call_773718.call(nil, query_773719, nil, formData_773720, nil)

var postCreateDBInstance* = Call_PostCreateDBInstance_773663(
    name: "postCreateDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBInstance",
    validator: validate_PostCreateDBInstance_773664, base: "/",
    url: url_PostCreateDBInstance_773665, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBInstance_773588 = ref object of OpenApiRestCall_772581
proc url_GetCreateDBInstance_773590(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateDBInstance_773589(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Creates a new DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance.</p> <p>Valid Values: <code>neptune</code> </p>
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which an Read Replica is promoted to the primary instance after a failure of the existing primary instance. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   StorageEncrypted: JBool
  ##                   : <p>Specifies whether the DB instance is encrypted.</p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: false</p>
  ##   AllocatedStorage: JInt
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p>Not applicable. Neptune cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in a Neptune cluster volume.</p>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p>Not applicable. Storage is managed by the DB Cluster.</p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable AWS Identity and Access Management (IAM) authentication for Neptune.</p> <p>Default: <code>false</code> </p>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The identifier of the DB cluster that the instance will belong to.</p> <p>For information on creating a DB cluster, see <a>CreateDBCluster</a>.</p> <p>Type: String</p>
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Not used.</p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   MultiAZ: JBool
  ##          : Specifies if the DB instance is a Multi-AZ deployment. You can't set the AvailabilityZone parameter if the MultiAZ parameter is set to true.
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Cannot be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   DBName: JString
  ##         : Not supported.
  ##   CopyTagsToSnapshot: JBool
  ##                     : True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>If the <code>StorageEncrypted</code> parameter is true, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon Neptune will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   Domain: JString
  ##         : Specify the Active Directory Domain to create the instance in.
  ##   EngineVersion: JString
  ##                : The version number of the database engine to use.
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created.</p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   MasterUsername: JString
  ##                 : The name for the master user. Not used.
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.</p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   OptionGroupName: JString
  ##                  : <p>Indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   AvailabilityZone: JString
  ##                   : <p> The EC2 Availability Zone that the DB instance is created in</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The AvailabilityZone parameter can't be specified if the MultiAZ parameter is set to <code>true</code>. The specified Availability Zone must be in the same AWS Region as the current endpoint.</p>
  ##   Iops: JInt
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to associate with this DB instance.</p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs.
  ##   LicenseModel: JString
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : The tags to assign to the new instance.
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If this argument is omitted, the default DBParameterGroup for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DBInstanceClass: JString (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions.
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.
  ##   Action: JString (required)
  ##   CharacterSetName: JString
  ##                   : <p>Indicates that the DB instance should be associated with the specified CharacterSet.</p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PubliclyAccessible: JBool
  ##                     : This flag should no longer be used.
  ##   Timezone: JString
  ##           : The time zone of the DB instance.
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : <p>Indicates that minor engine upgrades are applied automatically to the DB instance during the maintenance window.</p> <p>Default: <code>true</code> </p>
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p>Not applicable. The port is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p> Default: <code>8182</code> </p> <p>Type: Integer</p>
  ##   EnablePerformanceInsights: JBool
  ##                            : True to enable Performance Insights for the DB instance, and otherwise false.
  ##   Version: JString (required)
  section = newJObject()
  var valid_773609 = query.getOrDefault("MonitoringInterval")
  valid_773609 = validateParameter(valid_773609, JInt, required = false, default = nil)
  if valid_773609 != nil:
    section.add "MonitoringInterval", valid_773609
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_773610 = query.getOrDefault("Engine")
  valid_773610 = validateParameter(valid_773610, JString, required = true,
                                 default = nil)
  if valid_773610 != nil:
    section.add "Engine", valid_773610
  var valid_773611 = query.getOrDefault("PromotionTier")
  valid_773611 = validateParameter(valid_773611, JInt, required = false, default = nil)
  if valid_773611 != nil:
    section.add "PromotionTier", valid_773611
  var valid_773612 = query.getOrDefault("StorageEncrypted")
  valid_773612 = validateParameter(valid_773612, JBool, required = false, default = nil)
  if valid_773612 != nil:
    section.add "StorageEncrypted", valid_773612
  var valid_773613 = query.getOrDefault("AllocatedStorage")
  valid_773613 = validateParameter(valid_773613, JInt, required = false, default = nil)
  if valid_773613 != nil:
    section.add "AllocatedStorage", valid_773613
  var valid_773614 = query.getOrDefault("StorageType")
  valid_773614 = validateParameter(valid_773614, JString, required = false,
                                 default = nil)
  if valid_773614 != nil:
    section.add "StorageType", valid_773614
  var valid_773615 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_773615 = validateParameter(valid_773615, JBool, required = false, default = nil)
  if valid_773615 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_773615
  var valid_773616 = query.getOrDefault("DBClusterIdentifier")
  valid_773616 = validateParameter(valid_773616, JString, required = false,
                                 default = nil)
  if valid_773616 != nil:
    section.add "DBClusterIdentifier", valid_773616
  var valid_773617 = query.getOrDefault("DBSecurityGroups")
  valid_773617 = validateParameter(valid_773617, JArray, required = false,
                                 default = nil)
  if valid_773617 != nil:
    section.add "DBSecurityGroups", valid_773617
  var valid_773618 = query.getOrDefault("MasterUserPassword")
  valid_773618 = validateParameter(valid_773618, JString, required = false,
                                 default = nil)
  if valid_773618 != nil:
    section.add "MasterUserPassword", valid_773618
  var valid_773619 = query.getOrDefault("MonitoringRoleArn")
  valid_773619 = validateParameter(valid_773619, JString, required = false,
                                 default = nil)
  if valid_773619 != nil:
    section.add "MonitoringRoleArn", valid_773619
  var valid_773620 = query.getOrDefault("MultiAZ")
  valid_773620 = validateParameter(valid_773620, JBool, required = false, default = nil)
  if valid_773620 != nil:
    section.add "MultiAZ", valid_773620
  var valid_773621 = query.getOrDefault("TdeCredentialPassword")
  valid_773621 = validateParameter(valid_773621, JString, required = false,
                                 default = nil)
  if valid_773621 != nil:
    section.add "TdeCredentialPassword", valid_773621
  var valid_773622 = query.getOrDefault("DomainIAMRoleName")
  valid_773622 = validateParameter(valid_773622, JString, required = false,
                                 default = nil)
  if valid_773622 != nil:
    section.add "DomainIAMRoleName", valid_773622
  var valid_773623 = query.getOrDefault("BackupRetentionPeriod")
  valid_773623 = validateParameter(valid_773623, JInt, required = false, default = nil)
  if valid_773623 != nil:
    section.add "BackupRetentionPeriod", valid_773623
  var valid_773624 = query.getOrDefault("DBName")
  valid_773624 = validateParameter(valid_773624, JString, required = false,
                                 default = nil)
  if valid_773624 != nil:
    section.add "DBName", valid_773624
  var valid_773625 = query.getOrDefault("CopyTagsToSnapshot")
  valid_773625 = validateParameter(valid_773625, JBool, required = false, default = nil)
  if valid_773625 != nil:
    section.add "CopyTagsToSnapshot", valid_773625
  var valid_773626 = query.getOrDefault("DBSubnetGroupName")
  valid_773626 = validateParameter(valid_773626, JString, required = false,
                                 default = nil)
  if valid_773626 != nil:
    section.add "DBSubnetGroupName", valid_773626
  var valid_773627 = query.getOrDefault("KmsKeyId")
  valid_773627 = validateParameter(valid_773627, JString, required = false,
                                 default = nil)
  if valid_773627 != nil:
    section.add "KmsKeyId", valid_773627
  var valid_773628 = query.getOrDefault("Domain")
  valid_773628 = validateParameter(valid_773628, JString, required = false,
                                 default = nil)
  if valid_773628 != nil:
    section.add "Domain", valid_773628
  var valid_773629 = query.getOrDefault("EngineVersion")
  valid_773629 = validateParameter(valid_773629, JString, required = false,
                                 default = nil)
  if valid_773629 != nil:
    section.add "EngineVersion", valid_773629
  var valid_773630 = query.getOrDefault("PreferredBackupWindow")
  valid_773630 = validateParameter(valid_773630, JString, required = false,
                                 default = nil)
  if valid_773630 != nil:
    section.add "PreferredBackupWindow", valid_773630
  var valid_773631 = query.getOrDefault("DBInstanceIdentifier")
  valid_773631 = validateParameter(valid_773631, JString, required = true,
                                 default = nil)
  if valid_773631 != nil:
    section.add "DBInstanceIdentifier", valid_773631
  var valid_773632 = query.getOrDefault("MasterUsername")
  valid_773632 = validateParameter(valid_773632, JString, required = false,
                                 default = nil)
  if valid_773632 != nil:
    section.add "MasterUsername", valid_773632
  var valid_773633 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_773633 = validateParameter(valid_773633, JString, required = false,
                                 default = nil)
  if valid_773633 != nil:
    section.add "PreferredMaintenanceWindow", valid_773633
  var valid_773634 = query.getOrDefault("OptionGroupName")
  valid_773634 = validateParameter(valid_773634, JString, required = false,
                                 default = nil)
  if valid_773634 != nil:
    section.add "OptionGroupName", valid_773634
  var valid_773635 = query.getOrDefault("AvailabilityZone")
  valid_773635 = validateParameter(valid_773635, JString, required = false,
                                 default = nil)
  if valid_773635 != nil:
    section.add "AvailabilityZone", valid_773635
  var valid_773636 = query.getOrDefault("Iops")
  valid_773636 = validateParameter(valid_773636, JInt, required = false, default = nil)
  if valid_773636 != nil:
    section.add "Iops", valid_773636
  var valid_773637 = query.getOrDefault("VpcSecurityGroupIds")
  valid_773637 = validateParameter(valid_773637, JArray, required = false,
                                 default = nil)
  if valid_773637 != nil:
    section.add "VpcSecurityGroupIds", valid_773637
  var valid_773638 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_773638 = validateParameter(valid_773638, JArray, required = false,
                                 default = nil)
  if valid_773638 != nil:
    section.add "EnableCloudwatchLogsExports", valid_773638
  var valid_773639 = query.getOrDefault("LicenseModel")
  valid_773639 = validateParameter(valid_773639, JString, required = false,
                                 default = nil)
  if valid_773639 != nil:
    section.add "LicenseModel", valid_773639
  var valid_773640 = query.getOrDefault("Tags")
  valid_773640 = validateParameter(valid_773640, JArray, required = false,
                                 default = nil)
  if valid_773640 != nil:
    section.add "Tags", valid_773640
  var valid_773641 = query.getOrDefault("DBParameterGroupName")
  valid_773641 = validateParameter(valid_773641, JString, required = false,
                                 default = nil)
  if valid_773641 != nil:
    section.add "DBParameterGroupName", valid_773641
  var valid_773642 = query.getOrDefault("DBInstanceClass")
  valid_773642 = validateParameter(valid_773642, JString, required = true,
                                 default = nil)
  if valid_773642 != nil:
    section.add "DBInstanceClass", valid_773642
  var valid_773643 = query.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_773643 = validateParameter(valid_773643, JString, required = false,
                                 default = nil)
  if valid_773643 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_773643
  var valid_773644 = query.getOrDefault("Action")
  valid_773644 = validateParameter(valid_773644, JString, required = true,
                                 default = newJString("CreateDBInstance"))
  if valid_773644 != nil:
    section.add "Action", valid_773644
  var valid_773645 = query.getOrDefault("CharacterSetName")
  valid_773645 = validateParameter(valid_773645, JString, required = false,
                                 default = nil)
  if valid_773645 != nil:
    section.add "CharacterSetName", valid_773645
  var valid_773646 = query.getOrDefault("TdeCredentialArn")
  valid_773646 = validateParameter(valid_773646, JString, required = false,
                                 default = nil)
  if valid_773646 != nil:
    section.add "TdeCredentialArn", valid_773646
  var valid_773647 = query.getOrDefault("PubliclyAccessible")
  valid_773647 = validateParameter(valid_773647, JBool, required = false, default = nil)
  if valid_773647 != nil:
    section.add "PubliclyAccessible", valid_773647
  var valid_773648 = query.getOrDefault("Timezone")
  valid_773648 = validateParameter(valid_773648, JString, required = false,
                                 default = nil)
  if valid_773648 != nil:
    section.add "Timezone", valid_773648
  var valid_773649 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_773649 = validateParameter(valid_773649, JBool, required = false, default = nil)
  if valid_773649 != nil:
    section.add "AutoMinorVersionUpgrade", valid_773649
  var valid_773650 = query.getOrDefault("Port")
  valid_773650 = validateParameter(valid_773650, JInt, required = false, default = nil)
  if valid_773650 != nil:
    section.add "Port", valid_773650
  var valid_773651 = query.getOrDefault("EnablePerformanceInsights")
  valid_773651 = validateParameter(valid_773651, JBool, required = false, default = nil)
  if valid_773651 != nil:
    section.add "EnablePerformanceInsights", valid_773651
  var valid_773652 = query.getOrDefault("Version")
  valid_773652 = validateParameter(valid_773652, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773652 != nil:
    section.add "Version", valid_773652
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773653 = header.getOrDefault("X-Amz-Date")
  valid_773653 = validateParameter(valid_773653, JString, required = false,
                                 default = nil)
  if valid_773653 != nil:
    section.add "X-Amz-Date", valid_773653
  var valid_773654 = header.getOrDefault("X-Amz-Security-Token")
  valid_773654 = validateParameter(valid_773654, JString, required = false,
                                 default = nil)
  if valid_773654 != nil:
    section.add "X-Amz-Security-Token", valid_773654
  var valid_773655 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773655 = validateParameter(valid_773655, JString, required = false,
                                 default = nil)
  if valid_773655 != nil:
    section.add "X-Amz-Content-Sha256", valid_773655
  var valid_773656 = header.getOrDefault("X-Amz-Algorithm")
  valid_773656 = validateParameter(valid_773656, JString, required = false,
                                 default = nil)
  if valid_773656 != nil:
    section.add "X-Amz-Algorithm", valid_773656
  var valid_773657 = header.getOrDefault("X-Amz-Signature")
  valid_773657 = validateParameter(valid_773657, JString, required = false,
                                 default = nil)
  if valid_773657 != nil:
    section.add "X-Amz-Signature", valid_773657
  var valid_773658 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773658 = validateParameter(valid_773658, JString, required = false,
                                 default = nil)
  if valid_773658 != nil:
    section.add "X-Amz-SignedHeaders", valid_773658
  var valid_773659 = header.getOrDefault("X-Amz-Credential")
  valid_773659 = validateParameter(valid_773659, JString, required = false,
                                 default = nil)
  if valid_773659 != nil:
    section.add "X-Amz-Credential", valid_773659
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773660: Call_GetCreateDBInstance_773588; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB instance.
  ## 
  let valid = call_773660.validator(path, query, header, formData, body)
  let scheme = call_773660.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773660.url(scheme.get, call_773660.host, call_773660.base,
                         call_773660.route, valid.getOrDefault("path"))
  result = hook(call_773660, url, valid)

proc call*(call_773661: Call_GetCreateDBInstance_773588; Engine: string;
          DBInstanceIdentifier: string; DBInstanceClass: string;
          MonitoringInterval: int = 0; PromotionTier: int = 0;
          StorageEncrypted: bool = false; AllocatedStorage: int = 0;
          StorageType: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          DBClusterIdentifier: string = ""; DBSecurityGroups: JsonNode = nil;
          MasterUserPassword: string = ""; MonitoringRoleArn: string = "";
          MultiAZ: bool = false; TdeCredentialPassword: string = "";
          DomainIAMRoleName: string = ""; BackupRetentionPeriod: int = 0;
          DBName: string = ""; CopyTagsToSnapshot: bool = false;
          DBSubnetGroupName: string = ""; KmsKeyId: string = ""; Domain: string = "";
          EngineVersion: string = ""; PreferredBackupWindow: string = "";
          MasterUsername: string = ""; PreferredMaintenanceWindow: string = "";
          OptionGroupName: string = ""; AvailabilityZone: string = ""; Iops: int = 0;
          VpcSecurityGroupIds: JsonNode = nil;
          EnableCloudwatchLogsExports: JsonNode = nil; LicenseModel: string = "";
          Tags: JsonNode = nil; DBParameterGroupName: string = "";
          PerformanceInsightsKMSKeyId: string = "";
          Action: string = "CreateDBInstance"; CharacterSetName: string = "";
          TdeCredentialArn: string = ""; PubliclyAccessible: bool = false;
          Timezone: string = ""; AutoMinorVersionUpgrade: bool = false; Port: int = 0;
          EnablePerformanceInsights: bool = false; Version: string = "2014-10-31"): Recallable =
  ## getCreateDBInstance
  ## Creates a new DB instance.
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance.</p> <p>Valid Values: <code>neptune</code> </p>
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which an Read Replica is promoted to the primary instance after a failure of the existing primary instance. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   StorageEncrypted: bool
  ##                   : <p>Specifies whether the DB instance is encrypted.</p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: false</p>
  ##   AllocatedStorage: int
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p>Not applicable. Neptune cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in a Neptune cluster volume.</p>
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p>Not applicable. Storage is managed by the DB Cluster.</p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable AWS Identity and Access Management (IAM) authentication for Neptune.</p> <p>Default: <code>false</code> </p>
  ##   DBClusterIdentifier: string
  ##                      : <p>The identifier of the DB cluster that the instance will belong to.</p> <p>For information on creating a DB cluster, see <a>CreateDBCluster</a>.</p> <p>Type: String</p>
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Not used.</p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   MultiAZ: bool
  ##          : Specifies if the DB instance is a Multi-AZ deployment. You can't set the AvailabilityZone parameter if the MultiAZ parameter is set to true.
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Cannot be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   DBName: string
  ##         : Not supported.
  ##   CopyTagsToSnapshot: bool
  ##                     : True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>If the <code>StorageEncrypted</code> parameter is true, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon Neptune will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   Domain: string
  ##         : Specify the Active Directory Domain to create the instance in.
  ##   EngineVersion: string
  ##                : The version number of the database engine to use.
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created.</p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   MasterUsername: string
  ##                 : The name for the master user. Not used.
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.</p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   OptionGroupName: string
  ##                  : <p>Indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   AvailabilityZone: string
  ##                   : <p> The EC2 Availability Zone that the DB instance is created in</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The AvailabilityZone parameter can't be specified if the MultiAZ parameter is set to <code>true</code>. The specified Availability Zone must be in the same AWS Region as the current endpoint.</p>
  ##   Iops: int
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to associate with this DB instance.</p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs.
  ##   LicenseModel: string
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : The tags to assign to the new instance.
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If this argument is omitted, the default DBParameterGroup for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DBInstanceClass: string (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions.
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.
  ##   Action: string (required)
  ##   CharacterSetName: string
  ##                   : <p>Indicates that the DB instance should be associated with the specified CharacterSet.</p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PubliclyAccessible: bool
  ##                     : This flag should no longer be used.
  ##   Timezone: string
  ##           : The time zone of the DB instance.
  ##   AutoMinorVersionUpgrade: bool
  ##                          : <p>Indicates that minor engine upgrades are applied automatically to the DB instance during the maintenance window.</p> <p>Default: <code>true</code> </p>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p>Not applicable. The port is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p> Default: <code>8182</code> </p> <p>Type: Integer</p>
  ##   EnablePerformanceInsights: bool
  ##                            : True to enable Performance Insights for the DB instance, and otherwise false.
  ##   Version: string (required)
  var query_773662 = newJObject()
  add(query_773662, "MonitoringInterval", newJInt(MonitoringInterval))
  add(query_773662, "Engine", newJString(Engine))
  add(query_773662, "PromotionTier", newJInt(PromotionTier))
  add(query_773662, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_773662, "AllocatedStorage", newJInt(AllocatedStorage))
  add(query_773662, "StorageType", newJString(StorageType))
  add(query_773662, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_773662, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  if DBSecurityGroups != nil:
    query_773662.add "DBSecurityGroups", DBSecurityGroups
  add(query_773662, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_773662, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(query_773662, "MultiAZ", newJBool(MultiAZ))
  add(query_773662, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(query_773662, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(query_773662, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_773662, "DBName", newJString(DBName))
  add(query_773662, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_773662, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_773662, "KmsKeyId", newJString(KmsKeyId))
  add(query_773662, "Domain", newJString(Domain))
  add(query_773662, "EngineVersion", newJString(EngineVersion))
  add(query_773662, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_773662, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_773662, "MasterUsername", newJString(MasterUsername))
  add(query_773662, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_773662, "OptionGroupName", newJString(OptionGroupName))
  add(query_773662, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_773662, "Iops", newJInt(Iops))
  if VpcSecurityGroupIds != nil:
    query_773662.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if EnableCloudwatchLogsExports != nil:
    query_773662.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_773662, "LicenseModel", newJString(LicenseModel))
  if Tags != nil:
    query_773662.add "Tags", Tags
  add(query_773662, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_773662, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_773662, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(query_773662, "Action", newJString(Action))
  add(query_773662, "CharacterSetName", newJString(CharacterSetName))
  add(query_773662, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(query_773662, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_773662, "Timezone", newJString(Timezone))
  add(query_773662, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_773662, "Port", newJInt(Port))
  add(query_773662, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(query_773662, "Version", newJString(Version))
  result = call_773661.call(nil, query_773662, nil, nil, nil)

var getCreateDBInstance* = Call_GetCreateDBInstance_773588(
    name: "getCreateDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBInstance",
    validator: validate_GetCreateDBInstance_773589, base: "/",
    url: url_GetCreateDBInstance_773590, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBParameterGroup_773740 = ref object of OpenApiRestCall_772581
proc url_PostCreateDBParameterGroup_773742(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateDBParameterGroup_773741(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB parameter group.</p> <p>A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect.</p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773743 = query.getOrDefault("Action")
  valid_773743 = validateParameter(valid_773743, JString, required = true,
                                 default = newJString("CreateDBParameterGroup"))
  if valid_773743 != nil:
    section.add "Action", valid_773743
  var valid_773744 = query.getOrDefault("Version")
  valid_773744 = validateParameter(valid_773744, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773744 != nil:
    section.add "Version", valid_773744
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773745 = header.getOrDefault("X-Amz-Date")
  valid_773745 = validateParameter(valid_773745, JString, required = false,
                                 default = nil)
  if valid_773745 != nil:
    section.add "X-Amz-Date", valid_773745
  var valid_773746 = header.getOrDefault("X-Amz-Security-Token")
  valid_773746 = validateParameter(valid_773746, JString, required = false,
                                 default = nil)
  if valid_773746 != nil:
    section.add "X-Amz-Security-Token", valid_773746
  var valid_773747 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773747 = validateParameter(valid_773747, JString, required = false,
                                 default = nil)
  if valid_773747 != nil:
    section.add "X-Amz-Content-Sha256", valid_773747
  var valid_773748 = header.getOrDefault("X-Amz-Algorithm")
  valid_773748 = validateParameter(valid_773748, JString, required = false,
                                 default = nil)
  if valid_773748 != nil:
    section.add "X-Amz-Algorithm", valid_773748
  var valid_773749 = header.getOrDefault("X-Amz-Signature")
  valid_773749 = validateParameter(valid_773749, JString, required = false,
                                 default = nil)
  if valid_773749 != nil:
    section.add "X-Amz-Signature", valid_773749
  var valid_773750 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773750 = validateParameter(valid_773750, JString, required = false,
                                 default = nil)
  if valid_773750 != nil:
    section.add "X-Amz-SignedHeaders", valid_773750
  var valid_773751 = header.getOrDefault("X-Amz-Credential")
  valid_773751 = validateParameter(valid_773751, JString, required = false,
                                 default = nil)
  if valid_773751 != nil:
    section.add "X-Amz-Credential", valid_773751
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB parameter group.
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.
  ##   Description: JString (required)
  ##              : The description for the DB parameter group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_773752 = formData.getOrDefault("DBParameterGroupName")
  valid_773752 = validateParameter(valid_773752, JString, required = true,
                                 default = nil)
  if valid_773752 != nil:
    section.add "DBParameterGroupName", valid_773752
  var valid_773753 = formData.getOrDefault("Tags")
  valid_773753 = validateParameter(valid_773753, JArray, required = false,
                                 default = nil)
  if valid_773753 != nil:
    section.add "Tags", valid_773753
  var valid_773754 = formData.getOrDefault("DBParameterGroupFamily")
  valid_773754 = validateParameter(valid_773754, JString, required = true,
                                 default = nil)
  if valid_773754 != nil:
    section.add "DBParameterGroupFamily", valid_773754
  var valid_773755 = formData.getOrDefault("Description")
  valid_773755 = validateParameter(valid_773755, JString, required = true,
                                 default = nil)
  if valid_773755 != nil:
    section.add "Description", valid_773755
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773756: Call_PostCreateDBParameterGroup_773740; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB parameter group.</p> <p>A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect.</p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_773756.validator(path, query, header, formData, body)
  let scheme = call_773756.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773756.url(scheme.get, call_773756.host, call_773756.base,
                         call_773756.route, valid.getOrDefault("path"))
  result = hook(call_773756, url, valid)

proc call*(call_773757: Call_PostCreateDBParameterGroup_773740;
          DBParameterGroupName: string; DBParameterGroupFamily: string;
          Description: string; Tags: JsonNode = nil;
          Action: string = "CreateDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## postCreateDBParameterGroup
  ## <p>Creates a new DB parameter group.</p> <p>A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect.</p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB parameter group.
  ##   Action: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.
  ##   Version: string (required)
  ##   Description: string (required)
  ##              : The description for the DB parameter group.
  var query_773758 = newJObject()
  var formData_773759 = newJObject()
  add(formData_773759, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Tags != nil:
    formData_773759.add "Tags", Tags
  add(query_773758, "Action", newJString(Action))
  add(formData_773759, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  add(query_773758, "Version", newJString(Version))
  add(formData_773759, "Description", newJString(Description))
  result = call_773757.call(nil, query_773758, nil, formData_773759, nil)

var postCreateDBParameterGroup* = Call_PostCreateDBParameterGroup_773740(
    name: "postCreateDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBParameterGroup",
    validator: validate_PostCreateDBParameterGroup_773741, base: "/",
    url: url_PostCreateDBParameterGroup_773742,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBParameterGroup_773721 = ref object of OpenApiRestCall_772581
proc url_GetCreateDBParameterGroup_773723(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateDBParameterGroup_773722(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB parameter group.</p> <p>A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect.</p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Description: JString (required)
  ##              : The description for the DB parameter group.
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB parameter group.
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Description` field"
  var valid_773724 = query.getOrDefault("Description")
  valid_773724 = validateParameter(valid_773724, JString, required = true,
                                 default = nil)
  if valid_773724 != nil:
    section.add "Description", valid_773724
  var valid_773725 = query.getOrDefault("DBParameterGroupFamily")
  valid_773725 = validateParameter(valid_773725, JString, required = true,
                                 default = nil)
  if valid_773725 != nil:
    section.add "DBParameterGroupFamily", valid_773725
  var valid_773726 = query.getOrDefault("Tags")
  valid_773726 = validateParameter(valid_773726, JArray, required = false,
                                 default = nil)
  if valid_773726 != nil:
    section.add "Tags", valid_773726
  var valid_773727 = query.getOrDefault("DBParameterGroupName")
  valid_773727 = validateParameter(valid_773727, JString, required = true,
                                 default = nil)
  if valid_773727 != nil:
    section.add "DBParameterGroupName", valid_773727
  var valid_773728 = query.getOrDefault("Action")
  valid_773728 = validateParameter(valid_773728, JString, required = true,
                                 default = newJString("CreateDBParameterGroup"))
  if valid_773728 != nil:
    section.add "Action", valid_773728
  var valid_773729 = query.getOrDefault("Version")
  valid_773729 = validateParameter(valid_773729, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773729 != nil:
    section.add "Version", valid_773729
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773730 = header.getOrDefault("X-Amz-Date")
  valid_773730 = validateParameter(valid_773730, JString, required = false,
                                 default = nil)
  if valid_773730 != nil:
    section.add "X-Amz-Date", valid_773730
  var valid_773731 = header.getOrDefault("X-Amz-Security-Token")
  valid_773731 = validateParameter(valid_773731, JString, required = false,
                                 default = nil)
  if valid_773731 != nil:
    section.add "X-Amz-Security-Token", valid_773731
  var valid_773732 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773732 = validateParameter(valid_773732, JString, required = false,
                                 default = nil)
  if valid_773732 != nil:
    section.add "X-Amz-Content-Sha256", valid_773732
  var valid_773733 = header.getOrDefault("X-Amz-Algorithm")
  valid_773733 = validateParameter(valid_773733, JString, required = false,
                                 default = nil)
  if valid_773733 != nil:
    section.add "X-Amz-Algorithm", valid_773733
  var valid_773734 = header.getOrDefault("X-Amz-Signature")
  valid_773734 = validateParameter(valid_773734, JString, required = false,
                                 default = nil)
  if valid_773734 != nil:
    section.add "X-Amz-Signature", valid_773734
  var valid_773735 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773735 = validateParameter(valid_773735, JString, required = false,
                                 default = nil)
  if valid_773735 != nil:
    section.add "X-Amz-SignedHeaders", valid_773735
  var valid_773736 = header.getOrDefault("X-Amz-Credential")
  valid_773736 = validateParameter(valid_773736, JString, required = false,
                                 default = nil)
  if valid_773736 != nil:
    section.add "X-Amz-Credential", valid_773736
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773737: Call_GetCreateDBParameterGroup_773721; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB parameter group.</p> <p>A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect.</p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_773737.validator(path, query, header, formData, body)
  let scheme = call_773737.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773737.url(scheme.get, call_773737.host, call_773737.base,
                         call_773737.route, valid.getOrDefault("path"))
  result = hook(call_773737, url, valid)

proc call*(call_773738: Call_GetCreateDBParameterGroup_773721; Description: string;
          DBParameterGroupFamily: string; DBParameterGroupName: string;
          Tags: JsonNode = nil; Action: string = "CreateDBParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBParameterGroup
  ## <p>Creates a new DB parameter group.</p> <p>A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect.</p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   Description: string (required)
  ##              : The description for the DB parameter group.
  ##   DBParameterGroupFamily: string (required)
  ##                         : The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB parameter group.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773739 = newJObject()
  add(query_773739, "Description", newJString(Description))
  add(query_773739, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  if Tags != nil:
    query_773739.add "Tags", Tags
  add(query_773739, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_773739, "Action", newJString(Action))
  add(query_773739, "Version", newJString(Version))
  result = call_773738.call(nil, query_773739, nil, nil, nil)

var getCreateDBParameterGroup* = Call_GetCreateDBParameterGroup_773721(
    name: "getCreateDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBParameterGroup",
    validator: validate_GetCreateDBParameterGroup_773722, base: "/",
    url: url_GetCreateDBParameterGroup_773723,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBSubnetGroup_773779 = ref object of OpenApiRestCall_772581
proc url_PostCreateDBSubnetGroup_773781(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateDBSubnetGroup_773780(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773782 = query.getOrDefault("Action")
  valid_773782 = validateParameter(valid_773782, JString, required = true,
                                 default = newJString("CreateDBSubnetGroup"))
  if valid_773782 != nil:
    section.add "Action", valid_773782
  var valid_773783 = query.getOrDefault("Version")
  valid_773783 = validateParameter(valid_773783, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773783 != nil:
    section.add "Version", valid_773783
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773784 = header.getOrDefault("X-Amz-Date")
  valid_773784 = validateParameter(valid_773784, JString, required = false,
                                 default = nil)
  if valid_773784 != nil:
    section.add "X-Amz-Date", valid_773784
  var valid_773785 = header.getOrDefault("X-Amz-Security-Token")
  valid_773785 = validateParameter(valid_773785, JString, required = false,
                                 default = nil)
  if valid_773785 != nil:
    section.add "X-Amz-Security-Token", valid_773785
  var valid_773786 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773786 = validateParameter(valid_773786, JString, required = false,
                                 default = nil)
  if valid_773786 != nil:
    section.add "X-Amz-Content-Sha256", valid_773786
  var valid_773787 = header.getOrDefault("X-Amz-Algorithm")
  valid_773787 = validateParameter(valid_773787, JString, required = false,
                                 default = nil)
  if valid_773787 != nil:
    section.add "X-Amz-Algorithm", valid_773787
  var valid_773788 = header.getOrDefault("X-Amz-Signature")
  valid_773788 = validateParameter(valid_773788, JString, required = false,
                                 default = nil)
  if valid_773788 != nil:
    section.add "X-Amz-Signature", valid_773788
  var valid_773789 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773789 = validateParameter(valid_773789, JString, required = false,
                                 default = nil)
  if valid_773789 != nil:
    section.add "X-Amz-SignedHeaders", valid_773789
  var valid_773790 = header.getOrDefault("X-Amz-Credential")
  valid_773790 = validateParameter(valid_773790, JString, required = false,
                                 default = nil)
  if valid_773790 != nil:
    section.add "X-Amz-Credential", valid_773790
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB subnet group.
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  ##   DBSubnetGroupDescription: JString (required)
  ##                           : The description for the DB subnet group.
  section = newJObject()
  var valid_773791 = formData.getOrDefault("Tags")
  valid_773791 = validateParameter(valid_773791, JArray, required = false,
                                 default = nil)
  if valid_773791 != nil:
    section.add "Tags", valid_773791
  assert formData != nil, "formData argument is necessary due to required `DBSubnetGroupName` field"
  var valid_773792 = formData.getOrDefault("DBSubnetGroupName")
  valid_773792 = validateParameter(valid_773792, JString, required = true,
                                 default = nil)
  if valid_773792 != nil:
    section.add "DBSubnetGroupName", valid_773792
  var valid_773793 = formData.getOrDefault("SubnetIds")
  valid_773793 = validateParameter(valid_773793, JArray, required = true, default = nil)
  if valid_773793 != nil:
    section.add "SubnetIds", valid_773793
  var valid_773794 = formData.getOrDefault("DBSubnetGroupDescription")
  valid_773794 = validateParameter(valid_773794, JString, required = true,
                                 default = nil)
  if valid_773794 != nil:
    section.add "DBSubnetGroupDescription", valid_773794
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773795: Call_PostCreateDBSubnetGroup_773779; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_773795.validator(path, query, header, formData, body)
  let scheme = call_773795.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773795.url(scheme.get, call_773795.host, call_773795.base,
                         call_773795.route, valid.getOrDefault("path"))
  result = hook(call_773795, url, valid)

proc call*(call_773796: Call_PostCreateDBSubnetGroup_773779;
          DBSubnetGroupName: string; SubnetIds: JsonNode;
          DBSubnetGroupDescription: string; Tags: JsonNode = nil;
          Action: string = "CreateDBSubnetGroup"; Version: string = "2014-10-31"): Recallable =
  ## postCreateDBSubnetGroup
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB subnet group.
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  ##   Action: string (required)
  ##   DBSubnetGroupDescription: string (required)
  ##                           : The description for the DB subnet group.
  ##   Version: string (required)
  var query_773797 = newJObject()
  var formData_773798 = newJObject()
  if Tags != nil:
    formData_773798.add "Tags", Tags
  add(formData_773798, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  if SubnetIds != nil:
    formData_773798.add "SubnetIds", SubnetIds
  add(query_773797, "Action", newJString(Action))
  add(formData_773798, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_773797, "Version", newJString(Version))
  result = call_773796.call(nil, query_773797, nil, formData_773798, nil)

var postCreateDBSubnetGroup* = Call_PostCreateDBSubnetGroup_773779(
    name: "postCreateDBSubnetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSubnetGroup",
    validator: validate_PostCreateDBSubnetGroup_773780, base: "/",
    url: url_PostCreateDBSubnetGroup_773781, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBSubnetGroup_773760 = ref object of OpenApiRestCall_772581
proc url_GetCreateDBSubnetGroup_773762(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateDBSubnetGroup_773761(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB subnet group.
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  ##   DBSubnetGroupDescription: JString (required)
  ##                           : The description for the DB subnet group.
  ##   Version: JString (required)
  section = newJObject()
  var valid_773763 = query.getOrDefault("Tags")
  valid_773763 = validateParameter(valid_773763, JArray, required = false,
                                 default = nil)
  if valid_773763 != nil:
    section.add "Tags", valid_773763
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773764 = query.getOrDefault("Action")
  valid_773764 = validateParameter(valid_773764, JString, required = true,
                                 default = newJString("CreateDBSubnetGroup"))
  if valid_773764 != nil:
    section.add "Action", valid_773764
  var valid_773765 = query.getOrDefault("DBSubnetGroupName")
  valid_773765 = validateParameter(valid_773765, JString, required = true,
                                 default = nil)
  if valid_773765 != nil:
    section.add "DBSubnetGroupName", valid_773765
  var valid_773766 = query.getOrDefault("SubnetIds")
  valid_773766 = validateParameter(valid_773766, JArray, required = true, default = nil)
  if valid_773766 != nil:
    section.add "SubnetIds", valid_773766
  var valid_773767 = query.getOrDefault("DBSubnetGroupDescription")
  valid_773767 = validateParameter(valid_773767, JString, required = true,
                                 default = nil)
  if valid_773767 != nil:
    section.add "DBSubnetGroupDescription", valid_773767
  var valid_773768 = query.getOrDefault("Version")
  valid_773768 = validateParameter(valid_773768, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773768 != nil:
    section.add "Version", valid_773768
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773769 = header.getOrDefault("X-Amz-Date")
  valid_773769 = validateParameter(valid_773769, JString, required = false,
                                 default = nil)
  if valid_773769 != nil:
    section.add "X-Amz-Date", valid_773769
  var valid_773770 = header.getOrDefault("X-Amz-Security-Token")
  valid_773770 = validateParameter(valid_773770, JString, required = false,
                                 default = nil)
  if valid_773770 != nil:
    section.add "X-Amz-Security-Token", valid_773770
  var valid_773771 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773771 = validateParameter(valid_773771, JString, required = false,
                                 default = nil)
  if valid_773771 != nil:
    section.add "X-Amz-Content-Sha256", valid_773771
  var valid_773772 = header.getOrDefault("X-Amz-Algorithm")
  valid_773772 = validateParameter(valid_773772, JString, required = false,
                                 default = nil)
  if valid_773772 != nil:
    section.add "X-Amz-Algorithm", valid_773772
  var valid_773773 = header.getOrDefault("X-Amz-Signature")
  valid_773773 = validateParameter(valid_773773, JString, required = false,
                                 default = nil)
  if valid_773773 != nil:
    section.add "X-Amz-Signature", valid_773773
  var valid_773774 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773774 = validateParameter(valid_773774, JString, required = false,
                                 default = nil)
  if valid_773774 != nil:
    section.add "X-Amz-SignedHeaders", valid_773774
  var valid_773775 = header.getOrDefault("X-Amz-Credential")
  valid_773775 = validateParameter(valid_773775, JString, required = false,
                                 default = nil)
  if valid_773775 != nil:
    section.add "X-Amz-Credential", valid_773775
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773776: Call_GetCreateDBSubnetGroup_773760; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_773776.validator(path, query, header, formData, body)
  let scheme = call_773776.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773776.url(scheme.get, call_773776.host, call_773776.base,
                         call_773776.route, valid.getOrDefault("path"))
  result = hook(call_773776, url, valid)

proc call*(call_773777: Call_GetCreateDBSubnetGroup_773760;
          DBSubnetGroupName: string; SubnetIds: JsonNode;
          DBSubnetGroupDescription: string; Tags: JsonNode = nil;
          Action: string = "CreateDBSubnetGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCreateDBSubnetGroup
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB subnet group.
  ##   Action: string (required)
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  ##   DBSubnetGroupDescription: string (required)
  ##                           : The description for the DB subnet group.
  ##   Version: string (required)
  var query_773778 = newJObject()
  if Tags != nil:
    query_773778.add "Tags", Tags
  add(query_773778, "Action", newJString(Action))
  add(query_773778, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  if SubnetIds != nil:
    query_773778.add "SubnetIds", SubnetIds
  add(query_773778, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_773778, "Version", newJString(Version))
  result = call_773777.call(nil, query_773778, nil, nil, nil)

var getCreateDBSubnetGroup* = Call_GetCreateDBSubnetGroup_773760(
    name: "getCreateDBSubnetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSubnetGroup",
    validator: validate_GetCreateDBSubnetGroup_773761, base: "/",
    url: url_GetCreateDBSubnetGroup_773762, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateEventSubscription_773821 = ref object of OpenApiRestCall_772581
proc url_PostCreateEventSubscription_773823(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateEventSubscription_773822(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the Neptune console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of Neptune sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your Neptune sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all Neptune sources belonging to your customer account.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773824 = query.getOrDefault("Action")
  valid_773824 = validateParameter(valid_773824, JString, required = true, default = newJString(
      "CreateEventSubscription"))
  if valid_773824 != nil:
    section.add "Action", valid_773824
  var valid_773825 = query.getOrDefault("Version")
  valid_773825 = validateParameter(valid_773825, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773825 != nil:
    section.add "Version", valid_773825
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773826 = header.getOrDefault("X-Amz-Date")
  valid_773826 = validateParameter(valid_773826, JString, required = false,
                                 default = nil)
  if valid_773826 != nil:
    section.add "X-Amz-Date", valid_773826
  var valid_773827 = header.getOrDefault("X-Amz-Security-Token")
  valid_773827 = validateParameter(valid_773827, JString, required = false,
                                 default = nil)
  if valid_773827 != nil:
    section.add "X-Amz-Security-Token", valid_773827
  var valid_773828 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773828 = validateParameter(valid_773828, JString, required = false,
                                 default = nil)
  if valid_773828 != nil:
    section.add "X-Amz-Content-Sha256", valid_773828
  var valid_773829 = header.getOrDefault("X-Amz-Algorithm")
  valid_773829 = validateParameter(valid_773829, JString, required = false,
                                 default = nil)
  if valid_773829 != nil:
    section.add "X-Amz-Algorithm", valid_773829
  var valid_773830 = header.getOrDefault("X-Amz-Signature")
  valid_773830 = validateParameter(valid_773830, JString, required = false,
                                 default = nil)
  if valid_773830 != nil:
    section.add "X-Amz-Signature", valid_773830
  var valid_773831 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773831 = validateParameter(valid_773831, JString, required = false,
                                 default = nil)
  if valid_773831 != nil:
    section.add "X-Amz-SignedHeaders", valid_773831
  var valid_773832 = header.getOrDefault("X-Amz-Credential")
  valid_773832 = validateParameter(valid_773832, JString, required = false,
                                 default = nil)
  if valid_773832 != nil:
    section.add "X-Amz-Credential", valid_773832
  result.add "header", section
  ## parameters in `formData` object:
  ##   Enabled: JBool
  ##          :  A Boolean value; set to <b>true</b> to activate the subscription, set to <b>false</b> to create the subscription but not active it.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the <b>DescribeEventCategories</b> action.
  ##   SnsTopicArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Tags: JArray
  ##       : The tags to be applied to the new event subscription.
  ##   SubscriptionName: JString (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  section = newJObject()
  var valid_773833 = formData.getOrDefault("Enabled")
  valid_773833 = validateParameter(valid_773833, JBool, required = false, default = nil)
  if valid_773833 != nil:
    section.add "Enabled", valid_773833
  var valid_773834 = formData.getOrDefault("EventCategories")
  valid_773834 = validateParameter(valid_773834, JArray, required = false,
                                 default = nil)
  if valid_773834 != nil:
    section.add "EventCategories", valid_773834
  assert formData != nil,
        "formData argument is necessary due to required `SnsTopicArn` field"
  var valid_773835 = formData.getOrDefault("SnsTopicArn")
  valid_773835 = validateParameter(valid_773835, JString, required = true,
                                 default = nil)
  if valid_773835 != nil:
    section.add "SnsTopicArn", valid_773835
  var valid_773836 = formData.getOrDefault("SourceIds")
  valid_773836 = validateParameter(valid_773836, JArray, required = false,
                                 default = nil)
  if valid_773836 != nil:
    section.add "SourceIds", valid_773836
  var valid_773837 = formData.getOrDefault("Tags")
  valid_773837 = validateParameter(valid_773837, JArray, required = false,
                                 default = nil)
  if valid_773837 != nil:
    section.add "Tags", valid_773837
  var valid_773838 = formData.getOrDefault("SubscriptionName")
  valid_773838 = validateParameter(valid_773838, JString, required = true,
                                 default = nil)
  if valid_773838 != nil:
    section.add "SubscriptionName", valid_773838
  var valid_773839 = formData.getOrDefault("SourceType")
  valid_773839 = validateParameter(valid_773839, JString, required = false,
                                 default = nil)
  if valid_773839 != nil:
    section.add "SourceType", valid_773839
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773840: Call_PostCreateEventSubscription_773821; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the Neptune console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of Neptune sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your Neptune sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all Neptune sources belonging to your customer account.</p>
  ## 
  let valid = call_773840.validator(path, query, header, formData, body)
  let scheme = call_773840.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773840.url(scheme.get, call_773840.host, call_773840.base,
                         call_773840.route, valid.getOrDefault("path"))
  result = hook(call_773840, url, valid)

proc call*(call_773841: Call_PostCreateEventSubscription_773821;
          SnsTopicArn: string; SubscriptionName: string; Enabled: bool = false;
          EventCategories: JsonNode = nil; SourceIds: JsonNode = nil;
          Tags: JsonNode = nil; Action: string = "CreateEventSubscription";
          Version: string = "2014-10-31"; SourceType: string = ""): Recallable =
  ## postCreateEventSubscription
  ## <p>Creates an event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the Neptune console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of Neptune sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your Neptune sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all Neptune sources belonging to your customer account.</p>
  ##   Enabled: bool
  ##          :  A Boolean value; set to <b>true</b> to activate the subscription, set to <b>false</b> to create the subscription but not active it.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the <b>DescribeEventCategories</b> action.
  ##   SnsTopicArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Tags: JArray
  ##       : The tags to be applied to the new event subscription.
  ##   SubscriptionName: string (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  var query_773842 = newJObject()
  var formData_773843 = newJObject()
  add(formData_773843, "Enabled", newJBool(Enabled))
  if EventCategories != nil:
    formData_773843.add "EventCategories", EventCategories
  add(formData_773843, "SnsTopicArn", newJString(SnsTopicArn))
  if SourceIds != nil:
    formData_773843.add "SourceIds", SourceIds
  if Tags != nil:
    formData_773843.add "Tags", Tags
  add(formData_773843, "SubscriptionName", newJString(SubscriptionName))
  add(query_773842, "Action", newJString(Action))
  add(query_773842, "Version", newJString(Version))
  add(formData_773843, "SourceType", newJString(SourceType))
  result = call_773841.call(nil, query_773842, nil, formData_773843, nil)

var postCreateEventSubscription* = Call_PostCreateEventSubscription_773821(
    name: "postCreateEventSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateEventSubscription",
    validator: validate_PostCreateEventSubscription_773822, base: "/",
    url: url_PostCreateEventSubscription_773823,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateEventSubscription_773799 = ref object of OpenApiRestCall_772581
proc url_GetCreateEventSubscription_773801(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateEventSubscription_773800(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the Neptune console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of Neptune sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your Neptune sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all Neptune sources belonging to your customer account.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Enabled: JBool
  ##          :  A Boolean value; set to <b>true</b> to activate the subscription, set to <b>false</b> to create the subscription but not active it.
  ##   Tags: JArray
  ##       : The tags to be applied to the new event subscription.
  ##   Action: JString (required)
  ##   SnsTopicArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the <b>DescribeEventCategories</b> action.
  ##   SubscriptionName: JString (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_773802 = query.getOrDefault("SourceType")
  valid_773802 = validateParameter(valid_773802, JString, required = false,
                                 default = nil)
  if valid_773802 != nil:
    section.add "SourceType", valid_773802
  var valid_773803 = query.getOrDefault("SourceIds")
  valid_773803 = validateParameter(valid_773803, JArray, required = false,
                                 default = nil)
  if valid_773803 != nil:
    section.add "SourceIds", valid_773803
  var valid_773804 = query.getOrDefault("Enabled")
  valid_773804 = validateParameter(valid_773804, JBool, required = false, default = nil)
  if valid_773804 != nil:
    section.add "Enabled", valid_773804
  var valid_773805 = query.getOrDefault("Tags")
  valid_773805 = validateParameter(valid_773805, JArray, required = false,
                                 default = nil)
  if valid_773805 != nil:
    section.add "Tags", valid_773805
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773806 = query.getOrDefault("Action")
  valid_773806 = validateParameter(valid_773806, JString, required = true, default = newJString(
      "CreateEventSubscription"))
  if valid_773806 != nil:
    section.add "Action", valid_773806
  var valid_773807 = query.getOrDefault("SnsTopicArn")
  valid_773807 = validateParameter(valid_773807, JString, required = true,
                                 default = nil)
  if valid_773807 != nil:
    section.add "SnsTopicArn", valid_773807
  var valid_773808 = query.getOrDefault("EventCategories")
  valid_773808 = validateParameter(valid_773808, JArray, required = false,
                                 default = nil)
  if valid_773808 != nil:
    section.add "EventCategories", valid_773808
  var valid_773809 = query.getOrDefault("SubscriptionName")
  valid_773809 = validateParameter(valid_773809, JString, required = true,
                                 default = nil)
  if valid_773809 != nil:
    section.add "SubscriptionName", valid_773809
  var valid_773810 = query.getOrDefault("Version")
  valid_773810 = validateParameter(valid_773810, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773810 != nil:
    section.add "Version", valid_773810
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773811 = header.getOrDefault("X-Amz-Date")
  valid_773811 = validateParameter(valid_773811, JString, required = false,
                                 default = nil)
  if valid_773811 != nil:
    section.add "X-Amz-Date", valid_773811
  var valid_773812 = header.getOrDefault("X-Amz-Security-Token")
  valid_773812 = validateParameter(valid_773812, JString, required = false,
                                 default = nil)
  if valid_773812 != nil:
    section.add "X-Amz-Security-Token", valid_773812
  var valid_773813 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773813 = validateParameter(valid_773813, JString, required = false,
                                 default = nil)
  if valid_773813 != nil:
    section.add "X-Amz-Content-Sha256", valid_773813
  var valid_773814 = header.getOrDefault("X-Amz-Algorithm")
  valid_773814 = validateParameter(valid_773814, JString, required = false,
                                 default = nil)
  if valid_773814 != nil:
    section.add "X-Amz-Algorithm", valid_773814
  var valid_773815 = header.getOrDefault("X-Amz-Signature")
  valid_773815 = validateParameter(valid_773815, JString, required = false,
                                 default = nil)
  if valid_773815 != nil:
    section.add "X-Amz-Signature", valid_773815
  var valid_773816 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773816 = validateParameter(valid_773816, JString, required = false,
                                 default = nil)
  if valid_773816 != nil:
    section.add "X-Amz-SignedHeaders", valid_773816
  var valid_773817 = header.getOrDefault("X-Amz-Credential")
  valid_773817 = validateParameter(valid_773817, JString, required = false,
                                 default = nil)
  if valid_773817 != nil:
    section.add "X-Amz-Credential", valid_773817
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773818: Call_GetCreateEventSubscription_773799; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the Neptune console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of Neptune sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your Neptune sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all Neptune sources belonging to your customer account.</p>
  ## 
  let valid = call_773818.validator(path, query, header, formData, body)
  let scheme = call_773818.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773818.url(scheme.get, call_773818.host, call_773818.base,
                         call_773818.route, valid.getOrDefault("path"))
  result = hook(call_773818, url, valid)

proc call*(call_773819: Call_GetCreateEventSubscription_773799;
          SnsTopicArn: string; SubscriptionName: string; SourceType: string = "";
          SourceIds: JsonNode = nil; Enabled: bool = false; Tags: JsonNode = nil;
          Action: string = "CreateEventSubscription";
          EventCategories: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## getCreateEventSubscription
  ## <p>Creates an event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the Neptune console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of Neptune sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your Neptune sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all Neptune sources belonging to your customer account.</p>
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Enabled: bool
  ##          :  A Boolean value; set to <b>true</b> to activate the subscription, set to <b>false</b> to create the subscription but not active it.
  ##   Tags: JArray
  ##       : The tags to be applied to the new event subscription.
  ##   Action: string (required)
  ##   SnsTopicArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the <b>DescribeEventCategories</b> action.
  ##   SubscriptionName: string (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   Version: string (required)
  var query_773820 = newJObject()
  add(query_773820, "SourceType", newJString(SourceType))
  if SourceIds != nil:
    query_773820.add "SourceIds", SourceIds
  add(query_773820, "Enabled", newJBool(Enabled))
  if Tags != nil:
    query_773820.add "Tags", Tags
  add(query_773820, "Action", newJString(Action))
  add(query_773820, "SnsTopicArn", newJString(SnsTopicArn))
  if EventCategories != nil:
    query_773820.add "EventCategories", EventCategories
  add(query_773820, "SubscriptionName", newJString(SubscriptionName))
  add(query_773820, "Version", newJString(Version))
  result = call_773819.call(nil, query_773820, nil, nil, nil)

var getCreateEventSubscription* = Call_GetCreateEventSubscription_773799(
    name: "getCreateEventSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateEventSubscription",
    validator: validate_GetCreateEventSubscription_773800, base: "/",
    url: url_GetCreateEventSubscription_773801,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBCluster_773862 = ref object of OpenApiRestCall_772581
proc url_PostDeleteDBCluster_773864(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteDBCluster_773863(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773865 = query.getOrDefault("Action")
  valid_773865 = validateParameter(valid_773865, JString, required = true,
                                 default = newJString("DeleteDBCluster"))
  if valid_773865 != nil:
    section.add "Action", valid_773865
  var valid_773866 = query.getOrDefault("Version")
  valid_773866 = validateParameter(valid_773866, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773866 != nil:
    section.add "Version", valid_773866
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773867 = header.getOrDefault("X-Amz-Date")
  valid_773867 = validateParameter(valid_773867, JString, required = false,
                                 default = nil)
  if valid_773867 != nil:
    section.add "X-Amz-Date", valid_773867
  var valid_773868 = header.getOrDefault("X-Amz-Security-Token")
  valid_773868 = validateParameter(valid_773868, JString, required = false,
                                 default = nil)
  if valid_773868 != nil:
    section.add "X-Amz-Security-Token", valid_773868
  var valid_773869 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773869 = validateParameter(valid_773869, JString, required = false,
                                 default = nil)
  if valid_773869 != nil:
    section.add "X-Amz-Content-Sha256", valid_773869
  var valid_773870 = header.getOrDefault("X-Amz-Algorithm")
  valid_773870 = validateParameter(valid_773870, JString, required = false,
                                 default = nil)
  if valid_773870 != nil:
    section.add "X-Amz-Algorithm", valid_773870
  var valid_773871 = header.getOrDefault("X-Amz-Signature")
  valid_773871 = validateParameter(valid_773871, JString, required = false,
                                 default = nil)
  if valid_773871 != nil:
    section.add "X-Amz-Signature", valid_773871
  var valid_773872 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773872 = validateParameter(valid_773872, JString, required = false,
                                 default = nil)
  if valid_773872 != nil:
    section.add "X-Amz-SignedHeaders", valid_773872
  var valid_773873 = header.getOrDefault("X-Amz-Credential")
  valid_773873 = validateParameter(valid_773873, JString, required = false,
                                 default = nil)
  if valid_773873 != nil:
    section.add "X-Amz-Credential", valid_773873
  result.add "header", section
  ## parameters in `formData` object:
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is set to <code>false</code>.</p> <note> <p> Specifying this parameter and also setting the <code>SkipFinalShapshot</code> parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   SkipFinalSnapshot: JBool
  ##                    : <p> Determines whether a final DB cluster snapshot is created before the DB cluster is deleted. If <code>true</code> is specified, no DB cluster snapshot is created. If <code>false</code> is specified, a DB cluster snapshot is created before the DB cluster is deleted.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
  section = newJObject()
  var valid_773874 = formData.getOrDefault("FinalDBSnapshotIdentifier")
  valid_773874 = validateParameter(valid_773874, JString, required = false,
                                 default = nil)
  if valid_773874 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_773874
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_773875 = formData.getOrDefault("DBClusterIdentifier")
  valid_773875 = validateParameter(valid_773875, JString, required = true,
                                 default = nil)
  if valid_773875 != nil:
    section.add "DBClusterIdentifier", valid_773875
  var valid_773876 = formData.getOrDefault("SkipFinalSnapshot")
  valid_773876 = validateParameter(valid_773876, JBool, required = false, default = nil)
  if valid_773876 != nil:
    section.add "SkipFinalSnapshot", valid_773876
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773877: Call_PostDeleteDBCluster_773862; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.
  ## 
  let valid = call_773877.validator(path, query, header, formData, body)
  let scheme = call_773877.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773877.url(scheme.get, call_773877.host, call_773877.base,
                         call_773877.route, valid.getOrDefault("path"))
  result = hook(call_773877, url, valid)

proc call*(call_773878: Call_PostDeleteDBCluster_773862;
          DBClusterIdentifier: string; FinalDBSnapshotIdentifier: string = "";
          Action: string = "DeleteDBCluster"; Version: string = "2014-10-31";
          SkipFinalSnapshot: bool = false): Recallable =
  ## postDeleteDBCluster
  ## The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is set to <code>false</code>.</p> <note> <p> Specifying this parameter and also setting the <code>SkipFinalShapshot</code> parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   Action: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Version: string (required)
  ##   SkipFinalSnapshot: bool
  ##                    : <p> Determines whether a final DB cluster snapshot is created before the DB cluster is deleted. If <code>true</code> is specified, no DB cluster snapshot is created. If <code>false</code> is specified, a DB cluster snapshot is created before the DB cluster is deleted.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
  var query_773879 = newJObject()
  var formData_773880 = newJObject()
  add(formData_773880, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  add(query_773879, "Action", newJString(Action))
  add(formData_773880, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_773879, "Version", newJString(Version))
  add(formData_773880, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  result = call_773878.call(nil, query_773879, nil, formData_773880, nil)

var postDeleteDBCluster* = Call_PostDeleteDBCluster_773862(
    name: "postDeleteDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBCluster",
    validator: validate_PostDeleteDBCluster_773863, base: "/",
    url: url_PostDeleteDBCluster_773864, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBCluster_773844 = ref object of OpenApiRestCall_772581
proc url_GetDeleteDBCluster_773846(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteDBCluster_773845(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is set to <code>false</code>.</p> <note> <p> Specifying this parameter and also setting the <code>SkipFinalShapshot</code> parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   Action: JString (required)
  ##   SkipFinalSnapshot: JBool
  ##                    : <p> Determines whether a final DB cluster snapshot is created before the DB cluster is deleted. If <code>true</code> is specified, no DB cluster snapshot is created. If <code>false</code> is specified, a DB cluster snapshot is created before the DB cluster is deleted.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_773847 = query.getOrDefault("DBClusterIdentifier")
  valid_773847 = validateParameter(valid_773847, JString, required = true,
                                 default = nil)
  if valid_773847 != nil:
    section.add "DBClusterIdentifier", valid_773847
  var valid_773848 = query.getOrDefault("FinalDBSnapshotIdentifier")
  valid_773848 = validateParameter(valid_773848, JString, required = false,
                                 default = nil)
  if valid_773848 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_773848
  var valid_773849 = query.getOrDefault("Action")
  valid_773849 = validateParameter(valid_773849, JString, required = true,
                                 default = newJString("DeleteDBCluster"))
  if valid_773849 != nil:
    section.add "Action", valid_773849
  var valid_773850 = query.getOrDefault("SkipFinalSnapshot")
  valid_773850 = validateParameter(valid_773850, JBool, required = false, default = nil)
  if valid_773850 != nil:
    section.add "SkipFinalSnapshot", valid_773850
  var valid_773851 = query.getOrDefault("Version")
  valid_773851 = validateParameter(valid_773851, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773851 != nil:
    section.add "Version", valid_773851
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773852 = header.getOrDefault("X-Amz-Date")
  valid_773852 = validateParameter(valid_773852, JString, required = false,
                                 default = nil)
  if valid_773852 != nil:
    section.add "X-Amz-Date", valid_773852
  var valid_773853 = header.getOrDefault("X-Amz-Security-Token")
  valid_773853 = validateParameter(valid_773853, JString, required = false,
                                 default = nil)
  if valid_773853 != nil:
    section.add "X-Amz-Security-Token", valid_773853
  var valid_773854 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773854 = validateParameter(valid_773854, JString, required = false,
                                 default = nil)
  if valid_773854 != nil:
    section.add "X-Amz-Content-Sha256", valid_773854
  var valid_773855 = header.getOrDefault("X-Amz-Algorithm")
  valid_773855 = validateParameter(valid_773855, JString, required = false,
                                 default = nil)
  if valid_773855 != nil:
    section.add "X-Amz-Algorithm", valid_773855
  var valid_773856 = header.getOrDefault("X-Amz-Signature")
  valid_773856 = validateParameter(valid_773856, JString, required = false,
                                 default = nil)
  if valid_773856 != nil:
    section.add "X-Amz-Signature", valid_773856
  var valid_773857 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773857 = validateParameter(valid_773857, JString, required = false,
                                 default = nil)
  if valid_773857 != nil:
    section.add "X-Amz-SignedHeaders", valid_773857
  var valid_773858 = header.getOrDefault("X-Amz-Credential")
  valid_773858 = validateParameter(valid_773858, JString, required = false,
                                 default = nil)
  if valid_773858 != nil:
    section.add "X-Amz-Credential", valid_773858
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773859: Call_GetDeleteDBCluster_773844; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.
  ## 
  let valid = call_773859.validator(path, query, header, formData, body)
  let scheme = call_773859.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773859.url(scheme.get, call_773859.host, call_773859.base,
                         call_773859.route, valid.getOrDefault("path"))
  result = hook(call_773859, url, valid)

proc call*(call_773860: Call_GetDeleteDBCluster_773844;
          DBClusterIdentifier: string; FinalDBSnapshotIdentifier: string = "";
          Action: string = "DeleteDBCluster"; SkipFinalSnapshot: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBCluster
  ## The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is set to <code>false</code>.</p> <note> <p> Specifying this parameter and also setting the <code>SkipFinalShapshot</code> parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   Action: string (required)
  ##   SkipFinalSnapshot: bool
  ##                    : <p> Determines whether a final DB cluster snapshot is created before the DB cluster is deleted. If <code>true</code> is specified, no DB cluster snapshot is created. If <code>false</code> is specified, a DB cluster snapshot is created before the DB cluster is deleted.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
  ##   Version: string (required)
  var query_773861 = newJObject()
  add(query_773861, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_773861, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  add(query_773861, "Action", newJString(Action))
  add(query_773861, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  add(query_773861, "Version", newJString(Version))
  result = call_773860.call(nil, query_773861, nil, nil, nil)

var getDeleteDBCluster* = Call_GetDeleteDBCluster_773844(
    name: "getDeleteDBCluster", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=DeleteDBCluster", validator: validate_GetDeleteDBCluster_773845,
    base: "/", url: url_GetDeleteDBCluster_773846,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBClusterParameterGroup_773897 = ref object of OpenApiRestCall_772581
proc url_PostDeleteDBClusterParameterGroup_773899(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteDBClusterParameterGroup_773898(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773900 = query.getOrDefault("Action")
  valid_773900 = validateParameter(valid_773900, JString, required = true, default = newJString(
      "DeleteDBClusterParameterGroup"))
  if valid_773900 != nil:
    section.add "Action", valid_773900
  var valid_773901 = query.getOrDefault("Version")
  valid_773901 = validateParameter(valid_773901, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773901 != nil:
    section.add "Version", valid_773901
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773902 = header.getOrDefault("X-Amz-Date")
  valid_773902 = validateParameter(valid_773902, JString, required = false,
                                 default = nil)
  if valid_773902 != nil:
    section.add "X-Amz-Date", valid_773902
  var valid_773903 = header.getOrDefault("X-Amz-Security-Token")
  valid_773903 = validateParameter(valid_773903, JString, required = false,
                                 default = nil)
  if valid_773903 != nil:
    section.add "X-Amz-Security-Token", valid_773903
  var valid_773904 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773904 = validateParameter(valid_773904, JString, required = false,
                                 default = nil)
  if valid_773904 != nil:
    section.add "X-Amz-Content-Sha256", valid_773904
  var valid_773905 = header.getOrDefault("X-Amz-Algorithm")
  valid_773905 = validateParameter(valid_773905, JString, required = false,
                                 default = nil)
  if valid_773905 != nil:
    section.add "X-Amz-Algorithm", valid_773905
  var valid_773906 = header.getOrDefault("X-Amz-Signature")
  valid_773906 = validateParameter(valid_773906, JString, required = false,
                                 default = nil)
  if valid_773906 != nil:
    section.add "X-Amz-Signature", valid_773906
  var valid_773907 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773907 = validateParameter(valid_773907, JString, required = false,
                                 default = nil)
  if valid_773907 != nil:
    section.add "X-Amz-SignedHeaders", valid_773907
  var valid_773908 = header.getOrDefault("X-Amz-Credential")
  valid_773908 = validateParameter(valid_773908, JString, required = false,
                                 default = nil)
  if valid_773908 != nil:
    section.add "X-Amz-Credential", valid_773908
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Cannot be associated with any DB clusters.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_773909 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_773909 = validateParameter(valid_773909, JString, required = true,
                                 default = nil)
  if valid_773909 != nil:
    section.add "DBClusterParameterGroupName", valid_773909
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773910: Call_PostDeleteDBClusterParameterGroup_773897;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.
  ## 
  let valid = call_773910.validator(path, query, header, formData, body)
  let scheme = call_773910.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773910.url(scheme.get, call_773910.host, call_773910.base,
                         call_773910.route, valid.getOrDefault("path"))
  result = hook(call_773910, url, valid)

proc call*(call_773911: Call_PostDeleteDBClusterParameterGroup_773897;
          DBClusterParameterGroupName: string;
          Action: string = "DeleteDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBClusterParameterGroup
  ## Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Cannot be associated with any DB clusters.</p> </li> </ul>
  ##   Version: string (required)
  var query_773912 = newJObject()
  var formData_773913 = newJObject()
  add(query_773912, "Action", newJString(Action))
  add(formData_773913, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_773912, "Version", newJString(Version))
  result = call_773911.call(nil, query_773912, nil, formData_773913, nil)

var postDeleteDBClusterParameterGroup* = Call_PostDeleteDBClusterParameterGroup_773897(
    name: "postDeleteDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterParameterGroup",
    validator: validate_PostDeleteDBClusterParameterGroup_773898, base: "/",
    url: url_PostDeleteDBClusterParameterGroup_773899,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBClusterParameterGroup_773881 = ref object of OpenApiRestCall_772581
proc url_GetDeleteDBClusterParameterGroup_773883(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteDBClusterParameterGroup_773882(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Cannot be associated with any DB clusters.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_773884 = query.getOrDefault("DBClusterParameterGroupName")
  valid_773884 = validateParameter(valid_773884, JString, required = true,
                                 default = nil)
  if valid_773884 != nil:
    section.add "DBClusterParameterGroupName", valid_773884
  var valid_773885 = query.getOrDefault("Action")
  valid_773885 = validateParameter(valid_773885, JString, required = true, default = newJString(
      "DeleteDBClusterParameterGroup"))
  if valid_773885 != nil:
    section.add "Action", valid_773885
  var valid_773886 = query.getOrDefault("Version")
  valid_773886 = validateParameter(valid_773886, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773886 != nil:
    section.add "Version", valid_773886
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773887 = header.getOrDefault("X-Amz-Date")
  valid_773887 = validateParameter(valid_773887, JString, required = false,
                                 default = nil)
  if valid_773887 != nil:
    section.add "X-Amz-Date", valid_773887
  var valid_773888 = header.getOrDefault("X-Amz-Security-Token")
  valid_773888 = validateParameter(valid_773888, JString, required = false,
                                 default = nil)
  if valid_773888 != nil:
    section.add "X-Amz-Security-Token", valid_773888
  var valid_773889 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773889 = validateParameter(valid_773889, JString, required = false,
                                 default = nil)
  if valid_773889 != nil:
    section.add "X-Amz-Content-Sha256", valid_773889
  var valid_773890 = header.getOrDefault("X-Amz-Algorithm")
  valid_773890 = validateParameter(valid_773890, JString, required = false,
                                 default = nil)
  if valid_773890 != nil:
    section.add "X-Amz-Algorithm", valid_773890
  var valid_773891 = header.getOrDefault("X-Amz-Signature")
  valid_773891 = validateParameter(valid_773891, JString, required = false,
                                 default = nil)
  if valid_773891 != nil:
    section.add "X-Amz-Signature", valid_773891
  var valid_773892 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773892 = validateParameter(valid_773892, JString, required = false,
                                 default = nil)
  if valid_773892 != nil:
    section.add "X-Amz-SignedHeaders", valid_773892
  var valid_773893 = header.getOrDefault("X-Amz-Credential")
  valid_773893 = validateParameter(valid_773893, JString, required = false,
                                 default = nil)
  if valid_773893 != nil:
    section.add "X-Amz-Credential", valid_773893
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773894: Call_GetDeleteDBClusterParameterGroup_773881;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.
  ## 
  let valid = call_773894.validator(path, query, header, formData, body)
  let scheme = call_773894.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773894.url(scheme.get, call_773894.host, call_773894.base,
                         call_773894.route, valid.getOrDefault("path"))
  result = hook(call_773894, url, valid)

proc call*(call_773895: Call_GetDeleteDBClusterParameterGroup_773881;
          DBClusterParameterGroupName: string;
          Action: string = "DeleteDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBClusterParameterGroup
  ## Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Cannot be associated with any DB clusters.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773896 = newJObject()
  add(query_773896, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_773896, "Action", newJString(Action))
  add(query_773896, "Version", newJString(Version))
  result = call_773895.call(nil, query_773896, nil, nil, nil)

var getDeleteDBClusterParameterGroup* = Call_GetDeleteDBClusterParameterGroup_773881(
    name: "getDeleteDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterParameterGroup",
    validator: validate_GetDeleteDBClusterParameterGroup_773882, base: "/",
    url: url_GetDeleteDBClusterParameterGroup_773883,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBClusterSnapshot_773930 = ref object of OpenApiRestCall_772581
proc url_PostDeleteDBClusterSnapshot_773932(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteDBClusterSnapshot_773931(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773933 = query.getOrDefault("Action")
  valid_773933 = validateParameter(valid_773933, JString, required = true, default = newJString(
      "DeleteDBClusterSnapshot"))
  if valid_773933 != nil:
    section.add "Action", valid_773933
  var valid_773934 = query.getOrDefault("Version")
  valid_773934 = validateParameter(valid_773934, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773934 != nil:
    section.add "Version", valid_773934
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773935 = header.getOrDefault("X-Amz-Date")
  valid_773935 = validateParameter(valid_773935, JString, required = false,
                                 default = nil)
  if valid_773935 != nil:
    section.add "X-Amz-Date", valid_773935
  var valid_773936 = header.getOrDefault("X-Amz-Security-Token")
  valid_773936 = validateParameter(valid_773936, JString, required = false,
                                 default = nil)
  if valid_773936 != nil:
    section.add "X-Amz-Security-Token", valid_773936
  var valid_773937 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773937 = validateParameter(valid_773937, JString, required = false,
                                 default = nil)
  if valid_773937 != nil:
    section.add "X-Amz-Content-Sha256", valid_773937
  var valid_773938 = header.getOrDefault("X-Amz-Algorithm")
  valid_773938 = validateParameter(valid_773938, JString, required = false,
                                 default = nil)
  if valid_773938 != nil:
    section.add "X-Amz-Algorithm", valid_773938
  var valid_773939 = header.getOrDefault("X-Amz-Signature")
  valid_773939 = validateParameter(valid_773939, JString, required = false,
                                 default = nil)
  if valid_773939 != nil:
    section.add "X-Amz-Signature", valid_773939
  var valid_773940 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773940 = validateParameter(valid_773940, JString, required = false,
                                 default = nil)
  if valid_773940 != nil:
    section.add "X-Amz-SignedHeaders", valid_773940
  var valid_773941 = header.getOrDefault("X-Amz-Credential")
  valid_773941 = validateParameter(valid_773941, JString, required = false,
                                 default = nil)
  if valid_773941 != nil:
    section.add "X-Amz-Credential", valid_773941
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_773942 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_773942 = validateParameter(valid_773942, JString, required = true,
                                 default = nil)
  if valid_773942 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_773942
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773943: Call_PostDeleteDBClusterSnapshot_773930; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  let valid = call_773943.validator(path, query, header, formData, body)
  let scheme = call_773943.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773943.url(scheme.get, call_773943.host, call_773943.base,
                         call_773943.route, valid.getOrDefault("path"))
  result = hook(call_773943, url, valid)

proc call*(call_773944: Call_PostDeleteDBClusterSnapshot_773930;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DeleteDBClusterSnapshot"; Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBClusterSnapshot
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773945 = newJObject()
  var formData_773946 = newJObject()
  add(formData_773946, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_773945, "Action", newJString(Action))
  add(query_773945, "Version", newJString(Version))
  result = call_773944.call(nil, query_773945, nil, formData_773946, nil)

var postDeleteDBClusterSnapshot* = Call_PostDeleteDBClusterSnapshot_773930(
    name: "postDeleteDBClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterSnapshot",
    validator: validate_PostDeleteDBClusterSnapshot_773931, base: "/",
    url: url_PostDeleteDBClusterSnapshot_773932,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBClusterSnapshot_773914 = ref object of OpenApiRestCall_772581
proc url_GetDeleteDBClusterSnapshot_773916(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteDBClusterSnapshot_773915(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_773917 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_773917 = validateParameter(valid_773917, JString, required = true,
                                 default = nil)
  if valid_773917 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_773917
  var valid_773918 = query.getOrDefault("Action")
  valid_773918 = validateParameter(valid_773918, JString, required = true, default = newJString(
      "DeleteDBClusterSnapshot"))
  if valid_773918 != nil:
    section.add "Action", valid_773918
  var valid_773919 = query.getOrDefault("Version")
  valid_773919 = validateParameter(valid_773919, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773919 != nil:
    section.add "Version", valid_773919
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773920 = header.getOrDefault("X-Amz-Date")
  valid_773920 = validateParameter(valid_773920, JString, required = false,
                                 default = nil)
  if valid_773920 != nil:
    section.add "X-Amz-Date", valid_773920
  var valid_773921 = header.getOrDefault("X-Amz-Security-Token")
  valid_773921 = validateParameter(valid_773921, JString, required = false,
                                 default = nil)
  if valid_773921 != nil:
    section.add "X-Amz-Security-Token", valid_773921
  var valid_773922 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773922 = validateParameter(valid_773922, JString, required = false,
                                 default = nil)
  if valid_773922 != nil:
    section.add "X-Amz-Content-Sha256", valid_773922
  var valid_773923 = header.getOrDefault("X-Amz-Algorithm")
  valid_773923 = validateParameter(valid_773923, JString, required = false,
                                 default = nil)
  if valid_773923 != nil:
    section.add "X-Amz-Algorithm", valid_773923
  var valid_773924 = header.getOrDefault("X-Amz-Signature")
  valid_773924 = validateParameter(valid_773924, JString, required = false,
                                 default = nil)
  if valid_773924 != nil:
    section.add "X-Amz-Signature", valid_773924
  var valid_773925 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773925 = validateParameter(valid_773925, JString, required = false,
                                 default = nil)
  if valid_773925 != nil:
    section.add "X-Amz-SignedHeaders", valid_773925
  var valid_773926 = header.getOrDefault("X-Amz-Credential")
  valid_773926 = validateParameter(valid_773926, JString, required = false,
                                 default = nil)
  if valid_773926 != nil:
    section.add "X-Amz-Credential", valid_773926
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773927: Call_GetDeleteDBClusterSnapshot_773914; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  let valid = call_773927.validator(path, query, header, formData, body)
  let scheme = call_773927.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773927.url(scheme.get, call_773927.host, call_773927.base,
                         call_773927.route, valid.getOrDefault("path"))
  result = hook(call_773927, url, valid)

proc call*(call_773928: Call_GetDeleteDBClusterSnapshot_773914;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DeleteDBClusterSnapshot"; Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBClusterSnapshot
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773929 = newJObject()
  add(query_773929, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_773929, "Action", newJString(Action))
  add(query_773929, "Version", newJString(Version))
  result = call_773928.call(nil, query_773929, nil, nil, nil)

var getDeleteDBClusterSnapshot* = Call_GetDeleteDBClusterSnapshot_773914(
    name: "getDeleteDBClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterSnapshot",
    validator: validate_GetDeleteDBClusterSnapshot_773915, base: "/",
    url: url_GetDeleteDBClusterSnapshot_773916,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBInstance_773965 = ref object of OpenApiRestCall_772581
proc url_PostDeleteDBInstance_773967(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteDBInstance_773966(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon Neptune DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted.</p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when the <code>SkipFinalSnapshot</code> parameter is set to <code>true</code>.</p> <p>You can't delete a DB instance if it is the only instance in the DB cluster.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773968 = query.getOrDefault("Action")
  valid_773968 = validateParameter(valid_773968, JString, required = true,
                                 default = newJString("DeleteDBInstance"))
  if valid_773968 != nil:
    section.add "Action", valid_773968
  var valid_773969 = query.getOrDefault("Version")
  valid_773969 = validateParameter(valid_773969, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773969 != nil:
    section.add "Version", valid_773969
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773970 = header.getOrDefault("X-Amz-Date")
  valid_773970 = validateParameter(valid_773970, JString, required = false,
                                 default = nil)
  if valid_773970 != nil:
    section.add "X-Amz-Date", valid_773970
  var valid_773971 = header.getOrDefault("X-Amz-Security-Token")
  valid_773971 = validateParameter(valid_773971, JString, required = false,
                                 default = nil)
  if valid_773971 != nil:
    section.add "X-Amz-Security-Token", valid_773971
  var valid_773972 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773972 = validateParameter(valid_773972, JString, required = false,
                                 default = nil)
  if valid_773972 != nil:
    section.add "X-Amz-Content-Sha256", valid_773972
  var valid_773973 = header.getOrDefault("X-Amz-Algorithm")
  valid_773973 = validateParameter(valid_773973, JString, required = false,
                                 default = nil)
  if valid_773973 != nil:
    section.add "X-Amz-Algorithm", valid_773973
  var valid_773974 = header.getOrDefault("X-Amz-Signature")
  valid_773974 = validateParameter(valid_773974, JString, required = false,
                                 default = nil)
  if valid_773974 != nil:
    section.add "X-Amz-Signature", valid_773974
  var valid_773975 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773975 = validateParameter(valid_773975, JString, required = false,
                                 default = nil)
  if valid_773975 != nil:
    section.add "X-Amz-SignedHeaders", valid_773975
  var valid_773976 = header.getOrDefault("X-Amz-Credential")
  valid_773976 = validateParameter(valid_773976, JString, required = false,
                                 default = nil)
  if valid_773976 != nil:
    section.add "X-Amz-Credential", valid_773976
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The DBSnapshotIdentifier of the new DBSnapshot created when SkipFinalSnapshot is set to <code>false</code>.</p> <note> <p>Specifying this parameter and also setting the SkipFinalShapshot parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Cannot be specified when deleting a Read Replica.</p> </li> </ul>
  ##   SkipFinalSnapshot: JBool
  ##                    : <p> Determines whether a final DB snapshot is created before the DB instance is deleted. If <code>true</code> is specified, no DBSnapshot is created. If <code>false</code> is specified, a DB snapshot is created before the DB instance is deleted.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when the SkipFinalSnapshot parameter is set to "true".</p> <p>Specify <code>true</code> when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if SkipFinalSnapshot is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_773977 = formData.getOrDefault("DBInstanceIdentifier")
  valid_773977 = validateParameter(valid_773977, JString, required = true,
                                 default = nil)
  if valid_773977 != nil:
    section.add "DBInstanceIdentifier", valid_773977
  var valid_773978 = formData.getOrDefault("FinalDBSnapshotIdentifier")
  valid_773978 = validateParameter(valid_773978, JString, required = false,
                                 default = nil)
  if valid_773978 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_773978
  var valid_773979 = formData.getOrDefault("SkipFinalSnapshot")
  valid_773979 = validateParameter(valid_773979, JBool, required = false, default = nil)
  if valid_773979 != nil:
    section.add "SkipFinalSnapshot", valid_773979
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773980: Call_PostDeleteDBInstance_773965; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon Neptune DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted.</p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when the <code>SkipFinalSnapshot</code> parameter is set to <code>true</code>.</p> <p>You can't delete a DB instance if it is the only instance in the DB cluster.</p>
  ## 
  let valid = call_773980.validator(path, query, header, formData, body)
  let scheme = call_773980.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773980.url(scheme.get, call_773980.host, call_773980.base,
                         call_773980.route, valid.getOrDefault("path"))
  result = hook(call_773980, url, valid)

proc call*(call_773981: Call_PostDeleteDBInstance_773965;
          DBInstanceIdentifier: string; FinalDBSnapshotIdentifier: string = "";
          Action: string = "DeleteDBInstance"; Version: string = "2014-10-31";
          SkipFinalSnapshot: bool = false): Recallable =
  ## postDeleteDBInstance
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon Neptune DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted.</p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when the <code>SkipFinalSnapshot</code> parameter is set to <code>true</code>.</p> <p>You can't delete a DB instance if it is the only instance in the DB cluster.</p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The DBSnapshotIdentifier of the new DBSnapshot created when SkipFinalSnapshot is set to <code>false</code>.</p> <note> <p>Specifying this parameter and also setting the SkipFinalShapshot parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Cannot be specified when deleting a Read Replica.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   SkipFinalSnapshot: bool
  ##                    : <p> Determines whether a final DB snapshot is created before the DB instance is deleted. If <code>true</code> is specified, no DBSnapshot is created. If <code>false</code> is specified, a DB snapshot is created before the DB instance is deleted.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when the SkipFinalSnapshot parameter is set to "true".</p> <p>Specify <code>true</code> when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if SkipFinalSnapshot is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
  var query_773982 = newJObject()
  var formData_773983 = newJObject()
  add(formData_773983, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_773983, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  add(query_773982, "Action", newJString(Action))
  add(query_773982, "Version", newJString(Version))
  add(formData_773983, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  result = call_773981.call(nil, query_773982, nil, formData_773983, nil)

var postDeleteDBInstance* = Call_PostDeleteDBInstance_773965(
    name: "postDeleteDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBInstance",
    validator: validate_PostDeleteDBInstance_773966, base: "/",
    url: url_PostDeleteDBInstance_773967, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBInstance_773947 = ref object of OpenApiRestCall_772581
proc url_GetDeleteDBInstance_773949(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteDBInstance_773948(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon Neptune DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted.</p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when the <code>SkipFinalSnapshot</code> parameter is set to <code>true</code>.</p> <p>You can't delete a DB instance if it is the only instance in the DB cluster.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The DBSnapshotIdentifier of the new DBSnapshot created when SkipFinalSnapshot is set to <code>false</code>.</p> <note> <p>Specifying this parameter and also setting the SkipFinalShapshot parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Cannot be specified when deleting a Read Replica.</p> </li> </ul>
  ##   Action: JString (required)
  ##   SkipFinalSnapshot: JBool
  ##                    : <p> Determines whether a final DB snapshot is created before the DB instance is deleted. If <code>true</code> is specified, no DBSnapshot is created. If <code>false</code> is specified, a DB snapshot is created before the DB instance is deleted.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when the SkipFinalSnapshot parameter is set to "true".</p> <p>Specify <code>true</code> when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if SkipFinalSnapshot is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  section = newJObject()
  var valid_773950 = query.getOrDefault("FinalDBSnapshotIdentifier")
  valid_773950 = validateParameter(valid_773950, JString, required = false,
                                 default = nil)
  if valid_773950 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_773950
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773951 = query.getOrDefault("Action")
  valid_773951 = validateParameter(valid_773951, JString, required = true,
                                 default = newJString("DeleteDBInstance"))
  if valid_773951 != nil:
    section.add "Action", valid_773951
  var valid_773952 = query.getOrDefault("SkipFinalSnapshot")
  valid_773952 = validateParameter(valid_773952, JBool, required = false, default = nil)
  if valid_773952 != nil:
    section.add "SkipFinalSnapshot", valid_773952
  var valid_773953 = query.getOrDefault("Version")
  valid_773953 = validateParameter(valid_773953, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773953 != nil:
    section.add "Version", valid_773953
  var valid_773954 = query.getOrDefault("DBInstanceIdentifier")
  valid_773954 = validateParameter(valid_773954, JString, required = true,
                                 default = nil)
  if valid_773954 != nil:
    section.add "DBInstanceIdentifier", valid_773954
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773955 = header.getOrDefault("X-Amz-Date")
  valid_773955 = validateParameter(valid_773955, JString, required = false,
                                 default = nil)
  if valid_773955 != nil:
    section.add "X-Amz-Date", valid_773955
  var valid_773956 = header.getOrDefault("X-Amz-Security-Token")
  valid_773956 = validateParameter(valid_773956, JString, required = false,
                                 default = nil)
  if valid_773956 != nil:
    section.add "X-Amz-Security-Token", valid_773956
  var valid_773957 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773957 = validateParameter(valid_773957, JString, required = false,
                                 default = nil)
  if valid_773957 != nil:
    section.add "X-Amz-Content-Sha256", valid_773957
  var valid_773958 = header.getOrDefault("X-Amz-Algorithm")
  valid_773958 = validateParameter(valid_773958, JString, required = false,
                                 default = nil)
  if valid_773958 != nil:
    section.add "X-Amz-Algorithm", valid_773958
  var valid_773959 = header.getOrDefault("X-Amz-Signature")
  valid_773959 = validateParameter(valid_773959, JString, required = false,
                                 default = nil)
  if valid_773959 != nil:
    section.add "X-Amz-Signature", valid_773959
  var valid_773960 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773960 = validateParameter(valid_773960, JString, required = false,
                                 default = nil)
  if valid_773960 != nil:
    section.add "X-Amz-SignedHeaders", valid_773960
  var valid_773961 = header.getOrDefault("X-Amz-Credential")
  valid_773961 = validateParameter(valid_773961, JString, required = false,
                                 default = nil)
  if valid_773961 != nil:
    section.add "X-Amz-Credential", valid_773961
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773962: Call_GetDeleteDBInstance_773947; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon Neptune DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted.</p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when the <code>SkipFinalSnapshot</code> parameter is set to <code>true</code>.</p> <p>You can't delete a DB instance if it is the only instance in the DB cluster.</p>
  ## 
  let valid = call_773962.validator(path, query, header, formData, body)
  let scheme = call_773962.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773962.url(scheme.get, call_773962.host, call_773962.base,
                         call_773962.route, valid.getOrDefault("path"))
  result = hook(call_773962, url, valid)

proc call*(call_773963: Call_GetDeleteDBInstance_773947;
          DBInstanceIdentifier: string; FinalDBSnapshotIdentifier: string = "";
          Action: string = "DeleteDBInstance"; SkipFinalSnapshot: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBInstance
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon Neptune DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted.</p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when the <code>SkipFinalSnapshot</code> parameter is set to <code>true</code>.</p> <p>You can't delete a DB instance if it is the only instance in the DB cluster.</p>
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The DBSnapshotIdentifier of the new DBSnapshot created when SkipFinalSnapshot is set to <code>false</code>.</p> <note> <p>Specifying this parameter and also setting the SkipFinalShapshot parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Cannot be specified when deleting a Read Replica.</p> </li> </ul>
  ##   Action: string (required)
  ##   SkipFinalSnapshot: bool
  ##                    : <p> Determines whether a final DB snapshot is created before the DB instance is deleted. If <code>true</code> is specified, no DBSnapshot is created. If <code>false</code> is specified, a DB snapshot is created before the DB instance is deleted.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when the SkipFinalSnapshot parameter is set to "true".</p> <p>Specify <code>true</code> when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if SkipFinalSnapshot is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  var query_773964 = newJObject()
  add(query_773964, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  add(query_773964, "Action", newJString(Action))
  add(query_773964, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  add(query_773964, "Version", newJString(Version))
  add(query_773964, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  result = call_773963.call(nil, query_773964, nil, nil, nil)

var getDeleteDBInstance* = Call_GetDeleteDBInstance_773947(
    name: "getDeleteDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBInstance",
    validator: validate_GetDeleteDBInstance_773948, base: "/",
    url: url_GetDeleteDBInstance_773949, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBParameterGroup_774000 = ref object of OpenApiRestCall_772581
proc url_PostDeleteDBParameterGroup_774002(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteDBParameterGroup_774001(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a specified DBParameterGroup. The DBParameterGroup to be deleted can't be associated with any DB instances.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774003 = query.getOrDefault("Action")
  valid_774003 = validateParameter(valid_774003, JString, required = true,
                                 default = newJString("DeleteDBParameterGroup"))
  if valid_774003 != nil:
    section.add "Action", valid_774003
  var valid_774004 = query.getOrDefault("Version")
  valid_774004 = validateParameter(valid_774004, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774004 != nil:
    section.add "Version", valid_774004
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774005 = header.getOrDefault("X-Amz-Date")
  valid_774005 = validateParameter(valid_774005, JString, required = false,
                                 default = nil)
  if valid_774005 != nil:
    section.add "X-Amz-Date", valid_774005
  var valid_774006 = header.getOrDefault("X-Amz-Security-Token")
  valid_774006 = validateParameter(valid_774006, JString, required = false,
                                 default = nil)
  if valid_774006 != nil:
    section.add "X-Amz-Security-Token", valid_774006
  var valid_774007 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774007 = validateParameter(valid_774007, JString, required = false,
                                 default = nil)
  if valid_774007 != nil:
    section.add "X-Amz-Content-Sha256", valid_774007
  var valid_774008 = header.getOrDefault("X-Amz-Algorithm")
  valid_774008 = validateParameter(valid_774008, JString, required = false,
                                 default = nil)
  if valid_774008 != nil:
    section.add "X-Amz-Algorithm", valid_774008
  var valid_774009 = header.getOrDefault("X-Amz-Signature")
  valid_774009 = validateParameter(valid_774009, JString, required = false,
                                 default = nil)
  if valid_774009 != nil:
    section.add "X-Amz-Signature", valid_774009
  var valid_774010 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774010 = validateParameter(valid_774010, JString, required = false,
                                 default = nil)
  if valid_774010 != nil:
    section.add "X-Amz-SignedHeaders", valid_774010
  var valid_774011 = header.getOrDefault("X-Amz-Credential")
  valid_774011 = validateParameter(valid_774011, JString, required = false,
                                 default = nil)
  if valid_774011 != nil:
    section.add "X-Amz-Credential", valid_774011
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Cannot be associated with any DB instances</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_774012 = formData.getOrDefault("DBParameterGroupName")
  valid_774012 = validateParameter(valid_774012, JString, required = true,
                                 default = nil)
  if valid_774012 != nil:
    section.add "DBParameterGroupName", valid_774012
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774013: Call_PostDeleteDBParameterGroup_774000; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a specified DBParameterGroup. The DBParameterGroup to be deleted can't be associated with any DB instances.
  ## 
  let valid = call_774013.validator(path, query, header, formData, body)
  let scheme = call_774013.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774013.url(scheme.get, call_774013.host, call_774013.base,
                         call_774013.route, valid.getOrDefault("path"))
  result = hook(call_774013, url, valid)

proc call*(call_774014: Call_PostDeleteDBParameterGroup_774000;
          DBParameterGroupName: string; Action: string = "DeleteDBParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBParameterGroup
  ## Deletes a specified DBParameterGroup. The DBParameterGroup to be deleted can't be associated with any DB instances.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Cannot be associated with any DB instances</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774015 = newJObject()
  var formData_774016 = newJObject()
  add(formData_774016, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_774015, "Action", newJString(Action))
  add(query_774015, "Version", newJString(Version))
  result = call_774014.call(nil, query_774015, nil, formData_774016, nil)

var postDeleteDBParameterGroup* = Call_PostDeleteDBParameterGroup_774000(
    name: "postDeleteDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBParameterGroup",
    validator: validate_PostDeleteDBParameterGroup_774001, base: "/",
    url: url_PostDeleteDBParameterGroup_774002,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBParameterGroup_773984 = ref object of OpenApiRestCall_772581
proc url_GetDeleteDBParameterGroup_773986(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteDBParameterGroup_773985(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a specified DBParameterGroup. The DBParameterGroup to be deleted can't be associated with any DB instances.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Cannot be associated with any DB instances</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_773987 = query.getOrDefault("DBParameterGroupName")
  valid_773987 = validateParameter(valid_773987, JString, required = true,
                                 default = nil)
  if valid_773987 != nil:
    section.add "DBParameterGroupName", valid_773987
  var valid_773988 = query.getOrDefault("Action")
  valid_773988 = validateParameter(valid_773988, JString, required = true,
                                 default = newJString("DeleteDBParameterGroup"))
  if valid_773988 != nil:
    section.add "Action", valid_773988
  var valid_773989 = query.getOrDefault("Version")
  valid_773989 = validateParameter(valid_773989, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773989 != nil:
    section.add "Version", valid_773989
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773990 = header.getOrDefault("X-Amz-Date")
  valid_773990 = validateParameter(valid_773990, JString, required = false,
                                 default = nil)
  if valid_773990 != nil:
    section.add "X-Amz-Date", valid_773990
  var valid_773991 = header.getOrDefault("X-Amz-Security-Token")
  valid_773991 = validateParameter(valid_773991, JString, required = false,
                                 default = nil)
  if valid_773991 != nil:
    section.add "X-Amz-Security-Token", valid_773991
  var valid_773992 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773992 = validateParameter(valid_773992, JString, required = false,
                                 default = nil)
  if valid_773992 != nil:
    section.add "X-Amz-Content-Sha256", valid_773992
  var valid_773993 = header.getOrDefault("X-Amz-Algorithm")
  valid_773993 = validateParameter(valid_773993, JString, required = false,
                                 default = nil)
  if valid_773993 != nil:
    section.add "X-Amz-Algorithm", valid_773993
  var valid_773994 = header.getOrDefault("X-Amz-Signature")
  valid_773994 = validateParameter(valid_773994, JString, required = false,
                                 default = nil)
  if valid_773994 != nil:
    section.add "X-Amz-Signature", valid_773994
  var valid_773995 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773995 = validateParameter(valid_773995, JString, required = false,
                                 default = nil)
  if valid_773995 != nil:
    section.add "X-Amz-SignedHeaders", valid_773995
  var valid_773996 = header.getOrDefault("X-Amz-Credential")
  valid_773996 = validateParameter(valid_773996, JString, required = false,
                                 default = nil)
  if valid_773996 != nil:
    section.add "X-Amz-Credential", valid_773996
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773997: Call_GetDeleteDBParameterGroup_773984; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a specified DBParameterGroup. The DBParameterGroup to be deleted can't be associated with any DB instances.
  ## 
  let valid = call_773997.validator(path, query, header, formData, body)
  let scheme = call_773997.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773997.url(scheme.get, call_773997.host, call_773997.base,
                         call_773997.route, valid.getOrDefault("path"))
  result = hook(call_773997, url, valid)

proc call*(call_773998: Call_GetDeleteDBParameterGroup_773984;
          DBParameterGroupName: string; Action: string = "DeleteDBParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBParameterGroup
  ## Deletes a specified DBParameterGroup. The DBParameterGroup to be deleted can't be associated with any DB instances.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Cannot be associated with any DB instances</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773999 = newJObject()
  add(query_773999, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_773999, "Action", newJString(Action))
  add(query_773999, "Version", newJString(Version))
  result = call_773998.call(nil, query_773999, nil, nil, nil)

var getDeleteDBParameterGroup* = Call_GetDeleteDBParameterGroup_773984(
    name: "getDeleteDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBParameterGroup",
    validator: validate_GetDeleteDBParameterGroup_773985, base: "/",
    url: url_GetDeleteDBParameterGroup_773986,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBSubnetGroup_774033 = ref object of OpenApiRestCall_772581
proc url_PostDeleteDBSubnetGroup_774035(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteDBSubnetGroup_774034(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774036 = query.getOrDefault("Action")
  valid_774036 = validateParameter(valid_774036, JString, required = true,
                                 default = newJString("DeleteDBSubnetGroup"))
  if valid_774036 != nil:
    section.add "Action", valid_774036
  var valid_774037 = query.getOrDefault("Version")
  valid_774037 = validateParameter(valid_774037, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774037 != nil:
    section.add "Version", valid_774037
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774038 = header.getOrDefault("X-Amz-Date")
  valid_774038 = validateParameter(valid_774038, JString, required = false,
                                 default = nil)
  if valid_774038 != nil:
    section.add "X-Amz-Date", valid_774038
  var valid_774039 = header.getOrDefault("X-Amz-Security-Token")
  valid_774039 = validateParameter(valid_774039, JString, required = false,
                                 default = nil)
  if valid_774039 != nil:
    section.add "X-Amz-Security-Token", valid_774039
  var valid_774040 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774040 = validateParameter(valid_774040, JString, required = false,
                                 default = nil)
  if valid_774040 != nil:
    section.add "X-Amz-Content-Sha256", valid_774040
  var valid_774041 = header.getOrDefault("X-Amz-Algorithm")
  valid_774041 = validateParameter(valid_774041, JString, required = false,
                                 default = nil)
  if valid_774041 != nil:
    section.add "X-Amz-Algorithm", valid_774041
  var valid_774042 = header.getOrDefault("X-Amz-Signature")
  valid_774042 = validateParameter(valid_774042, JString, required = false,
                                 default = nil)
  if valid_774042 != nil:
    section.add "X-Amz-Signature", valid_774042
  var valid_774043 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774043 = validateParameter(valid_774043, JString, required = false,
                                 default = nil)
  if valid_774043 != nil:
    section.add "X-Amz-SignedHeaders", valid_774043
  var valid_774044 = header.getOrDefault("X-Amz-Credential")
  valid_774044 = validateParameter(valid_774044, JString, required = false,
                                 default = nil)
  if valid_774044 != nil:
    section.add "X-Amz-Credential", valid_774044
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSubnetGroupName` field"
  var valid_774045 = formData.getOrDefault("DBSubnetGroupName")
  valid_774045 = validateParameter(valid_774045, JString, required = true,
                                 default = nil)
  if valid_774045 != nil:
    section.add "DBSubnetGroupName", valid_774045
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774046: Call_PostDeleteDBSubnetGroup_774033; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  let valid = call_774046.validator(path, query, header, formData, body)
  let scheme = call_774046.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774046.url(scheme.get, call_774046.host, call_774046.base,
                         call_774046.route, valid.getOrDefault("path"))
  result = hook(call_774046, url, valid)

proc call*(call_774047: Call_PostDeleteDBSubnetGroup_774033;
          DBSubnetGroupName: string; Action: string = "DeleteDBSubnetGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBSubnetGroup
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774048 = newJObject()
  var formData_774049 = newJObject()
  add(formData_774049, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_774048, "Action", newJString(Action))
  add(query_774048, "Version", newJString(Version))
  result = call_774047.call(nil, query_774048, nil, formData_774049, nil)

var postDeleteDBSubnetGroup* = Call_PostDeleteDBSubnetGroup_774033(
    name: "postDeleteDBSubnetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSubnetGroup",
    validator: validate_PostDeleteDBSubnetGroup_774034, base: "/",
    url: url_PostDeleteDBSubnetGroup_774035, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBSubnetGroup_774017 = ref object of OpenApiRestCall_772581
proc url_GetDeleteDBSubnetGroup_774019(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteDBSubnetGroup_774018(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774020 = query.getOrDefault("Action")
  valid_774020 = validateParameter(valid_774020, JString, required = true,
                                 default = newJString("DeleteDBSubnetGroup"))
  if valid_774020 != nil:
    section.add "Action", valid_774020
  var valid_774021 = query.getOrDefault("DBSubnetGroupName")
  valid_774021 = validateParameter(valid_774021, JString, required = true,
                                 default = nil)
  if valid_774021 != nil:
    section.add "DBSubnetGroupName", valid_774021
  var valid_774022 = query.getOrDefault("Version")
  valid_774022 = validateParameter(valid_774022, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774022 != nil:
    section.add "Version", valid_774022
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774023 = header.getOrDefault("X-Amz-Date")
  valid_774023 = validateParameter(valid_774023, JString, required = false,
                                 default = nil)
  if valid_774023 != nil:
    section.add "X-Amz-Date", valid_774023
  var valid_774024 = header.getOrDefault("X-Amz-Security-Token")
  valid_774024 = validateParameter(valid_774024, JString, required = false,
                                 default = nil)
  if valid_774024 != nil:
    section.add "X-Amz-Security-Token", valid_774024
  var valid_774025 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774025 = validateParameter(valid_774025, JString, required = false,
                                 default = nil)
  if valid_774025 != nil:
    section.add "X-Amz-Content-Sha256", valid_774025
  var valid_774026 = header.getOrDefault("X-Amz-Algorithm")
  valid_774026 = validateParameter(valid_774026, JString, required = false,
                                 default = nil)
  if valid_774026 != nil:
    section.add "X-Amz-Algorithm", valid_774026
  var valid_774027 = header.getOrDefault("X-Amz-Signature")
  valid_774027 = validateParameter(valid_774027, JString, required = false,
                                 default = nil)
  if valid_774027 != nil:
    section.add "X-Amz-Signature", valid_774027
  var valid_774028 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774028 = validateParameter(valid_774028, JString, required = false,
                                 default = nil)
  if valid_774028 != nil:
    section.add "X-Amz-SignedHeaders", valid_774028
  var valid_774029 = header.getOrDefault("X-Amz-Credential")
  valid_774029 = validateParameter(valid_774029, JString, required = false,
                                 default = nil)
  if valid_774029 != nil:
    section.add "X-Amz-Credential", valid_774029
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774030: Call_GetDeleteDBSubnetGroup_774017; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  let valid = call_774030.validator(path, query, header, formData, body)
  let scheme = call_774030.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774030.url(scheme.get, call_774030.host, call_774030.base,
                         call_774030.route, valid.getOrDefault("path"))
  result = hook(call_774030, url, valid)

proc call*(call_774031: Call_GetDeleteDBSubnetGroup_774017;
          DBSubnetGroupName: string; Action: string = "DeleteDBSubnetGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBSubnetGroup
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ##   Action: string (required)
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_774032 = newJObject()
  add(query_774032, "Action", newJString(Action))
  add(query_774032, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_774032, "Version", newJString(Version))
  result = call_774031.call(nil, query_774032, nil, nil, nil)

var getDeleteDBSubnetGroup* = Call_GetDeleteDBSubnetGroup_774017(
    name: "getDeleteDBSubnetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSubnetGroup",
    validator: validate_GetDeleteDBSubnetGroup_774018, base: "/",
    url: url_GetDeleteDBSubnetGroup_774019, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteEventSubscription_774066 = ref object of OpenApiRestCall_772581
proc url_PostDeleteEventSubscription_774068(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteEventSubscription_774067(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774069 = query.getOrDefault("Action")
  valid_774069 = validateParameter(valid_774069, JString, required = true, default = newJString(
      "DeleteEventSubscription"))
  if valid_774069 != nil:
    section.add "Action", valid_774069
  var valid_774070 = query.getOrDefault("Version")
  valid_774070 = validateParameter(valid_774070, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774070 != nil:
    section.add "Version", valid_774070
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774071 = header.getOrDefault("X-Amz-Date")
  valid_774071 = validateParameter(valid_774071, JString, required = false,
                                 default = nil)
  if valid_774071 != nil:
    section.add "X-Amz-Date", valid_774071
  var valid_774072 = header.getOrDefault("X-Amz-Security-Token")
  valid_774072 = validateParameter(valid_774072, JString, required = false,
                                 default = nil)
  if valid_774072 != nil:
    section.add "X-Amz-Security-Token", valid_774072
  var valid_774073 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774073 = validateParameter(valid_774073, JString, required = false,
                                 default = nil)
  if valid_774073 != nil:
    section.add "X-Amz-Content-Sha256", valid_774073
  var valid_774074 = header.getOrDefault("X-Amz-Algorithm")
  valid_774074 = validateParameter(valid_774074, JString, required = false,
                                 default = nil)
  if valid_774074 != nil:
    section.add "X-Amz-Algorithm", valid_774074
  var valid_774075 = header.getOrDefault("X-Amz-Signature")
  valid_774075 = validateParameter(valid_774075, JString, required = false,
                                 default = nil)
  if valid_774075 != nil:
    section.add "X-Amz-Signature", valid_774075
  var valid_774076 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774076 = validateParameter(valid_774076, JString, required = false,
                                 default = nil)
  if valid_774076 != nil:
    section.add "X-Amz-SignedHeaders", valid_774076
  var valid_774077 = header.getOrDefault("X-Amz-Credential")
  valid_774077 = validateParameter(valid_774077, JString, required = false,
                                 default = nil)
  if valid_774077 != nil:
    section.add "X-Amz-Credential", valid_774077
  result.add "header", section
  ## parameters in `formData` object:
  ##   SubscriptionName: JString (required)
  ##                   : The name of the event notification subscription you want to delete.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_774078 = formData.getOrDefault("SubscriptionName")
  valid_774078 = validateParameter(valid_774078, JString, required = true,
                                 default = nil)
  if valid_774078 != nil:
    section.add "SubscriptionName", valid_774078
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774079: Call_PostDeleteEventSubscription_774066; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an event notification subscription.
  ## 
  let valid = call_774079.validator(path, query, header, formData, body)
  let scheme = call_774079.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774079.url(scheme.get, call_774079.host, call_774079.base,
                         call_774079.route, valid.getOrDefault("path"))
  result = hook(call_774079, url, valid)

proc call*(call_774080: Call_PostDeleteEventSubscription_774066;
          SubscriptionName: string; Action: string = "DeleteEventSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteEventSubscription
  ## Deletes an event notification subscription.
  ##   SubscriptionName: string (required)
  ##                   : The name of the event notification subscription you want to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774081 = newJObject()
  var formData_774082 = newJObject()
  add(formData_774082, "SubscriptionName", newJString(SubscriptionName))
  add(query_774081, "Action", newJString(Action))
  add(query_774081, "Version", newJString(Version))
  result = call_774080.call(nil, query_774081, nil, formData_774082, nil)

var postDeleteEventSubscription* = Call_PostDeleteEventSubscription_774066(
    name: "postDeleteEventSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteEventSubscription",
    validator: validate_PostDeleteEventSubscription_774067, base: "/",
    url: url_PostDeleteEventSubscription_774068,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteEventSubscription_774050 = ref object of OpenApiRestCall_772581
proc url_GetDeleteEventSubscription_774052(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteEventSubscription_774051(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   SubscriptionName: JString (required)
  ##                   : The name of the event notification subscription you want to delete.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774053 = query.getOrDefault("Action")
  valid_774053 = validateParameter(valid_774053, JString, required = true, default = newJString(
      "DeleteEventSubscription"))
  if valid_774053 != nil:
    section.add "Action", valid_774053
  var valid_774054 = query.getOrDefault("SubscriptionName")
  valid_774054 = validateParameter(valid_774054, JString, required = true,
                                 default = nil)
  if valid_774054 != nil:
    section.add "SubscriptionName", valid_774054
  var valid_774055 = query.getOrDefault("Version")
  valid_774055 = validateParameter(valid_774055, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774055 != nil:
    section.add "Version", valid_774055
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774056 = header.getOrDefault("X-Amz-Date")
  valid_774056 = validateParameter(valid_774056, JString, required = false,
                                 default = nil)
  if valid_774056 != nil:
    section.add "X-Amz-Date", valid_774056
  var valid_774057 = header.getOrDefault("X-Amz-Security-Token")
  valid_774057 = validateParameter(valid_774057, JString, required = false,
                                 default = nil)
  if valid_774057 != nil:
    section.add "X-Amz-Security-Token", valid_774057
  var valid_774058 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774058 = validateParameter(valid_774058, JString, required = false,
                                 default = nil)
  if valid_774058 != nil:
    section.add "X-Amz-Content-Sha256", valid_774058
  var valid_774059 = header.getOrDefault("X-Amz-Algorithm")
  valid_774059 = validateParameter(valid_774059, JString, required = false,
                                 default = nil)
  if valid_774059 != nil:
    section.add "X-Amz-Algorithm", valid_774059
  var valid_774060 = header.getOrDefault("X-Amz-Signature")
  valid_774060 = validateParameter(valid_774060, JString, required = false,
                                 default = nil)
  if valid_774060 != nil:
    section.add "X-Amz-Signature", valid_774060
  var valid_774061 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774061 = validateParameter(valid_774061, JString, required = false,
                                 default = nil)
  if valid_774061 != nil:
    section.add "X-Amz-SignedHeaders", valid_774061
  var valid_774062 = header.getOrDefault("X-Amz-Credential")
  valid_774062 = validateParameter(valid_774062, JString, required = false,
                                 default = nil)
  if valid_774062 != nil:
    section.add "X-Amz-Credential", valid_774062
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774063: Call_GetDeleteEventSubscription_774050; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an event notification subscription.
  ## 
  let valid = call_774063.validator(path, query, header, formData, body)
  let scheme = call_774063.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774063.url(scheme.get, call_774063.host, call_774063.base,
                         call_774063.route, valid.getOrDefault("path"))
  result = hook(call_774063, url, valid)

proc call*(call_774064: Call_GetDeleteEventSubscription_774050;
          SubscriptionName: string; Action: string = "DeleteEventSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteEventSubscription
  ## Deletes an event notification subscription.
  ##   Action: string (required)
  ##   SubscriptionName: string (required)
  ##                   : The name of the event notification subscription you want to delete.
  ##   Version: string (required)
  var query_774065 = newJObject()
  add(query_774065, "Action", newJString(Action))
  add(query_774065, "SubscriptionName", newJString(SubscriptionName))
  add(query_774065, "Version", newJString(Version))
  result = call_774064.call(nil, query_774065, nil, nil, nil)

var getDeleteEventSubscription* = Call_GetDeleteEventSubscription_774050(
    name: "getDeleteEventSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteEventSubscription",
    validator: validate_GetDeleteEventSubscription_774051, base: "/",
    url: url_GetDeleteEventSubscription_774052,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterParameterGroups_774102 = ref object of OpenApiRestCall_772581
proc url_PostDescribeDBClusterParameterGroups_774104(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeDBClusterParameterGroups_774103(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774105 = query.getOrDefault("Action")
  valid_774105 = validateParameter(valid_774105, JString, required = true, default = newJString(
      "DescribeDBClusterParameterGroups"))
  if valid_774105 != nil:
    section.add "Action", valid_774105
  var valid_774106 = query.getOrDefault("Version")
  valid_774106 = validateParameter(valid_774106, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774106 != nil:
    section.add "Version", valid_774106
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774107 = header.getOrDefault("X-Amz-Date")
  valid_774107 = validateParameter(valid_774107, JString, required = false,
                                 default = nil)
  if valid_774107 != nil:
    section.add "X-Amz-Date", valid_774107
  var valid_774108 = header.getOrDefault("X-Amz-Security-Token")
  valid_774108 = validateParameter(valid_774108, JString, required = false,
                                 default = nil)
  if valid_774108 != nil:
    section.add "X-Amz-Security-Token", valid_774108
  var valid_774109 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774109 = validateParameter(valid_774109, JString, required = false,
                                 default = nil)
  if valid_774109 != nil:
    section.add "X-Amz-Content-Sha256", valid_774109
  var valid_774110 = header.getOrDefault("X-Amz-Algorithm")
  valid_774110 = validateParameter(valid_774110, JString, required = false,
                                 default = nil)
  if valid_774110 != nil:
    section.add "X-Amz-Algorithm", valid_774110
  var valid_774111 = header.getOrDefault("X-Amz-Signature")
  valid_774111 = validateParameter(valid_774111, JString, required = false,
                                 default = nil)
  if valid_774111 != nil:
    section.add "X-Amz-Signature", valid_774111
  var valid_774112 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774112 = validateParameter(valid_774112, JString, required = false,
                                 default = nil)
  if valid_774112 != nil:
    section.add "X-Amz-SignedHeaders", valid_774112
  var valid_774113 = header.getOrDefault("X-Amz-Credential")
  valid_774113 = validateParameter(valid_774113, JString, required = false,
                                 default = nil)
  if valid_774113 != nil:
    section.add "X-Amz-Credential", valid_774113
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_774114 = formData.getOrDefault("Marker")
  valid_774114 = validateParameter(valid_774114, JString, required = false,
                                 default = nil)
  if valid_774114 != nil:
    section.add "Marker", valid_774114
  var valid_774115 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_774115 = validateParameter(valid_774115, JString, required = false,
                                 default = nil)
  if valid_774115 != nil:
    section.add "DBClusterParameterGroupName", valid_774115
  var valid_774116 = formData.getOrDefault("Filters")
  valid_774116 = validateParameter(valid_774116, JArray, required = false,
                                 default = nil)
  if valid_774116 != nil:
    section.add "Filters", valid_774116
  var valid_774117 = formData.getOrDefault("MaxRecords")
  valid_774117 = validateParameter(valid_774117, JInt, required = false, default = nil)
  if valid_774117 != nil:
    section.add "MaxRecords", valid_774117
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774118: Call_PostDescribeDBClusterParameterGroups_774102;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ##  Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group.
  ## 
  let valid = call_774118.validator(path, query, header, formData, body)
  let scheme = call_774118.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774118.url(scheme.get, call_774118.host, call_774118.base,
                         call_774118.route, valid.getOrDefault("path"))
  result = hook(call_774118, url, valid)

proc call*(call_774119: Call_PostDescribeDBClusterParameterGroups_774102;
          Marker: string = ""; Action: string = "DescribeDBClusterParameterGroups";
          DBClusterParameterGroupName: string = ""; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterParameterGroups
  ##  Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_774120 = newJObject()
  var formData_774121 = newJObject()
  add(formData_774121, "Marker", newJString(Marker))
  add(query_774120, "Action", newJString(Action))
  add(formData_774121, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if Filters != nil:
    formData_774121.add "Filters", Filters
  add(formData_774121, "MaxRecords", newJInt(MaxRecords))
  add(query_774120, "Version", newJString(Version))
  result = call_774119.call(nil, query_774120, nil, formData_774121, nil)

var postDescribeDBClusterParameterGroups* = Call_PostDescribeDBClusterParameterGroups_774102(
    name: "postDescribeDBClusterParameterGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameterGroups",
    validator: validate_PostDescribeDBClusterParameterGroups_774103, base: "/",
    url: url_PostDescribeDBClusterParameterGroups_774104,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterParameterGroups_774083 = ref object of OpenApiRestCall_772581
proc url_GetDescribeDBClusterParameterGroups_774085(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeDBClusterParameterGroups_774084(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: JString (required)
  section = newJObject()
  var valid_774086 = query.getOrDefault("MaxRecords")
  valid_774086 = validateParameter(valid_774086, JInt, required = false, default = nil)
  if valid_774086 != nil:
    section.add "MaxRecords", valid_774086
  var valid_774087 = query.getOrDefault("DBClusterParameterGroupName")
  valid_774087 = validateParameter(valid_774087, JString, required = false,
                                 default = nil)
  if valid_774087 != nil:
    section.add "DBClusterParameterGroupName", valid_774087
  var valid_774088 = query.getOrDefault("Filters")
  valid_774088 = validateParameter(valid_774088, JArray, required = false,
                                 default = nil)
  if valid_774088 != nil:
    section.add "Filters", valid_774088
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774089 = query.getOrDefault("Action")
  valid_774089 = validateParameter(valid_774089, JString, required = true, default = newJString(
      "DescribeDBClusterParameterGroups"))
  if valid_774089 != nil:
    section.add "Action", valid_774089
  var valid_774090 = query.getOrDefault("Marker")
  valid_774090 = validateParameter(valid_774090, JString, required = false,
                                 default = nil)
  if valid_774090 != nil:
    section.add "Marker", valid_774090
  var valid_774091 = query.getOrDefault("Version")
  valid_774091 = validateParameter(valid_774091, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774091 != nil:
    section.add "Version", valid_774091
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774092 = header.getOrDefault("X-Amz-Date")
  valid_774092 = validateParameter(valid_774092, JString, required = false,
                                 default = nil)
  if valid_774092 != nil:
    section.add "X-Amz-Date", valid_774092
  var valid_774093 = header.getOrDefault("X-Amz-Security-Token")
  valid_774093 = validateParameter(valid_774093, JString, required = false,
                                 default = nil)
  if valid_774093 != nil:
    section.add "X-Amz-Security-Token", valid_774093
  var valid_774094 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774094 = validateParameter(valid_774094, JString, required = false,
                                 default = nil)
  if valid_774094 != nil:
    section.add "X-Amz-Content-Sha256", valid_774094
  var valid_774095 = header.getOrDefault("X-Amz-Algorithm")
  valid_774095 = validateParameter(valid_774095, JString, required = false,
                                 default = nil)
  if valid_774095 != nil:
    section.add "X-Amz-Algorithm", valid_774095
  var valid_774096 = header.getOrDefault("X-Amz-Signature")
  valid_774096 = validateParameter(valid_774096, JString, required = false,
                                 default = nil)
  if valid_774096 != nil:
    section.add "X-Amz-Signature", valid_774096
  var valid_774097 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774097 = validateParameter(valid_774097, JString, required = false,
                                 default = nil)
  if valid_774097 != nil:
    section.add "X-Amz-SignedHeaders", valid_774097
  var valid_774098 = header.getOrDefault("X-Amz-Credential")
  valid_774098 = validateParameter(valid_774098, JString, required = false,
                                 default = nil)
  if valid_774098 != nil:
    section.add "X-Amz-Credential", valid_774098
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774099: Call_GetDescribeDBClusterParameterGroups_774083;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ##  Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group.
  ## 
  let valid = call_774099.validator(path, query, header, formData, body)
  let scheme = call_774099.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774099.url(scheme.get, call_774099.host, call_774099.base,
                         call_774099.route, valid.getOrDefault("path"))
  result = hook(call_774099, url, valid)

proc call*(call_774100: Call_GetDescribeDBClusterParameterGroups_774083;
          MaxRecords: int = 0; DBClusterParameterGroupName: string = "";
          Filters: JsonNode = nil;
          Action: string = "DescribeDBClusterParameterGroups"; Marker: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBClusterParameterGroups
  ##  Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: string (required)
  var query_774101 = newJObject()
  add(query_774101, "MaxRecords", newJInt(MaxRecords))
  add(query_774101, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if Filters != nil:
    query_774101.add "Filters", Filters
  add(query_774101, "Action", newJString(Action))
  add(query_774101, "Marker", newJString(Marker))
  add(query_774101, "Version", newJString(Version))
  result = call_774100.call(nil, query_774101, nil, nil, nil)

var getDescribeDBClusterParameterGroups* = Call_GetDescribeDBClusterParameterGroups_774083(
    name: "getDescribeDBClusterParameterGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameterGroups",
    validator: validate_GetDescribeDBClusterParameterGroups_774084, base: "/",
    url: url_GetDescribeDBClusterParameterGroups_774085,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterParameters_774142 = ref object of OpenApiRestCall_772581
proc url_PostDescribeDBClusterParameters_774144(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeDBClusterParameters_774143(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular DB cluster parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774145 = query.getOrDefault("Action")
  valid_774145 = validateParameter(valid_774145, JString, required = true, default = newJString(
      "DescribeDBClusterParameters"))
  if valid_774145 != nil:
    section.add "Action", valid_774145
  var valid_774146 = query.getOrDefault("Version")
  valid_774146 = validateParameter(valid_774146, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774146 != nil:
    section.add "Version", valid_774146
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774147 = header.getOrDefault("X-Amz-Date")
  valid_774147 = validateParameter(valid_774147, JString, required = false,
                                 default = nil)
  if valid_774147 != nil:
    section.add "X-Amz-Date", valid_774147
  var valid_774148 = header.getOrDefault("X-Amz-Security-Token")
  valid_774148 = validateParameter(valid_774148, JString, required = false,
                                 default = nil)
  if valid_774148 != nil:
    section.add "X-Amz-Security-Token", valid_774148
  var valid_774149 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774149 = validateParameter(valid_774149, JString, required = false,
                                 default = nil)
  if valid_774149 != nil:
    section.add "X-Amz-Content-Sha256", valid_774149
  var valid_774150 = header.getOrDefault("X-Amz-Algorithm")
  valid_774150 = validateParameter(valid_774150, JString, required = false,
                                 default = nil)
  if valid_774150 != nil:
    section.add "X-Amz-Algorithm", valid_774150
  var valid_774151 = header.getOrDefault("X-Amz-Signature")
  valid_774151 = validateParameter(valid_774151, JString, required = false,
                                 default = nil)
  if valid_774151 != nil:
    section.add "X-Amz-Signature", valid_774151
  var valid_774152 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774152 = validateParameter(valid_774152, JString, required = false,
                                 default = nil)
  if valid_774152 != nil:
    section.add "X-Amz-SignedHeaders", valid_774152
  var valid_774153 = header.getOrDefault("X-Amz-Credential")
  valid_774153 = validateParameter(valid_774153, JString, required = false,
                                 default = nil)
  if valid_774153 != nil:
    section.add "X-Amz-Credential", valid_774153
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Source: JString
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>.
  section = newJObject()
  var valid_774154 = formData.getOrDefault("Marker")
  valid_774154 = validateParameter(valid_774154, JString, required = false,
                                 default = nil)
  if valid_774154 != nil:
    section.add "Marker", valid_774154
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_774155 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_774155 = validateParameter(valid_774155, JString, required = true,
                                 default = nil)
  if valid_774155 != nil:
    section.add "DBClusterParameterGroupName", valid_774155
  var valid_774156 = formData.getOrDefault("Filters")
  valid_774156 = validateParameter(valid_774156, JArray, required = false,
                                 default = nil)
  if valid_774156 != nil:
    section.add "Filters", valid_774156
  var valid_774157 = formData.getOrDefault("MaxRecords")
  valid_774157 = validateParameter(valid_774157, JInt, required = false, default = nil)
  if valid_774157 != nil:
    section.add "MaxRecords", valid_774157
  var valid_774158 = formData.getOrDefault("Source")
  valid_774158 = validateParameter(valid_774158, JString, required = false,
                                 default = nil)
  if valid_774158 != nil:
    section.add "Source", valid_774158
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774159: Call_PostDescribeDBClusterParameters_774142;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular DB cluster parameter group.
  ## 
  let valid = call_774159.validator(path, query, header, formData, body)
  let scheme = call_774159.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774159.url(scheme.get, call_774159.host, call_774159.base,
                         call_774159.route, valid.getOrDefault("path"))
  result = hook(call_774159, url, valid)

proc call*(call_774160: Call_PostDescribeDBClusterParameters_774142;
          DBClusterParameterGroupName: string; Marker: string = "";
          Action: string = "DescribeDBClusterParameters"; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"; Source: string = ""): Recallable =
  ## postDescribeDBClusterParameters
  ## Returns the detailed parameter list for a particular DB cluster parameter group.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  ##   Source: string
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>.
  var query_774161 = newJObject()
  var formData_774162 = newJObject()
  add(formData_774162, "Marker", newJString(Marker))
  add(query_774161, "Action", newJString(Action))
  add(formData_774162, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if Filters != nil:
    formData_774162.add "Filters", Filters
  add(formData_774162, "MaxRecords", newJInt(MaxRecords))
  add(query_774161, "Version", newJString(Version))
  add(formData_774162, "Source", newJString(Source))
  result = call_774160.call(nil, query_774161, nil, formData_774162, nil)

var postDescribeDBClusterParameters* = Call_PostDescribeDBClusterParameters_774142(
    name: "postDescribeDBClusterParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameters",
    validator: validate_PostDescribeDBClusterParameters_774143, base: "/",
    url: url_PostDescribeDBClusterParameters_774144,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterParameters_774122 = ref object of OpenApiRestCall_772581
proc url_GetDescribeDBClusterParameters_774124(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeDBClusterParameters_774123(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular DB cluster parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Source: JString
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>.
  ##   Version: JString (required)
  section = newJObject()
  var valid_774125 = query.getOrDefault("MaxRecords")
  valid_774125 = validateParameter(valid_774125, JInt, required = false, default = nil)
  if valid_774125 != nil:
    section.add "MaxRecords", valid_774125
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_774126 = query.getOrDefault("DBClusterParameterGroupName")
  valid_774126 = validateParameter(valid_774126, JString, required = true,
                                 default = nil)
  if valid_774126 != nil:
    section.add "DBClusterParameterGroupName", valid_774126
  var valid_774127 = query.getOrDefault("Filters")
  valid_774127 = validateParameter(valid_774127, JArray, required = false,
                                 default = nil)
  if valid_774127 != nil:
    section.add "Filters", valid_774127
  var valid_774128 = query.getOrDefault("Action")
  valid_774128 = validateParameter(valid_774128, JString, required = true, default = newJString(
      "DescribeDBClusterParameters"))
  if valid_774128 != nil:
    section.add "Action", valid_774128
  var valid_774129 = query.getOrDefault("Marker")
  valid_774129 = validateParameter(valid_774129, JString, required = false,
                                 default = nil)
  if valid_774129 != nil:
    section.add "Marker", valid_774129
  var valid_774130 = query.getOrDefault("Source")
  valid_774130 = validateParameter(valid_774130, JString, required = false,
                                 default = nil)
  if valid_774130 != nil:
    section.add "Source", valid_774130
  var valid_774131 = query.getOrDefault("Version")
  valid_774131 = validateParameter(valid_774131, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774131 != nil:
    section.add "Version", valid_774131
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774132 = header.getOrDefault("X-Amz-Date")
  valid_774132 = validateParameter(valid_774132, JString, required = false,
                                 default = nil)
  if valid_774132 != nil:
    section.add "X-Amz-Date", valid_774132
  var valid_774133 = header.getOrDefault("X-Amz-Security-Token")
  valid_774133 = validateParameter(valid_774133, JString, required = false,
                                 default = nil)
  if valid_774133 != nil:
    section.add "X-Amz-Security-Token", valid_774133
  var valid_774134 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774134 = validateParameter(valid_774134, JString, required = false,
                                 default = nil)
  if valid_774134 != nil:
    section.add "X-Amz-Content-Sha256", valid_774134
  var valid_774135 = header.getOrDefault("X-Amz-Algorithm")
  valid_774135 = validateParameter(valid_774135, JString, required = false,
                                 default = nil)
  if valid_774135 != nil:
    section.add "X-Amz-Algorithm", valid_774135
  var valid_774136 = header.getOrDefault("X-Amz-Signature")
  valid_774136 = validateParameter(valid_774136, JString, required = false,
                                 default = nil)
  if valid_774136 != nil:
    section.add "X-Amz-Signature", valid_774136
  var valid_774137 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774137 = validateParameter(valid_774137, JString, required = false,
                                 default = nil)
  if valid_774137 != nil:
    section.add "X-Amz-SignedHeaders", valid_774137
  var valid_774138 = header.getOrDefault("X-Amz-Credential")
  valid_774138 = validateParameter(valid_774138, JString, required = false,
                                 default = nil)
  if valid_774138 != nil:
    section.add "X-Amz-Credential", valid_774138
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774139: Call_GetDescribeDBClusterParameters_774122; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular DB cluster parameter group.
  ## 
  let valid = call_774139.validator(path, query, header, formData, body)
  let scheme = call_774139.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774139.url(scheme.get, call_774139.host, call_774139.base,
                         call_774139.route, valid.getOrDefault("path"))
  result = hook(call_774139, url, valid)

proc call*(call_774140: Call_GetDescribeDBClusterParameters_774122;
          DBClusterParameterGroupName: string; MaxRecords: int = 0;
          Filters: JsonNode = nil; Action: string = "DescribeDBClusterParameters";
          Marker: string = ""; Source: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBClusterParameters
  ## Returns the detailed parameter list for a particular DB cluster parameter group.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Source: string
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>.
  ##   Version: string (required)
  var query_774141 = newJObject()
  add(query_774141, "MaxRecords", newJInt(MaxRecords))
  add(query_774141, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if Filters != nil:
    query_774141.add "Filters", Filters
  add(query_774141, "Action", newJString(Action))
  add(query_774141, "Marker", newJString(Marker))
  add(query_774141, "Source", newJString(Source))
  add(query_774141, "Version", newJString(Version))
  result = call_774140.call(nil, query_774141, nil, nil, nil)

var getDescribeDBClusterParameters* = Call_GetDescribeDBClusterParameters_774122(
    name: "getDescribeDBClusterParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameters",
    validator: validate_GetDescribeDBClusterParameters_774123, base: "/",
    url: url_GetDescribeDBClusterParameters_774124,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterSnapshotAttributes_774179 = ref object of OpenApiRestCall_772581
proc url_PostDescribeDBClusterSnapshotAttributes_774181(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeDBClusterSnapshotAttributes_774180(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774182 = query.getOrDefault("Action")
  valid_774182 = validateParameter(valid_774182, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshotAttributes"))
  if valid_774182 != nil:
    section.add "Action", valid_774182
  var valid_774183 = query.getOrDefault("Version")
  valid_774183 = validateParameter(valid_774183, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774183 != nil:
    section.add "Version", valid_774183
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774184 = header.getOrDefault("X-Amz-Date")
  valid_774184 = validateParameter(valid_774184, JString, required = false,
                                 default = nil)
  if valid_774184 != nil:
    section.add "X-Amz-Date", valid_774184
  var valid_774185 = header.getOrDefault("X-Amz-Security-Token")
  valid_774185 = validateParameter(valid_774185, JString, required = false,
                                 default = nil)
  if valid_774185 != nil:
    section.add "X-Amz-Security-Token", valid_774185
  var valid_774186 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774186 = validateParameter(valid_774186, JString, required = false,
                                 default = nil)
  if valid_774186 != nil:
    section.add "X-Amz-Content-Sha256", valid_774186
  var valid_774187 = header.getOrDefault("X-Amz-Algorithm")
  valid_774187 = validateParameter(valid_774187, JString, required = false,
                                 default = nil)
  if valid_774187 != nil:
    section.add "X-Amz-Algorithm", valid_774187
  var valid_774188 = header.getOrDefault("X-Amz-Signature")
  valid_774188 = validateParameter(valid_774188, JString, required = false,
                                 default = nil)
  if valid_774188 != nil:
    section.add "X-Amz-Signature", valid_774188
  var valid_774189 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774189 = validateParameter(valid_774189, JString, required = false,
                                 default = nil)
  if valid_774189 != nil:
    section.add "X-Amz-SignedHeaders", valid_774189
  var valid_774190 = header.getOrDefault("X-Amz-Credential")
  valid_774190 = validateParameter(valid_774190, JString, required = false,
                                 default = nil)
  if valid_774190 != nil:
    section.add "X-Amz-Credential", valid_774190
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_774191 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_774191 = validateParameter(valid_774191, JString, required = true,
                                 default = nil)
  if valid_774191 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_774191
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774192: Call_PostDescribeDBClusterSnapshotAttributes_774179;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ## 
  let valid = call_774192.validator(path, query, header, formData, body)
  let scheme = call_774192.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774192.url(scheme.get, call_774192.host, call_774192.base,
                         call_774192.route, valid.getOrDefault("path"))
  result = hook(call_774192, url, valid)

proc call*(call_774193: Call_PostDescribeDBClusterSnapshotAttributes_774179;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DescribeDBClusterSnapshotAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterSnapshotAttributes
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774194 = newJObject()
  var formData_774195 = newJObject()
  add(formData_774195, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_774194, "Action", newJString(Action))
  add(query_774194, "Version", newJString(Version))
  result = call_774193.call(nil, query_774194, nil, formData_774195, nil)

var postDescribeDBClusterSnapshotAttributes* = Call_PostDescribeDBClusterSnapshotAttributes_774179(
    name: "postDescribeDBClusterSnapshotAttributes", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeDBClusterSnapshotAttributes",
    validator: validate_PostDescribeDBClusterSnapshotAttributes_774180, base: "/",
    url: url_PostDescribeDBClusterSnapshotAttributes_774181,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterSnapshotAttributes_774163 = ref object of OpenApiRestCall_772581
proc url_GetDescribeDBClusterSnapshotAttributes_774165(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeDBClusterSnapshotAttributes_774164(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_774166 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_774166 = validateParameter(valid_774166, JString, required = true,
                                 default = nil)
  if valid_774166 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_774166
  var valid_774167 = query.getOrDefault("Action")
  valid_774167 = validateParameter(valid_774167, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshotAttributes"))
  if valid_774167 != nil:
    section.add "Action", valid_774167
  var valid_774168 = query.getOrDefault("Version")
  valid_774168 = validateParameter(valid_774168, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774168 != nil:
    section.add "Version", valid_774168
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774169 = header.getOrDefault("X-Amz-Date")
  valid_774169 = validateParameter(valid_774169, JString, required = false,
                                 default = nil)
  if valid_774169 != nil:
    section.add "X-Amz-Date", valid_774169
  var valid_774170 = header.getOrDefault("X-Amz-Security-Token")
  valid_774170 = validateParameter(valid_774170, JString, required = false,
                                 default = nil)
  if valid_774170 != nil:
    section.add "X-Amz-Security-Token", valid_774170
  var valid_774171 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774171 = validateParameter(valid_774171, JString, required = false,
                                 default = nil)
  if valid_774171 != nil:
    section.add "X-Amz-Content-Sha256", valid_774171
  var valid_774172 = header.getOrDefault("X-Amz-Algorithm")
  valid_774172 = validateParameter(valid_774172, JString, required = false,
                                 default = nil)
  if valid_774172 != nil:
    section.add "X-Amz-Algorithm", valid_774172
  var valid_774173 = header.getOrDefault("X-Amz-Signature")
  valid_774173 = validateParameter(valid_774173, JString, required = false,
                                 default = nil)
  if valid_774173 != nil:
    section.add "X-Amz-Signature", valid_774173
  var valid_774174 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774174 = validateParameter(valid_774174, JString, required = false,
                                 default = nil)
  if valid_774174 != nil:
    section.add "X-Amz-SignedHeaders", valid_774174
  var valid_774175 = header.getOrDefault("X-Amz-Credential")
  valid_774175 = validateParameter(valid_774175, JString, required = false,
                                 default = nil)
  if valid_774175 != nil:
    section.add "X-Amz-Credential", valid_774175
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774176: Call_GetDescribeDBClusterSnapshotAttributes_774163;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ## 
  let valid = call_774176.validator(path, query, header, formData, body)
  let scheme = call_774176.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774176.url(scheme.get, call_774176.host, call_774176.base,
                         call_774176.route, valid.getOrDefault("path"))
  result = hook(call_774176, url, valid)

proc call*(call_774177: Call_GetDescribeDBClusterSnapshotAttributes_774163;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DescribeDBClusterSnapshotAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBClusterSnapshotAttributes
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774178 = newJObject()
  add(query_774178, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_774178, "Action", newJString(Action))
  add(query_774178, "Version", newJString(Version))
  result = call_774177.call(nil, query_774178, nil, nil, nil)

var getDescribeDBClusterSnapshotAttributes* = Call_GetDescribeDBClusterSnapshotAttributes_774163(
    name: "getDescribeDBClusterSnapshotAttributes", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeDBClusterSnapshotAttributes",
    validator: validate_GetDescribeDBClusterSnapshotAttributes_774164, base: "/",
    url: url_GetDescribeDBClusterSnapshotAttributes_774165,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterSnapshots_774219 = ref object of OpenApiRestCall_772581
proc url_PostDescribeDBClusterSnapshots_774221(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeDBClusterSnapshots_774220(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about DB cluster snapshots. This API action supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774222 = query.getOrDefault("Action")
  valid_774222 = validateParameter(valid_774222, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshots"))
  if valid_774222 != nil:
    section.add "Action", valid_774222
  var valid_774223 = query.getOrDefault("Version")
  valid_774223 = validateParameter(valid_774223, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774223 != nil:
    section.add "Version", valid_774223
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774224 = header.getOrDefault("X-Amz-Date")
  valid_774224 = validateParameter(valid_774224, JString, required = false,
                                 default = nil)
  if valid_774224 != nil:
    section.add "X-Amz-Date", valid_774224
  var valid_774225 = header.getOrDefault("X-Amz-Security-Token")
  valid_774225 = validateParameter(valid_774225, JString, required = false,
                                 default = nil)
  if valid_774225 != nil:
    section.add "X-Amz-Security-Token", valid_774225
  var valid_774226 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774226 = validateParameter(valid_774226, JString, required = false,
                                 default = nil)
  if valid_774226 != nil:
    section.add "X-Amz-Content-Sha256", valid_774226
  var valid_774227 = header.getOrDefault("X-Amz-Algorithm")
  valid_774227 = validateParameter(valid_774227, JString, required = false,
                                 default = nil)
  if valid_774227 != nil:
    section.add "X-Amz-Algorithm", valid_774227
  var valid_774228 = header.getOrDefault("X-Amz-Signature")
  valid_774228 = validateParameter(valid_774228, JString, required = false,
                                 default = nil)
  if valid_774228 != nil:
    section.add "X-Amz-Signature", valid_774228
  var valid_774229 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774229 = validateParameter(valid_774229, JString, required = false,
                                 default = nil)
  if valid_774229 != nil:
    section.add "X-Amz-SignedHeaders", valid_774229
  var valid_774230 = header.getOrDefault("X-Amz-Credential")
  valid_774230 = validateParameter(valid_774230, JString, required = false,
                                 default = nil)
  if valid_774230 != nil:
    section.add "X-Amz-Credential", valid_774230
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   IncludeShared: JBool
  ##                : <p>True to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore, and otherwise false. The default is <code>false</code>.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   IncludePublic: JBool
  ##                : <p>True to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account, and otherwise false. The default is <code>false</code>. The default is false.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   SnapshotType: JString
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon Neptune for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by setting the <code>IncludeShared</code> parameter to <code>true</code>. You can include public DB cluster snapshots with these results by setting the <code>IncludePublic</code> parameter to <code>true</code>.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  section = newJObject()
  var valid_774231 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_774231 = validateParameter(valid_774231, JString, required = false,
                                 default = nil)
  if valid_774231 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_774231
  var valid_774232 = formData.getOrDefault("IncludeShared")
  valid_774232 = validateParameter(valid_774232, JBool, required = false, default = nil)
  if valid_774232 != nil:
    section.add "IncludeShared", valid_774232
  var valid_774233 = formData.getOrDefault("IncludePublic")
  valid_774233 = validateParameter(valid_774233, JBool, required = false, default = nil)
  if valid_774233 != nil:
    section.add "IncludePublic", valid_774233
  var valid_774234 = formData.getOrDefault("SnapshotType")
  valid_774234 = validateParameter(valid_774234, JString, required = false,
                                 default = nil)
  if valid_774234 != nil:
    section.add "SnapshotType", valid_774234
  var valid_774235 = formData.getOrDefault("Marker")
  valid_774235 = validateParameter(valid_774235, JString, required = false,
                                 default = nil)
  if valid_774235 != nil:
    section.add "Marker", valid_774235
  var valid_774236 = formData.getOrDefault("Filters")
  valid_774236 = validateParameter(valid_774236, JArray, required = false,
                                 default = nil)
  if valid_774236 != nil:
    section.add "Filters", valid_774236
  var valid_774237 = formData.getOrDefault("MaxRecords")
  valid_774237 = validateParameter(valid_774237, JInt, required = false, default = nil)
  if valid_774237 != nil:
    section.add "MaxRecords", valid_774237
  var valid_774238 = formData.getOrDefault("DBClusterIdentifier")
  valid_774238 = validateParameter(valid_774238, JString, required = false,
                                 default = nil)
  if valid_774238 != nil:
    section.add "DBClusterIdentifier", valid_774238
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774239: Call_PostDescribeDBClusterSnapshots_774219; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about DB cluster snapshots. This API action supports pagination.
  ## 
  let valid = call_774239.validator(path, query, header, formData, body)
  let scheme = call_774239.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774239.url(scheme.get, call_774239.host, call_774239.base,
                         call_774239.route, valid.getOrDefault("path"))
  result = hook(call_774239, url, valid)

proc call*(call_774240: Call_PostDescribeDBClusterSnapshots_774219;
          DBClusterSnapshotIdentifier: string = ""; IncludeShared: bool = false;
          IncludePublic: bool = false; SnapshotType: string = ""; Marker: string = "";
          Action: string = "DescribeDBClusterSnapshots"; Filters: JsonNode = nil;
          MaxRecords: int = 0; DBClusterIdentifier: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterSnapshots
  ## Returns information about DB cluster snapshots. This API action supports pagination.
  ##   DBClusterSnapshotIdentifier: string
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   IncludeShared: bool
  ##                : <p>True to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore, and otherwise false. The default is <code>false</code>.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   IncludePublic: bool
  ##                : <p>True to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account, and otherwise false. The default is <code>false</code>. The default is false.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   SnapshotType: string
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon Neptune for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by setting the <code>IncludeShared</code> parameter to <code>true</code>. You can include public DB cluster snapshots with these results by setting the <code>IncludePublic</code> parameter to <code>true</code>.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: string
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   Version: string (required)
  var query_774241 = newJObject()
  var formData_774242 = newJObject()
  add(formData_774242, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(formData_774242, "IncludeShared", newJBool(IncludeShared))
  add(formData_774242, "IncludePublic", newJBool(IncludePublic))
  add(formData_774242, "SnapshotType", newJString(SnapshotType))
  add(formData_774242, "Marker", newJString(Marker))
  add(query_774241, "Action", newJString(Action))
  if Filters != nil:
    formData_774242.add "Filters", Filters
  add(formData_774242, "MaxRecords", newJInt(MaxRecords))
  add(formData_774242, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_774241, "Version", newJString(Version))
  result = call_774240.call(nil, query_774241, nil, formData_774242, nil)

var postDescribeDBClusterSnapshots* = Call_PostDescribeDBClusterSnapshots_774219(
    name: "postDescribeDBClusterSnapshots", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterSnapshots",
    validator: validate_PostDescribeDBClusterSnapshots_774220, base: "/",
    url: url_PostDescribeDBClusterSnapshots_774221,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterSnapshots_774196 = ref object of OpenApiRestCall_772581
proc url_GetDescribeDBClusterSnapshots_774198(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeDBClusterSnapshots_774197(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about DB cluster snapshots. This API action supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   IncludePublic: JBool
  ##                : <p>True to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account, and otherwise false. The default is <code>false</code>. The default is false.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   DBClusterSnapshotIdentifier: JString
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   IncludeShared: JBool
  ##                : <p>True to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore, and otherwise false. The default is <code>false</code>.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   SnapshotType: JString
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon Neptune for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by setting the <code>IncludeShared</code> parameter to <code>true</code>. You can include public DB cluster snapshots with these results by setting the <code>IncludePublic</code> parameter to <code>true</code>.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_774199 = query.getOrDefault("IncludePublic")
  valid_774199 = validateParameter(valid_774199, JBool, required = false, default = nil)
  if valid_774199 != nil:
    section.add "IncludePublic", valid_774199
  var valid_774200 = query.getOrDefault("MaxRecords")
  valid_774200 = validateParameter(valid_774200, JInt, required = false, default = nil)
  if valid_774200 != nil:
    section.add "MaxRecords", valid_774200
  var valid_774201 = query.getOrDefault("DBClusterIdentifier")
  valid_774201 = validateParameter(valid_774201, JString, required = false,
                                 default = nil)
  if valid_774201 != nil:
    section.add "DBClusterIdentifier", valid_774201
  var valid_774202 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_774202 = validateParameter(valid_774202, JString, required = false,
                                 default = nil)
  if valid_774202 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_774202
  var valid_774203 = query.getOrDefault("Filters")
  valid_774203 = validateParameter(valid_774203, JArray, required = false,
                                 default = nil)
  if valid_774203 != nil:
    section.add "Filters", valid_774203
  var valid_774204 = query.getOrDefault("IncludeShared")
  valid_774204 = validateParameter(valid_774204, JBool, required = false, default = nil)
  if valid_774204 != nil:
    section.add "IncludeShared", valid_774204
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774205 = query.getOrDefault("Action")
  valid_774205 = validateParameter(valid_774205, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshots"))
  if valid_774205 != nil:
    section.add "Action", valid_774205
  var valid_774206 = query.getOrDefault("Marker")
  valid_774206 = validateParameter(valid_774206, JString, required = false,
                                 default = nil)
  if valid_774206 != nil:
    section.add "Marker", valid_774206
  var valid_774207 = query.getOrDefault("SnapshotType")
  valid_774207 = validateParameter(valid_774207, JString, required = false,
                                 default = nil)
  if valid_774207 != nil:
    section.add "SnapshotType", valid_774207
  var valid_774208 = query.getOrDefault("Version")
  valid_774208 = validateParameter(valid_774208, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774208 != nil:
    section.add "Version", valid_774208
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774209 = header.getOrDefault("X-Amz-Date")
  valid_774209 = validateParameter(valid_774209, JString, required = false,
                                 default = nil)
  if valid_774209 != nil:
    section.add "X-Amz-Date", valid_774209
  var valid_774210 = header.getOrDefault("X-Amz-Security-Token")
  valid_774210 = validateParameter(valid_774210, JString, required = false,
                                 default = nil)
  if valid_774210 != nil:
    section.add "X-Amz-Security-Token", valid_774210
  var valid_774211 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774211 = validateParameter(valid_774211, JString, required = false,
                                 default = nil)
  if valid_774211 != nil:
    section.add "X-Amz-Content-Sha256", valid_774211
  var valid_774212 = header.getOrDefault("X-Amz-Algorithm")
  valid_774212 = validateParameter(valid_774212, JString, required = false,
                                 default = nil)
  if valid_774212 != nil:
    section.add "X-Amz-Algorithm", valid_774212
  var valid_774213 = header.getOrDefault("X-Amz-Signature")
  valid_774213 = validateParameter(valid_774213, JString, required = false,
                                 default = nil)
  if valid_774213 != nil:
    section.add "X-Amz-Signature", valid_774213
  var valid_774214 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774214 = validateParameter(valid_774214, JString, required = false,
                                 default = nil)
  if valid_774214 != nil:
    section.add "X-Amz-SignedHeaders", valid_774214
  var valid_774215 = header.getOrDefault("X-Amz-Credential")
  valid_774215 = validateParameter(valid_774215, JString, required = false,
                                 default = nil)
  if valid_774215 != nil:
    section.add "X-Amz-Credential", valid_774215
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774216: Call_GetDescribeDBClusterSnapshots_774196; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about DB cluster snapshots. This API action supports pagination.
  ## 
  let valid = call_774216.validator(path, query, header, formData, body)
  let scheme = call_774216.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774216.url(scheme.get, call_774216.host, call_774216.base,
                         call_774216.route, valid.getOrDefault("path"))
  result = hook(call_774216, url, valid)

proc call*(call_774217: Call_GetDescribeDBClusterSnapshots_774196;
          IncludePublic: bool = false; MaxRecords: int = 0;
          DBClusterIdentifier: string = "";
          DBClusterSnapshotIdentifier: string = ""; Filters: JsonNode = nil;
          IncludeShared: bool = false;
          Action: string = "DescribeDBClusterSnapshots"; Marker: string = "";
          SnapshotType: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBClusterSnapshots
  ## Returns information about DB cluster snapshots. This API action supports pagination.
  ##   IncludePublic: bool
  ##                : <p>True to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account, and otherwise false. The default is <code>false</code>. The default is false.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: string
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   DBClusterSnapshotIdentifier: string
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   IncludeShared: bool
  ##                : <p>True to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore, and otherwise false. The default is <code>false</code>.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   SnapshotType: string
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon Neptune for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by setting the <code>IncludeShared</code> parameter to <code>true</code>. You can include public DB cluster snapshots with these results by setting the <code>IncludePublic</code> parameter to <code>true</code>.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   Version: string (required)
  var query_774218 = newJObject()
  add(query_774218, "IncludePublic", newJBool(IncludePublic))
  add(query_774218, "MaxRecords", newJInt(MaxRecords))
  add(query_774218, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_774218, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  if Filters != nil:
    query_774218.add "Filters", Filters
  add(query_774218, "IncludeShared", newJBool(IncludeShared))
  add(query_774218, "Action", newJString(Action))
  add(query_774218, "Marker", newJString(Marker))
  add(query_774218, "SnapshotType", newJString(SnapshotType))
  add(query_774218, "Version", newJString(Version))
  result = call_774217.call(nil, query_774218, nil, nil, nil)

var getDescribeDBClusterSnapshots* = Call_GetDescribeDBClusterSnapshots_774196(
    name: "getDescribeDBClusterSnapshots", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterSnapshots",
    validator: validate_GetDescribeDBClusterSnapshots_774197, base: "/",
    url: url_GetDescribeDBClusterSnapshots_774198,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusters_774262 = ref object of OpenApiRestCall_772581
proc url_PostDescribeDBClusters_774264(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeDBClusters_774263(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about provisioned DB clusters. This API supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774265 = query.getOrDefault("Action")
  valid_774265 = validateParameter(valid_774265, JString, required = true,
                                 default = newJString("DescribeDBClusters"))
  if valid_774265 != nil:
    section.add "Action", valid_774265
  var valid_774266 = query.getOrDefault("Version")
  valid_774266 = validateParameter(valid_774266, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774266 != nil:
    section.add "Version", valid_774266
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774267 = header.getOrDefault("X-Amz-Date")
  valid_774267 = validateParameter(valid_774267, JString, required = false,
                                 default = nil)
  if valid_774267 != nil:
    section.add "X-Amz-Date", valid_774267
  var valid_774268 = header.getOrDefault("X-Amz-Security-Token")
  valid_774268 = validateParameter(valid_774268, JString, required = false,
                                 default = nil)
  if valid_774268 != nil:
    section.add "X-Amz-Security-Token", valid_774268
  var valid_774269 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774269 = validateParameter(valid_774269, JString, required = false,
                                 default = nil)
  if valid_774269 != nil:
    section.add "X-Amz-Content-Sha256", valid_774269
  var valid_774270 = header.getOrDefault("X-Amz-Algorithm")
  valid_774270 = validateParameter(valid_774270, JString, required = false,
                                 default = nil)
  if valid_774270 != nil:
    section.add "X-Amz-Algorithm", valid_774270
  var valid_774271 = header.getOrDefault("X-Amz-Signature")
  valid_774271 = validateParameter(valid_774271, JString, required = false,
                                 default = nil)
  if valid_774271 != nil:
    section.add "X-Amz-Signature", valid_774271
  var valid_774272 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774272 = validateParameter(valid_774272, JString, required = false,
                                 default = nil)
  if valid_774272 != nil:
    section.add "X-Amz-SignedHeaders", valid_774272
  var valid_774273 = header.getOrDefault("X-Amz-Credential")
  valid_774273 = validateParameter(valid_774273, JString, required = false,
                                 default = nil)
  if valid_774273 != nil:
    section.add "X-Amz-Credential", valid_774273
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <a>DescribeDBClusters</a> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  section = newJObject()
  var valid_774274 = formData.getOrDefault("Marker")
  valid_774274 = validateParameter(valid_774274, JString, required = false,
                                 default = nil)
  if valid_774274 != nil:
    section.add "Marker", valid_774274
  var valid_774275 = formData.getOrDefault("Filters")
  valid_774275 = validateParameter(valid_774275, JArray, required = false,
                                 default = nil)
  if valid_774275 != nil:
    section.add "Filters", valid_774275
  var valid_774276 = formData.getOrDefault("MaxRecords")
  valid_774276 = validateParameter(valid_774276, JInt, required = false, default = nil)
  if valid_774276 != nil:
    section.add "MaxRecords", valid_774276
  var valid_774277 = formData.getOrDefault("DBClusterIdentifier")
  valid_774277 = validateParameter(valid_774277, JString, required = false,
                                 default = nil)
  if valid_774277 != nil:
    section.add "DBClusterIdentifier", valid_774277
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774278: Call_PostDescribeDBClusters_774262; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about provisioned DB clusters. This API supports pagination.
  ## 
  let valid = call_774278.validator(path, query, header, formData, body)
  let scheme = call_774278.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774278.url(scheme.get, call_774278.host, call_774278.base,
                         call_774278.route, valid.getOrDefault("path"))
  result = hook(call_774278, url, valid)

proc call*(call_774279: Call_PostDescribeDBClusters_774262; Marker: string = "";
          Action: string = "DescribeDBClusters"; Filters: JsonNode = nil;
          MaxRecords: int = 0; DBClusterIdentifier: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusters
  ## Returns information about provisioned DB clusters. This API supports pagination.
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <a>DescribeDBClusters</a> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: string
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Version: string (required)
  var query_774280 = newJObject()
  var formData_774281 = newJObject()
  add(formData_774281, "Marker", newJString(Marker))
  add(query_774280, "Action", newJString(Action))
  if Filters != nil:
    formData_774281.add "Filters", Filters
  add(formData_774281, "MaxRecords", newJInt(MaxRecords))
  add(formData_774281, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_774280, "Version", newJString(Version))
  result = call_774279.call(nil, query_774280, nil, formData_774281, nil)

var postDescribeDBClusters* = Call_PostDescribeDBClusters_774262(
    name: "postDescribeDBClusters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusters",
    validator: validate_PostDescribeDBClusters_774263, base: "/",
    url: url_PostDescribeDBClusters_774264, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusters_774243 = ref object of OpenApiRestCall_772581
proc url_GetDescribeDBClusters_774245(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeDBClusters_774244(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about provisioned DB clusters. This API supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <a>DescribeDBClusters</a> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: JString (required)
  section = newJObject()
  var valid_774246 = query.getOrDefault("MaxRecords")
  valid_774246 = validateParameter(valid_774246, JInt, required = false, default = nil)
  if valid_774246 != nil:
    section.add "MaxRecords", valid_774246
  var valid_774247 = query.getOrDefault("DBClusterIdentifier")
  valid_774247 = validateParameter(valid_774247, JString, required = false,
                                 default = nil)
  if valid_774247 != nil:
    section.add "DBClusterIdentifier", valid_774247
  var valid_774248 = query.getOrDefault("Filters")
  valid_774248 = validateParameter(valid_774248, JArray, required = false,
                                 default = nil)
  if valid_774248 != nil:
    section.add "Filters", valid_774248
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774249 = query.getOrDefault("Action")
  valid_774249 = validateParameter(valid_774249, JString, required = true,
                                 default = newJString("DescribeDBClusters"))
  if valid_774249 != nil:
    section.add "Action", valid_774249
  var valid_774250 = query.getOrDefault("Marker")
  valid_774250 = validateParameter(valid_774250, JString, required = false,
                                 default = nil)
  if valid_774250 != nil:
    section.add "Marker", valid_774250
  var valid_774251 = query.getOrDefault("Version")
  valid_774251 = validateParameter(valid_774251, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774251 != nil:
    section.add "Version", valid_774251
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774252 = header.getOrDefault("X-Amz-Date")
  valid_774252 = validateParameter(valid_774252, JString, required = false,
                                 default = nil)
  if valid_774252 != nil:
    section.add "X-Amz-Date", valid_774252
  var valid_774253 = header.getOrDefault("X-Amz-Security-Token")
  valid_774253 = validateParameter(valid_774253, JString, required = false,
                                 default = nil)
  if valid_774253 != nil:
    section.add "X-Amz-Security-Token", valid_774253
  var valid_774254 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774254 = validateParameter(valid_774254, JString, required = false,
                                 default = nil)
  if valid_774254 != nil:
    section.add "X-Amz-Content-Sha256", valid_774254
  var valid_774255 = header.getOrDefault("X-Amz-Algorithm")
  valid_774255 = validateParameter(valid_774255, JString, required = false,
                                 default = nil)
  if valid_774255 != nil:
    section.add "X-Amz-Algorithm", valid_774255
  var valid_774256 = header.getOrDefault("X-Amz-Signature")
  valid_774256 = validateParameter(valid_774256, JString, required = false,
                                 default = nil)
  if valid_774256 != nil:
    section.add "X-Amz-Signature", valid_774256
  var valid_774257 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774257 = validateParameter(valid_774257, JString, required = false,
                                 default = nil)
  if valid_774257 != nil:
    section.add "X-Amz-SignedHeaders", valid_774257
  var valid_774258 = header.getOrDefault("X-Amz-Credential")
  valid_774258 = validateParameter(valid_774258, JString, required = false,
                                 default = nil)
  if valid_774258 != nil:
    section.add "X-Amz-Credential", valid_774258
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774259: Call_GetDescribeDBClusters_774243; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about provisioned DB clusters. This API supports pagination.
  ## 
  let valid = call_774259.validator(path, query, header, formData, body)
  let scheme = call_774259.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774259.url(scheme.get, call_774259.host, call_774259.base,
                         call_774259.route, valid.getOrDefault("path"))
  result = hook(call_774259, url, valid)

proc call*(call_774260: Call_GetDescribeDBClusters_774243; MaxRecords: int = 0;
          DBClusterIdentifier: string = ""; Filters: JsonNode = nil;
          Action: string = "DescribeDBClusters"; Marker: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBClusters
  ## Returns information about provisioned DB clusters. This API supports pagination.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: string
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <a>DescribeDBClusters</a> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: string (required)
  var query_774261 = newJObject()
  add(query_774261, "MaxRecords", newJInt(MaxRecords))
  add(query_774261, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  if Filters != nil:
    query_774261.add "Filters", Filters
  add(query_774261, "Action", newJString(Action))
  add(query_774261, "Marker", newJString(Marker))
  add(query_774261, "Version", newJString(Version))
  result = call_774260.call(nil, query_774261, nil, nil, nil)

var getDescribeDBClusters* = Call_GetDescribeDBClusters_774243(
    name: "getDescribeDBClusters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusters",
    validator: validate_GetDescribeDBClusters_774244, base: "/",
    url: url_GetDescribeDBClusters_774245, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBEngineVersions_774306 = ref object of OpenApiRestCall_772581
proc url_PostDescribeDBEngineVersions_774308(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeDBEngineVersions_774307(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the available DB engines.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774309 = query.getOrDefault("Action")
  valid_774309 = validateParameter(valid_774309, JString, required = true, default = newJString(
      "DescribeDBEngineVersions"))
  if valid_774309 != nil:
    section.add "Action", valid_774309
  var valid_774310 = query.getOrDefault("Version")
  valid_774310 = validateParameter(valid_774310, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774310 != nil:
    section.add "Version", valid_774310
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774311 = header.getOrDefault("X-Amz-Date")
  valid_774311 = validateParameter(valid_774311, JString, required = false,
                                 default = nil)
  if valid_774311 != nil:
    section.add "X-Amz-Date", valid_774311
  var valid_774312 = header.getOrDefault("X-Amz-Security-Token")
  valid_774312 = validateParameter(valid_774312, JString, required = false,
                                 default = nil)
  if valid_774312 != nil:
    section.add "X-Amz-Security-Token", valid_774312
  var valid_774313 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774313 = validateParameter(valid_774313, JString, required = false,
                                 default = nil)
  if valid_774313 != nil:
    section.add "X-Amz-Content-Sha256", valid_774313
  var valid_774314 = header.getOrDefault("X-Amz-Algorithm")
  valid_774314 = validateParameter(valid_774314, JString, required = false,
                                 default = nil)
  if valid_774314 != nil:
    section.add "X-Amz-Algorithm", valid_774314
  var valid_774315 = header.getOrDefault("X-Amz-Signature")
  valid_774315 = validateParameter(valid_774315, JString, required = false,
                                 default = nil)
  if valid_774315 != nil:
    section.add "X-Amz-Signature", valid_774315
  var valid_774316 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774316 = validateParameter(valid_774316, JString, required = false,
                                 default = nil)
  if valid_774316 != nil:
    section.add "X-Amz-SignedHeaders", valid_774316
  var valid_774317 = header.getOrDefault("X-Amz-Credential")
  valid_774317 = validateParameter(valid_774317, JString, required = false,
                                 default = nil)
  if valid_774317 != nil:
    section.add "X-Amz-Credential", valid_774317
  result.add "header", section
  ## parameters in `formData` object:
  ##   ListSupportedCharacterSets: JBool
  ##                             : If this parameter is specified and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version.
  ##   Engine: JString
  ##         : The database engine to return.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBParameterGroupFamily: JString
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  ##   Filters: JArray
  ##          : Not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: JString
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   ListSupportedTimezones: JBool
  ##                         : If this parameter is specified and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version.
  ##   DefaultOnly: JBool
  ##              : Indicates that only the default version of the specified engine or engine and major version combination is returned.
  section = newJObject()
  var valid_774318 = formData.getOrDefault("ListSupportedCharacterSets")
  valid_774318 = validateParameter(valid_774318, JBool, required = false, default = nil)
  if valid_774318 != nil:
    section.add "ListSupportedCharacterSets", valid_774318
  var valid_774319 = formData.getOrDefault("Engine")
  valid_774319 = validateParameter(valid_774319, JString, required = false,
                                 default = nil)
  if valid_774319 != nil:
    section.add "Engine", valid_774319
  var valid_774320 = formData.getOrDefault("Marker")
  valid_774320 = validateParameter(valid_774320, JString, required = false,
                                 default = nil)
  if valid_774320 != nil:
    section.add "Marker", valid_774320
  var valid_774321 = formData.getOrDefault("DBParameterGroupFamily")
  valid_774321 = validateParameter(valid_774321, JString, required = false,
                                 default = nil)
  if valid_774321 != nil:
    section.add "DBParameterGroupFamily", valid_774321
  var valid_774322 = formData.getOrDefault("Filters")
  valid_774322 = validateParameter(valid_774322, JArray, required = false,
                                 default = nil)
  if valid_774322 != nil:
    section.add "Filters", valid_774322
  var valid_774323 = formData.getOrDefault("MaxRecords")
  valid_774323 = validateParameter(valid_774323, JInt, required = false, default = nil)
  if valid_774323 != nil:
    section.add "MaxRecords", valid_774323
  var valid_774324 = formData.getOrDefault("EngineVersion")
  valid_774324 = validateParameter(valid_774324, JString, required = false,
                                 default = nil)
  if valid_774324 != nil:
    section.add "EngineVersion", valid_774324
  var valid_774325 = formData.getOrDefault("ListSupportedTimezones")
  valid_774325 = validateParameter(valid_774325, JBool, required = false, default = nil)
  if valid_774325 != nil:
    section.add "ListSupportedTimezones", valid_774325
  var valid_774326 = formData.getOrDefault("DefaultOnly")
  valid_774326 = validateParameter(valid_774326, JBool, required = false, default = nil)
  if valid_774326 != nil:
    section.add "DefaultOnly", valid_774326
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774327: Call_PostDescribeDBEngineVersions_774306; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the available DB engines.
  ## 
  let valid = call_774327.validator(path, query, header, formData, body)
  let scheme = call_774327.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774327.url(scheme.get, call_774327.host, call_774327.base,
                         call_774327.route, valid.getOrDefault("path"))
  result = hook(call_774327, url, valid)

proc call*(call_774328: Call_PostDescribeDBEngineVersions_774306;
          ListSupportedCharacterSets: bool = false; Engine: string = "";
          Marker: string = ""; Action: string = "DescribeDBEngineVersions";
          DBParameterGroupFamily: string = ""; Filters: JsonNode = nil;
          MaxRecords: int = 0; EngineVersion: string = "";
          ListSupportedTimezones: bool = false; Version: string = "2014-10-31";
          DefaultOnly: bool = false): Recallable =
  ## postDescribeDBEngineVersions
  ## Returns a list of the available DB engines.
  ##   ListSupportedCharacterSets: bool
  ##                             : If this parameter is specified and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version.
  ##   Engine: string
  ##         : The database engine to return.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   DBParameterGroupFamily: string
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  ##   Filters: JArray
  ##          : Not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: string
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   ListSupportedTimezones: bool
  ##                         : If this parameter is specified and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version.
  ##   Version: string (required)
  ##   DefaultOnly: bool
  ##              : Indicates that only the default version of the specified engine or engine and major version combination is returned.
  var query_774329 = newJObject()
  var formData_774330 = newJObject()
  add(formData_774330, "ListSupportedCharacterSets",
      newJBool(ListSupportedCharacterSets))
  add(formData_774330, "Engine", newJString(Engine))
  add(formData_774330, "Marker", newJString(Marker))
  add(query_774329, "Action", newJString(Action))
  add(formData_774330, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  if Filters != nil:
    formData_774330.add "Filters", Filters
  add(formData_774330, "MaxRecords", newJInt(MaxRecords))
  add(formData_774330, "EngineVersion", newJString(EngineVersion))
  add(formData_774330, "ListSupportedTimezones", newJBool(ListSupportedTimezones))
  add(query_774329, "Version", newJString(Version))
  add(formData_774330, "DefaultOnly", newJBool(DefaultOnly))
  result = call_774328.call(nil, query_774329, nil, formData_774330, nil)

var postDescribeDBEngineVersions* = Call_PostDescribeDBEngineVersions_774306(
    name: "postDescribeDBEngineVersions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBEngineVersions",
    validator: validate_PostDescribeDBEngineVersions_774307, base: "/",
    url: url_PostDescribeDBEngineVersions_774308,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBEngineVersions_774282 = ref object of OpenApiRestCall_772581
proc url_GetDescribeDBEngineVersions_774284(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeDBEngineVersions_774283(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the available DB engines.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString
  ##         : The database engine to return.
  ##   ListSupportedCharacterSets: JBool
  ##                             : If this parameter is specified and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupFamily: JString
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  ##   Filters: JArray
  ##          : Not currently supported.
  ##   ListSupportedTimezones: JBool
  ##                         : If this parameter is specified and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   EngineVersion: JString
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   DefaultOnly: JBool
  ##              : Indicates that only the default version of the specified engine or engine and major version combination is returned.
  ##   Version: JString (required)
  section = newJObject()
  var valid_774285 = query.getOrDefault("Engine")
  valid_774285 = validateParameter(valid_774285, JString, required = false,
                                 default = nil)
  if valid_774285 != nil:
    section.add "Engine", valid_774285
  var valid_774286 = query.getOrDefault("ListSupportedCharacterSets")
  valid_774286 = validateParameter(valid_774286, JBool, required = false, default = nil)
  if valid_774286 != nil:
    section.add "ListSupportedCharacterSets", valid_774286
  var valid_774287 = query.getOrDefault("MaxRecords")
  valid_774287 = validateParameter(valid_774287, JInt, required = false, default = nil)
  if valid_774287 != nil:
    section.add "MaxRecords", valid_774287
  var valid_774288 = query.getOrDefault("DBParameterGroupFamily")
  valid_774288 = validateParameter(valid_774288, JString, required = false,
                                 default = nil)
  if valid_774288 != nil:
    section.add "DBParameterGroupFamily", valid_774288
  var valid_774289 = query.getOrDefault("Filters")
  valid_774289 = validateParameter(valid_774289, JArray, required = false,
                                 default = nil)
  if valid_774289 != nil:
    section.add "Filters", valid_774289
  var valid_774290 = query.getOrDefault("ListSupportedTimezones")
  valid_774290 = validateParameter(valid_774290, JBool, required = false, default = nil)
  if valid_774290 != nil:
    section.add "ListSupportedTimezones", valid_774290
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774291 = query.getOrDefault("Action")
  valid_774291 = validateParameter(valid_774291, JString, required = true, default = newJString(
      "DescribeDBEngineVersions"))
  if valid_774291 != nil:
    section.add "Action", valid_774291
  var valid_774292 = query.getOrDefault("Marker")
  valid_774292 = validateParameter(valid_774292, JString, required = false,
                                 default = nil)
  if valid_774292 != nil:
    section.add "Marker", valid_774292
  var valid_774293 = query.getOrDefault("EngineVersion")
  valid_774293 = validateParameter(valid_774293, JString, required = false,
                                 default = nil)
  if valid_774293 != nil:
    section.add "EngineVersion", valid_774293
  var valid_774294 = query.getOrDefault("DefaultOnly")
  valid_774294 = validateParameter(valid_774294, JBool, required = false, default = nil)
  if valid_774294 != nil:
    section.add "DefaultOnly", valid_774294
  var valid_774295 = query.getOrDefault("Version")
  valid_774295 = validateParameter(valid_774295, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774295 != nil:
    section.add "Version", valid_774295
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774296 = header.getOrDefault("X-Amz-Date")
  valid_774296 = validateParameter(valid_774296, JString, required = false,
                                 default = nil)
  if valid_774296 != nil:
    section.add "X-Amz-Date", valid_774296
  var valid_774297 = header.getOrDefault("X-Amz-Security-Token")
  valid_774297 = validateParameter(valid_774297, JString, required = false,
                                 default = nil)
  if valid_774297 != nil:
    section.add "X-Amz-Security-Token", valid_774297
  var valid_774298 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774298 = validateParameter(valid_774298, JString, required = false,
                                 default = nil)
  if valid_774298 != nil:
    section.add "X-Amz-Content-Sha256", valid_774298
  var valid_774299 = header.getOrDefault("X-Amz-Algorithm")
  valid_774299 = validateParameter(valid_774299, JString, required = false,
                                 default = nil)
  if valid_774299 != nil:
    section.add "X-Amz-Algorithm", valid_774299
  var valid_774300 = header.getOrDefault("X-Amz-Signature")
  valid_774300 = validateParameter(valid_774300, JString, required = false,
                                 default = nil)
  if valid_774300 != nil:
    section.add "X-Amz-Signature", valid_774300
  var valid_774301 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774301 = validateParameter(valid_774301, JString, required = false,
                                 default = nil)
  if valid_774301 != nil:
    section.add "X-Amz-SignedHeaders", valid_774301
  var valid_774302 = header.getOrDefault("X-Amz-Credential")
  valid_774302 = validateParameter(valid_774302, JString, required = false,
                                 default = nil)
  if valid_774302 != nil:
    section.add "X-Amz-Credential", valid_774302
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774303: Call_GetDescribeDBEngineVersions_774282; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the available DB engines.
  ## 
  let valid = call_774303.validator(path, query, header, formData, body)
  let scheme = call_774303.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774303.url(scheme.get, call_774303.host, call_774303.base,
                         call_774303.route, valid.getOrDefault("path"))
  result = hook(call_774303, url, valid)

proc call*(call_774304: Call_GetDescribeDBEngineVersions_774282;
          Engine: string = ""; ListSupportedCharacterSets: bool = false;
          MaxRecords: int = 0; DBParameterGroupFamily: string = "";
          Filters: JsonNode = nil; ListSupportedTimezones: bool = false;
          Action: string = "DescribeDBEngineVersions"; Marker: string = "";
          EngineVersion: string = ""; DefaultOnly: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBEngineVersions
  ## Returns a list of the available DB engines.
  ##   Engine: string
  ##         : The database engine to return.
  ##   ListSupportedCharacterSets: bool
  ##                             : If this parameter is specified and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupFamily: string
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  ##   Filters: JArray
  ##          : Not currently supported.
  ##   ListSupportedTimezones: bool
  ##                         : If this parameter is specified and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   EngineVersion: string
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   DefaultOnly: bool
  ##              : Indicates that only the default version of the specified engine or engine and major version combination is returned.
  ##   Version: string (required)
  var query_774305 = newJObject()
  add(query_774305, "Engine", newJString(Engine))
  add(query_774305, "ListSupportedCharacterSets",
      newJBool(ListSupportedCharacterSets))
  add(query_774305, "MaxRecords", newJInt(MaxRecords))
  add(query_774305, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  if Filters != nil:
    query_774305.add "Filters", Filters
  add(query_774305, "ListSupportedTimezones", newJBool(ListSupportedTimezones))
  add(query_774305, "Action", newJString(Action))
  add(query_774305, "Marker", newJString(Marker))
  add(query_774305, "EngineVersion", newJString(EngineVersion))
  add(query_774305, "DefaultOnly", newJBool(DefaultOnly))
  add(query_774305, "Version", newJString(Version))
  result = call_774304.call(nil, query_774305, nil, nil, nil)

var getDescribeDBEngineVersions* = Call_GetDescribeDBEngineVersions_774282(
    name: "getDescribeDBEngineVersions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBEngineVersions",
    validator: validate_GetDescribeDBEngineVersions_774283, base: "/",
    url: url_GetDescribeDBEngineVersions_774284,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBInstances_774350 = ref object of OpenApiRestCall_772581
proc url_PostDescribeDBInstances_774352(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeDBInstances_774351(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about provisioned instances. This API supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774353 = query.getOrDefault("Action")
  valid_774353 = validateParameter(valid_774353, JString, required = true,
                                 default = newJString("DescribeDBInstances"))
  if valid_774353 != nil:
    section.add "Action", valid_774353
  var valid_774354 = query.getOrDefault("Version")
  valid_774354 = validateParameter(valid_774354, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774354 != nil:
    section.add "Version", valid_774354
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774355 = header.getOrDefault("X-Amz-Date")
  valid_774355 = validateParameter(valid_774355, JString, required = false,
                                 default = nil)
  if valid_774355 != nil:
    section.add "X-Amz-Date", valid_774355
  var valid_774356 = header.getOrDefault("X-Amz-Security-Token")
  valid_774356 = validateParameter(valid_774356, JString, required = false,
                                 default = nil)
  if valid_774356 != nil:
    section.add "X-Amz-Security-Token", valid_774356
  var valid_774357 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774357 = validateParameter(valid_774357, JString, required = false,
                                 default = nil)
  if valid_774357 != nil:
    section.add "X-Amz-Content-Sha256", valid_774357
  var valid_774358 = header.getOrDefault("X-Amz-Algorithm")
  valid_774358 = validateParameter(valid_774358, JString, required = false,
                                 default = nil)
  if valid_774358 != nil:
    section.add "X-Amz-Algorithm", valid_774358
  var valid_774359 = header.getOrDefault("X-Amz-Signature")
  valid_774359 = validateParameter(valid_774359, JString, required = false,
                                 default = nil)
  if valid_774359 != nil:
    section.add "X-Amz-Signature", valid_774359
  var valid_774360 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774360 = validateParameter(valid_774360, JString, required = false,
                                 default = nil)
  if valid_774360 != nil:
    section.add "X-Amz-SignedHeaders", valid_774360
  var valid_774361 = header.getOrDefault("X-Amz-Credential")
  valid_774361 = validateParameter(valid_774361, JString, required = false,
                                 default = nil)
  if valid_774361 != nil:
    section.add "X-Amz-Credential", valid_774361
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_774362 = formData.getOrDefault("DBInstanceIdentifier")
  valid_774362 = validateParameter(valid_774362, JString, required = false,
                                 default = nil)
  if valid_774362 != nil:
    section.add "DBInstanceIdentifier", valid_774362
  var valid_774363 = formData.getOrDefault("Marker")
  valid_774363 = validateParameter(valid_774363, JString, required = false,
                                 default = nil)
  if valid_774363 != nil:
    section.add "Marker", valid_774363
  var valid_774364 = formData.getOrDefault("Filters")
  valid_774364 = validateParameter(valid_774364, JArray, required = false,
                                 default = nil)
  if valid_774364 != nil:
    section.add "Filters", valid_774364
  var valid_774365 = formData.getOrDefault("MaxRecords")
  valid_774365 = validateParameter(valid_774365, JInt, required = false, default = nil)
  if valid_774365 != nil:
    section.add "MaxRecords", valid_774365
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774366: Call_PostDescribeDBInstances_774350; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about provisioned instances. This API supports pagination.
  ## 
  let valid = call_774366.validator(path, query, header, formData, body)
  let scheme = call_774366.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774366.url(scheme.get, call_774366.host, call_774366.base,
                         call_774366.route, valid.getOrDefault("path"))
  result = hook(call_774366, url, valid)

proc call*(call_774367: Call_PostDescribeDBInstances_774350;
          DBInstanceIdentifier: string = ""; Marker: string = "";
          Action: string = "DescribeDBInstances"; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBInstances
  ## Returns information about provisioned instances. This API supports pagination.
  ##   DBInstanceIdentifier: string
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_774368 = newJObject()
  var formData_774369 = newJObject()
  add(formData_774369, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_774369, "Marker", newJString(Marker))
  add(query_774368, "Action", newJString(Action))
  if Filters != nil:
    formData_774369.add "Filters", Filters
  add(formData_774369, "MaxRecords", newJInt(MaxRecords))
  add(query_774368, "Version", newJString(Version))
  result = call_774367.call(nil, query_774368, nil, formData_774369, nil)

var postDescribeDBInstances* = Call_PostDescribeDBInstances_774350(
    name: "postDescribeDBInstances", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBInstances",
    validator: validate_PostDescribeDBInstances_774351, base: "/",
    url: url_PostDescribeDBInstances_774352, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBInstances_774331 = ref object of OpenApiRestCall_772581
proc url_GetDescribeDBInstances_774333(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeDBInstances_774332(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about provisioned instances. This API supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  section = newJObject()
  var valid_774334 = query.getOrDefault("MaxRecords")
  valid_774334 = validateParameter(valid_774334, JInt, required = false, default = nil)
  if valid_774334 != nil:
    section.add "MaxRecords", valid_774334
  var valid_774335 = query.getOrDefault("Filters")
  valid_774335 = validateParameter(valid_774335, JArray, required = false,
                                 default = nil)
  if valid_774335 != nil:
    section.add "Filters", valid_774335
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774336 = query.getOrDefault("Action")
  valid_774336 = validateParameter(valid_774336, JString, required = true,
                                 default = newJString("DescribeDBInstances"))
  if valid_774336 != nil:
    section.add "Action", valid_774336
  var valid_774337 = query.getOrDefault("Marker")
  valid_774337 = validateParameter(valid_774337, JString, required = false,
                                 default = nil)
  if valid_774337 != nil:
    section.add "Marker", valid_774337
  var valid_774338 = query.getOrDefault("Version")
  valid_774338 = validateParameter(valid_774338, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774338 != nil:
    section.add "Version", valid_774338
  var valid_774339 = query.getOrDefault("DBInstanceIdentifier")
  valid_774339 = validateParameter(valid_774339, JString, required = false,
                                 default = nil)
  if valid_774339 != nil:
    section.add "DBInstanceIdentifier", valid_774339
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774340 = header.getOrDefault("X-Amz-Date")
  valid_774340 = validateParameter(valid_774340, JString, required = false,
                                 default = nil)
  if valid_774340 != nil:
    section.add "X-Amz-Date", valid_774340
  var valid_774341 = header.getOrDefault("X-Amz-Security-Token")
  valid_774341 = validateParameter(valid_774341, JString, required = false,
                                 default = nil)
  if valid_774341 != nil:
    section.add "X-Amz-Security-Token", valid_774341
  var valid_774342 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774342 = validateParameter(valid_774342, JString, required = false,
                                 default = nil)
  if valid_774342 != nil:
    section.add "X-Amz-Content-Sha256", valid_774342
  var valid_774343 = header.getOrDefault("X-Amz-Algorithm")
  valid_774343 = validateParameter(valid_774343, JString, required = false,
                                 default = nil)
  if valid_774343 != nil:
    section.add "X-Amz-Algorithm", valid_774343
  var valid_774344 = header.getOrDefault("X-Amz-Signature")
  valid_774344 = validateParameter(valid_774344, JString, required = false,
                                 default = nil)
  if valid_774344 != nil:
    section.add "X-Amz-Signature", valid_774344
  var valid_774345 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774345 = validateParameter(valid_774345, JString, required = false,
                                 default = nil)
  if valid_774345 != nil:
    section.add "X-Amz-SignedHeaders", valid_774345
  var valid_774346 = header.getOrDefault("X-Amz-Credential")
  valid_774346 = validateParameter(valid_774346, JString, required = false,
                                 default = nil)
  if valid_774346 != nil:
    section.add "X-Amz-Credential", valid_774346
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774347: Call_GetDescribeDBInstances_774331; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about provisioned instances. This API supports pagination.
  ## 
  let valid = call_774347.validator(path, query, header, formData, body)
  let scheme = call_774347.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774347.url(scheme.get, call_774347.host, call_774347.base,
                         call_774347.route, valid.getOrDefault("path"))
  result = hook(call_774347, url, valid)

proc call*(call_774348: Call_GetDescribeDBInstances_774331; MaxRecords: int = 0;
          Filters: JsonNode = nil; Action: string = "DescribeDBInstances";
          Marker: string = ""; Version: string = "2014-10-31";
          DBInstanceIdentifier: string = ""): Recallable =
  ## getDescribeDBInstances
  ## Returns information about provisioned instances. This API supports pagination.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> </ul>
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  var query_774349 = newJObject()
  add(query_774349, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_774349.add "Filters", Filters
  add(query_774349, "Action", newJString(Action))
  add(query_774349, "Marker", newJString(Marker))
  add(query_774349, "Version", newJString(Version))
  add(query_774349, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  result = call_774348.call(nil, query_774349, nil, nil, nil)

var getDescribeDBInstances* = Call_GetDescribeDBInstances_774331(
    name: "getDescribeDBInstances", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBInstances",
    validator: validate_GetDescribeDBInstances_774332, base: "/",
    url: url_GetDescribeDBInstances_774333, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBParameterGroups_774389 = ref object of OpenApiRestCall_772581
proc url_PostDescribeDBParameterGroups_774391(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeDBParameterGroups_774390(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774392 = query.getOrDefault("Action")
  valid_774392 = validateParameter(valid_774392, JString, required = true, default = newJString(
      "DescribeDBParameterGroups"))
  if valid_774392 != nil:
    section.add "Action", valid_774392
  var valid_774393 = query.getOrDefault("Version")
  valid_774393 = validateParameter(valid_774393, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774393 != nil:
    section.add "Version", valid_774393
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774394 = header.getOrDefault("X-Amz-Date")
  valid_774394 = validateParameter(valid_774394, JString, required = false,
                                 default = nil)
  if valid_774394 != nil:
    section.add "X-Amz-Date", valid_774394
  var valid_774395 = header.getOrDefault("X-Amz-Security-Token")
  valid_774395 = validateParameter(valid_774395, JString, required = false,
                                 default = nil)
  if valid_774395 != nil:
    section.add "X-Amz-Security-Token", valid_774395
  var valid_774396 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774396 = validateParameter(valid_774396, JString, required = false,
                                 default = nil)
  if valid_774396 != nil:
    section.add "X-Amz-Content-Sha256", valid_774396
  var valid_774397 = header.getOrDefault("X-Amz-Algorithm")
  valid_774397 = validateParameter(valid_774397, JString, required = false,
                                 default = nil)
  if valid_774397 != nil:
    section.add "X-Amz-Algorithm", valid_774397
  var valid_774398 = header.getOrDefault("X-Amz-Signature")
  valid_774398 = validateParameter(valid_774398, JString, required = false,
                                 default = nil)
  if valid_774398 != nil:
    section.add "X-Amz-Signature", valid_774398
  var valid_774399 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774399 = validateParameter(valid_774399, JString, required = false,
                                 default = nil)
  if valid_774399 != nil:
    section.add "X-Amz-SignedHeaders", valid_774399
  var valid_774400 = header.getOrDefault("X-Amz-Credential")
  valid_774400 = validateParameter(valid_774400, JString, required = false,
                                 default = nil)
  if valid_774400 != nil:
    section.add "X-Amz-Credential", valid_774400
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_774401 = formData.getOrDefault("DBParameterGroupName")
  valid_774401 = validateParameter(valid_774401, JString, required = false,
                                 default = nil)
  if valid_774401 != nil:
    section.add "DBParameterGroupName", valid_774401
  var valid_774402 = formData.getOrDefault("Marker")
  valid_774402 = validateParameter(valid_774402, JString, required = false,
                                 default = nil)
  if valid_774402 != nil:
    section.add "Marker", valid_774402
  var valid_774403 = formData.getOrDefault("Filters")
  valid_774403 = validateParameter(valid_774403, JArray, required = false,
                                 default = nil)
  if valid_774403 != nil:
    section.add "Filters", valid_774403
  var valid_774404 = formData.getOrDefault("MaxRecords")
  valid_774404 = validateParameter(valid_774404, JInt, required = false, default = nil)
  if valid_774404 != nil:
    section.add "MaxRecords", valid_774404
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774405: Call_PostDescribeDBParameterGroups_774389; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group.
  ## 
  let valid = call_774405.validator(path, query, header, formData, body)
  let scheme = call_774405.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774405.url(scheme.get, call_774405.host, call_774405.base,
                         call_774405.route, valid.getOrDefault("path"))
  result = hook(call_774405, url, valid)

proc call*(call_774406: Call_PostDescribeDBParameterGroups_774389;
          DBParameterGroupName: string = ""; Marker: string = "";
          Action: string = "DescribeDBParameterGroups"; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBParameterGroups
  ## Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group.
  ##   DBParameterGroupName: string
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_774407 = newJObject()
  var formData_774408 = newJObject()
  add(formData_774408, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_774408, "Marker", newJString(Marker))
  add(query_774407, "Action", newJString(Action))
  if Filters != nil:
    formData_774408.add "Filters", Filters
  add(formData_774408, "MaxRecords", newJInt(MaxRecords))
  add(query_774407, "Version", newJString(Version))
  result = call_774406.call(nil, query_774407, nil, formData_774408, nil)

var postDescribeDBParameterGroups* = Call_PostDescribeDBParameterGroups_774389(
    name: "postDescribeDBParameterGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameterGroups",
    validator: validate_PostDescribeDBParameterGroups_774390, base: "/",
    url: url_PostDescribeDBParameterGroups_774391,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBParameterGroups_774370 = ref object of OpenApiRestCall_772581
proc url_GetDescribeDBParameterGroups_774372(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeDBParameterGroups_774371(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: JString (required)
  section = newJObject()
  var valid_774373 = query.getOrDefault("MaxRecords")
  valid_774373 = validateParameter(valid_774373, JInt, required = false, default = nil)
  if valid_774373 != nil:
    section.add "MaxRecords", valid_774373
  var valid_774374 = query.getOrDefault("Filters")
  valid_774374 = validateParameter(valid_774374, JArray, required = false,
                                 default = nil)
  if valid_774374 != nil:
    section.add "Filters", valid_774374
  var valid_774375 = query.getOrDefault("DBParameterGroupName")
  valid_774375 = validateParameter(valid_774375, JString, required = false,
                                 default = nil)
  if valid_774375 != nil:
    section.add "DBParameterGroupName", valid_774375
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774376 = query.getOrDefault("Action")
  valid_774376 = validateParameter(valid_774376, JString, required = true, default = newJString(
      "DescribeDBParameterGroups"))
  if valid_774376 != nil:
    section.add "Action", valid_774376
  var valid_774377 = query.getOrDefault("Marker")
  valid_774377 = validateParameter(valid_774377, JString, required = false,
                                 default = nil)
  if valid_774377 != nil:
    section.add "Marker", valid_774377
  var valid_774378 = query.getOrDefault("Version")
  valid_774378 = validateParameter(valid_774378, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774378 != nil:
    section.add "Version", valid_774378
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774379 = header.getOrDefault("X-Amz-Date")
  valid_774379 = validateParameter(valid_774379, JString, required = false,
                                 default = nil)
  if valid_774379 != nil:
    section.add "X-Amz-Date", valid_774379
  var valid_774380 = header.getOrDefault("X-Amz-Security-Token")
  valid_774380 = validateParameter(valid_774380, JString, required = false,
                                 default = nil)
  if valid_774380 != nil:
    section.add "X-Amz-Security-Token", valid_774380
  var valid_774381 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774381 = validateParameter(valid_774381, JString, required = false,
                                 default = nil)
  if valid_774381 != nil:
    section.add "X-Amz-Content-Sha256", valid_774381
  var valid_774382 = header.getOrDefault("X-Amz-Algorithm")
  valid_774382 = validateParameter(valid_774382, JString, required = false,
                                 default = nil)
  if valid_774382 != nil:
    section.add "X-Amz-Algorithm", valid_774382
  var valid_774383 = header.getOrDefault("X-Amz-Signature")
  valid_774383 = validateParameter(valid_774383, JString, required = false,
                                 default = nil)
  if valid_774383 != nil:
    section.add "X-Amz-Signature", valid_774383
  var valid_774384 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774384 = validateParameter(valid_774384, JString, required = false,
                                 default = nil)
  if valid_774384 != nil:
    section.add "X-Amz-SignedHeaders", valid_774384
  var valid_774385 = header.getOrDefault("X-Amz-Credential")
  valid_774385 = validateParameter(valid_774385, JString, required = false,
                                 default = nil)
  if valid_774385 != nil:
    section.add "X-Amz-Credential", valid_774385
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774386: Call_GetDescribeDBParameterGroups_774370; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group.
  ## 
  let valid = call_774386.validator(path, query, header, formData, body)
  let scheme = call_774386.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774386.url(scheme.get, call_774386.host, call_774386.base,
                         call_774386.route, valid.getOrDefault("path"))
  result = hook(call_774386, url, valid)

proc call*(call_774387: Call_GetDescribeDBParameterGroups_774370;
          MaxRecords: int = 0; Filters: JsonNode = nil;
          DBParameterGroupName: string = "";
          Action: string = "DescribeDBParameterGroups"; Marker: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBParameterGroups
  ## Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   DBParameterGroupName: string
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: string (required)
  var query_774388 = newJObject()
  add(query_774388, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_774388.add "Filters", Filters
  add(query_774388, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_774388, "Action", newJString(Action))
  add(query_774388, "Marker", newJString(Marker))
  add(query_774388, "Version", newJString(Version))
  result = call_774387.call(nil, query_774388, nil, nil, nil)

var getDescribeDBParameterGroups* = Call_GetDescribeDBParameterGroups_774370(
    name: "getDescribeDBParameterGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameterGroups",
    validator: validate_GetDescribeDBParameterGroups_774371, base: "/",
    url: url_GetDescribeDBParameterGroups_774372,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBParameters_774429 = ref object of OpenApiRestCall_772581
proc url_PostDescribeDBParameters_774431(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeDBParameters_774430(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774432 = query.getOrDefault("Action")
  valid_774432 = validateParameter(valid_774432, JString, required = true,
                                 default = newJString("DescribeDBParameters"))
  if valid_774432 != nil:
    section.add "Action", valid_774432
  var valid_774433 = query.getOrDefault("Version")
  valid_774433 = validateParameter(valid_774433, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774433 != nil:
    section.add "Version", valid_774433
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774434 = header.getOrDefault("X-Amz-Date")
  valid_774434 = validateParameter(valid_774434, JString, required = false,
                                 default = nil)
  if valid_774434 != nil:
    section.add "X-Amz-Date", valid_774434
  var valid_774435 = header.getOrDefault("X-Amz-Security-Token")
  valid_774435 = validateParameter(valid_774435, JString, required = false,
                                 default = nil)
  if valid_774435 != nil:
    section.add "X-Amz-Security-Token", valid_774435
  var valid_774436 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774436 = validateParameter(valid_774436, JString, required = false,
                                 default = nil)
  if valid_774436 != nil:
    section.add "X-Amz-Content-Sha256", valid_774436
  var valid_774437 = header.getOrDefault("X-Amz-Algorithm")
  valid_774437 = validateParameter(valid_774437, JString, required = false,
                                 default = nil)
  if valid_774437 != nil:
    section.add "X-Amz-Algorithm", valid_774437
  var valid_774438 = header.getOrDefault("X-Amz-Signature")
  valid_774438 = validateParameter(valid_774438, JString, required = false,
                                 default = nil)
  if valid_774438 != nil:
    section.add "X-Amz-Signature", valid_774438
  var valid_774439 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774439 = validateParameter(valid_774439, JString, required = false,
                                 default = nil)
  if valid_774439 != nil:
    section.add "X-Amz-SignedHeaders", valid_774439
  var valid_774440 = header.getOrDefault("X-Amz-Credential")
  valid_774440 = validateParameter(valid_774440, JString, required = false,
                                 default = nil)
  if valid_774440 != nil:
    section.add "X-Amz-Credential", valid_774440
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Source: JString
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_774441 = formData.getOrDefault("DBParameterGroupName")
  valid_774441 = validateParameter(valid_774441, JString, required = true,
                                 default = nil)
  if valid_774441 != nil:
    section.add "DBParameterGroupName", valid_774441
  var valid_774442 = formData.getOrDefault("Marker")
  valid_774442 = validateParameter(valid_774442, JString, required = false,
                                 default = nil)
  if valid_774442 != nil:
    section.add "Marker", valid_774442
  var valid_774443 = formData.getOrDefault("Filters")
  valid_774443 = validateParameter(valid_774443, JArray, required = false,
                                 default = nil)
  if valid_774443 != nil:
    section.add "Filters", valid_774443
  var valid_774444 = formData.getOrDefault("MaxRecords")
  valid_774444 = validateParameter(valid_774444, JInt, required = false, default = nil)
  if valid_774444 != nil:
    section.add "MaxRecords", valid_774444
  var valid_774445 = formData.getOrDefault("Source")
  valid_774445 = validateParameter(valid_774445, JString, required = false,
                                 default = nil)
  if valid_774445 != nil:
    section.add "Source", valid_774445
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774446: Call_PostDescribeDBParameters_774429; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  let valid = call_774446.validator(path, query, header, formData, body)
  let scheme = call_774446.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774446.url(scheme.get, call_774446.host, call_774446.base,
                         call_774446.route, valid.getOrDefault("path"))
  result = hook(call_774446, url, valid)

proc call*(call_774447: Call_PostDescribeDBParameters_774429;
          DBParameterGroupName: string; Marker: string = "";
          Action: string = "DescribeDBParameters"; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"; Source: string = ""): Recallable =
  ## postDescribeDBParameters
  ## Returns the detailed parameter list for a particular DB parameter group.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  ##   Source: string
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  var query_774448 = newJObject()
  var formData_774449 = newJObject()
  add(formData_774449, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_774449, "Marker", newJString(Marker))
  add(query_774448, "Action", newJString(Action))
  if Filters != nil:
    formData_774449.add "Filters", Filters
  add(formData_774449, "MaxRecords", newJInt(MaxRecords))
  add(query_774448, "Version", newJString(Version))
  add(formData_774449, "Source", newJString(Source))
  result = call_774447.call(nil, query_774448, nil, formData_774449, nil)

var postDescribeDBParameters* = Call_PostDescribeDBParameters_774429(
    name: "postDescribeDBParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameters",
    validator: validate_PostDescribeDBParameters_774430, base: "/",
    url: url_PostDescribeDBParameters_774431, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBParameters_774409 = ref object of OpenApiRestCall_772581
proc url_GetDescribeDBParameters_774411(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeDBParameters_774410(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Source: JString
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_774412 = query.getOrDefault("MaxRecords")
  valid_774412 = validateParameter(valid_774412, JInt, required = false, default = nil)
  if valid_774412 != nil:
    section.add "MaxRecords", valid_774412
  var valid_774413 = query.getOrDefault("Filters")
  valid_774413 = validateParameter(valid_774413, JArray, required = false,
                                 default = nil)
  if valid_774413 != nil:
    section.add "Filters", valid_774413
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_774414 = query.getOrDefault("DBParameterGroupName")
  valid_774414 = validateParameter(valid_774414, JString, required = true,
                                 default = nil)
  if valid_774414 != nil:
    section.add "DBParameterGroupName", valid_774414
  var valid_774415 = query.getOrDefault("Action")
  valid_774415 = validateParameter(valid_774415, JString, required = true,
                                 default = newJString("DescribeDBParameters"))
  if valid_774415 != nil:
    section.add "Action", valid_774415
  var valid_774416 = query.getOrDefault("Marker")
  valid_774416 = validateParameter(valid_774416, JString, required = false,
                                 default = nil)
  if valid_774416 != nil:
    section.add "Marker", valid_774416
  var valid_774417 = query.getOrDefault("Source")
  valid_774417 = validateParameter(valid_774417, JString, required = false,
                                 default = nil)
  if valid_774417 != nil:
    section.add "Source", valid_774417
  var valid_774418 = query.getOrDefault("Version")
  valid_774418 = validateParameter(valid_774418, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774418 != nil:
    section.add "Version", valid_774418
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774419 = header.getOrDefault("X-Amz-Date")
  valid_774419 = validateParameter(valid_774419, JString, required = false,
                                 default = nil)
  if valid_774419 != nil:
    section.add "X-Amz-Date", valid_774419
  var valid_774420 = header.getOrDefault("X-Amz-Security-Token")
  valid_774420 = validateParameter(valid_774420, JString, required = false,
                                 default = nil)
  if valid_774420 != nil:
    section.add "X-Amz-Security-Token", valid_774420
  var valid_774421 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774421 = validateParameter(valid_774421, JString, required = false,
                                 default = nil)
  if valid_774421 != nil:
    section.add "X-Amz-Content-Sha256", valid_774421
  var valid_774422 = header.getOrDefault("X-Amz-Algorithm")
  valid_774422 = validateParameter(valid_774422, JString, required = false,
                                 default = nil)
  if valid_774422 != nil:
    section.add "X-Amz-Algorithm", valid_774422
  var valid_774423 = header.getOrDefault("X-Amz-Signature")
  valid_774423 = validateParameter(valid_774423, JString, required = false,
                                 default = nil)
  if valid_774423 != nil:
    section.add "X-Amz-Signature", valid_774423
  var valid_774424 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774424 = validateParameter(valid_774424, JString, required = false,
                                 default = nil)
  if valid_774424 != nil:
    section.add "X-Amz-SignedHeaders", valid_774424
  var valid_774425 = header.getOrDefault("X-Amz-Credential")
  valid_774425 = validateParameter(valid_774425, JString, required = false,
                                 default = nil)
  if valid_774425 != nil:
    section.add "X-Amz-Credential", valid_774425
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774426: Call_GetDescribeDBParameters_774409; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  let valid = call_774426.validator(path, query, header, formData, body)
  let scheme = call_774426.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774426.url(scheme.get, call_774426.host, call_774426.base,
                         call_774426.route, valid.getOrDefault("path"))
  result = hook(call_774426, url, valid)

proc call*(call_774427: Call_GetDescribeDBParameters_774409;
          DBParameterGroupName: string; MaxRecords: int = 0; Filters: JsonNode = nil;
          Action: string = "DescribeDBParameters"; Marker: string = "";
          Source: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBParameters
  ## Returns the detailed parameter list for a particular DB parameter group.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Source: string
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  ##   Version: string (required)
  var query_774428 = newJObject()
  add(query_774428, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_774428.add "Filters", Filters
  add(query_774428, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_774428, "Action", newJString(Action))
  add(query_774428, "Marker", newJString(Marker))
  add(query_774428, "Source", newJString(Source))
  add(query_774428, "Version", newJString(Version))
  result = call_774427.call(nil, query_774428, nil, nil, nil)

var getDescribeDBParameters* = Call_GetDescribeDBParameters_774409(
    name: "getDescribeDBParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameters",
    validator: validate_GetDescribeDBParameters_774410, base: "/",
    url: url_GetDescribeDBParameters_774411, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBSubnetGroups_774469 = ref object of OpenApiRestCall_772581
proc url_PostDescribeDBSubnetGroups_774471(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeDBSubnetGroups_774470(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774472 = query.getOrDefault("Action")
  valid_774472 = validateParameter(valid_774472, JString, required = true,
                                 default = newJString("DescribeDBSubnetGroups"))
  if valid_774472 != nil:
    section.add "Action", valid_774472
  var valid_774473 = query.getOrDefault("Version")
  valid_774473 = validateParameter(valid_774473, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774473 != nil:
    section.add "Version", valid_774473
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774474 = header.getOrDefault("X-Amz-Date")
  valid_774474 = validateParameter(valid_774474, JString, required = false,
                                 default = nil)
  if valid_774474 != nil:
    section.add "X-Amz-Date", valid_774474
  var valid_774475 = header.getOrDefault("X-Amz-Security-Token")
  valid_774475 = validateParameter(valid_774475, JString, required = false,
                                 default = nil)
  if valid_774475 != nil:
    section.add "X-Amz-Security-Token", valid_774475
  var valid_774476 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774476 = validateParameter(valid_774476, JString, required = false,
                                 default = nil)
  if valid_774476 != nil:
    section.add "X-Amz-Content-Sha256", valid_774476
  var valid_774477 = header.getOrDefault("X-Amz-Algorithm")
  valid_774477 = validateParameter(valid_774477, JString, required = false,
                                 default = nil)
  if valid_774477 != nil:
    section.add "X-Amz-Algorithm", valid_774477
  var valid_774478 = header.getOrDefault("X-Amz-Signature")
  valid_774478 = validateParameter(valid_774478, JString, required = false,
                                 default = nil)
  if valid_774478 != nil:
    section.add "X-Amz-Signature", valid_774478
  var valid_774479 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774479 = validateParameter(valid_774479, JString, required = false,
                                 default = nil)
  if valid_774479 != nil:
    section.add "X-Amz-SignedHeaders", valid_774479
  var valid_774480 = header.getOrDefault("X-Amz-Credential")
  valid_774480 = validateParameter(valid_774480, JString, required = false,
                                 default = nil)
  if valid_774480 != nil:
    section.add "X-Amz-Credential", valid_774480
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSubnetGroupName: JString
  ##                    : The name of the DB subnet group to return details for.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_774481 = formData.getOrDefault("DBSubnetGroupName")
  valid_774481 = validateParameter(valid_774481, JString, required = false,
                                 default = nil)
  if valid_774481 != nil:
    section.add "DBSubnetGroupName", valid_774481
  var valid_774482 = formData.getOrDefault("Marker")
  valid_774482 = validateParameter(valid_774482, JString, required = false,
                                 default = nil)
  if valid_774482 != nil:
    section.add "Marker", valid_774482
  var valid_774483 = formData.getOrDefault("Filters")
  valid_774483 = validateParameter(valid_774483, JArray, required = false,
                                 default = nil)
  if valid_774483 != nil:
    section.add "Filters", valid_774483
  var valid_774484 = formData.getOrDefault("MaxRecords")
  valid_774484 = validateParameter(valid_774484, JInt, required = false, default = nil)
  if valid_774484 != nil:
    section.add "MaxRecords", valid_774484
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774485: Call_PostDescribeDBSubnetGroups_774469; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>.</p>
  ## 
  let valid = call_774485.validator(path, query, header, formData, body)
  let scheme = call_774485.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774485.url(scheme.get, call_774485.host, call_774485.base,
                         call_774485.route, valid.getOrDefault("path"))
  result = hook(call_774485, url, valid)

proc call*(call_774486: Call_PostDescribeDBSubnetGroups_774469;
          DBSubnetGroupName: string = ""; Marker: string = "";
          Action: string = "DescribeDBSubnetGroups"; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBSubnetGroups
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>.</p>
  ##   DBSubnetGroupName: string
  ##                    : The name of the DB subnet group to return details for.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_774487 = newJObject()
  var formData_774488 = newJObject()
  add(formData_774488, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_774488, "Marker", newJString(Marker))
  add(query_774487, "Action", newJString(Action))
  if Filters != nil:
    formData_774488.add "Filters", Filters
  add(formData_774488, "MaxRecords", newJInt(MaxRecords))
  add(query_774487, "Version", newJString(Version))
  result = call_774486.call(nil, query_774487, nil, formData_774488, nil)

var postDescribeDBSubnetGroups* = Call_PostDescribeDBSubnetGroups_774469(
    name: "postDescribeDBSubnetGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSubnetGroups",
    validator: validate_PostDescribeDBSubnetGroups_774470, base: "/",
    url: url_PostDescribeDBSubnetGroups_774471,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBSubnetGroups_774450 = ref object of OpenApiRestCall_772581
proc url_GetDescribeDBSubnetGroups_774452(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeDBSubnetGroups_774451(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBSubnetGroupName: JString
  ##                    : The name of the DB subnet group to return details for.
  ##   Version: JString (required)
  section = newJObject()
  var valid_774453 = query.getOrDefault("MaxRecords")
  valid_774453 = validateParameter(valid_774453, JInt, required = false, default = nil)
  if valid_774453 != nil:
    section.add "MaxRecords", valid_774453
  var valid_774454 = query.getOrDefault("Filters")
  valid_774454 = validateParameter(valid_774454, JArray, required = false,
                                 default = nil)
  if valid_774454 != nil:
    section.add "Filters", valid_774454
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774455 = query.getOrDefault("Action")
  valid_774455 = validateParameter(valid_774455, JString, required = true,
                                 default = newJString("DescribeDBSubnetGroups"))
  if valid_774455 != nil:
    section.add "Action", valid_774455
  var valid_774456 = query.getOrDefault("Marker")
  valid_774456 = validateParameter(valid_774456, JString, required = false,
                                 default = nil)
  if valid_774456 != nil:
    section.add "Marker", valid_774456
  var valid_774457 = query.getOrDefault("DBSubnetGroupName")
  valid_774457 = validateParameter(valid_774457, JString, required = false,
                                 default = nil)
  if valid_774457 != nil:
    section.add "DBSubnetGroupName", valid_774457
  var valid_774458 = query.getOrDefault("Version")
  valid_774458 = validateParameter(valid_774458, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774458 != nil:
    section.add "Version", valid_774458
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774459 = header.getOrDefault("X-Amz-Date")
  valid_774459 = validateParameter(valid_774459, JString, required = false,
                                 default = nil)
  if valid_774459 != nil:
    section.add "X-Amz-Date", valid_774459
  var valid_774460 = header.getOrDefault("X-Amz-Security-Token")
  valid_774460 = validateParameter(valid_774460, JString, required = false,
                                 default = nil)
  if valid_774460 != nil:
    section.add "X-Amz-Security-Token", valid_774460
  var valid_774461 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774461 = validateParameter(valid_774461, JString, required = false,
                                 default = nil)
  if valid_774461 != nil:
    section.add "X-Amz-Content-Sha256", valid_774461
  var valid_774462 = header.getOrDefault("X-Amz-Algorithm")
  valid_774462 = validateParameter(valid_774462, JString, required = false,
                                 default = nil)
  if valid_774462 != nil:
    section.add "X-Amz-Algorithm", valid_774462
  var valid_774463 = header.getOrDefault("X-Amz-Signature")
  valid_774463 = validateParameter(valid_774463, JString, required = false,
                                 default = nil)
  if valid_774463 != nil:
    section.add "X-Amz-Signature", valid_774463
  var valid_774464 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774464 = validateParameter(valid_774464, JString, required = false,
                                 default = nil)
  if valid_774464 != nil:
    section.add "X-Amz-SignedHeaders", valid_774464
  var valid_774465 = header.getOrDefault("X-Amz-Credential")
  valid_774465 = validateParameter(valid_774465, JString, required = false,
                                 default = nil)
  if valid_774465 != nil:
    section.add "X-Amz-Credential", valid_774465
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774466: Call_GetDescribeDBSubnetGroups_774450; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>.</p>
  ## 
  let valid = call_774466.validator(path, query, header, formData, body)
  let scheme = call_774466.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774466.url(scheme.get, call_774466.host, call_774466.base,
                         call_774466.route, valid.getOrDefault("path"))
  result = hook(call_774466, url, valid)

proc call*(call_774467: Call_GetDescribeDBSubnetGroups_774450; MaxRecords: int = 0;
          Filters: JsonNode = nil; Action: string = "DescribeDBSubnetGroups";
          Marker: string = ""; DBSubnetGroupName: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBSubnetGroups
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>.</p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBSubnetGroupName: string
  ##                    : The name of the DB subnet group to return details for.
  ##   Version: string (required)
  var query_774468 = newJObject()
  add(query_774468, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_774468.add "Filters", Filters
  add(query_774468, "Action", newJString(Action))
  add(query_774468, "Marker", newJString(Marker))
  add(query_774468, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_774468, "Version", newJString(Version))
  result = call_774467.call(nil, query_774468, nil, nil, nil)

var getDescribeDBSubnetGroups* = Call_GetDescribeDBSubnetGroups_774450(
    name: "getDescribeDBSubnetGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSubnetGroups",
    validator: validate_GetDescribeDBSubnetGroups_774451, base: "/",
    url: url_GetDescribeDBSubnetGroups_774452,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEngineDefaultClusterParameters_774508 = ref object of OpenApiRestCall_772581
proc url_PostDescribeEngineDefaultClusterParameters_774510(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeEngineDefaultClusterParameters_774509(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the cluster database engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774511 = query.getOrDefault("Action")
  valid_774511 = validateParameter(valid_774511, JString, required = true, default = newJString(
      "DescribeEngineDefaultClusterParameters"))
  if valid_774511 != nil:
    section.add "Action", valid_774511
  var valid_774512 = query.getOrDefault("Version")
  valid_774512 = validateParameter(valid_774512, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774512 != nil:
    section.add "Version", valid_774512
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774513 = header.getOrDefault("X-Amz-Date")
  valid_774513 = validateParameter(valid_774513, JString, required = false,
                                 default = nil)
  if valid_774513 != nil:
    section.add "X-Amz-Date", valid_774513
  var valid_774514 = header.getOrDefault("X-Amz-Security-Token")
  valid_774514 = validateParameter(valid_774514, JString, required = false,
                                 default = nil)
  if valid_774514 != nil:
    section.add "X-Amz-Security-Token", valid_774514
  var valid_774515 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774515 = validateParameter(valid_774515, JString, required = false,
                                 default = nil)
  if valid_774515 != nil:
    section.add "X-Amz-Content-Sha256", valid_774515
  var valid_774516 = header.getOrDefault("X-Amz-Algorithm")
  valid_774516 = validateParameter(valid_774516, JString, required = false,
                                 default = nil)
  if valid_774516 != nil:
    section.add "X-Amz-Algorithm", valid_774516
  var valid_774517 = header.getOrDefault("X-Amz-Signature")
  valid_774517 = validateParameter(valid_774517, JString, required = false,
                                 default = nil)
  if valid_774517 != nil:
    section.add "X-Amz-Signature", valid_774517
  var valid_774518 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774518 = validateParameter(valid_774518, JString, required = false,
                                 default = nil)
  if valid_774518 != nil:
    section.add "X-Amz-SignedHeaders", valid_774518
  var valid_774519 = header.getOrDefault("X-Amz-Credential")
  valid_774519 = validateParameter(valid_774519, JString, required = false,
                                 default = nil)
  if valid_774519 != nil:
    section.add "X-Amz-Credential", valid_774519
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_774520 = formData.getOrDefault("Marker")
  valid_774520 = validateParameter(valid_774520, JString, required = false,
                                 default = nil)
  if valid_774520 != nil:
    section.add "Marker", valid_774520
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_774521 = formData.getOrDefault("DBParameterGroupFamily")
  valid_774521 = validateParameter(valid_774521, JString, required = true,
                                 default = nil)
  if valid_774521 != nil:
    section.add "DBParameterGroupFamily", valid_774521
  var valid_774522 = formData.getOrDefault("Filters")
  valid_774522 = validateParameter(valid_774522, JArray, required = false,
                                 default = nil)
  if valid_774522 != nil:
    section.add "Filters", valid_774522
  var valid_774523 = formData.getOrDefault("MaxRecords")
  valid_774523 = validateParameter(valid_774523, JInt, required = false, default = nil)
  if valid_774523 != nil:
    section.add "MaxRecords", valid_774523
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774524: Call_PostDescribeEngineDefaultClusterParameters_774508;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the cluster database engine.
  ## 
  let valid = call_774524.validator(path, query, header, formData, body)
  let scheme = call_774524.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774524.url(scheme.get, call_774524.host, call_774524.base,
                         call_774524.route, valid.getOrDefault("path"))
  result = hook(call_774524, url, valid)

proc call*(call_774525: Call_PostDescribeEngineDefaultClusterParameters_774508;
          DBParameterGroupFamily: string; Marker: string = "";
          Action: string = "DescribeEngineDefaultClusterParameters";
          Filters: JsonNode = nil; MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeEngineDefaultClusterParameters
  ## Returns the default engine and system parameter information for the cluster database engine.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_774526 = newJObject()
  var formData_774527 = newJObject()
  add(formData_774527, "Marker", newJString(Marker))
  add(query_774526, "Action", newJString(Action))
  add(formData_774527, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  if Filters != nil:
    formData_774527.add "Filters", Filters
  add(formData_774527, "MaxRecords", newJInt(MaxRecords))
  add(query_774526, "Version", newJString(Version))
  result = call_774525.call(nil, query_774526, nil, formData_774527, nil)

var postDescribeEngineDefaultClusterParameters* = Call_PostDescribeEngineDefaultClusterParameters_774508(
    name: "postDescribeEngineDefaultClusterParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeEngineDefaultClusterParameters",
    validator: validate_PostDescribeEngineDefaultClusterParameters_774509,
    base: "/", url: url_PostDescribeEngineDefaultClusterParameters_774510,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEngineDefaultClusterParameters_774489 = ref object of OpenApiRestCall_772581
proc url_GetDescribeEngineDefaultClusterParameters_774491(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeEngineDefaultClusterParameters_774490(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the cluster database engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: JString (required)
  section = newJObject()
  var valid_774492 = query.getOrDefault("MaxRecords")
  valid_774492 = validateParameter(valid_774492, JInt, required = false, default = nil)
  if valid_774492 != nil:
    section.add "MaxRecords", valid_774492
  assert query != nil, "query argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_774493 = query.getOrDefault("DBParameterGroupFamily")
  valid_774493 = validateParameter(valid_774493, JString, required = true,
                                 default = nil)
  if valid_774493 != nil:
    section.add "DBParameterGroupFamily", valid_774493
  var valid_774494 = query.getOrDefault("Filters")
  valid_774494 = validateParameter(valid_774494, JArray, required = false,
                                 default = nil)
  if valid_774494 != nil:
    section.add "Filters", valid_774494
  var valid_774495 = query.getOrDefault("Action")
  valid_774495 = validateParameter(valid_774495, JString, required = true, default = newJString(
      "DescribeEngineDefaultClusterParameters"))
  if valid_774495 != nil:
    section.add "Action", valid_774495
  var valid_774496 = query.getOrDefault("Marker")
  valid_774496 = validateParameter(valid_774496, JString, required = false,
                                 default = nil)
  if valid_774496 != nil:
    section.add "Marker", valid_774496
  var valid_774497 = query.getOrDefault("Version")
  valid_774497 = validateParameter(valid_774497, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774497 != nil:
    section.add "Version", valid_774497
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774498 = header.getOrDefault("X-Amz-Date")
  valid_774498 = validateParameter(valid_774498, JString, required = false,
                                 default = nil)
  if valid_774498 != nil:
    section.add "X-Amz-Date", valid_774498
  var valid_774499 = header.getOrDefault("X-Amz-Security-Token")
  valid_774499 = validateParameter(valid_774499, JString, required = false,
                                 default = nil)
  if valid_774499 != nil:
    section.add "X-Amz-Security-Token", valid_774499
  var valid_774500 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774500 = validateParameter(valid_774500, JString, required = false,
                                 default = nil)
  if valid_774500 != nil:
    section.add "X-Amz-Content-Sha256", valid_774500
  var valid_774501 = header.getOrDefault("X-Amz-Algorithm")
  valid_774501 = validateParameter(valid_774501, JString, required = false,
                                 default = nil)
  if valid_774501 != nil:
    section.add "X-Amz-Algorithm", valid_774501
  var valid_774502 = header.getOrDefault("X-Amz-Signature")
  valid_774502 = validateParameter(valid_774502, JString, required = false,
                                 default = nil)
  if valid_774502 != nil:
    section.add "X-Amz-Signature", valid_774502
  var valid_774503 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774503 = validateParameter(valid_774503, JString, required = false,
                                 default = nil)
  if valid_774503 != nil:
    section.add "X-Amz-SignedHeaders", valid_774503
  var valid_774504 = header.getOrDefault("X-Amz-Credential")
  valid_774504 = validateParameter(valid_774504, JString, required = false,
                                 default = nil)
  if valid_774504 != nil:
    section.add "X-Amz-Credential", valid_774504
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774505: Call_GetDescribeEngineDefaultClusterParameters_774489;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the cluster database engine.
  ## 
  let valid = call_774505.validator(path, query, header, formData, body)
  let scheme = call_774505.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774505.url(scheme.get, call_774505.host, call_774505.base,
                         call_774505.route, valid.getOrDefault("path"))
  result = hook(call_774505, url, valid)

proc call*(call_774506: Call_GetDescribeEngineDefaultClusterParameters_774489;
          DBParameterGroupFamily: string; MaxRecords: int = 0;
          Filters: JsonNode = nil;
          Action: string = "DescribeEngineDefaultClusterParameters";
          Marker: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeEngineDefaultClusterParameters
  ## Returns the default engine and system parameter information for the cluster database engine.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: string (required)
  var query_774507 = newJObject()
  add(query_774507, "MaxRecords", newJInt(MaxRecords))
  add(query_774507, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  if Filters != nil:
    query_774507.add "Filters", Filters
  add(query_774507, "Action", newJString(Action))
  add(query_774507, "Marker", newJString(Marker))
  add(query_774507, "Version", newJString(Version))
  result = call_774506.call(nil, query_774507, nil, nil, nil)

var getDescribeEngineDefaultClusterParameters* = Call_GetDescribeEngineDefaultClusterParameters_774489(
    name: "getDescribeEngineDefaultClusterParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeEngineDefaultClusterParameters",
    validator: validate_GetDescribeEngineDefaultClusterParameters_774490,
    base: "/", url: url_GetDescribeEngineDefaultClusterParameters_774491,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEngineDefaultParameters_774547 = ref object of OpenApiRestCall_772581
proc url_PostDescribeEngineDefaultParameters_774549(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeEngineDefaultParameters_774548(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774550 = query.getOrDefault("Action")
  valid_774550 = validateParameter(valid_774550, JString, required = true, default = newJString(
      "DescribeEngineDefaultParameters"))
  if valid_774550 != nil:
    section.add "Action", valid_774550
  var valid_774551 = query.getOrDefault("Version")
  valid_774551 = validateParameter(valid_774551, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774551 != nil:
    section.add "Version", valid_774551
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774552 = header.getOrDefault("X-Amz-Date")
  valid_774552 = validateParameter(valid_774552, JString, required = false,
                                 default = nil)
  if valid_774552 != nil:
    section.add "X-Amz-Date", valid_774552
  var valid_774553 = header.getOrDefault("X-Amz-Security-Token")
  valid_774553 = validateParameter(valid_774553, JString, required = false,
                                 default = nil)
  if valid_774553 != nil:
    section.add "X-Amz-Security-Token", valid_774553
  var valid_774554 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774554 = validateParameter(valid_774554, JString, required = false,
                                 default = nil)
  if valid_774554 != nil:
    section.add "X-Amz-Content-Sha256", valid_774554
  var valid_774555 = header.getOrDefault("X-Amz-Algorithm")
  valid_774555 = validateParameter(valid_774555, JString, required = false,
                                 default = nil)
  if valid_774555 != nil:
    section.add "X-Amz-Algorithm", valid_774555
  var valid_774556 = header.getOrDefault("X-Amz-Signature")
  valid_774556 = validateParameter(valid_774556, JString, required = false,
                                 default = nil)
  if valid_774556 != nil:
    section.add "X-Amz-Signature", valid_774556
  var valid_774557 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774557 = validateParameter(valid_774557, JString, required = false,
                                 default = nil)
  if valid_774557 != nil:
    section.add "X-Amz-SignedHeaders", valid_774557
  var valid_774558 = header.getOrDefault("X-Amz-Credential")
  valid_774558 = validateParameter(valid_774558, JString, required = false,
                                 default = nil)
  if valid_774558 != nil:
    section.add "X-Amz-Credential", valid_774558
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB parameter group family.
  ##   Filters: JArray
  ##          : Not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_774559 = formData.getOrDefault("Marker")
  valid_774559 = validateParameter(valid_774559, JString, required = false,
                                 default = nil)
  if valid_774559 != nil:
    section.add "Marker", valid_774559
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_774560 = formData.getOrDefault("DBParameterGroupFamily")
  valid_774560 = validateParameter(valid_774560, JString, required = true,
                                 default = nil)
  if valid_774560 != nil:
    section.add "DBParameterGroupFamily", valid_774560
  var valid_774561 = formData.getOrDefault("Filters")
  valid_774561 = validateParameter(valid_774561, JArray, required = false,
                                 default = nil)
  if valid_774561 != nil:
    section.add "Filters", valid_774561
  var valid_774562 = formData.getOrDefault("MaxRecords")
  valid_774562 = validateParameter(valid_774562, JInt, required = false, default = nil)
  if valid_774562 != nil:
    section.add "MaxRecords", valid_774562
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774563: Call_PostDescribeEngineDefaultParameters_774547;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  let valid = call_774563.validator(path, query, header, formData, body)
  let scheme = call_774563.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774563.url(scheme.get, call_774563.host, call_774563.base,
                         call_774563.route, valid.getOrDefault("path"))
  result = hook(call_774563, url, valid)

proc call*(call_774564: Call_PostDescribeEngineDefaultParameters_774547;
          DBParameterGroupFamily: string; Marker: string = "";
          Action: string = "DescribeEngineDefaultParameters";
          Filters: JsonNode = nil; MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeEngineDefaultParameters
  ## Returns the default engine and system parameter information for the specified database engine.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB parameter group family.
  ##   Filters: JArray
  ##          : Not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_774565 = newJObject()
  var formData_774566 = newJObject()
  add(formData_774566, "Marker", newJString(Marker))
  add(query_774565, "Action", newJString(Action))
  add(formData_774566, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  if Filters != nil:
    formData_774566.add "Filters", Filters
  add(formData_774566, "MaxRecords", newJInt(MaxRecords))
  add(query_774565, "Version", newJString(Version))
  result = call_774564.call(nil, query_774565, nil, formData_774566, nil)

var postDescribeEngineDefaultParameters* = Call_PostDescribeEngineDefaultParameters_774547(
    name: "postDescribeEngineDefaultParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEngineDefaultParameters",
    validator: validate_PostDescribeEngineDefaultParameters_774548, base: "/",
    url: url_PostDescribeEngineDefaultParameters_774549,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEngineDefaultParameters_774528 = ref object of OpenApiRestCall_772581
proc url_GetDescribeEngineDefaultParameters_774530(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeEngineDefaultParameters_774529(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB parameter group family.
  ##   Filters: JArray
  ##          : Not currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: JString (required)
  section = newJObject()
  var valid_774531 = query.getOrDefault("MaxRecords")
  valid_774531 = validateParameter(valid_774531, JInt, required = false, default = nil)
  if valid_774531 != nil:
    section.add "MaxRecords", valid_774531
  assert query != nil, "query argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_774532 = query.getOrDefault("DBParameterGroupFamily")
  valid_774532 = validateParameter(valid_774532, JString, required = true,
                                 default = nil)
  if valid_774532 != nil:
    section.add "DBParameterGroupFamily", valid_774532
  var valid_774533 = query.getOrDefault("Filters")
  valid_774533 = validateParameter(valid_774533, JArray, required = false,
                                 default = nil)
  if valid_774533 != nil:
    section.add "Filters", valid_774533
  var valid_774534 = query.getOrDefault("Action")
  valid_774534 = validateParameter(valid_774534, JString, required = true, default = newJString(
      "DescribeEngineDefaultParameters"))
  if valid_774534 != nil:
    section.add "Action", valid_774534
  var valid_774535 = query.getOrDefault("Marker")
  valid_774535 = validateParameter(valid_774535, JString, required = false,
                                 default = nil)
  if valid_774535 != nil:
    section.add "Marker", valid_774535
  var valid_774536 = query.getOrDefault("Version")
  valid_774536 = validateParameter(valid_774536, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774536 != nil:
    section.add "Version", valid_774536
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774537 = header.getOrDefault("X-Amz-Date")
  valid_774537 = validateParameter(valid_774537, JString, required = false,
                                 default = nil)
  if valid_774537 != nil:
    section.add "X-Amz-Date", valid_774537
  var valid_774538 = header.getOrDefault("X-Amz-Security-Token")
  valid_774538 = validateParameter(valid_774538, JString, required = false,
                                 default = nil)
  if valid_774538 != nil:
    section.add "X-Amz-Security-Token", valid_774538
  var valid_774539 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774539 = validateParameter(valid_774539, JString, required = false,
                                 default = nil)
  if valid_774539 != nil:
    section.add "X-Amz-Content-Sha256", valid_774539
  var valid_774540 = header.getOrDefault("X-Amz-Algorithm")
  valid_774540 = validateParameter(valid_774540, JString, required = false,
                                 default = nil)
  if valid_774540 != nil:
    section.add "X-Amz-Algorithm", valid_774540
  var valid_774541 = header.getOrDefault("X-Amz-Signature")
  valid_774541 = validateParameter(valid_774541, JString, required = false,
                                 default = nil)
  if valid_774541 != nil:
    section.add "X-Amz-Signature", valid_774541
  var valid_774542 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774542 = validateParameter(valid_774542, JString, required = false,
                                 default = nil)
  if valid_774542 != nil:
    section.add "X-Amz-SignedHeaders", valid_774542
  var valid_774543 = header.getOrDefault("X-Amz-Credential")
  valid_774543 = validateParameter(valid_774543, JString, required = false,
                                 default = nil)
  if valid_774543 != nil:
    section.add "X-Amz-Credential", valid_774543
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774544: Call_GetDescribeEngineDefaultParameters_774528;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  let valid = call_774544.validator(path, query, header, formData, body)
  let scheme = call_774544.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774544.url(scheme.get, call_774544.host, call_774544.base,
                         call_774544.route, valid.getOrDefault("path"))
  result = hook(call_774544, url, valid)

proc call*(call_774545: Call_GetDescribeEngineDefaultParameters_774528;
          DBParameterGroupFamily: string; MaxRecords: int = 0;
          Filters: JsonNode = nil;
          Action: string = "DescribeEngineDefaultParameters"; Marker: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeEngineDefaultParameters
  ## Returns the default engine and system parameter information for the specified database engine.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB parameter group family.
  ##   Filters: JArray
  ##          : Not currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: string (required)
  var query_774546 = newJObject()
  add(query_774546, "MaxRecords", newJInt(MaxRecords))
  add(query_774546, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  if Filters != nil:
    query_774546.add "Filters", Filters
  add(query_774546, "Action", newJString(Action))
  add(query_774546, "Marker", newJString(Marker))
  add(query_774546, "Version", newJString(Version))
  result = call_774545.call(nil, query_774546, nil, nil, nil)

var getDescribeEngineDefaultParameters* = Call_GetDescribeEngineDefaultParameters_774528(
    name: "getDescribeEngineDefaultParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEngineDefaultParameters",
    validator: validate_GetDescribeEngineDefaultParameters_774529, base: "/",
    url: url_GetDescribeEngineDefaultParameters_774530,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEventCategories_774584 = ref object of OpenApiRestCall_772581
proc url_PostDescribeEventCategories_774586(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeEventCategories_774585(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774587 = query.getOrDefault("Action")
  valid_774587 = validateParameter(valid_774587, JString, required = true, default = newJString(
      "DescribeEventCategories"))
  if valid_774587 != nil:
    section.add "Action", valid_774587
  var valid_774588 = query.getOrDefault("Version")
  valid_774588 = validateParameter(valid_774588, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774588 != nil:
    section.add "Version", valid_774588
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774589 = header.getOrDefault("X-Amz-Date")
  valid_774589 = validateParameter(valid_774589, JString, required = false,
                                 default = nil)
  if valid_774589 != nil:
    section.add "X-Amz-Date", valid_774589
  var valid_774590 = header.getOrDefault("X-Amz-Security-Token")
  valid_774590 = validateParameter(valid_774590, JString, required = false,
                                 default = nil)
  if valid_774590 != nil:
    section.add "X-Amz-Security-Token", valid_774590
  var valid_774591 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774591 = validateParameter(valid_774591, JString, required = false,
                                 default = nil)
  if valid_774591 != nil:
    section.add "X-Amz-Content-Sha256", valid_774591
  var valid_774592 = header.getOrDefault("X-Amz-Algorithm")
  valid_774592 = validateParameter(valid_774592, JString, required = false,
                                 default = nil)
  if valid_774592 != nil:
    section.add "X-Amz-Algorithm", valid_774592
  var valid_774593 = header.getOrDefault("X-Amz-Signature")
  valid_774593 = validateParameter(valid_774593, JString, required = false,
                                 default = nil)
  if valid_774593 != nil:
    section.add "X-Amz-Signature", valid_774593
  var valid_774594 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774594 = validateParameter(valid_774594, JString, required = false,
                                 default = nil)
  if valid_774594 != nil:
    section.add "X-Amz-SignedHeaders", valid_774594
  var valid_774595 = header.getOrDefault("X-Amz-Credential")
  valid_774595 = validateParameter(valid_774595, JString, required = false,
                                 default = nil)
  if valid_774595 != nil:
    section.add "X-Amz-Credential", valid_774595
  result.add "header", section
  ## parameters in `formData` object:
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  section = newJObject()
  var valid_774596 = formData.getOrDefault("Filters")
  valid_774596 = validateParameter(valid_774596, JArray, required = false,
                                 default = nil)
  if valid_774596 != nil:
    section.add "Filters", valid_774596
  var valid_774597 = formData.getOrDefault("SourceType")
  valid_774597 = validateParameter(valid_774597, JString, required = false,
                                 default = nil)
  if valid_774597 != nil:
    section.add "SourceType", valid_774597
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774598: Call_PostDescribeEventCategories_774584; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type.
  ## 
  let valid = call_774598.validator(path, query, header, formData, body)
  let scheme = call_774598.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774598.url(scheme.get, call_774598.host, call_774598.base,
                         call_774598.route, valid.getOrDefault("path"))
  result = hook(call_774598, url, valid)

proc call*(call_774599: Call_PostDescribeEventCategories_774584;
          Action: string = "DescribeEventCategories"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"; SourceType: string = ""): Recallable =
  ## postDescribeEventCategories
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  var query_774600 = newJObject()
  var formData_774601 = newJObject()
  add(query_774600, "Action", newJString(Action))
  if Filters != nil:
    formData_774601.add "Filters", Filters
  add(query_774600, "Version", newJString(Version))
  add(formData_774601, "SourceType", newJString(SourceType))
  result = call_774599.call(nil, query_774600, nil, formData_774601, nil)

var postDescribeEventCategories* = Call_PostDescribeEventCategories_774584(
    name: "postDescribeEventCategories", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventCategories",
    validator: validate_PostDescribeEventCategories_774585, base: "/",
    url: url_PostDescribeEventCategories_774586,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEventCategories_774567 = ref object of OpenApiRestCall_772581
proc url_GetDescribeEventCategories_774569(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeEventCategories_774568(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_774570 = query.getOrDefault("SourceType")
  valid_774570 = validateParameter(valid_774570, JString, required = false,
                                 default = nil)
  if valid_774570 != nil:
    section.add "SourceType", valid_774570
  var valid_774571 = query.getOrDefault("Filters")
  valid_774571 = validateParameter(valid_774571, JArray, required = false,
                                 default = nil)
  if valid_774571 != nil:
    section.add "Filters", valid_774571
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774572 = query.getOrDefault("Action")
  valid_774572 = validateParameter(valid_774572, JString, required = true, default = newJString(
      "DescribeEventCategories"))
  if valid_774572 != nil:
    section.add "Action", valid_774572
  var valid_774573 = query.getOrDefault("Version")
  valid_774573 = validateParameter(valid_774573, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774573 != nil:
    section.add "Version", valid_774573
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774574 = header.getOrDefault("X-Amz-Date")
  valid_774574 = validateParameter(valid_774574, JString, required = false,
                                 default = nil)
  if valid_774574 != nil:
    section.add "X-Amz-Date", valid_774574
  var valid_774575 = header.getOrDefault("X-Amz-Security-Token")
  valid_774575 = validateParameter(valid_774575, JString, required = false,
                                 default = nil)
  if valid_774575 != nil:
    section.add "X-Amz-Security-Token", valid_774575
  var valid_774576 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774576 = validateParameter(valid_774576, JString, required = false,
                                 default = nil)
  if valid_774576 != nil:
    section.add "X-Amz-Content-Sha256", valid_774576
  var valid_774577 = header.getOrDefault("X-Amz-Algorithm")
  valid_774577 = validateParameter(valid_774577, JString, required = false,
                                 default = nil)
  if valid_774577 != nil:
    section.add "X-Amz-Algorithm", valid_774577
  var valid_774578 = header.getOrDefault("X-Amz-Signature")
  valid_774578 = validateParameter(valid_774578, JString, required = false,
                                 default = nil)
  if valid_774578 != nil:
    section.add "X-Amz-Signature", valid_774578
  var valid_774579 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774579 = validateParameter(valid_774579, JString, required = false,
                                 default = nil)
  if valid_774579 != nil:
    section.add "X-Amz-SignedHeaders", valid_774579
  var valid_774580 = header.getOrDefault("X-Amz-Credential")
  valid_774580 = validateParameter(valid_774580, JString, required = false,
                                 default = nil)
  if valid_774580 != nil:
    section.add "X-Amz-Credential", valid_774580
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774581: Call_GetDescribeEventCategories_774567; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type.
  ## 
  let valid = call_774581.validator(path, query, header, formData, body)
  let scheme = call_774581.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774581.url(scheme.get, call_774581.host, call_774581.base,
                         call_774581.route, valid.getOrDefault("path"))
  result = hook(call_774581, url, valid)

proc call*(call_774582: Call_GetDescribeEventCategories_774567;
          SourceType: string = ""; Filters: JsonNode = nil;
          Action: string = "DescribeEventCategories"; Version: string = "2014-10-31"): Recallable =
  ## getDescribeEventCategories
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type.
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774583 = newJObject()
  add(query_774583, "SourceType", newJString(SourceType))
  if Filters != nil:
    query_774583.add "Filters", Filters
  add(query_774583, "Action", newJString(Action))
  add(query_774583, "Version", newJString(Version))
  result = call_774582.call(nil, query_774583, nil, nil, nil)

var getDescribeEventCategories* = Call_GetDescribeEventCategories_774567(
    name: "getDescribeEventCategories", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventCategories",
    validator: validate_GetDescribeEventCategories_774568, base: "/",
    url: url_GetDescribeEventCategories_774569,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEventSubscriptions_774621 = ref object of OpenApiRestCall_772581
proc url_PostDescribeEventSubscriptions_774623(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeEventSubscriptions_774622(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774624 = query.getOrDefault("Action")
  valid_774624 = validateParameter(valid_774624, JString, required = true, default = newJString(
      "DescribeEventSubscriptions"))
  if valid_774624 != nil:
    section.add "Action", valid_774624
  var valid_774625 = query.getOrDefault("Version")
  valid_774625 = validateParameter(valid_774625, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774625 != nil:
    section.add "Version", valid_774625
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774626 = header.getOrDefault("X-Amz-Date")
  valid_774626 = validateParameter(valid_774626, JString, required = false,
                                 default = nil)
  if valid_774626 != nil:
    section.add "X-Amz-Date", valid_774626
  var valid_774627 = header.getOrDefault("X-Amz-Security-Token")
  valid_774627 = validateParameter(valid_774627, JString, required = false,
                                 default = nil)
  if valid_774627 != nil:
    section.add "X-Amz-Security-Token", valid_774627
  var valid_774628 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774628 = validateParameter(valid_774628, JString, required = false,
                                 default = nil)
  if valid_774628 != nil:
    section.add "X-Amz-Content-Sha256", valid_774628
  var valid_774629 = header.getOrDefault("X-Amz-Algorithm")
  valid_774629 = validateParameter(valid_774629, JString, required = false,
                                 default = nil)
  if valid_774629 != nil:
    section.add "X-Amz-Algorithm", valid_774629
  var valid_774630 = header.getOrDefault("X-Amz-Signature")
  valid_774630 = validateParameter(valid_774630, JString, required = false,
                                 default = nil)
  if valid_774630 != nil:
    section.add "X-Amz-Signature", valid_774630
  var valid_774631 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774631 = validateParameter(valid_774631, JString, required = false,
                                 default = nil)
  if valid_774631 != nil:
    section.add "X-Amz-SignedHeaders", valid_774631
  var valid_774632 = header.getOrDefault("X-Amz-Credential")
  valid_774632 = validateParameter(valid_774632, JString, required = false,
                                 default = nil)
  if valid_774632 != nil:
    section.add "X-Amz-Credential", valid_774632
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> .
  ##   SubscriptionName: JString
  ##                   : The name of the event notification subscription you want to describe.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_774633 = formData.getOrDefault("Marker")
  valid_774633 = validateParameter(valid_774633, JString, required = false,
                                 default = nil)
  if valid_774633 != nil:
    section.add "Marker", valid_774633
  var valid_774634 = formData.getOrDefault("SubscriptionName")
  valid_774634 = validateParameter(valid_774634, JString, required = false,
                                 default = nil)
  if valid_774634 != nil:
    section.add "SubscriptionName", valid_774634
  var valid_774635 = formData.getOrDefault("Filters")
  valid_774635 = validateParameter(valid_774635, JArray, required = false,
                                 default = nil)
  if valid_774635 != nil:
    section.add "Filters", valid_774635
  var valid_774636 = formData.getOrDefault("MaxRecords")
  valid_774636 = validateParameter(valid_774636, JInt, required = false, default = nil)
  if valid_774636 != nil:
    section.add "MaxRecords", valid_774636
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774637: Call_PostDescribeEventSubscriptions_774621; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  let valid = call_774637.validator(path, query, header, formData, body)
  let scheme = call_774637.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774637.url(scheme.get, call_774637.host, call_774637.base,
                         call_774637.route, valid.getOrDefault("path"))
  result = hook(call_774637, url, valid)

proc call*(call_774638: Call_PostDescribeEventSubscriptions_774621;
          Marker: string = ""; SubscriptionName: string = "";
          Action: string = "DescribeEventSubscriptions"; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeEventSubscriptions
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> .
  ##   SubscriptionName: string
  ##                   : The name of the event notification subscription you want to describe.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_774639 = newJObject()
  var formData_774640 = newJObject()
  add(formData_774640, "Marker", newJString(Marker))
  add(formData_774640, "SubscriptionName", newJString(SubscriptionName))
  add(query_774639, "Action", newJString(Action))
  if Filters != nil:
    formData_774640.add "Filters", Filters
  add(formData_774640, "MaxRecords", newJInt(MaxRecords))
  add(query_774639, "Version", newJString(Version))
  result = call_774638.call(nil, query_774639, nil, formData_774640, nil)

var postDescribeEventSubscriptions* = Call_PostDescribeEventSubscriptions_774621(
    name: "postDescribeEventSubscriptions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventSubscriptions",
    validator: validate_PostDescribeEventSubscriptions_774622, base: "/",
    url: url_PostDescribeEventSubscriptions_774623,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEventSubscriptions_774602 = ref object of OpenApiRestCall_772581
proc url_GetDescribeEventSubscriptions_774604(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeEventSubscriptions_774603(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> .
  ##   SubscriptionName: JString
  ##                   : The name of the event notification subscription you want to describe.
  ##   Version: JString (required)
  section = newJObject()
  var valid_774605 = query.getOrDefault("MaxRecords")
  valid_774605 = validateParameter(valid_774605, JInt, required = false, default = nil)
  if valid_774605 != nil:
    section.add "MaxRecords", valid_774605
  var valid_774606 = query.getOrDefault("Filters")
  valid_774606 = validateParameter(valid_774606, JArray, required = false,
                                 default = nil)
  if valid_774606 != nil:
    section.add "Filters", valid_774606
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774607 = query.getOrDefault("Action")
  valid_774607 = validateParameter(valid_774607, JString, required = true, default = newJString(
      "DescribeEventSubscriptions"))
  if valid_774607 != nil:
    section.add "Action", valid_774607
  var valid_774608 = query.getOrDefault("Marker")
  valid_774608 = validateParameter(valid_774608, JString, required = false,
                                 default = nil)
  if valid_774608 != nil:
    section.add "Marker", valid_774608
  var valid_774609 = query.getOrDefault("SubscriptionName")
  valid_774609 = validateParameter(valid_774609, JString, required = false,
                                 default = nil)
  if valid_774609 != nil:
    section.add "SubscriptionName", valid_774609
  var valid_774610 = query.getOrDefault("Version")
  valid_774610 = validateParameter(valid_774610, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774610 != nil:
    section.add "Version", valid_774610
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774611 = header.getOrDefault("X-Amz-Date")
  valid_774611 = validateParameter(valid_774611, JString, required = false,
                                 default = nil)
  if valid_774611 != nil:
    section.add "X-Amz-Date", valid_774611
  var valid_774612 = header.getOrDefault("X-Amz-Security-Token")
  valid_774612 = validateParameter(valid_774612, JString, required = false,
                                 default = nil)
  if valid_774612 != nil:
    section.add "X-Amz-Security-Token", valid_774612
  var valid_774613 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774613 = validateParameter(valid_774613, JString, required = false,
                                 default = nil)
  if valid_774613 != nil:
    section.add "X-Amz-Content-Sha256", valid_774613
  var valid_774614 = header.getOrDefault("X-Amz-Algorithm")
  valid_774614 = validateParameter(valid_774614, JString, required = false,
                                 default = nil)
  if valid_774614 != nil:
    section.add "X-Amz-Algorithm", valid_774614
  var valid_774615 = header.getOrDefault("X-Amz-Signature")
  valid_774615 = validateParameter(valid_774615, JString, required = false,
                                 default = nil)
  if valid_774615 != nil:
    section.add "X-Amz-Signature", valid_774615
  var valid_774616 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774616 = validateParameter(valid_774616, JString, required = false,
                                 default = nil)
  if valid_774616 != nil:
    section.add "X-Amz-SignedHeaders", valid_774616
  var valid_774617 = header.getOrDefault("X-Amz-Credential")
  valid_774617 = validateParameter(valid_774617, JString, required = false,
                                 default = nil)
  if valid_774617 != nil:
    section.add "X-Amz-Credential", valid_774617
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774618: Call_GetDescribeEventSubscriptions_774602; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  let valid = call_774618.validator(path, query, header, formData, body)
  let scheme = call_774618.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774618.url(scheme.get, call_774618.host, call_774618.base,
                         call_774618.route, valid.getOrDefault("path"))
  result = hook(call_774618, url, valid)

proc call*(call_774619: Call_GetDescribeEventSubscriptions_774602;
          MaxRecords: int = 0; Filters: JsonNode = nil;
          Action: string = "DescribeEventSubscriptions"; Marker: string = "";
          SubscriptionName: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeEventSubscriptions
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> .
  ##   SubscriptionName: string
  ##                   : The name of the event notification subscription you want to describe.
  ##   Version: string (required)
  var query_774620 = newJObject()
  add(query_774620, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_774620.add "Filters", Filters
  add(query_774620, "Action", newJString(Action))
  add(query_774620, "Marker", newJString(Marker))
  add(query_774620, "SubscriptionName", newJString(SubscriptionName))
  add(query_774620, "Version", newJString(Version))
  result = call_774619.call(nil, query_774620, nil, nil, nil)

var getDescribeEventSubscriptions* = Call_GetDescribeEventSubscriptions_774602(
    name: "getDescribeEventSubscriptions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventSubscriptions",
    validator: validate_GetDescribeEventSubscriptions_774603, base: "/",
    url: url_GetDescribeEventSubscriptions_774604,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEvents_774665 = ref object of OpenApiRestCall_772581
proc url_PostDescribeEvents_774667(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeEvents_774666(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774668 = query.getOrDefault("Action")
  valid_774668 = validateParameter(valid_774668, JString, required = true,
                                 default = newJString("DescribeEvents"))
  if valid_774668 != nil:
    section.add "Action", valid_774668
  var valid_774669 = query.getOrDefault("Version")
  valid_774669 = validateParameter(valid_774669, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774669 != nil:
    section.add "Version", valid_774669
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774670 = header.getOrDefault("X-Amz-Date")
  valid_774670 = validateParameter(valid_774670, JString, required = false,
                                 default = nil)
  if valid_774670 != nil:
    section.add "X-Amz-Date", valid_774670
  var valid_774671 = header.getOrDefault("X-Amz-Security-Token")
  valid_774671 = validateParameter(valid_774671, JString, required = false,
                                 default = nil)
  if valid_774671 != nil:
    section.add "X-Amz-Security-Token", valid_774671
  var valid_774672 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774672 = validateParameter(valid_774672, JString, required = false,
                                 default = nil)
  if valid_774672 != nil:
    section.add "X-Amz-Content-Sha256", valid_774672
  var valid_774673 = header.getOrDefault("X-Amz-Algorithm")
  valid_774673 = validateParameter(valid_774673, JString, required = false,
                                 default = nil)
  if valid_774673 != nil:
    section.add "X-Amz-Algorithm", valid_774673
  var valid_774674 = header.getOrDefault("X-Amz-Signature")
  valid_774674 = validateParameter(valid_774674, JString, required = false,
                                 default = nil)
  if valid_774674 != nil:
    section.add "X-Amz-Signature", valid_774674
  var valid_774675 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774675 = validateParameter(valid_774675, JString, required = false,
                                 default = nil)
  if valid_774675 != nil:
    section.add "X-Amz-SignedHeaders", valid_774675
  var valid_774676 = header.getOrDefault("X-Amz-Credential")
  valid_774676 = validateParameter(valid_774676, JString, required = false,
                                 default = nil)
  if valid_774676 != nil:
    section.add "X-Amz-Credential", valid_774676
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceIdentifier: JString
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   StartTime: JString
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Duration: JInt
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   EndTime: JString
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   SourceType: JString
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  section = newJObject()
  var valid_774677 = formData.getOrDefault("SourceIdentifier")
  valid_774677 = validateParameter(valid_774677, JString, required = false,
                                 default = nil)
  if valid_774677 != nil:
    section.add "SourceIdentifier", valid_774677
  var valid_774678 = formData.getOrDefault("EventCategories")
  valid_774678 = validateParameter(valid_774678, JArray, required = false,
                                 default = nil)
  if valid_774678 != nil:
    section.add "EventCategories", valid_774678
  var valid_774679 = formData.getOrDefault("Marker")
  valid_774679 = validateParameter(valid_774679, JString, required = false,
                                 default = nil)
  if valid_774679 != nil:
    section.add "Marker", valid_774679
  var valid_774680 = formData.getOrDefault("StartTime")
  valid_774680 = validateParameter(valid_774680, JString, required = false,
                                 default = nil)
  if valid_774680 != nil:
    section.add "StartTime", valid_774680
  var valid_774681 = formData.getOrDefault("Duration")
  valid_774681 = validateParameter(valid_774681, JInt, required = false, default = nil)
  if valid_774681 != nil:
    section.add "Duration", valid_774681
  var valid_774682 = formData.getOrDefault("Filters")
  valid_774682 = validateParameter(valid_774682, JArray, required = false,
                                 default = nil)
  if valid_774682 != nil:
    section.add "Filters", valid_774682
  var valid_774683 = formData.getOrDefault("EndTime")
  valid_774683 = validateParameter(valid_774683, JString, required = false,
                                 default = nil)
  if valid_774683 != nil:
    section.add "EndTime", valid_774683
  var valid_774684 = formData.getOrDefault("MaxRecords")
  valid_774684 = validateParameter(valid_774684, JInt, required = false, default = nil)
  if valid_774684 != nil:
    section.add "MaxRecords", valid_774684
  var valid_774685 = formData.getOrDefault("SourceType")
  valid_774685 = validateParameter(valid_774685, JString, required = false,
                                 default = newJString("db-instance"))
  if valid_774685 != nil:
    section.add "SourceType", valid_774685
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774686: Call_PostDescribeEvents_774665; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  let valid = call_774686.validator(path, query, header, formData, body)
  let scheme = call_774686.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774686.url(scheme.get, call_774686.host, call_774686.base,
                         call_774686.route, valid.getOrDefault("path"))
  result = hook(call_774686, url, valid)

proc call*(call_774687: Call_PostDescribeEvents_774665;
          SourceIdentifier: string = ""; EventCategories: JsonNode = nil;
          Marker: string = ""; StartTime: string = "";
          Action: string = "DescribeEvents"; Duration: int = 0; Filters: JsonNode = nil;
          EndTime: string = ""; MaxRecords: int = 0; Version: string = "2014-10-31";
          SourceType: string = "db-instance"): Recallable =
  ## postDescribeEvents
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ##   SourceIdentifier: string
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   StartTime: string
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Action: string (required)
  ##   Duration: int
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   EndTime: string
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  ##   SourceType: string
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  var query_774688 = newJObject()
  var formData_774689 = newJObject()
  add(formData_774689, "SourceIdentifier", newJString(SourceIdentifier))
  if EventCategories != nil:
    formData_774689.add "EventCategories", EventCategories
  add(formData_774689, "Marker", newJString(Marker))
  add(formData_774689, "StartTime", newJString(StartTime))
  add(query_774688, "Action", newJString(Action))
  add(formData_774689, "Duration", newJInt(Duration))
  if Filters != nil:
    formData_774689.add "Filters", Filters
  add(formData_774689, "EndTime", newJString(EndTime))
  add(formData_774689, "MaxRecords", newJInt(MaxRecords))
  add(query_774688, "Version", newJString(Version))
  add(formData_774689, "SourceType", newJString(SourceType))
  result = call_774687.call(nil, query_774688, nil, formData_774689, nil)

var postDescribeEvents* = Call_PostDescribeEvents_774665(
    name: "postDescribeEvents", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEvents",
    validator: validate_PostDescribeEvents_774666, base: "/",
    url: url_PostDescribeEvents_774667, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEvents_774641 = ref object of OpenApiRestCall_772581
proc url_GetDescribeEvents_774643(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeEvents_774642(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceType: JString
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   StartTime: JString
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: JString (required)
  ##   SourceIdentifier: JString
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Duration: JInt
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   EndTime: JString
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_774644 = query.getOrDefault("SourceType")
  valid_774644 = validateParameter(valid_774644, JString, required = false,
                                 default = newJString("db-instance"))
  if valid_774644 != nil:
    section.add "SourceType", valid_774644
  var valid_774645 = query.getOrDefault("MaxRecords")
  valid_774645 = validateParameter(valid_774645, JInt, required = false, default = nil)
  if valid_774645 != nil:
    section.add "MaxRecords", valid_774645
  var valid_774646 = query.getOrDefault("StartTime")
  valid_774646 = validateParameter(valid_774646, JString, required = false,
                                 default = nil)
  if valid_774646 != nil:
    section.add "StartTime", valid_774646
  var valid_774647 = query.getOrDefault("Filters")
  valid_774647 = validateParameter(valid_774647, JArray, required = false,
                                 default = nil)
  if valid_774647 != nil:
    section.add "Filters", valid_774647
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774648 = query.getOrDefault("Action")
  valid_774648 = validateParameter(valid_774648, JString, required = true,
                                 default = newJString("DescribeEvents"))
  if valid_774648 != nil:
    section.add "Action", valid_774648
  var valid_774649 = query.getOrDefault("SourceIdentifier")
  valid_774649 = validateParameter(valid_774649, JString, required = false,
                                 default = nil)
  if valid_774649 != nil:
    section.add "SourceIdentifier", valid_774649
  var valid_774650 = query.getOrDefault("Marker")
  valid_774650 = validateParameter(valid_774650, JString, required = false,
                                 default = nil)
  if valid_774650 != nil:
    section.add "Marker", valid_774650
  var valid_774651 = query.getOrDefault("EventCategories")
  valid_774651 = validateParameter(valid_774651, JArray, required = false,
                                 default = nil)
  if valid_774651 != nil:
    section.add "EventCategories", valid_774651
  var valid_774652 = query.getOrDefault("Duration")
  valid_774652 = validateParameter(valid_774652, JInt, required = false, default = nil)
  if valid_774652 != nil:
    section.add "Duration", valid_774652
  var valid_774653 = query.getOrDefault("EndTime")
  valid_774653 = validateParameter(valid_774653, JString, required = false,
                                 default = nil)
  if valid_774653 != nil:
    section.add "EndTime", valid_774653
  var valid_774654 = query.getOrDefault("Version")
  valid_774654 = validateParameter(valid_774654, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774654 != nil:
    section.add "Version", valid_774654
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774655 = header.getOrDefault("X-Amz-Date")
  valid_774655 = validateParameter(valid_774655, JString, required = false,
                                 default = nil)
  if valid_774655 != nil:
    section.add "X-Amz-Date", valid_774655
  var valid_774656 = header.getOrDefault("X-Amz-Security-Token")
  valid_774656 = validateParameter(valid_774656, JString, required = false,
                                 default = nil)
  if valid_774656 != nil:
    section.add "X-Amz-Security-Token", valid_774656
  var valid_774657 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774657 = validateParameter(valid_774657, JString, required = false,
                                 default = nil)
  if valid_774657 != nil:
    section.add "X-Amz-Content-Sha256", valid_774657
  var valid_774658 = header.getOrDefault("X-Amz-Algorithm")
  valid_774658 = validateParameter(valid_774658, JString, required = false,
                                 default = nil)
  if valid_774658 != nil:
    section.add "X-Amz-Algorithm", valid_774658
  var valid_774659 = header.getOrDefault("X-Amz-Signature")
  valid_774659 = validateParameter(valid_774659, JString, required = false,
                                 default = nil)
  if valid_774659 != nil:
    section.add "X-Amz-Signature", valid_774659
  var valid_774660 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774660 = validateParameter(valid_774660, JString, required = false,
                                 default = nil)
  if valid_774660 != nil:
    section.add "X-Amz-SignedHeaders", valid_774660
  var valid_774661 = header.getOrDefault("X-Amz-Credential")
  valid_774661 = validateParameter(valid_774661, JString, required = false,
                                 default = nil)
  if valid_774661 != nil:
    section.add "X-Amz-Credential", valid_774661
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774662: Call_GetDescribeEvents_774641; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  let valid = call_774662.validator(path, query, header, formData, body)
  let scheme = call_774662.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774662.url(scheme.get, call_774662.host, call_774662.base,
                         call_774662.route, valid.getOrDefault("path"))
  result = hook(call_774662, url, valid)

proc call*(call_774663: Call_GetDescribeEvents_774641;
          SourceType: string = "db-instance"; MaxRecords: int = 0;
          StartTime: string = ""; Filters: JsonNode = nil;
          Action: string = "DescribeEvents"; SourceIdentifier: string = "";
          Marker: string = ""; EventCategories: JsonNode = nil; Duration: int = 0;
          EndTime: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeEvents
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ##   SourceType: string
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   StartTime: string
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: string (required)
  ##   SourceIdentifier: string
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Duration: int
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   EndTime: string
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Version: string (required)
  var query_774664 = newJObject()
  add(query_774664, "SourceType", newJString(SourceType))
  add(query_774664, "MaxRecords", newJInt(MaxRecords))
  add(query_774664, "StartTime", newJString(StartTime))
  if Filters != nil:
    query_774664.add "Filters", Filters
  add(query_774664, "Action", newJString(Action))
  add(query_774664, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_774664, "Marker", newJString(Marker))
  if EventCategories != nil:
    query_774664.add "EventCategories", EventCategories
  add(query_774664, "Duration", newJInt(Duration))
  add(query_774664, "EndTime", newJString(EndTime))
  add(query_774664, "Version", newJString(Version))
  result = call_774663.call(nil, query_774664, nil, nil, nil)

var getDescribeEvents* = Call_GetDescribeEvents_774641(name: "getDescribeEvents",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=DescribeEvents", validator: validate_GetDescribeEvents_774642,
    base: "/", url: url_GetDescribeEvents_774643,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeOrderableDBInstanceOptions_774713 = ref object of OpenApiRestCall_772581
proc url_PostDescribeOrderableDBInstanceOptions_774715(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeOrderableDBInstanceOptions_774714(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774716 = query.getOrDefault("Action")
  valid_774716 = validateParameter(valid_774716, JString, required = true, default = newJString(
      "DescribeOrderableDBInstanceOptions"))
  if valid_774716 != nil:
    section.add "Action", valid_774716
  var valid_774717 = query.getOrDefault("Version")
  valid_774717 = validateParameter(valid_774717, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774717 != nil:
    section.add "Version", valid_774717
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774718 = header.getOrDefault("X-Amz-Date")
  valid_774718 = validateParameter(valid_774718, JString, required = false,
                                 default = nil)
  if valid_774718 != nil:
    section.add "X-Amz-Date", valid_774718
  var valid_774719 = header.getOrDefault("X-Amz-Security-Token")
  valid_774719 = validateParameter(valid_774719, JString, required = false,
                                 default = nil)
  if valid_774719 != nil:
    section.add "X-Amz-Security-Token", valid_774719
  var valid_774720 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774720 = validateParameter(valid_774720, JString, required = false,
                                 default = nil)
  if valid_774720 != nil:
    section.add "X-Amz-Content-Sha256", valid_774720
  var valid_774721 = header.getOrDefault("X-Amz-Algorithm")
  valid_774721 = validateParameter(valid_774721, JString, required = false,
                                 default = nil)
  if valid_774721 != nil:
    section.add "X-Amz-Algorithm", valid_774721
  var valid_774722 = header.getOrDefault("X-Amz-Signature")
  valid_774722 = validateParameter(valid_774722, JString, required = false,
                                 default = nil)
  if valid_774722 != nil:
    section.add "X-Amz-Signature", valid_774722
  var valid_774723 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774723 = validateParameter(valid_774723, JString, required = false,
                                 default = nil)
  if valid_774723 != nil:
    section.add "X-Amz-SignedHeaders", valid_774723
  var valid_774724 = header.getOrDefault("X-Amz-Credential")
  valid_774724 = validateParameter(valid_774724, JString, required = false,
                                 default = nil)
  if valid_774724 != nil:
    section.add "X-Amz-Credential", valid_774724
  result.add "header", section
  ## parameters in `formData` object:
  ##   Engine: JString (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> .
  ##   Vpc: JBool
  ##      : The VPC filter value. Specify this parameter to show only the available VPC or non-VPC offerings.
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   LicenseModel: JString
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: JString
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_774725 = formData.getOrDefault("Engine")
  valid_774725 = validateParameter(valid_774725, JString, required = true,
                                 default = nil)
  if valid_774725 != nil:
    section.add "Engine", valid_774725
  var valid_774726 = formData.getOrDefault("Marker")
  valid_774726 = validateParameter(valid_774726, JString, required = false,
                                 default = nil)
  if valid_774726 != nil:
    section.add "Marker", valid_774726
  var valid_774727 = formData.getOrDefault("Vpc")
  valid_774727 = validateParameter(valid_774727, JBool, required = false, default = nil)
  if valid_774727 != nil:
    section.add "Vpc", valid_774727
  var valid_774728 = formData.getOrDefault("DBInstanceClass")
  valid_774728 = validateParameter(valid_774728, JString, required = false,
                                 default = nil)
  if valid_774728 != nil:
    section.add "DBInstanceClass", valid_774728
  var valid_774729 = formData.getOrDefault("Filters")
  valid_774729 = validateParameter(valid_774729, JArray, required = false,
                                 default = nil)
  if valid_774729 != nil:
    section.add "Filters", valid_774729
  var valid_774730 = formData.getOrDefault("LicenseModel")
  valid_774730 = validateParameter(valid_774730, JString, required = false,
                                 default = nil)
  if valid_774730 != nil:
    section.add "LicenseModel", valid_774730
  var valid_774731 = formData.getOrDefault("MaxRecords")
  valid_774731 = validateParameter(valid_774731, JInt, required = false, default = nil)
  if valid_774731 != nil:
    section.add "MaxRecords", valid_774731
  var valid_774732 = formData.getOrDefault("EngineVersion")
  valid_774732 = validateParameter(valid_774732, JString, required = false,
                                 default = nil)
  if valid_774732 != nil:
    section.add "EngineVersion", valid_774732
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774733: Call_PostDescribeOrderableDBInstanceOptions_774713;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  let valid = call_774733.validator(path, query, header, formData, body)
  let scheme = call_774733.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774733.url(scheme.get, call_774733.host, call_774733.base,
                         call_774733.route, valid.getOrDefault("path"))
  result = hook(call_774733, url, valid)

proc call*(call_774734: Call_PostDescribeOrderableDBInstanceOptions_774713;
          Engine: string; Marker: string = "";
          Action: string = "DescribeOrderableDBInstanceOptions"; Vpc: bool = false;
          DBInstanceClass: string = ""; Filters: JsonNode = nil;
          LicenseModel: string = ""; MaxRecords: int = 0; EngineVersion: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeOrderableDBInstanceOptions
  ## Returns a list of orderable DB instance options for the specified engine.
  ##   Engine: string (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> .
  ##   Action: string (required)
  ##   Vpc: bool
  ##      : The VPC filter value. Specify this parameter to show only the available VPC or non-VPC offerings.
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   LicenseModel: string
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: string
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Version: string (required)
  var query_774735 = newJObject()
  var formData_774736 = newJObject()
  add(formData_774736, "Engine", newJString(Engine))
  add(formData_774736, "Marker", newJString(Marker))
  add(query_774735, "Action", newJString(Action))
  add(formData_774736, "Vpc", newJBool(Vpc))
  add(formData_774736, "DBInstanceClass", newJString(DBInstanceClass))
  if Filters != nil:
    formData_774736.add "Filters", Filters
  add(formData_774736, "LicenseModel", newJString(LicenseModel))
  add(formData_774736, "MaxRecords", newJInt(MaxRecords))
  add(formData_774736, "EngineVersion", newJString(EngineVersion))
  add(query_774735, "Version", newJString(Version))
  result = call_774734.call(nil, query_774735, nil, formData_774736, nil)

var postDescribeOrderableDBInstanceOptions* = Call_PostDescribeOrderableDBInstanceOptions_774713(
    name: "postDescribeOrderableDBInstanceOptions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeOrderableDBInstanceOptions",
    validator: validate_PostDescribeOrderableDBInstanceOptions_774714, base: "/",
    url: url_PostDescribeOrderableDBInstanceOptions_774715,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeOrderableDBInstanceOptions_774690 = ref object of OpenApiRestCall_772581
proc url_GetDescribeOrderableDBInstanceOptions_774692(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeOrderableDBInstanceOptions_774691(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   LicenseModel: JString
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   Vpc: JBool
  ##      : The VPC filter value. Specify this parameter to show only the available VPC or non-VPC offerings.
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> .
  ##   EngineVersion: JString
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_774693 = query.getOrDefault("Engine")
  valid_774693 = validateParameter(valid_774693, JString, required = true,
                                 default = nil)
  if valid_774693 != nil:
    section.add "Engine", valid_774693
  var valid_774694 = query.getOrDefault("MaxRecords")
  valid_774694 = validateParameter(valid_774694, JInt, required = false, default = nil)
  if valid_774694 != nil:
    section.add "MaxRecords", valid_774694
  var valid_774695 = query.getOrDefault("Filters")
  valid_774695 = validateParameter(valid_774695, JArray, required = false,
                                 default = nil)
  if valid_774695 != nil:
    section.add "Filters", valid_774695
  var valid_774696 = query.getOrDefault("LicenseModel")
  valid_774696 = validateParameter(valid_774696, JString, required = false,
                                 default = nil)
  if valid_774696 != nil:
    section.add "LicenseModel", valid_774696
  var valid_774697 = query.getOrDefault("Vpc")
  valid_774697 = validateParameter(valid_774697, JBool, required = false, default = nil)
  if valid_774697 != nil:
    section.add "Vpc", valid_774697
  var valid_774698 = query.getOrDefault("DBInstanceClass")
  valid_774698 = validateParameter(valid_774698, JString, required = false,
                                 default = nil)
  if valid_774698 != nil:
    section.add "DBInstanceClass", valid_774698
  var valid_774699 = query.getOrDefault("Action")
  valid_774699 = validateParameter(valid_774699, JString, required = true, default = newJString(
      "DescribeOrderableDBInstanceOptions"))
  if valid_774699 != nil:
    section.add "Action", valid_774699
  var valid_774700 = query.getOrDefault("Marker")
  valid_774700 = validateParameter(valid_774700, JString, required = false,
                                 default = nil)
  if valid_774700 != nil:
    section.add "Marker", valid_774700
  var valid_774701 = query.getOrDefault("EngineVersion")
  valid_774701 = validateParameter(valid_774701, JString, required = false,
                                 default = nil)
  if valid_774701 != nil:
    section.add "EngineVersion", valid_774701
  var valid_774702 = query.getOrDefault("Version")
  valid_774702 = validateParameter(valid_774702, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774702 != nil:
    section.add "Version", valid_774702
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774703 = header.getOrDefault("X-Amz-Date")
  valid_774703 = validateParameter(valid_774703, JString, required = false,
                                 default = nil)
  if valid_774703 != nil:
    section.add "X-Amz-Date", valid_774703
  var valid_774704 = header.getOrDefault("X-Amz-Security-Token")
  valid_774704 = validateParameter(valid_774704, JString, required = false,
                                 default = nil)
  if valid_774704 != nil:
    section.add "X-Amz-Security-Token", valid_774704
  var valid_774705 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774705 = validateParameter(valid_774705, JString, required = false,
                                 default = nil)
  if valid_774705 != nil:
    section.add "X-Amz-Content-Sha256", valid_774705
  var valid_774706 = header.getOrDefault("X-Amz-Algorithm")
  valid_774706 = validateParameter(valid_774706, JString, required = false,
                                 default = nil)
  if valid_774706 != nil:
    section.add "X-Amz-Algorithm", valid_774706
  var valid_774707 = header.getOrDefault("X-Amz-Signature")
  valid_774707 = validateParameter(valid_774707, JString, required = false,
                                 default = nil)
  if valid_774707 != nil:
    section.add "X-Amz-Signature", valid_774707
  var valid_774708 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774708 = validateParameter(valid_774708, JString, required = false,
                                 default = nil)
  if valid_774708 != nil:
    section.add "X-Amz-SignedHeaders", valid_774708
  var valid_774709 = header.getOrDefault("X-Amz-Credential")
  valid_774709 = validateParameter(valid_774709, JString, required = false,
                                 default = nil)
  if valid_774709 != nil:
    section.add "X-Amz-Credential", valid_774709
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774710: Call_GetDescribeOrderableDBInstanceOptions_774690;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  let valid = call_774710.validator(path, query, header, formData, body)
  let scheme = call_774710.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774710.url(scheme.get, call_774710.host, call_774710.base,
                         call_774710.route, valid.getOrDefault("path"))
  result = hook(call_774710, url, valid)

proc call*(call_774711: Call_GetDescribeOrderableDBInstanceOptions_774690;
          Engine: string; MaxRecords: int = 0; Filters: JsonNode = nil;
          LicenseModel: string = ""; Vpc: bool = false; DBInstanceClass: string = "";
          Action: string = "DescribeOrderableDBInstanceOptions";
          Marker: string = ""; EngineVersion: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeOrderableDBInstanceOptions
  ## Returns a list of orderable DB instance options for the specified engine.
  ##   Engine: string (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   LicenseModel: string
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   Vpc: bool
  ##      : The VPC filter value. Specify this parameter to show only the available VPC or non-VPC offerings.
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> .
  ##   EngineVersion: string
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Version: string (required)
  var query_774712 = newJObject()
  add(query_774712, "Engine", newJString(Engine))
  add(query_774712, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_774712.add "Filters", Filters
  add(query_774712, "LicenseModel", newJString(LicenseModel))
  add(query_774712, "Vpc", newJBool(Vpc))
  add(query_774712, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_774712, "Action", newJString(Action))
  add(query_774712, "Marker", newJString(Marker))
  add(query_774712, "EngineVersion", newJString(EngineVersion))
  add(query_774712, "Version", newJString(Version))
  result = call_774711.call(nil, query_774712, nil, nil, nil)

var getDescribeOrderableDBInstanceOptions* = Call_GetDescribeOrderableDBInstanceOptions_774690(
    name: "getDescribeOrderableDBInstanceOptions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeOrderableDBInstanceOptions",
    validator: validate_GetDescribeOrderableDBInstanceOptions_774691, base: "/",
    url: url_GetDescribeOrderableDBInstanceOptions_774692,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribePendingMaintenanceActions_774756 = ref object of OpenApiRestCall_772581
proc url_PostDescribePendingMaintenanceActions_774758(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribePendingMaintenanceActions_774757(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774759 = query.getOrDefault("Action")
  valid_774759 = validateParameter(valid_774759, JString, required = true, default = newJString(
      "DescribePendingMaintenanceActions"))
  if valid_774759 != nil:
    section.add "Action", valid_774759
  var valid_774760 = query.getOrDefault("Version")
  valid_774760 = validateParameter(valid_774760, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774760 != nil:
    section.add "Version", valid_774760
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774761 = header.getOrDefault("X-Amz-Date")
  valid_774761 = validateParameter(valid_774761, JString, required = false,
                                 default = nil)
  if valid_774761 != nil:
    section.add "X-Amz-Date", valid_774761
  var valid_774762 = header.getOrDefault("X-Amz-Security-Token")
  valid_774762 = validateParameter(valid_774762, JString, required = false,
                                 default = nil)
  if valid_774762 != nil:
    section.add "X-Amz-Security-Token", valid_774762
  var valid_774763 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774763 = validateParameter(valid_774763, JString, required = false,
                                 default = nil)
  if valid_774763 != nil:
    section.add "X-Amz-Content-Sha256", valid_774763
  var valid_774764 = header.getOrDefault("X-Amz-Algorithm")
  valid_774764 = validateParameter(valid_774764, JString, required = false,
                                 default = nil)
  if valid_774764 != nil:
    section.add "X-Amz-Algorithm", valid_774764
  var valid_774765 = header.getOrDefault("X-Amz-Signature")
  valid_774765 = validateParameter(valid_774765, JString, required = false,
                                 default = nil)
  if valid_774765 != nil:
    section.add "X-Amz-Signature", valid_774765
  var valid_774766 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774766 = validateParameter(valid_774766, JString, required = false,
                                 default = nil)
  if valid_774766 != nil:
    section.add "X-Amz-SignedHeaders", valid_774766
  var valid_774767 = header.getOrDefault("X-Amz-Credential")
  valid_774767 = validateParameter(valid_774767, JString, required = false,
                                 default = nil)
  if valid_774767 != nil:
    section.add "X-Amz-Credential", valid_774767
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>.
  ##   ResourceIdentifier: JString
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_774768 = formData.getOrDefault("Marker")
  valid_774768 = validateParameter(valid_774768, JString, required = false,
                                 default = nil)
  if valid_774768 != nil:
    section.add "Marker", valid_774768
  var valid_774769 = formData.getOrDefault("ResourceIdentifier")
  valid_774769 = validateParameter(valid_774769, JString, required = false,
                                 default = nil)
  if valid_774769 != nil:
    section.add "ResourceIdentifier", valid_774769
  var valid_774770 = formData.getOrDefault("Filters")
  valid_774770 = validateParameter(valid_774770, JArray, required = false,
                                 default = nil)
  if valid_774770 != nil:
    section.add "Filters", valid_774770
  var valid_774771 = formData.getOrDefault("MaxRecords")
  valid_774771 = validateParameter(valid_774771, JInt, required = false, default = nil)
  if valid_774771 != nil:
    section.add "MaxRecords", valid_774771
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774772: Call_PostDescribePendingMaintenanceActions_774756;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  let valid = call_774772.validator(path, query, header, formData, body)
  let scheme = call_774772.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774772.url(scheme.get, call_774772.host, call_774772.base,
                         call_774772.route, valid.getOrDefault("path"))
  result = hook(call_774772, url, valid)

proc call*(call_774773: Call_PostDescribePendingMaintenanceActions_774756;
          Marker: string = ""; Action: string = "DescribePendingMaintenanceActions";
          ResourceIdentifier: string = ""; Filters: JsonNode = nil; MaxRecords: int = 0;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribePendingMaintenanceActions
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   ResourceIdentifier: string
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_774774 = newJObject()
  var formData_774775 = newJObject()
  add(formData_774775, "Marker", newJString(Marker))
  add(query_774774, "Action", newJString(Action))
  add(formData_774775, "ResourceIdentifier", newJString(ResourceIdentifier))
  if Filters != nil:
    formData_774775.add "Filters", Filters
  add(formData_774775, "MaxRecords", newJInt(MaxRecords))
  add(query_774774, "Version", newJString(Version))
  result = call_774773.call(nil, query_774774, nil, formData_774775, nil)

var postDescribePendingMaintenanceActions* = Call_PostDescribePendingMaintenanceActions_774756(
    name: "postDescribePendingMaintenanceActions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribePendingMaintenanceActions",
    validator: validate_PostDescribePendingMaintenanceActions_774757, base: "/",
    url: url_PostDescribePendingMaintenanceActions_774758,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribePendingMaintenanceActions_774737 = ref object of OpenApiRestCall_772581
proc url_GetDescribePendingMaintenanceActions_774739(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribePendingMaintenanceActions_774738(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   ResourceIdentifier: JString
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>.
  ##   Version: JString (required)
  section = newJObject()
  var valid_774740 = query.getOrDefault("MaxRecords")
  valid_774740 = validateParameter(valid_774740, JInt, required = false, default = nil)
  if valid_774740 != nil:
    section.add "MaxRecords", valid_774740
  var valid_774741 = query.getOrDefault("Filters")
  valid_774741 = validateParameter(valid_774741, JArray, required = false,
                                 default = nil)
  if valid_774741 != nil:
    section.add "Filters", valid_774741
  var valid_774742 = query.getOrDefault("ResourceIdentifier")
  valid_774742 = validateParameter(valid_774742, JString, required = false,
                                 default = nil)
  if valid_774742 != nil:
    section.add "ResourceIdentifier", valid_774742
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774743 = query.getOrDefault("Action")
  valid_774743 = validateParameter(valid_774743, JString, required = true, default = newJString(
      "DescribePendingMaintenanceActions"))
  if valid_774743 != nil:
    section.add "Action", valid_774743
  var valid_774744 = query.getOrDefault("Marker")
  valid_774744 = validateParameter(valid_774744, JString, required = false,
                                 default = nil)
  if valid_774744 != nil:
    section.add "Marker", valid_774744
  var valid_774745 = query.getOrDefault("Version")
  valid_774745 = validateParameter(valid_774745, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774745 != nil:
    section.add "Version", valid_774745
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774746 = header.getOrDefault("X-Amz-Date")
  valid_774746 = validateParameter(valid_774746, JString, required = false,
                                 default = nil)
  if valid_774746 != nil:
    section.add "X-Amz-Date", valid_774746
  var valid_774747 = header.getOrDefault("X-Amz-Security-Token")
  valid_774747 = validateParameter(valid_774747, JString, required = false,
                                 default = nil)
  if valid_774747 != nil:
    section.add "X-Amz-Security-Token", valid_774747
  var valid_774748 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774748 = validateParameter(valid_774748, JString, required = false,
                                 default = nil)
  if valid_774748 != nil:
    section.add "X-Amz-Content-Sha256", valid_774748
  var valid_774749 = header.getOrDefault("X-Amz-Algorithm")
  valid_774749 = validateParameter(valid_774749, JString, required = false,
                                 default = nil)
  if valid_774749 != nil:
    section.add "X-Amz-Algorithm", valid_774749
  var valid_774750 = header.getOrDefault("X-Amz-Signature")
  valid_774750 = validateParameter(valid_774750, JString, required = false,
                                 default = nil)
  if valid_774750 != nil:
    section.add "X-Amz-Signature", valid_774750
  var valid_774751 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774751 = validateParameter(valid_774751, JString, required = false,
                                 default = nil)
  if valid_774751 != nil:
    section.add "X-Amz-SignedHeaders", valid_774751
  var valid_774752 = header.getOrDefault("X-Amz-Credential")
  valid_774752 = validateParameter(valid_774752, JString, required = false,
                                 default = nil)
  if valid_774752 != nil:
    section.add "X-Amz-Credential", valid_774752
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774753: Call_GetDescribePendingMaintenanceActions_774737;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  let valid = call_774753.validator(path, query, header, formData, body)
  let scheme = call_774753.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774753.url(scheme.get, call_774753.host, call_774753.base,
                         call_774753.route, valid.getOrDefault("path"))
  result = hook(call_774753, url, valid)

proc call*(call_774754: Call_GetDescribePendingMaintenanceActions_774737;
          MaxRecords: int = 0; Filters: JsonNode = nil; ResourceIdentifier: string = "";
          Action: string = "DescribePendingMaintenanceActions"; Marker: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribePendingMaintenanceActions
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   ResourceIdentifier: string
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>.
  ##   Version: string (required)
  var query_774755 = newJObject()
  add(query_774755, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_774755.add "Filters", Filters
  add(query_774755, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(query_774755, "Action", newJString(Action))
  add(query_774755, "Marker", newJString(Marker))
  add(query_774755, "Version", newJString(Version))
  result = call_774754.call(nil, query_774755, nil, nil, nil)

var getDescribePendingMaintenanceActions* = Call_GetDescribePendingMaintenanceActions_774737(
    name: "getDescribePendingMaintenanceActions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribePendingMaintenanceActions",
    validator: validate_GetDescribePendingMaintenanceActions_774738, base: "/",
    url: url_GetDescribePendingMaintenanceActions_774739,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeValidDBInstanceModifications_774792 = ref object of OpenApiRestCall_772581
proc url_PostDescribeValidDBInstanceModifications_774794(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeValidDBInstanceModifications_774793(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## You can call <a>DescribeValidDBInstanceModifications</a> to learn what modifications you can make to your DB instance. You can use this information when you call <a>ModifyDBInstance</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774795 = query.getOrDefault("Action")
  valid_774795 = validateParameter(valid_774795, JString, required = true, default = newJString(
      "DescribeValidDBInstanceModifications"))
  if valid_774795 != nil:
    section.add "Action", valid_774795
  var valid_774796 = query.getOrDefault("Version")
  valid_774796 = validateParameter(valid_774796, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774796 != nil:
    section.add "Version", valid_774796
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774797 = header.getOrDefault("X-Amz-Date")
  valid_774797 = validateParameter(valid_774797, JString, required = false,
                                 default = nil)
  if valid_774797 != nil:
    section.add "X-Amz-Date", valid_774797
  var valid_774798 = header.getOrDefault("X-Amz-Security-Token")
  valid_774798 = validateParameter(valid_774798, JString, required = false,
                                 default = nil)
  if valid_774798 != nil:
    section.add "X-Amz-Security-Token", valid_774798
  var valid_774799 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774799 = validateParameter(valid_774799, JString, required = false,
                                 default = nil)
  if valid_774799 != nil:
    section.add "X-Amz-Content-Sha256", valid_774799
  var valid_774800 = header.getOrDefault("X-Amz-Algorithm")
  valid_774800 = validateParameter(valid_774800, JString, required = false,
                                 default = nil)
  if valid_774800 != nil:
    section.add "X-Amz-Algorithm", valid_774800
  var valid_774801 = header.getOrDefault("X-Amz-Signature")
  valid_774801 = validateParameter(valid_774801, JString, required = false,
                                 default = nil)
  if valid_774801 != nil:
    section.add "X-Amz-Signature", valid_774801
  var valid_774802 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774802 = validateParameter(valid_774802, JString, required = false,
                                 default = nil)
  if valid_774802 != nil:
    section.add "X-Amz-SignedHeaders", valid_774802
  var valid_774803 = header.getOrDefault("X-Amz-Credential")
  valid_774803 = validateParameter(valid_774803, JString, required = false,
                                 default = nil)
  if valid_774803 != nil:
    section.add "X-Amz-Credential", valid_774803
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The customer identifier or the ARN of your DB instance.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_774804 = formData.getOrDefault("DBInstanceIdentifier")
  valid_774804 = validateParameter(valid_774804, JString, required = true,
                                 default = nil)
  if valid_774804 != nil:
    section.add "DBInstanceIdentifier", valid_774804
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774805: Call_PostDescribeValidDBInstanceModifications_774792;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## You can call <a>DescribeValidDBInstanceModifications</a> to learn what modifications you can make to your DB instance. You can use this information when you call <a>ModifyDBInstance</a>.
  ## 
  let valid = call_774805.validator(path, query, header, formData, body)
  let scheme = call_774805.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774805.url(scheme.get, call_774805.host, call_774805.base,
                         call_774805.route, valid.getOrDefault("path"))
  result = hook(call_774805, url, valid)

proc call*(call_774806: Call_PostDescribeValidDBInstanceModifications_774792;
          DBInstanceIdentifier: string;
          Action: string = "DescribeValidDBInstanceModifications";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeValidDBInstanceModifications
  ## You can call <a>DescribeValidDBInstanceModifications</a> to learn what modifications you can make to your DB instance. You can use this information when you call <a>ModifyDBInstance</a>.
  ##   DBInstanceIdentifier: string (required)
  ##                       : The customer identifier or the ARN of your DB instance.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774807 = newJObject()
  var formData_774808 = newJObject()
  add(formData_774808, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_774807, "Action", newJString(Action))
  add(query_774807, "Version", newJString(Version))
  result = call_774806.call(nil, query_774807, nil, formData_774808, nil)

var postDescribeValidDBInstanceModifications* = Call_PostDescribeValidDBInstanceModifications_774792(
    name: "postDescribeValidDBInstanceModifications", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeValidDBInstanceModifications",
    validator: validate_PostDescribeValidDBInstanceModifications_774793,
    base: "/", url: url_PostDescribeValidDBInstanceModifications_774794,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeValidDBInstanceModifications_774776 = ref object of OpenApiRestCall_772581
proc url_GetDescribeValidDBInstanceModifications_774778(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeValidDBInstanceModifications_774777(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## You can call <a>DescribeValidDBInstanceModifications</a> to learn what modifications you can make to your DB instance. You can use this information when you call <a>ModifyDBInstance</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The customer identifier or the ARN of your DB instance.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774779 = query.getOrDefault("Action")
  valid_774779 = validateParameter(valid_774779, JString, required = true, default = newJString(
      "DescribeValidDBInstanceModifications"))
  if valid_774779 != nil:
    section.add "Action", valid_774779
  var valid_774780 = query.getOrDefault("Version")
  valid_774780 = validateParameter(valid_774780, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774780 != nil:
    section.add "Version", valid_774780
  var valid_774781 = query.getOrDefault("DBInstanceIdentifier")
  valid_774781 = validateParameter(valid_774781, JString, required = true,
                                 default = nil)
  if valid_774781 != nil:
    section.add "DBInstanceIdentifier", valid_774781
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774782 = header.getOrDefault("X-Amz-Date")
  valid_774782 = validateParameter(valid_774782, JString, required = false,
                                 default = nil)
  if valid_774782 != nil:
    section.add "X-Amz-Date", valid_774782
  var valid_774783 = header.getOrDefault("X-Amz-Security-Token")
  valid_774783 = validateParameter(valid_774783, JString, required = false,
                                 default = nil)
  if valid_774783 != nil:
    section.add "X-Amz-Security-Token", valid_774783
  var valid_774784 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774784 = validateParameter(valid_774784, JString, required = false,
                                 default = nil)
  if valid_774784 != nil:
    section.add "X-Amz-Content-Sha256", valid_774784
  var valid_774785 = header.getOrDefault("X-Amz-Algorithm")
  valid_774785 = validateParameter(valid_774785, JString, required = false,
                                 default = nil)
  if valid_774785 != nil:
    section.add "X-Amz-Algorithm", valid_774785
  var valid_774786 = header.getOrDefault("X-Amz-Signature")
  valid_774786 = validateParameter(valid_774786, JString, required = false,
                                 default = nil)
  if valid_774786 != nil:
    section.add "X-Amz-Signature", valid_774786
  var valid_774787 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774787 = validateParameter(valid_774787, JString, required = false,
                                 default = nil)
  if valid_774787 != nil:
    section.add "X-Amz-SignedHeaders", valid_774787
  var valid_774788 = header.getOrDefault("X-Amz-Credential")
  valid_774788 = validateParameter(valid_774788, JString, required = false,
                                 default = nil)
  if valid_774788 != nil:
    section.add "X-Amz-Credential", valid_774788
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774789: Call_GetDescribeValidDBInstanceModifications_774776;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## You can call <a>DescribeValidDBInstanceModifications</a> to learn what modifications you can make to your DB instance. You can use this information when you call <a>ModifyDBInstance</a>.
  ## 
  let valid = call_774789.validator(path, query, header, formData, body)
  let scheme = call_774789.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774789.url(scheme.get, call_774789.host, call_774789.base,
                         call_774789.route, valid.getOrDefault("path"))
  result = hook(call_774789, url, valid)

proc call*(call_774790: Call_GetDescribeValidDBInstanceModifications_774776;
          DBInstanceIdentifier: string;
          Action: string = "DescribeValidDBInstanceModifications";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeValidDBInstanceModifications
  ## You can call <a>DescribeValidDBInstanceModifications</a> to learn what modifications you can make to your DB instance. You can use this information when you call <a>ModifyDBInstance</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string (required)
  ##                       : The customer identifier or the ARN of your DB instance.
  var query_774791 = newJObject()
  add(query_774791, "Action", newJString(Action))
  add(query_774791, "Version", newJString(Version))
  add(query_774791, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  result = call_774790.call(nil, query_774791, nil, nil, nil)

var getDescribeValidDBInstanceModifications* = Call_GetDescribeValidDBInstanceModifications_774776(
    name: "getDescribeValidDBInstanceModifications", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeValidDBInstanceModifications",
    validator: validate_GetDescribeValidDBInstanceModifications_774777, base: "/",
    url: url_GetDescribeValidDBInstanceModifications_774778,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostFailoverDBCluster_774826 = ref object of OpenApiRestCall_772581
proc url_PostFailoverDBCluster_774828(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostFailoverDBCluster_774827(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Read Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Neptune will automatically fail over to a Read Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774829 = query.getOrDefault("Action")
  valid_774829 = validateParameter(valid_774829, JString, required = true,
                                 default = newJString("FailoverDBCluster"))
  if valid_774829 != nil:
    section.add "Action", valid_774829
  var valid_774830 = query.getOrDefault("Version")
  valid_774830 = validateParameter(valid_774830, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774830 != nil:
    section.add "Version", valid_774830
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774831 = header.getOrDefault("X-Amz-Date")
  valid_774831 = validateParameter(valid_774831, JString, required = false,
                                 default = nil)
  if valid_774831 != nil:
    section.add "X-Amz-Date", valid_774831
  var valid_774832 = header.getOrDefault("X-Amz-Security-Token")
  valid_774832 = validateParameter(valid_774832, JString, required = false,
                                 default = nil)
  if valid_774832 != nil:
    section.add "X-Amz-Security-Token", valid_774832
  var valid_774833 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774833 = validateParameter(valid_774833, JString, required = false,
                                 default = nil)
  if valid_774833 != nil:
    section.add "X-Amz-Content-Sha256", valid_774833
  var valid_774834 = header.getOrDefault("X-Amz-Algorithm")
  valid_774834 = validateParameter(valid_774834, JString, required = false,
                                 default = nil)
  if valid_774834 != nil:
    section.add "X-Amz-Algorithm", valid_774834
  var valid_774835 = header.getOrDefault("X-Amz-Signature")
  valid_774835 = validateParameter(valid_774835, JString, required = false,
                                 default = nil)
  if valid_774835 != nil:
    section.add "X-Amz-Signature", valid_774835
  var valid_774836 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774836 = validateParameter(valid_774836, JString, required = false,
                                 default = nil)
  if valid_774836 != nil:
    section.add "X-Amz-SignedHeaders", valid_774836
  var valid_774837 = header.getOrDefault("X-Amz-Credential")
  valid_774837 = validateParameter(valid_774837, JString, required = false,
                                 default = nil)
  if valid_774837 != nil:
    section.add "X-Amz-Credential", valid_774837
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetDBInstanceIdentifier: JString
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Read Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   DBClusterIdentifier: JString
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  section = newJObject()
  var valid_774838 = formData.getOrDefault("TargetDBInstanceIdentifier")
  valid_774838 = validateParameter(valid_774838, JString, required = false,
                                 default = nil)
  if valid_774838 != nil:
    section.add "TargetDBInstanceIdentifier", valid_774838
  var valid_774839 = formData.getOrDefault("DBClusterIdentifier")
  valid_774839 = validateParameter(valid_774839, JString, required = false,
                                 default = nil)
  if valid_774839 != nil:
    section.add "DBClusterIdentifier", valid_774839
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774840: Call_PostFailoverDBCluster_774826; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Read Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Neptune will automatically fail over to a Read Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p>
  ## 
  let valid = call_774840.validator(path, query, header, formData, body)
  let scheme = call_774840.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774840.url(scheme.get, call_774840.host, call_774840.base,
                         call_774840.route, valid.getOrDefault("path"))
  result = hook(call_774840, url, valid)

proc call*(call_774841: Call_PostFailoverDBCluster_774826;
          Action: string = "FailoverDBCluster";
          TargetDBInstanceIdentifier: string = ""; DBClusterIdentifier: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postFailoverDBCluster
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Read Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Neptune will automatically fail over to a Read Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p>
  ##   Action: string (required)
  ##   TargetDBInstanceIdentifier: string
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Read Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   DBClusterIdentifier: string
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   Version: string (required)
  var query_774842 = newJObject()
  var formData_774843 = newJObject()
  add(query_774842, "Action", newJString(Action))
  add(formData_774843, "TargetDBInstanceIdentifier",
      newJString(TargetDBInstanceIdentifier))
  add(formData_774843, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_774842, "Version", newJString(Version))
  result = call_774841.call(nil, query_774842, nil, formData_774843, nil)

var postFailoverDBCluster* = Call_PostFailoverDBCluster_774826(
    name: "postFailoverDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=FailoverDBCluster",
    validator: validate_PostFailoverDBCluster_774827, base: "/",
    url: url_PostFailoverDBCluster_774828, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetFailoverDBCluster_774809 = ref object of OpenApiRestCall_772581
proc url_GetFailoverDBCluster_774811(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetFailoverDBCluster_774810(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Read Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Neptune will automatically fail over to a Read Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   TargetDBInstanceIdentifier: JString
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Read Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_774812 = query.getOrDefault("DBClusterIdentifier")
  valid_774812 = validateParameter(valid_774812, JString, required = false,
                                 default = nil)
  if valid_774812 != nil:
    section.add "DBClusterIdentifier", valid_774812
  var valid_774813 = query.getOrDefault("TargetDBInstanceIdentifier")
  valid_774813 = validateParameter(valid_774813, JString, required = false,
                                 default = nil)
  if valid_774813 != nil:
    section.add "TargetDBInstanceIdentifier", valid_774813
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774814 = query.getOrDefault("Action")
  valid_774814 = validateParameter(valid_774814, JString, required = true,
                                 default = newJString("FailoverDBCluster"))
  if valid_774814 != nil:
    section.add "Action", valid_774814
  var valid_774815 = query.getOrDefault("Version")
  valid_774815 = validateParameter(valid_774815, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774815 != nil:
    section.add "Version", valid_774815
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774816 = header.getOrDefault("X-Amz-Date")
  valid_774816 = validateParameter(valid_774816, JString, required = false,
                                 default = nil)
  if valid_774816 != nil:
    section.add "X-Amz-Date", valid_774816
  var valid_774817 = header.getOrDefault("X-Amz-Security-Token")
  valid_774817 = validateParameter(valid_774817, JString, required = false,
                                 default = nil)
  if valid_774817 != nil:
    section.add "X-Amz-Security-Token", valid_774817
  var valid_774818 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774818 = validateParameter(valid_774818, JString, required = false,
                                 default = nil)
  if valid_774818 != nil:
    section.add "X-Amz-Content-Sha256", valid_774818
  var valid_774819 = header.getOrDefault("X-Amz-Algorithm")
  valid_774819 = validateParameter(valid_774819, JString, required = false,
                                 default = nil)
  if valid_774819 != nil:
    section.add "X-Amz-Algorithm", valid_774819
  var valid_774820 = header.getOrDefault("X-Amz-Signature")
  valid_774820 = validateParameter(valid_774820, JString, required = false,
                                 default = nil)
  if valid_774820 != nil:
    section.add "X-Amz-Signature", valid_774820
  var valid_774821 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774821 = validateParameter(valid_774821, JString, required = false,
                                 default = nil)
  if valid_774821 != nil:
    section.add "X-Amz-SignedHeaders", valid_774821
  var valid_774822 = header.getOrDefault("X-Amz-Credential")
  valid_774822 = validateParameter(valid_774822, JString, required = false,
                                 default = nil)
  if valid_774822 != nil:
    section.add "X-Amz-Credential", valid_774822
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774823: Call_GetFailoverDBCluster_774809; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Read Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Neptune will automatically fail over to a Read Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p>
  ## 
  let valid = call_774823.validator(path, query, header, formData, body)
  let scheme = call_774823.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774823.url(scheme.get, call_774823.host, call_774823.base,
                         call_774823.route, valid.getOrDefault("path"))
  result = hook(call_774823, url, valid)

proc call*(call_774824: Call_GetFailoverDBCluster_774809;
          DBClusterIdentifier: string = ""; TargetDBInstanceIdentifier: string = "";
          Action: string = "FailoverDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getFailoverDBCluster
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Read Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Neptune will automatically fail over to a Read Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p>
  ##   DBClusterIdentifier: string
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   TargetDBInstanceIdentifier: string
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Read Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774825 = newJObject()
  add(query_774825, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_774825, "TargetDBInstanceIdentifier",
      newJString(TargetDBInstanceIdentifier))
  add(query_774825, "Action", newJString(Action))
  add(query_774825, "Version", newJString(Version))
  result = call_774824.call(nil, query_774825, nil, nil, nil)

var getFailoverDBCluster* = Call_GetFailoverDBCluster_774809(
    name: "getFailoverDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=FailoverDBCluster",
    validator: validate_GetFailoverDBCluster_774810, base: "/",
    url: url_GetFailoverDBCluster_774811, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListTagsForResource_774861 = ref object of OpenApiRestCall_772581
proc url_PostListTagsForResource_774863(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListTagsForResource_774862(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists all tags on an Amazon Neptune resource.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774864 = query.getOrDefault("Action")
  valid_774864 = validateParameter(valid_774864, JString, required = true,
                                 default = newJString("ListTagsForResource"))
  if valid_774864 != nil:
    section.add "Action", valid_774864
  var valid_774865 = query.getOrDefault("Version")
  valid_774865 = validateParameter(valid_774865, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774865 != nil:
    section.add "Version", valid_774865
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774866 = header.getOrDefault("X-Amz-Date")
  valid_774866 = validateParameter(valid_774866, JString, required = false,
                                 default = nil)
  if valid_774866 != nil:
    section.add "X-Amz-Date", valid_774866
  var valid_774867 = header.getOrDefault("X-Amz-Security-Token")
  valid_774867 = validateParameter(valid_774867, JString, required = false,
                                 default = nil)
  if valid_774867 != nil:
    section.add "X-Amz-Security-Token", valid_774867
  var valid_774868 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774868 = validateParameter(valid_774868, JString, required = false,
                                 default = nil)
  if valid_774868 != nil:
    section.add "X-Amz-Content-Sha256", valid_774868
  var valid_774869 = header.getOrDefault("X-Amz-Algorithm")
  valid_774869 = validateParameter(valid_774869, JString, required = false,
                                 default = nil)
  if valid_774869 != nil:
    section.add "X-Amz-Algorithm", valid_774869
  var valid_774870 = header.getOrDefault("X-Amz-Signature")
  valid_774870 = validateParameter(valid_774870, JString, required = false,
                                 default = nil)
  if valid_774870 != nil:
    section.add "X-Amz-Signature", valid_774870
  var valid_774871 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774871 = validateParameter(valid_774871, JString, required = false,
                                 default = nil)
  if valid_774871 != nil:
    section.add "X-Amz-SignedHeaders", valid_774871
  var valid_774872 = header.getOrDefault("X-Amz-Credential")
  valid_774872 = validateParameter(valid_774872, JString, required = false,
                                 default = nil)
  if valid_774872 != nil:
    section.add "X-Amz-Credential", valid_774872
  result.add "header", section
  ## parameters in `formData` object:
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   ResourceName: JString (required)
  ##               : The Amazon Neptune resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  section = newJObject()
  var valid_774873 = formData.getOrDefault("Filters")
  valid_774873 = validateParameter(valid_774873, JArray, required = false,
                                 default = nil)
  if valid_774873 != nil:
    section.add "Filters", valid_774873
  assert formData != nil,
        "formData argument is necessary due to required `ResourceName` field"
  var valid_774874 = formData.getOrDefault("ResourceName")
  valid_774874 = validateParameter(valid_774874, JString, required = true,
                                 default = nil)
  if valid_774874 != nil:
    section.add "ResourceName", valid_774874
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774875: Call_PostListTagsForResource_774861; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists all tags on an Amazon Neptune resource.
  ## 
  let valid = call_774875.validator(path, query, header, formData, body)
  let scheme = call_774875.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774875.url(scheme.get, call_774875.host, call_774875.base,
                         call_774875.route, valid.getOrDefault("path"))
  result = hook(call_774875, url, valid)

proc call*(call_774876: Call_PostListTagsForResource_774861; ResourceName: string;
          Action: string = "ListTagsForResource"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postListTagsForResource
  ## Lists all tags on an Amazon Neptune resource.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   ResourceName: string (required)
  ##               : The Amazon Neptune resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   Version: string (required)
  var query_774877 = newJObject()
  var formData_774878 = newJObject()
  add(query_774877, "Action", newJString(Action))
  if Filters != nil:
    formData_774878.add "Filters", Filters
  add(formData_774878, "ResourceName", newJString(ResourceName))
  add(query_774877, "Version", newJString(Version))
  result = call_774876.call(nil, query_774877, nil, formData_774878, nil)

var postListTagsForResource* = Call_PostListTagsForResource_774861(
    name: "postListTagsForResource", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ListTagsForResource",
    validator: validate_PostListTagsForResource_774862, base: "/",
    url: url_PostListTagsForResource_774863, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListTagsForResource_774844 = ref object of OpenApiRestCall_772581
proc url_GetListTagsForResource_774846(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListTagsForResource_774845(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists all tags on an Amazon Neptune resource.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   ResourceName: JString (required)
  ##               : The Amazon Neptune resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_774847 = query.getOrDefault("Filters")
  valid_774847 = validateParameter(valid_774847, JArray, required = false,
                                 default = nil)
  if valid_774847 != nil:
    section.add "Filters", valid_774847
  assert query != nil,
        "query argument is necessary due to required `ResourceName` field"
  var valid_774848 = query.getOrDefault("ResourceName")
  valid_774848 = validateParameter(valid_774848, JString, required = true,
                                 default = nil)
  if valid_774848 != nil:
    section.add "ResourceName", valid_774848
  var valid_774849 = query.getOrDefault("Action")
  valid_774849 = validateParameter(valid_774849, JString, required = true,
                                 default = newJString("ListTagsForResource"))
  if valid_774849 != nil:
    section.add "Action", valid_774849
  var valid_774850 = query.getOrDefault("Version")
  valid_774850 = validateParameter(valid_774850, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774850 != nil:
    section.add "Version", valid_774850
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774851 = header.getOrDefault("X-Amz-Date")
  valid_774851 = validateParameter(valid_774851, JString, required = false,
                                 default = nil)
  if valid_774851 != nil:
    section.add "X-Amz-Date", valid_774851
  var valid_774852 = header.getOrDefault("X-Amz-Security-Token")
  valid_774852 = validateParameter(valid_774852, JString, required = false,
                                 default = nil)
  if valid_774852 != nil:
    section.add "X-Amz-Security-Token", valid_774852
  var valid_774853 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774853 = validateParameter(valid_774853, JString, required = false,
                                 default = nil)
  if valid_774853 != nil:
    section.add "X-Amz-Content-Sha256", valid_774853
  var valid_774854 = header.getOrDefault("X-Amz-Algorithm")
  valid_774854 = validateParameter(valid_774854, JString, required = false,
                                 default = nil)
  if valid_774854 != nil:
    section.add "X-Amz-Algorithm", valid_774854
  var valid_774855 = header.getOrDefault("X-Amz-Signature")
  valid_774855 = validateParameter(valid_774855, JString, required = false,
                                 default = nil)
  if valid_774855 != nil:
    section.add "X-Amz-Signature", valid_774855
  var valid_774856 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774856 = validateParameter(valid_774856, JString, required = false,
                                 default = nil)
  if valid_774856 != nil:
    section.add "X-Amz-SignedHeaders", valid_774856
  var valid_774857 = header.getOrDefault("X-Amz-Credential")
  valid_774857 = validateParameter(valid_774857, JString, required = false,
                                 default = nil)
  if valid_774857 != nil:
    section.add "X-Amz-Credential", valid_774857
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774858: Call_GetListTagsForResource_774844; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists all tags on an Amazon Neptune resource.
  ## 
  let valid = call_774858.validator(path, query, header, formData, body)
  let scheme = call_774858.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774858.url(scheme.get, call_774858.host, call_774858.base,
                         call_774858.route, valid.getOrDefault("path"))
  result = hook(call_774858, url, valid)

proc call*(call_774859: Call_GetListTagsForResource_774844; ResourceName: string;
          Filters: JsonNode = nil; Action: string = "ListTagsForResource";
          Version: string = "2014-10-31"): Recallable =
  ## getListTagsForResource
  ## Lists all tags on an Amazon Neptune resource.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   ResourceName: string (required)
  ##               : The Amazon Neptune resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774860 = newJObject()
  if Filters != nil:
    query_774860.add "Filters", Filters
  add(query_774860, "ResourceName", newJString(ResourceName))
  add(query_774860, "Action", newJString(Action))
  add(query_774860, "Version", newJString(Version))
  result = call_774859.call(nil, query_774860, nil, nil, nil)

var getListTagsForResource* = Call_GetListTagsForResource_774844(
    name: "getListTagsForResource", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ListTagsForResource",
    validator: validate_GetListTagsForResource_774845, base: "/",
    url: url_GetListTagsForResource_774846, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBCluster_774909 = ref object of OpenApiRestCall_772581
proc url_PostModifyDBCluster_774911(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostModifyDBCluster_774910(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Modify a setting for a DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774912 = query.getOrDefault("Action")
  valid_774912 = validateParameter(valid_774912, JString, required = true,
                                 default = newJString("ModifyDBCluster"))
  if valid_774912 != nil:
    section.add "Action", valid_774912
  var valid_774913 = query.getOrDefault("Version")
  valid_774913 = validateParameter(valid_774913, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774913 != nil:
    section.add "Version", valid_774913
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774914 = header.getOrDefault("X-Amz-Date")
  valid_774914 = validateParameter(valid_774914, JString, required = false,
                                 default = nil)
  if valid_774914 != nil:
    section.add "X-Amz-Date", valid_774914
  var valid_774915 = header.getOrDefault("X-Amz-Security-Token")
  valid_774915 = validateParameter(valid_774915, JString, required = false,
                                 default = nil)
  if valid_774915 != nil:
    section.add "X-Amz-Security-Token", valid_774915
  var valid_774916 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774916 = validateParameter(valid_774916, JString, required = false,
                                 default = nil)
  if valid_774916 != nil:
    section.add "X-Amz-Content-Sha256", valid_774916
  var valid_774917 = header.getOrDefault("X-Amz-Algorithm")
  valid_774917 = validateParameter(valid_774917, JString, required = false,
                                 default = nil)
  if valid_774917 != nil:
    section.add "X-Amz-Algorithm", valid_774917
  var valid_774918 = header.getOrDefault("X-Amz-Signature")
  valid_774918 = validateParameter(valid_774918, JString, required = false,
                                 default = nil)
  if valid_774918 != nil:
    section.add "X-Amz-Signature", valid_774918
  var valid_774919 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774919 = validateParameter(valid_774919, JString, required = false,
                                 default = nil)
  if valid_774919 != nil:
    section.add "X-Amz-SignedHeaders", valid_774919
  var valid_774920 = header.getOrDefault("X-Amz-Credential")
  valid_774920 = validateParameter(valid_774920, JString, required = false,
                                 default = nil)
  if valid_774920 != nil:
    section.add "X-Amz-Credential", valid_774920
  result.add "header", section
  ## parameters in `formData` object:
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to enable.
  ##   ApplyImmediately: JBool
  ##                   : <p>A value that specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is set to <code>false</code>, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values. If you set the <code>ApplyImmediately</code> parameter value to false, then changes to the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>Default: <code>false</code> </p>
  ##   Port: JInt
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   NewDBClusterIdentifier: JString
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to disable.
  ##   DBClusterParameterGroupName: JString
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter.</p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless the ApplyImmediately parameter is set to true.</p> <p>For a list of valid engine versions, see <a>CreateDBInstance</a>, or call <a>DescribeDBEngineVersions</a>.</p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.</p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  section = newJObject()
  var valid_774921 = formData.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_774921 = validateParameter(valid_774921, JArray, required = false,
                                 default = nil)
  if valid_774921 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_774921
  var valid_774922 = formData.getOrDefault("ApplyImmediately")
  valid_774922 = validateParameter(valid_774922, JBool, required = false, default = nil)
  if valid_774922 != nil:
    section.add "ApplyImmediately", valid_774922
  var valid_774923 = formData.getOrDefault("Port")
  valid_774923 = validateParameter(valid_774923, JInt, required = false, default = nil)
  if valid_774923 != nil:
    section.add "Port", valid_774923
  var valid_774924 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_774924 = validateParameter(valid_774924, JArray, required = false,
                                 default = nil)
  if valid_774924 != nil:
    section.add "VpcSecurityGroupIds", valid_774924
  var valid_774925 = formData.getOrDefault("OptionGroupName")
  valid_774925 = validateParameter(valid_774925, JString, required = false,
                                 default = nil)
  if valid_774925 != nil:
    section.add "OptionGroupName", valid_774925
  var valid_774926 = formData.getOrDefault("BackupRetentionPeriod")
  valid_774926 = validateParameter(valid_774926, JInt, required = false, default = nil)
  if valid_774926 != nil:
    section.add "BackupRetentionPeriod", valid_774926
  var valid_774927 = formData.getOrDefault("MasterUserPassword")
  valid_774927 = validateParameter(valid_774927, JString, required = false,
                                 default = nil)
  if valid_774927 != nil:
    section.add "MasterUserPassword", valid_774927
  var valid_774928 = formData.getOrDefault("NewDBClusterIdentifier")
  valid_774928 = validateParameter(valid_774928, JString, required = false,
                                 default = nil)
  if valid_774928 != nil:
    section.add "NewDBClusterIdentifier", valid_774928
  var valid_774929 = formData.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_774929 = validateParameter(valid_774929, JArray, required = false,
                                 default = nil)
  if valid_774929 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_774929
  var valid_774930 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_774930 = validateParameter(valid_774930, JString, required = false,
                                 default = nil)
  if valid_774930 != nil:
    section.add "DBClusterParameterGroupName", valid_774930
  var valid_774931 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_774931 = validateParameter(valid_774931, JBool, required = false, default = nil)
  if valid_774931 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_774931
  var valid_774932 = formData.getOrDefault("PreferredBackupWindow")
  valid_774932 = validateParameter(valid_774932, JString, required = false,
                                 default = nil)
  if valid_774932 != nil:
    section.add "PreferredBackupWindow", valid_774932
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_774933 = formData.getOrDefault("DBClusterIdentifier")
  valid_774933 = validateParameter(valid_774933, JString, required = true,
                                 default = nil)
  if valid_774933 != nil:
    section.add "DBClusterIdentifier", valid_774933
  var valid_774934 = formData.getOrDefault("EngineVersion")
  valid_774934 = validateParameter(valid_774934, JString, required = false,
                                 default = nil)
  if valid_774934 != nil:
    section.add "EngineVersion", valid_774934
  var valid_774935 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_774935 = validateParameter(valid_774935, JString, required = false,
                                 default = nil)
  if valid_774935 != nil:
    section.add "PreferredMaintenanceWindow", valid_774935
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774936: Call_PostModifyDBCluster_774909; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modify a setting for a DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
  ## 
  let valid = call_774936.validator(path, query, header, formData, body)
  let scheme = call_774936.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774936.url(scheme.get, call_774936.host, call_774936.base,
                         call_774936.route, valid.getOrDefault("path"))
  result = hook(call_774936, url, valid)

proc call*(call_774937: Call_PostModifyDBCluster_774909;
          DBClusterIdentifier: string;
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          ApplyImmediately: bool = false; Port: int = 0;
          VpcSecurityGroupIds: JsonNode = nil; OptionGroupName: string = "";
          BackupRetentionPeriod: int = 0; MasterUserPassword: string = "";
          NewDBClusterIdentifier: string = "";
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          Action: string = "ModifyDBCluster";
          DBClusterParameterGroupName: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          PreferredBackupWindow: string = ""; EngineVersion: string = "";
          Version: string = "2014-10-31"; PreferredMaintenanceWindow: string = ""): Recallable =
  ## postModifyDBCluster
  ## Modify a setting for a DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to enable.
  ##   ApplyImmediately: bool
  ##                   : <p>A value that specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is set to <code>false</code>, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values. If you set the <code>ApplyImmediately</code> parameter value to false, then changes to the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>Default: <code>false</code> </p>
  ##   Port: int
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   NewDBClusterIdentifier: string
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to disable.
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter.</p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless the ApplyImmediately parameter is set to true.</p> <p>For a list of valid engine versions, see <a>CreateDBInstance</a>, or call <a>DescribeDBEngineVersions</a>.</p>
  ##   Version: string (required)
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.</p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  var query_774938 = newJObject()
  var formData_774939 = newJObject()
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    formData_774939.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                       CloudwatchLogsExportConfigurationEnableLogTypes
  add(formData_774939, "ApplyImmediately", newJBool(ApplyImmediately))
  add(formData_774939, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    formData_774939.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_774939, "OptionGroupName", newJString(OptionGroupName))
  add(formData_774939, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_774939, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_774939, "NewDBClusterIdentifier",
      newJString(NewDBClusterIdentifier))
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    formData_774939.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                       CloudwatchLogsExportConfigurationDisableLogTypes
  add(query_774938, "Action", newJString(Action))
  add(formData_774939, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(formData_774939, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_774939, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_774939, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_774939, "EngineVersion", newJString(EngineVersion))
  add(query_774938, "Version", newJString(Version))
  add(formData_774939, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  result = call_774937.call(nil, query_774938, nil, formData_774939, nil)

var postModifyDBCluster* = Call_PostModifyDBCluster_774909(
    name: "postModifyDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBCluster",
    validator: validate_PostModifyDBCluster_774910, base: "/",
    url: url_PostModifyDBCluster_774911, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBCluster_774879 = ref object of OpenApiRestCall_772581
proc url_GetModifyDBCluster_774881(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetModifyDBCluster_774880(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Modify a setting for a DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.</p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   DBClusterParameterGroupName: JString
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to enable.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to disable.
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   NewDBClusterIdentifier: JString
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   Action: JString (required)
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless the ApplyImmediately parameter is set to true.</p> <p>For a list of valid engine versions, see <a>CreateDBInstance</a>, or call <a>DescribeDBEngineVersions</a>.</p>
  ##   Port: JInt
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter.</p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   Version: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : <p>A value that specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is set to <code>false</code>, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values. If you set the <code>ApplyImmediately</code> parameter value to false, then changes to the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>Default: <code>false</code> </p>
  section = newJObject()
  var valid_774882 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_774882 = validateParameter(valid_774882, JString, required = false,
                                 default = nil)
  if valid_774882 != nil:
    section.add "PreferredMaintenanceWindow", valid_774882
  var valid_774883 = query.getOrDefault("DBClusterParameterGroupName")
  valid_774883 = validateParameter(valid_774883, JString, required = false,
                                 default = nil)
  if valid_774883 != nil:
    section.add "DBClusterParameterGroupName", valid_774883
  var valid_774884 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_774884 = validateParameter(valid_774884, JBool, required = false, default = nil)
  if valid_774884 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_774884
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_774885 = query.getOrDefault("DBClusterIdentifier")
  valid_774885 = validateParameter(valid_774885, JString, required = true,
                                 default = nil)
  if valid_774885 != nil:
    section.add "DBClusterIdentifier", valid_774885
  var valid_774886 = query.getOrDefault("OptionGroupName")
  valid_774886 = validateParameter(valid_774886, JString, required = false,
                                 default = nil)
  if valid_774886 != nil:
    section.add "OptionGroupName", valid_774886
  var valid_774887 = query.getOrDefault("MasterUserPassword")
  valid_774887 = validateParameter(valid_774887, JString, required = false,
                                 default = nil)
  if valid_774887 != nil:
    section.add "MasterUserPassword", valid_774887
  var valid_774888 = query.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_774888 = validateParameter(valid_774888, JArray, required = false,
                                 default = nil)
  if valid_774888 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_774888
  var valid_774889 = query.getOrDefault("VpcSecurityGroupIds")
  valid_774889 = validateParameter(valid_774889, JArray, required = false,
                                 default = nil)
  if valid_774889 != nil:
    section.add "VpcSecurityGroupIds", valid_774889
  var valid_774890 = query.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_774890 = validateParameter(valid_774890, JArray, required = false,
                                 default = nil)
  if valid_774890 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_774890
  var valid_774891 = query.getOrDefault("BackupRetentionPeriod")
  valid_774891 = validateParameter(valid_774891, JInt, required = false, default = nil)
  if valid_774891 != nil:
    section.add "BackupRetentionPeriod", valid_774891
  var valid_774892 = query.getOrDefault("NewDBClusterIdentifier")
  valid_774892 = validateParameter(valid_774892, JString, required = false,
                                 default = nil)
  if valid_774892 != nil:
    section.add "NewDBClusterIdentifier", valid_774892
  var valid_774893 = query.getOrDefault("Action")
  valid_774893 = validateParameter(valid_774893, JString, required = true,
                                 default = newJString("ModifyDBCluster"))
  if valid_774893 != nil:
    section.add "Action", valid_774893
  var valid_774894 = query.getOrDefault("EngineVersion")
  valid_774894 = validateParameter(valid_774894, JString, required = false,
                                 default = nil)
  if valid_774894 != nil:
    section.add "EngineVersion", valid_774894
  var valid_774895 = query.getOrDefault("Port")
  valid_774895 = validateParameter(valid_774895, JInt, required = false, default = nil)
  if valid_774895 != nil:
    section.add "Port", valid_774895
  var valid_774896 = query.getOrDefault("PreferredBackupWindow")
  valid_774896 = validateParameter(valid_774896, JString, required = false,
                                 default = nil)
  if valid_774896 != nil:
    section.add "PreferredBackupWindow", valid_774896
  var valid_774897 = query.getOrDefault("Version")
  valid_774897 = validateParameter(valid_774897, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774897 != nil:
    section.add "Version", valid_774897
  var valid_774898 = query.getOrDefault("ApplyImmediately")
  valid_774898 = validateParameter(valid_774898, JBool, required = false, default = nil)
  if valid_774898 != nil:
    section.add "ApplyImmediately", valid_774898
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774899 = header.getOrDefault("X-Amz-Date")
  valid_774899 = validateParameter(valid_774899, JString, required = false,
                                 default = nil)
  if valid_774899 != nil:
    section.add "X-Amz-Date", valid_774899
  var valid_774900 = header.getOrDefault("X-Amz-Security-Token")
  valid_774900 = validateParameter(valid_774900, JString, required = false,
                                 default = nil)
  if valid_774900 != nil:
    section.add "X-Amz-Security-Token", valid_774900
  var valid_774901 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774901 = validateParameter(valid_774901, JString, required = false,
                                 default = nil)
  if valid_774901 != nil:
    section.add "X-Amz-Content-Sha256", valid_774901
  var valid_774902 = header.getOrDefault("X-Amz-Algorithm")
  valid_774902 = validateParameter(valid_774902, JString, required = false,
                                 default = nil)
  if valid_774902 != nil:
    section.add "X-Amz-Algorithm", valid_774902
  var valid_774903 = header.getOrDefault("X-Amz-Signature")
  valid_774903 = validateParameter(valid_774903, JString, required = false,
                                 default = nil)
  if valid_774903 != nil:
    section.add "X-Amz-Signature", valid_774903
  var valid_774904 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774904 = validateParameter(valid_774904, JString, required = false,
                                 default = nil)
  if valid_774904 != nil:
    section.add "X-Amz-SignedHeaders", valid_774904
  var valid_774905 = header.getOrDefault("X-Amz-Credential")
  valid_774905 = validateParameter(valid_774905, JString, required = false,
                                 default = nil)
  if valid_774905 != nil:
    section.add "X-Amz-Credential", valid_774905
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774906: Call_GetModifyDBCluster_774879; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modify a setting for a DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
  ## 
  let valid = call_774906.validator(path, query, header, formData, body)
  let scheme = call_774906.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774906.url(scheme.get, call_774906.host, call_774906.base,
                         call_774906.route, valid.getOrDefault("path"))
  result = hook(call_774906, url, valid)

proc call*(call_774907: Call_GetModifyDBCluster_774879;
          DBClusterIdentifier: string; PreferredMaintenanceWindow: string = "";
          DBClusterParameterGroupName: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          OptionGroupName: string = ""; MasterUserPassword: string = "";
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          VpcSecurityGroupIds: JsonNode = nil;
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          BackupRetentionPeriod: int = 0; NewDBClusterIdentifier: string = "";
          Action: string = "ModifyDBCluster"; EngineVersion: string = ""; Port: int = 0;
          PreferredBackupWindow: string = ""; Version: string = "2014-10-31";
          ApplyImmediately: bool = false): Recallable =
  ## getModifyDBCluster
  ## Modify a setting for a DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.</p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   DBClusterParameterGroupName: string
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to enable.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to disable.
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   NewDBClusterIdentifier: string
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   Action: string (required)
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless the ApplyImmediately parameter is set to true.</p> <p>For a list of valid engine versions, see <a>CreateDBInstance</a>, or call <a>DescribeDBEngineVersions</a>.</p>
  ##   Port: int
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter.</p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   Version: string (required)
  ##   ApplyImmediately: bool
  ##                   : <p>A value that specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is set to <code>false</code>, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values. If you set the <code>ApplyImmediately</code> parameter value to false, then changes to the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>Default: <code>false</code> </p>
  var query_774908 = newJObject()
  add(query_774908, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_774908, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_774908, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_774908, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_774908, "OptionGroupName", newJString(OptionGroupName))
  add(query_774908, "MasterUserPassword", newJString(MasterUserPassword))
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    query_774908.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                    CloudwatchLogsExportConfigurationEnableLogTypes
  if VpcSecurityGroupIds != nil:
    query_774908.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    query_774908.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                    CloudwatchLogsExportConfigurationDisableLogTypes
  add(query_774908, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_774908, "NewDBClusterIdentifier", newJString(NewDBClusterIdentifier))
  add(query_774908, "Action", newJString(Action))
  add(query_774908, "EngineVersion", newJString(EngineVersion))
  add(query_774908, "Port", newJInt(Port))
  add(query_774908, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_774908, "Version", newJString(Version))
  add(query_774908, "ApplyImmediately", newJBool(ApplyImmediately))
  result = call_774907.call(nil, query_774908, nil, nil, nil)

var getModifyDBCluster* = Call_GetModifyDBCluster_774879(
    name: "getModifyDBCluster", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=ModifyDBCluster", validator: validate_GetModifyDBCluster_774880,
    base: "/", url: url_GetModifyDBCluster_774881,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBClusterParameterGroup_774957 = ref object of OpenApiRestCall_772581
proc url_PostModifyDBClusterParameterGroup_774959(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostModifyDBClusterParameterGroup_774958(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774960 = query.getOrDefault("Action")
  valid_774960 = validateParameter(valid_774960, JString, required = true, default = newJString(
      "ModifyDBClusterParameterGroup"))
  if valid_774960 != nil:
    section.add "Action", valid_774960
  var valid_774961 = query.getOrDefault("Version")
  valid_774961 = validateParameter(valid_774961, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774961 != nil:
    section.add "Version", valid_774961
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774962 = header.getOrDefault("X-Amz-Date")
  valid_774962 = validateParameter(valid_774962, JString, required = false,
                                 default = nil)
  if valid_774962 != nil:
    section.add "X-Amz-Date", valid_774962
  var valid_774963 = header.getOrDefault("X-Amz-Security-Token")
  valid_774963 = validateParameter(valid_774963, JString, required = false,
                                 default = nil)
  if valid_774963 != nil:
    section.add "X-Amz-Security-Token", valid_774963
  var valid_774964 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774964 = validateParameter(valid_774964, JString, required = false,
                                 default = nil)
  if valid_774964 != nil:
    section.add "X-Amz-Content-Sha256", valid_774964
  var valid_774965 = header.getOrDefault("X-Amz-Algorithm")
  valid_774965 = validateParameter(valid_774965, JString, required = false,
                                 default = nil)
  if valid_774965 != nil:
    section.add "X-Amz-Algorithm", valid_774965
  var valid_774966 = header.getOrDefault("X-Amz-Signature")
  valid_774966 = validateParameter(valid_774966, JString, required = false,
                                 default = nil)
  if valid_774966 != nil:
    section.add "X-Amz-Signature", valid_774966
  var valid_774967 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774967 = validateParameter(valid_774967, JString, required = false,
                                 default = nil)
  if valid_774967 != nil:
    section.add "X-Amz-SignedHeaders", valid_774967
  var valid_774968 = header.getOrDefault("X-Amz-Credential")
  valid_774968 = validateParameter(valid_774968, JString, required = false,
                                 default = nil)
  if valid_774968 != nil:
    section.add "X-Amz-Credential", valid_774968
  result.add "header", section
  ## parameters in `formData` object:
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to modify.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Parameters` field"
  var valid_774969 = formData.getOrDefault("Parameters")
  valid_774969 = validateParameter(valid_774969, JArray, required = true, default = nil)
  if valid_774969 != nil:
    section.add "Parameters", valid_774969
  var valid_774970 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_774970 = validateParameter(valid_774970, JString, required = true,
                                 default = nil)
  if valid_774970 != nil:
    section.add "DBClusterParameterGroupName", valid_774970
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774971: Call_PostModifyDBClusterParameterGroup_774957;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_774971.validator(path, query, header, formData, body)
  let scheme = call_774971.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774971.url(scheme.get, call_774971.host, call_774971.base,
                         call_774971.route, valid.getOrDefault("path"))
  result = hook(call_774971, url, valid)

proc call*(call_774972: Call_PostModifyDBClusterParameterGroup_774957;
          Parameters: JsonNode; DBClusterParameterGroupName: string;
          Action: string = "ModifyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postModifyDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to modify.
  ##   Version: string (required)
  var query_774973 = newJObject()
  var formData_774974 = newJObject()
  if Parameters != nil:
    formData_774974.add "Parameters", Parameters
  add(query_774973, "Action", newJString(Action))
  add(formData_774974, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_774973, "Version", newJString(Version))
  result = call_774972.call(nil, query_774973, nil, formData_774974, nil)

var postModifyDBClusterParameterGroup* = Call_PostModifyDBClusterParameterGroup_774957(
    name: "postModifyDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterParameterGroup",
    validator: validate_PostModifyDBClusterParameterGroup_774958, base: "/",
    url: url_PostModifyDBClusterParameterGroup_774959,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBClusterParameterGroup_774940 = ref object of OpenApiRestCall_772581
proc url_GetModifyDBClusterParameterGroup_774942(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetModifyDBClusterParameterGroup_774941(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to modify.
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_774943 = query.getOrDefault("DBClusterParameterGroupName")
  valid_774943 = validateParameter(valid_774943, JString, required = true,
                                 default = nil)
  if valid_774943 != nil:
    section.add "DBClusterParameterGroupName", valid_774943
  var valid_774944 = query.getOrDefault("Parameters")
  valid_774944 = validateParameter(valid_774944, JArray, required = true, default = nil)
  if valid_774944 != nil:
    section.add "Parameters", valid_774944
  var valid_774945 = query.getOrDefault("Action")
  valid_774945 = validateParameter(valid_774945, JString, required = true, default = newJString(
      "ModifyDBClusterParameterGroup"))
  if valid_774945 != nil:
    section.add "Action", valid_774945
  var valid_774946 = query.getOrDefault("Version")
  valid_774946 = validateParameter(valid_774946, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774946 != nil:
    section.add "Version", valid_774946
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774947 = header.getOrDefault("X-Amz-Date")
  valid_774947 = validateParameter(valid_774947, JString, required = false,
                                 default = nil)
  if valid_774947 != nil:
    section.add "X-Amz-Date", valid_774947
  var valid_774948 = header.getOrDefault("X-Amz-Security-Token")
  valid_774948 = validateParameter(valid_774948, JString, required = false,
                                 default = nil)
  if valid_774948 != nil:
    section.add "X-Amz-Security-Token", valid_774948
  var valid_774949 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774949 = validateParameter(valid_774949, JString, required = false,
                                 default = nil)
  if valid_774949 != nil:
    section.add "X-Amz-Content-Sha256", valid_774949
  var valid_774950 = header.getOrDefault("X-Amz-Algorithm")
  valid_774950 = validateParameter(valid_774950, JString, required = false,
                                 default = nil)
  if valid_774950 != nil:
    section.add "X-Amz-Algorithm", valid_774950
  var valid_774951 = header.getOrDefault("X-Amz-Signature")
  valid_774951 = validateParameter(valid_774951, JString, required = false,
                                 default = nil)
  if valid_774951 != nil:
    section.add "X-Amz-Signature", valid_774951
  var valid_774952 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774952 = validateParameter(valid_774952, JString, required = false,
                                 default = nil)
  if valid_774952 != nil:
    section.add "X-Amz-SignedHeaders", valid_774952
  var valid_774953 = header.getOrDefault("X-Amz-Credential")
  valid_774953 = validateParameter(valid_774953, JString, required = false,
                                 default = nil)
  if valid_774953 != nil:
    section.add "X-Amz-Credential", valid_774953
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774954: Call_GetModifyDBClusterParameterGroup_774940;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_774954.validator(path, query, header, formData, body)
  let scheme = call_774954.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774954.url(scheme.get, call_774954.host, call_774954.base,
                         call_774954.route, valid.getOrDefault("path"))
  result = hook(call_774954, url, valid)

proc call*(call_774955: Call_GetModifyDBClusterParameterGroup_774940;
          DBClusterParameterGroupName: string; Parameters: JsonNode;
          Action: string = "ModifyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getModifyDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to modify.
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774956 = newJObject()
  add(query_774956, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if Parameters != nil:
    query_774956.add "Parameters", Parameters
  add(query_774956, "Action", newJString(Action))
  add(query_774956, "Version", newJString(Version))
  result = call_774955.call(nil, query_774956, nil, nil, nil)

var getModifyDBClusterParameterGroup* = Call_GetModifyDBClusterParameterGroup_774940(
    name: "getModifyDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterParameterGroup",
    validator: validate_GetModifyDBClusterParameterGroup_774941, base: "/",
    url: url_GetModifyDBClusterParameterGroup_774942,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBClusterSnapshotAttribute_774994 = ref object of OpenApiRestCall_772581
proc url_PostModifyDBClusterSnapshotAttribute_774996(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostModifyDBClusterSnapshotAttribute_774995(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <a>DescribeDBClusterSnapshotAttributes</a> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774997 = query.getOrDefault("Action")
  valid_774997 = validateParameter(valid_774997, JString, required = true, default = newJString(
      "ModifyDBClusterSnapshotAttribute"))
  if valid_774997 != nil:
    section.add "Action", valid_774997
  var valid_774998 = query.getOrDefault("Version")
  valid_774998 = validateParameter(valid_774998, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774998 != nil:
    section.add "Version", valid_774998
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774999 = header.getOrDefault("X-Amz-Date")
  valid_774999 = validateParameter(valid_774999, JString, required = false,
                                 default = nil)
  if valid_774999 != nil:
    section.add "X-Amz-Date", valid_774999
  var valid_775000 = header.getOrDefault("X-Amz-Security-Token")
  valid_775000 = validateParameter(valid_775000, JString, required = false,
                                 default = nil)
  if valid_775000 != nil:
    section.add "X-Amz-Security-Token", valid_775000
  var valid_775001 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775001 = validateParameter(valid_775001, JString, required = false,
                                 default = nil)
  if valid_775001 != nil:
    section.add "X-Amz-Content-Sha256", valid_775001
  var valid_775002 = header.getOrDefault("X-Amz-Algorithm")
  valid_775002 = validateParameter(valid_775002, JString, required = false,
                                 default = nil)
  if valid_775002 != nil:
    section.add "X-Amz-Algorithm", valid_775002
  var valid_775003 = header.getOrDefault("X-Amz-Signature")
  valid_775003 = validateParameter(valid_775003, JString, required = false,
                                 default = nil)
  if valid_775003 != nil:
    section.add "X-Amz-Signature", valid_775003
  var valid_775004 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775004 = validateParameter(valid_775004, JString, required = false,
                                 default = nil)
  if valid_775004 != nil:
    section.add "X-Amz-SignedHeaders", valid_775004
  var valid_775005 = header.getOrDefault("X-Amz-Credential")
  valid_775005 = validateParameter(valid_775005, JString, required = false,
                                 default = nil)
  if valid_775005 != nil:
    section.add "X-Amz-Credential", valid_775005
  result.add "header", section
  ## parameters in `formData` object:
  ##   AttributeName: JString (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AttributeName` field"
  var valid_775006 = formData.getOrDefault("AttributeName")
  valid_775006 = validateParameter(valid_775006, JString, required = true,
                                 default = nil)
  if valid_775006 != nil:
    section.add "AttributeName", valid_775006
  var valid_775007 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_775007 = validateParameter(valid_775007, JString, required = true,
                                 default = nil)
  if valid_775007 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_775007
  var valid_775008 = formData.getOrDefault("ValuesToRemove")
  valid_775008 = validateParameter(valid_775008, JArray, required = false,
                                 default = nil)
  if valid_775008 != nil:
    section.add "ValuesToRemove", valid_775008
  var valid_775009 = formData.getOrDefault("ValuesToAdd")
  valid_775009 = validateParameter(valid_775009, JArray, required = false,
                                 default = nil)
  if valid_775009 != nil:
    section.add "ValuesToAdd", valid_775009
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775010: Call_PostModifyDBClusterSnapshotAttribute_774994;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <a>DescribeDBClusterSnapshotAttributes</a> API action.</p>
  ## 
  let valid = call_775010.validator(path, query, header, formData, body)
  let scheme = call_775010.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775010.url(scheme.get, call_775010.host, call_775010.base,
                         call_775010.route, valid.getOrDefault("path"))
  result = hook(call_775010, url, valid)

proc call*(call_775011: Call_PostModifyDBClusterSnapshotAttribute_774994;
          AttributeName: string; DBClusterSnapshotIdentifier: string;
          Action: string = "ModifyDBClusterSnapshotAttribute";
          ValuesToRemove: JsonNode = nil; ValuesToAdd: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postModifyDBClusterSnapshotAttribute
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <a>DescribeDBClusterSnapshotAttributes</a> API action.</p>
  ##   AttributeName: string (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   Action: string (required)
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Version: string (required)
  var query_775012 = newJObject()
  var formData_775013 = newJObject()
  add(formData_775013, "AttributeName", newJString(AttributeName))
  add(formData_775013, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_775012, "Action", newJString(Action))
  if ValuesToRemove != nil:
    formData_775013.add "ValuesToRemove", ValuesToRemove
  if ValuesToAdd != nil:
    formData_775013.add "ValuesToAdd", ValuesToAdd
  add(query_775012, "Version", newJString(Version))
  result = call_775011.call(nil, query_775012, nil, formData_775013, nil)

var postModifyDBClusterSnapshotAttribute* = Call_PostModifyDBClusterSnapshotAttribute_774994(
    name: "postModifyDBClusterSnapshotAttribute", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterSnapshotAttribute",
    validator: validate_PostModifyDBClusterSnapshotAttribute_774995, base: "/",
    url: url_PostModifyDBClusterSnapshotAttribute_774996,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBClusterSnapshotAttribute_774975 = ref object of OpenApiRestCall_772581
proc url_GetModifyDBClusterSnapshotAttribute_774977(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetModifyDBClusterSnapshotAttribute_774976(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <a>DescribeDBClusterSnapshotAttributes</a> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AttributeName: JString (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Action: JString (required)
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `AttributeName` field"
  var valid_774978 = query.getOrDefault("AttributeName")
  valid_774978 = validateParameter(valid_774978, JString, required = true,
                                 default = nil)
  if valid_774978 != nil:
    section.add "AttributeName", valid_774978
  var valid_774979 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_774979 = validateParameter(valid_774979, JString, required = true,
                                 default = nil)
  if valid_774979 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_774979
  var valid_774980 = query.getOrDefault("ValuesToAdd")
  valid_774980 = validateParameter(valid_774980, JArray, required = false,
                                 default = nil)
  if valid_774980 != nil:
    section.add "ValuesToAdd", valid_774980
  var valid_774981 = query.getOrDefault("Action")
  valid_774981 = validateParameter(valid_774981, JString, required = true, default = newJString(
      "ModifyDBClusterSnapshotAttribute"))
  if valid_774981 != nil:
    section.add "Action", valid_774981
  var valid_774982 = query.getOrDefault("ValuesToRemove")
  valid_774982 = validateParameter(valid_774982, JArray, required = false,
                                 default = nil)
  if valid_774982 != nil:
    section.add "ValuesToRemove", valid_774982
  var valid_774983 = query.getOrDefault("Version")
  valid_774983 = validateParameter(valid_774983, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774983 != nil:
    section.add "Version", valid_774983
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774984 = header.getOrDefault("X-Amz-Date")
  valid_774984 = validateParameter(valid_774984, JString, required = false,
                                 default = nil)
  if valid_774984 != nil:
    section.add "X-Amz-Date", valid_774984
  var valid_774985 = header.getOrDefault("X-Amz-Security-Token")
  valid_774985 = validateParameter(valid_774985, JString, required = false,
                                 default = nil)
  if valid_774985 != nil:
    section.add "X-Amz-Security-Token", valid_774985
  var valid_774986 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774986 = validateParameter(valid_774986, JString, required = false,
                                 default = nil)
  if valid_774986 != nil:
    section.add "X-Amz-Content-Sha256", valid_774986
  var valid_774987 = header.getOrDefault("X-Amz-Algorithm")
  valid_774987 = validateParameter(valid_774987, JString, required = false,
                                 default = nil)
  if valid_774987 != nil:
    section.add "X-Amz-Algorithm", valid_774987
  var valid_774988 = header.getOrDefault("X-Amz-Signature")
  valid_774988 = validateParameter(valid_774988, JString, required = false,
                                 default = nil)
  if valid_774988 != nil:
    section.add "X-Amz-Signature", valid_774988
  var valid_774989 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774989 = validateParameter(valid_774989, JString, required = false,
                                 default = nil)
  if valid_774989 != nil:
    section.add "X-Amz-SignedHeaders", valid_774989
  var valid_774990 = header.getOrDefault("X-Amz-Credential")
  valid_774990 = validateParameter(valid_774990, JString, required = false,
                                 default = nil)
  if valid_774990 != nil:
    section.add "X-Amz-Credential", valid_774990
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774991: Call_GetModifyDBClusterSnapshotAttribute_774975;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <a>DescribeDBClusterSnapshotAttributes</a> API action.</p>
  ## 
  let valid = call_774991.validator(path, query, header, formData, body)
  let scheme = call_774991.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774991.url(scheme.get, call_774991.host, call_774991.base,
                         call_774991.route, valid.getOrDefault("path"))
  result = hook(call_774991, url, valid)

proc call*(call_774992: Call_GetModifyDBClusterSnapshotAttribute_774975;
          AttributeName: string; DBClusterSnapshotIdentifier: string;
          ValuesToAdd: JsonNode = nil;
          Action: string = "ModifyDBClusterSnapshotAttribute";
          ValuesToRemove: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBClusterSnapshotAttribute
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <a>DescribeDBClusterSnapshotAttributes</a> API action.</p>
  ##   AttributeName: string (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Action: string (required)
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   Version: string (required)
  var query_774993 = newJObject()
  add(query_774993, "AttributeName", newJString(AttributeName))
  add(query_774993, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  if ValuesToAdd != nil:
    query_774993.add "ValuesToAdd", ValuesToAdd
  add(query_774993, "Action", newJString(Action))
  if ValuesToRemove != nil:
    query_774993.add "ValuesToRemove", ValuesToRemove
  add(query_774993, "Version", newJString(Version))
  result = call_774992.call(nil, query_774993, nil, nil, nil)

var getModifyDBClusterSnapshotAttribute* = Call_GetModifyDBClusterSnapshotAttribute_774975(
    name: "getModifyDBClusterSnapshotAttribute", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterSnapshotAttribute",
    validator: validate_GetModifyDBClusterSnapshotAttribute_774976, base: "/",
    url: url_GetModifyDBClusterSnapshotAttribute_774977,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBInstance_775066 = ref object of OpenApiRestCall_772581
proc url_PostModifyDBInstance_775068(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostModifyDBInstance_775067(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <a>DescribeValidDBInstanceModifications</a> before you call <a>ModifyDBInstance</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775069 = query.getOrDefault("Action")
  valid_775069 = validateParameter(valid_775069, JString, required = true,
                                 default = newJString("ModifyDBInstance"))
  if valid_775069 != nil:
    section.add "Action", valid_775069
  var valid_775070 = query.getOrDefault("Version")
  valid_775070 = validateParameter(valid_775070, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775070 != nil:
    section.add "Version", valid_775070
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775071 = header.getOrDefault("X-Amz-Date")
  valid_775071 = validateParameter(valid_775071, JString, required = false,
                                 default = nil)
  if valid_775071 != nil:
    section.add "X-Amz-Date", valid_775071
  var valid_775072 = header.getOrDefault("X-Amz-Security-Token")
  valid_775072 = validateParameter(valid_775072, JString, required = false,
                                 default = nil)
  if valid_775072 != nil:
    section.add "X-Amz-Security-Token", valid_775072
  var valid_775073 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775073 = validateParameter(valid_775073, JString, required = false,
                                 default = nil)
  if valid_775073 != nil:
    section.add "X-Amz-Content-Sha256", valid_775073
  var valid_775074 = header.getOrDefault("X-Amz-Algorithm")
  valid_775074 = validateParameter(valid_775074, JString, required = false,
                                 default = nil)
  if valid_775074 != nil:
    section.add "X-Amz-Algorithm", valid_775074
  var valid_775075 = header.getOrDefault("X-Amz-Signature")
  valid_775075 = validateParameter(valid_775075, JString, required = false,
                                 default = nil)
  if valid_775075 != nil:
    section.add "X-Amz-Signature", valid_775075
  var valid_775076 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775076 = validateParameter(valid_775076, JString, required = false,
                                 default = nil)
  if valid_775076 != nil:
    section.add "X-Amz-SignedHeaders", valid_775076
  var valid_775077 = header.getOrDefault("X-Amz-Credential")
  valid_775077 = validateParameter(valid_775077, JString, required = false,
                                 default = nil)
  if valid_775077 != nil:
    section.add "X-Amz-Credential", valid_775077
  result.add "header", section
  ## parameters in `formData` object:
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to enable.
  ##   ApplyImmediately: JBool
  ##                   : <p>Specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance.</p> <p> If this parameter is set to <code>false</code>, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot.</p> <p>Default: <code>false</code> </p>
  ##   EnablePerformanceInsights: JBool
  ##                            : Not supported.
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   Iops: JInt
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the instance.</p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.</p> <p>Default: Uses existing setting</p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: Uses existing setting</p>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   DBSubnetGroupName: JString
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC.</p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you specify <code>true</code> for the <code>ApplyImmediately</code> parameter.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   MultiAZ: JBool
  ##          : Specifies if the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.
  ##   DBPortNumber: JInt
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> Default: <code>8182</code> </p>
  ##   PubliclyAccessible: JBool
  ##                     : This flag should no longer be used.
  ##   StorageType: JString
  ##              : Not supported.
  ##   Domain: JString
  ##         : Not supported.
  ##   LicenseModel: JString
  ##               : Not supported.
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   AllowMajorVersionUpgrade: JBool
  ##                           : <p>Indicates that major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: This parameter must be set to true when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : Not supported.
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   CopyTagsToSnapshot: JBool
  ##                     : True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   OptionGroupName: JString
  ##                  : <p> Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. The db instance will NOT be rebooted automatically and the parameter changes will NOT be applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   CACertificateIdentifier: JString
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   MasterUserPassword: JString
  ##                     : Not applicable.
  ##   NewDBInstanceIdentifier: JString
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot will occur immediately if you set <code>Apply Immediately</code> to true, or will occur during the next maintenance window if <code>Apply Immediately</code> to false. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to disable.
  ##   DomainIAMRoleName: JString
  ##                    : Not supported
  ##   AllocatedStorage: JInt
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Not applicable. Storage is managed by the DB Cluster.</p>
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which a Read Replica is promoted to the primary instance after a failure of the existing primary instance.</p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   DBInstanceClass: JString
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions.</p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is specified as <code>true</code> for this request.</p> <p>Default: Uses existing setting</p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>You can enable IAM database authentication for the following database engines</p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: <code>false</code> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled.</p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          :  Indicates that minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage will result if this parameter is set to <code>true</code> during the maintenance window, and a newer minor version is available, and Neptune has enabled auto patching for that engine version.
  ##   EngineVersion: JString
  ##                : <p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.</p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  section = newJObject()
  var valid_775078 = formData.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_775078 = validateParameter(valid_775078, JArray, required = false,
                                 default = nil)
  if valid_775078 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_775078
  var valid_775079 = formData.getOrDefault("ApplyImmediately")
  valid_775079 = validateParameter(valid_775079, JBool, required = false, default = nil)
  if valid_775079 != nil:
    section.add "ApplyImmediately", valid_775079
  var valid_775080 = formData.getOrDefault("EnablePerformanceInsights")
  valid_775080 = validateParameter(valid_775080, JBool, required = false, default = nil)
  if valid_775080 != nil:
    section.add "EnablePerformanceInsights", valid_775080
  var valid_775081 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_775081 = validateParameter(valid_775081, JArray, required = false,
                                 default = nil)
  if valid_775081 != nil:
    section.add "VpcSecurityGroupIds", valid_775081
  var valid_775082 = formData.getOrDefault("Iops")
  valid_775082 = validateParameter(valid_775082, JInt, required = false, default = nil)
  if valid_775082 != nil:
    section.add "Iops", valid_775082
  var valid_775083 = formData.getOrDefault("BackupRetentionPeriod")
  valid_775083 = validateParameter(valid_775083, JInt, required = false, default = nil)
  if valid_775083 != nil:
    section.add "BackupRetentionPeriod", valid_775083
  var valid_775084 = formData.getOrDefault("TdeCredentialArn")
  valid_775084 = validateParameter(valid_775084, JString, required = false,
                                 default = nil)
  if valid_775084 != nil:
    section.add "TdeCredentialArn", valid_775084
  var valid_775085 = formData.getOrDefault("DBSubnetGroupName")
  valid_775085 = validateParameter(valid_775085, JString, required = false,
                                 default = nil)
  if valid_775085 != nil:
    section.add "DBSubnetGroupName", valid_775085
  var valid_775086 = formData.getOrDefault("MultiAZ")
  valid_775086 = validateParameter(valid_775086, JBool, required = false, default = nil)
  if valid_775086 != nil:
    section.add "MultiAZ", valid_775086
  var valid_775087 = formData.getOrDefault("DBPortNumber")
  valid_775087 = validateParameter(valid_775087, JInt, required = false, default = nil)
  if valid_775087 != nil:
    section.add "DBPortNumber", valid_775087
  var valid_775088 = formData.getOrDefault("PubliclyAccessible")
  valid_775088 = validateParameter(valid_775088, JBool, required = false, default = nil)
  if valid_775088 != nil:
    section.add "PubliclyAccessible", valid_775088
  var valid_775089 = formData.getOrDefault("StorageType")
  valid_775089 = validateParameter(valid_775089, JString, required = false,
                                 default = nil)
  if valid_775089 != nil:
    section.add "StorageType", valid_775089
  var valid_775090 = formData.getOrDefault("Domain")
  valid_775090 = validateParameter(valid_775090, JString, required = false,
                                 default = nil)
  if valid_775090 != nil:
    section.add "Domain", valid_775090
  var valid_775091 = formData.getOrDefault("LicenseModel")
  valid_775091 = validateParameter(valid_775091, JString, required = false,
                                 default = nil)
  if valid_775091 != nil:
    section.add "LicenseModel", valid_775091
  var valid_775092 = formData.getOrDefault("MonitoringRoleArn")
  valid_775092 = validateParameter(valid_775092, JString, required = false,
                                 default = nil)
  if valid_775092 != nil:
    section.add "MonitoringRoleArn", valid_775092
  var valid_775093 = formData.getOrDefault("AllowMajorVersionUpgrade")
  valid_775093 = validateParameter(valid_775093, JBool, required = false, default = nil)
  if valid_775093 != nil:
    section.add "AllowMajorVersionUpgrade", valid_775093
  var valid_775094 = formData.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_775094 = validateParameter(valid_775094, JString, required = false,
                                 default = nil)
  if valid_775094 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_775094
  var valid_775095 = formData.getOrDefault("DBSecurityGroups")
  valid_775095 = validateParameter(valid_775095, JArray, required = false,
                                 default = nil)
  if valid_775095 != nil:
    section.add "DBSecurityGroups", valid_775095
  var valid_775096 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_775096 = validateParameter(valid_775096, JBool, required = false, default = nil)
  if valid_775096 != nil:
    section.add "CopyTagsToSnapshot", valid_775096
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_775097 = formData.getOrDefault("DBInstanceIdentifier")
  valid_775097 = validateParameter(valid_775097, JString, required = true,
                                 default = nil)
  if valid_775097 != nil:
    section.add "DBInstanceIdentifier", valid_775097
  var valid_775098 = formData.getOrDefault("OptionGroupName")
  valid_775098 = validateParameter(valid_775098, JString, required = false,
                                 default = nil)
  if valid_775098 != nil:
    section.add "OptionGroupName", valid_775098
  var valid_775099 = formData.getOrDefault("DBParameterGroupName")
  valid_775099 = validateParameter(valid_775099, JString, required = false,
                                 default = nil)
  if valid_775099 != nil:
    section.add "DBParameterGroupName", valid_775099
  var valid_775100 = formData.getOrDefault("CACertificateIdentifier")
  valid_775100 = validateParameter(valid_775100, JString, required = false,
                                 default = nil)
  if valid_775100 != nil:
    section.add "CACertificateIdentifier", valid_775100
  var valid_775101 = formData.getOrDefault("MasterUserPassword")
  valid_775101 = validateParameter(valid_775101, JString, required = false,
                                 default = nil)
  if valid_775101 != nil:
    section.add "MasterUserPassword", valid_775101
  var valid_775102 = formData.getOrDefault("NewDBInstanceIdentifier")
  valid_775102 = validateParameter(valid_775102, JString, required = false,
                                 default = nil)
  if valid_775102 != nil:
    section.add "NewDBInstanceIdentifier", valid_775102
  var valid_775103 = formData.getOrDefault("TdeCredentialPassword")
  valid_775103 = validateParameter(valid_775103, JString, required = false,
                                 default = nil)
  if valid_775103 != nil:
    section.add "TdeCredentialPassword", valid_775103
  var valid_775104 = formData.getOrDefault("MonitoringInterval")
  valid_775104 = validateParameter(valid_775104, JInt, required = false, default = nil)
  if valid_775104 != nil:
    section.add "MonitoringInterval", valid_775104
  var valid_775105 = formData.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_775105 = validateParameter(valid_775105, JArray, required = false,
                                 default = nil)
  if valid_775105 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_775105
  var valid_775106 = formData.getOrDefault("DomainIAMRoleName")
  valid_775106 = validateParameter(valid_775106, JString, required = false,
                                 default = nil)
  if valid_775106 != nil:
    section.add "DomainIAMRoleName", valid_775106
  var valid_775107 = formData.getOrDefault("AllocatedStorage")
  valid_775107 = validateParameter(valid_775107, JInt, required = false, default = nil)
  if valid_775107 != nil:
    section.add "AllocatedStorage", valid_775107
  var valid_775108 = formData.getOrDefault("PromotionTier")
  valid_775108 = validateParameter(valid_775108, JInt, required = false, default = nil)
  if valid_775108 != nil:
    section.add "PromotionTier", valid_775108
  var valid_775109 = formData.getOrDefault("DBInstanceClass")
  valid_775109 = validateParameter(valid_775109, JString, required = false,
                                 default = nil)
  if valid_775109 != nil:
    section.add "DBInstanceClass", valid_775109
  var valid_775110 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_775110 = validateParameter(valid_775110, JBool, required = false, default = nil)
  if valid_775110 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_775110
  var valid_775111 = formData.getOrDefault("PreferredBackupWindow")
  valid_775111 = validateParameter(valid_775111, JString, required = false,
                                 default = nil)
  if valid_775111 != nil:
    section.add "PreferredBackupWindow", valid_775111
  var valid_775112 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_775112 = validateParameter(valid_775112, JBool, required = false, default = nil)
  if valid_775112 != nil:
    section.add "AutoMinorVersionUpgrade", valid_775112
  var valid_775113 = formData.getOrDefault("EngineVersion")
  valid_775113 = validateParameter(valid_775113, JString, required = false,
                                 default = nil)
  if valid_775113 != nil:
    section.add "EngineVersion", valid_775113
  var valid_775114 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_775114 = validateParameter(valid_775114, JString, required = false,
                                 default = nil)
  if valid_775114 != nil:
    section.add "PreferredMaintenanceWindow", valid_775114
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775115: Call_PostModifyDBInstance_775066; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <a>DescribeValidDBInstanceModifications</a> before you call <a>ModifyDBInstance</a>.
  ## 
  let valid = call_775115.validator(path, query, header, formData, body)
  let scheme = call_775115.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775115.url(scheme.get, call_775115.host, call_775115.base,
                         call_775115.route, valid.getOrDefault("path"))
  result = hook(call_775115, url, valid)

proc call*(call_775116: Call_PostModifyDBInstance_775066;
          DBInstanceIdentifier: string;
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          ApplyImmediately: bool = false; EnablePerformanceInsights: bool = false;
          VpcSecurityGroupIds: JsonNode = nil; Iops: int = 0;
          BackupRetentionPeriod: int = 0; TdeCredentialArn: string = "";
          DBSubnetGroupName: string = ""; MultiAZ: bool = false; DBPortNumber: int = 0;
          PubliclyAccessible: bool = false; StorageType: string = "";
          Domain: string = ""; LicenseModel: string = "";
          MonitoringRoleArn: string = ""; AllowMajorVersionUpgrade: bool = false;
          PerformanceInsightsKMSKeyId: string = "";
          DBSecurityGroups: JsonNode = nil; CopyTagsToSnapshot: bool = false;
          OptionGroupName: string = ""; DBParameterGroupName: string = "";
          CACertificateIdentifier: string = ""; MasterUserPassword: string = "";
          NewDBInstanceIdentifier: string = ""; TdeCredentialPassword: string = "";
          MonitoringInterval: int = 0;
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          DomainIAMRoleName: string = ""; Action: string = "ModifyDBInstance";
          AllocatedStorage: int = 0; PromotionTier: int = 0;
          DBInstanceClass: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          PreferredBackupWindow: string = ""; AutoMinorVersionUpgrade: bool = false;
          EngineVersion: string = ""; Version: string = "2014-10-31";
          PreferredMaintenanceWindow: string = ""): Recallable =
  ## postModifyDBInstance
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <a>DescribeValidDBInstanceModifications</a> before you call <a>ModifyDBInstance</a>.
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to enable.
  ##   ApplyImmediately: bool
  ##                   : <p>Specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance.</p> <p> If this parameter is set to <code>false</code>, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot.</p> <p>Default: <code>false</code> </p>
  ##   EnablePerformanceInsights: bool
  ##                            : Not supported.
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   Iops: int
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the instance.</p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.</p> <p>Default: Uses existing setting</p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: Uses existing setting</p>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   DBSubnetGroupName: string
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC.</p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you specify <code>true</code> for the <code>ApplyImmediately</code> parameter.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   MultiAZ: bool
  ##          : Specifies if the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.
  ##   DBPortNumber: int
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> Default: <code>8182</code> </p>
  ##   PubliclyAccessible: bool
  ##                     : This flag should no longer be used.
  ##   StorageType: string
  ##              : Not supported.
  ##   Domain: string
  ##         : Not supported.
  ##   LicenseModel: string
  ##               : Not supported.
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   AllowMajorVersionUpgrade: bool
  ##                           : <p>Indicates that major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: This parameter must be set to true when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : Not supported.
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   CopyTagsToSnapshot: bool
  ##                     : True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   OptionGroupName: string
  ##                  : <p> Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. The db instance will NOT be rebooted automatically and the parameter changes will NOT be applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   CACertificateIdentifier: string
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   MasterUserPassword: string
  ##                     : Not applicable.
  ##   NewDBInstanceIdentifier: string
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot will occur immediately if you set <code>Apply Immediately</code> to true, or will occur during the next maintenance window if <code>Apply Immediately</code> to false. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to disable.
  ##   DomainIAMRoleName: string
  ##                    : Not supported
  ##   Action: string (required)
  ##   AllocatedStorage: int
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Not applicable. Storage is managed by the DB Cluster.</p>
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which a Read Replica is promoted to the primary instance after a failure of the existing primary instance.</p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   DBInstanceClass: string
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions.</p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is specified as <code>true</code> for this request.</p> <p>Default: Uses existing setting</p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>You can enable IAM database authentication for the following database engines</p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: <code>false</code> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled.</p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   AutoMinorVersionUpgrade: bool
  ##                          :  Indicates that minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage will result if this parameter is set to <code>true</code> during the maintenance window, and a newer minor version is available, and Neptune has enabled auto patching for that engine version.
  ##   EngineVersion: string
  ##                : <p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.</p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p>
  ##   Version: string (required)
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  var query_775117 = newJObject()
  var formData_775118 = newJObject()
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    formData_775118.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                       CloudwatchLogsExportConfigurationEnableLogTypes
  add(formData_775118, "ApplyImmediately", newJBool(ApplyImmediately))
  add(formData_775118, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  if VpcSecurityGroupIds != nil:
    formData_775118.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_775118, "Iops", newJInt(Iops))
  add(formData_775118, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_775118, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(formData_775118, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_775118, "MultiAZ", newJBool(MultiAZ))
  add(formData_775118, "DBPortNumber", newJInt(DBPortNumber))
  add(formData_775118, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_775118, "StorageType", newJString(StorageType))
  add(formData_775118, "Domain", newJString(Domain))
  add(formData_775118, "LicenseModel", newJString(LicenseModel))
  add(formData_775118, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(formData_775118, "AllowMajorVersionUpgrade",
      newJBool(AllowMajorVersionUpgrade))
  add(formData_775118, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  if DBSecurityGroups != nil:
    formData_775118.add "DBSecurityGroups", DBSecurityGroups
  add(formData_775118, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_775118, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_775118, "OptionGroupName", newJString(OptionGroupName))
  add(formData_775118, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_775118, "CACertificateIdentifier",
      newJString(CACertificateIdentifier))
  add(formData_775118, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_775118, "NewDBInstanceIdentifier",
      newJString(NewDBInstanceIdentifier))
  add(formData_775118, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(formData_775118, "MonitoringInterval", newJInt(MonitoringInterval))
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    formData_775118.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                       CloudwatchLogsExportConfigurationDisableLogTypes
  add(formData_775118, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(query_775117, "Action", newJString(Action))
  add(formData_775118, "AllocatedStorage", newJInt(AllocatedStorage))
  add(formData_775118, "PromotionTier", newJInt(PromotionTier))
  add(formData_775118, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_775118, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_775118, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_775118, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_775118, "EngineVersion", newJString(EngineVersion))
  add(query_775117, "Version", newJString(Version))
  add(formData_775118, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  result = call_775116.call(nil, query_775117, nil, formData_775118, nil)

var postModifyDBInstance* = Call_PostModifyDBInstance_775066(
    name: "postModifyDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBInstance",
    validator: validate_PostModifyDBInstance_775067, base: "/",
    url: url_PostModifyDBInstance_775068, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBInstance_775014 = ref object of OpenApiRestCall_772581
proc url_GetModifyDBInstance_775016(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetModifyDBInstance_775015(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <a>DescribeValidDBInstanceModifications</a> before you call <a>ModifyDBInstance</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which a Read Replica is promoted to the primary instance after a failure of the existing primary instance.</p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   AllocatedStorage: JInt
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Not applicable. Storage is managed by the DB Cluster.</p>
  ##   StorageType: JString
  ##              : Not supported.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>You can enable IAM database authentication for the following database engines</p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: <code>false</code> </p>
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : Not applicable.
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   MultiAZ: JBool
  ##          : Specifies if the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DomainIAMRoleName: JString
  ##                    : Not supported
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: Uses existing setting</p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
  ##   NewDBInstanceIdentifier: JString
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot will occur immediately if you set <code>Apply Immediately</code> to true, or will occur during the next maintenance window if <code>Apply Immediately</code> to false. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC.</p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you specify <code>true</code> for the <code>ApplyImmediately</code> parameter.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   Domain: JString
  ##         : Not supported.
  ##   EngineVersion: JString
  ##                : <p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.</p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p>
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled.</p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   CACertificateIdentifier: JString
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  ##   OptionGroupName: JString
  ##                  : <p> Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   Iops: JInt
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the instance.</p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.</p> <p>Default: Uses existing setting</p>
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to enable.
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to disable.
  ##   LicenseModel: JString
  ##               : Not supported.
  ##   DBPortNumber: JInt
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> Default: <code>8182</code> </p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. The db instance will NOT be rebooted automatically and the parameter changes will NOT be applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   DBInstanceClass: JString
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions.</p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is specified as <code>true</code> for this request.</p> <p>Default: Uses existing setting</p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : Not supported.
  ##   AllowMajorVersionUpgrade: JBool
  ##                           : <p>Indicates that major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: This parameter must be set to true when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
  ##   Action: JString (required)
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PubliclyAccessible: JBool
  ##                     : This flag should no longer be used.
  ##   AutoMinorVersionUpgrade: JBool
  ##                          :  Indicates that minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage will result if this parameter is set to <code>true</code> during the maintenance window, and a newer minor version is available, and Neptune has enabled auto patching for that engine version.
  ##   EnablePerformanceInsights: JBool
  ##                            : Not supported.
  ##   Version: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : <p>Specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance.</p> <p> If this parameter is set to <code>false</code>, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot.</p> <p>Default: <code>false</code> </p>
  section = newJObject()
  var valid_775017 = query.getOrDefault("MonitoringInterval")
  valid_775017 = validateParameter(valid_775017, JInt, required = false, default = nil)
  if valid_775017 != nil:
    section.add "MonitoringInterval", valid_775017
  var valid_775018 = query.getOrDefault("PromotionTier")
  valid_775018 = validateParameter(valid_775018, JInt, required = false, default = nil)
  if valid_775018 != nil:
    section.add "PromotionTier", valid_775018
  var valid_775019 = query.getOrDefault("AllocatedStorage")
  valid_775019 = validateParameter(valid_775019, JInt, required = false, default = nil)
  if valid_775019 != nil:
    section.add "AllocatedStorage", valid_775019
  var valid_775020 = query.getOrDefault("StorageType")
  valid_775020 = validateParameter(valid_775020, JString, required = false,
                                 default = nil)
  if valid_775020 != nil:
    section.add "StorageType", valid_775020
  var valid_775021 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_775021 = validateParameter(valid_775021, JBool, required = false, default = nil)
  if valid_775021 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_775021
  var valid_775022 = query.getOrDefault("DBSecurityGroups")
  valid_775022 = validateParameter(valid_775022, JArray, required = false,
                                 default = nil)
  if valid_775022 != nil:
    section.add "DBSecurityGroups", valid_775022
  var valid_775023 = query.getOrDefault("MasterUserPassword")
  valid_775023 = validateParameter(valid_775023, JString, required = false,
                                 default = nil)
  if valid_775023 != nil:
    section.add "MasterUserPassword", valid_775023
  var valid_775024 = query.getOrDefault("MonitoringRoleArn")
  valid_775024 = validateParameter(valid_775024, JString, required = false,
                                 default = nil)
  if valid_775024 != nil:
    section.add "MonitoringRoleArn", valid_775024
  var valid_775025 = query.getOrDefault("MultiAZ")
  valid_775025 = validateParameter(valid_775025, JBool, required = false, default = nil)
  if valid_775025 != nil:
    section.add "MultiAZ", valid_775025
  var valid_775026 = query.getOrDefault("TdeCredentialPassword")
  valid_775026 = validateParameter(valid_775026, JString, required = false,
                                 default = nil)
  if valid_775026 != nil:
    section.add "TdeCredentialPassword", valid_775026
  var valid_775027 = query.getOrDefault("DomainIAMRoleName")
  valid_775027 = validateParameter(valid_775027, JString, required = false,
                                 default = nil)
  if valid_775027 != nil:
    section.add "DomainIAMRoleName", valid_775027
  var valid_775028 = query.getOrDefault("BackupRetentionPeriod")
  valid_775028 = validateParameter(valid_775028, JInt, required = false, default = nil)
  if valid_775028 != nil:
    section.add "BackupRetentionPeriod", valid_775028
  var valid_775029 = query.getOrDefault("CopyTagsToSnapshot")
  valid_775029 = validateParameter(valid_775029, JBool, required = false, default = nil)
  if valid_775029 != nil:
    section.add "CopyTagsToSnapshot", valid_775029
  var valid_775030 = query.getOrDefault("NewDBInstanceIdentifier")
  valid_775030 = validateParameter(valid_775030, JString, required = false,
                                 default = nil)
  if valid_775030 != nil:
    section.add "NewDBInstanceIdentifier", valid_775030
  var valid_775031 = query.getOrDefault("DBSubnetGroupName")
  valid_775031 = validateParameter(valid_775031, JString, required = false,
                                 default = nil)
  if valid_775031 != nil:
    section.add "DBSubnetGroupName", valid_775031
  var valid_775032 = query.getOrDefault("Domain")
  valid_775032 = validateParameter(valid_775032, JString, required = false,
                                 default = nil)
  if valid_775032 != nil:
    section.add "Domain", valid_775032
  var valid_775033 = query.getOrDefault("EngineVersion")
  valid_775033 = validateParameter(valid_775033, JString, required = false,
                                 default = nil)
  if valid_775033 != nil:
    section.add "EngineVersion", valid_775033
  var valid_775034 = query.getOrDefault("PreferredBackupWindow")
  valid_775034 = validateParameter(valid_775034, JString, required = false,
                                 default = nil)
  if valid_775034 != nil:
    section.add "PreferredBackupWindow", valid_775034
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_775035 = query.getOrDefault("DBInstanceIdentifier")
  valid_775035 = validateParameter(valid_775035, JString, required = true,
                                 default = nil)
  if valid_775035 != nil:
    section.add "DBInstanceIdentifier", valid_775035
  var valid_775036 = query.getOrDefault("CACertificateIdentifier")
  valid_775036 = validateParameter(valid_775036, JString, required = false,
                                 default = nil)
  if valid_775036 != nil:
    section.add "CACertificateIdentifier", valid_775036
  var valid_775037 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_775037 = validateParameter(valid_775037, JString, required = false,
                                 default = nil)
  if valid_775037 != nil:
    section.add "PreferredMaintenanceWindow", valid_775037
  var valid_775038 = query.getOrDefault("OptionGroupName")
  valid_775038 = validateParameter(valid_775038, JString, required = false,
                                 default = nil)
  if valid_775038 != nil:
    section.add "OptionGroupName", valid_775038
  var valid_775039 = query.getOrDefault("Iops")
  valid_775039 = validateParameter(valid_775039, JInt, required = false, default = nil)
  if valid_775039 != nil:
    section.add "Iops", valid_775039
  var valid_775040 = query.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_775040 = validateParameter(valid_775040, JArray, required = false,
                                 default = nil)
  if valid_775040 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_775040
  var valid_775041 = query.getOrDefault("VpcSecurityGroupIds")
  valid_775041 = validateParameter(valid_775041, JArray, required = false,
                                 default = nil)
  if valid_775041 != nil:
    section.add "VpcSecurityGroupIds", valid_775041
  var valid_775042 = query.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_775042 = validateParameter(valid_775042, JArray, required = false,
                                 default = nil)
  if valid_775042 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_775042
  var valid_775043 = query.getOrDefault("LicenseModel")
  valid_775043 = validateParameter(valid_775043, JString, required = false,
                                 default = nil)
  if valid_775043 != nil:
    section.add "LicenseModel", valid_775043
  var valid_775044 = query.getOrDefault("DBPortNumber")
  valid_775044 = validateParameter(valid_775044, JInt, required = false, default = nil)
  if valid_775044 != nil:
    section.add "DBPortNumber", valid_775044
  var valid_775045 = query.getOrDefault("DBParameterGroupName")
  valid_775045 = validateParameter(valid_775045, JString, required = false,
                                 default = nil)
  if valid_775045 != nil:
    section.add "DBParameterGroupName", valid_775045
  var valid_775046 = query.getOrDefault("DBInstanceClass")
  valid_775046 = validateParameter(valid_775046, JString, required = false,
                                 default = nil)
  if valid_775046 != nil:
    section.add "DBInstanceClass", valid_775046
  var valid_775047 = query.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_775047 = validateParameter(valid_775047, JString, required = false,
                                 default = nil)
  if valid_775047 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_775047
  var valid_775048 = query.getOrDefault("AllowMajorVersionUpgrade")
  valid_775048 = validateParameter(valid_775048, JBool, required = false, default = nil)
  if valid_775048 != nil:
    section.add "AllowMajorVersionUpgrade", valid_775048
  var valid_775049 = query.getOrDefault("Action")
  valid_775049 = validateParameter(valid_775049, JString, required = true,
                                 default = newJString("ModifyDBInstance"))
  if valid_775049 != nil:
    section.add "Action", valid_775049
  var valid_775050 = query.getOrDefault("TdeCredentialArn")
  valid_775050 = validateParameter(valid_775050, JString, required = false,
                                 default = nil)
  if valid_775050 != nil:
    section.add "TdeCredentialArn", valid_775050
  var valid_775051 = query.getOrDefault("PubliclyAccessible")
  valid_775051 = validateParameter(valid_775051, JBool, required = false, default = nil)
  if valid_775051 != nil:
    section.add "PubliclyAccessible", valid_775051
  var valid_775052 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_775052 = validateParameter(valid_775052, JBool, required = false, default = nil)
  if valid_775052 != nil:
    section.add "AutoMinorVersionUpgrade", valid_775052
  var valid_775053 = query.getOrDefault("EnablePerformanceInsights")
  valid_775053 = validateParameter(valid_775053, JBool, required = false, default = nil)
  if valid_775053 != nil:
    section.add "EnablePerformanceInsights", valid_775053
  var valid_775054 = query.getOrDefault("Version")
  valid_775054 = validateParameter(valid_775054, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775054 != nil:
    section.add "Version", valid_775054
  var valid_775055 = query.getOrDefault("ApplyImmediately")
  valid_775055 = validateParameter(valid_775055, JBool, required = false, default = nil)
  if valid_775055 != nil:
    section.add "ApplyImmediately", valid_775055
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775056 = header.getOrDefault("X-Amz-Date")
  valid_775056 = validateParameter(valid_775056, JString, required = false,
                                 default = nil)
  if valid_775056 != nil:
    section.add "X-Amz-Date", valid_775056
  var valid_775057 = header.getOrDefault("X-Amz-Security-Token")
  valid_775057 = validateParameter(valid_775057, JString, required = false,
                                 default = nil)
  if valid_775057 != nil:
    section.add "X-Amz-Security-Token", valid_775057
  var valid_775058 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775058 = validateParameter(valid_775058, JString, required = false,
                                 default = nil)
  if valid_775058 != nil:
    section.add "X-Amz-Content-Sha256", valid_775058
  var valid_775059 = header.getOrDefault("X-Amz-Algorithm")
  valid_775059 = validateParameter(valid_775059, JString, required = false,
                                 default = nil)
  if valid_775059 != nil:
    section.add "X-Amz-Algorithm", valid_775059
  var valid_775060 = header.getOrDefault("X-Amz-Signature")
  valid_775060 = validateParameter(valid_775060, JString, required = false,
                                 default = nil)
  if valid_775060 != nil:
    section.add "X-Amz-Signature", valid_775060
  var valid_775061 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775061 = validateParameter(valid_775061, JString, required = false,
                                 default = nil)
  if valid_775061 != nil:
    section.add "X-Amz-SignedHeaders", valid_775061
  var valid_775062 = header.getOrDefault("X-Amz-Credential")
  valid_775062 = validateParameter(valid_775062, JString, required = false,
                                 default = nil)
  if valid_775062 != nil:
    section.add "X-Amz-Credential", valid_775062
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775063: Call_GetModifyDBInstance_775014; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <a>DescribeValidDBInstanceModifications</a> before you call <a>ModifyDBInstance</a>.
  ## 
  let valid = call_775063.validator(path, query, header, formData, body)
  let scheme = call_775063.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775063.url(scheme.get, call_775063.host, call_775063.base,
                         call_775063.route, valid.getOrDefault("path"))
  result = hook(call_775063, url, valid)

proc call*(call_775064: Call_GetModifyDBInstance_775014;
          DBInstanceIdentifier: string; MonitoringInterval: int = 0;
          PromotionTier: int = 0; AllocatedStorage: int = 0; StorageType: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          DBSecurityGroups: JsonNode = nil; MasterUserPassword: string = "";
          MonitoringRoleArn: string = ""; MultiAZ: bool = false;
          TdeCredentialPassword: string = ""; DomainIAMRoleName: string = "";
          BackupRetentionPeriod: int = 0; CopyTagsToSnapshot: bool = false;
          NewDBInstanceIdentifier: string = ""; DBSubnetGroupName: string = "";
          Domain: string = ""; EngineVersion: string = "";
          PreferredBackupWindow: string = ""; CACertificateIdentifier: string = "";
          PreferredMaintenanceWindow: string = ""; OptionGroupName: string = "";
          Iops: int = 0;
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          VpcSecurityGroupIds: JsonNode = nil;
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          LicenseModel: string = ""; DBPortNumber: int = 0;
          DBParameterGroupName: string = ""; DBInstanceClass: string = "";
          PerformanceInsightsKMSKeyId: string = "";
          AllowMajorVersionUpgrade: bool = false;
          Action: string = "ModifyDBInstance"; TdeCredentialArn: string = "";
          PubliclyAccessible: bool = false; AutoMinorVersionUpgrade: bool = false;
          EnablePerformanceInsights: bool = false; Version: string = "2014-10-31";
          ApplyImmediately: bool = false): Recallable =
  ## getModifyDBInstance
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <a>DescribeValidDBInstanceModifications</a> before you call <a>ModifyDBInstance</a>.
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which a Read Replica is promoted to the primary instance after a failure of the existing primary instance.</p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   AllocatedStorage: int
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Not applicable. Storage is managed by the DB Cluster.</p>
  ##   StorageType: string
  ##              : Not supported.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>You can enable IAM database authentication for the following database engines</p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: <code>false</code> </p>
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : Not applicable.
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   MultiAZ: bool
  ##          : Specifies if the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DomainIAMRoleName: string
  ##                    : Not supported
  ##   BackupRetentionPeriod: int
  ##                        : <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: Uses existing setting</p>
  ##   CopyTagsToSnapshot: bool
  ##                     : True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
  ##   NewDBInstanceIdentifier: string
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot will occur immediately if you set <code>Apply Immediately</code> to true, or will occur during the next maintenance window if <code>Apply Immediately</code> to false. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   DBSubnetGroupName: string
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC.</p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you specify <code>true</code> for the <code>ApplyImmediately</code> parameter.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   Domain: string
  ##         : Not supported.
  ##   EngineVersion: string
  ##                : <p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.</p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p>
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled.</p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   CACertificateIdentifier: string
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  ##   OptionGroupName: string
  ##                  : <p> Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   Iops: int
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the instance.</p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.</p> <p>Default: Uses existing setting</p>
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to enable.
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to disable.
  ##   LicenseModel: string
  ##               : Not supported.
  ##   DBPortNumber: int
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> Default: <code>8182</code> </p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. The db instance will NOT be rebooted automatically and the parameter changes will NOT be applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   DBInstanceClass: string
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions.</p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is specified as <code>true</code> for this request.</p> <p>Default: Uses existing setting</p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : Not supported.
  ##   AllowMajorVersionUpgrade: bool
  ##                           : <p>Indicates that major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: This parameter must be set to true when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
  ##   Action: string (required)
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PubliclyAccessible: bool
  ##                     : This flag should no longer be used.
  ##   AutoMinorVersionUpgrade: bool
  ##                          :  Indicates that minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage will result if this parameter is set to <code>true</code> during the maintenance window, and a newer minor version is available, and Neptune has enabled auto patching for that engine version.
  ##   EnablePerformanceInsights: bool
  ##                            : Not supported.
  ##   Version: string (required)
  ##   ApplyImmediately: bool
  ##                   : <p>Specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance.</p> <p> If this parameter is set to <code>false</code>, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot.</p> <p>Default: <code>false</code> </p>
  var query_775065 = newJObject()
  add(query_775065, "MonitoringInterval", newJInt(MonitoringInterval))
  add(query_775065, "PromotionTier", newJInt(PromotionTier))
  add(query_775065, "AllocatedStorage", newJInt(AllocatedStorage))
  add(query_775065, "StorageType", newJString(StorageType))
  add(query_775065, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if DBSecurityGroups != nil:
    query_775065.add "DBSecurityGroups", DBSecurityGroups
  add(query_775065, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_775065, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(query_775065, "MultiAZ", newJBool(MultiAZ))
  add(query_775065, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(query_775065, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(query_775065, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_775065, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_775065, "NewDBInstanceIdentifier", newJString(NewDBInstanceIdentifier))
  add(query_775065, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_775065, "Domain", newJString(Domain))
  add(query_775065, "EngineVersion", newJString(EngineVersion))
  add(query_775065, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_775065, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_775065, "CACertificateIdentifier", newJString(CACertificateIdentifier))
  add(query_775065, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_775065, "OptionGroupName", newJString(OptionGroupName))
  add(query_775065, "Iops", newJInt(Iops))
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    query_775065.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                    CloudwatchLogsExportConfigurationEnableLogTypes
  if VpcSecurityGroupIds != nil:
    query_775065.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    query_775065.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                    CloudwatchLogsExportConfigurationDisableLogTypes
  add(query_775065, "LicenseModel", newJString(LicenseModel))
  add(query_775065, "DBPortNumber", newJInt(DBPortNumber))
  add(query_775065, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_775065, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_775065, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(query_775065, "AllowMajorVersionUpgrade", newJBool(AllowMajorVersionUpgrade))
  add(query_775065, "Action", newJString(Action))
  add(query_775065, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(query_775065, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_775065, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_775065, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(query_775065, "Version", newJString(Version))
  add(query_775065, "ApplyImmediately", newJBool(ApplyImmediately))
  result = call_775064.call(nil, query_775065, nil, nil, nil)

var getModifyDBInstance* = Call_GetModifyDBInstance_775014(
    name: "getModifyDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBInstance",
    validator: validate_GetModifyDBInstance_775015, base: "/",
    url: url_GetModifyDBInstance_775016, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBParameterGroup_775136 = ref object of OpenApiRestCall_772581
proc url_PostModifyDBParameterGroup_775138(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostModifyDBParameterGroup_775137(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775139 = query.getOrDefault("Action")
  valid_775139 = validateParameter(valid_775139, JString, required = true,
                                 default = newJString("ModifyDBParameterGroup"))
  if valid_775139 != nil:
    section.add "Action", valid_775139
  var valid_775140 = query.getOrDefault("Version")
  valid_775140 = validateParameter(valid_775140, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775140 != nil:
    section.add "Version", valid_775140
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775141 = header.getOrDefault("X-Amz-Date")
  valid_775141 = validateParameter(valid_775141, JString, required = false,
                                 default = nil)
  if valid_775141 != nil:
    section.add "X-Amz-Date", valid_775141
  var valid_775142 = header.getOrDefault("X-Amz-Security-Token")
  valid_775142 = validateParameter(valid_775142, JString, required = false,
                                 default = nil)
  if valid_775142 != nil:
    section.add "X-Amz-Security-Token", valid_775142
  var valid_775143 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775143 = validateParameter(valid_775143, JString, required = false,
                                 default = nil)
  if valid_775143 != nil:
    section.add "X-Amz-Content-Sha256", valid_775143
  var valid_775144 = header.getOrDefault("X-Amz-Algorithm")
  valid_775144 = validateParameter(valid_775144, JString, required = false,
                                 default = nil)
  if valid_775144 != nil:
    section.add "X-Amz-Algorithm", valid_775144
  var valid_775145 = header.getOrDefault("X-Amz-Signature")
  valid_775145 = validateParameter(valid_775145, JString, required = false,
                                 default = nil)
  if valid_775145 != nil:
    section.add "X-Amz-Signature", valid_775145
  var valid_775146 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775146 = validateParameter(valid_775146, JString, required = false,
                                 default = nil)
  if valid_775146 != nil:
    section.add "X-Amz-SignedHeaders", valid_775146
  var valid_775147 = header.getOrDefault("X-Amz-Credential")
  valid_775147 = validateParameter(valid_775147, JString, required = false,
                                 default = nil)
  if valid_775147 != nil:
    section.add "X-Amz-Credential", valid_775147
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_775148 = formData.getOrDefault("DBParameterGroupName")
  valid_775148 = validateParameter(valid_775148, JString, required = true,
                                 default = nil)
  if valid_775148 != nil:
    section.add "DBParameterGroupName", valid_775148
  var valid_775149 = formData.getOrDefault("Parameters")
  valid_775149 = validateParameter(valid_775149, JArray, required = true, default = nil)
  if valid_775149 != nil:
    section.add "Parameters", valid_775149
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775150: Call_PostModifyDBParameterGroup_775136; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_775150.validator(path, query, header, formData, body)
  let scheme = call_775150.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775150.url(scheme.get, call_775150.host, call_775150.base,
                         call_775150.route, valid.getOrDefault("path"))
  result = hook(call_775150, url, valid)

proc call*(call_775151: Call_PostModifyDBParameterGroup_775136;
          DBParameterGroupName: string; Parameters: JsonNode;
          Action: string = "ModifyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBParameterGroup
  ## <p>Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775152 = newJObject()
  var formData_775153 = newJObject()
  add(formData_775153, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Parameters != nil:
    formData_775153.add "Parameters", Parameters
  add(query_775152, "Action", newJString(Action))
  add(query_775152, "Version", newJString(Version))
  result = call_775151.call(nil, query_775152, nil, formData_775153, nil)

var postModifyDBParameterGroup* = Call_PostModifyDBParameterGroup_775136(
    name: "postModifyDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBParameterGroup",
    validator: validate_PostModifyDBParameterGroup_775137, base: "/",
    url: url_PostModifyDBParameterGroup_775138,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBParameterGroup_775119 = ref object of OpenApiRestCall_772581
proc url_GetModifyDBParameterGroup_775121(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetModifyDBParameterGroup_775120(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_775122 = query.getOrDefault("DBParameterGroupName")
  valid_775122 = validateParameter(valid_775122, JString, required = true,
                                 default = nil)
  if valid_775122 != nil:
    section.add "DBParameterGroupName", valid_775122
  var valid_775123 = query.getOrDefault("Parameters")
  valid_775123 = validateParameter(valid_775123, JArray, required = true, default = nil)
  if valid_775123 != nil:
    section.add "Parameters", valid_775123
  var valid_775124 = query.getOrDefault("Action")
  valid_775124 = validateParameter(valid_775124, JString, required = true,
                                 default = newJString("ModifyDBParameterGroup"))
  if valid_775124 != nil:
    section.add "Action", valid_775124
  var valid_775125 = query.getOrDefault("Version")
  valid_775125 = validateParameter(valid_775125, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775125 != nil:
    section.add "Version", valid_775125
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775126 = header.getOrDefault("X-Amz-Date")
  valid_775126 = validateParameter(valid_775126, JString, required = false,
                                 default = nil)
  if valid_775126 != nil:
    section.add "X-Amz-Date", valid_775126
  var valid_775127 = header.getOrDefault("X-Amz-Security-Token")
  valid_775127 = validateParameter(valid_775127, JString, required = false,
                                 default = nil)
  if valid_775127 != nil:
    section.add "X-Amz-Security-Token", valid_775127
  var valid_775128 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775128 = validateParameter(valid_775128, JString, required = false,
                                 default = nil)
  if valid_775128 != nil:
    section.add "X-Amz-Content-Sha256", valid_775128
  var valid_775129 = header.getOrDefault("X-Amz-Algorithm")
  valid_775129 = validateParameter(valid_775129, JString, required = false,
                                 default = nil)
  if valid_775129 != nil:
    section.add "X-Amz-Algorithm", valid_775129
  var valid_775130 = header.getOrDefault("X-Amz-Signature")
  valid_775130 = validateParameter(valid_775130, JString, required = false,
                                 default = nil)
  if valid_775130 != nil:
    section.add "X-Amz-Signature", valid_775130
  var valid_775131 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775131 = validateParameter(valid_775131, JString, required = false,
                                 default = nil)
  if valid_775131 != nil:
    section.add "X-Amz-SignedHeaders", valid_775131
  var valid_775132 = header.getOrDefault("X-Amz-Credential")
  valid_775132 = validateParameter(valid_775132, JString, required = false,
                                 default = nil)
  if valid_775132 != nil:
    section.add "X-Amz-Credential", valid_775132
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775133: Call_GetModifyDBParameterGroup_775119; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_775133.validator(path, query, header, formData, body)
  let scheme = call_775133.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775133.url(scheme.get, call_775133.host, call_775133.base,
                         call_775133.route, valid.getOrDefault("path"))
  result = hook(call_775133, url, valid)

proc call*(call_775134: Call_GetModifyDBParameterGroup_775119;
          DBParameterGroupName: string; Parameters: JsonNode;
          Action: string = "ModifyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBParameterGroup
  ## <p>Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775135 = newJObject()
  add(query_775135, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Parameters != nil:
    query_775135.add "Parameters", Parameters
  add(query_775135, "Action", newJString(Action))
  add(query_775135, "Version", newJString(Version))
  result = call_775134.call(nil, query_775135, nil, nil, nil)

var getModifyDBParameterGroup* = Call_GetModifyDBParameterGroup_775119(
    name: "getModifyDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBParameterGroup",
    validator: validate_GetModifyDBParameterGroup_775120, base: "/",
    url: url_GetModifyDBParameterGroup_775121,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBSubnetGroup_775172 = ref object of OpenApiRestCall_772581
proc url_PostModifyDBSubnetGroup_775174(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostModifyDBSubnetGroup_775173(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775175 = query.getOrDefault("Action")
  valid_775175 = validateParameter(valid_775175, JString, required = true,
                                 default = newJString("ModifyDBSubnetGroup"))
  if valid_775175 != nil:
    section.add "Action", valid_775175
  var valid_775176 = query.getOrDefault("Version")
  valid_775176 = validateParameter(valid_775176, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775176 != nil:
    section.add "Version", valid_775176
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775177 = header.getOrDefault("X-Amz-Date")
  valid_775177 = validateParameter(valid_775177, JString, required = false,
                                 default = nil)
  if valid_775177 != nil:
    section.add "X-Amz-Date", valid_775177
  var valid_775178 = header.getOrDefault("X-Amz-Security-Token")
  valid_775178 = validateParameter(valid_775178, JString, required = false,
                                 default = nil)
  if valid_775178 != nil:
    section.add "X-Amz-Security-Token", valid_775178
  var valid_775179 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775179 = validateParameter(valid_775179, JString, required = false,
                                 default = nil)
  if valid_775179 != nil:
    section.add "X-Amz-Content-Sha256", valid_775179
  var valid_775180 = header.getOrDefault("X-Amz-Algorithm")
  valid_775180 = validateParameter(valid_775180, JString, required = false,
                                 default = nil)
  if valid_775180 != nil:
    section.add "X-Amz-Algorithm", valid_775180
  var valid_775181 = header.getOrDefault("X-Amz-Signature")
  valid_775181 = validateParameter(valid_775181, JString, required = false,
                                 default = nil)
  if valid_775181 != nil:
    section.add "X-Amz-Signature", valid_775181
  var valid_775182 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775182 = validateParameter(valid_775182, JString, required = false,
                                 default = nil)
  if valid_775182 != nil:
    section.add "X-Amz-SignedHeaders", valid_775182
  var valid_775183 = header.getOrDefault("X-Amz-Credential")
  valid_775183 = validateParameter(valid_775183, JString, required = false,
                                 default = nil)
  if valid_775183 != nil:
    section.add "X-Amz-Credential", valid_775183
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  ##   DBSubnetGroupDescription: JString
  ##                           : The description for the DB subnet group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSubnetGroupName` field"
  var valid_775184 = formData.getOrDefault("DBSubnetGroupName")
  valid_775184 = validateParameter(valid_775184, JString, required = true,
                                 default = nil)
  if valid_775184 != nil:
    section.add "DBSubnetGroupName", valid_775184
  var valid_775185 = formData.getOrDefault("SubnetIds")
  valid_775185 = validateParameter(valid_775185, JArray, required = true, default = nil)
  if valid_775185 != nil:
    section.add "SubnetIds", valid_775185
  var valid_775186 = formData.getOrDefault("DBSubnetGroupDescription")
  valid_775186 = validateParameter(valid_775186, JString, required = false,
                                 default = nil)
  if valid_775186 != nil:
    section.add "DBSubnetGroupDescription", valid_775186
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775187: Call_PostModifyDBSubnetGroup_775172; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_775187.validator(path, query, header, formData, body)
  let scheme = call_775187.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775187.url(scheme.get, call_775187.host, call_775187.base,
                         call_775187.route, valid.getOrDefault("path"))
  result = hook(call_775187, url, valid)

proc call*(call_775188: Call_PostModifyDBSubnetGroup_775172;
          DBSubnetGroupName: string; SubnetIds: JsonNode;
          Action: string = "ModifyDBSubnetGroup";
          DBSubnetGroupDescription: string = ""; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBSubnetGroup
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  ##   Action: string (required)
  ##   DBSubnetGroupDescription: string
  ##                           : The description for the DB subnet group.
  ##   Version: string (required)
  var query_775189 = newJObject()
  var formData_775190 = newJObject()
  add(formData_775190, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  if SubnetIds != nil:
    formData_775190.add "SubnetIds", SubnetIds
  add(query_775189, "Action", newJString(Action))
  add(formData_775190, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_775189, "Version", newJString(Version))
  result = call_775188.call(nil, query_775189, nil, formData_775190, nil)

var postModifyDBSubnetGroup* = Call_PostModifyDBSubnetGroup_775172(
    name: "postModifyDBSubnetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSubnetGroup",
    validator: validate_PostModifyDBSubnetGroup_775173, base: "/",
    url: url_PostModifyDBSubnetGroup_775174, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBSubnetGroup_775154 = ref object of OpenApiRestCall_772581
proc url_GetModifyDBSubnetGroup_775156(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetModifyDBSubnetGroup_775155(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  ##   DBSubnetGroupDescription: JString
  ##                           : The description for the DB subnet group.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775157 = query.getOrDefault("Action")
  valid_775157 = validateParameter(valid_775157, JString, required = true,
                                 default = newJString("ModifyDBSubnetGroup"))
  if valid_775157 != nil:
    section.add "Action", valid_775157
  var valid_775158 = query.getOrDefault("DBSubnetGroupName")
  valid_775158 = validateParameter(valid_775158, JString, required = true,
                                 default = nil)
  if valid_775158 != nil:
    section.add "DBSubnetGroupName", valid_775158
  var valid_775159 = query.getOrDefault("SubnetIds")
  valid_775159 = validateParameter(valid_775159, JArray, required = true, default = nil)
  if valid_775159 != nil:
    section.add "SubnetIds", valid_775159
  var valid_775160 = query.getOrDefault("DBSubnetGroupDescription")
  valid_775160 = validateParameter(valid_775160, JString, required = false,
                                 default = nil)
  if valid_775160 != nil:
    section.add "DBSubnetGroupDescription", valid_775160
  var valid_775161 = query.getOrDefault("Version")
  valid_775161 = validateParameter(valid_775161, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775161 != nil:
    section.add "Version", valid_775161
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775162 = header.getOrDefault("X-Amz-Date")
  valid_775162 = validateParameter(valid_775162, JString, required = false,
                                 default = nil)
  if valid_775162 != nil:
    section.add "X-Amz-Date", valid_775162
  var valid_775163 = header.getOrDefault("X-Amz-Security-Token")
  valid_775163 = validateParameter(valid_775163, JString, required = false,
                                 default = nil)
  if valid_775163 != nil:
    section.add "X-Amz-Security-Token", valid_775163
  var valid_775164 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775164 = validateParameter(valid_775164, JString, required = false,
                                 default = nil)
  if valid_775164 != nil:
    section.add "X-Amz-Content-Sha256", valid_775164
  var valid_775165 = header.getOrDefault("X-Amz-Algorithm")
  valid_775165 = validateParameter(valid_775165, JString, required = false,
                                 default = nil)
  if valid_775165 != nil:
    section.add "X-Amz-Algorithm", valid_775165
  var valid_775166 = header.getOrDefault("X-Amz-Signature")
  valid_775166 = validateParameter(valid_775166, JString, required = false,
                                 default = nil)
  if valid_775166 != nil:
    section.add "X-Amz-Signature", valid_775166
  var valid_775167 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775167 = validateParameter(valid_775167, JString, required = false,
                                 default = nil)
  if valid_775167 != nil:
    section.add "X-Amz-SignedHeaders", valid_775167
  var valid_775168 = header.getOrDefault("X-Amz-Credential")
  valid_775168 = validateParameter(valid_775168, JString, required = false,
                                 default = nil)
  if valid_775168 != nil:
    section.add "X-Amz-Credential", valid_775168
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775169: Call_GetModifyDBSubnetGroup_775154; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_775169.validator(path, query, header, formData, body)
  let scheme = call_775169.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775169.url(scheme.get, call_775169.host, call_775169.base,
                         call_775169.route, valid.getOrDefault("path"))
  result = hook(call_775169, url, valid)

proc call*(call_775170: Call_GetModifyDBSubnetGroup_775154;
          DBSubnetGroupName: string; SubnetIds: JsonNode;
          Action: string = "ModifyDBSubnetGroup";
          DBSubnetGroupDescription: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBSubnetGroup
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   Action: string (required)
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  ##   DBSubnetGroupDescription: string
  ##                           : The description for the DB subnet group.
  ##   Version: string (required)
  var query_775171 = newJObject()
  add(query_775171, "Action", newJString(Action))
  add(query_775171, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  if SubnetIds != nil:
    query_775171.add "SubnetIds", SubnetIds
  add(query_775171, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_775171, "Version", newJString(Version))
  result = call_775170.call(nil, query_775171, nil, nil, nil)

var getModifyDBSubnetGroup* = Call_GetModifyDBSubnetGroup_775154(
    name: "getModifyDBSubnetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSubnetGroup",
    validator: validate_GetModifyDBSubnetGroup_775155, base: "/",
    url: url_GetModifyDBSubnetGroup_775156, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyEventSubscription_775211 = ref object of OpenApiRestCall_772581
proc url_PostModifyEventSubscription_775213(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostModifyEventSubscription_775212(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies an existing event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <a>AddSourceIdentifierToSubscription</a> and <a>RemoveSourceIdentifierFromSubscription</a> calls.</p> <p>You can see a list of the event categories for a given SourceType by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775214 = query.getOrDefault("Action")
  valid_775214 = validateParameter(valid_775214, JString, required = true, default = newJString(
      "ModifyEventSubscription"))
  if valid_775214 != nil:
    section.add "Action", valid_775214
  var valid_775215 = query.getOrDefault("Version")
  valid_775215 = validateParameter(valid_775215, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775215 != nil:
    section.add "Version", valid_775215
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775216 = header.getOrDefault("X-Amz-Date")
  valid_775216 = validateParameter(valid_775216, JString, required = false,
                                 default = nil)
  if valid_775216 != nil:
    section.add "X-Amz-Date", valid_775216
  var valid_775217 = header.getOrDefault("X-Amz-Security-Token")
  valid_775217 = validateParameter(valid_775217, JString, required = false,
                                 default = nil)
  if valid_775217 != nil:
    section.add "X-Amz-Security-Token", valid_775217
  var valid_775218 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775218 = validateParameter(valid_775218, JString, required = false,
                                 default = nil)
  if valid_775218 != nil:
    section.add "X-Amz-Content-Sha256", valid_775218
  var valid_775219 = header.getOrDefault("X-Amz-Algorithm")
  valid_775219 = validateParameter(valid_775219, JString, required = false,
                                 default = nil)
  if valid_775219 != nil:
    section.add "X-Amz-Algorithm", valid_775219
  var valid_775220 = header.getOrDefault("X-Amz-Signature")
  valid_775220 = validateParameter(valid_775220, JString, required = false,
                                 default = nil)
  if valid_775220 != nil:
    section.add "X-Amz-Signature", valid_775220
  var valid_775221 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775221 = validateParameter(valid_775221, JString, required = false,
                                 default = nil)
  if valid_775221 != nil:
    section.add "X-Amz-SignedHeaders", valid_775221
  var valid_775222 = header.getOrDefault("X-Amz-Credential")
  valid_775222 = validateParameter(valid_775222, JString, required = false,
                                 default = nil)
  if valid_775222 != nil:
    section.add "X-Amz-Credential", valid_775222
  result.add "header", section
  ## parameters in `formData` object:
  ##   Enabled: JBool
  ##          :  A Boolean value; set to <b>true</b> to activate the subscription.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the <b>DescribeEventCategories</b> action.
  ##   SnsTopicArn: JString
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   SubscriptionName: JString (required)
  ##                   : The name of the event notification subscription.
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  section = newJObject()
  var valid_775223 = formData.getOrDefault("Enabled")
  valid_775223 = validateParameter(valid_775223, JBool, required = false, default = nil)
  if valid_775223 != nil:
    section.add "Enabled", valid_775223
  var valid_775224 = formData.getOrDefault("EventCategories")
  valid_775224 = validateParameter(valid_775224, JArray, required = false,
                                 default = nil)
  if valid_775224 != nil:
    section.add "EventCategories", valid_775224
  var valid_775225 = formData.getOrDefault("SnsTopicArn")
  valid_775225 = validateParameter(valid_775225, JString, required = false,
                                 default = nil)
  if valid_775225 != nil:
    section.add "SnsTopicArn", valid_775225
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_775226 = formData.getOrDefault("SubscriptionName")
  valid_775226 = validateParameter(valid_775226, JString, required = true,
                                 default = nil)
  if valid_775226 != nil:
    section.add "SubscriptionName", valid_775226
  var valid_775227 = formData.getOrDefault("SourceType")
  valid_775227 = validateParameter(valid_775227, JString, required = false,
                                 default = nil)
  if valid_775227 != nil:
    section.add "SourceType", valid_775227
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775228: Call_PostModifyEventSubscription_775211; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies an existing event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <a>AddSourceIdentifierToSubscription</a> and <a>RemoveSourceIdentifierFromSubscription</a> calls.</p> <p>You can see a list of the event categories for a given SourceType by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  let valid = call_775228.validator(path, query, header, formData, body)
  let scheme = call_775228.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775228.url(scheme.get, call_775228.host, call_775228.base,
                         call_775228.route, valid.getOrDefault("path"))
  result = hook(call_775228, url, valid)

proc call*(call_775229: Call_PostModifyEventSubscription_775211;
          SubscriptionName: string; Enabled: bool = false;
          EventCategories: JsonNode = nil; SnsTopicArn: string = "";
          Action: string = "ModifyEventSubscription";
          Version: string = "2014-10-31"; SourceType: string = ""): Recallable =
  ## postModifyEventSubscription
  ## <p>Modifies an existing event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <a>AddSourceIdentifierToSubscription</a> and <a>RemoveSourceIdentifierFromSubscription</a> calls.</p> <p>You can see a list of the event categories for a given SourceType by using the <b>DescribeEventCategories</b> action.</p>
  ##   Enabled: bool
  ##          :  A Boolean value; set to <b>true</b> to activate the subscription.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the <b>DescribeEventCategories</b> action.
  ##   SnsTopicArn: string
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   SubscriptionName: string (required)
  ##                   : The name of the event notification subscription.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  var query_775230 = newJObject()
  var formData_775231 = newJObject()
  add(formData_775231, "Enabled", newJBool(Enabled))
  if EventCategories != nil:
    formData_775231.add "EventCategories", EventCategories
  add(formData_775231, "SnsTopicArn", newJString(SnsTopicArn))
  add(formData_775231, "SubscriptionName", newJString(SubscriptionName))
  add(query_775230, "Action", newJString(Action))
  add(query_775230, "Version", newJString(Version))
  add(formData_775231, "SourceType", newJString(SourceType))
  result = call_775229.call(nil, query_775230, nil, formData_775231, nil)

var postModifyEventSubscription* = Call_PostModifyEventSubscription_775211(
    name: "postModifyEventSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyEventSubscription",
    validator: validate_PostModifyEventSubscription_775212, base: "/",
    url: url_PostModifyEventSubscription_775213,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyEventSubscription_775191 = ref object of OpenApiRestCall_772581
proc url_GetModifyEventSubscription_775193(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetModifyEventSubscription_775192(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies an existing event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <a>AddSourceIdentifierToSubscription</a> and <a>RemoveSourceIdentifierFromSubscription</a> calls.</p> <p>You can see a list of the event categories for a given SourceType by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Enabled: JBool
  ##          :  A Boolean value; set to <b>true</b> to activate the subscription.
  ##   Action: JString (required)
  ##   SnsTopicArn: JString
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the <b>DescribeEventCategories</b> action.
  ##   SubscriptionName: JString (required)
  ##                   : The name of the event notification subscription.
  ##   Version: JString (required)
  section = newJObject()
  var valid_775194 = query.getOrDefault("SourceType")
  valid_775194 = validateParameter(valid_775194, JString, required = false,
                                 default = nil)
  if valid_775194 != nil:
    section.add "SourceType", valid_775194
  var valid_775195 = query.getOrDefault("Enabled")
  valid_775195 = validateParameter(valid_775195, JBool, required = false, default = nil)
  if valid_775195 != nil:
    section.add "Enabled", valid_775195
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775196 = query.getOrDefault("Action")
  valid_775196 = validateParameter(valid_775196, JString, required = true, default = newJString(
      "ModifyEventSubscription"))
  if valid_775196 != nil:
    section.add "Action", valid_775196
  var valid_775197 = query.getOrDefault("SnsTopicArn")
  valid_775197 = validateParameter(valid_775197, JString, required = false,
                                 default = nil)
  if valid_775197 != nil:
    section.add "SnsTopicArn", valid_775197
  var valid_775198 = query.getOrDefault("EventCategories")
  valid_775198 = validateParameter(valid_775198, JArray, required = false,
                                 default = nil)
  if valid_775198 != nil:
    section.add "EventCategories", valid_775198
  var valid_775199 = query.getOrDefault("SubscriptionName")
  valid_775199 = validateParameter(valid_775199, JString, required = true,
                                 default = nil)
  if valid_775199 != nil:
    section.add "SubscriptionName", valid_775199
  var valid_775200 = query.getOrDefault("Version")
  valid_775200 = validateParameter(valid_775200, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775200 != nil:
    section.add "Version", valid_775200
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775201 = header.getOrDefault("X-Amz-Date")
  valid_775201 = validateParameter(valid_775201, JString, required = false,
                                 default = nil)
  if valid_775201 != nil:
    section.add "X-Amz-Date", valid_775201
  var valid_775202 = header.getOrDefault("X-Amz-Security-Token")
  valid_775202 = validateParameter(valid_775202, JString, required = false,
                                 default = nil)
  if valid_775202 != nil:
    section.add "X-Amz-Security-Token", valid_775202
  var valid_775203 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775203 = validateParameter(valid_775203, JString, required = false,
                                 default = nil)
  if valid_775203 != nil:
    section.add "X-Amz-Content-Sha256", valid_775203
  var valid_775204 = header.getOrDefault("X-Amz-Algorithm")
  valid_775204 = validateParameter(valid_775204, JString, required = false,
                                 default = nil)
  if valid_775204 != nil:
    section.add "X-Amz-Algorithm", valid_775204
  var valid_775205 = header.getOrDefault("X-Amz-Signature")
  valid_775205 = validateParameter(valid_775205, JString, required = false,
                                 default = nil)
  if valid_775205 != nil:
    section.add "X-Amz-Signature", valid_775205
  var valid_775206 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775206 = validateParameter(valid_775206, JString, required = false,
                                 default = nil)
  if valid_775206 != nil:
    section.add "X-Amz-SignedHeaders", valid_775206
  var valid_775207 = header.getOrDefault("X-Amz-Credential")
  valid_775207 = validateParameter(valid_775207, JString, required = false,
                                 default = nil)
  if valid_775207 != nil:
    section.add "X-Amz-Credential", valid_775207
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775208: Call_GetModifyEventSubscription_775191; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies an existing event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <a>AddSourceIdentifierToSubscription</a> and <a>RemoveSourceIdentifierFromSubscription</a> calls.</p> <p>You can see a list of the event categories for a given SourceType by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  let valid = call_775208.validator(path, query, header, formData, body)
  let scheme = call_775208.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775208.url(scheme.get, call_775208.host, call_775208.base,
                         call_775208.route, valid.getOrDefault("path"))
  result = hook(call_775208, url, valid)

proc call*(call_775209: Call_GetModifyEventSubscription_775191;
          SubscriptionName: string; SourceType: string = ""; Enabled: bool = false;
          Action: string = "ModifyEventSubscription"; SnsTopicArn: string = "";
          EventCategories: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## getModifyEventSubscription
  ## <p>Modifies an existing event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <a>AddSourceIdentifierToSubscription</a> and <a>RemoveSourceIdentifierFromSubscription</a> calls.</p> <p>You can see a list of the event categories for a given SourceType by using the <b>DescribeEventCategories</b> action.</p>
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Enabled: bool
  ##          :  A Boolean value; set to <b>true</b> to activate the subscription.
  ##   Action: string (required)
  ##   SnsTopicArn: string
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the <b>DescribeEventCategories</b> action.
  ##   SubscriptionName: string (required)
  ##                   : The name of the event notification subscription.
  ##   Version: string (required)
  var query_775210 = newJObject()
  add(query_775210, "SourceType", newJString(SourceType))
  add(query_775210, "Enabled", newJBool(Enabled))
  add(query_775210, "Action", newJString(Action))
  add(query_775210, "SnsTopicArn", newJString(SnsTopicArn))
  if EventCategories != nil:
    query_775210.add "EventCategories", EventCategories
  add(query_775210, "SubscriptionName", newJString(SubscriptionName))
  add(query_775210, "Version", newJString(Version))
  result = call_775209.call(nil, query_775210, nil, nil, nil)

var getModifyEventSubscription* = Call_GetModifyEventSubscription_775191(
    name: "getModifyEventSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyEventSubscription",
    validator: validate_GetModifyEventSubscription_775192, base: "/",
    url: url_GetModifyEventSubscription_775193,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPromoteReadReplicaDBCluster_775248 = ref object of OpenApiRestCall_772581
proc url_PostPromoteReadReplicaDBCluster_775250(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostPromoteReadReplicaDBCluster_775249(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Not supported.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775251 = query.getOrDefault("Action")
  valid_775251 = validateParameter(valid_775251, JString, required = true, default = newJString(
      "PromoteReadReplicaDBCluster"))
  if valid_775251 != nil:
    section.add "Action", valid_775251
  var valid_775252 = query.getOrDefault("Version")
  valid_775252 = validateParameter(valid_775252, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775252 != nil:
    section.add "Version", valid_775252
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775253 = header.getOrDefault("X-Amz-Date")
  valid_775253 = validateParameter(valid_775253, JString, required = false,
                                 default = nil)
  if valid_775253 != nil:
    section.add "X-Amz-Date", valid_775253
  var valid_775254 = header.getOrDefault("X-Amz-Security-Token")
  valid_775254 = validateParameter(valid_775254, JString, required = false,
                                 default = nil)
  if valid_775254 != nil:
    section.add "X-Amz-Security-Token", valid_775254
  var valid_775255 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775255 = validateParameter(valid_775255, JString, required = false,
                                 default = nil)
  if valid_775255 != nil:
    section.add "X-Amz-Content-Sha256", valid_775255
  var valid_775256 = header.getOrDefault("X-Amz-Algorithm")
  valid_775256 = validateParameter(valid_775256, JString, required = false,
                                 default = nil)
  if valid_775256 != nil:
    section.add "X-Amz-Algorithm", valid_775256
  var valid_775257 = header.getOrDefault("X-Amz-Signature")
  valid_775257 = validateParameter(valid_775257, JString, required = false,
                                 default = nil)
  if valid_775257 != nil:
    section.add "X-Amz-Signature", valid_775257
  var valid_775258 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775258 = validateParameter(valid_775258, JString, required = false,
                                 default = nil)
  if valid_775258 != nil:
    section.add "X-Amz-SignedHeaders", valid_775258
  var valid_775259 = header.getOrDefault("X-Amz-Credential")
  valid_775259 = validateParameter(valid_775259, JString, required = false,
                                 default = nil)
  if valid_775259 != nil:
    section.add "X-Amz-Credential", valid_775259
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : Not supported.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_775260 = formData.getOrDefault("DBClusterIdentifier")
  valid_775260 = validateParameter(valid_775260, JString, required = true,
                                 default = nil)
  if valid_775260 != nil:
    section.add "DBClusterIdentifier", valid_775260
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775261: Call_PostPromoteReadReplicaDBCluster_775248;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Not supported.
  ## 
  let valid = call_775261.validator(path, query, header, formData, body)
  let scheme = call_775261.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775261.url(scheme.get, call_775261.host, call_775261.base,
                         call_775261.route, valid.getOrDefault("path"))
  result = hook(call_775261, url, valid)

proc call*(call_775262: Call_PostPromoteReadReplicaDBCluster_775248;
          DBClusterIdentifier: string;
          Action: string = "PromoteReadReplicaDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## postPromoteReadReplicaDBCluster
  ## Not supported.
  ##   Action: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : Not supported.
  ##   Version: string (required)
  var query_775263 = newJObject()
  var formData_775264 = newJObject()
  add(query_775263, "Action", newJString(Action))
  add(formData_775264, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_775263, "Version", newJString(Version))
  result = call_775262.call(nil, query_775263, nil, formData_775264, nil)

var postPromoteReadReplicaDBCluster* = Call_PostPromoteReadReplicaDBCluster_775248(
    name: "postPromoteReadReplicaDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=PromoteReadReplicaDBCluster",
    validator: validate_PostPromoteReadReplicaDBCluster_775249, base: "/",
    url: url_PostPromoteReadReplicaDBCluster_775250,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPromoteReadReplicaDBCluster_775232 = ref object of OpenApiRestCall_772581
proc url_GetPromoteReadReplicaDBCluster_775234(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetPromoteReadReplicaDBCluster_775233(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Not supported.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : Not supported.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_775235 = query.getOrDefault("DBClusterIdentifier")
  valid_775235 = validateParameter(valid_775235, JString, required = true,
                                 default = nil)
  if valid_775235 != nil:
    section.add "DBClusterIdentifier", valid_775235
  var valid_775236 = query.getOrDefault("Action")
  valid_775236 = validateParameter(valid_775236, JString, required = true, default = newJString(
      "PromoteReadReplicaDBCluster"))
  if valid_775236 != nil:
    section.add "Action", valid_775236
  var valid_775237 = query.getOrDefault("Version")
  valid_775237 = validateParameter(valid_775237, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775237 != nil:
    section.add "Version", valid_775237
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775238 = header.getOrDefault("X-Amz-Date")
  valid_775238 = validateParameter(valid_775238, JString, required = false,
                                 default = nil)
  if valid_775238 != nil:
    section.add "X-Amz-Date", valid_775238
  var valid_775239 = header.getOrDefault("X-Amz-Security-Token")
  valid_775239 = validateParameter(valid_775239, JString, required = false,
                                 default = nil)
  if valid_775239 != nil:
    section.add "X-Amz-Security-Token", valid_775239
  var valid_775240 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775240 = validateParameter(valid_775240, JString, required = false,
                                 default = nil)
  if valid_775240 != nil:
    section.add "X-Amz-Content-Sha256", valid_775240
  var valid_775241 = header.getOrDefault("X-Amz-Algorithm")
  valid_775241 = validateParameter(valid_775241, JString, required = false,
                                 default = nil)
  if valid_775241 != nil:
    section.add "X-Amz-Algorithm", valid_775241
  var valid_775242 = header.getOrDefault("X-Amz-Signature")
  valid_775242 = validateParameter(valid_775242, JString, required = false,
                                 default = nil)
  if valid_775242 != nil:
    section.add "X-Amz-Signature", valid_775242
  var valid_775243 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775243 = validateParameter(valid_775243, JString, required = false,
                                 default = nil)
  if valid_775243 != nil:
    section.add "X-Amz-SignedHeaders", valid_775243
  var valid_775244 = header.getOrDefault("X-Amz-Credential")
  valid_775244 = validateParameter(valid_775244, JString, required = false,
                                 default = nil)
  if valid_775244 != nil:
    section.add "X-Amz-Credential", valid_775244
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775245: Call_GetPromoteReadReplicaDBCluster_775232; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Not supported.
  ## 
  let valid = call_775245.validator(path, query, header, formData, body)
  let scheme = call_775245.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775245.url(scheme.get, call_775245.host, call_775245.base,
                         call_775245.route, valid.getOrDefault("path"))
  result = hook(call_775245, url, valid)

proc call*(call_775246: Call_GetPromoteReadReplicaDBCluster_775232;
          DBClusterIdentifier: string;
          Action: string = "PromoteReadReplicaDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## getPromoteReadReplicaDBCluster
  ## Not supported.
  ##   DBClusterIdentifier: string (required)
  ##                      : Not supported.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775247 = newJObject()
  add(query_775247, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_775247, "Action", newJString(Action))
  add(query_775247, "Version", newJString(Version))
  result = call_775246.call(nil, query_775247, nil, nil, nil)

var getPromoteReadReplicaDBCluster* = Call_GetPromoteReadReplicaDBCluster_775232(
    name: "getPromoteReadReplicaDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=PromoteReadReplicaDBCluster",
    validator: validate_GetPromoteReadReplicaDBCluster_775233, base: "/",
    url: url_GetPromoteReadReplicaDBCluster_775234,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRebootDBInstance_775282 = ref object of OpenApiRestCall_772581
proc url_PostRebootDBInstance_775284(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostRebootDBInstance_775283(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect.</p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775285 = query.getOrDefault("Action")
  valid_775285 = validateParameter(valid_775285, JString, required = true,
                                 default = newJString("RebootDBInstance"))
  if valid_775285 != nil:
    section.add "Action", valid_775285
  var valid_775286 = query.getOrDefault("Version")
  valid_775286 = validateParameter(valid_775286, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775286 != nil:
    section.add "Version", valid_775286
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775287 = header.getOrDefault("X-Amz-Date")
  valid_775287 = validateParameter(valid_775287, JString, required = false,
                                 default = nil)
  if valid_775287 != nil:
    section.add "X-Amz-Date", valid_775287
  var valid_775288 = header.getOrDefault("X-Amz-Security-Token")
  valid_775288 = validateParameter(valid_775288, JString, required = false,
                                 default = nil)
  if valid_775288 != nil:
    section.add "X-Amz-Security-Token", valid_775288
  var valid_775289 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775289 = validateParameter(valid_775289, JString, required = false,
                                 default = nil)
  if valid_775289 != nil:
    section.add "X-Amz-Content-Sha256", valid_775289
  var valid_775290 = header.getOrDefault("X-Amz-Algorithm")
  valid_775290 = validateParameter(valid_775290, JString, required = false,
                                 default = nil)
  if valid_775290 != nil:
    section.add "X-Amz-Algorithm", valid_775290
  var valid_775291 = header.getOrDefault("X-Amz-Signature")
  valid_775291 = validateParameter(valid_775291, JString, required = false,
                                 default = nil)
  if valid_775291 != nil:
    section.add "X-Amz-Signature", valid_775291
  var valid_775292 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775292 = validateParameter(valid_775292, JString, required = false,
                                 default = nil)
  if valid_775292 != nil:
    section.add "X-Amz-SignedHeaders", valid_775292
  var valid_775293 = header.getOrDefault("X-Amz-Credential")
  valid_775293 = validateParameter(valid_775293, JString, required = false,
                                 default = nil)
  if valid_775293 != nil:
    section.add "X-Amz-Credential", valid_775293
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   ForceFailover: JBool
  ##                : <p> When <code>true</code>, the reboot is conducted through a MultiAZ failover.</p> <p>Constraint: You can't specify <code>true</code> if the instance is not configured for MultiAZ.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_775294 = formData.getOrDefault("DBInstanceIdentifier")
  valid_775294 = validateParameter(valid_775294, JString, required = true,
                                 default = nil)
  if valid_775294 != nil:
    section.add "DBInstanceIdentifier", valid_775294
  var valid_775295 = formData.getOrDefault("ForceFailover")
  valid_775295 = validateParameter(valid_775295, JBool, required = false, default = nil)
  if valid_775295 != nil:
    section.add "ForceFailover", valid_775295
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775296: Call_PostRebootDBInstance_775282; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect.</p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting.</p>
  ## 
  let valid = call_775296.validator(path, query, header, formData, body)
  let scheme = call_775296.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775296.url(scheme.get, call_775296.host, call_775296.base,
                         call_775296.route, valid.getOrDefault("path"))
  result = hook(call_775296, url, valid)

proc call*(call_775297: Call_PostRebootDBInstance_775282;
          DBInstanceIdentifier: string; Action: string = "RebootDBInstance";
          ForceFailover: bool = false; Version: string = "2014-10-31"): Recallable =
  ## postRebootDBInstance
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect.</p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting.</p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   ForceFailover: bool
  ##                : <p> When <code>true</code>, the reboot is conducted through a MultiAZ failover.</p> <p>Constraint: You can't specify <code>true</code> if the instance is not configured for MultiAZ.</p>
  ##   Version: string (required)
  var query_775298 = newJObject()
  var formData_775299 = newJObject()
  add(formData_775299, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_775298, "Action", newJString(Action))
  add(formData_775299, "ForceFailover", newJBool(ForceFailover))
  add(query_775298, "Version", newJString(Version))
  result = call_775297.call(nil, query_775298, nil, formData_775299, nil)

var postRebootDBInstance* = Call_PostRebootDBInstance_775282(
    name: "postRebootDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RebootDBInstance",
    validator: validate_PostRebootDBInstance_775283, base: "/",
    url: url_PostRebootDBInstance_775284, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRebootDBInstance_775265 = ref object of OpenApiRestCall_772581
proc url_GetRebootDBInstance_775267(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetRebootDBInstance_775266(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect.</p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   ForceFailover: JBool
  ##                : <p> When <code>true</code>, the reboot is conducted through a MultiAZ failover.</p> <p>Constraint: You can't specify <code>true</code> if the instance is not configured for MultiAZ.</p>
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775268 = query.getOrDefault("Action")
  valid_775268 = validateParameter(valid_775268, JString, required = true,
                                 default = newJString("RebootDBInstance"))
  if valid_775268 != nil:
    section.add "Action", valid_775268
  var valid_775269 = query.getOrDefault("ForceFailover")
  valid_775269 = validateParameter(valid_775269, JBool, required = false, default = nil)
  if valid_775269 != nil:
    section.add "ForceFailover", valid_775269
  var valid_775270 = query.getOrDefault("Version")
  valid_775270 = validateParameter(valid_775270, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775270 != nil:
    section.add "Version", valid_775270
  var valid_775271 = query.getOrDefault("DBInstanceIdentifier")
  valid_775271 = validateParameter(valid_775271, JString, required = true,
                                 default = nil)
  if valid_775271 != nil:
    section.add "DBInstanceIdentifier", valid_775271
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775272 = header.getOrDefault("X-Amz-Date")
  valid_775272 = validateParameter(valid_775272, JString, required = false,
                                 default = nil)
  if valid_775272 != nil:
    section.add "X-Amz-Date", valid_775272
  var valid_775273 = header.getOrDefault("X-Amz-Security-Token")
  valid_775273 = validateParameter(valid_775273, JString, required = false,
                                 default = nil)
  if valid_775273 != nil:
    section.add "X-Amz-Security-Token", valid_775273
  var valid_775274 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775274 = validateParameter(valid_775274, JString, required = false,
                                 default = nil)
  if valid_775274 != nil:
    section.add "X-Amz-Content-Sha256", valid_775274
  var valid_775275 = header.getOrDefault("X-Amz-Algorithm")
  valid_775275 = validateParameter(valid_775275, JString, required = false,
                                 default = nil)
  if valid_775275 != nil:
    section.add "X-Amz-Algorithm", valid_775275
  var valid_775276 = header.getOrDefault("X-Amz-Signature")
  valid_775276 = validateParameter(valid_775276, JString, required = false,
                                 default = nil)
  if valid_775276 != nil:
    section.add "X-Amz-Signature", valid_775276
  var valid_775277 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775277 = validateParameter(valid_775277, JString, required = false,
                                 default = nil)
  if valid_775277 != nil:
    section.add "X-Amz-SignedHeaders", valid_775277
  var valid_775278 = header.getOrDefault("X-Amz-Credential")
  valid_775278 = validateParameter(valid_775278, JString, required = false,
                                 default = nil)
  if valid_775278 != nil:
    section.add "X-Amz-Credential", valid_775278
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775279: Call_GetRebootDBInstance_775265; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect.</p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting.</p>
  ## 
  let valid = call_775279.validator(path, query, header, formData, body)
  let scheme = call_775279.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775279.url(scheme.get, call_775279.host, call_775279.base,
                         call_775279.route, valid.getOrDefault("path"))
  result = hook(call_775279, url, valid)

proc call*(call_775280: Call_GetRebootDBInstance_775265;
          DBInstanceIdentifier: string; Action: string = "RebootDBInstance";
          ForceFailover: bool = false; Version: string = "2014-10-31"): Recallable =
  ## getRebootDBInstance
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect.</p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting.</p>
  ##   Action: string (required)
  ##   ForceFailover: bool
  ##                : <p> When <code>true</code>, the reboot is conducted through a MultiAZ failover.</p> <p>Constraint: You can't specify <code>true</code> if the instance is not configured for MultiAZ.</p>
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  var query_775281 = newJObject()
  add(query_775281, "Action", newJString(Action))
  add(query_775281, "ForceFailover", newJBool(ForceFailover))
  add(query_775281, "Version", newJString(Version))
  add(query_775281, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  result = call_775280.call(nil, query_775281, nil, nil, nil)

var getRebootDBInstance* = Call_GetRebootDBInstance_775265(
    name: "getRebootDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RebootDBInstance",
    validator: validate_GetRebootDBInstance_775266, base: "/",
    url: url_GetRebootDBInstance_775267, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveRoleFromDBCluster_775317 = ref object of OpenApiRestCall_772581
proc url_PostRemoveRoleFromDBCluster_775319(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostRemoveRoleFromDBCluster_775318(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disassociates an Identity and Access Management (IAM) role from a DB cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775320 = query.getOrDefault("Action")
  valid_775320 = validateParameter(valid_775320, JString, required = true, default = newJString(
      "RemoveRoleFromDBCluster"))
  if valid_775320 != nil:
    section.add "Action", valid_775320
  var valid_775321 = query.getOrDefault("Version")
  valid_775321 = validateParameter(valid_775321, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775321 != nil:
    section.add "Version", valid_775321
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775322 = header.getOrDefault("X-Amz-Date")
  valid_775322 = validateParameter(valid_775322, JString, required = false,
                                 default = nil)
  if valid_775322 != nil:
    section.add "X-Amz-Date", valid_775322
  var valid_775323 = header.getOrDefault("X-Amz-Security-Token")
  valid_775323 = validateParameter(valid_775323, JString, required = false,
                                 default = nil)
  if valid_775323 != nil:
    section.add "X-Amz-Security-Token", valid_775323
  var valid_775324 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775324 = validateParameter(valid_775324, JString, required = false,
                                 default = nil)
  if valid_775324 != nil:
    section.add "X-Amz-Content-Sha256", valid_775324
  var valid_775325 = header.getOrDefault("X-Amz-Algorithm")
  valid_775325 = validateParameter(valid_775325, JString, required = false,
                                 default = nil)
  if valid_775325 != nil:
    section.add "X-Amz-Algorithm", valid_775325
  var valid_775326 = header.getOrDefault("X-Amz-Signature")
  valid_775326 = validateParameter(valid_775326, JString, required = false,
                                 default = nil)
  if valid_775326 != nil:
    section.add "X-Amz-Signature", valid_775326
  var valid_775327 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775327 = validateParameter(valid_775327, JString, required = false,
                                 default = nil)
  if valid_775327 != nil:
    section.add "X-Amz-SignedHeaders", valid_775327
  var valid_775328 = header.getOrDefault("X-Amz-Credential")
  valid_775328 = validateParameter(valid_775328, JString, required = false,
                                 default = nil)
  if valid_775328 != nil:
    section.add "X-Amz-Credential", valid_775328
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB cluster, for example <code>arn:aws:iam::123456789012:role/NeptuneAccessRole</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleArn` field"
  var valid_775329 = formData.getOrDefault("RoleArn")
  valid_775329 = validateParameter(valid_775329, JString, required = true,
                                 default = nil)
  if valid_775329 != nil:
    section.add "RoleArn", valid_775329
  var valid_775330 = formData.getOrDefault("DBClusterIdentifier")
  valid_775330 = validateParameter(valid_775330, JString, required = true,
                                 default = nil)
  if valid_775330 != nil:
    section.add "DBClusterIdentifier", valid_775330
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775331: Call_PostRemoveRoleFromDBCluster_775317; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disassociates an Identity and Access Management (IAM) role from a DB cluster.
  ## 
  let valid = call_775331.validator(path, query, header, formData, body)
  let scheme = call_775331.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775331.url(scheme.get, call_775331.host, call_775331.base,
                         call_775331.route, valid.getOrDefault("path"))
  result = hook(call_775331, url, valid)

proc call*(call_775332: Call_PostRemoveRoleFromDBCluster_775317; RoleArn: string;
          DBClusterIdentifier: string; Action: string = "RemoveRoleFromDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## postRemoveRoleFromDBCluster
  ## Disassociates an Identity and Access Management (IAM) role from a DB cluster.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB cluster, for example <code>arn:aws:iam::123456789012:role/NeptuneAccessRole</code>.
  ##   Action: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  ##   Version: string (required)
  var query_775333 = newJObject()
  var formData_775334 = newJObject()
  add(formData_775334, "RoleArn", newJString(RoleArn))
  add(query_775333, "Action", newJString(Action))
  add(formData_775334, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_775333, "Version", newJString(Version))
  result = call_775332.call(nil, query_775333, nil, formData_775334, nil)

var postRemoveRoleFromDBCluster* = Call_PostRemoveRoleFromDBCluster_775317(
    name: "postRemoveRoleFromDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RemoveRoleFromDBCluster",
    validator: validate_PostRemoveRoleFromDBCluster_775318, base: "/",
    url: url_PostRemoveRoleFromDBCluster_775319,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveRoleFromDBCluster_775300 = ref object of OpenApiRestCall_772581
proc url_GetRemoveRoleFromDBCluster_775302(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetRemoveRoleFromDBCluster_775301(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disassociates an Identity and Access Management (IAM) role from a DB cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB cluster, for example <code>arn:aws:iam::123456789012:role/NeptuneAccessRole</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_775303 = query.getOrDefault("DBClusterIdentifier")
  valid_775303 = validateParameter(valid_775303, JString, required = true,
                                 default = nil)
  if valid_775303 != nil:
    section.add "DBClusterIdentifier", valid_775303
  var valid_775304 = query.getOrDefault("RoleArn")
  valid_775304 = validateParameter(valid_775304, JString, required = true,
                                 default = nil)
  if valid_775304 != nil:
    section.add "RoleArn", valid_775304
  var valid_775305 = query.getOrDefault("Action")
  valid_775305 = validateParameter(valid_775305, JString, required = true, default = newJString(
      "RemoveRoleFromDBCluster"))
  if valid_775305 != nil:
    section.add "Action", valid_775305
  var valid_775306 = query.getOrDefault("Version")
  valid_775306 = validateParameter(valid_775306, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775306 != nil:
    section.add "Version", valid_775306
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775307 = header.getOrDefault("X-Amz-Date")
  valid_775307 = validateParameter(valid_775307, JString, required = false,
                                 default = nil)
  if valid_775307 != nil:
    section.add "X-Amz-Date", valid_775307
  var valid_775308 = header.getOrDefault("X-Amz-Security-Token")
  valid_775308 = validateParameter(valid_775308, JString, required = false,
                                 default = nil)
  if valid_775308 != nil:
    section.add "X-Amz-Security-Token", valid_775308
  var valid_775309 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775309 = validateParameter(valid_775309, JString, required = false,
                                 default = nil)
  if valid_775309 != nil:
    section.add "X-Amz-Content-Sha256", valid_775309
  var valid_775310 = header.getOrDefault("X-Amz-Algorithm")
  valid_775310 = validateParameter(valid_775310, JString, required = false,
                                 default = nil)
  if valid_775310 != nil:
    section.add "X-Amz-Algorithm", valid_775310
  var valid_775311 = header.getOrDefault("X-Amz-Signature")
  valid_775311 = validateParameter(valid_775311, JString, required = false,
                                 default = nil)
  if valid_775311 != nil:
    section.add "X-Amz-Signature", valid_775311
  var valid_775312 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775312 = validateParameter(valid_775312, JString, required = false,
                                 default = nil)
  if valid_775312 != nil:
    section.add "X-Amz-SignedHeaders", valid_775312
  var valid_775313 = header.getOrDefault("X-Amz-Credential")
  valid_775313 = validateParameter(valid_775313, JString, required = false,
                                 default = nil)
  if valid_775313 != nil:
    section.add "X-Amz-Credential", valid_775313
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775314: Call_GetRemoveRoleFromDBCluster_775300; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disassociates an Identity and Access Management (IAM) role from a DB cluster.
  ## 
  let valid = call_775314.validator(path, query, header, formData, body)
  let scheme = call_775314.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775314.url(scheme.get, call_775314.host, call_775314.base,
                         call_775314.route, valid.getOrDefault("path"))
  result = hook(call_775314, url, valid)

proc call*(call_775315: Call_GetRemoveRoleFromDBCluster_775300;
          DBClusterIdentifier: string; RoleArn: string;
          Action: string = "RemoveRoleFromDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getRemoveRoleFromDBCluster
  ## Disassociates an Identity and Access Management (IAM) role from a DB cluster.
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB cluster, for example <code>arn:aws:iam::123456789012:role/NeptuneAccessRole</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775316 = newJObject()
  add(query_775316, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_775316, "RoleArn", newJString(RoleArn))
  add(query_775316, "Action", newJString(Action))
  add(query_775316, "Version", newJString(Version))
  result = call_775315.call(nil, query_775316, nil, nil, nil)

var getRemoveRoleFromDBCluster* = Call_GetRemoveRoleFromDBCluster_775300(
    name: "getRemoveRoleFromDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RemoveRoleFromDBCluster",
    validator: validate_GetRemoveRoleFromDBCluster_775301, base: "/",
    url: url_GetRemoveRoleFromDBCluster_775302,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveSourceIdentifierFromSubscription_775352 = ref object of OpenApiRestCall_772581
proc url_PostRemoveSourceIdentifierFromSubscription_775354(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostRemoveSourceIdentifierFromSubscription_775353(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes a source identifier from an existing event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775355 = query.getOrDefault("Action")
  valid_775355 = validateParameter(valid_775355, JString, required = true, default = newJString(
      "RemoveSourceIdentifierFromSubscription"))
  if valid_775355 != nil:
    section.add "Action", valid_775355
  var valid_775356 = query.getOrDefault("Version")
  valid_775356 = validateParameter(valid_775356, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775356 != nil:
    section.add "Version", valid_775356
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775357 = header.getOrDefault("X-Amz-Date")
  valid_775357 = validateParameter(valid_775357, JString, required = false,
                                 default = nil)
  if valid_775357 != nil:
    section.add "X-Amz-Date", valid_775357
  var valid_775358 = header.getOrDefault("X-Amz-Security-Token")
  valid_775358 = validateParameter(valid_775358, JString, required = false,
                                 default = nil)
  if valid_775358 != nil:
    section.add "X-Amz-Security-Token", valid_775358
  var valid_775359 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775359 = validateParameter(valid_775359, JString, required = false,
                                 default = nil)
  if valid_775359 != nil:
    section.add "X-Amz-Content-Sha256", valid_775359
  var valid_775360 = header.getOrDefault("X-Amz-Algorithm")
  valid_775360 = validateParameter(valid_775360, JString, required = false,
                                 default = nil)
  if valid_775360 != nil:
    section.add "X-Amz-Algorithm", valid_775360
  var valid_775361 = header.getOrDefault("X-Amz-Signature")
  valid_775361 = validateParameter(valid_775361, JString, required = false,
                                 default = nil)
  if valid_775361 != nil:
    section.add "X-Amz-Signature", valid_775361
  var valid_775362 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775362 = validateParameter(valid_775362, JString, required = false,
                                 default = nil)
  if valid_775362 != nil:
    section.add "X-Amz-SignedHeaders", valid_775362
  var valid_775363 = header.getOrDefault("X-Amz-Credential")
  valid_775363 = validateParameter(valid_775363, JString, required = false,
                                 default = nil)
  if valid_775363 != nil:
    section.add "X-Amz-Credential", valid_775363
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceIdentifier: JString (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group.
  ##   SubscriptionName: JString (required)
  ##                   : The name of the event notification subscription you want to remove a source identifier from.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SourceIdentifier` field"
  var valid_775364 = formData.getOrDefault("SourceIdentifier")
  valid_775364 = validateParameter(valid_775364, JString, required = true,
                                 default = nil)
  if valid_775364 != nil:
    section.add "SourceIdentifier", valid_775364
  var valid_775365 = formData.getOrDefault("SubscriptionName")
  valid_775365 = validateParameter(valid_775365, JString, required = true,
                                 default = nil)
  if valid_775365 != nil:
    section.add "SubscriptionName", valid_775365
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775366: Call_PostRemoveSourceIdentifierFromSubscription_775352;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Removes a source identifier from an existing event notification subscription.
  ## 
  let valid = call_775366.validator(path, query, header, formData, body)
  let scheme = call_775366.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775366.url(scheme.get, call_775366.host, call_775366.base,
                         call_775366.route, valid.getOrDefault("path"))
  result = hook(call_775366, url, valid)

proc call*(call_775367: Call_PostRemoveSourceIdentifierFromSubscription_775352;
          SourceIdentifier: string; SubscriptionName: string;
          Action: string = "RemoveSourceIdentifierFromSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## postRemoveSourceIdentifierFromSubscription
  ## Removes a source identifier from an existing event notification subscription.
  ##   SourceIdentifier: string (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group.
  ##   SubscriptionName: string (required)
  ##                   : The name of the event notification subscription you want to remove a source identifier from.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775368 = newJObject()
  var formData_775369 = newJObject()
  add(formData_775369, "SourceIdentifier", newJString(SourceIdentifier))
  add(formData_775369, "SubscriptionName", newJString(SubscriptionName))
  add(query_775368, "Action", newJString(Action))
  add(query_775368, "Version", newJString(Version))
  result = call_775367.call(nil, query_775368, nil, formData_775369, nil)

var postRemoveSourceIdentifierFromSubscription* = Call_PostRemoveSourceIdentifierFromSubscription_775352(
    name: "postRemoveSourceIdentifierFromSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=RemoveSourceIdentifierFromSubscription",
    validator: validate_PostRemoveSourceIdentifierFromSubscription_775353,
    base: "/", url: url_PostRemoveSourceIdentifierFromSubscription_775354,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveSourceIdentifierFromSubscription_775335 = ref object of OpenApiRestCall_772581
proc url_GetRemoveSourceIdentifierFromSubscription_775337(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetRemoveSourceIdentifierFromSubscription_775336(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes a source identifier from an existing event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   SourceIdentifier: JString (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group.
  ##   SubscriptionName: JString (required)
  ##                   : The name of the event notification subscription you want to remove a source identifier from.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775338 = query.getOrDefault("Action")
  valid_775338 = validateParameter(valid_775338, JString, required = true, default = newJString(
      "RemoveSourceIdentifierFromSubscription"))
  if valid_775338 != nil:
    section.add "Action", valid_775338
  var valid_775339 = query.getOrDefault("SourceIdentifier")
  valid_775339 = validateParameter(valid_775339, JString, required = true,
                                 default = nil)
  if valid_775339 != nil:
    section.add "SourceIdentifier", valid_775339
  var valid_775340 = query.getOrDefault("SubscriptionName")
  valid_775340 = validateParameter(valid_775340, JString, required = true,
                                 default = nil)
  if valid_775340 != nil:
    section.add "SubscriptionName", valid_775340
  var valid_775341 = query.getOrDefault("Version")
  valid_775341 = validateParameter(valid_775341, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775341 != nil:
    section.add "Version", valid_775341
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775342 = header.getOrDefault("X-Amz-Date")
  valid_775342 = validateParameter(valid_775342, JString, required = false,
                                 default = nil)
  if valid_775342 != nil:
    section.add "X-Amz-Date", valid_775342
  var valid_775343 = header.getOrDefault("X-Amz-Security-Token")
  valid_775343 = validateParameter(valid_775343, JString, required = false,
                                 default = nil)
  if valid_775343 != nil:
    section.add "X-Amz-Security-Token", valid_775343
  var valid_775344 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775344 = validateParameter(valid_775344, JString, required = false,
                                 default = nil)
  if valid_775344 != nil:
    section.add "X-Amz-Content-Sha256", valid_775344
  var valid_775345 = header.getOrDefault("X-Amz-Algorithm")
  valid_775345 = validateParameter(valid_775345, JString, required = false,
                                 default = nil)
  if valid_775345 != nil:
    section.add "X-Amz-Algorithm", valid_775345
  var valid_775346 = header.getOrDefault("X-Amz-Signature")
  valid_775346 = validateParameter(valid_775346, JString, required = false,
                                 default = nil)
  if valid_775346 != nil:
    section.add "X-Amz-Signature", valid_775346
  var valid_775347 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775347 = validateParameter(valid_775347, JString, required = false,
                                 default = nil)
  if valid_775347 != nil:
    section.add "X-Amz-SignedHeaders", valid_775347
  var valid_775348 = header.getOrDefault("X-Amz-Credential")
  valid_775348 = validateParameter(valid_775348, JString, required = false,
                                 default = nil)
  if valid_775348 != nil:
    section.add "X-Amz-Credential", valid_775348
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775349: Call_GetRemoveSourceIdentifierFromSubscription_775335;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Removes a source identifier from an existing event notification subscription.
  ## 
  let valid = call_775349.validator(path, query, header, formData, body)
  let scheme = call_775349.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775349.url(scheme.get, call_775349.host, call_775349.base,
                         call_775349.route, valid.getOrDefault("path"))
  result = hook(call_775349, url, valid)

proc call*(call_775350: Call_GetRemoveSourceIdentifierFromSubscription_775335;
          SourceIdentifier: string; SubscriptionName: string;
          Action: string = "RemoveSourceIdentifierFromSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## getRemoveSourceIdentifierFromSubscription
  ## Removes a source identifier from an existing event notification subscription.
  ##   Action: string (required)
  ##   SourceIdentifier: string (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group.
  ##   SubscriptionName: string (required)
  ##                   : The name of the event notification subscription you want to remove a source identifier from.
  ##   Version: string (required)
  var query_775351 = newJObject()
  add(query_775351, "Action", newJString(Action))
  add(query_775351, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_775351, "SubscriptionName", newJString(SubscriptionName))
  add(query_775351, "Version", newJString(Version))
  result = call_775350.call(nil, query_775351, nil, nil, nil)

var getRemoveSourceIdentifierFromSubscription* = Call_GetRemoveSourceIdentifierFromSubscription_775335(
    name: "getRemoveSourceIdentifierFromSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=RemoveSourceIdentifierFromSubscription",
    validator: validate_GetRemoveSourceIdentifierFromSubscription_775336,
    base: "/", url: url_GetRemoveSourceIdentifierFromSubscription_775337,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveTagsFromResource_775387 = ref object of OpenApiRestCall_772581
proc url_PostRemoveTagsFromResource_775389(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostRemoveTagsFromResource_775388(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes metadata tags from an Amazon Neptune resource.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775390 = query.getOrDefault("Action")
  valid_775390 = validateParameter(valid_775390, JString, required = true,
                                 default = newJString("RemoveTagsFromResource"))
  if valid_775390 != nil:
    section.add "Action", valid_775390
  var valid_775391 = query.getOrDefault("Version")
  valid_775391 = validateParameter(valid_775391, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775391 != nil:
    section.add "Version", valid_775391
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775392 = header.getOrDefault("X-Amz-Date")
  valid_775392 = validateParameter(valid_775392, JString, required = false,
                                 default = nil)
  if valid_775392 != nil:
    section.add "X-Amz-Date", valid_775392
  var valid_775393 = header.getOrDefault("X-Amz-Security-Token")
  valid_775393 = validateParameter(valid_775393, JString, required = false,
                                 default = nil)
  if valid_775393 != nil:
    section.add "X-Amz-Security-Token", valid_775393
  var valid_775394 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775394 = validateParameter(valid_775394, JString, required = false,
                                 default = nil)
  if valid_775394 != nil:
    section.add "X-Amz-Content-Sha256", valid_775394
  var valid_775395 = header.getOrDefault("X-Amz-Algorithm")
  valid_775395 = validateParameter(valid_775395, JString, required = false,
                                 default = nil)
  if valid_775395 != nil:
    section.add "X-Amz-Algorithm", valid_775395
  var valid_775396 = header.getOrDefault("X-Amz-Signature")
  valid_775396 = validateParameter(valid_775396, JString, required = false,
                                 default = nil)
  if valid_775396 != nil:
    section.add "X-Amz-Signature", valid_775396
  var valid_775397 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775397 = validateParameter(valid_775397, JString, required = false,
                                 default = nil)
  if valid_775397 != nil:
    section.add "X-Amz-SignedHeaders", valid_775397
  var valid_775398 = header.getOrDefault("X-Amz-Credential")
  valid_775398 = validateParameter(valid_775398, JString, required = false,
                                 default = nil)
  if valid_775398 != nil:
    section.add "X-Amz-Credential", valid_775398
  result.add "header", section
  ## parameters in `formData` object:
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   ResourceName: JString (required)
  ##               : The Amazon Neptune resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TagKeys` field"
  var valid_775399 = formData.getOrDefault("TagKeys")
  valid_775399 = validateParameter(valid_775399, JArray, required = true, default = nil)
  if valid_775399 != nil:
    section.add "TagKeys", valid_775399
  var valid_775400 = formData.getOrDefault("ResourceName")
  valid_775400 = validateParameter(valid_775400, JString, required = true,
                                 default = nil)
  if valid_775400 != nil:
    section.add "ResourceName", valid_775400
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775401: Call_PostRemoveTagsFromResource_775387; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes metadata tags from an Amazon Neptune resource.
  ## 
  let valid = call_775401.validator(path, query, header, formData, body)
  let scheme = call_775401.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775401.url(scheme.get, call_775401.host, call_775401.base,
                         call_775401.route, valid.getOrDefault("path"))
  result = hook(call_775401, url, valid)

proc call*(call_775402: Call_PostRemoveTagsFromResource_775387; TagKeys: JsonNode;
          ResourceName: string; Action: string = "RemoveTagsFromResource";
          Version: string = "2014-10-31"): Recallable =
  ## postRemoveTagsFromResource
  ## Removes metadata tags from an Amazon Neptune resource.
  ##   Action: string (required)
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   ResourceName: string (required)
  ##               : The Amazon Neptune resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   Version: string (required)
  var query_775403 = newJObject()
  var formData_775404 = newJObject()
  add(query_775403, "Action", newJString(Action))
  if TagKeys != nil:
    formData_775404.add "TagKeys", TagKeys
  add(formData_775404, "ResourceName", newJString(ResourceName))
  add(query_775403, "Version", newJString(Version))
  result = call_775402.call(nil, query_775403, nil, formData_775404, nil)

var postRemoveTagsFromResource* = Call_PostRemoveTagsFromResource_775387(
    name: "postRemoveTagsFromResource", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RemoveTagsFromResource",
    validator: validate_PostRemoveTagsFromResource_775388, base: "/",
    url: url_PostRemoveTagsFromResource_775389,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveTagsFromResource_775370 = ref object of OpenApiRestCall_772581
proc url_GetRemoveTagsFromResource_775372(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetRemoveTagsFromResource_775371(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes metadata tags from an Amazon Neptune resource.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceName: JString (required)
  ##               : The Amazon Neptune resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   Action: JString (required)
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceName` field"
  var valid_775373 = query.getOrDefault("ResourceName")
  valid_775373 = validateParameter(valid_775373, JString, required = true,
                                 default = nil)
  if valid_775373 != nil:
    section.add "ResourceName", valid_775373
  var valid_775374 = query.getOrDefault("Action")
  valid_775374 = validateParameter(valid_775374, JString, required = true,
                                 default = newJString("RemoveTagsFromResource"))
  if valid_775374 != nil:
    section.add "Action", valid_775374
  var valid_775375 = query.getOrDefault("TagKeys")
  valid_775375 = validateParameter(valid_775375, JArray, required = true, default = nil)
  if valid_775375 != nil:
    section.add "TagKeys", valid_775375
  var valid_775376 = query.getOrDefault("Version")
  valid_775376 = validateParameter(valid_775376, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775376 != nil:
    section.add "Version", valid_775376
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775377 = header.getOrDefault("X-Amz-Date")
  valid_775377 = validateParameter(valid_775377, JString, required = false,
                                 default = nil)
  if valid_775377 != nil:
    section.add "X-Amz-Date", valid_775377
  var valid_775378 = header.getOrDefault("X-Amz-Security-Token")
  valid_775378 = validateParameter(valid_775378, JString, required = false,
                                 default = nil)
  if valid_775378 != nil:
    section.add "X-Amz-Security-Token", valid_775378
  var valid_775379 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775379 = validateParameter(valid_775379, JString, required = false,
                                 default = nil)
  if valid_775379 != nil:
    section.add "X-Amz-Content-Sha256", valid_775379
  var valid_775380 = header.getOrDefault("X-Amz-Algorithm")
  valid_775380 = validateParameter(valid_775380, JString, required = false,
                                 default = nil)
  if valid_775380 != nil:
    section.add "X-Amz-Algorithm", valid_775380
  var valid_775381 = header.getOrDefault("X-Amz-Signature")
  valid_775381 = validateParameter(valid_775381, JString, required = false,
                                 default = nil)
  if valid_775381 != nil:
    section.add "X-Amz-Signature", valid_775381
  var valid_775382 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775382 = validateParameter(valid_775382, JString, required = false,
                                 default = nil)
  if valid_775382 != nil:
    section.add "X-Amz-SignedHeaders", valid_775382
  var valid_775383 = header.getOrDefault("X-Amz-Credential")
  valid_775383 = validateParameter(valid_775383, JString, required = false,
                                 default = nil)
  if valid_775383 != nil:
    section.add "X-Amz-Credential", valid_775383
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775384: Call_GetRemoveTagsFromResource_775370; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes metadata tags from an Amazon Neptune resource.
  ## 
  let valid = call_775384.validator(path, query, header, formData, body)
  let scheme = call_775384.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775384.url(scheme.get, call_775384.host, call_775384.base,
                         call_775384.route, valid.getOrDefault("path"))
  result = hook(call_775384, url, valid)

proc call*(call_775385: Call_GetRemoveTagsFromResource_775370;
          ResourceName: string; TagKeys: JsonNode;
          Action: string = "RemoveTagsFromResource"; Version: string = "2014-10-31"): Recallable =
  ## getRemoveTagsFromResource
  ## Removes metadata tags from an Amazon Neptune resource.
  ##   ResourceName: string (required)
  ##               : The Amazon Neptune resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   Action: string (required)
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   Version: string (required)
  var query_775386 = newJObject()
  add(query_775386, "ResourceName", newJString(ResourceName))
  add(query_775386, "Action", newJString(Action))
  if TagKeys != nil:
    query_775386.add "TagKeys", TagKeys
  add(query_775386, "Version", newJString(Version))
  result = call_775385.call(nil, query_775386, nil, nil, nil)

var getRemoveTagsFromResource* = Call_GetRemoveTagsFromResource_775370(
    name: "getRemoveTagsFromResource", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RemoveTagsFromResource",
    validator: validate_GetRemoveTagsFromResource_775371, base: "/",
    url: url_GetRemoveTagsFromResource_775372,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResetDBClusterParameterGroup_775423 = ref object of OpenApiRestCall_772581
proc url_PostResetDBClusterParameterGroup_775425(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostResetDBClusterParameterGroup_775424(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters.</p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <a>RebootDBInstance</a> request. You must call <a>RebootDBInstance</a> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775426 = query.getOrDefault("Action")
  valid_775426 = validateParameter(valid_775426, JString, required = true, default = newJString(
      "ResetDBClusterParameterGroup"))
  if valid_775426 != nil:
    section.add "Action", valid_775426
  var valid_775427 = query.getOrDefault("Version")
  valid_775427 = validateParameter(valid_775427, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775427 != nil:
    section.add "Version", valid_775427
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775428 = header.getOrDefault("X-Amz-Date")
  valid_775428 = validateParameter(valid_775428, JString, required = false,
                                 default = nil)
  if valid_775428 != nil:
    section.add "X-Amz-Date", valid_775428
  var valid_775429 = header.getOrDefault("X-Amz-Security-Token")
  valid_775429 = validateParameter(valid_775429, JString, required = false,
                                 default = nil)
  if valid_775429 != nil:
    section.add "X-Amz-Security-Token", valid_775429
  var valid_775430 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775430 = validateParameter(valid_775430, JString, required = false,
                                 default = nil)
  if valid_775430 != nil:
    section.add "X-Amz-Content-Sha256", valid_775430
  var valid_775431 = header.getOrDefault("X-Amz-Algorithm")
  valid_775431 = validateParameter(valid_775431, JString, required = false,
                                 default = nil)
  if valid_775431 != nil:
    section.add "X-Amz-Algorithm", valid_775431
  var valid_775432 = header.getOrDefault("X-Amz-Signature")
  valid_775432 = validateParameter(valid_775432, JString, required = false,
                                 default = nil)
  if valid_775432 != nil:
    section.add "X-Amz-Signature", valid_775432
  var valid_775433 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775433 = validateParameter(valid_775433, JString, required = false,
                                 default = nil)
  if valid_775433 != nil:
    section.add "X-Amz-SignedHeaders", valid_775433
  var valid_775434 = header.getOrDefault("X-Amz-Credential")
  valid_775434 = validateParameter(valid_775434, JString, required = false,
                                 default = nil)
  if valid_775434 != nil:
    section.add "X-Amz-Credential", valid_775434
  result.add "header", section
  ## parameters in `formData` object:
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is set to <code>true</code>.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   ResetAllParameters: JBool
  ##                     : A value that is set to <code>true</code> to reset all parameters in the DB cluster parameter group to their default values, and <code>false</code> otherwise. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  section = newJObject()
  var valid_775435 = formData.getOrDefault("Parameters")
  valid_775435 = validateParameter(valid_775435, JArray, required = false,
                                 default = nil)
  if valid_775435 != nil:
    section.add "Parameters", valid_775435
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_775436 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_775436 = validateParameter(valid_775436, JString, required = true,
                                 default = nil)
  if valid_775436 != nil:
    section.add "DBClusterParameterGroupName", valid_775436
  var valid_775437 = formData.getOrDefault("ResetAllParameters")
  valid_775437 = validateParameter(valid_775437, JBool, required = false, default = nil)
  if valid_775437 != nil:
    section.add "ResetAllParameters", valid_775437
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775438: Call_PostResetDBClusterParameterGroup_775423;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters.</p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <a>RebootDBInstance</a> request. You must call <a>RebootDBInstance</a> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p>
  ## 
  let valid = call_775438.validator(path, query, header, formData, body)
  let scheme = call_775438.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775438.url(scheme.get, call_775438.host, call_775438.base,
                         call_775438.route, valid.getOrDefault("path"))
  result = hook(call_775438, url, valid)

proc call*(call_775439: Call_PostResetDBClusterParameterGroup_775423;
          DBClusterParameterGroupName: string; Parameters: JsonNode = nil;
          Action: string = "ResetDBClusterParameterGroup";
          ResetAllParameters: bool = false; Version: string = "2014-10-31"): Recallable =
  ## postResetDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters.</p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <a>RebootDBInstance</a> request. You must call <a>RebootDBInstance</a> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p>
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is set to <code>true</code>.
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   ResetAllParameters: bool
  ##                     : A value that is set to <code>true</code> to reset all parameters in the DB cluster parameter group to their default values, and <code>false</code> otherwise. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Version: string (required)
  var query_775440 = newJObject()
  var formData_775441 = newJObject()
  if Parameters != nil:
    formData_775441.add "Parameters", Parameters
  add(query_775440, "Action", newJString(Action))
  add(formData_775441, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(formData_775441, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_775440, "Version", newJString(Version))
  result = call_775439.call(nil, query_775440, nil, formData_775441, nil)

var postResetDBClusterParameterGroup* = Call_PostResetDBClusterParameterGroup_775423(
    name: "postResetDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBClusterParameterGroup",
    validator: validate_PostResetDBClusterParameterGroup_775424, base: "/",
    url: url_PostResetDBClusterParameterGroup_775425,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResetDBClusterParameterGroup_775405 = ref object of OpenApiRestCall_772581
proc url_GetResetDBClusterParameterGroup_775407(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetResetDBClusterParameterGroup_775406(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters.</p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <a>RebootDBInstance</a> request. You must call <a>RebootDBInstance</a> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is set to <code>true</code>.
  ##   Action: JString (required)
  ##   ResetAllParameters: JBool
  ##                     : A value that is set to <code>true</code> to reset all parameters in the DB cluster parameter group to their default values, and <code>false</code> otherwise. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_775408 = query.getOrDefault("DBClusterParameterGroupName")
  valid_775408 = validateParameter(valid_775408, JString, required = true,
                                 default = nil)
  if valid_775408 != nil:
    section.add "DBClusterParameterGroupName", valid_775408
  var valid_775409 = query.getOrDefault("Parameters")
  valid_775409 = validateParameter(valid_775409, JArray, required = false,
                                 default = nil)
  if valid_775409 != nil:
    section.add "Parameters", valid_775409
  var valid_775410 = query.getOrDefault("Action")
  valid_775410 = validateParameter(valid_775410, JString, required = true, default = newJString(
      "ResetDBClusterParameterGroup"))
  if valid_775410 != nil:
    section.add "Action", valid_775410
  var valid_775411 = query.getOrDefault("ResetAllParameters")
  valid_775411 = validateParameter(valid_775411, JBool, required = false, default = nil)
  if valid_775411 != nil:
    section.add "ResetAllParameters", valid_775411
  var valid_775412 = query.getOrDefault("Version")
  valid_775412 = validateParameter(valid_775412, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775412 != nil:
    section.add "Version", valid_775412
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775413 = header.getOrDefault("X-Amz-Date")
  valid_775413 = validateParameter(valid_775413, JString, required = false,
                                 default = nil)
  if valid_775413 != nil:
    section.add "X-Amz-Date", valid_775413
  var valid_775414 = header.getOrDefault("X-Amz-Security-Token")
  valid_775414 = validateParameter(valid_775414, JString, required = false,
                                 default = nil)
  if valid_775414 != nil:
    section.add "X-Amz-Security-Token", valid_775414
  var valid_775415 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775415 = validateParameter(valid_775415, JString, required = false,
                                 default = nil)
  if valid_775415 != nil:
    section.add "X-Amz-Content-Sha256", valid_775415
  var valid_775416 = header.getOrDefault("X-Amz-Algorithm")
  valid_775416 = validateParameter(valid_775416, JString, required = false,
                                 default = nil)
  if valid_775416 != nil:
    section.add "X-Amz-Algorithm", valid_775416
  var valid_775417 = header.getOrDefault("X-Amz-Signature")
  valid_775417 = validateParameter(valid_775417, JString, required = false,
                                 default = nil)
  if valid_775417 != nil:
    section.add "X-Amz-Signature", valid_775417
  var valid_775418 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775418 = validateParameter(valid_775418, JString, required = false,
                                 default = nil)
  if valid_775418 != nil:
    section.add "X-Amz-SignedHeaders", valid_775418
  var valid_775419 = header.getOrDefault("X-Amz-Credential")
  valid_775419 = validateParameter(valid_775419, JString, required = false,
                                 default = nil)
  if valid_775419 != nil:
    section.add "X-Amz-Credential", valid_775419
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775420: Call_GetResetDBClusterParameterGroup_775405;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters.</p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <a>RebootDBInstance</a> request. You must call <a>RebootDBInstance</a> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p>
  ## 
  let valid = call_775420.validator(path, query, header, formData, body)
  let scheme = call_775420.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775420.url(scheme.get, call_775420.host, call_775420.base,
                         call_775420.route, valid.getOrDefault("path"))
  result = hook(call_775420, url, valid)

proc call*(call_775421: Call_GetResetDBClusterParameterGroup_775405;
          DBClusterParameterGroupName: string; Parameters: JsonNode = nil;
          Action: string = "ResetDBClusterParameterGroup";
          ResetAllParameters: bool = false; Version: string = "2014-10-31"): Recallable =
  ## getResetDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters.</p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <a>RebootDBInstance</a> request. You must call <a>RebootDBInstance</a> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p>
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is set to <code>true</code>.
  ##   Action: string (required)
  ##   ResetAllParameters: bool
  ##                     : A value that is set to <code>true</code> to reset all parameters in the DB cluster parameter group to their default values, and <code>false</code> otherwise. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Version: string (required)
  var query_775422 = newJObject()
  add(query_775422, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if Parameters != nil:
    query_775422.add "Parameters", Parameters
  add(query_775422, "Action", newJString(Action))
  add(query_775422, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_775422, "Version", newJString(Version))
  result = call_775421.call(nil, query_775422, nil, nil, nil)

var getResetDBClusterParameterGroup* = Call_GetResetDBClusterParameterGroup_775405(
    name: "getResetDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBClusterParameterGroup",
    validator: validate_GetResetDBClusterParameterGroup_775406, base: "/",
    url: url_GetResetDBClusterParameterGroup_775407,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResetDBParameterGroup_775460 = ref object of OpenApiRestCall_772581
proc url_PostResetDBParameterGroup_775462(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostResetDBParameterGroup_775461(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775463 = query.getOrDefault("Action")
  valid_775463 = validateParameter(valid_775463, JString, required = true,
                                 default = newJString("ResetDBParameterGroup"))
  if valid_775463 != nil:
    section.add "Action", valid_775463
  var valid_775464 = query.getOrDefault("Version")
  valid_775464 = validateParameter(valid_775464, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775464 != nil:
    section.add "Version", valid_775464
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775465 = header.getOrDefault("X-Amz-Date")
  valid_775465 = validateParameter(valid_775465, JString, required = false,
                                 default = nil)
  if valid_775465 != nil:
    section.add "X-Amz-Date", valid_775465
  var valid_775466 = header.getOrDefault("X-Amz-Security-Token")
  valid_775466 = validateParameter(valid_775466, JString, required = false,
                                 default = nil)
  if valid_775466 != nil:
    section.add "X-Amz-Security-Token", valid_775466
  var valid_775467 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775467 = validateParameter(valid_775467, JString, required = false,
                                 default = nil)
  if valid_775467 != nil:
    section.add "X-Amz-Content-Sha256", valid_775467
  var valid_775468 = header.getOrDefault("X-Amz-Algorithm")
  valid_775468 = validateParameter(valid_775468, JString, required = false,
                                 default = nil)
  if valid_775468 != nil:
    section.add "X-Amz-Algorithm", valid_775468
  var valid_775469 = header.getOrDefault("X-Amz-Signature")
  valid_775469 = validateParameter(valid_775469, JString, required = false,
                                 default = nil)
  if valid_775469 != nil:
    section.add "X-Amz-Signature", valid_775469
  var valid_775470 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775470 = validateParameter(valid_775470, JString, required = false,
                                 default = nil)
  if valid_775470 != nil:
    section.add "X-Amz-SignedHeaders", valid_775470
  var valid_775471 = header.getOrDefault("X-Amz-Credential")
  valid_775471 = validateParameter(valid_775471, JString, required = false,
                                 default = nil)
  if valid_775471 != nil:
    section.add "X-Amz-Credential", valid_775471
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   ResetAllParameters: JBool
  ##                     : <p>Specifies whether (<code>true</code>) or not (<code>false</code>) to reset all parameters in the DB parameter group to default values.</p> <p>Default: <code>true</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_775472 = formData.getOrDefault("DBParameterGroupName")
  valid_775472 = validateParameter(valid_775472, JString, required = true,
                                 default = nil)
  if valid_775472 != nil:
    section.add "DBParameterGroupName", valid_775472
  var valid_775473 = formData.getOrDefault("Parameters")
  valid_775473 = validateParameter(valid_775473, JArray, required = false,
                                 default = nil)
  if valid_775473 != nil:
    section.add "Parameters", valid_775473
  var valid_775474 = formData.getOrDefault("ResetAllParameters")
  valid_775474 = validateParameter(valid_775474, JBool, required = false, default = nil)
  if valid_775474 != nil:
    section.add "ResetAllParameters", valid_775474
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775475: Call_PostResetDBParameterGroup_775460; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request.
  ## 
  let valid = call_775475.validator(path, query, header, formData, body)
  let scheme = call_775475.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775475.url(scheme.get, call_775475.host, call_775475.base,
                         call_775475.route, valid.getOrDefault("path"))
  result = hook(call_775475, url, valid)

proc call*(call_775476: Call_PostResetDBParameterGroup_775460;
          DBParameterGroupName: string; Parameters: JsonNode = nil;
          Action: string = "ResetDBParameterGroup";
          ResetAllParameters: bool = false; Version: string = "2014-10-31"): Recallable =
  ## postResetDBParameterGroup
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   Action: string (required)
  ##   ResetAllParameters: bool
  ##                     : <p>Specifies whether (<code>true</code>) or not (<code>false</code>) to reset all parameters in the DB parameter group to default values.</p> <p>Default: <code>true</code> </p>
  ##   Version: string (required)
  var query_775477 = newJObject()
  var formData_775478 = newJObject()
  add(formData_775478, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Parameters != nil:
    formData_775478.add "Parameters", Parameters
  add(query_775477, "Action", newJString(Action))
  add(formData_775478, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_775477, "Version", newJString(Version))
  result = call_775476.call(nil, query_775477, nil, formData_775478, nil)

var postResetDBParameterGroup* = Call_PostResetDBParameterGroup_775460(
    name: "postResetDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBParameterGroup",
    validator: validate_PostResetDBParameterGroup_775461, base: "/",
    url: url_PostResetDBParameterGroup_775462,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResetDBParameterGroup_775442 = ref object of OpenApiRestCall_772581
proc url_GetResetDBParameterGroup_775444(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetResetDBParameterGroup_775443(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   Action: JString (required)
  ##   ResetAllParameters: JBool
  ##                     : <p>Specifies whether (<code>true</code>) or not (<code>false</code>) to reset all parameters in the DB parameter group to default values.</p> <p>Default: <code>true</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_775445 = query.getOrDefault("DBParameterGroupName")
  valid_775445 = validateParameter(valid_775445, JString, required = true,
                                 default = nil)
  if valid_775445 != nil:
    section.add "DBParameterGroupName", valid_775445
  var valid_775446 = query.getOrDefault("Parameters")
  valid_775446 = validateParameter(valid_775446, JArray, required = false,
                                 default = nil)
  if valid_775446 != nil:
    section.add "Parameters", valid_775446
  var valid_775447 = query.getOrDefault("Action")
  valid_775447 = validateParameter(valid_775447, JString, required = true,
                                 default = newJString("ResetDBParameterGroup"))
  if valid_775447 != nil:
    section.add "Action", valid_775447
  var valid_775448 = query.getOrDefault("ResetAllParameters")
  valid_775448 = validateParameter(valid_775448, JBool, required = false, default = nil)
  if valid_775448 != nil:
    section.add "ResetAllParameters", valid_775448
  var valid_775449 = query.getOrDefault("Version")
  valid_775449 = validateParameter(valid_775449, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775449 != nil:
    section.add "Version", valid_775449
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775450 = header.getOrDefault("X-Amz-Date")
  valid_775450 = validateParameter(valid_775450, JString, required = false,
                                 default = nil)
  if valid_775450 != nil:
    section.add "X-Amz-Date", valid_775450
  var valid_775451 = header.getOrDefault("X-Amz-Security-Token")
  valid_775451 = validateParameter(valid_775451, JString, required = false,
                                 default = nil)
  if valid_775451 != nil:
    section.add "X-Amz-Security-Token", valid_775451
  var valid_775452 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775452 = validateParameter(valid_775452, JString, required = false,
                                 default = nil)
  if valid_775452 != nil:
    section.add "X-Amz-Content-Sha256", valid_775452
  var valid_775453 = header.getOrDefault("X-Amz-Algorithm")
  valid_775453 = validateParameter(valid_775453, JString, required = false,
                                 default = nil)
  if valid_775453 != nil:
    section.add "X-Amz-Algorithm", valid_775453
  var valid_775454 = header.getOrDefault("X-Amz-Signature")
  valid_775454 = validateParameter(valid_775454, JString, required = false,
                                 default = nil)
  if valid_775454 != nil:
    section.add "X-Amz-Signature", valid_775454
  var valid_775455 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775455 = validateParameter(valid_775455, JString, required = false,
                                 default = nil)
  if valid_775455 != nil:
    section.add "X-Amz-SignedHeaders", valid_775455
  var valid_775456 = header.getOrDefault("X-Amz-Credential")
  valid_775456 = validateParameter(valid_775456, JString, required = false,
                                 default = nil)
  if valid_775456 != nil:
    section.add "X-Amz-Credential", valid_775456
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775457: Call_GetResetDBParameterGroup_775442; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request.
  ## 
  let valid = call_775457.validator(path, query, header, formData, body)
  let scheme = call_775457.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775457.url(scheme.get, call_775457.host, call_775457.base,
                         call_775457.route, valid.getOrDefault("path"))
  result = hook(call_775457, url, valid)

proc call*(call_775458: Call_GetResetDBParameterGroup_775442;
          DBParameterGroupName: string; Parameters: JsonNode = nil;
          Action: string = "ResetDBParameterGroup";
          ResetAllParameters: bool = false; Version: string = "2014-10-31"): Recallable =
  ## getResetDBParameterGroup
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   Action: string (required)
  ##   ResetAllParameters: bool
  ##                     : <p>Specifies whether (<code>true</code>) or not (<code>false</code>) to reset all parameters in the DB parameter group to default values.</p> <p>Default: <code>true</code> </p>
  ##   Version: string (required)
  var query_775459 = newJObject()
  add(query_775459, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Parameters != nil:
    query_775459.add "Parameters", Parameters
  add(query_775459, "Action", newJString(Action))
  add(query_775459, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_775459, "Version", newJString(Version))
  result = call_775458.call(nil, query_775459, nil, nil, nil)

var getResetDBParameterGroup* = Call_GetResetDBParameterGroup_775442(
    name: "getResetDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBParameterGroup",
    validator: validate_GetResetDBParameterGroup_775443, base: "/",
    url: url_GetResetDBParameterGroup_775444, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBClusterFromSnapshot_775509 = ref object of OpenApiRestCall_772581
proc url_PostRestoreDBClusterFromSnapshot_775511(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostRestoreDBClusterFromSnapshot_775510(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775512 = query.getOrDefault("Action")
  valid_775512 = validateParameter(valid_775512, JString, required = true, default = newJString(
      "RestoreDBClusterFromSnapshot"))
  if valid_775512 != nil:
    section.add "Action", valid_775512
  var valid_775513 = query.getOrDefault("Version")
  valid_775513 = validateParameter(valid_775513, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775513 != nil:
    section.add "Version", valid_775513
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775514 = header.getOrDefault("X-Amz-Date")
  valid_775514 = validateParameter(valid_775514, JString, required = false,
                                 default = nil)
  if valid_775514 != nil:
    section.add "X-Amz-Date", valid_775514
  var valid_775515 = header.getOrDefault("X-Amz-Security-Token")
  valid_775515 = validateParameter(valid_775515, JString, required = false,
                                 default = nil)
  if valid_775515 != nil:
    section.add "X-Amz-Security-Token", valid_775515
  var valid_775516 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775516 = validateParameter(valid_775516, JString, required = false,
                                 default = nil)
  if valid_775516 != nil:
    section.add "X-Amz-Content-Sha256", valid_775516
  var valid_775517 = header.getOrDefault("X-Amz-Algorithm")
  valid_775517 = validateParameter(valid_775517, JString, required = false,
                                 default = nil)
  if valid_775517 != nil:
    section.add "X-Amz-Algorithm", valid_775517
  var valid_775518 = header.getOrDefault("X-Amz-Signature")
  valid_775518 = validateParameter(valid_775518, JString, required = false,
                                 default = nil)
  if valid_775518 != nil:
    section.add "X-Amz-Signature", valid_775518
  var valid_775519 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775519 = validateParameter(valid_775519, JString, required = false,
                                 default = nil)
  if valid_775519 != nil:
    section.add "X-Amz-SignedHeaders", valid_775519
  var valid_775520 = header.getOrDefault("X-Amz-Credential")
  valid_775520 = validateParameter(valid_775520, JString, required = false,
                                 default = nil)
  if valid_775520 != nil:
    section.add "X-Amz-Credential", valid_775520
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   Engine: JString (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   OptionGroupName: JString
  ##                  : The name of the option group to use for the restored DB cluster.
  ##   Tags: JArray
  ##       : The tags to be assigned to the restored DB cluster.
  ##   DBSubnetGroupName: JString
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of EC2 Availability Zones that instances in the restored DB cluster can be created in.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with the new DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   DatabaseName: JString
  ##               : Not supported.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul>
  ##   SnapshotIdentifier: JString (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   EngineVersion: JString
  ##                : The version of the database engine to use for the new DB cluster.
  section = newJObject()
  var valid_775521 = formData.getOrDefault("Port")
  valid_775521 = validateParameter(valid_775521, JInt, required = false, default = nil)
  if valid_775521 != nil:
    section.add "Port", valid_775521
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_775522 = formData.getOrDefault("Engine")
  valid_775522 = validateParameter(valid_775522, JString, required = true,
                                 default = nil)
  if valid_775522 != nil:
    section.add "Engine", valid_775522
  var valid_775523 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_775523 = validateParameter(valid_775523, JArray, required = false,
                                 default = nil)
  if valid_775523 != nil:
    section.add "VpcSecurityGroupIds", valid_775523
  var valid_775524 = formData.getOrDefault("OptionGroupName")
  valid_775524 = validateParameter(valid_775524, JString, required = false,
                                 default = nil)
  if valid_775524 != nil:
    section.add "OptionGroupName", valid_775524
  var valid_775525 = formData.getOrDefault("Tags")
  valid_775525 = validateParameter(valid_775525, JArray, required = false,
                                 default = nil)
  if valid_775525 != nil:
    section.add "Tags", valid_775525
  var valid_775526 = formData.getOrDefault("DBSubnetGroupName")
  valid_775526 = validateParameter(valid_775526, JString, required = false,
                                 default = nil)
  if valid_775526 != nil:
    section.add "DBSubnetGroupName", valid_775526
  var valid_775527 = formData.getOrDefault("AvailabilityZones")
  valid_775527 = validateParameter(valid_775527, JArray, required = false,
                                 default = nil)
  if valid_775527 != nil:
    section.add "AvailabilityZones", valid_775527
  var valid_775528 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_775528 = validateParameter(valid_775528, JString, required = false,
                                 default = nil)
  if valid_775528 != nil:
    section.add "DBClusterParameterGroupName", valid_775528
  var valid_775529 = formData.getOrDefault("DatabaseName")
  valid_775529 = validateParameter(valid_775529, JString, required = false,
                                 default = nil)
  if valid_775529 != nil:
    section.add "DatabaseName", valid_775529
  var valid_775530 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_775530 = validateParameter(valid_775530, JArray, required = false,
                                 default = nil)
  if valid_775530 != nil:
    section.add "EnableCloudwatchLogsExports", valid_775530
  var valid_775531 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_775531 = validateParameter(valid_775531, JBool, required = false, default = nil)
  if valid_775531 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_775531
  var valid_775532 = formData.getOrDefault("KmsKeyId")
  valid_775532 = validateParameter(valid_775532, JString, required = false,
                                 default = nil)
  if valid_775532 != nil:
    section.add "KmsKeyId", valid_775532
  var valid_775533 = formData.getOrDefault("SnapshotIdentifier")
  valid_775533 = validateParameter(valid_775533, JString, required = true,
                                 default = nil)
  if valid_775533 != nil:
    section.add "SnapshotIdentifier", valid_775533
  var valid_775534 = formData.getOrDefault("DBClusterIdentifier")
  valid_775534 = validateParameter(valid_775534, JString, required = true,
                                 default = nil)
  if valid_775534 != nil:
    section.add "DBClusterIdentifier", valid_775534
  var valid_775535 = formData.getOrDefault("EngineVersion")
  valid_775535 = validateParameter(valid_775535, JString, required = false,
                                 default = nil)
  if valid_775535 != nil:
    section.add "EngineVersion", valid_775535
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775536: Call_PostRestoreDBClusterFromSnapshot_775509;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p>
  ## 
  let valid = call_775536.validator(path, query, header, formData, body)
  let scheme = call_775536.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775536.url(scheme.get, call_775536.host, call_775536.base,
                         call_775536.route, valid.getOrDefault("path"))
  result = hook(call_775536, url, valid)

proc call*(call_775537: Call_PostRestoreDBClusterFromSnapshot_775509;
          Engine: string; SnapshotIdentifier: string; DBClusterIdentifier: string;
          Port: int = 0; VpcSecurityGroupIds: JsonNode = nil;
          OptionGroupName: string = ""; Tags: JsonNode = nil;
          DBSubnetGroupName: string = "";
          Action: string = "RestoreDBClusterFromSnapshot";
          AvailabilityZones: JsonNode = nil;
          DBClusterParameterGroupName: string = ""; DatabaseName: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false; KmsKeyId: string = "";
          EngineVersion: string = ""; Version: string = "2014-10-31"): Recallable =
  ## postRestoreDBClusterFromSnapshot
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p>
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   Engine: string (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   OptionGroupName: string
  ##                  : The name of the option group to use for the restored DB cluster.
  ##   Tags: JArray
  ##       : The tags to be assigned to the restored DB cluster.
  ##   DBSubnetGroupName: string
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Action: string (required)
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of EC2 Availability Zones that instances in the restored DB cluster can be created in.
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with the new DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   DatabaseName: string
  ##               : Not supported.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul>
  ##   SnapshotIdentifier: string (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   EngineVersion: string
  ##                : The version of the database engine to use for the new DB cluster.
  ##   Version: string (required)
  var query_775538 = newJObject()
  var formData_775539 = newJObject()
  add(formData_775539, "Port", newJInt(Port))
  add(formData_775539, "Engine", newJString(Engine))
  if VpcSecurityGroupIds != nil:
    formData_775539.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_775539, "OptionGroupName", newJString(OptionGroupName))
  if Tags != nil:
    formData_775539.add "Tags", Tags
  add(formData_775539, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_775538, "Action", newJString(Action))
  if AvailabilityZones != nil:
    formData_775539.add "AvailabilityZones", AvailabilityZones
  add(formData_775539, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(formData_775539, "DatabaseName", newJString(DatabaseName))
  if EnableCloudwatchLogsExports != nil:
    formData_775539.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_775539, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_775539, "KmsKeyId", newJString(KmsKeyId))
  add(formData_775539, "SnapshotIdentifier", newJString(SnapshotIdentifier))
  add(formData_775539, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_775539, "EngineVersion", newJString(EngineVersion))
  add(query_775538, "Version", newJString(Version))
  result = call_775537.call(nil, query_775538, nil, formData_775539, nil)

var postRestoreDBClusterFromSnapshot* = Call_PostRestoreDBClusterFromSnapshot_775509(
    name: "postRestoreDBClusterFromSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterFromSnapshot",
    validator: validate_PostRestoreDBClusterFromSnapshot_775510, base: "/",
    url: url_PostRestoreDBClusterFromSnapshot_775511,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBClusterFromSnapshot_775479 = ref object of OpenApiRestCall_772581
proc url_GetRestoreDBClusterFromSnapshot_775481(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetRestoreDBClusterFromSnapshot_775480(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with the new DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of EC2 Availability Zones that instances in the restored DB cluster can be created in.
  ##   DatabaseName: JString
  ##               : Not supported.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   OptionGroupName: JString
  ##                  : The name of the option group to use for the restored DB cluster.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs.
  ##   Tags: JArray
  ##       : The tags to be assigned to the restored DB cluster.
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : The version of the database engine to use for the new DB cluster.
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   SnapshotIdentifier: JString (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_775482 = query.getOrDefault("Engine")
  valid_775482 = validateParameter(valid_775482, JString, required = true,
                                 default = nil)
  if valid_775482 != nil:
    section.add "Engine", valid_775482
  var valid_775483 = query.getOrDefault("DBClusterParameterGroupName")
  valid_775483 = validateParameter(valid_775483, JString, required = false,
                                 default = nil)
  if valid_775483 != nil:
    section.add "DBClusterParameterGroupName", valid_775483
  var valid_775484 = query.getOrDefault("AvailabilityZones")
  valid_775484 = validateParameter(valid_775484, JArray, required = false,
                                 default = nil)
  if valid_775484 != nil:
    section.add "AvailabilityZones", valid_775484
  var valid_775485 = query.getOrDefault("DatabaseName")
  valid_775485 = validateParameter(valid_775485, JString, required = false,
                                 default = nil)
  if valid_775485 != nil:
    section.add "DatabaseName", valid_775485
  var valid_775486 = query.getOrDefault("DBClusterIdentifier")
  valid_775486 = validateParameter(valid_775486, JString, required = true,
                                 default = nil)
  if valid_775486 != nil:
    section.add "DBClusterIdentifier", valid_775486
  var valid_775487 = query.getOrDefault("OptionGroupName")
  valid_775487 = validateParameter(valid_775487, JString, required = false,
                                 default = nil)
  if valid_775487 != nil:
    section.add "OptionGroupName", valid_775487
  var valid_775488 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_775488 = validateParameter(valid_775488, JBool, required = false, default = nil)
  if valid_775488 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_775488
  var valid_775489 = query.getOrDefault("VpcSecurityGroupIds")
  valid_775489 = validateParameter(valid_775489, JArray, required = false,
                                 default = nil)
  if valid_775489 != nil:
    section.add "VpcSecurityGroupIds", valid_775489
  var valid_775490 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_775490 = validateParameter(valid_775490, JArray, required = false,
                                 default = nil)
  if valid_775490 != nil:
    section.add "EnableCloudwatchLogsExports", valid_775490
  var valid_775491 = query.getOrDefault("Tags")
  valid_775491 = validateParameter(valid_775491, JArray, required = false,
                                 default = nil)
  if valid_775491 != nil:
    section.add "Tags", valid_775491
  var valid_775492 = query.getOrDefault("Action")
  valid_775492 = validateParameter(valid_775492, JString, required = true, default = newJString(
      "RestoreDBClusterFromSnapshot"))
  if valid_775492 != nil:
    section.add "Action", valid_775492
  var valid_775493 = query.getOrDefault("DBSubnetGroupName")
  valid_775493 = validateParameter(valid_775493, JString, required = false,
                                 default = nil)
  if valid_775493 != nil:
    section.add "DBSubnetGroupName", valid_775493
  var valid_775494 = query.getOrDefault("KmsKeyId")
  valid_775494 = validateParameter(valid_775494, JString, required = false,
                                 default = nil)
  if valid_775494 != nil:
    section.add "KmsKeyId", valid_775494
  var valid_775495 = query.getOrDefault("EngineVersion")
  valid_775495 = validateParameter(valid_775495, JString, required = false,
                                 default = nil)
  if valid_775495 != nil:
    section.add "EngineVersion", valid_775495
  var valid_775496 = query.getOrDefault("Port")
  valid_775496 = validateParameter(valid_775496, JInt, required = false, default = nil)
  if valid_775496 != nil:
    section.add "Port", valid_775496
  var valid_775497 = query.getOrDefault("SnapshotIdentifier")
  valid_775497 = validateParameter(valid_775497, JString, required = true,
                                 default = nil)
  if valid_775497 != nil:
    section.add "SnapshotIdentifier", valid_775497
  var valid_775498 = query.getOrDefault("Version")
  valid_775498 = validateParameter(valid_775498, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775498 != nil:
    section.add "Version", valid_775498
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775499 = header.getOrDefault("X-Amz-Date")
  valid_775499 = validateParameter(valid_775499, JString, required = false,
                                 default = nil)
  if valid_775499 != nil:
    section.add "X-Amz-Date", valid_775499
  var valid_775500 = header.getOrDefault("X-Amz-Security-Token")
  valid_775500 = validateParameter(valid_775500, JString, required = false,
                                 default = nil)
  if valid_775500 != nil:
    section.add "X-Amz-Security-Token", valid_775500
  var valid_775501 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775501 = validateParameter(valid_775501, JString, required = false,
                                 default = nil)
  if valid_775501 != nil:
    section.add "X-Amz-Content-Sha256", valid_775501
  var valid_775502 = header.getOrDefault("X-Amz-Algorithm")
  valid_775502 = validateParameter(valid_775502, JString, required = false,
                                 default = nil)
  if valid_775502 != nil:
    section.add "X-Amz-Algorithm", valid_775502
  var valid_775503 = header.getOrDefault("X-Amz-Signature")
  valid_775503 = validateParameter(valid_775503, JString, required = false,
                                 default = nil)
  if valid_775503 != nil:
    section.add "X-Amz-Signature", valid_775503
  var valid_775504 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775504 = validateParameter(valid_775504, JString, required = false,
                                 default = nil)
  if valid_775504 != nil:
    section.add "X-Amz-SignedHeaders", valid_775504
  var valid_775505 = header.getOrDefault("X-Amz-Credential")
  valid_775505 = validateParameter(valid_775505, JString, required = false,
                                 default = nil)
  if valid_775505 != nil:
    section.add "X-Amz-Credential", valid_775505
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775506: Call_GetRestoreDBClusterFromSnapshot_775479;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p>
  ## 
  let valid = call_775506.validator(path, query, header, formData, body)
  let scheme = call_775506.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775506.url(scheme.get, call_775506.host, call_775506.base,
                         call_775506.route, valid.getOrDefault("path"))
  result = hook(call_775506, url, valid)

proc call*(call_775507: Call_GetRestoreDBClusterFromSnapshot_775479;
          Engine: string; DBClusterIdentifier: string; SnapshotIdentifier: string;
          DBClusterParameterGroupName: string = "";
          AvailabilityZones: JsonNode = nil; DatabaseName: string = "";
          OptionGroupName: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          VpcSecurityGroupIds: JsonNode = nil;
          EnableCloudwatchLogsExports: JsonNode = nil; Tags: JsonNode = nil;
          Action: string = "RestoreDBClusterFromSnapshot";
          DBSubnetGroupName: string = ""; KmsKeyId: string = "";
          EngineVersion: string = ""; Port: int = 0; Version: string = "2014-10-31"): Recallable =
  ## getRestoreDBClusterFromSnapshot
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p>
  ##   Engine: string (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with the new DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of EC2 Availability Zones that instances in the restored DB cluster can be created in.
  ##   DatabaseName: string
  ##               : Not supported.
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   OptionGroupName: string
  ##                  : The name of the option group to use for the restored DB cluster.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs.
  ##   Tags: JArray
  ##       : The tags to be assigned to the restored DB cluster.
  ##   Action: string (required)
  ##   DBSubnetGroupName: string
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul>
  ##   EngineVersion: string
  ##                : The version of the database engine to use for the new DB cluster.
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   SnapshotIdentifier: string (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   Version: string (required)
  var query_775508 = newJObject()
  add(query_775508, "Engine", newJString(Engine))
  add(query_775508, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if AvailabilityZones != nil:
    query_775508.add "AvailabilityZones", AvailabilityZones
  add(query_775508, "DatabaseName", newJString(DatabaseName))
  add(query_775508, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_775508, "OptionGroupName", newJString(OptionGroupName))
  add(query_775508, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if VpcSecurityGroupIds != nil:
    query_775508.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if EnableCloudwatchLogsExports != nil:
    query_775508.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  if Tags != nil:
    query_775508.add "Tags", Tags
  add(query_775508, "Action", newJString(Action))
  add(query_775508, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_775508, "KmsKeyId", newJString(KmsKeyId))
  add(query_775508, "EngineVersion", newJString(EngineVersion))
  add(query_775508, "Port", newJInt(Port))
  add(query_775508, "SnapshotIdentifier", newJString(SnapshotIdentifier))
  add(query_775508, "Version", newJString(Version))
  result = call_775507.call(nil, query_775508, nil, nil, nil)

var getRestoreDBClusterFromSnapshot* = Call_GetRestoreDBClusterFromSnapshot_775479(
    name: "getRestoreDBClusterFromSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterFromSnapshot",
    validator: validate_GetRestoreDBClusterFromSnapshot_775480, base: "/",
    url: url_GetRestoreDBClusterFromSnapshot_775481,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBClusterToPointInTime_775569 = ref object of OpenApiRestCall_772581
proc url_PostRestoreDBClusterToPointInTime_775571(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostRestoreDBClusterToPointInTime_775570(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group.</p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <a>CreateDBInstance</a> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775572 = query.getOrDefault("Action")
  valid_775572 = validateParameter(valid_775572, JString, required = true, default = newJString(
      "RestoreDBClusterToPointInTime"))
  if valid_775572 != nil:
    section.add "Action", valid_775572
  var valid_775573 = query.getOrDefault("Version")
  valid_775573 = validateParameter(valid_775573, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775573 != nil:
    section.add "Version", valid_775573
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775574 = header.getOrDefault("X-Amz-Date")
  valid_775574 = validateParameter(valid_775574, JString, required = false,
                                 default = nil)
  if valid_775574 != nil:
    section.add "X-Amz-Date", valid_775574
  var valid_775575 = header.getOrDefault("X-Amz-Security-Token")
  valid_775575 = validateParameter(valid_775575, JString, required = false,
                                 default = nil)
  if valid_775575 != nil:
    section.add "X-Amz-Security-Token", valid_775575
  var valid_775576 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775576 = validateParameter(valid_775576, JString, required = false,
                                 default = nil)
  if valid_775576 != nil:
    section.add "X-Amz-Content-Sha256", valid_775576
  var valid_775577 = header.getOrDefault("X-Amz-Algorithm")
  valid_775577 = validateParameter(valid_775577, JString, required = false,
                                 default = nil)
  if valid_775577 != nil:
    section.add "X-Amz-Algorithm", valid_775577
  var valid_775578 = header.getOrDefault("X-Amz-Signature")
  valid_775578 = validateParameter(valid_775578, JString, required = false,
                                 default = nil)
  if valid_775578 != nil:
    section.add "X-Amz-Signature", valid_775578
  var valid_775579 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775579 = validateParameter(valid_775579, JString, required = false,
                                 default = nil)
  if valid_775579 != nil:
    section.add "X-Amz-SignedHeaders", valid_775579
  var valid_775580 = header.getOrDefault("X-Amz-Credential")
  valid_775580 = validateParameter(valid_775580, JString, required = false,
                                 default = nil)
  if valid_775580 != nil:
    section.add "X-Amz-Credential", valid_775580
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceDBClusterIdentifier: JString (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   UseLatestRestorableTime: JBool
  ##                          : <p>A value that is set to <code>true</code> to restore the DB cluster to the latest restorable backup time, and <code>false</code> otherwise.</p> <p>Default: <code>false</code> </p> <p>Constraints: Cannot be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   RestoreToTime: JString
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter is not provided</p> </li> <li> <p>Cannot be specified if <code>UseLatestRestorableTime</code> parameter is true</p> </li> <li> <p>Cannot be specified if <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   OptionGroupName: JString
  ##                  : The name of the option group for the new DB cluster.
  ##   Tags: JArray
  ##       : The tags to be applied to the restored DB cluster.
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with the new DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that is not encrypted, then the restore request is rejected.</p>
  ##   RestoreType: JString
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SourceDBClusterIdentifier` field"
  var valid_775581 = formData.getOrDefault("SourceDBClusterIdentifier")
  valid_775581 = validateParameter(valid_775581, JString, required = true,
                                 default = nil)
  if valid_775581 != nil:
    section.add "SourceDBClusterIdentifier", valid_775581
  var valid_775582 = formData.getOrDefault("UseLatestRestorableTime")
  valid_775582 = validateParameter(valid_775582, JBool, required = false, default = nil)
  if valid_775582 != nil:
    section.add "UseLatestRestorableTime", valid_775582
  var valid_775583 = formData.getOrDefault("Port")
  valid_775583 = validateParameter(valid_775583, JInt, required = false, default = nil)
  if valid_775583 != nil:
    section.add "Port", valid_775583
  var valid_775584 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_775584 = validateParameter(valid_775584, JArray, required = false,
                                 default = nil)
  if valid_775584 != nil:
    section.add "VpcSecurityGroupIds", valid_775584
  var valid_775585 = formData.getOrDefault("RestoreToTime")
  valid_775585 = validateParameter(valid_775585, JString, required = false,
                                 default = nil)
  if valid_775585 != nil:
    section.add "RestoreToTime", valid_775585
  var valid_775586 = formData.getOrDefault("OptionGroupName")
  valid_775586 = validateParameter(valid_775586, JString, required = false,
                                 default = nil)
  if valid_775586 != nil:
    section.add "OptionGroupName", valid_775586
  var valid_775587 = formData.getOrDefault("Tags")
  valid_775587 = validateParameter(valid_775587, JArray, required = false,
                                 default = nil)
  if valid_775587 != nil:
    section.add "Tags", valid_775587
  var valid_775588 = formData.getOrDefault("DBSubnetGroupName")
  valid_775588 = validateParameter(valid_775588, JString, required = false,
                                 default = nil)
  if valid_775588 != nil:
    section.add "DBSubnetGroupName", valid_775588
  var valid_775589 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_775589 = validateParameter(valid_775589, JString, required = false,
                                 default = nil)
  if valid_775589 != nil:
    section.add "DBClusterParameterGroupName", valid_775589
  var valid_775590 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_775590 = validateParameter(valid_775590, JArray, required = false,
                                 default = nil)
  if valid_775590 != nil:
    section.add "EnableCloudwatchLogsExports", valid_775590
  var valid_775591 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_775591 = validateParameter(valid_775591, JBool, required = false, default = nil)
  if valid_775591 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_775591
  var valid_775592 = formData.getOrDefault("KmsKeyId")
  valid_775592 = validateParameter(valid_775592, JString, required = false,
                                 default = nil)
  if valid_775592 != nil:
    section.add "KmsKeyId", valid_775592
  var valid_775593 = formData.getOrDefault("RestoreType")
  valid_775593 = validateParameter(valid_775593, JString, required = false,
                                 default = nil)
  if valid_775593 != nil:
    section.add "RestoreType", valid_775593
  var valid_775594 = formData.getOrDefault("DBClusterIdentifier")
  valid_775594 = validateParameter(valid_775594, JString, required = true,
                                 default = nil)
  if valid_775594 != nil:
    section.add "DBClusterIdentifier", valid_775594
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775595: Call_PostRestoreDBClusterToPointInTime_775569;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group.</p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <a>CreateDBInstance</a> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note>
  ## 
  let valid = call_775595.validator(path, query, header, formData, body)
  let scheme = call_775595.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775595.url(scheme.get, call_775595.host, call_775595.base,
                         call_775595.route, valid.getOrDefault("path"))
  result = hook(call_775595, url, valid)

proc call*(call_775596: Call_PostRestoreDBClusterToPointInTime_775569;
          SourceDBClusterIdentifier: string; DBClusterIdentifier: string;
          UseLatestRestorableTime: bool = false; Port: int = 0;
          VpcSecurityGroupIds: JsonNode = nil; RestoreToTime: string = "";
          OptionGroupName: string = ""; Tags: JsonNode = nil;
          DBSubnetGroupName: string = "";
          Action: string = "RestoreDBClusterToPointInTime";
          DBClusterParameterGroupName: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false; KmsKeyId: string = "";
          RestoreType: string = ""; Version: string = "2014-10-31"): Recallable =
  ## postRestoreDBClusterToPointInTime
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group.</p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <a>CreateDBInstance</a> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note>
  ##   SourceDBClusterIdentifier: string (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   UseLatestRestorableTime: bool
  ##                          : <p>A value that is set to <code>true</code> to restore the DB cluster to the latest restorable backup time, and <code>false</code> otherwise.</p> <p>Default: <code>false</code> </p> <p>Constraints: Cannot be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   RestoreToTime: string
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter is not provided</p> </li> <li> <p>Cannot be specified if <code>UseLatestRestorableTime</code> parameter is true</p> </li> <li> <p>Cannot be specified if <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   OptionGroupName: string
  ##                  : The name of the option group for the new DB cluster.
  ##   Tags: JArray
  ##       : The tags to be applied to the restored DB cluster.
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with the new DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that is not encrypted, then the restore request is rejected.</p>
  ##   RestoreType: string
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   Version: string (required)
  var query_775597 = newJObject()
  var formData_775598 = newJObject()
  add(formData_775598, "SourceDBClusterIdentifier",
      newJString(SourceDBClusterIdentifier))
  add(formData_775598, "UseLatestRestorableTime",
      newJBool(UseLatestRestorableTime))
  add(formData_775598, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    formData_775598.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_775598, "RestoreToTime", newJString(RestoreToTime))
  add(formData_775598, "OptionGroupName", newJString(OptionGroupName))
  if Tags != nil:
    formData_775598.add "Tags", Tags
  add(formData_775598, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_775597, "Action", newJString(Action))
  add(formData_775598, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if EnableCloudwatchLogsExports != nil:
    formData_775598.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_775598, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_775598, "KmsKeyId", newJString(KmsKeyId))
  add(formData_775598, "RestoreType", newJString(RestoreType))
  add(formData_775598, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_775597, "Version", newJString(Version))
  result = call_775596.call(nil, query_775597, nil, formData_775598, nil)

var postRestoreDBClusterToPointInTime* = Call_PostRestoreDBClusterToPointInTime_775569(
    name: "postRestoreDBClusterToPointInTime", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterToPointInTime",
    validator: validate_PostRestoreDBClusterToPointInTime_775570, base: "/",
    url: url_PostRestoreDBClusterToPointInTime_775571,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBClusterToPointInTime_775540 = ref object of OpenApiRestCall_772581
proc url_GetRestoreDBClusterToPointInTime_775542(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetRestoreDBClusterToPointInTime_775541(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group.</p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <a>CreateDBInstance</a> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RestoreToTime: JString
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter is not provided</p> </li> <li> <p>Cannot be specified if <code>UseLatestRestorableTime</code> parameter is true</p> </li> <li> <p>Cannot be specified if <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with the new DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   OptionGroupName: JString
  ##                  : The name of the option group for the new DB cluster.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs.
  ##   Tags: JArray
  ##       : The tags to be applied to the restored DB cluster.
  ##   RestoreType: JString
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   Action: JString (required)
  ##   UseLatestRestorableTime: JBool
  ##                          : <p>A value that is set to <code>true</code> to restore the DB cluster to the latest restorable backup time, and <code>false</code> otherwise.</p> <p>Default: <code>false</code> </p> <p>Constraints: Cannot be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that is not encrypted, then the restore request is rejected.</p>
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   SourceDBClusterIdentifier: JString (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  var valid_775543 = query.getOrDefault("RestoreToTime")
  valid_775543 = validateParameter(valid_775543, JString, required = false,
                                 default = nil)
  if valid_775543 != nil:
    section.add "RestoreToTime", valid_775543
  var valid_775544 = query.getOrDefault("DBClusterParameterGroupName")
  valid_775544 = validateParameter(valid_775544, JString, required = false,
                                 default = nil)
  if valid_775544 != nil:
    section.add "DBClusterParameterGroupName", valid_775544
  var valid_775545 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_775545 = validateParameter(valid_775545, JBool, required = false, default = nil)
  if valid_775545 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_775545
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_775546 = query.getOrDefault("DBClusterIdentifier")
  valid_775546 = validateParameter(valid_775546, JString, required = true,
                                 default = nil)
  if valid_775546 != nil:
    section.add "DBClusterIdentifier", valid_775546
  var valid_775547 = query.getOrDefault("OptionGroupName")
  valid_775547 = validateParameter(valid_775547, JString, required = false,
                                 default = nil)
  if valid_775547 != nil:
    section.add "OptionGroupName", valid_775547
  var valid_775548 = query.getOrDefault("VpcSecurityGroupIds")
  valid_775548 = validateParameter(valid_775548, JArray, required = false,
                                 default = nil)
  if valid_775548 != nil:
    section.add "VpcSecurityGroupIds", valid_775548
  var valid_775549 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_775549 = validateParameter(valid_775549, JArray, required = false,
                                 default = nil)
  if valid_775549 != nil:
    section.add "EnableCloudwatchLogsExports", valid_775549
  var valid_775550 = query.getOrDefault("Tags")
  valid_775550 = validateParameter(valid_775550, JArray, required = false,
                                 default = nil)
  if valid_775550 != nil:
    section.add "Tags", valid_775550
  var valid_775551 = query.getOrDefault("RestoreType")
  valid_775551 = validateParameter(valid_775551, JString, required = false,
                                 default = nil)
  if valid_775551 != nil:
    section.add "RestoreType", valid_775551
  var valid_775552 = query.getOrDefault("Action")
  valid_775552 = validateParameter(valid_775552, JString, required = true, default = newJString(
      "RestoreDBClusterToPointInTime"))
  if valid_775552 != nil:
    section.add "Action", valid_775552
  var valid_775553 = query.getOrDefault("UseLatestRestorableTime")
  valid_775553 = validateParameter(valid_775553, JBool, required = false, default = nil)
  if valid_775553 != nil:
    section.add "UseLatestRestorableTime", valid_775553
  var valid_775554 = query.getOrDefault("DBSubnetGroupName")
  valid_775554 = validateParameter(valid_775554, JString, required = false,
                                 default = nil)
  if valid_775554 != nil:
    section.add "DBSubnetGroupName", valid_775554
  var valid_775555 = query.getOrDefault("KmsKeyId")
  valid_775555 = validateParameter(valid_775555, JString, required = false,
                                 default = nil)
  if valid_775555 != nil:
    section.add "KmsKeyId", valid_775555
  var valid_775556 = query.getOrDefault("Port")
  valid_775556 = validateParameter(valid_775556, JInt, required = false, default = nil)
  if valid_775556 != nil:
    section.add "Port", valid_775556
  var valid_775557 = query.getOrDefault("SourceDBClusterIdentifier")
  valid_775557 = validateParameter(valid_775557, JString, required = true,
                                 default = nil)
  if valid_775557 != nil:
    section.add "SourceDBClusterIdentifier", valid_775557
  var valid_775558 = query.getOrDefault("Version")
  valid_775558 = validateParameter(valid_775558, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775558 != nil:
    section.add "Version", valid_775558
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775559 = header.getOrDefault("X-Amz-Date")
  valid_775559 = validateParameter(valid_775559, JString, required = false,
                                 default = nil)
  if valid_775559 != nil:
    section.add "X-Amz-Date", valid_775559
  var valid_775560 = header.getOrDefault("X-Amz-Security-Token")
  valid_775560 = validateParameter(valid_775560, JString, required = false,
                                 default = nil)
  if valid_775560 != nil:
    section.add "X-Amz-Security-Token", valid_775560
  var valid_775561 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775561 = validateParameter(valid_775561, JString, required = false,
                                 default = nil)
  if valid_775561 != nil:
    section.add "X-Amz-Content-Sha256", valid_775561
  var valid_775562 = header.getOrDefault("X-Amz-Algorithm")
  valid_775562 = validateParameter(valid_775562, JString, required = false,
                                 default = nil)
  if valid_775562 != nil:
    section.add "X-Amz-Algorithm", valid_775562
  var valid_775563 = header.getOrDefault("X-Amz-Signature")
  valid_775563 = validateParameter(valid_775563, JString, required = false,
                                 default = nil)
  if valid_775563 != nil:
    section.add "X-Amz-Signature", valid_775563
  var valid_775564 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775564 = validateParameter(valid_775564, JString, required = false,
                                 default = nil)
  if valid_775564 != nil:
    section.add "X-Amz-SignedHeaders", valid_775564
  var valid_775565 = header.getOrDefault("X-Amz-Credential")
  valid_775565 = validateParameter(valid_775565, JString, required = false,
                                 default = nil)
  if valid_775565 != nil:
    section.add "X-Amz-Credential", valid_775565
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775566: Call_GetRestoreDBClusterToPointInTime_775540;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group.</p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <a>CreateDBInstance</a> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note>
  ## 
  let valid = call_775566.validator(path, query, header, formData, body)
  let scheme = call_775566.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775566.url(scheme.get, call_775566.host, call_775566.base,
                         call_775566.route, valid.getOrDefault("path"))
  result = hook(call_775566, url, valid)

proc call*(call_775567: Call_GetRestoreDBClusterToPointInTime_775540;
          DBClusterIdentifier: string; SourceDBClusterIdentifier: string;
          RestoreToTime: string = ""; DBClusterParameterGroupName: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          OptionGroupName: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          EnableCloudwatchLogsExports: JsonNode = nil; Tags: JsonNode = nil;
          RestoreType: string = "";
          Action: string = "RestoreDBClusterToPointInTime";
          UseLatestRestorableTime: bool = false; DBSubnetGroupName: string = "";
          KmsKeyId: string = ""; Port: int = 0; Version: string = "2014-10-31"): Recallable =
  ## getRestoreDBClusterToPointInTime
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group.</p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <a>CreateDBInstance</a> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note>
  ##   RestoreToTime: string
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter is not provided</p> </li> <li> <p>Cannot be specified if <code>UseLatestRestorableTime</code> parameter is true</p> </li> <li> <p>Cannot be specified if <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with the new DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   OptionGroupName: string
  ##                  : The name of the option group for the new DB cluster.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs.
  ##   Tags: JArray
  ##       : The tags to be applied to the restored DB cluster.
  ##   RestoreType: string
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   Action: string (required)
  ##   UseLatestRestorableTime: bool
  ##                          : <p>A value that is set to <code>true</code> to restore the DB cluster to the latest restorable backup time, and <code>false</code> otherwise.</p> <p>Default: <code>false</code> </p> <p>Constraints: Cannot be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that is not encrypted, then the restore request is rejected.</p>
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   SourceDBClusterIdentifier: string (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   Version: string (required)
  var query_775568 = newJObject()
  add(query_775568, "RestoreToTime", newJString(RestoreToTime))
  add(query_775568, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_775568, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_775568, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_775568, "OptionGroupName", newJString(OptionGroupName))
  if VpcSecurityGroupIds != nil:
    query_775568.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if EnableCloudwatchLogsExports != nil:
    query_775568.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  if Tags != nil:
    query_775568.add "Tags", Tags
  add(query_775568, "RestoreType", newJString(RestoreType))
  add(query_775568, "Action", newJString(Action))
  add(query_775568, "UseLatestRestorableTime", newJBool(UseLatestRestorableTime))
  add(query_775568, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_775568, "KmsKeyId", newJString(KmsKeyId))
  add(query_775568, "Port", newJInt(Port))
  add(query_775568, "SourceDBClusterIdentifier",
      newJString(SourceDBClusterIdentifier))
  add(query_775568, "Version", newJString(Version))
  result = call_775567.call(nil, query_775568, nil, nil, nil)

var getRestoreDBClusterToPointInTime* = Call_GetRestoreDBClusterToPointInTime_775540(
    name: "getRestoreDBClusterToPointInTime", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterToPointInTime",
    validator: validate_GetRestoreDBClusterToPointInTime_775541, base: "/",
    url: url_GetRestoreDBClusterToPointInTime_775542,
    schemes: {Scheme.Https, Scheme.Http})
proc sign(recall: var Recallable; query: JsonNode; algo: SigningAlgo = SHA256) =
  let
    date = makeDateTime()
    access = os.getEnv("AWS_ACCESS_KEY_ID", "")
    secret = os.getEnv("AWS_SECRET_ACCESS_KEY", "")
    region = os.getEnv("AWS_REGION", "")
  assert secret != "", "need secret key in env"
  assert access != "", "need access key in env"
  assert region != "", "need region in env"
  var
    normal: PathNormal
    url = normalizeUrl(recall.url, query, normalize = normal)
    scheme = parseEnum[Scheme](url.scheme)
  assert scheme in awsServers, "unknown scheme `" & $scheme & "`"
  assert region in awsServers[scheme], "unknown region `" & region & "`"
  url.hostname = awsServers[scheme][region]
  case awsServiceName.toLowerAscii
  of "s3":
    normal = PathNormal.S3
  else:
    normal = PathNormal.Default
  recall.headers["Host"] = url.hostname
  recall.headers["X-Amz-Date"] = date
  let
    algo = SHA256
    scope = credentialScope(region = region, service = awsServiceName, date = date)
    request = canonicalRequest(recall.meth, $url, query, recall.headers, recall.body,
                             normalize = normal, digest = algo)
    sts = stringToSign(request.hash(algo), scope, date = date, digest = algo)
    signature = calculateSignature(secret = secret, date = date, region = region,
                                 service = awsServiceName, sts, digest = algo)
  var auth = $algo & " "
  auth &= "Credential=" & access / scope & ", "
  auth &= "SignedHeaders=" & recall.headers.signedHeaders & ", "
  auth &= "Signature=" & signature
  recall.headers["Authorization"] = auth
  echo recall.headers
  recall.headers.del "Host"
  recall.url = $url

method hook(call: OpenApiRestCall; url: string; input: JsonNode): Recallable {.base.} =
  let headers = massageHeaders(input.getOrDefault("header"))
  result = newRecallable(call, url, headers, "")
  result.sign(input.getOrDefault("query"), SHA256)
