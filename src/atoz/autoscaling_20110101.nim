
import
  json, options, hashes, tables, openapi/rest, os, uri, strutils, httpcore, sigv4

## auto-generated via openapi macro
## title: Auto Scaling
## version: 2011-01-01
## termsOfService: https://aws.amazon.com/service-terms/
## license:
##     name: Apache 2.0 License
##     url: http://www.apache.org/licenses/
## 
## <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch or terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks. Use this service with AWS Auto Scaling, Amazon CloudWatch, and Elastic Load Balancing.</p> <p>For more information, including information about granting IAM users required permissions for Amazon EC2 Auto Scaling actions, see the <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">Amazon EC2 Auto Scaling User Guide</a>.</p>
## 
## Amazon Web Services documentation
## https://docs.aws.amazon.com/autoscaling/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode): string

  OpenApiRestCall_772597 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_772597](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_772597): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    if js.kind notin {JString, JInt, JFloat, JNull, JBool}:
      return
    head = $js
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get())

const
  awsServers = {Scheme.Http: {"ap-northeast-1": "autoscaling.ap-northeast-1.amazonaws.com", "ap-southeast-1": "autoscaling.ap-southeast-1.amazonaws.com",
                           "us-west-2": "autoscaling.us-west-2.amazonaws.com",
                           "eu-west-2": "autoscaling.eu-west-2.amazonaws.com", "ap-northeast-3": "autoscaling.ap-northeast-3.amazonaws.com", "eu-central-1": "autoscaling.eu-central-1.amazonaws.com",
                           "us-east-2": "autoscaling.us-east-2.amazonaws.com",
                           "us-east-1": "autoscaling.us-east-1.amazonaws.com", "cn-northwest-1": "autoscaling.cn-northwest-1.amazonaws.com.cn", "ap-south-1": "autoscaling.ap-south-1.amazonaws.com", "eu-north-1": "autoscaling.eu-north-1.amazonaws.com", "ap-northeast-2": "autoscaling.ap-northeast-2.amazonaws.com",
                           "us-west-1": "autoscaling.us-west-1.amazonaws.com", "us-gov-east-1": "autoscaling.us-gov-east-1.amazonaws.com",
                           "eu-west-3": "autoscaling.eu-west-3.amazonaws.com", "cn-north-1": "autoscaling.cn-north-1.amazonaws.com.cn",
                           "sa-east-1": "autoscaling.sa-east-1.amazonaws.com",
                           "eu-west-1": "autoscaling.eu-west-1.amazonaws.com", "us-gov-west-1": "autoscaling.us-gov-west-1.amazonaws.com", "ap-southeast-2": "autoscaling.ap-southeast-2.amazonaws.com", "ca-central-1": "autoscaling.ca-central-1.amazonaws.com"}.toTable, Scheme.Https: {
      "ap-northeast-1": "autoscaling.ap-northeast-1.amazonaws.com",
      "ap-southeast-1": "autoscaling.ap-southeast-1.amazonaws.com",
      "us-west-2": "autoscaling.us-west-2.amazonaws.com",
      "eu-west-2": "autoscaling.eu-west-2.amazonaws.com",
      "ap-northeast-3": "autoscaling.ap-northeast-3.amazonaws.com",
      "eu-central-1": "autoscaling.eu-central-1.amazonaws.com",
      "us-east-2": "autoscaling.us-east-2.amazonaws.com",
      "us-east-1": "autoscaling.us-east-1.amazonaws.com",
      "cn-northwest-1": "autoscaling.cn-northwest-1.amazonaws.com.cn",
      "ap-south-1": "autoscaling.ap-south-1.amazonaws.com",
      "eu-north-1": "autoscaling.eu-north-1.amazonaws.com",
      "ap-northeast-2": "autoscaling.ap-northeast-2.amazonaws.com",
      "us-west-1": "autoscaling.us-west-1.amazonaws.com",
      "us-gov-east-1": "autoscaling.us-gov-east-1.amazonaws.com",
      "eu-west-3": "autoscaling.eu-west-3.amazonaws.com",
      "cn-north-1": "autoscaling.cn-north-1.amazonaws.com.cn",
      "sa-east-1": "autoscaling.sa-east-1.amazonaws.com",
      "eu-west-1": "autoscaling.eu-west-1.amazonaws.com",
      "us-gov-west-1": "autoscaling.us-gov-west-1.amazonaws.com",
      "ap-southeast-2": "autoscaling.ap-southeast-2.amazonaws.com",
      "ca-central-1": "autoscaling.ca-central-1.amazonaws.com"}.toTable}.toTable
const
  awsServiceName = "autoscaling"
method hook(call: OpenApiRestCall; url: string; input: JsonNode): Recallable {.base.}
type
  Call_PostAttachInstances_773205 = ref object of OpenApiRestCall_772597
proc url_PostAttachInstances_773207(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostAttachInstances_773206(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Attaches one or more EC2 instances to the specified Auto Scaling group.</p> <p>When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.</p> <p>If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html">Attach EC2 Instances to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773208 = query.getOrDefault("Action")
  valid_773208 = validateParameter(valid_773208, JString, required = true,
                                 default = newJString("AttachInstances"))
  if valid_773208 != nil:
    section.add "Action", valid_773208
  var valid_773209 = query.getOrDefault("Version")
  valid_773209 = validateParameter(valid_773209, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_773209 != nil:
    section.add "Version", valid_773209
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773210 = header.getOrDefault("X-Amz-Date")
  valid_773210 = validateParameter(valid_773210, JString, required = false,
                                 default = nil)
  if valid_773210 != nil:
    section.add "X-Amz-Date", valid_773210
  var valid_773211 = header.getOrDefault("X-Amz-Security-Token")
  valid_773211 = validateParameter(valid_773211, JString, required = false,
                                 default = nil)
  if valid_773211 != nil:
    section.add "X-Amz-Security-Token", valid_773211
  var valid_773212 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773212 = validateParameter(valid_773212, JString, required = false,
                                 default = nil)
  if valid_773212 != nil:
    section.add "X-Amz-Content-Sha256", valid_773212
  var valid_773213 = header.getOrDefault("X-Amz-Algorithm")
  valid_773213 = validateParameter(valid_773213, JString, required = false,
                                 default = nil)
  if valid_773213 != nil:
    section.add "X-Amz-Algorithm", valid_773213
  var valid_773214 = header.getOrDefault("X-Amz-Signature")
  valid_773214 = validateParameter(valid_773214, JString, required = false,
                                 default = nil)
  if valid_773214 != nil:
    section.add "X-Amz-Signature", valid_773214
  var valid_773215 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773215 = validateParameter(valid_773215, JString, required = false,
                                 default = nil)
  if valid_773215 != nil:
    section.add "X-Amz-SignedHeaders", valid_773215
  var valid_773216 = header.getOrDefault("X-Amz-Credential")
  valid_773216 = validateParameter(valid_773216, JString, required = false,
                                 default = nil)
  if valid_773216 != nil:
    section.add "X-Amz-Credential", valid_773216
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_773217 = formData.getOrDefault("AutoScalingGroupName")
  valid_773217 = validateParameter(valid_773217, JString, required = true,
                                 default = nil)
  if valid_773217 != nil:
    section.add "AutoScalingGroupName", valid_773217
  var valid_773218 = formData.getOrDefault("InstanceIds")
  valid_773218 = validateParameter(valid_773218, JArray, required = false,
                                 default = nil)
  if valid_773218 != nil:
    section.add "InstanceIds", valid_773218
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773219: Call_PostAttachInstances_773205; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches one or more EC2 instances to the specified Auto Scaling group.</p> <p>When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.</p> <p>If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html">Attach EC2 Instances to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_773219.validator(path, query, header, formData, body)
  let scheme = call_773219.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773219.url(scheme.get, call_773219.host, call_773219.base,
                         call_773219.route, valid.getOrDefault("path"))
  result = hook(call_773219, url, valid)

proc call*(call_773220: Call_PostAttachInstances_773205;
          AutoScalingGroupName: string; InstanceIds: JsonNode = nil;
          Action: string = "AttachInstances"; Version: string = "2011-01-01"): Recallable =
  ## postAttachInstances
  ## <p>Attaches one or more EC2 instances to the specified Auto Scaling group.</p> <p>When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.</p> <p>If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html">Attach EC2 Instances to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773221 = newJObject()
  var formData_773222 = newJObject()
  add(formData_773222, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if InstanceIds != nil:
    formData_773222.add "InstanceIds", InstanceIds
  add(query_773221, "Action", newJString(Action))
  add(query_773221, "Version", newJString(Version))
  result = call_773220.call(nil, query_773221, nil, formData_773222, nil)

var postAttachInstances* = Call_PostAttachInstances_773205(
    name: "postAttachInstances", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=AttachInstances",
    validator: validate_PostAttachInstances_773206, base: "/",
    url: url_PostAttachInstances_773207, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAttachInstances_772933 = ref object of OpenApiRestCall_772597
proc url_GetAttachInstances_772935(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetAttachInstances_772934(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Attaches one or more EC2 instances to the specified Auto Scaling group.</p> <p>When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.</p> <p>If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html">Attach EC2 Instances to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_773047 = query.getOrDefault("AutoScalingGroupName")
  valid_773047 = validateParameter(valid_773047, JString, required = true,
                                 default = nil)
  if valid_773047 != nil:
    section.add "AutoScalingGroupName", valid_773047
  var valid_773061 = query.getOrDefault("Action")
  valid_773061 = validateParameter(valid_773061, JString, required = true,
                                 default = newJString("AttachInstances"))
  if valid_773061 != nil:
    section.add "Action", valid_773061
  var valid_773062 = query.getOrDefault("InstanceIds")
  valid_773062 = validateParameter(valid_773062, JArray, required = false,
                                 default = nil)
  if valid_773062 != nil:
    section.add "InstanceIds", valid_773062
  var valid_773063 = query.getOrDefault("Version")
  valid_773063 = validateParameter(valid_773063, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_773063 != nil:
    section.add "Version", valid_773063
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773064 = header.getOrDefault("X-Amz-Date")
  valid_773064 = validateParameter(valid_773064, JString, required = false,
                                 default = nil)
  if valid_773064 != nil:
    section.add "X-Amz-Date", valid_773064
  var valid_773065 = header.getOrDefault("X-Amz-Security-Token")
  valid_773065 = validateParameter(valid_773065, JString, required = false,
                                 default = nil)
  if valid_773065 != nil:
    section.add "X-Amz-Security-Token", valid_773065
  var valid_773066 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773066 = validateParameter(valid_773066, JString, required = false,
                                 default = nil)
  if valid_773066 != nil:
    section.add "X-Amz-Content-Sha256", valid_773066
  var valid_773067 = header.getOrDefault("X-Amz-Algorithm")
  valid_773067 = validateParameter(valid_773067, JString, required = false,
                                 default = nil)
  if valid_773067 != nil:
    section.add "X-Amz-Algorithm", valid_773067
  var valid_773068 = header.getOrDefault("X-Amz-Signature")
  valid_773068 = validateParameter(valid_773068, JString, required = false,
                                 default = nil)
  if valid_773068 != nil:
    section.add "X-Amz-Signature", valid_773068
  var valid_773069 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773069 = validateParameter(valid_773069, JString, required = false,
                                 default = nil)
  if valid_773069 != nil:
    section.add "X-Amz-SignedHeaders", valid_773069
  var valid_773070 = header.getOrDefault("X-Amz-Credential")
  valid_773070 = validateParameter(valid_773070, JString, required = false,
                                 default = nil)
  if valid_773070 != nil:
    section.add "X-Amz-Credential", valid_773070
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773093: Call_GetAttachInstances_772933; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches one or more EC2 instances to the specified Auto Scaling group.</p> <p>When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.</p> <p>If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html">Attach EC2 Instances to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_773093.validator(path, query, header, formData, body)
  let scheme = call_773093.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773093.url(scheme.get, call_773093.host, call_773093.base,
                         call_773093.route, valid.getOrDefault("path"))
  result = hook(call_773093, url, valid)

proc call*(call_773164: Call_GetAttachInstances_772933;
          AutoScalingGroupName: string; Action: string = "AttachInstances";
          InstanceIds: JsonNode = nil; Version: string = "2011-01-01"): Recallable =
  ## getAttachInstances
  ## <p>Attaches one or more EC2 instances to the specified Auto Scaling group.</p> <p>When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.</p> <p>If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html">Attach EC2 Instances to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Version: string (required)
  var query_773165 = newJObject()
  add(query_773165, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_773165, "Action", newJString(Action))
  if InstanceIds != nil:
    query_773165.add "InstanceIds", InstanceIds
  add(query_773165, "Version", newJString(Version))
  result = call_773164.call(nil, query_773165, nil, nil, nil)

var getAttachInstances* = Call_GetAttachInstances_772933(
    name: "getAttachInstances", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=AttachInstances",
    validator: validate_GetAttachInstances_772934, base: "/",
    url: url_GetAttachInstances_772935, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAttachLoadBalancerTargetGroups_773240 = ref object of OpenApiRestCall_772597
proc url_PostAttachLoadBalancerTargetGroups_773242(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostAttachLoadBalancerTargetGroups_773241(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches one or more target groups to the specified Auto Scaling group. </p> <p>To describe the target groups for an Auto Scaling group, use <a>DescribeLoadBalancerTargetGroups</a>. To detach the target group from the Auto Scaling group, use <a>DetachLoadBalancerTargetGroups</a>.</p> <p>With Application Load Balancers and Network Load Balancers, instances are registered as targets with a target group. With Classic Load Balancers, instances are registered with the load balancer. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773243 = query.getOrDefault("Action")
  valid_773243 = validateParameter(valid_773243, JString, required = true, default = newJString(
      "AttachLoadBalancerTargetGroups"))
  if valid_773243 != nil:
    section.add "Action", valid_773243
  var valid_773244 = query.getOrDefault("Version")
  valid_773244 = validateParameter(valid_773244, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_773244 != nil:
    section.add "Version", valid_773244
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773245 = header.getOrDefault("X-Amz-Date")
  valid_773245 = validateParameter(valid_773245, JString, required = false,
                                 default = nil)
  if valid_773245 != nil:
    section.add "X-Amz-Date", valid_773245
  var valid_773246 = header.getOrDefault("X-Amz-Security-Token")
  valid_773246 = validateParameter(valid_773246, JString, required = false,
                                 default = nil)
  if valid_773246 != nil:
    section.add "X-Amz-Security-Token", valid_773246
  var valid_773247 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773247 = validateParameter(valid_773247, JString, required = false,
                                 default = nil)
  if valid_773247 != nil:
    section.add "X-Amz-Content-Sha256", valid_773247
  var valid_773248 = header.getOrDefault("X-Amz-Algorithm")
  valid_773248 = validateParameter(valid_773248, JString, required = false,
                                 default = nil)
  if valid_773248 != nil:
    section.add "X-Amz-Algorithm", valid_773248
  var valid_773249 = header.getOrDefault("X-Amz-Signature")
  valid_773249 = validateParameter(valid_773249, JString, required = false,
                                 default = nil)
  if valid_773249 != nil:
    section.add "X-Amz-Signature", valid_773249
  var valid_773250 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773250 = validateParameter(valid_773250, JString, required = false,
                                 default = nil)
  if valid_773250 != nil:
    section.add "X-Amz-SignedHeaders", valid_773250
  var valid_773251 = header.getOrDefault("X-Amz-Credential")
  valid_773251 = validateParameter(valid_773251, JString, required = false,
                                 default = nil)
  if valid_773251 != nil:
    section.add "X-Amz-Credential", valid_773251
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_773252 = formData.getOrDefault("AutoScalingGroupName")
  valid_773252 = validateParameter(valid_773252, JString, required = true,
                                 default = nil)
  if valid_773252 != nil:
    section.add "AutoScalingGroupName", valid_773252
  var valid_773253 = formData.getOrDefault("TargetGroupARNs")
  valid_773253 = validateParameter(valid_773253, JArray, required = true, default = nil)
  if valid_773253 != nil:
    section.add "TargetGroupARNs", valid_773253
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773254: Call_PostAttachLoadBalancerTargetGroups_773240;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Attaches one or more target groups to the specified Auto Scaling group. </p> <p>To describe the target groups for an Auto Scaling group, use <a>DescribeLoadBalancerTargetGroups</a>. To detach the target group from the Auto Scaling group, use <a>DetachLoadBalancerTargetGroups</a>.</p> <p>With Application Load Balancers and Network Load Balancers, instances are registered as targets with a target group. With Classic Load Balancers, instances are registered with the load balancer. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_773254.validator(path, query, header, formData, body)
  let scheme = call_773254.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773254.url(scheme.get, call_773254.host, call_773254.base,
                         call_773254.route, valid.getOrDefault("path"))
  result = hook(call_773254, url, valid)

proc call*(call_773255: Call_PostAttachLoadBalancerTargetGroups_773240;
          AutoScalingGroupName: string; TargetGroupARNs: JsonNode;
          Action: string = "AttachLoadBalancerTargetGroups";
          Version: string = "2011-01-01"): Recallable =
  ## postAttachLoadBalancerTargetGroups
  ## <p>Attaches one or more target groups to the specified Auto Scaling group. </p> <p>To describe the target groups for an Auto Scaling group, use <a>DescribeLoadBalancerTargetGroups</a>. To detach the target group from the Auto Scaling group, use <a>DetachLoadBalancerTargetGroups</a>.</p> <p>With Application Load Balancers and Network Load Balancers, instances are registered as targets with a target group. With Classic Load Balancers, instances are registered with the load balancer. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773256 = newJObject()
  var formData_773257 = newJObject()
  add(formData_773257, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if TargetGroupARNs != nil:
    formData_773257.add "TargetGroupARNs", TargetGroupARNs
  add(query_773256, "Action", newJString(Action))
  add(query_773256, "Version", newJString(Version))
  result = call_773255.call(nil, query_773256, nil, formData_773257, nil)

var postAttachLoadBalancerTargetGroups* = Call_PostAttachLoadBalancerTargetGroups_773240(
    name: "postAttachLoadBalancerTargetGroups", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=AttachLoadBalancerTargetGroups",
    validator: validate_PostAttachLoadBalancerTargetGroups_773241, base: "/",
    url: url_PostAttachLoadBalancerTargetGroups_773242,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAttachLoadBalancerTargetGroups_773223 = ref object of OpenApiRestCall_772597
proc url_GetAttachLoadBalancerTargetGroups_773225(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetAttachLoadBalancerTargetGroups_773224(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches one or more target groups to the specified Auto Scaling group. </p> <p>To describe the target groups for an Auto Scaling group, use <a>DescribeLoadBalancerTargetGroups</a>. To detach the target group from the Auto Scaling group, use <a>DetachLoadBalancerTargetGroups</a>.</p> <p>With Application Load Balancers and Network Load Balancers, instances are registered as targets with a target group. With Classic Load Balancers, instances are registered with the load balancer. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_773226 = query.getOrDefault("AutoScalingGroupName")
  valid_773226 = validateParameter(valid_773226, JString, required = true,
                                 default = nil)
  if valid_773226 != nil:
    section.add "AutoScalingGroupName", valid_773226
  var valid_773227 = query.getOrDefault("Action")
  valid_773227 = validateParameter(valid_773227, JString, required = true, default = newJString(
      "AttachLoadBalancerTargetGroups"))
  if valid_773227 != nil:
    section.add "Action", valid_773227
  var valid_773228 = query.getOrDefault("TargetGroupARNs")
  valid_773228 = validateParameter(valid_773228, JArray, required = true, default = nil)
  if valid_773228 != nil:
    section.add "TargetGroupARNs", valid_773228
  var valid_773229 = query.getOrDefault("Version")
  valid_773229 = validateParameter(valid_773229, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_773229 != nil:
    section.add "Version", valid_773229
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773230 = header.getOrDefault("X-Amz-Date")
  valid_773230 = validateParameter(valid_773230, JString, required = false,
                                 default = nil)
  if valid_773230 != nil:
    section.add "X-Amz-Date", valid_773230
  var valid_773231 = header.getOrDefault("X-Amz-Security-Token")
  valid_773231 = validateParameter(valid_773231, JString, required = false,
                                 default = nil)
  if valid_773231 != nil:
    section.add "X-Amz-Security-Token", valid_773231
  var valid_773232 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773232 = validateParameter(valid_773232, JString, required = false,
                                 default = nil)
  if valid_773232 != nil:
    section.add "X-Amz-Content-Sha256", valid_773232
  var valid_773233 = header.getOrDefault("X-Amz-Algorithm")
  valid_773233 = validateParameter(valid_773233, JString, required = false,
                                 default = nil)
  if valid_773233 != nil:
    section.add "X-Amz-Algorithm", valid_773233
  var valid_773234 = header.getOrDefault("X-Amz-Signature")
  valid_773234 = validateParameter(valid_773234, JString, required = false,
                                 default = nil)
  if valid_773234 != nil:
    section.add "X-Amz-Signature", valid_773234
  var valid_773235 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773235 = validateParameter(valid_773235, JString, required = false,
                                 default = nil)
  if valid_773235 != nil:
    section.add "X-Amz-SignedHeaders", valid_773235
  var valid_773236 = header.getOrDefault("X-Amz-Credential")
  valid_773236 = validateParameter(valid_773236, JString, required = false,
                                 default = nil)
  if valid_773236 != nil:
    section.add "X-Amz-Credential", valid_773236
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773237: Call_GetAttachLoadBalancerTargetGroups_773223;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Attaches one or more target groups to the specified Auto Scaling group. </p> <p>To describe the target groups for an Auto Scaling group, use <a>DescribeLoadBalancerTargetGroups</a>. To detach the target group from the Auto Scaling group, use <a>DetachLoadBalancerTargetGroups</a>.</p> <p>With Application Load Balancers and Network Load Balancers, instances are registered as targets with a target group. With Classic Load Balancers, instances are registered with the load balancer. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_773237.validator(path, query, header, formData, body)
  let scheme = call_773237.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773237.url(scheme.get, call_773237.host, call_773237.base,
                         call_773237.route, valid.getOrDefault("path"))
  result = hook(call_773237, url, valid)

proc call*(call_773238: Call_GetAttachLoadBalancerTargetGroups_773223;
          AutoScalingGroupName: string; TargetGroupARNs: JsonNode;
          Action: string = "AttachLoadBalancerTargetGroups";
          Version: string = "2011-01-01"): Recallable =
  ## getAttachLoadBalancerTargetGroups
  ## <p>Attaches one or more target groups to the specified Auto Scaling group. </p> <p>To describe the target groups for an Auto Scaling group, use <a>DescribeLoadBalancerTargetGroups</a>. To detach the target group from the Auto Scaling group, use <a>DetachLoadBalancerTargetGroups</a>.</p> <p>With Application Load Balancers and Network Load Balancers, instances are registered as targets with a target group. With Classic Load Balancers, instances are registered with the load balancer. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  ##   Version: string (required)
  var query_773239 = newJObject()
  add(query_773239, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_773239, "Action", newJString(Action))
  if TargetGroupARNs != nil:
    query_773239.add "TargetGroupARNs", TargetGroupARNs
  add(query_773239, "Version", newJString(Version))
  result = call_773238.call(nil, query_773239, nil, nil, nil)

var getAttachLoadBalancerTargetGroups* = Call_GetAttachLoadBalancerTargetGroups_773223(
    name: "getAttachLoadBalancerTargetGroups", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=AttachLoadBalancerTargetGroups",
    validator: validate_GetAttachLoadBalancerTargetGroups_773224, base: "/",
    url: url_GetAttachLoadBalancerTargetGroups_773225,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAttachLoadBalancers_773275 = ref object of OpenApiRestCall_772597
proc url_PostAttachLoadBalancers_773277(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostAttachLoadBalancers_773276(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches one or more Classic Load Balancers to the specified Auto Scaling group.</p> <p>To attach an Application Load Balancer or a Network Load Balancer instead, see <a>AttachLoadBalancerTargetGroups</a>.</p> <p>To describe the load balancers for an Auto Scaling group, use <a>DescribeLoadBalancers</a>. To detach the load balancer from the Auto Scaling group, use <a>DetachLoadBalancers</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773278 = query.getOrDefault("Action")
  valid_773278 = validateParameter(valid_773278, JString, required = true,
                                 default = newJString("AttachLoadBalancers"))
  if valid_773278 != nil:
    section.add "Action", valid_773278
  var valid_773279 = query.getOrDefault("Version")
  valid_773279 = validateParameter(valid_773279, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_773279 != nil:
    section.add "Version", valid_773279
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773280 = header.getOrDefault("X-Amz-Date")
  valid_773280 = validateParameter(valid_773280, JString, required = false,
                                 default = nil)
  if valid_773280 != nil:
    section.add "X-Amz-Date", valid_773280
  var valid_773281 = header.getOrDefault("X-Amz-Security-Token")
  valid_773281 = validateParameter(valid_773281, JString, required = false,
                                 default = nil)
  if valid_773281 != nil:
    section.add "X-Amz-Security-Token", valid_773281
  var valid_773282 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773282 = validateParameter(valid_773282, JString, required = false,
                                 default = nil)
  if valid_773282 != nil:
    section.add "X-Amz-Content-Sha256", valid_773282
  var valid_773283 = header.getOrDefault("X-Amz-Algorithm")
  valid_773283 = validateParameter(valid_773283, JString, required = false,
                                 default = nil)
  if valid_773283 != nil:
    section.add "X-Amz-Algorithm", valid_773283
  var valid_773284 = header.getOrDefault("X-Amz-Signature")
  valid_773284 = validateParameter(valid_773284, JString, required = false,
                                 default = nil)
  if valid_773284 != nil:
    section.add "X-Amz-Signature", valid_773284
  var valid_773285 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773285 = validateParameter(valid_773285, JString, required = false,
                                 default = nil)
  if valid_773285 != nil:
    section.add "X-Amz-SignedHeaders", valid_773285
  var valid_773286 = header.getOrDefault("X-Amz-Credential")
  valid_773286 = validateParameter(valid_773286, JString, required = false,
                                 default = nil)
  if valid_773286 != nil:
    section.add "X-Amz-Credential", valid_773286
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_773287 = formData.getOrDefault("AutoScalingGroupName")
  valid_773287 = validateParameter(valid_773287, JString, required = true,
                                 default = nil)
  if valid_773287 != nil:
    section.add "AutoScalingGroupName", valid_773287
  var valid_773288 = formData.getOrDefault("LoadBalancerNames")
  valid_773288 = validateParameter(valid_773288, JArray, required = true, default = nil)
  if valid_773288 != nil:
    section.add "LoadBalancerNames", valid_773288
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773289: Call_PostAttachLoadBalancers_773275; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches one or more Classic Load Balancers to the specified Auto Scaling group.</p> <p>To attach an Application Load Balancer or a Network Load Balancer instead, see <a>AttachLoadBalancerTargetGroups</a>.</p> <p>To describe the load balancers for an Auto Scaling group, use <a>DescribeLoadBalancers</a>. To detach the load balancer from the Auto Scaling group, use <a>DetachLoadBalancers</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_773289.validator(path, query, header, formData, body)
  let scheme = call_773289.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773289.url(scheme.get, call_773289.host, call_773289.base,
                         call_773289.route, valid.getOrDefault("path"))
  result = hook(call_773289, url, valid)

proc call*(call_773290: Call_PostAttachLoadBalancers_773275;
          AutoScalingGroupName: string; LoadBalancerNames: JsonNode;
          Action: string = "AttachLoadBalancers"; Version: string = "2011-01-01"): Recallable =
  ## postAttachLoadBalancers
  ## <p>Attaches one or more Classic Load Balancers to the specified Auto Scaling group.</p> <p>To attach an Application Load Balancer or a Network Load Balancer instead, see <a>AttachLoadBalancerTargetGroups</a>.</p> <p>To describe the load balancers for an Auto Scaling group, use <a>DescribeLoadBalancers</a>. To detach the load balancer from the Auto Scaling group, use <a>DetachLoadBalancers</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  ##   Version: string (required)
  var query_773291 = newJObject()
  var formData_773292 = newJObject()
  add(formData_773292, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_773291, "Action", newJString(Action))
  if LoadBalancerNames != nil:
    formData_773292.add "LoadBalancerNames", LoadBalancerNames
  add(query_773291, "Version", newJString(Version))
  result = call_773290.call(nil, query_773291, nil, formData_773292, nil)

var postAttachLoadBalancers* = Call_PostAttachLoadBalancers_773275(
    name: "postAttachLoadBalancers", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=AttachLoadBalancers",
    validator: validate_PostAttachLoadBalancers_773276, base: "/",
    url: url_PostAttachLoadBalancers_773277, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAttachLoadBalancers_773258 = ref object of OpenApiRestCall_772597
proc url_GetAttachLoadBalancers_773260(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetAttachLoadBalancers_773259(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches one or more Classic Load Balancers to the specified Auto Scaling group.</p> <p>To attach an Application Load Balancer or a Network Load Balancer instead, see <a>AttachLoadBalancerTargetGroups</a>.</p> <p>To describe the load balancers for an Auto Scaling group, use <a>DescribeLoadBalancers</a>. To detach the load balancer from the Auto Scaling group, use <a>DetachLoadBalancers</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_773261 = query.getOrDefault("AutoScalingGroupName")
  valid_773261 = validateParameter(valid_773261, JString, required = true,
                                 default = nil)
  if valid_773261 != nil:
    section.add "AutoScalingGroupName", valid_773261
  var valid_773262 = query.getOrDefault("Action")
  valid_773262 = validateParameter(valid_773262, JString, required = true,
                                 default = newJString("AttachLoadBalancers"))
  if valid_773262 != nil:
    section.add "Action", valid_773262
  var valid_773263 = query.getOrDefault("LoadBalancerNames")
  valid_773263 = validateParameter(valid_773263, JArray, required = true, default = nil)
  if valid_773263 != nil:
    section.add "LoadBalancerNames", valid_773263
  var valid_773264 = query.getOrDefault("Version")
  valid_773264 = validateParameter(valid_773264, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_773264 != nil:
    section.add "Version", valid_773264
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773265 = header.getOrDefault("X-Amz-Date")
  valid_773265 = validateParameter(valid_773265, JString, required = false,
                                 default = nil)
  if valid_773265 != nil:
    section.add "X-Amz-Date", valid_773265
  var valid_773266 = header.getOrDefault("X-Amz-Security-Token")
  valid_773266 = validateParameter(valid_773266, JString, required = false,
                                 default = nil)
  if valid_773266 != nil:
    section.add "X-Amz-Security-Token", valid_773266
  var valid_773267 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773267 = validateParameter(valid_773267, JString, required = false,
                                 default = nil)
  if valid_773267 != nil:
    section.add "X-Amz-Content-Sha256", valid_773267
  var valid_773268 = header.getOrDefault("X-Amz-Algorithm")
  valid_773268 = validateParameter(valid_773268, JString, required = false,
                                 default = nil)
  if valid_773268 != nil:
    section.add "X-Amz-Algorithm", valid_773268
  var valid_773269 = header.getOrDefault("X-Amz-Signature")
  valid_773269 = validateParameter(valid_773269, JString, required = false,
                                 default = nil)
  if valid_773269 != nil:
    section.add "X-Amz-Signature", valid_773269
  var valid_773270 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773270 = validateParameter(valid_773270, JString, required = false,
                                 default = nil)
  if valid_773270 != nil:
    section.add "X-Amz-SignedHeaders", valid_773270
  var valid_773271 = header.getOrDefault("X-Amz-Credential")
  valid_773271 = validateParameter(valid_773271, JString, required = false,
                                 default = nil)
  if valid_773271 != nil:
    section.add "X-Amz-Credential", valid_773271
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773272: Call_GetAttachLoadBalancers_773258; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches one or more Classic Load Balancers to the specified Auto Scaling group.</p> <p>To attach an Application Load Balancer or a Network Load Balancer instead, see <a>AttachLoadBalancerTargetGroups</a>.</p> <p>To describe the load balancers for an Auto Scaling group, use <a>DescribeLoadBalancers</a>. To detach the load balancer from the Auto Scaling group, use <a>DetachLoadBalancers</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_773272.validator(path, query, header, formData, body)
  let scheme = call_773272.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773272.url(scheme.get, call_773272.host, call_773272.base,
                         call_773272.route, valid.getOrDefault("path"))
  result = hook(call_773272, url, valid)

proc call*(call_773273: Call_GetAttachLoadBalancers_773258;
          AutoScalingGroupName: string; LoadBalancerNames: JsonNode;
          Action: string = "AttachLoadBalancers"; Version: string = "2011-01-01"): Recallable =
  ## getAttachLoadBalancers
  ## <p>Attaches one or more Classic Load Balancers to the specified Auto Scaling group.</p> <p>To attach an Application Load Balancer or a Network Load Balancer instead, see <a>AttachLoadBalancerTargetGroups</a>.</p> <p>To describe the load balancers for an Auto Scaling group, use <a>DescribeLoadBalancers</a>. To detach the load balancer from the Auto Scaling group, use <a>DetachLoadBalancers</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  ##   Version: string (required)
  var query_773274 = newJObject()
  add(query_773274, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_773274, "Action", newJString(Action))
  if LoadBalancerNames != nil:
    query_773274.add "LoadBalancerNames", LoadBalancerNames
  add(query_773274, "Version", newJString(Version))
  result = call_773273.call(nil, query_773274, nil, nil, nil)

var getAttachLoadBalancers* = Call_GetAttachLoadBalancers_773258(
    name: "getAttachLoadBalancers", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=AttachLoadBalancers",
    validator: validate_GetAttachLoadBalancers_773259, base: "/",
    url: url_GetAttachLoadBalancers_773260, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostBatchDeleteScheduledAction_773310 = ref object of OpenApiRestCall_772597
proc url_PostBatchDeleteScheduledAction_773312(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostBatchDeleteScheduledAction_773311(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes one or more scheduled actions for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773313 = query.getOrDefault("Action")
  valid_773313 = validateParameter(valid_773313, JString, required = true, default = newJString(
      "BatchDeleteScheduledAction"))
  if valid_773313 != nil:
    section.add "Action", valid_773313
  var valid_773314 = query.getOrDefault("Version")
  valid_773314 = validateParameter(valid_773314, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_773314 != nil:
    section.add "Version", valid_773314
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773315 = header.getOrDefault("X-Amz-Date")
  valid_773315 = validateParameter(valid_773315, JString, required = false,
                                 default = nil)
  if valid_773315 != nil:
    section.add "X-Amz-Date", valid_773315
  var valid_773316 = header.getOrDefault("X-Amz-Security-Token")
  valid_773316 = validateParameter(valid_773316, JString, required = false,
                                 default = nil)
  if valid_773316 != nil:
    section.add "X-Amz-Security-Token", valid_773316
  var valid_773317 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773317 = validateParameter(valid_773317, JString, required = false,
                                 default = nil)
  if valid_773317 != nil:
    section.add "X-Amz-Content-Sha256", valid_773317
  var valid_773318 = header.getOrDefault("X-Amz-Algorithm")
  valid_773318 = validateParameter(valid_773318, JString, required = false,
                                 default = nil)
  if valid_773318 != nil:
    section.add "X-Amz-Algorithm", valid_773318
  var valid_773319 = header.getOrDefault("X-Amz-Signature")
  valid_773319 = validateParameter(valid_773319, JString, required = false,
                                 default = nil)
  if valid_773319 != nil:
    section.add "X-Amz-Signature", valid_773319
  var valid_773320 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773320 = validateParameter(valid_773320, JString, required = false,
                                 default = nil)
  if valid_773320 != nil:
    section.add "X-Amz-SignedHeaders", valid_773320
  var valid_773321 = header.getOrDefault("X-Amz-Credential")
  valid_773321 = validateParameter(valid_773321, JString, required = false,
                                 default = nil)
  if valid_773321 != nil:
    section.add "X-Amz-Credential", valid_773321
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScheduledActionNames: JArray (required)
  ##                       : The names of the scheduled actions to delete. The maximum number allowed is 50. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_773322 = formData.getOrDefault("AutoScalingGroupName")
  valid_773322 = validateParameter(valid_773322, JString, required = true,
                                 default = nil)
  if valid_773322 != nil:
    section.add "AutoScalingGroupName", valid_773322
  var valid_773323 = formData.getOrDefault("ScheduledActionNames")
  valid_773323 = validateParameter(valid_773323, JArray, required = true, default = nil)
  if valid_773323 != nil:
    section.add "ScheduledActionNames", valid_773323
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773324: Call_PostBatchDeleteScheduledAction_773310; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes one or more scheduled actions for the specified Auto Scaling group.
  ## 
  let valid = call_773324.validator(path, query, header, formData, body)
  let scheme = call_773324.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773324.url(scheme.get, call_773324.host, call_773324.base,
                         call_773324.route, valid.getOrDefault("path"))
  result = hook(call_773324, url, valid)

proc call*(call_773325: Call_PostBatchDeleteScheduledAction_773310;
          AutoScalingGroupName: string; ScheduledActionNames: JsonNode;
          Action: string = "BatchDeleteScheduledAction";
          Version: string = "2011-01-01"): Recallable =
  ## postBatchDeleteScheduledAction
  ## Deletes one or more scheduled actions for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ScheduledActionNames: JArray (required)
  ##                       : The names of the scheduled actions to delete. The maximum number allowed is 50. 
  var query_773326 = newJObject()
  var formData_773327 = newJObject()
  add(formData_773327, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_773326, "Action", newJString(Action))
  add(query_773326, "Version", newJString(Version))
  if ScheduledActionNames != nil:
    formData_773327.add "ScheduledActionNames", ScheduledActionNames
  result = call_773325.call(nil, query_773326, nil, formData_773327, nil)

var postBatchDeleteScheduledAction* = Call_PostBatchDeleteScheduledAction_773310(
    name: "postBatchDeleteScheduledAction", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=BatchDeleteScheduledAction",
    validator: validate_PostBatchDeleteScheduledAction_773311, base: "/",
    url: url_PostBatchDeleteScheduledAction_773312,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBatchDeleteScheduledAction_773293 = ref object of OpenApiRestCall_772597
proc url_GetBatchDeleteScheduledAction_773295(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetBatchDeleteScheduledAction_773294(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes one or more scheduled actions for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   ScheduledActionNames: JArray (required)
  ##                       : The names of the scheduled actions to delete. The maximum number allowed is 50. 
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_773296 = query.getOrDefault("AutoScalingGroupName")
  valid_773296 = validateParameter(valid_773296, JString, required = true,
                                 default = nil)
  if valid_773296 != nil:
    section.add "AutoScalingGroupName", valid_773296
  var valid_773297 = query.getOrDefault("Action")
  valid_773297 = validateParameter(valid_773297, JString, required = true, default = newJString(
      "BatchDeleteScheduledAction"))
  if valid_773297 != nil:
    section.add "Action", valid_773297
  var valid_773298 = query.getOrDefault("ScheduledActionNames")
  valid_773298 = validateParameter(valid_773298, JArray, required = true, default = nil)
  if valid_773298 != nil:
    section.add "ScheduledActionNames", valid_773298
  var valid_773299 = query.getOrDefault("Version")
  valid_773299 = validateParameter(valid_773299, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_773299 != nil:
    section.add "Version", valid_773299
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773300 = header.getOrDefault("X-Amz-Date")
  valid_773300 = validateParameter(valid_773300, JString, required = false,
                                 default = nil)
  if valid_773300 != nil:
    section.add "X-Amz-Date", valid_773300
  var valid_773301 = header.getOrDefault("X-Amz-Security-Token")
  valid_773301 = validateParameter(valid_773301, JString, required = false,
                                 default = nil)
  if valid_773301 != nil:
    section.add "X-Amz-Security-Token", valid_773301
  var valid_773302 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773302 = validateParameter(valid_773302, JString, required = false,
                                 default = nil)
  if valid_773302 != nil:
    section.add "X-Amz-Content-Sha256", valid_773302
  var valid_773303 = header.getOrDefault("X-Amz-Algorithm")
  valid_773303 = validateParameter(valid_773303, JString, required = false,
                                 default = nil)
  if valid_773303 != nil:
    section.add "X-Amz-Algorithm", valid_773303
  var valid_773304 = header.getOrDefault("X-Amz-Signature")
  valid_773304 = validateParameter(valid_773304, JString, required = false,
                                 default = nil)
  if valid_773304 != nil:
    section.add "X-Amz-Signature", valid_773304
  var valid_773305 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773305 = validateParameter(valid_773305, JString, required = false,
                                 default = nil)
  if valid_773305 != nil:
    section.add "X-Amz-SignedHeaders", valid_773305
  var valid_773306 = header.getOrDefault("X-Amz-Credential")
  valid_773306 = validateParameter(valid_773306, JString, required = false,
                                 default = nil)
  if valid_773306 != nil:
    section.add "X-Amz-Credential", valid_773306
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773307: Call_GetBatchDeleteScheduledAction_773293; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes one or more scheduled actions for the specified Auto Scaling group.
  ## 
  let valid = call_773307.validator(path, query, header, formData, body)
  let scheme = call_773307.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773307.url(scheme.get, call_773307.host, call_773307.base,
                         call_773307.route, valid.getOrDefault("path"))
  result = hook(call_773307, url, valid)

proc call*(call_773308: Call_GetBatchDeleteScheduledAction_773293;
          AutoScalingGroupName: string; ScheduledActionNames: JsonNode;
          Action: string = "BatchDeleteScheduledAction";
          Version: string = "2011-01-01"): Recallable =
  ## getBatchDeleteScheduledAction
  ## Deletes one or more scheduled actions for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   ScheduledActionNames: JArray (required)
  ##                       : The names of the scheduled actions to delete. The maximum number allowed is 50. 
  ##   Version: string (required)
  var query_773309 = newJObject()
  add(query_773309, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_773309, "Action", newJString(Action))
  if ScheduledActionNames != nil:
    query_773309.add "ScheduledActionNames", ScheduledActionNames
  add(query_773309, "Version", newJString(Version))
  result = call_773308.call(nil, query_773309, nil, nil, nil)

var getBatchDeleteScheduledAction* = Call_GetBatchDeleteScheduledAction_773293(
    name: "getBatchDeleteScheduledAction", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=BatchDeleteScheduledAction",
    validator: validate_GetBatchDeleteScheduledAction_773294, base: "/",
    url: url_GetBatchDeleteScheduledAction_773295,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostBatchPutScheduledUpdateGroupAction_773345 = ref object of OpenApiRestCall_772597
proc url_PostBatchPutScheduledUpdateGroupAction_773347(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostBatchPutScheduledUpdateGroupAction_773346(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates or updates one or more scheduled scaling actions for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773348 = query.getOrDefault("Action")
  valid_773348 = validateParameter(valid_773348, JString, required = true, default = newJString(
      "BatchPutScheduledUpdateGroupAction"))
  if valid_773348 != nil:
    section.add "Action", valid_773348
  var valid_773349 = query.getOrDefault("Version")
  valid_773349 = validateParameter(valid_773349, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_773349 != nil:
    section.add "Version", valid_773349
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773350 = header.getOrDefault("X-Amz-Date")
  valid_773350 = validateParameter(valid_773350, JString, required = false,
                                 default = nil)
  if valid_773350 != nil:
    section.add "X-Amz-Date", valid_773350
  var valid_773351 = header.getOrDefault("X-Amz-Security-Token")
  valid_773351 = validateParameter(valid_773351, JString, required = false,
                                 default = nil)
  if valid_773351 != nil:
    section.add "X-Amz-Security-Token", valid_773351
  var valid_773352 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773352 = validateParameter(valid_773352, JString, required = false,
                                 default = nil)
  if valid_773352 != nil:
    section.add "X-Amz-Content-Sha256", valid_773352
  var valid_773353 = header.getOrDefault("X-Amz-Algorithm")
  valid_773353 = validateParameter(valid_773353, JString, required = false,
                                 default = nil)
  if valid_773353 != nil:
    section.add "X-Amz-Algorithm", valid_773353
  var valid_773354 = header.getOrDefault("X-Amz-Signature")
  valid_773354 = validateParameter(valid_773354, JString, required = false,
                                 default = nil)
  if valid_773354 != nil:
    section.add "X-Amz-Signature", valid_773354
  var valid_773355 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773355 = validateParameter(valid_773355, JString, required = false,
                                 default = nil)
  if valid_773355 != nil:
    section.add "X-Amz-SignedHeaders", valid_773355
  var valid_773356 = header.getOrDefault("X-Amz-Credential")
  valid_773356 = validateParameter(valid_773356, JString, required = false,
                                 default = nil)
  if valid_773356 != nil:
    section.add "X-Amz-Credential", valid_773356
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScheduledUpdateGroupActions: JArray (required)
  ##                              : One or more scheduled actions. The maximum number allowed is 50. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_773357 = formData.getOrDefault("AutoScalingGroupName")
  valid_773357 = validateParameter(valid_773357, JString, required = true,
                                 default = nil)
  if valid_773357 != nil:
    section.add "AutoScalingGroupName", valid_773357
  var valid_773358 = formData.getOrDefault("ScheduledUpdateGroupActions")
  valid_773358 = validateParameter(valid_773358, JArray, required = true, default = nil)
  if valid_773358 != nil:
    section.add "ScheduledUpdateGroupActions", valid_773358
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773359: Call_PostBatchPutScheduledUpdateGroupAction_773345;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates or updates one or more scheduled scaling actions for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.
  ## 
  let valid = call_773359.validator(path, query, header, formData, body)
  let scheme = call_773359.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773359.url(scheme.get, call_773359.host, call_773359.base,
                         call_773359.route, valid.getOrDefault("path"))
  result = hook(call_773359, url, valid)

proc call*(call_773360: Call_PostBatchPutScheduledUpdateGroupAction_773345;
          AutoScalingGroupName: string; ScheduledUpdateGroupActions: JsonNode;
          Action: string = "BatchPutScheduledUpdateGroupAction";
          Version: string = "2011-01-01"): Recallable =
  ## postBatchPutScheduledUpdateGroupAction
  ## Creates or updates one or more scheduled scaling actions for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScheduledUpdateGroupActions: JArray (required)
  ##                              : One or more scheduled actions. The maximum number allowed is 50. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773361 = newJObject()
  var formData_773362 = newJObject()
  add(formData_773362, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if ScheduledUpdateGroupActions != nil:
    formData_773362.add "ScheduledUpdateGroupActions", ScheduledUpdateGroupActions
  add(query_773361, "Action", newJString(Action))
  add(query_773361, "Version", newJString(Version))
  result = call_773360.call(nil, query_773361, nil, formData_773362, nil)

var postBatchPutScheduledUpdateGroupAction* = Call_PostBatchPutScheduledUpdateGroupAction_773345(
    name: "postBatchPutScheduledUpdateGroupAction", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=BatchPutScheduledUpdateGroupAction",
    validator: validate_PostBatchPutScheduledUpdateGroupAction_773346, base: "/",
    url: url_PostBatchPutScheduledUpdateGroupAction_773347,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBatchPutScheduledUpdateGroupAction_773328 = ref object of OpenApiRestCall_772597
proc url_GetBatchPutScheduledUpdateGroupAction_773330(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetBatchPutScheduledUpdateGroupAction_773329(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates or updates one or more scheduled scaling actions for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   ScheduledUpdateGroupActions: JArray (required)
  ##                              : One or more scheduled actions. The maximum number allowed is 50. 
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_773331 = query.getOrDefault("AutoScalingGroupName")
  valid_773331 = validateParameter(valid_773331, JString, required = true,
                                 default = nil)
  if valid_773331 != nil:
    section.add "AutoScalingGroupName", valid_773331
  var valid_773332 = query.getOrDefault("Action")
  valid_773332 = validateParameter(valid_773332, JString, required = true, default = newJString(
      "BatchPutScheduledUpdateGroupAction"))
  if valid_773332 != nil:
    section.add "Action", valid_773332
  var valid_773333 = query.getOrDefault("ScheduledUpdateGroupActions")
  valid_773333 = validateParameter(valid_773333, JArray, required = true, default = nil)
  if valid_773333 != nil:
    section.add "ScheduledUpdateGroupActions", valid_773333
  var valid_773334 = query.getOrDefault("Version")
  valid_773334 = validateParameter(valid_773334, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_773334 != nil:
    section.add "Version", valid_773334
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773335 = header.getOrDefault("X-Amz-Date")
  valid_773335 = validateParameter(valid_773335, JString, required = false,
                                 default = nil)
  if valid_773335 != nil:
    section.add "X-Amz-Date", valid_773335
  var valid_773336 = header.getOrDefault("X-Amz-Security-Token")
  valid_773336 = validateParameter(valid_773336, JString, required = false,
                                 default = nil)
  if valid_773336 != nil:
    section.add "X-Amz-Security-Token", valid_773336
  var valid_773337 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773337 = validateParameter(valid_773337, JString, required = false,
                                 default = nil)
  if valid_773337 != nil:
    section.add "X-Amz-Content-Sha256", valid_773337
  var valid_773338 = header.getOrDefault("X-Amz-Algorithm")
  valid_773338 = validateParameter(valid_773338, JString, required = false,
                                 default = nil)
  if valid_773338 != nil:
    section.add "X-Amz-Algorithm", valid_773338
  var valid_773339 = header.getOrDefault("X-Amz-Signature")
  valid_773339 = validateParameter(valid_773339, JString, required = false,
                                 default = nil)
  if valid_773339 != nil:
    section.add "X-Amz-Signature", valid_773339
  var valid_773340 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773340 = validateParameter(valid_773340, JString, required = false,
                                 default = nil)
  if valid_773340 != nil:
    section.add "X-Amz-SignedHeaders", valid_773340
  var valid_773341 = header.getOrDefault("X-Amz-Credential")
  valid_773341 = validateParameter(valid_773341, JString, required = false,
                                 default = nil)
  if valid_773341 != nil:
    section.add "X-Amz-Credential", valid_773341
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773342: Call_GetBatchPutScheduledUpdateGroupAction_773328;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates or updates one or more scheduled scaling actions for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.
  ## 
  let valid = call_773342.validator(path, query, header, formData, body)
  let scheme = call_773342.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773342.url(scheme.get, call_773342.host, call_773342.base,
                         call_773342.route, valid.getOrDefault("path"))
  result = hook(call_773342, url, valid)

proc call*(call_773343: Call_GetBatchPutScheduledUpdateGroupAction_773328;
          AutoScalingGroupName: string; ScheduledUpdateGroupActions: JsonNode;
          Action: string = "BatchPutScheduledUpdateGroupAction";
          Version: string = "2011-01-01"): Recallable =
  ## getBatchPutScheduledUpdateGroupAction
  ## Creates or updates one or more scheduled scaling actions for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   ScheduledUpdateGroupActions: JArray (required)
  ##                              : One or more scheduled actions. The maximum number allowed is 50. 
  ##   Version: string (required)
  var query_773344 = newJObject()
  add(query_773344, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_773344, "Action", newJString(Action))
  if ScheduledUpdateGroupActions != nil:
    query_773344.add "ScheduledUpdateGroupActions", ScheduledUpdateGroupActions
  add(query_773344, "Version", newJString(Version))
  result = call_773343.call(nil, query_773344, nil, nil, nil)

var getBatchPutScheduledUpdateGroupAction* = Call_GetBatchPutScheduledUpdateGroupAction_773328(
    name: "getBatchPutScheduledUpdateGroupAction", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=BatchPutScheduledUpdateGroupAction",
    validator: validate_GetBatchPutScheduledUpdateGroupAction_773329, base: "/",
    url: url_GetBatchPutScheduledUpdateGroupAction_773330,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCompleteLifecycleAction_773383 = ref object of OpenApiRestCall_772597
proc url_PostCompleteLifecycleAction_773385(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCompleteLifecycleAction_773384(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Completes the lifecycle action for the specified token or instance with the specified result.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</p> </li> <li> <p> <b>If you finish before the timeout period ends, complete the lifecycle action.</b> </p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773386 = query.getOrDefault("Action")
  valid_773386 = validateParameter(valid_773386, JString, required = true, default = newJString(
      "CompleteLifecycleAction"))
  if valid_773386 != nil:
    section.add "Action", valid_773386
  var valid_773387 = query.getOrDefault("Version")
  valid_773387 = validateParameter(valid_773387, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_773387 != nil:
    section.add "Version", valid_773387
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773388 = header.getOrDefault("X-Amz-Date")
  valid_773388 = validateParameter(valid_773388, JString, required = false,
                                 default = nil)
  if valid_773388 != nil:
    section.add "X-Amz-Date", valid_773388
  var valid_773389 = header.getOrDefault("X-Amz-Security-Token")
  valid_773389 = validateParameter(valid_773389, JString, required = false,
                                 default = nil)
  if valid_773389 != nil:
    section.add "X-Amz-Security-Token", valid_773389
  var valid_773390 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773390 = validateParameter(valid_773390, JString, required = false,
                                 default = nil)
  if valid_773390 != nil:
    section.add "X-Amz-Content-Sha256", valid_773390
  var valid_773391 = header.getOrDefault("X-Amz-Algorithm")
  valid_773391 = validateParameter(valid_773391, JString, required = false,
                                 default = nil)
  if valid_773391 != nil:
    section.add "X-Amz-Algorithm", valid_773391
  var valid_773392 = header.getOrDefault("X-Amz-Signature")
  valid_773392 = validateParameter(valid_773392, JString, required = false,
                                 default = nil)
  if valid_773392 != nil:
    section.add "X-Amz-Signature", valid_773392
  var valid_773393 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773393 = validateParameter(valid_773393, JString, required = false,
                                 default = nil)
  if valid_773393 != nil:
    section.add "X-Amz-SignedHeaders", valid_773393
  var valid_773394 = header.getOrDefault("X-Amz-Credential")
  valid_773394 = validateParameter(valid_773394, JString, required = false,
                                 default = nil)
  if valid_773394 != nil:
    section.add "X-Amz-Credential", valid_773394
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceId: JString
  ##             : The ID of the instance.
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   LifecycleActionResult: JString (required)
  ##                        : The action for the group to take. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>.
  ##   LifecycleActionToken: JString
  ##                       : A universally unique identifier (UUID) that identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target you specified when you created the lifecycle hook.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_773395 = formData.getOrDefault("AutoScalingGroupName")
  valid_773395 = validateParameter(valid_773395, JString, required = true,
                                 default = nil)
  if valid_773395 != nil:
    section.add "AutoScalingGroupName", valid_773395
  var valid_773396 = formData.getOrDefault("InstanceId")
  valid_773396 = validateParameter(valid_773396, JString, required = false,
                                 default = nil)
  if valid_773396 != nil:
    section.add "InstanceId", valid_773396
  var valid_773397 = formData.getOrDefault("LifecycleHookName")
  valid_773397 = validateParameter(valid_773397, JString, required = true,
                                 default = nil)
  if valid_773397 != nil:
    section.add "LifecycleHookName", valid_773397
  var valid_773398 = formData.getOrDefault("LifecycleActionResult")
  valid_773398 = validateParameter(valid_773398, JString, required = true,
                                 default = nil)
  if valid_773398 != nil:
    section.add "LifecycleActionResult", valid_773398
  var valid_773399 = formData.getOrDefault("LifecycleActionToken")
  valid_773399 = validateParameter(valid_773399, JString, required = false,
                                 default = nil)
  if valid_773399 != nil:
    section.add "LifecycleActionToken", valid_773399
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773400: Call_PostCompleteLifecycleAction_773383; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Completes the lifecycle action for the specified token or instance with the specified result.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</p> </li> <li> <p> <b>If you finish before the timeout period ends, complete the lifecycle action.</b> </p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_773400.validator(path, query, header, formData, body)
  let scheme = call_773400.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773400.url(scheme.get, call_773400.host, call_773400.base,
                         call_773400.route, valid.getOrDefault("path"))
  result = hook(call_773400, url, valid)

proc call*(call_773401: Call_PostCompleteLifecycleAction_773383;
          AutoScalingGroupName: string; LifecycleHookName: string;
          LifecycleActionResult: string;
          Action: string = "CompleteLifecycleAction"; InstanceId: string = "";
          Version: string = "2011-01-01"; LifecycleActionToken: string = ""): Recallable =
  ## postCompleteLifecycleAction
  ## <p>Completes the lifecycle action for the specified token or instance with the specified result.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</p> </li> <li> <p> <b>If you finish before the timeout period ends, complete the lifecycle action.</b> </p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   InstanceId: string
  ##             : The ID of the instance.
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   LifecycleActionResult: string (required)
  ##                        : The action for the group to take. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>.
  ##   Version: string (required)
  ##   LifecycleActionToken: string
  ##                       : A universally unique identifier (UUID) that identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target you specified when you created the lifecycle hook.
  var query_773402 = newJObject()
  var formData_773403 = newJObject()
  add(formData_773403, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_773402, "Action", newJString(Action))
  add(formData_773403, "InstanceId", newJString(InstanceId))
  add(formData_773403, "LifecycleHookName", newJString(LifecycleHookName))
  add(formData_773403, "LifecycleActionResult", newJString(LifecycleActionResult))
  add(query_773402, "Version", newJString(Version))
  add(formData_773403, "LifecycleActionToken", newJString(LifecycleActionToken))
  result = call_773401.call(nil, query_773402, nil, formData_773403, nil)

var postCompleteLifecycleAction* = Call_PostCompleteLifecycleAction_773383(
    name: "postCompleteLifecycleAction", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=CompleteLifecycleAction",
    validator: validate_PostCompleteLifecycleAction_773384, base: "/",
    url: url_PostCompleteLifecycleAction_773385,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCompleteLifecycleAction_773363 = ref object of OpenApiRestCall_772597
proc url_GetCompleteLifecycleAction_773365(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCompleteLifecycleAction_773364(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Completes the lifecycle action for the specified token or instance with the specified result.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</p> </li> <li> <p> <b>If you finish before the timeout period ends, complete the lifecycle action.</b> </p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleActionResult: JString (required)
  ##                        : The action for the group to take. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>.
  ##   Action: JString (required)
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   InstanceId: JString
  ##             : The ID of the instance.
  ##   Version: JString (required)
  ##   LifecycleActionToken: JString
  ##                       : A universally unique identifier (UUID) that identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target you specified when you created the lifecycle hook.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_773366 = query.getOrDefault("AutoScalingGroupName")
  valid_773366 = validateParameter(valid_773366, JString, required = true,
                                 default = nil)
  if valid_773366 != nil:
    section.add "AutoScalingGroupName", valid_773366
  var valid_773367 = query.getOrDefault("LifecycleActionResult")
  valid_773367 = validateParameter(valid_773367, JString, required = true,
                                 default = nil)
  if valid_773367 != nil:
    section.add "LifecycleActionResult", valid_773367
  var valid_773368 = query.getOrDefault("Action")
  valid_773368 = validateParameter(valid_773368, JString, required = true, default = newJString(
      "CompleteLifecycleAction"))
  if valid_773368 != nil:
    section.add "Action", valid_773368
  var valid_773369 = query.getOrDefault("LifecycleHookName")
  valid_773369 = validateParameter(valid_773369, JString, required = true,
                                 default = nil)
  if valid_773369 != nil:
    section.add "LifecycleHookName", valid_773369
  var valid_773370 = query.getOrDefault("InstanceId")
  valid_773370 = validateParameter(valid_773370, JString, required = false,
                                 default = nil)
  if valid_773370 != nil:
    section.add "InstanceId", valid_773370
  var valid_773371 = query.getOrDefault("Version")
  valid_773371 = validateParameter(valid_773371, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_773371 != nil:
    section.add "Version", valid_773371
  var valid_773372 = query.getOrDefault("LifecycleActionToken")
  valid_773372 = validateParameter(valid_773372, JString, required = false,
                                 default = nil)
  if valid_773372 != nil:
    section.add "LifecycleActionToken", valid_773372
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773373 = header.getOrDefault("X-Amz-Date")
  valid_773373 = validateParameter(valid_773373, JString, required = false,
                                 default = nil)
  if valid_773373 != nil:
    section.add "X-Amz-Date", valid_773373
  var valid_773374 = header.getOrDefault("X-Amz-Security-Token")
  valid_773374 = validateParameter(valid_773374, JString, required = false,
                                 default = nil)
  if valid_773374 != nil:
    section.add "X-Amz-Security-Token", valid_773374
  var valid_773375 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773375 = validateParameter(valid_773375, JString, required = false,
                                 default = nil)
  if valid_773375 != nil:
    section.add "X-Amz-Content-Sha256", valid_773375
  var valid_773376 = header.getOrDefault("X-Amz-Algorithm")
  valid_773376 = validateParameter(valid_773376, JString, required = false,
                                 default = nil)
  if valid_773376 != nil:
    section.add "X-Amz-Algorithm", valid_773376
  var valid_773377 = header.getOrDefault("X-Amz-Signature")
  valid_773377 = validateParameter(valid_773377, JString, required = false,
                                 default = nil)
  if valid_773377 != nil:
    section.add "X-Amz-Signature", valid_773377
  var valid_773378 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773378 = validateParameter(valid_773378, JString, required = false,
                                 default = nil)
  if valid_773378 != nil:
    section.add "X-Amz-SignedHeaders", valid_773378
  var valid_773379 = header.getOrDefault("X-Amz-Credential")
  valid_773379 = validateParameter(valid_773379, JString, required = false,
                                 default = nil)
  if valid_773379 != nil:
    section.add "X-Amz-Credential", valid_773379
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773380: Call_GetCompleteLifecycleAction_773363; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Completes the lifecycle action for the specified token or instance with the specified result.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</p> </li> <li> <p> <b>If you finish before the timeout period ends, complete the lifecycle action.</b> </p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_773380.validator(path, query, header, formData, body)
  let scheme = call_773380.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773380.url(scheme.get, call_773380.host, call_773380.base,
                         call_773380.route, valid.getOrDefault("path"))
  result = hook(call_773380, url, valid)

proc call*(call_773381: Call_GetCompleteLifecycleAction_773363;
          AutoScalingGroupName: string; LifecycleActionResult: string;
          LifecycleHookName: string; Action: string = "CompleteLifecycleAction";
          InstanceId: string = ""; Version: string = "2011-01-01";
          LifecycleActionToken: string = ""): Recallable =
  ## getCompleteLifecycleAction
  ## <p>Completes the lifecycle action for the specified token or instance with the specified result.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</p> </li> <li> <p> <b>If you finish before the timeout period ends, complete the lifecycle action.</b> </p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleActionResult: string (required)
  ##                        : The action for the group to take. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>.
  ##   Action: string (required)
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   InstanceId: string
  ##             : The ID of the instance.
  ##   Version: string (required)
  ##   LifecycleActionToken: string
  ##                       : A universally unique identifier (UUID) that identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target you specified when you created the lifecycle hook.
  var query_773382 = newJObject()
  add(query_773382, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_773382, "LifecycleActionResult", newJString(LifecycleActionResult))
  add(query_773382, "Action", newJString(Action))
  add(query_773382, "LifecycleHookName", newJString(LifecycleHookName))
  add(query_773382, "InstanceId", newJString(InstanceId))
  add(query_773382, "Version", newJString(Version))
  add(query_773382, "LifecycleActionToken", newJString(LifecycleActionToken))
  result = call_773381.call(nil, query_773382, nil, nil, nil)

var getCompleteLifecycleAction* = Call_GetCompleteLifecycleAction_773363(
    name: "getCompleteLifecycleAction", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=CompleteLifecycleAction",
    validator: validate_GetCompleteLifecycleAction_773364, base: "/",
    url: url_GetCompleteLifecycleAction_773365,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateAutoScalingGroup_773443 = ref object of OpenApiRestCall_772597
proc url_PostCreateAutoScalingGroup_773445(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateAutoScalingGroup_773444(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an Auto Scaling group with the specified name and attributes.</p> <p>If you exceed your maximum limit of Auto Scaling groups, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773446 = query.getOrDefault("Action")
  valid_773446 = validateParameter(valid_773446, JString, required = true,
                                 default = newJString("CreateAutoScalingGroup"))
  if valid_773446 != nil:
    section.add "Action", valid_773446
  var valid_773447 = query.getOrDefault("Version")
  valid_773447 = validateParameter(valid_773447, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_773447 != nil:
    section.add "Version", valid_773447
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773448 = header.getOrDefault("X-Amz-Date")
  valid_773448 = validateParameter(valid_773448, JString, required = false,
                                 default = nil)
  if valid_773448 != nil:
    section.add "X-Amz-Date", valid_773448
  var valid_773449 = header.getOrDefault("X-Amz-Security-Token")
  valid_773449 = validateParameter(valid_773449, JString, required = false,
                                 default = nil)
  if valid_773449 != nil:
    section.add "X-Amz-Security-Token", valid_773449
  var valid_773450 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773450 = validateParameter(valid_773450, JString, required = false,
                                 default = nil)
  if valid_773450 != nil:
    section.add "X-Amz-Content-Sha256", valid_773450
  var valid_773451 = header.getOrDefault("X-Amz-Algorithm")
  valid_773451 = validateParameter(valid_773451, JString, required = false,
                                 default = nil)
  if valid_773451 != nil:
    section.add "X-Amz-Algorithm", valid_773451
  var valid_773452 = header.getOrDefault("X-Amz-Signature")
  valid_773452 = validateParameter(valid_773452, JString, required = false,
                                 default = nil)
  if valid_773452 != nil:
    section.add "X-Amz-Signature", valid_773452
  var valid_773453 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773453 = validateParameter(valid_773453, JString, required = false,
                                 default = nil)
  if valid_773453 != nil:
    section.add "X-Amz-SignedHeaders", valid_773453
  var valid_773454 = header.getOrDefault("X-Amz-Credential")
  valid_773454 = validateParameter(valid_773454, JString, required = false,
                                 default = nil)
  if valid_773454 != nil:
    section.add "X-Amz-Credential", valid_773454
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group. This name must be unique per Region per account.
  ##   LaunchTemplate.LaunchTemplateId: JString
  ##                                  : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  ##   LaunchConfigurationName: JString
  ##                          : <p>The name of the launch configuration.</p> <p>If you do not specify <code>LaunchConfigurationName</code>, you must specify one of the following parameters: <code>InstanceId</code>, <code>LaunchTemplate</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   HealthCheckType: JString
  ##                  : <p>The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. The default value is <code>EC2</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   ServiceLinkedRoleARN: JString
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. By default, Amazon EC2 Auto Scaling uses a service-linked role named AWSServiceRoleForAutoScaling, which it creates if it does not exist. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   DesiredCapacity: JInt
  ##                  : The number of Amazon EC2 instances that the Auto Scaling group attempts to maintain. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group. If you do not specify a desired capacity, the default is the minimum size of the group.
  ##   HealthCheckGracePeriod: JInt
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. During this time, any health check failures for the instance are ignored. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   VPCZoneIdentifier: JString
  ##                    : <p>A comma-separated list of subnet IDs for your virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into a VPC.</p>
  ##   Tags: JArray
  ##       : <p>One or more tags.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   TargetGroupARNs: JArray
  ##                  : <p>The Amazon Resource Names (ARN) of the target groups to associate with the Auto Scaling group. Instances are registered as targets in a target group, and traffic is routed to the target group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AvailabilityZones: JArray
  ##                    : <p>One or more Availability Zones for the group. This parameter is optional if you specify one or more subnets for <code>VPCZoneIdentifier</code>.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into EC2-Classic.</p>
  ##   InstanceId: JString
  ##             : <p>The ID of the instance used to create a launch configuration for the group.</p> <p>When you specify an ID of an instance, Amazon EC2 Auto Scaling creates a new launch configuration and associates it with the group. This launch configuration derives its attributes from the specified instance, except for the block device mapping.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-from-instance.html">Create an Auto Scaling Group Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You must specify one of the following parameters in your request: <code>LaunchConfigurationName</code>, <code>LaunchTemplate</code>, <code>InstanceId</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   MinSize: JInt (required)
  ##          : The minimum size of the group.
  ##   DefaultCooldown: JInt
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MixedInstancesPolicy.LaunchTemplate: JString
  ##                                      : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   LoadBalancerNames: JArray
  ##                    : <p>A list of Classic Load Balancers associated with this Auto Scaling group. For Application Load Balancers and Network Load Balancers, specify a list of target groups using the <code>TargetGroupARNs</code> property instead.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MaxSize: JInt (required)
  ##          : The maximum size of the group.
  ##   MixedInstancesPolicy.InstancesDistribution: JString
  ##                                             : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified when creating a mixed instances policy, the default values are used.</p>
  ##   PlacementGroup: JString
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   NewInstancesProtectedFromScaleIn: JBool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LaunchTemplate.Version: JString
  ##                         : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   TerminationPolicies: JArray
  ##                      : <p>One or more termination policies used to select the instance to terminate. These policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LaunchTemplate.LaunchTemplateName: JString
  ##                                    : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   LifecycleHookSpecificationList: JArray
  ##                                 : One or more lifecycle hooks.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_773455 = formData.getOrDefault("AutoScalingGroupName")
  valid_773455 = validateParameter(valid_773455, JString, required = true,
                                 default = nil)
  if valid_773455 != nil:
    section.add "AutoScalingGroupName", valid_773455
  var valid_773456 = formData.getOrDefault("LaunchTemplate.LaunchTemplateId")
  valid_773456 = validateParameter(valid_773456, JString, required = false,
                                 default = nil)
  if valid_773456 != nil:
    section.add "LaunchTemplate.LaunchTemplateId", valid_773456
  var valid_773457 = formData.getOrDefault("LaunchConfigurationName")
  valid_773457 = validateParameter(valid_773457, JString, required = false,
                                 default = nil)
  if valid_773457 != nil:
    section.add "LaunchConfigurationName", valid_773457
  var valid_773458 = formData.getOrDefault("HealthCheckType")
  valid_773458 = validateParameter(valid_773458, JString, required = false,
                                 default = nil)
  if valid_773458 != nil:
    section.add "HealthCheckType", valid_773458
  var valid_773459 = formData.getOrDefault("ServiceLinkedRoleARN")
  valid_773459 = validateParameter(valid_773459, JString, required = false,
                                 default = nil)
  if valid_773459 != nil:
    section.add "ServiceLinkedRoleARN", valid_773459
  var valid_773460 = formData.getOrDefault("DesiredCapacity")
  valid_773460 = validateParameter(valid_773460, JInt, required = false, default = nil)
  if valid_773460 != nil:
    section.add "DesiredCapacity", valid_773460
  var valid_773461 = formData.getOrDefault("HealthCheckGracePeriod")
  valid_773461 = validateParameter(valid_773461, JInt, required = false, default = nil)
  if valid_773461 != nil:
    section.add "HealthCheckGracePeriod", valid_773461
  var valid_773462 = formData.getOrDefault("VPCZoneIdentifier")
  valid_773462 = validateParameter(valid_773462, JString, required = false,
                                 default = nil)
  if valid_773462 != nil:
    section.add "VPCZoneIdentifier", valid_773462
  var valid_773463 = formData.getOrDefault("Tags")
  valid_773463 = validateParameter(valid_773463, JArray, required = false,
                                 default = nil)
  if valid_773463 != nil:
    section.add "Tags", valid_773463
  var valid_773464 = formData.getOrDefault("TargetGroupARNs")
  valid_773464 = validateParameter(valid_773464, JArray, required = false,
                                 default = nil)
  if valid_773464 != nil:
    section.add "TargetGroupARNs", valid_773464
  var valid_773465 = formData.getOrDefault("AvailabilityZones")
  valid_773465 = validateParameter(valid_773465, JArray, required = false,
                                 default = nil)
  if valid_773465 != nil:
    section.add "AvailabilityZones", valid_773465
  var valid_773466 = formData.getOrDefault("InstanceId")
  valid_773466 = validateParameter(valid_773466, JString, required = false,
                                 default = nil)
  if valid_773466 != nil:
    section.add "InstanceId", valid_773466
  var valid_773467 = formData.getOrDefault("MinSize")
  valid_773467 = validateParameter(valid_773467, JInt, required = true, default = nil)
  if valid_773467 != nil:
    section.add "MinSize", valid_773467
  var valid_773468 = formData.getOrDefault("DefaultCooldown")
  valid_773468 = validateParameter(valid_773468, JInt, required = false, default = nil)
  if valid_773468 != nil:
    section.add "DefaultCooldown", valid_773468
  var valid_773469 = formData.getOrDefault("MixedInstancesPolicy.LaunchTemplate")
  valid_773469 = validateParameter(valid_773469, JString, required = false,
                                 default = nil)
  if valid_773469 != nil:
    section.add "MixedInstancesPolicy.LaunchTemplate", valid_773469
  var valid_773470 = formData.getOrDefault("LoadBalancerNames")
  valid_773470 = validateParameter(valid_773470, JArray, required = false,
                                 default = nil)
  if valid_773470 != nil:
    section.add "LoadBalancerNames", valid_773470
  var valid_773471 = formData.getOrDefault("MaxSize")
  valid_773471 = validateParameter(valid_773471, JInt, required = true, default = nil)
  if valid_773471 != nil:
    section.add "MaxSize", valid_773471
  var valid_773472 = formData.getOrDefault("MixedInstancesPolicy.InstancesDistribution")
  valid_773472 = validateParameter(valid_773472, JString, required = false,
                                 default = nil)
  if valid_773472 != nil:
    section.add "MixedInstancesPolicy.InstancesDistribution", valid_773472
  var valid_773473 = formData.getOrDefault("PlacementGroup")
  valid_773473 = validateParameter(valid_773473, JString, required = false,
                                 default = nil)
  if valid_773473 != nil:
    section.add "PlacementGroup", valid_773473
  var valid_773474 = formData.getOrDefault("NewInstancesProtectedFromScaleIn")
  valid_773474 = validateParameter(valid_773474, JBool, required = false, default = nil)
  if valid_773474 != nil:
    section.add "NewInstancesProtectedFromScaleIn", valid_773474
  var valid_773475 = formData.getOrDefault("LaunchTemplate.Version")
  valid_773475 = validateParameter(valid_773475, JString, required = false,
                                 default = nil)
  if valid_773475 != nil:
    section.add "LaunchTemplate.Version", valid_773475
  var valid_773476 = formData.getOrDefault("TerminationPolicies")
  valid_773476 = validateParameter(valid_773476, JArray, required = false,
                                 default = nil)
  if valid_773476 != nil:
    section.add "TerminationPolicies", valid_773476
  var valid_773477 = formData.getOrDefault("LaunchTemplate.LaunchTemplateName")
  valid_773477 = validateParameter(valid_773477, JString, required = false,
                                 default = nil)
  if valid_773477 != nil:
    section.add "LaunchTemplate.LaunchTemplateName", valid_773477
  var valid_773478 = formData.getOrDefault("LifecycleHookSpecificationList")
  valid_773478 = validateParameter(valid_773478, JArray, required = false,
                                 default = nil)
  if valid_773478 != nil:
    section.add "LifecycleHookSpecificationList", valid_773478
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773479: Call_PostCreateAutoScalingGroup_773443; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an Auto Scaling group with the specified name and attributes.</p> <p>If you exceed your maximum limit of Auto Scaling groups, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_773479.validator(path, query, header, formData, body)
  let scheme = call_773479.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773479.url(scheme.get, call_773479.host, call_773479.base,
                         call_773479.route, valid.getOrDefault("path"))
  result = hook(call_773479, url, valid)

proc call*(call_773480: Call_PostCreateAutoScalingGroup_773443;
          AutoScalingGroupName: string; MinSize: int; MaxSize: int;
          LaunchTemplateLaunchTemplateId: string = "";
          LaunchConfigurationName: string = ""; HealthCheckType: string = "";
          ServiceLinkedRoleARN: string = ""; DesiredCapacity: int = 0;
          HealthCheckGracePeriod: int = 0; VPCZoneIdentifier: string = "";
          Tags: JsonNode = nil; TargetGroupARNs: JsonNode = nil;
          Action: string = "CreateAutoScalingGroup";
          AvailabilityZones: JsonNode = nil; InstanceId: string = "";
          DefaultCooldown: int = 0; MixedInstancesPolicyLaunchTemplate: string = "";
          LoadBalancerNames: JsonNode = nil;
          MixedInstancesPolicyInstancesDistribution: string = "";
          PlacementGroup: string = "";
          NewInstancesProtectedFromScaleIn: bool = false;
          LaunchTemplateVersion: string = ""; TerminationPolicies: JsonNode = nil;
          Version: string = "2011-01-01";
          LaunchTemplateLaunchTemplateName: string = "";
          LifecycleHookSpecificationList: JsonNode = nil): Recallable =
  ## postCreateAutoScalingGroup
  ## <p>Creates an Auto Scaling group with the specified name and attributes.</p> <p>If you exceed your maximum limit of Auto Scaling groups, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group. This name must be unique per Region per account.
  ##   LaunchTemplateLaunchTemplateId: string
  ##                                 : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  ##   LaunchConfigurationName: string
  ##                          : <p>The name of the launch configuration.</p> <p>If you do not specify <code>LaunchConfigurationName</code>, you must specify one of the following parameters: <code>InstanceId</code>, <code>LaunchTemplate</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   HealthCheckType: string
  ##                  : <p>The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. The default value is <code>EC2</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   ServiceLinkedRoleARN: string
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. By default, Amazon EC2 Auto Scaling uses a service-linked role named AWSServiceRoleForAutoScaling, which it creates if it does not exist. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   DesiredCapacity: int
  ##                  : The number of Amazon EC2 instances that the Auto Scaling group attempts to maintain. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group. If you do not specify a desired capacity, the default is the minimum size of the group.
  ##   HealthCheckGracePeriod: int
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. During this time, any health check failures for the instance are ignored. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   VPCZoneIdentifier: string
  ##                    : <p>A comma-separated list of subnet IDs for your virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into a VPC.</p>
  ##   Tags: JArray
  ##       : <p>One or more tags.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   TargetGroupARNs: JArray
  ##                  : <p>The Amazon Resource Names (ARN) of the target groups to associate with the Auto Scaling group. Instances are registered as targets in a target group, and traffic is routed to the target group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   AvailabilityZones: JArray
  ##                    : <p>One or more Availability Zones for the group. This parameter is optional if you specify one or more subnets for <code>VPCZoneIdentifier</code>.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into EC2-Classic.</p>
  ##   InstanceId: string
  ##             : <p>The ID of the instance used to create a launch configuration for the group.</p> <p>When you specify an ID of an instance, Amazon EC2 Auto Scaling creates a new launch configuration and associates it with the group. This launch configuration derives its attributes from the specified instance, except for the block device mapping.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-from-instance.html">Create an Auto Scaling Group Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You must specify one of the following parameters in your request: <code>LaunchConfigurationName</code>, <code>LaunchTemplate</code>, <code>InstanceId</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   MinSize: int (required)
  ##          : The minimum size of the group.
  ##   DefaultCooldown: int
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MixedInstancesPolicyLaunchTemplate: string
  ##                                     : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   LoadBalancerNames: JArray
  ##                    : <p>A list of Classic Load Balancers associated with this Auto Scaling group. For Application Load Balancers and Network Load Balancers, specify a list of target groups using the <code>TargetGroupARNs</code> property instead.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MaxSize: int (required)
  ##          : The maximum size of the group.
  ##   MixedInstancesPolicyInstancesDistribution: string
  ##                                            : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified when creating a mixed instances policy, the default values are used.</p>
  ##   PlacementGroup: string
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   NewInstancesProtectedFromScaleIn: bool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LaunchTemplateVersion: string
  ##                        : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   TerminationPolicies: JArray
  ##                      : <p>One or more termination policies used to select the instance to terminate. These policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Version: string (required)
  ##   LaunchTemplateLaunchTemplateName: string
  ##                                   : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   LifecycleHookSpecificationList: JArray
  ##                                 : One or more lifecycle hooks.
  var query_773481 = newJObject()
  var formData_773482 = newJObject()
  add(formData_773482, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_773482, "LaunchTemplate.LaunchTemplateId",
      newJString(LaunchTemplateLaunchTemplateId))
  add(formData_773482, "LaunchConfigurationName",
      newJString(LaunchConfigurationName))
  add(formData_773482, "HealthCheckType", newJString(HealthCheckType))
  add(formData_773482, "ServiceLinkedRoleARN", newJString(ServiceLinkedRoleARN))
  add(formData_773482, "DesiredCapacity", newJInt(DesiredCapacity))
  add(formData_773482, "HealthCheckGracePeriod", newJInt(HealthCheckGracePeriod))
  add(formData_773482, "VPCZoneIdentifier", newJString(VPCZoneIdentifier))
  if Tags != nil:
    formData_773482.add "Tags", Tags
  if TargetGroupARNs != nil:
    formData_773482.add "TargetGroupARNs", TargetGroupARNs
  add(query_773481, "Action", newJString(Action))
  if AvailabilityZones != nil:
    formData_773482.add "AvailabilityZones", AvailabilityZones
  add(formData_773482, "InstanceId", newJString(InstanceId))
  add(formData_773482, "MinSize", newJInt(MinSize))
  add(formData_773482, "DefaultCooldown", newJInt(DefaultCooldown))
  add(formData_773482, "MixedInstancesPolicy.LaunchTemplate",
      newJString(MixedInstancesPolicyLaunchTemplate))
  if LoadBalancerNames != nil:
    formData_773482.add "LoadBalancerNames", LoadBalancerNames
  add(formData_773482, "MaxSize", newJInt(MaxSize))
  add(formData_773482, "MixedInstancesPolicy.InstancesDistribution",
      newJString(MixedInstancesPolicyInstancesDistribution))
  add(formData_773482, "PlacementGroup", newJString(PlacementGroup))
  add(formData_773482, "NewInstancesProtectedFromScaleIn",
      newJBool(NewInstancesProtectedFromScaleIn))
  add(formData_773482, "LaunchTemplate.Version", newJString(LaunchTemplateVersion))
  if TerminationPolicies != nil:
    formData_773482.add "TerminationPolicies", TerminationPolicies
  add(query_773481, "Version", newJString(Version))
  add(formData_773482, "LaunchTemplate.LaunchTemplateName",
      newJString(LaunchTemplateLaunchTemplateName))
  if LifecycleHookSpecificationList != nil:
    formData_773482.add "LifecycleHookSpecificationList",
                       LifecycleHookSpecificationList
  result = call_773480.call(nil, query_773481, nil, formData_773482, nil)

var postCreateAutoScalingGroup* = Call_PostCreateAutoScalingGroup_773443(
    name: "postCreateAutoScalingGroup", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=CreateAutoScalingGroup",
    validator: validate_PostCreateAutoScalingGroup_773444, base: "/",
    url: url_PostCreateAutoScalingGroup_773445,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateAutoScalingGroup_773404 = ref object of OpenApiRestCall_772597
proc url_GetCreateAutoScalingGroup_773406(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateAutoScalingGroup_773405(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an Auto Scaling group with the specified name and attributes.</p> <p>If you exceed your maximum limit of Auto Scaling groups, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   HealthCheckGracePeriod: JInt
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. During this time, any health check failures for the instance are ignored. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   TerminationPolicies: JArray
  ##                      : <p>One or more termination policies used to select the instance to terminate. These policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   HealthCheckType: JString
  ##                  : <p>The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. The default value is <code>EC2</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   DesiredCapacity: JInt
  ##                  : The number of Amazon EC2 instances that the Auto Scaling group attempts to maintain. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group. If you do not specify a desired capacity, the default is the minimum size of the group.
  ##   DefaultCooldown: JInt
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LaunchTemplate.LaunchTemplateId: JString
  ##                                  : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  ##   LaunchTemplate.LaunchTemplateName: JString
  ##                                    : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   LifecycleHookSpecificationList: JArray
  ##                                 : One or more lifecycle hooks.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group. This name must be unique per Region per account.
  ##   AvailabilityZones: JArray
  ##                    : <p>One or more Availability Zones for the group. This parameter is optional if you specify one or more subnets for <code>VPCZoneIdentifier</code>.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into EC2-Classic.</p>
  ##   VPCZoneIdentifier: JString
  ##                    : <p>A comma-separated list of subnet IDs for your virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into a VPC.</p>
  ##   NewInstancesProtectedFromScaleIn: JBool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MixedInstancesPolicy.LaunchTemplate: JString
  ##                                      : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   LaunchConfigurationName: JString
  ##                          : <p>The name of the launch configuration.</p> <p>If you do not specify <code>LaunchConfigurationName</code>, you must specify one of the following parameters: <code>InstanceId</code>, <code>LaunchTemplate</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   Tags: JArray
  ##       : <p>One or more tags.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: JString (required)
  ##   PlacementGroup: JString
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   MixedInstancesPolicy.InstancesDistribution: JString
  ##                                             : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified when creating a mixed instances policy, the default values are used.</p>
  ##   LaunchTemplate.Version: JString
  ##                         : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   TargetGroupARNs: JArray
  ##                  : <p>The Amazon Resource Names (ARN) of the target groups to associate with the Auto Scaling group. Instances are registered as targets in a target group, and traffic is routed to the target group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LoadBalancerNames: JArray
  ##                    : <p>A list of Classic Load Balancers associated with this Auto Scaling group. For Application Load Balancers and Network Load Balancers, specify a list of target groups using the <code>TargetGroupARNs</code> property instead.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   InstanceId: JString
  ##             : <p>The ID of the instance used to create a launch configuration for the group.</p> <p>When you specify an ID of an instance, Amazon EC2 Auto Scaling creates a new launch configuration and associates it with the group. This launch configuration derives its attributes from the specified instance, except for the block device mapping.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-from-instance.html">Create an Auto Scaling Group Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You must specify one of the following parameters in your request: <code>LaunchConfigurationName</code>, <code>LaunchTemplate</code>, <code>InstanceId</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   MaxSize: JInt (required)
  ##          : The maximum size of the group.
  ##   MinSize: JInt (required)
  ##          : The minimum size of the group.
  ##   Version: JString (required)
  ##   ServiceLinkedRoleARN: JString
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. By default, Amazon EC2 Auto Scaling uses a service-linked role named AWSServiceRoleForAutoScaling, which it creates if it does not exist. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  section = newJObject()
  var valid_773407 = query.getOrDefault("HealthCheckGracePeriod")
  valid_773407 = validateParameter(valid_773407, JInt, required = false, default = nil)
  if valid_773407 != nil:
    section.add "HealthCheckGracePeriod", valid_773407
  var valid_773408 = query.getOrDefault("TerminationPolicies")
  valid_773408 = validateParameter(valid_773408, JArray, required = false,
                                 default = nil)
  if valid_773408 != nil:
    section.add "TerminationPolicies", valid_773408
  var valid_773409 = query.getOrDefault("HealthCheckType")
  valid_773409 = validateParameter(valid_773409, JString, required = false,
                                 default = nil)
  if valid_773409 != nil:
    section.add "HealthCheckType", valid_773409
  var valid_773410 = query.getOrDefault("DesiredCapacity")
  valid_773410 = validateParameter(valid_773410, JInt, required = false, default = nil)
  if valid_773410 != nil:
    section.add "DesiredCapacity", valid_773410
  var valid_773411 = query.getOrDefault("DefaultCooldown")
  valid_773411 = validateParameter(valid_773411, JInt, required = false, default = nil)
  if valid_773411 != nil:
    section.add "DefaultCooldown", valid_773411
  var valid_773412 = query.getOrDefault("LaunchTemplate.LaunchTemplateId")
  valid_773412 = validateParameter(valid_773412, JString, required = false,
                                 default = nil)
  if valid_773412 != nil:
    section.add "LaunchTemplate.LaunchTemplateId", valid_773412
  var valid_773413 = query.getOrDefault("LaunchTemplate.LaunchTemplateName")
  valid_773413 = validateParameter(valid_773413, JString, required = false,
                                 default = nil)
  if valid_773413 != nil:
    section.add "LaunchTemplate.LaunchTemplateName", valid_773413
  var valid_773414 = query.getOrDefault("LifecycleHookSpecificationList")
  valid_773414 = validateParameter(valid_773414, JArray, required = false,
                                 default = nil)
  if valid_773414 != nil:
    section.add "LifecycleHookSpecificationList", valid_773414
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_773415 = query.getOrDefault("AutoScalingGroupName")
  valid_773415 = validateParameter(valid_773415, JString, required = true,
                                 default = nil)
  if valid_773415 != nil:
    section.add "AutoScalingGroupName", valid_773415
  var valid_773416 = query.getOrDefault("AvailabilityZones")
  valid_773416 = validateParameter(valid_773416, JArray, required = false,
                                 default = nil)
  if valid_773416 != nil:
    section.add "AvailabilityZones", valid_773416
  var valid_773417 = query.getOrDefault("VPCZoneIdentifier")
  valid_773417 = validateParameter(valid_773417, JString, required = false,
                                 default = nil)
  if valid_773417 != nil:
    section.add "VPCZoneIdentifier", valid_773417
  var valid_773418 = query.getOrDefault("NewInstancesProtectedFromScaleIn")
  valid_773418 = validateParameter(valid_773418, JBool, required = false, default = nil)
  if valid_773418 != nil:
    section.add "NewInstancesProtectedFromScaleIn", valid_773418
  var valid_773419 = query.getOrDefault("MixedInstancesPolicy.LaunchTemplate")
  valid_773419 = validateParameter(valid_773419, JString, required = false,
                                 default = nil)
  if valid_773419 != nil:
    section.add "MixedInstancesPolicy.LaunchTemplate", valid_773419
  var valid_773420 = query.getOrDefault("LaunchConfigurationName")
  valid_773420 = validateParameter(valid_773420, JString, required = false,
                                 default = nil)
  if valid_773420 != nil:
    section.add "LaunchConfigurationName", valid_773420
  var valid_773421 = query.getOrDefault("Tags")
  valid_773421 = validateParameter(valid_773421, JArray, required = false,
                                 default = nil)
  if valid_773421 != nil:
    section.add "Tags", valid_773421
  var valid_773422 = query.getOrDefault("Action")
  valid_773422 = validateParameter(valid_773422, JString, required = true,
                                 default = newJString("CreateAutoScalingGroup"))
  if valid_773422 != nil:
    section.add "Action", valid_773422
  var valid_773423 = query.getOrDefault("PlacementGroup")
  valid_773423 = validateParameter(valid_773423, JString, required = false,
                                 default = nil)
  if valid_773423 != nil:
    section.add "PlacementGroup", valid_773423
  var valid_773424 = query.getOrDefault("MixedInstancesPolicy.InstancesDistribution")
  valid_773424 = validateParameter(valid_773424, JString, required = false,
                                 default = nil)
  if valid_773424 != nil:
    section.add "MixedInstancesPolicy.InstancesDistribution", valid_773424
  var valid_773425 = query.getOrDefault("LaunchTemplate.Version")
  valid_773425 = validateParameter(valid_773425, JString, required = false,
                                 default = nil)
  if valid_773425 != nil:
    section.add "LaunchTemplate.Version", valid_773425
  var valid_773426 = query.getOrDefault("TargetGroupARNs")
  valid_773426 = validateParameter(valid_773426, JArray, required = false,
                                 default = nil)
  if valid_773426 != nil:
    section.add "TargetGroupARNs", valid_773426
  var valid_773427 = query.getOrDefault("LoadBalancerNames")
  valid_773427 = validateParameter(valid_773427, JArray, required = false,
                                 default = nil)
  if valid_773427 != nil:
    section.add "LoadBalancerNames", valid_773427
  var valid_773428 = query.getOrDefault("InstanceId")
  valid_773428 = validateParameter(valid_773428, JString, required = false,
                                 default = nil)
  if valid_773428 != nil:
    section.add "InstanceId", valid_773428
  var valid_773429 = query.getOrDefault("MaxSize")
  valid_773429 = validateParameter(valid_773429, JInt, required = true, default = nil)
  if valid_773429 != nil:
    section.add "MaxSize", valid_773429
  var valid_773430 = query.getOrDefault("MinSize")
  valid_773430 = validateParameter(valid_773430, JInt, required = true, default = nil)
  if valid_773430 != nil:
    section.add "MinSize", valid_773430
  var valid_773431 = query.getOrDefault("Version")
  valid_773431 = validateParameter(valid_773431, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_773431 != nil:
    section.add "Version", valid_773431
  var valid_773432 = query.getOrDefault("ServiceLinkedRoleARN")
  valid_773432 = validateParameter(valid_773432, JString, required = false,
                                 default = nil)
  if valid_773432 != nil:
    section.add "ServiceLinkedRoleARN", valid_773432
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773433 = header.getOrDefault("X-Amz-Date")
  valid_773433 = validateParameter(valid_773433, JString, required = false,
                                 default = nil)
  if valid_773433 != nil:
    section.add "X-Amz-Date", valid_773433
  var valid_773434 = header.getOrDefault("X-Amz-Security-Token")
  valid_773434 = validateParameter(valid_773434, JString, required = false,
                                 default = nil)
  if valid_773434 != nil:
    section.add "X-Amz-Security-Token", valid_773434
  var valid_773435 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773435 = validateParameter(valid_773435, JString, required = false,
                                 default = nil)
  if valid_773435 != nil:
    section.add "X-Amz-Content-Sha256", valid_773435
  var valid_773436 = header.getOrDefault("X-Amz-Algorithm")
  valid_773436 = validateParameter(valid_773436, JString, required = false,
                                 default = nil)
  if valid_773436 != nil:
    section.add "X-Amz-Algorithm", valid_773436
  var valid_773437 = header.getOrDefault("X-Amz-Signature")
  valid_773437 = validateParameter(valid_773437, JString, required = false,
                                 default = nil)
  if valid_773437 != nil:
    section.add "X-Amz-Signature", valid_773437
  var valid_773438 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773438 = validateParameter(valid_773438, JString, required = false,
                                 default = nil)
  if valid_773438 != nil:
    section.add "X-Amz-SignedHeaders", valid_773438
  var valid_773439 = header.getOrDefault("X-Amz-Credential")
  valid_773439 = validateParameter(valid_773439, JString, required = false,
                                 default = nil)
  if valid_773439 != nil:
    section.add "X-Amz-Credential", valid_773439
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773440: Call_GetCreateAutoScalingGroup_773404; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an Auto Scaling group with the specified name and attributes.</p> <p>If you exceed your maximum limit of Auto Scaling groups, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_773440.validator(path, query, header, formData, body)
  let scheme = call_773440.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773440.url(scheme.get, call_773440.host, call_773440.base,
                         call_773440.route, valid.getOrDefault("path"))
  result = hook(call_773440, url, valid)

proc call*(call_773441: Call_GetCreateAutoScalingGroup_773404;
          AutoScalingGroupName: string; MaxSize: int; MinSize: int;
          HealthCheckGracePeriod: int = 0; TerminationPolicies: JsonNode = nil;
          HealthCheckType: string = ""; DesiredCapacity: int = 0;
          DefaultCooldown: int = 0; LaunchTemplateLaunchTemplateId: string = "";
          LaunchTemplateLaunchTemplateName: string = "";
          LifecycleHookSpecificationList: JsonNode = nil;
          AvailabilityZones: JsonNode = nil; VPCZoneIdentifier: string = "";
          NewInstancesProtectedFromScaleIn: bool = false;
          MixedInstancesPolicyLaunchTemplate: string = "";
          LaunchConfigurationName: string = ""; Tags: JsonNode = nil;
          Action: string = "CreateAutoScalingGroup"; PlacementGroup: string = "";
          MixedInstancesPolicyInstancesDistribution: string = "";
          LaunchTemplateVersion: string = ""; TargetGroupARNs: JsonNode = nil;
          LoadBalancerNames: JsonNode = nil; InstanceId: string = "";
          Version: string = "2011-01-01"; ServiceLinkedRoleARN: string = ""): Recallable =
  ## getCreateAutoScalingGroup
  ## <p>Creates an Auto Scaling group with the specified name and attributes.</p> <p>If you exceed your maximum limit of Auto Scaling groups, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   HealthCheckGracePeriod: int
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. During this time, any health check failures for the instance are ignored. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   TerminationPolicies: JArray
  ##                      : <p>One or more termination policies used to select the instance to terminate. These policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   HealthCheckType: string
  ##                  : <p>The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. The default value is <code>EC2</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   DesiredCapacity: int
  ##                  : The number of Amazon EC2 instances that the Auto Scaling group attempts to maintain. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group. If you do not specify a desired capacity, the default is the minimum size of the group.
  ##   DefaultCooldown: int
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LaunchTemplateLaunchTemplateId: string
  ##                                 : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  ##   LaunchTemplateLaunchTemplateName: string
  ##                                   : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   LifecycleHookSpecificationList: JArray
  ##                                 : One or more lifecycle hooks.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group. This name must be unique per Region per account.
  ##   AvailabilityZones: JArray
  ##                    : <p>One or more Availability Zones for the group. This parameter is optional if you specify one or more subnets for <code>VPCZoneIdentifier</code>.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into EC2-Classic.</p>
  ##   VPCZoneIdentifier: string
  ##                    : <p>A comma-separated list of subnet IDs for your virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into a VPC.</p>
  ##   NewInstancesProtectedFromScaleIn: bool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MixedInstancesPolicyLaunchTemplate: string
  ##                                     : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   LaunchConfigurationName: string
  ##                          : <p>The name of the launch configuration.</p> <p>If you do not specify <code>LaunchConfigurationName</code>, you must specify one of the following parameters: <code>InstanceId</code>, <code>LaunchTemplate</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   Tags: JArray
  ##       : <p>One or more tags.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   PlacementGroup: string
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   MixedInstancesPolicyInstancesDistribution: string
  ##                                            : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified when creating a mixed instances policy, the default values are used.</p>
  ##   LaunchTemplateVersion: string
  ##                        : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   TargetGroupARNs: JArray
  ##                  : <p>The Amazon Resource Names (ARN) of the target groups to associate with the Auto Scaling group. Instances are registered as targets in a target group, and traffic is routed to the target group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LoadBalancerNames: JArray
  ##                    : <p>A list of Classic Load Balancers associated with this Auto Scaling group. For Application Load Balancers and Network Load Balancers, specify a list of target groups using the <code>TargetGroupARNs</code> property instead.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   InstanceId: string
  ##             : <p>The ID of the instance used to create a launch configuration for the group.</p> <p>When you specify an ID of an instance, Amazon EC2 Auto Scaling creates a new launch configuration and associates it with the group. This launch configuration derives its attributes from the specified instance, except for the block device mapping.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-from-instance.html">Create an Auto Scaling Group Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You must specify one of the following parameters in your request: <code>LaunchConfigurationName</code>, <code>LaunchTemplate</code>, <code>InstanceId</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   MaxSize: int (required)
  ##          : The maximum size of the group.
  ##   MinSize: int (required)
  ##          : The minimum size of the group.
  ##   Version: string (required)
  ##   ServiceLinkedRoleARN: string
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. By default, Amazon EC2 Auto Scaling uses a service-linked role named AWSServiceRoleForAutoScaling, which it creates if it does not exist. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  var query_773442 = newJObject()
  add(query_773442, "HealthCheckGracePeriod", newJInt(HealthCheckGracePeriod))
  if TerminationPolicies != nil:
    query_773442.add "TerminationPolicies", TerminationPolicies
  add(query_773442, "HealthCheckType", newJString(HealthCheckType))
  add(query_773442, "DesiredCapacity", newJInt(DesiredCapacity))
  add(query_773442, "DefaultCooldown", newJInt(DefaultCooldown))
  add(query_773442, "LaunchTemplate.LaunchTemplateId",
      newJString(LaunchTemplateLaunchTemplateId))
  add(query_773442, "LaunchTemplate.LaunchTemplateName",
      newJString(LaunchTemplateLaunchTemplateName))
  if LifecycleHookSpecificationList != nil:
    query_773442.add "LifecycleHookSpecificationList",
                    LifecycleHookSpecificationList
  add(query_773442, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if AvailabilityZones != nil:
    query_773442.add "AvailabilityZones", AvailabilityZones
  add(query_773442, "VPCZoneIdentifier", newJString(VPCZoneIdentifier))
  add(query_773442, "NewInstancesProtectedFromScaleIn",
      newJBool(NewInstancesProtectedFromScaleIn))
  add(query_773442, "MixedInstancesPolicy.LaunchTemplate",
      newJString(MixedInstancesPolicyLaunchTemplate))
  add(query_773442, "LaunchConfigurationName", newJString(LaunchConfigurationName))
  if Tags != nil:
    query_773442.add "Tags", Tags
  add(query_773442, "Action", newJString(Action))
  add(query_773442, "PlacementGroup", newJString(PlacementGroup))
  add(query_773442, "MixedInstancesPolicy.InstancesDistribution",
      newJString(MixedInstancesPolicyInstancesDistribution))
  add(query_773442, "LaunchTemplate.Version", newJString(LaunchTemplateVersion))
  if TargetGroupARNs != nil:
    query_773442.add "TargetGroupARNs", TargetGroupARNs
  if LoadBalancerNames != nil:
    query_773442.add "LoadBalancerNames", LoadBalancerNames
  add(query_773442, "InstanceId", newJString(InstanceId))
  add(query_773442, "MaxSize", newJInt(MaxSize))
  add(query_773442, "MinSize", newJInt(MinSize))
  add(query_773442, "Version", newJString(Version))
  add(query_773442, "ServiceLinkedRoleARN", newJString(ServiceLinkedRoleARN))
  result = call_773441.call(nil, query_773442, nil, nil, nil)

var getCreateAutoScalingGroup* = Call_GetCreateAutoScalingGroup_773404(
    name: "getCreateAutoScalingGroup", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=CreateAutoScalingGroup",
    validator: validate_GetCreateAutoScalingGroup_773405, base: "/",
    url: url_GetCreateAutoScalingGroup_773406,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateLaunchConfiguration_773516 = ref object of OpenApiRestCall_772597
proc url_PostCreateLaunchConfiguration_773518(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateLaunchConfiguration_773517(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a launch configuration.</p> <p>If you exceed your maximum limit of launch configurations, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html">Launch Configurations</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773519 = query.getOrDefault("Action")
  valid_773519 = validateParameter(valid_773519, JString, required = true, default = newJString(
      "CreateLaunchConfiguration"))
  if valid_773519 != nil:
    section.add "Action", valid_773519
  var valid_773520 = query.getOrDefault("Version")
  valid_773520 = validateParameter(valid_773520, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_773520 != nil:
    section.add "Version", valid_773520
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773521 = header.getOrDefault("X-Amz-Date")
  valid_773521 = validateParameter(valid_773521, JString, required = false,
                                 default = nil)
  if valid_773521 != nil:
    section.add "X-Amz-Date", valid_773521
  var valid_773522 = header.getOrDefault("X-Amz-Security-Token")
  valid_773522 = validateParameter(valid_773522, JString, required = false,
                                 default = nil)
  if valid_773522 != nil:
    section.add "X-Amz-Security-Token", valid_773522
  var valid_773523 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773523 = validateParameter(valid_773523, JString, required = false,
                                 default = nil)
  if valid_773523 != nil:
    section.add "X-Amz-Content-Sha256", valid_773523
  var valid_773524 = header.getOrDefault("X-Amz-Algorithm")
  valid_773524 = validateParameter(valid_773524, JString, required = false,
                                 default = nil)
  if valid_773524 != nil:
    section.add "X-Amz-Algorithm", valid_773524
  var valid_773525 = header.getOrDefault("X-Amz-Signature")
  valid_773525 = validateParameter(valid_773525, JString, required = false,
                                 default = nil)
  if valid_773525 != nil:
    section.add "X-Amz-Signature", valid_773525
  var valid_773526 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773526 = validateParameter(valid_773526, JString, required = false,
                                 default = nil)
  if valid_773526 != nil:
    section.add "X-Amz-SignedHeaders", valid_773526
  var valid_773527 = header.getOrDefault("X-Amz-Credential")
  valid_773527 = validateParameter(valid_773527, JString, required = false,
                                 default = nil)
  if valid_773527 != nil:
    section.add "X-Amz-Credential", valid_773527
  result.add "header", section
  ## parameters in `formData` object:
  ##   PlacementTenancy: JString
  ##                   : <p>The tenancy of the instance. An instance with <code>dedicated</code> tenancy runs on isolated, single-tenant hardware and can only be launched into a VPC.</p> <p>To launch dedicated instances into a shared tenancy VPC (a VPC with the instance placement tenancy attribute set to <code>default</code>), you must set the value of this parameter to <code>dedicated</code>.</p> <p>If you specify <code>PlacementTenancy</code>, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-vpc-tenancy">Instance Placement Tenancy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Valid values: <code>default</code> | <code>dedicated</code> </p>
  ##   BlockDeviceMappings: JArray
  ##                      : A block device mapping, which specifies the block devices for the instance. You can specify virtual devices and EBS volumes. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html">Block Device Mapping</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   AssociatePublicIpAddress: JBool
  ##                           : <p>For Auto Scaling groups that are running in a virtual private cloud (VPC), specifies whether to assign a public IP address to the group's instances. If you specify <code>true</code>, each instance in the Auto Scaling group receives a unique public IP address. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html">Launching Auto Scaling Instances in a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify this parameter, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <note> <p>If the instance is launched into a default subnet, the default is to assign a public IP address, unless you disabled the option to assign a public IP address on the subnet. If the instance is launched into a nondefault subnet, the default is not to assign a public IP address, unless you enabled the option to assign a public IP address on the subnet.</p> </note>
  ##   ClassicLinkVPCSecurityGroups: JArray
  ##                               : <p>The IDs of one or more security groups for the specified ClassicLink-enabled VPC. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify the <code>ClassicLinkVPCId</code> parameter, you must specify this parameter. </p>
  ##   KernelId: JString
  ##           : The ID of the kernel associated with the AMI.
  ##   KeyName: JString
  ##          : The name of the key pair. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Amazon EC2 Key Pairs</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   ImageId: JString
  ##          : <p>The ID of the Amazon Machine Image (AMI) that was assigned during registration. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html">Finding an AMI</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>ImageId</code>.</p>
  ##   LaunchConfigurationName: JString (required)
  ##                          : The name of the launch configuration. This name must be unique per Region per account.
  ##   ClassicLinkVPCId: JString
  ##                   : <p>The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>This parameter can only be used if you are launching EC2-Classic instances. </p>
  ##   InstanceMonitoring.Enabled: JString
  ##                             : Describes whether detailed monitoring is enabled for the Auto Scaling instances.
  ## If <code>true</code>, detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
  ##   IamInstanceProfile: JString
  ##                     : <p>The name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/us-iam-role.html">IAM Role for Applications That Run on Amazon EC2 Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   InstanceId: JString
  ##             : <p>The ID of the instance to use to create the launch configuration. The new launch configuration derives attributes from the instance, except for the block device mapping.</p> <p>To create a launch configuration with a block device mapping or override any other instance attributes, specify them as part of the same request.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-lc-with-instanceID.html">Create a Launch Configuration Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify both <code>ImageId</code> and <code>InstanceType</code>.</p>
  ##   UserData: JString
  ##           : The Base64-encoded user data to make available to the launched EC2 instances. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance Metadata and User Data</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   SecurityGroups: JArray
  ##                 : <p>A list that contains the security groups to assign to the instances in the Auto Scaling group.</p> <p>[EC2-VPC] Specify the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security Groups for Your VPC</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>[EC2-Classic] Specify either the security group names or the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon EC2 Security Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
  ##   RamdiskId: JString
  ##            : The ID of the RAM disk to select.
  ##   EbsOptimized: JBool
  ##               : <p>Specifies whether the launch configuration is optimized for EBS I/O (<code>true</code>) or not (<code>false</code>). The optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization is not available with all instance types. Additional fees are incurred when you enable EBS optimization for an instance type that is not EBS-optimized by default. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html">Amazon EBS-Optimized Instances</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>The default value is <code>false</code>. </p>
  ##   InstanceType: JString
  ##               : <p>Specifies the instance type of the EC2 instance.</p> <p>For information about available instance types, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes">Available Instance Types</a> in the <i>Amazon EC2 User Guide for Linux Instances.</i> </p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>InstanceType</code>.</p>
  ##   SpotPrice: JString
  ##            : <p>The maximum hourly price to be paid for any Spot Instance launched to fulfill the request. Spot Instances are launched when the price you specify exceeds the current Spot market price. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-launch-spot-instances.html">Launching Spot Instances in Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If a Spot price is set, then the Auto Scaling group will only launch instances when the Spot price has been met, regardless of the setting in the Auto Scaling group's <code>DesiredCapacity</code>. </p> <note> <p>When you change your Spot price by creating a new launch configuration, running instances will continue to run as long as the Spot price for those running instances is higher than the current Spot market price. </p> </note>
  section = newJObject()
  var valid_773528 = formData.getOrDefault("PlacementTenancy")
  valid_773528 = validateParameter(valid_773528, JString, required = false,
                                 default = nil)
  if valid_773528 != nil:
    section.add "PlacementTenancy", valid_773528
  var valid_773529 = formData.getOrDefault("BlockDeviceMappings")
  valid_773529 = validateParameter(valid_773529, JArray, required = false,
                                 default = nil)
  if valid_773529 != nil:
    section.add "BlockDeviceMappings", valid_773529
  var valid_773530 = formData.getOrDefault("AssociatePublicIpAddress")
  valid_773530 = validateParameter(valid_773530, JBool, required = false, default = nil)
  if valid_773530 != nil:
    section.add "AssociatePublicIpAddress", valid_773530
  var valid_773531 = formData.getOrDefault("ClassicLinkVPCSecurityGroups")
  valid_773531 = validateParameter(valid_773531, JArray, required = false,
                                 default = nil)
  if valid_773531 != nil:
    section.add "ClassicLinkVPCSecurityGroups", valid_773531
  var valid_773532 = formData.getOrDefault("KernelId")
  valid_773532 = validateParameter(valid_773532, JString, required = false,
                                 default = nil)
  if valid_773532 != nil:
    section.add "KernelId", valid_773532
  var valid_773533 = formData.getOrDefault("KeyName")
  valid_773533 = validateParameter(valid_773533, JString, required = false,
                                 default = nil)
  if valid_773533 != nil:
    section.add "KeyName", valid_773533
  var valid_773534 = formData.getOrDefault("ImageId")
  valid_773534 = validateParameter(valid_773534, JString, required = false,
                                 default = nil)
  if valid_773534 != nil:
    section.add "ImageId", valid_773534
  assert formData != nil, "formData argument is necessary due to required `LaunchConfigurationName` field"
  var valid_773535 = formData.getOrDefault("LaunchConfigurationName")
  valid_773535 = validateParameter(valid_773535, JString, required = true,
                                 default = nil)
  if valid_773535 != nil:
    section.add "LaunchConfigurationName", valid_773535
  var valid_773536 = formData.getOrDefault("ClassicLinkVPCId")
  valid_773536 = validateParameter(valid_773536, JString, required = false,
                                 default = nil)
  if valid_773536 != nil:
    section.add "ClassicLinkVPCId", valid_773536
  var valid_773537 = formData.getOrDefault("InstanceMonitoring.Enabled")
  valid_773537 = validateParameter(valid_773537, JString, required = false,
                                 default = nil)
  if valid_773537 != nil:
    section.add "InstanceMonitoring.Enabled", valid_773537
  var valid_773538 = formData.getOrDefault("IamInstanceProfile")
  valid_773538 = validateParameter(valid_773538, JString, required = false,
                                 default = nil)
  if valid_773538 != nil:
    section.add "IamInstanceProfile", valid_773538
  var valid_773539 = formData.getOrDefault("InstanceId")
  valid_773539 = validateParameter(valid_773539, JString, required = false,
                                 default = nil)
  if valid_773539 != nil:
    section.add "InstanceId", valid_773539
  var valid_773540 = formData.getOrDefault("UserData")
  valid_773540 = validateParameter(valid_773540, JString, required = false,
                                 default = nil)
  if valid_773540 != nil:
    section.add "UserData", valid_773540
  var valid_773541 = formData.getOrDefault("SecurityGroups")
  valid_773541 = validateParameter(valid_773541, JArray, required = false,
                                 default = nil)
  if valid_773541 != nil:
    section.add "SecurityGroups", valid_773541
  var valid_773542 = formData.getOrDefault("RamdiskId")
  valid_773542 = validateParameter(valid_773542, JString, required = false,
                                 default = nil)
  if valid_773542 != nil:
    section.add "RamdiskId", valid_773542
  var valid_773543 = formData.getOrDefault("EbsOptimized")
  valid_773543 = validateParameter(valid_773543, JBool, required = false, default = nil)
  if valid_773543 != nil:
    section.add "EbsOptimized", valid_773543
  var valid_773544 = formData.getOrDefault("InstanceType")
  valid_773544 = validateParameter(valid_773544, JString, required = false,
                                 default = nil)
  if valid_773544 != nil:
    section.add "InstanceType", valid_773544
  var valid_773545 = formData.getOrDefault("SpotPrice")
  valid_773545 = validateParameter(valid_773545, JString, required = false,
                                 default = nil)
  if valid_773545 != nil:
    section.add "SpotPrice", valid_773545
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773546: Call_PostCreateLaunchConfiguration_773516; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a launch configuration.</p> <p>If you exceed your maximum limit of launch configurations, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html">Launch Configurations</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_773546.validator(path, query, header, formData, body)
  let scheme = call_773546.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773546.url(scheme.get, call_773546.host, call_773546.base,
                         call_773546.route, valid.getOrDefault("path"))
  result = hook(call_773546, url, valid)

proc call*(call_773547: Call_PostCreateLaunchConfiguration_773516;
          LaunchConfigurationName: string; PlacementTenancy: string = "";
          BlockDeviceMappings: JsonNode = nil;
          AssociatePublicIpAddress: bool = false;
          ClassicLinkVPCSecurityGroups: JsonNode = nil; KernelId: string = "";
          KeyName: string = ""; ImageId: string = ""; ClassicLinkVPCId: string = "";
          InstanceMonitoringEnabled: string = ""; IamInstanceProfile: string = "";
          Action: string = "CreateLaunchConfiguration"; InstanceId: string = "";
          UserData: string = ""; SecurityGroups: JsonNode = nil; RamdiskId: string = "";
          EbsOptimized: bool = false; InstanceType: string = ""; SpotPrice: string = "";
          Version: string = "2011-01-01"): Recallable =
  ## postCreateLaunchConfiguration
  ## <p>Creates a launch configuration.</p> <p>If you exceed your maximum limit of launch configurations, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html">Launch Configurations</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   PlacementTenancy: string
  ##                   : <p>The tenancy of the instance. An instance with <code>dedicated</code> tenancy runs on isolated, single-tenant hardware and can only be launched into a VPC.</p> <p>To launch dedicated instances into a shared tenancy VPC (a VPC with the instance placement tenancy attribute set to <code>default</code>), you must set the value of this parameter to <code>dedicated</code>.</p> <p>If you specify <code>PlacementTenancy</code>, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-vpc-tenancy">Instance Placement Tenancy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Valid values: <code>default</code> | <code>dedicated</code> </p>
  ##   BlockDeviceMappings: JArray
  ##                      : A block device mapping, which specifies the block devices for the instance. You can specify virtual devices and EBS volumes. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html">Block Device Mapping</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   AssociatePublicIpAddress: bool
  ##                           : <p>For Auto Scaling groups that are running in a virtual private cloud (VPC), specifies whether to assign a public IP address to the group's instances. If you specify <code>true</code>, each instance in the Auto Scaling group receives a unique public IP address. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html">Launching Auto Scaling Instances in a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify this parameter, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <note> <p>If the instance is launched into a default subnet, the default is to assign a public IP address, unless you disabled the option to assign a public IP address on the subnet. If the instance is launched into a nondefault subnet, the default is not to assign a public IP address, unless you enabled the option to assign a public IP address on the subnet.</p> </note>
  ##   ClassicLinkVPCSecurityGroups: JArray
  ##                               : <p>The IDs of one or more security groups for the specified ClassicLink-enabled VPC. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify the <code>ClassicLinkVPCId</code> parameter, you must specify this parameter. </p>
  ##   KernelId: string
  ##           : The ID of the kernel associated with the AMI.
  ##   KeyName: string
  ##          : The name of the key pair. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Amazon EC2 Key Pairs</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   ImageId: string
  ##          : <p>The ID of the Amazon Machine Image (AMI) that was assigned during registration. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html">Finding an AMI</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>ImageId</code>.</p>
  ##   LaunchConfigurationName: string (required)
  ##                          : The name of the launch configuration. This name must be unique per Region per account.
  ##   ClassicLinkVPCId: string
  ##                   : <p>The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>This parameter can only be used if you are launching EC2-Classic instances. </p>
  ##   InstanceMonitoringEnabled: string
  ##                            : Describes whether detailed monitoring is enabled for the Auto Scaling instances.
  ## If <code>true</code>, detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
  ##   IamInstanceProfile: string
  ##                     : <p>The name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/us-iam-role.html">IAM Role for Applications That Run on Amazon EC2 Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   InstanceId: string
  ##             : <p>The ID of the instance to use to create the launch configuration. The new launch configuration derives attributes from the instance, except for the block device mapping.</p> <p>To create a launch configuration with a block device mapping or override any other instance attributes, specify them as part of the same request.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-lc-with-instanceID.html">Create a Launch Configuration Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify both <code>ImageId</code> and <code>InstanceType</code>.</p>
  ##   UserData: string
  ##           : The Base64-encoded user data to make available to the launched EC2 instances. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance Metadata and User Data</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   SecurityGroups: JArray
  ##                 : <p>A list that contains the security groups to assign to the instances in the Auto Scaling group.</p> <p>[EC2-VPC] Specify the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security Groups for Your VPC</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>[EC2-Classic] Specify either the security group names or the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon EC2 Security Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
  ##   RamdiskId: string
  ##            : The ID of the RAM disk to select.
  ##   EbsOptimized: bool
  ##               : <p>Specifies whether the launch configuration is optimized for EBS I/O (<code>true</code>) or not (<code>false</code>). The optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization is not available with all instance types. Additional fees are incurred when you enable EBS optimization for an instance type that is not EBS-optimized by default. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html">Amazon EBS-Optimized Instances</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>The default value is <code>false</code>. </p>
  ##   InstanceType: string
  ##               : <p>Specifies the instance type of the EC2 instance.</p> <p>For information about available instance types, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes">Available Instance Types</a> in the <i>Amazon EC2 User Guide for Linux Instances.</i> </p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>InstanceType</code>.</p>
  ##   SpotPrice: string
  ##            : <p>The maximum hourly price to be paid for any Spot Instance launched to fulfill the request. Spot Instances are launched when the price you specify exceeds the current Spot market price. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-launch-spot-instances.html">Launching Spot Instances in Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If a Spot price is set, then the Auto Scaling group will only launch instances when the Spot price has been met, regardless of the setting in the Auto Scaling group's <code>DesiredCapacity</code>. </p> <note> <p>When you change your Spot price by creating a new launch configuration, running instances will continue to run as long as the Spot price for those running instances is higher than the current Spot market price. </p> </note>
  ##   Version: string (required)
  var query_773548 = newJObject()
  var formData_773549 = newJObject()
  add(formData_773549, "PlacementTenancy", newJString(PlacementTenancy))
  if BlockDeviceMappings != nil:
    formData_773549.add "BlockDeviceMappings", BlockDeviceMappings
  add(formData_773549, "AssociatePublicIpAddress",
      newJBool(AssociatePublicIpAddress))
  if ClassicLinkVPCSecurityGroups != nil:
    formData_773549.add "ClassicLinkVPCSecurityGroups",
                       ClassicLinkVPCSecurityGroups
  add(formData_773549, "KernelId", newJString(KernelId))
  add(formData_773549, "KeyName", newJString(KeyName))
  add(formData_773549, "ImageId", newJString(ImageId))
  add(formData_773549, "LaunchConfigurationName",
      newJString(LaunchConfigurationName))
  add(formData_773549, "ClassicLinkVPCId", newJString(ClassicLinkVPCId))
  add(formData_773549, "InstanceMonitoring.Enabled",
      newJString(InstanceMonitoringEnabled))
  add(formData_773549, "IamInstanceProfile", newJString(IamInstanceProfile))
  add(query_773548, "Action", newJString(Action))
  add(formData_773549, "InstanceId", newJString(InstanceId))
  add(formData_773549, "UserData", newJString(UserData))
  if SecurityGroups != nil:
    formData_773549.add "SecurityGroups", SecurityGroups
  add(formData_773549, "RamdiskId", newJString(RamdiskId))
  add(formData_773549, "EbsOptimized", newJBool(EbsOptimized))
  add(formData_773549, "InstanceType", newJString(InstanceType))
  add(formData_773549, "SpotPrice", newJString(SpotPrice))
  add(query_773548, "Version", newJString(Version))
  result = call_773547.call(nil, query_773548, nil, formData_773549, nil)

var postCreateLaunchConfiguration* = Call_PostCreateLaunchConfiguration_773516(
    name: "postCreateLaunchConfiguration", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=CreateLaunchConfiguration",
    validator: validate_PostCreateLaunchConfiguration_773517, base: "/",
    url: url_PostCreateLaunchConfiguration_773518,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateLaunchConfiguration_773483 = ref object of OpenApiRestCall_772597
proc url_GetCreateLaunchConfiguration_773485(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateLaunchConfiguration_773484(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a launch configuration.</p> <p>If you exceed your maximum limit of launch configurations, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html">Launch Configurations</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PlacementTenancy: JString
  ##                   : <p>The tenancy of the instance. An instance with <code>dedicated</code> tenancy runs on isolated, single-tenant hardware and can only be launched into a VPC.</p> <p>To launch dedicated instances into a shared tenancy VPC (a VPC with the instance placement tenancy attribute set to <code>default</code>), you must set the value of this parameter to <code>dedicated</code>.</p> <p>If you specify <code>PlacementTenancy</code>, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-vpc-tenancy">Instance Placement Tenancy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Valid values: <code>default</code> | <code>dedicated</code> </p>
  ##   KeyName: JString
  ##          : The name of the key pair. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Amazon EC2 Key Pairs</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   KernelId: JString
  ##           : The ID of the kernel associated with the AMI.
  ##   UserData: JString
  ##           : The Base64-encoded user data to make available to the launched EC2 instances. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance Metadata and User Data</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   LaunchConfigurationName: JString (required)
  ##                          : The name of the launch configuration. This name must be unique per Region per account.
  ##   AssociatePublicIpAddress: JBool
  ##                           : <p>For Auto Scaling groups that are running in a virtual private cloud (VPC), specifies whether to assign a public IP address to the group's instances. If you specify <code>true</code>, each instance in the Auto Scaling group receives a unique public IP address. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html">Launching Auto Scaling Instances in a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify this parameter, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <note> <p>If the instance is launched into a default subnet, the default is to assign a public IP address, unless you disabled the option to assign a public IP address on the subnet. If the instance is launched into a nondefault subnet, the default is not to assign a public IP address, unless you enabled the option to assign a public IP address on the subnet.</p> </note>
  ##   EbsOptimized: JBool
  ##               : <p>Specifies whether the launch configuration is optimized for EBS I/O (<code>true</code>) or not (<code>false</code>). The optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization is not available with all instance types. Additional fees are incurred when you enable EBS optimization for an instance type that is not EBS-optimized by default. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html">Amazon EBS-Optimized Instances</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>The default value is <code>false</code>. </p>
  ##   ImageId: JString
  ##          : <p>The ID of the Amazon Machine Image (AMI) that was assigned during registration. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html">Finding an AMI</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>ImageId</code>.</p>
  ##   Action: JString (required)
  ##   InstanceMonitoring.Enabled: JString
  ##                             : Describes whether detailed monitoring is enabled for the Auto Scaling instances.
  ## If <code>true</code>, detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
  ##   BlockDeviceMappings: JArray
  ##                      : A block device mapping, which specifies the block devices for the instance. You can specify virtual devices and EBS volumes. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html">Block Device Mapping</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   RamdiskId: JString
  ##            : The ID of the RAM disk to select.
  ##   ClassicLinkVPCSecurityGroups: JArray
  ##                               : <p>The IDs of one or more security groups for the specified ClassicLink-enabled VPC. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify the <code>ClassicLinkVPCId</code> parameter, you must specify this parameter. </p>
  ##   InstanceType: JString
  ##               : <p>Specifies the instance type of the EC2 instance.</p> <p>For information about available instance types, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes">Available Instance Types</a> in the <i>Amazon EC2 User Guide for Linux Instances.</i> </p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>InstanceType</code>.</p>
  ##   ClassicLinkVPCId: JString
  ##                   : <p>The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>This parameter can only be used if you are launching EC2-Classic instances. </p>
  ##   InstanceId: JString
  ##             : <p>The ID of the instance to use to create the launch configuration. The new launch configuration derives attributes from the instance, except for the block device mapping.</p> <p>To create a launch configuration with a block device mapping or override any other instance attributes, specify them as part of the same request.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-lc-with-instanceID.html">Create a Launch Configuration Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify both <code>ImageId</code> and <code>InstanceType</code>.</p>
  ##   IamInstanceProfile: JString
  ##                     : <p>The name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/us-iam-role.html">IAM Role for Applications That Run on Amazon EC2 Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Version: JString (required)
  ##   SecurityGroups: JArray
  ##                 : <p>A list that contains the security groups to assign to the instances in the Auto Scaling group.</p> <p>[EC2-VPC] Specify the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security Groups for Your VPC</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>[EC2-Classic] Specify either the security group names or the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon EC2 Security Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
  ##   SpotPrice: JString
  ##            : <p>The maximum hourly price to be paid for any Spot Instance launched to fulfill the request. Spot Instances are launched when the price you specify exceeds the current Spot market price. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-launch-spot-instances.html">Launching Spot Instances in Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If a Spot price is set, then the Auto Scaling group will only launch instances when the Spot price has been met, regardless of the setting in the Auto Scaling group's <code>DesiredCapacity</code>. </p> <note> <p>When you change your Spot price by creating a new launch configuration, running instances will continue to run as long as the Spot price for those running instances is higher than the current Spot market price. </p> </note>
  section = newJObject()
  var valid_773486 = query.getOrDefault("PlacementTenancy")
  valid_773486 = validateParameter(valid_773486, JString, required = false,
                                 default = nil)
  if valid_773486 != nil:
    section.add "PlacementTenancy", valid_773486
  var valid_773487 = query.getOrDefault("KeyName")
  valid_773487 = validateParameter(valid_773487, JString, required = false,
                                 default = nil)
  if valid_773487 != nil:
    section.add "KeyName", valid_773487
  var valid_773488 = query.getOrDefault("KernelId")
  valid_773488 = validateParameter(valid_773488, JString, required = false,
                                 default = nil)
  if valid_773488 != nil:
    section.add "KernelId", valid_773488
  var valid_773489 = query.getOrDefault("UserData")
  valid_773489 = validateParameter(valid_773489, JString, required = false,
                                 default = nil)
  if valid_773489 != nil:
    section.add "UserData", valid_773489
  assert query != nil, "query argument is necessary due to required `LaunchConfigurationName` field"
  var valid_773490 = query.getOrDefault("LaunchConfigurationName")
  valid_773490 = validateParameter(valid_773490, JString, required = true,
                                 default = nil)
  if valid_773490 != nil:
    section.add "LaunchConfigurationName", valid_773490
  var valid_773491 = query.getOrDefault("AssociatePublicIpAddress")
  valid_773491 = validateParameter(valid_773491, JBool, required = false, default = nil)
  if valid_773491 != nil:
    section.add "AssociatePublicIpAddress", valid_773491
  var valid_773492 = query.getOrDefault("EbsOptimized")
  valid_773492 = validateParameter(valid_773492, JBool, required = false, default = nil)
  if valid_773492 != nil:
    section.add "EbsOptimized", valid_773492
  var valid_773493 = query.getOrDefault("ImageId")
  valid_773493 = validateParameter(valid_773493, JString, required = false,
                                 default = nil)
  if valid_773493 != nil:
    section.add "ImageId", valid_773493
  var valid_773494 = query.getOrDefault("Action")
  valid_773494 = validateParameter(valid_773494, JString, required = true, default = newJString(
      "CreateLaunchConfiguration"))
  if valid_773494 != nil:
    section.add "Action", valid_773494
  var valid_773495 = query.getOrDefault("InstanceMonitoring.Enabled")
  valid_773495 = validateParameter(valid_773495, JString, required = false,
                                 default = nil)
  if valid_773495 != nil:
    section.add "InstanceMonitoring.Enabled", valid_773495
  var valid_773496 = query.getOrDefault("BlockDeviceMappings")
  valid_773496 = validateParameter(valid_773496, JArray, required = false,
                                 default = nil)
  if valid_773496 != nil:
    section.add "BlockDeviceMappings", valid_773496
  var valid_773497 = query.getOrDefault("RamdiskId")
  valid_773497 = validateParameter(valid_773497, JString, required = false,
                                 default = nil)
  if valid_773497 != nil:
    section.add "RamdiskId", valid_773497
  var valid_773498 = query.getOrDefault("ClassicLinkVPCSecurityGroups")
  valid_773498 = validateParameter(valid_773498, JArray, required = false,
                                 default = nil)
  if valid_773498 != nil:
    section.add "ClassicLinkVPCSecurityGroups", valid_773498
  var valid_773499 = query.getOrDefault("InstanceType")
  valid_773499 = validateParameter(valid_773499, JString, required = false,
                                 default = nil)
  if valid_773499 != nil:
    section.add "InstanceType", valid_773499
  var valid_773500 = query.getOrDefault("ClassicLinkVPCId")
  valid_773500 = validateParameter(valid_773500, JString, required = false,
                                 default = nil)
  if valid_773500 != nil:
    section.add "ClassicLinkVPCId", valid_773500
  var valid_773501 = query.getOrDefault("InstanceId")
  valid_773501 = validateParameter(valid_773501, JString, required = false,
                                 default = nil)
  if valid_773501 != nil:
    section.add "InstanceId", valid_773501
  var valid_773502 = query.getOrDefault("IamInstanceProfile")
  valid_773502 = validateParameter(valid_773502, JString, required = false,
                                 default = nil)
  if valid_773502 != nil:
    section.add "IamInstanceProfile", valid_773502
  var valid_773503 = query.getOrDefault("Version")
  valid_773503 = validateParameter(valid_773503, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_773503 != nil:
    section.add "Version", valid_773503
  var valid_773504 = query.getOrDefault("SecurityGroups")
  valid_773504 = validateParameter(valid_773504, JArray, required = false,
                                 default = nil)
  if valid_773504 != nil:
    section.add "SecurityGroups", valid_773504
  var valid_773505 = query.getOrDefault("SpotPrice")
  valid_773505 = validateParameter(valid_773505, JString, required = false,
                                 default = nil)
  if valid_773505 != nil:
    section.add "SpotPrice", valid_773505
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773506 = header.getOrDefault("X-Amz-Date")
  valid_773506 = validateParameter(valid_773506, JString, required = false,
                                 default = nil)
  if valid_773506 != nil:
    section.add "X-Amz-Date", valid_773506
  var valid_773507 = header.getOrDefault("X-Amz-Security-Token")
  valid_773507 = validateParameter(valid_773507, JString, required = false,
                                 default = nil)
  if valid_773507 != nil:
    section.add "X-Amz-Security-Token", valid_773507
  var valid_773508 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773508 = validateParameter(valid_773508, JString, required = false,
                                 default = nil)
  if valid_773508 != nil:
    section.add "X-Amz-Content-Sha256", valid_773508
  var valid_773509 = header.getOrDefault("X-Amz-Algorithm")
  valid_773509 = validateParameter(valid_773509, JString, required = false,
                                 default = nil)
  if valid_773509 != nil:
    section.add "X-Amz-Algorithm", valid_773509
  var valid_773510 = header.getOrDefault("X-Amz-Signature")
  valid_773510 = validateParameter(valid_773510, JString, required = false,
                                 default = nil)
  if valid_773510 != nil:
    section.add "X-Amz-Signature", valid_773510
  var valid_773511 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773511 = validateParameter(valid_773511, JString, required = false,
                                 default = nil)
  if valid_773511 != nil:
    section.add "X-Amz-SignedHeaders", valid_773511
  var valid_773512 = header.getOrDefault("X-Amz-Credential")
  valid_773512 = validateParameter(valid_773512, JString, required = false,
                                 default = nil)
  if valid_773512 != nil:
    section.add "X-Amz-Credential", valid_773512
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773513: Call_GetCreateLaunchConfiguration_773483; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a launch configuration.</p> <p>If you exceed your maximum limit of launch configurations, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html">Launch Configurations</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_773513.validator(path, query, header, formData, body)
  let scheme = call_773513.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773513.url(scheme.get, call_773513.host, call_773513.base,
                         call_773513.route, valid.getOrDefault("path"))
  result = hook(call_773513, url, valid)

proc call*(call_773514: Call_GetCreateLaunchConfiguration_773483;
          LaunchConfigurationName: string; PlacementTenancy: string = "";
          KeyName: string = ""; KernelId: string = ""; UserData: string = "";
          AssociatePublicIpAddress: bool = false; EbsOptimized: bool = false;
          ImageId: string = ""; Action: string = "CreateLaunchConfiguration";
          InstanceMonitoringEnabled: string = "";
          BlockDeviceMappings: JsonNode = nil; RamdiskId: string = "";
          ClassicLinkVPCSecurityGroups: JsonNode = nil; InstanceType: string = "";
          ClassicLinkVPCId: string = ""; InstanceId: string = "";
          IamInstanceProfile: string = ""; Version: string = "2011-01-01";
          SecurityGroups: JsonNode = nil; SpotPrice: string = ""): Recallable =
  ## getCreateLaunchConfiguration
  ## <p>Creates a launch configuration.</p> <p>If you exceed your maximum limit of launch configurations, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html">Launch Configurations</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   PlacementTenancy: string
  ##                   : <p>The tenancy of the instance. An instance with <code>dedicated</code> tenancy runs on isolated, single-tenant hardware and can only be launched into a VPC.</p> <p>To launch dedicated instances into a shared tenancy VPC (a VPC with the instance placement tenancy attribute set to <code>default</code>), you must set the value of this parameter to <code>dedicated</code>.</p> <p>If you specify <code>PlacementTenancy</code>, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-vpc-tenancy">Instance Placement Tenancy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Valid values: <code>default</code> | <code>dedicated</code> </p>
  ##   KeyName: string
  ##          : The name of the key pair. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Amazon EC2 Key Pairs</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   KernelId: string
  ##           : The ID of the kernel associated with the AMI.
  ##   UserData: string
  ##           : The Base64-encoded user data to make available to the launched EC2 instances. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance Metadata and User Data</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   LaunchConfigurationName: string (required)
  ##                          : The name of the launch configuration. This name must be unique per Region per account.
  ##   AssociatePublicIpAddress: bool
  ##                           : <p>For Auto Scaling groups that are running in a virtual private cloud (VPC), specifies whether to assign a public IP address to the group's instances. If you specify <code>true</code>, each instance in the Auto Scaling group receives a unique public IP address. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html">Launching Auto Scaling Instances in a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify this parameter, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <note> <p>If the instance is launched into a default subnet, the default is to assign a public IP address, unless you disabled the option to assign a public IP address on the subnet. If the instance is launched into a nondefault subnet, the default is not to assign a public IP address, unless you enabled the option to assign a public IP address on the subnet.</p> </note>
  ##   EbsOptimized: bool
  ##               : <p>Specifies whether the launch configuration is optimized for EBS I/O (<code>true</code>) or not (<code>false</code>). The optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization is not available with all instance types. Additional fees are incurred when you enable EBS optimization for an instance type that is not EBS-optimized by default. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html">Amazon EBS-Optimized Instances</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>The default value is <code>false</code>. </p>
  ##   ImageId: string
  ##          : <p>The ID of the Amazon Machine Image (AMI) that was assigned during registration. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html">Finding an AMI</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>ImageId</code>.</p>
  ##   Action: string (required)
  ##   InstanceMonitoringEnabled: string
  ##                            : Describes whether detailed monitoring is enabled for the Auto Scaling instances.
  ## If <code>true</code>, detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
  ##   BlockDeviceMappings: JArray
  ##                      : A block device mapping, which specifies the block devices for the instance. You can specify virtual devices and EBS volumes. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html">Block Device Mapping</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   RamdiskId: string
  ##            : The ID of the RAM disk to select.
  ##   ClassicLinkVPCSecurityGroups: JArray
  ##                               : <p>The IDs of one or more security groups for the specified ClassicLink-enabled VPC. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify the <code>ClassicLinkVPCId</code> parameter, you must specify this parameter. </p>
  ##   InstanceType: string
  ##               : <p>Specifies the instance type of the EC2 instance.</p> <p>For information about available instance types, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes">Available Instance Types</a> in the <i>Amazon EC2 User Guide for Linux Instances.</i> </p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>InstanceType</code>.</p>
  ##   ClassicLinkVPCId: string
  ##                   : <p>The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>This parameter can only be used if you are launching EC2-Classic instances. </p>
  ##   InstanceId: string
  ##             : <p>The ID of the instance to use to create the launch configuration. The new launch configuration derives attributes from the instance, except for the block device mapping.</p> <p>To create a launch configuration with a block device mapping or override any other instance attributes, specify them as part of the same request.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-lc-with-instanceID.html">Create a Launch Configuration Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify both <code>ImageId</code> and <code>InstanceType</code>.</p>
  ##   IamInstanceProfile: string
  ##                     : <p>The name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/us-iam-role.html">IAM Role for Applications That Run on Amazon EC2 Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Version: string (required)
  ##   SecurityGroups: JArray
  ##                 : <p>A list that contains the security groups to assign to the instances in the Auto Scaling group.</p> <p>[EC2-VPC] Specify the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security Groups for Your VPC</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>[EC2-Classic] Specify either the security group names or the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon EC2 Security Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
  ##   SpotPrice: string
  ##            : <p>The maximum hourly price to be paid for any Spot Instance launched to fulfill the request. Spot Instances are launched when the price you specify exceeds the current Spot market price. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-launch-spot-instances.html">Launching Spot Instances in Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If a Spot price is set, then the Auto Scaling group will only launch instances when the Spot price has been met, regardless of the setting in the Auto Scaling group's <code>DesiredCapacity</code>. </p> <note> <p>When you change your Spot price by creating a new launch configuration, running instances will continue to run as long as the Spot price for those running instances is higher than the current Spot market price. </p> </note>
  var query_773515 = newJObject()
  add(query_773515, "PlacementTenancy", newJString(PlacementTenancy))
  add(query_773515, "KeyName", newJString(KeyName))
  add(query_773515, "KernelId", newJString(KernelId))
  add(query_773515, "UserData", newJString(UserData))
  add(query_773515, "LaunchConfigurationName", newJString(LaunchConfigurationName))
  add(query_773515, "AssociatePublicIpAddress", newJBool(AssociatePublicIpAddress))
  add(query_773515, "EbsOptimized", newJBool(EbsOptimized))
  add(query_773515, "ImageId", newJString(ImageId))
  add(query_773515, "Action", newJString(Action))
  add(query_773515, "InstanceMonitoring.Enabled",
      newJString(InstanceMonitoringEnabled))
  if BlockDeviceMappings != nil:
    query_773515.add "BlockDeviceMappings", BlockDeviceMappings
  add(query_773515, "RamdiskId", newJString(RamdiskId))
  if ClassicLinkVPCSecurityGroups != nil:
    query_773515.add "ClassicLinkVPCSecurityGroups", ClassicLinkVPCSecurityGroups
  add(query_773515, "InstanceType", newJString(InstanceType))
  add(query_773515, "ClassicLinkVPCId", newJString(ClassicLinkVPCId))
  add(query_773515, "InstanceId", newJString(InstanceId))
  add(query_773515, "IamInstanceProfile", newJString(IamInstanceProfile))
  add(query_773515, "Version", newJString(Version))
  if SecurityGroups != nil:
    query_773515.add "SecurityGroups", SecurityGroups
  add(query_773515, "SpotPrice", newJString(SpotPrice))
  result = call_773514.call(nil, query_773515, nil, nil, nil)

var getCreateLaunchConfiguration* = Call_GetCreateLaunchConfiguration_773483(
    name: "getCreateLaunchConfiguration", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=CreateLaunchConfiguration",
    validator: validate_GetCreateLaunchConfiguration_773484, base: "/",
    url: url_GetCreateLaunchConfiguration_773485,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateOrUpdateTags_773566 = ref object of OpenApiRestCall_772597
proc url_PostCreateOrUpdateTags_773568(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateOrUpdateTags_773567(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates or updates tags for the specified Auto Scaling group.</p> <p>When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773569 = query.getOrDefault("Action")
  valid_773569 = validateParameter(valid_773569, JString, required = true,
                                 default = newJString("CreateOrUpdateTags"))
  if valid_773569 != nil:
    section.add "Action", valid_773569
  var valid_773570 = query.getOrDefault("Version")
  valid_773570 = validateParameter(valid_773570, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_773570 != nil:
    section.add "Version", valid_773570
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773571 = header.getOrDefault("X-Amz-Date")
  valid_773571 = validateParameter(valid_773571, JString, required = false,
                                 default = nil)
  if valid_773571 != nil:
    section.add "X-Amz-Date", valid_773571
  var valid_773572 = header.getOrDefault("X-Amz-Security-Token")
  valid_773572 = validateParameter(valid_773572, JString, required = false,
                                 default = nil)
  if valid_773572 != nil:
    section.add "X-Amz-Security-Token", valid_773572
  var valid_773573 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773573 = validateParameter(valid_773573, JString, required = false,
                                 default = nil)
  if valid_773573 != nil:
    section.add "X-Amz-Content-Sha256", valid_773573
  var valid_773574 = header.getOrDefault("X-Amz-Algorithm")
  valid_773574 = validateParameter(valid_773574, JString, required = false,
                                 default = nil)
  if valid_773574 != nil:
    section.add "X-Amz-Algorithm", valid_773574
  var valid_773575 = header.getOrDefault("X-Amz-Signature")
  valid_773575 = validateParameter(valid_773575, JString, required = false,
                                 default = nil)
  if valid_773575 != nil:
    section.add "X-Amz-Signature", valid_773575
  var valid_773576 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773576 = validateParameter(valid_773576, JString, required = false,
                                 default = nil)
  if valid_773576 != nil:
    section.add "X-Amz-SignedHeaders", valid_773576
  var valid_773577 = header.getOrDefault("X-Amz-Credential")
  valid_773577 = validateParameter(valid_773577, JString, required = false,
                                 default = nil)
  if valid_773577 != nil:
    section.add "X-Amz-Credential", valid_773577
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray (required)
  ##       : One or more tags.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Tags` field"
  var valid_773578 = formData.getOrDefault("Tags")
  valid_773578 = validateParameter(valid_773578, JArray, required = true, default = nil)
  if valid_773578 != nil:
    section.add "Tags", valid_773578
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773579: Call_PostCreateOrUpdateTags_773566; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates or updates tags for the specified Auto Scaling group.</p> <p>When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_773579.validator(path, query, header, formData, body)
  let scheme = call_773579.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773579.url(scheme.get, call_773579.host, call_773579.base,
                         call_773579.route, valid.getOrDefault("path"))
  result = hook(call_773579, url, valid)

proc call*(call_773580: Call_PostCreateOrUpdateTags_773566; Tags: JsonNode;
          Action: string = "CreateOrUpdateTags"; Version: string = "2011-01-01"): Recallable =
  ## postCreateOrUpdateTags
  ## <p>Creates or updates tags for the specified Auto Scaling group.</p> <p>When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Tags: JArray (required)
  ##       : One or more tags.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773581 = newJObject()
  var formData_773582 = newJObject()
  if Tags != nil:
    formData_773582.add "Tags", Tags
  add(query_773581, "Action", newJString(Action))
  add(query_773581, "Version", newJString(Version))
  result = call_773580.call(nil, query_773581, nil, formData_773582, nil)

var postCreateOrUpdateTags* = Call_PostCreateOrUpdateTags_773566(
    name: "postCreateOrUpdateTags", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=CreateOrUpdateTags",
    validator: validate_PostCreateOrUpdateTags_773567, base: "/",
    url: url_PostCreateOrUpdateTags_773568, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateOrUpdateTags_773550 = ref object of OpenApiRestCall_772597
proc url_GetCreateOrUpdateTags_773552(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateOrUpdateTags_773551(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates or updates tags for the specified Auto Scaling group.</p> <p>When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : One or more tags.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_773553 = query.getOrDefault("Tags")
  valid_773553 = validateParameter(valid_773553, JArray, required = true, default = nil)
  if valid_773553 != nil:
    section.add "Tags", valid_773553
  var valid_773554 = query.getOrDefault("Action")
  valid_773554 = validateParameter(valid_773554, JString, required = true,
                                 default = newJString("CreateOrUpdateTags"))
  if valid_773554 != nil:
    section.add "Action", valid_773554
  var valid_773555 = query.getOrDefault("Version")
  valid_773555 = validateParameter(valid_773555, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_773555 != nil:
    section.add "Version", valid_773555
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773556 = header.getOrDefault("X-Amz-Date")
  valid_773556 = validateParameter(valid_773556, JString, required = false,
                                 default = nil)
  if valid_773556 != nil:
    section.add "X-Amz-Date", valid_773556
  var valid_773557 = header.getOrDefault("X-Amz-Security-Token")
  valid_773557 = validateParameter(valid_773557, JString, required = false,
                                 default = nil)
  if valid_773557 != nil:
    section.add "X-Amz-Security-Token", valid_773557
  var valid_773558 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773558 = validateParameter(valid_773558, JString, required = false,
                                 default = nil)
  if valid_773558 != nil:
    section.add "X-Amz-Content-Sha256", valid_773558
  var valid_773559 = header.getOrDefault("X-Amz-Algorithm")
  valid_773559 = validateParameter(valid_773559, JString, required = false,
                                 default = nil)
  if valid_773559 != nil:
    section.add "X-Amz-Algorithm", valid_773559
  var valid_773560 = header.getOrDefault("X-Amz-Signature")
  valid_773560 = validateParameter(valid_773560, JString, required = false,
                                 default = nil)
  if valid_773560 != nil:
    section.add "X-Amz-Signature", valid_773560
  var valid_773561 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773561 = validateParameter(valid_773561, JString, required = false,
                                 default = nil)
  if valid_773561 != nil:
    section.add "X-Amz-SignedHeaders", valid_773561
  var valid_773562 = header.getOrDefault("X-Amz-Credential")
  valid_773562 = validateParameter(valid_773562, JString, required = false,
                                 default = nil)
  if valid_773562 != nil:
    section.add "X-Amz-Credential", valid_773562
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773563: Call_GetCreateOrUpdateTags_773550; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates or updates tags for the specified Auto Scaling group.</p> <p>When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_773563.validator(path, query, header, formData, body)
  let scheme = call_773563.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773563.url(scheme.get, call_773563.host, call_773563.base,
                         call_773563.route, valid.getOrDefault("path"))
  result = hook(call_773563, url, valid)

proc call*(call_773564: Call_GetCreateOrUpdateTags_773550; Tags: JsonNode;
          Action: string = "CreateOrUpdateTags"; Version: string = "2011-01-01"): Recallable =
  ## getCreateOrUpdateTags
  ## <p>Creates or updates tags for the specified Auto Scaling group.</p> <p>When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Tags: JArray (required)
  ##       : One or more tags.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773565 = newJObject()
  if Tags != nil:
    query_773565.add "Tags", Tags
  add(query_773565, "Action", newJString(Action))
  add(query_773565, "Version", newJString(Version))
  result = call_773564.call(nil, query_773565, nil, nil, nil)

var getCreateOrUpdateTags* = Call_GetCreateOrUpdateTags_773550(
    name: "getCreateOrUpdateTags", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=CreateOrUpdateTags",
    validator: validate_GetCreateOrUpdateTags_773551, base: "/",
    url: url_GetCreateOrUpdateTags_773552, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteAutoScalingGroup_773600 = ref object of OpenApiRestCall_772597
proc url_PostDeleteAutoScalingGroup_773602(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteAutoScalingGroup_773601(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified Auto Scaling group.</p> <p>If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed.</p> <p>If the group has policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.</p> <p>To remove instances from the Auto Scaling group before deleting it, call <a>DetachInstances</a> with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.</p> <p>To terminate all instances before deleting the Auto Scaling group, call <a>UpdateAutoScalingGroup</a> and set the minimum size and desired capacity of the Auto Scaling group to zero.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773603 = query.getOrDefault("Action")
  valid_773603 = validateParameter(valid_773603, JString, required = true,
                                 default = newJString("DeleteAutoScalingGroup"))
  if valid_773603 != nil:
    section.add "Action", valid_773603
  var valid_773604 = query.getOrDefault("Version")
  valid_773604 = validateParameter(valid_773604, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_773604 != nil:
    section.add "Version", valid_773604
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773605 = header.getOrDefault("X-Amz-Date")
  valid_773605 = validateParameter(valid_773605, JString, required = false,
                                 default = nil)
  if valid_773605 != nil:
    section.add "X-Amz-Date", valid_773605
  var valid_773606 = header.getOrDefault("X-Amz-Security-Token")
  valid_773606 = validateParameter(valid_773606, JString, required = false,
                                 default = nil)
  if valid_773606 != nil:
    section.add "X-Amz-Security-Token", valid_773606
  var valid_773607 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773607 = validateParameter(valid_773607, JString, required = false,
                                 default = nil)
  if valid_773607 != nil:
    section.add "X-Amz-Content-Sha256", valid_773607
  var valid_773608 = header.getOrDefault("X-Amz-Algorithm")
  valid_773608 = validateParameter(valid_773608, JString, required = false,
                                 default = nil)
  if valid_773608 != nil:
    section.add "X-Amz-Algorithm", valid_773608
  var valid_773609 = header.getOrDefault("X-Amz-Signature")
  valid_773609 = validateParameter(valid_773609, JString, required = false,
                                 default = nil)
  if valid_773609 != nil:
    section.add "X-Amz-Signature", valid_773609
  var valid_773610 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773610 = validateParameter(valid_773610, JString, required = false,
                                 default = nil)
  if valid_773610 != nil:
    section.add "X-Amz-SignedHeaders", valid_773610
  var valid_773611 = header.getOrDefault("X-Amz-Credential")
  valid_773611 = validateParameter(valid_773611, JString, required = false,
                                 default = nil)
  if valid_773611 != nil:
    section.add "X-Amz-Credential", valid_773611
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   ForceDelete: JBool
  ##              : Specifies that the group is to be deleted along with all instances associated with the group, without waiting for all instances to be terminated. This parameter also deletes any lifecycle actions associated with the group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_773612 = formData.getOrDefault("AutoScalingGroupName")
  valid_773612 = validateParameter(valid_773612, JString, required = true,
                                 default = nil)
  if valid_773612 != nil:
    section.add "AutoScalingGroupName", valid_773612
  var valid_773613 = formData.getOrDefault("ForceDelete")
  valid_773613 = validateParameter(valid_773613, JBool, required = false, default = nil)
  if valid_773613 != nil:
    section.add "ForceDelete", valid_773613
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773614: Call_PostDeleteAutoScalingGroup_773600; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified Auto Scaling group.</p> <p>If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed.</p> <p>If the group has policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.</p> <p>To remove instances from the Auto Scaling group before deleting it, call <a>DetachInstances</a> with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.</p> <p>To terminate all instances before deleting the Auto Scaling group, call <a>UpdateAutoScalingGroup</a> and set the minimum size and desired capacity of the Auto Scaling group to zero.</p>
  ## 
  let valid = call_773614.validator(path, query, header, formData, body)
  let scheme = call_773614.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773614.url(scheme.get, call_773614.host, call_773614.base,
                         call_773614.route, valid.getOrDefault("path"))
  result = hook(call_773614, url, valid)

proc call*(call_773615: Call_PostDeleteAutoScalingGroup_773600;
          AutoScalingGroupName: string; ForceDelete: bool = false;
          Action: string = "DeleteAutoScalingGroup"; Version: string = "2011-01-01"): Recallable =
  ## postDeleteAutoScalingGroup
  ## <p>Deletes the specified Auto Scaling group.</p> <p>If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed.</p> <p>If the group has policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.</p> <p>To remove instances from the Auto Scaling group before deleting it, call <a>DetachInstances</a> with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.</p> <p>To terminate all instances before deleting the Auto Scaling group, call <a>UpdateAutoScalingGroup</a> and set the minimum size and desired capacity of the Auto Scaling group to zero.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   ForceDelete: bool
  ##              : Specifies that the group is to be deleted along with all instances associated with the group, without waiting for all instances to be terminated. This parameter also deletes any lifecycle actions associated with the group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773616 = newJObject()
  var formData_773617 = newJObject()
  add(formData_773617, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_773617, "ForceDelete", newJBool(ForceDelete))
  add(query_773616, "Action", newJString(Action))
  add(query_773616, "Version", newJString(Version))
  result = call_773615.call(nil, query_773616, nil, formData_773617, nil)

var postDeleteAutoScalingGroup* = Call_PostDeleteAutoScalingGroup_773600(
    name: "postDeleteAutoScalingGroup", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DeleteAutoScalingGroup",
    validator: validate_PostDeleteAutoScalingGroup_773601, base: "/",
    url: url_PostDeleteAutoScalingGroup_773602,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteAutoScalingGroup_773583 = ref object of OpenApiRestCall_772597
proc url_GetDeleteAutoScalingGroup_773585(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteAutoScalingGroup_773584(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified Auto Scaling group.</p> <p>If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed.</p> <p>If the group has policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.</p> <p>To remove instances from the Auto Scaling group before deleting it, call <a>DetachInstances</a> with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.</p> <p>To terminate all instances before deleting the Auto Scaling group, call <a>UpdateAutoScalingGroup</a> and set the minimum size and desired capacity of the Auto Scaling group to zero.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   ForceDelete: JBool
  ##              : Specifies that the group is to be deleted along with all instances associated with the group, without waiting for all instances to be terminated. This parameter also deletes any lifecycle actions associated with the group.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_773586 = query.getOrDefault("AutoScalingGroupName")
  valid_773586 = validateParameter(valid_773586, JString, required = true,
                                 default = nil)
  if valid_773586 != nil:
    section.add "AutoScalingGroupName", valid_773586
  var valid_773587 = query.getOrDefault("Action")
  valid_773587 = validateParameter(valid_773587, JString, required = true,
                                 default = newJString("DeleteAutoScalingGroup"))
  if valid_773587 != nil:
    section.add "Action", valid_773587
  var valid_773588 = query.getOrDefault("ForceDelete")
  valid_773588 = validateParameter(valid_773588, JBool, required = false, default = nil)
  if valid_773588 != nil:
    section.add "ForceDelete", valid_773588
  var valid_773589 = query.getOrDefault("Version")
  valid_773589 = validateParameter(valid_773589, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_773589 != nil:
    section.add "Version", valid_773589
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773590 = header.getOrDefault("X-Amz-Date")
  valid_773590 = validateParameter(valid_773590, JString, required = false,
                                 default = nil)
  if valid_773590 != nil:
    section.add "X-Amz-Date", valid_773590
  var valid_773591 = header.getOrDefault("X-Amz-Security-Token")
  valid_773591 = validateParameter(valid_773591, JString, required = false,
                                 default = nil)
  if valid_773591 != nil:
    section.add "X-Amz-Security-Token", valid_773591
  var valid_773592 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773592 = validateParameter(valid_773592, JString, required = false,
                                 default = nil)
  if valid_773592 != nil:
    section.add "X-Amz-Content-Sha256", valid_773592
  var valid_773593 = header.getOrDefault("X-Amz-Algorithm")
  valid_773593 = validateParameter(valid_773593, JString, required = false,
                                 default = nil)
  if valid_773593 != nil:
    section.add "X-Amz-Algorithm", valid_773593
  var valid_773594 = header.getOrDefault("X-Amz-Signature")
  valid_773594 = validateParameter(valid_773594, JString, required = false,
                                 default = nil)
  if valid_773594 != nil:
    section.add "X-Amz-Signature", valid_773594
  var valid_773595 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773595 = validateParameter(valid_773595, JString, required = false,
                                 default = nil)
  if valid_773595 != nil:
    section.add "X-Amz-SignedHeaders", valid_773595
  var valid_773596 = header.getOrDefault("X-Amz-Credential")
  valid_773596 = validateParameter(valid_773596, JString, required = false,
                                 default = nil)
  if valid_773596 != nil:
    section.add "X-Amz-Credential", valid_773596
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773597: Call_GetDeleteAutoScalingGroup_773583; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified Auto Scaling group.</p> <p>If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed.</p> <p>If the group has policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.</p> <p>To remove instances from the Auto Scaling group before deleting it, call <a>DetachInstances</a> with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.</p> <p>To terminate all instances before deleting the Auto Scaling group, call <a>UpdateAutoScalingGroup</a> and set the minimum size and desired capacity of the Auto Scaling group to zero.</p>
  ## 
  let valid = call_773597.validator(path, query, header, formData, body)
  let scheme = call_773597.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773597.url(scheme.get, call_773597.host, call_773597.base,
                         call_773597.route, valid.getOrDefault("path"))
  result = hook(call_773597, url, valid)

proc call*(call_773598: Call_GetDeleteAutoScalingGroup_773583;
          AutoScalingGroupName: string; Action: string = "DeleteAutoScalingGroup";
          ForceDelete: bool = false; Version: string = "2011-01-01"): Recallable =
  ## getDeleteAutoScalingGroup
  ## <p>Deletes the specified Auto Scaling group.</p> <p>If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed.</p> <p>If the group has policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.</p> <p>To remove instances from the Auto Scaling group before deleting it, call <a>DetachInstances</a> with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.</p> <p>To terminate all instances before deleting the Auto Scaling group, call <a>UpdateAutoScalingGroup</a> and set the minimum size and desired capacity of the Auto Scaling group to zero.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   ForceDelete: bool
  ##              : Specifies that the group is to be deleted along with all instances associated with the group, without waiting for all instances to be terminated. This parameter also deletes any lifecycle actions associated with the group.
  ##   Version: string (required)
  var query_773599 = newJObject()
  add(query_773599, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_773599, "Action", newJString(Action))
  add(query_773599, "ForceDelete", newJBool(ForceDelete))
  add(query_773599, "Version", newJString(Version))
  result = call_773598.call(nil, query_773599, nil, nil, nil)

var getDeleteAutoScalingGroup* = Call_GetDeleteAutoScalingGroup_773583(
    name: "getDeleteAutoScalingGroup", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DeleteAutoScalingGroup",
    validator: validate_GetDeleteAutoScalingGroup_773584, base: "/",
    url: url_GetDeleteAutoScalingGroup_773585,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteLaunchConfiguration_773634 = ref object of OpenApiRestCall_772597
proc url_PostDeleteLaunchConfiguration_773636(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteLaunchConfiguration_773635(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified launch configuration.</p> <p>The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773637 = query.getOrDefault("Action")
  valid_773637 = validateParameter(valid_773637, JString, required = true, default = newJString(
      "DeleteLaunchConfiguration"))
  if valid_773637 != nil:
    section.add "Action", valid_773637
  var valid_773638 = query.getOrDefault("Version")
  valid_773638 = validateParameter(valid_773638, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_773638 != nil:
    section.add "Version", valid_773638
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773639 = header.getOrDefault("X-Amz-Date")
  valid_773639 = validateParameter(valid_773639, JString, required = false,
                                 default = nil)
  if valid_773639 != nil:
    section.add "X-Amz-Date", valid_773639
  var valid_773640 = header.getOrDefault("X-Amz-Security-Token")
  valid_773640 = validateParameter(valid_773640, JString, required = false,
                                 default = nil)
  if valid_773640 != nil:
    section.add "X-Amz-Security-Token", valid_773640
  var valid_773641 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773641 = validateParameter(valid_773641, JString, required = false,
                                 default = nil)
  if valid_773641 != nil:
    section.add "X-Amz-Content-Sha256", valid_773641
  var valid_773642 = header.getOrDefault("X-Amz-Algorithm")
  valid_773642 = validateParameter(valid_773642, JString, required = false,
                                 default = nil)
  if valid_773642 != nil:
    section.add "X-Amz-Algorithm", valid_773642
  var valid_773643 = header.getOrDefault("X-Amz-Signature")
  valid_773643 = validateParameter(valid_773643, JString, required = false,
                                 default = nil)
  if valid_773643 != nil:
    section.add "X-Amz-Signature", valid_773643
  var valid_773644 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773644 = validateParameter(valid_773644, JString, required = false,
                                 default = nil)
  if valid_773644 != nil:
    section.add "X-Amz-SignedHeaders", valid_773644
  var valid_773645 = header.getOrDefault("X-Amz-Credential")
  valid_773645 = validateParameter(valid_773645, JString, required = false,
                                 default = nil)
  if valid_773645 != nil:
    section.add "X-Amz-Credential", valid_773645
  result.add "header", section
  ## parameters in `formData` object:
  ##   LaunchConfigurationName: JString (required)
  ##                          : The name of the launch configuration.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `LaunchConfigurationName` field"
  var valid_773646 = formData.getOrDefault("LaunchConfigurationName")
  valid_773646 = validateParameter(valid_773646, JString, required = true,
                                 default = nil)
  if valid_773646 != nil:
    section.add "LaunchConfigurationName", valid_773646
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773647: Call_PostDeleteLaunchConfiguration_773634; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified launch configuration.</p> <p>The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.</p>
  ## 
  let valid = call_773647.validator(path, query, header, formData, body)
  let scheme = call_773647.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773647.url(scheme.get, call_773647.host, call_773647.base,
                         call_773647.route, valid.getOrDefault("path"))
  result = hook(call_773647, url, valid)

proc call*(call_773648: Call_PostDeleteLaunchConfiguration_773634;
          LaunchConfigurationName: string;
          Action: string = "DeleteLaunchConfiguration";
          Version: string = "2011-01-01"): Recallable =
  ## postDeleteLaunchConfiguration
  ## <p>Deletes the specified launch configuration.</p> <p>The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.</p>
  ##   LaunchConfigurationName: string (required)
  ##                          : The name of the launch configuration.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773649 = newJObject()
  var formData_773650 = newJObject()
  add(formData_773650, "LaunchConfigurationName",
      newJString(LaunchConfigurationName))
  add(query_773649, "Action", newJString(Action))
  add(query_773649, "Version", newJString(Version))
  result = call_773648.call(nil, query_773649, nil, formData_773650, nil)

var postDeleteLaunchConfiguration* = Call_PostDeleteLaunchConfiguration_773634(
    name: "postDeleteLaunchConfiguration", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DeleteLaunchConfiguration",
    validator: validate_PostDeleteLaunchConfiguration_773635, base: "/",
    url: url_PostDeleteLaunchConfiguration_773636,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteLaunchConfiguration_773618 = ref object of OpenApiRestCall_772597
proc url_GetDeleteLaunchConfiguration_773620(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteLaunchConfiguration_773619(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified launch configuration.</p> <p>The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   LaunchConfigurationName: JString (required)
  ##                          : The name of the launch configuration.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `LaunchConfigurationName` field"
  var valid_773621 = query.getOrDefault("LaunchConfigurationName")
  valid_773621 = validateParameter(valid_773621, JString, required = true,
                                 default = nil)
  if valid_773621 != nil:
    section.add "LaunchConfigurationName", valid_773621
  var valid_773622 = query.getOrDefault("Action")
  valid_773622 = validateParameter(valid_773622, JString, required = true, default = newJString(
      "DeleteLaunchConfiguration"))
  if valid_773622 != nil:
    section.add "Action", valid_773622
  var valid_773623 = query.getOrDefault("Version")
  valid_773623 = validateParameter(valid_773623, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_773623 != nil:
    section.add "Version", valid_773623
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773624 = header.getOrDefault("X-Amz-Date")
  valid_773624 = validateParameter(valid_773624, JString, required = false,
                                 default = nil)
  if valid_773624 != nil:
    section.add "X-Amz-Date", valid_773624
  var valid_773625 = header.getOrDefault("X-Amz-Security-Token")
  valid_773625 = validateParameter(valid_773625, JString, required = false,
                                 default = nil)
  if valid_773625 != nil:
    section.add "X-Amz-Security-Token", valid_773625
  var valid_773626 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773626 = validateParameter(valid_773626, JString, required = false,
                                 default = nil)
  if valid_773626 != nil:
    section.add "X-Amz-Content-Sha256", valid_773626
  var valid_773627 = header.getOrDefault("X-Amz-Algorithm")
  valid_773627 = validateParameter(valid_773627, JString, required = false,
                                 default = nil)
  if valid_773627 != nil:
    section.add "X-Amz-Algorithm", valid_773627
  var valid_773628 = header.getOrDefault("X-Amz-Signature")
  valid_773628 = validateParameter(valid_773628, JString, required = false,
                                 default = nil)
  if valid_773628 != nil:
    section.add "X-Amz-Signature", valid_773628
  var valid_773629 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773629 = validateParameter(valid_773629, JString, required = false,
                                 default = nil)
  if valid_773629 != nil:
    section.add "X-Amz-SignedHeaders", valid_773629
  var valid_773630 = header.getOrDefault("X-Amz-Credential")
  valid_773630 = validateParameter(valid_773630, JString, required = false,
                                 default = nil)
  if valid_773630 != nil:
    section.add "X-Amz-Credential", valid_773630
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773631: Call_GetDeleteLaunchConfiguration_773618; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified launch configuration.</p> <p>The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.</p>
  ## 
  let valid = call_773631.validator(path, query, header, formData, body)
  let scheme = call_773631.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773631.url(scheme.get, call_773631.host, call_773631.base,
                         call_773631.route, valid.getOrDefault("path"))
  result = hook(call_773631, url, valid)

proc call*(call_773632: Call_GetDeleteLaunchConfiguration_773618;
          LaunchConfigurationName: string;
          Action: string = "DeleteLaunchConfiguration";
          Version: string = "2011-01-01"): Recallable =
  ## getDeleteLaunchConfiguration
  ## <p>Deletes the specified launch configuration.</p> <p>The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.</p>
  ##   LaunchConfigurationName: string (required)
  ##                          : The name of the launch configuration.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773633 = newJObject()
  add(query_773633, "LaunchConfigurationName", newJString(LaunchConfigurationName))
  add(query_773633, "Action", newJString(Action))
  add(query_773633, "Version", newJString(Version))
  result = call_773632.call(nil, query_773633, nil, nil, nil)

var getDeleteLaunchConfiguration* = Call_GetDeleteLaunchConfiguration_773618(
    name: "getDeleteLaunchConfiguration", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DeleteLaunchConfiguration",
    validator: validate_GetDeleteLaunchConfiguration_773619, base: "/",
    url: url_GetDeleteLaunchConfiguration_773620,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteLifecycleHook_773668 = ref object of OpenApiRestCall_772597
proc url_PostDeleteLifecycleHook_773670(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteLifecycleHook_773669(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified lifecycle hook.</p> <p>If there are any outstanding lifecycle actions, they are completed first (<code>ABANDON</code> for launching instances, <code>CONTINUE</code> for terminating instances).</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773671 = query.getOrDefault("Action")
  valid_773671 = validateParameter(valid_773671, JString, required = true,
                                 default = newJString("DeleteLifecycleHook"))
  if valid_773671 != nil:
    section.add "Action", valid_773671
  var valid_773672 = query.getOrDefault("Version")
  valid_773672 = validateParameter(valid_773672, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_773672 != nil:
    section.add "Version", valid_773672
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773673 = header.getOrDefault("X-Amz-Date")
  valid_773673 = validateParameter(valid_773673, JString, required = false,
                                 default = nil)
  if valid_773673 != nil:
    section.add "X-Amz-Date", valid_773673
  var valid_773674 = header.getOrDefault("X-Amz-Security-Token")
  valid_773674 = validateParameter(valid_773674, JString, required = false,
                                 default = nil)
  if valid_773674 != nil:
    section.add "X-Amz-Security-Token", valid_773674
  var valid_773675 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773675 = validateParameter(valid_773675, JString, required = false,
                                 default = nil)
  if valid_773675 != nil:
    section.add "X-Amz-Content-Sha256", valid_773675
  var valid_773676 = header.getOrDefault("X-Amz-Algorithm")
  valid_773676 = validateParameter(valid_773676, JString, required = false,
                                 default = nil)
  if valid_773676 != nil:
    section.add "X-Amz-Algorithm", valid_773676
  var valid_773677 = header.getOrDefault("X-Amz-Signature")
  valid_773677 = validateParameter(valid_773677, JString, required = false,
                                 default = nil)
  if valid_773677 != nil:
    section.add "X-Amz-Signature", valid_773677
  var valid_773678 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773678 = validateParameter(valid_773678, JString, required = false,
                                 default = nil)
  if valid_773678 != nil:
    section.add "X-Amz-SignedHeaders", valid_773678
  var valid_773679 = header.getOrDefault("X-Amz-Credential")
  valid_773679 = validateParameter(valid_773679, JString, required = false,
                                 default = nil)
  if valid_773679 != nil:
    section.add "X-Amz-Credential", valid_773679
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_773680 = formData.getOrDefault("AutoScalingGroupName")
  valid_773680 = validateParameter(valid_773680, JString, required = true,
                                 default = nil)
  if valid_773680 != nil:
    section.add "AutoScalingGroupName", valid_773680
  var valid_773681 = formData.getOrDefault("LifecycleHookName")
  valid_773681 = validateParameter(valid_773681, JString, required = true,
                                 default = nil)
  if valid_773681 != nil:
    section.add "LifecycleHookName", valid_773681
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773682: Call_PostDeleteLifecycleHook_773668; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified lifecycle hook.</p> <p>If there are any outstanding lifecycle actions, they are completed first (<code>ABANDON</code> for launching instances, <code>CONTINUE</code> for terminating instances).</p>
  ## 
  let valid = call_773682.validator(path, query, header, formData, body)
  let scheme = call_773682.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773682.url(scheme.get, call_773682.host, call_773682.base,
                         call_773682.route, valid.getOrDefault("path"))
  result = hook(call_773682, url, valid)

proc call*(call_773683: Call_PostDeleteLifecycleHook_773668;
          AutoScalingGroupName: string; LifecycleHookName: string;
          Action: string = "DeleteLifecycleHook"; Version: string = "2011-01-01"): Recallable =
  ## postDeleteLifecycleHook
  ## <p>Deletes the specified lifecycle hook.</p> <p>If there are any outstanding lifecycle actions, they are completed first (<code>ABANDON</code> for launching instances, <code>CONTINUE</code> for terminating instances).</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   Version: string (required)
  var query_773684 = newJObject()
  var formData_773685 = newJObject()
  add(formData_773685, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_773684, "Action", newJString(Action))
  add(formData_773685, "LifecycleHookName", newJString(LifecycleHookName))
  add(query_773684, "Version", newJString(Version))
  result = call_773683.call(nil, query_773684, nil, formData_773685, nil)

var postDeleteLifecycleHook* = Call_PostDeleteLifecycleHook_773668(
    name: "postDeleteLifecycleHook", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DeleteLifecycleHook",
    validator: validate_PostDeleteLifecycleHook_773669, base: "/",
    url: url_PostDeleteLifecycleHook_773670, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteLifecycleHook_773651 = ref object of OpenApiRestCall_772597
proc url_GetDeleteLifecycleHook_773653(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteLifecycleHook_773652(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified lifecycle hook.</p> <p>If there are any outstanding lifecycle actions, they are completed first (<code>ABANDON</code> for launching instances, <code>CONTINUE</code> for terminating instances).</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_773654 = query.getOrDefault("AutoScalingGroupName")
  valid_773654 = validateParameter(valid_773654, JString, required = true,
                                 default = nil)
  if valid_773654 != nil:
    section.add "AutoScalingGroupName", valid_773654
  var valid_773655 = query.getOrDefault("Action")
  valid_773655 = validateParameter(valid_773655, JString, required = true,
                                 default = newJString("DeleteLifecycleHook"))
  if valid_773655 != nil:
    section.add "Action", valid_773655
  var valid_773656 = query.getOrDefault("LifecycleHookName")
  valid_773656 = validateParameter(valid_773656, JString, required = true,
                                 default = nil)
  if valid_773656 != nil:
    section.add "LifecycleHookName", valid_773656
  var valid_773657 = query.getOrDefault("Version")
  valid_773657 = validateParameter(valid_773657, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_773657 != nil:
    section.add "Version", valid_773657
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773658 = header.getOrDefault("X-Amz-Date")
  valid_773658 = validateParameter(valid_773658, JString, required = false,
                                 default = nil)
  if valid_773658 != nil:
    section.add "X-Amz-Date", valid_773658
  var valid_773659 = header.getOrDefault("X-Amz-Security-Token")
  valid_773659 = validateParameter(valid_773659, JString, required = false,
                                 default = nil)
  if valid_773659 != nil:
    section.add "X-Amz-Security-Token", valid_773659
  var valid_773660 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773660 = validateParameter(valid_773660, JString, required = false,
                                 default = nil)
  if valid_773660 != nil:
    section.add "X-Amz-Content-Sha256", valid_773660
  var valid_773661 = header.getOrDefault("X-Amz-Algorithm")
  valid_773661 = validateParameter(valid_773661, JString, required = false,
                                 default = nil)
  if valid_773661 != nil:
    section.add "X-Amz-Algorithm", valid_773661
  var valid_773662 = header.getOrDefault("X-Amz-Signature")
  valid_773662 = validateParameter(valid_773662, JString, required = false,
                                 default = nil)
  if valid_773662 != nil:
    section.add "X-Amz-Signature", valid_773662
  var valid_773663 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773663 = validateParameter(valid_773663, JString, required = false,
                                 default = nil)
  if valid_773663 != nil:
    section.add "X-Amz-SignedHeaders", valid_773663
  var valid_773664 = header.getOrDefault("X-Amz-Credential")
  valid_773664 = validateParameter(valid_773664, JString, required = false,
                                 default = nil)
  if valid_773664 != nil:
    section.add "X-Amz-Credential", valid_773664
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773665: Call_GetDeleteLifecycleHook_773651; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified lifecycle hook.</p> <p>If there are any outstanding lifecycle actions, they are completed first (<code>ABANDON</code> for launching instances, <code>CONTINUE</code> for terminating instances).</p>
  ## 
  let valid = call_773665.validator(path, query, header, formData, body)
  let scheme = call_773665.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773665.url(scheme.get, call_773665.host, call_773665.base,
                         call_773665.route, valid.getOrDefault("path"))
  result = hook(call_773665, url, valid)

proc call*(call_773666: Call_GetDeleteLifecycleHook_773651;
          AutoScalingGroupName: string; LifecycleHookName: string;
          Action: string = "DeleteLifecycleHook"; Version: string = "2011-01-01"): Recallable =
  ## getDeleteLifecycleHook
  ## <p>Deletes the specified lifecycle hook.</p> <p>If there are any outstanding lifecycle actions, they are completed first (<code>ABANDON</code> for launching instances, <code>CONTINUE</code> for terminating instances).</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   Version: string (required)
  var query_773667 = newJObject()
  add(query_773667, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_773667, "Action", newJString(Action))
  add(query_773667, "LifecycleHookName", newJString(LifecycleHookName))
  add(query_773667, "Version", newJString(Version))
  result = call_773666.call(nil, query_773667, nil, nil, nil)

var getDeleteLifecycleHook* = Call_GetDeleteLifecycleHook_773651(
    name: "getDeleteLifecycleHook", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DeleteLifecycleHook",
    validator: validate_GetDeleteLifecycleHook_773652, base: "/",
    url: url_GetDeleteLifecycleHook_773653, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteNotificationConfiguration_773703 = ref object of OpenApiRestCall_772597
proc url_PostDeleteNotificationConfiguration_773705(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteNotificationConfiguration_773704(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified notification.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773706 = query.getOrDefault("Action")
  valid_773706 = validateParameter(valid_773706, JString, required = true, default = newJString(
      "DeleteNotificationConfiguration"))
  if valid_773706 != nil:
    section.add "Action", valid_773706
  var valid_773707 = query.getOrDefault("Version")
  valid_773707 = validateParameter(valid_773707, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_773707 != nil:
    section.add "Version", valid_773707
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773708 = header.getOrDefault("X-Amz-Date")
  valid_773708 = validateParameter(valid_773708, JString, required = false,
                                 default = nil)
  if valid_773708 != nil:
    section.add "X-Amz-Date", valid_773708
  var valid_773709 = header.getOrDefault("X-Amz-Security-Token")
  valid_773709 = validateParameter(valid_773709, JString, required = false,
                                 default = nil)
  if valid_773709 != nil:
    section.add "X-Amz-Security-Token", valid_773709
  var valid_773710 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773710 = validateParameter(valid_773710, JString, required = false,
                                 default = nil)
  if valid_773710 != nil:
    section.add "X-Amz-Content-Sha256", valid_773710
  var valid_773711 = header.getOrDefault("X-Amz-Algorithm")
  valid_773711 = validateParameter(valid_773711, JString, required = false,
                                 default = nil)
  if valid_773711 != nil:
    section.add "X-Amz-Algorithm", valid_773711
  var valid_773712 = header.getOrDefault("X-Amz-Signature")
  valid_773712 = validateParameter(valid_773712, JString, required = false,
                                 default = nil)
  if valid_773712 != nil:
    section.add "X-Amz-Signature", valid_773712
  var valid_773713 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773713 = validateParameter(valid_773713, JString, required = false,
                                 default = nil)
  if valid_773713 != nil:
    section.add "X-Amz-SignedHeaders", valid_773713
  var valid_773714 = header.getOrDefault("X-Amz-Credential")
  valid_773714 = validateParameter(valid_773714, JString, required = false,
                                 default = nil)
  if valid_773714 != nil:
    section.add "X-Amz-Credential", valid_773714
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   TopicARN: JString (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_773715 = formData.getOrDefault("AutoScalingGroupName")
  valid_773715 = validateParameter(valid_773715, JString, required = true,
                                 default = nil)
  if valid_773715 != nil:
    section.add "AutoScalingGroupName", valid_773715
  var valid_773716 = formData.getOrDefault("TopicARN")
  valid_773716 = validateParameter(valid_773716, JString, required = true,
                                 default = nil)
  if valid_773716 != nil:
    section.add "TopicARN", valid_773716
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773717: Call_PostDeleteNotificationConfiguration_773703;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes the specified notification.
  ## 
  let valid = call_773717.validator(path, query, header, formData, body)
  let scheme = call_773717.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773717.url(scheme.get, call_773717.host, call_773717.base,
                         call_773717.route, valid.getOrDefault("path"))
  result = hook(call_773717, url, valid)

proc call*(call_773718: Call_PostDeleteNotificationConfiguration_773703;
          AutoScalingGroupName: string; TopicARN: string;
          Action: string = "DeleteNotificationConfiguration";
          Version: string = "2011-01-01"): Recallable =
  ## postDeleteNotificationConfiguration
  ## Deletes the specified notification.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   TopicARN: string (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773719 = newJObject()
  var formData_773720 = newJObject()
  add(formData_773720, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_773720, "TopicARN", newJString(TopicARN))
  add(query_773719, "Action", newJString(Action))
  add(query_773719, "Version", newJString(Version))
  result = call_773718.call(nil, query_773719, nil, formData_773720, nil)

var postDeleteNotificationConfiguration* = Call_PostDeleteNotificationConfiguration_773703(
    name: "postDeleteNotificationConfiguration", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DeleteNotificationConfiguration",
    validator: validate_PostDeleteNotificationConfiguration_773704, base: "/",
    url: url_PostDeleteNotificationConfiguration_773705,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteNotificationConfiguration_773686 = ref object of OpenApiRestCall_772597
proc url_GetDeleteNotificationConfiguration_773688(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteNotificationConfiguration_773687(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified notification.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   TopicARN: JString (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_773689 = query.getOrDefault("AutoScalingGroupName")
  valid_773689 = validateParameter(valid_773689, JString, required = true,
                                 default = nil)
  if valid_773689 != nil:
    section.add "AutoScalingGroupName", valid_773689
  var valid_773690 = query.getOrDefault("Action")
  valid_773690 = validateParameter(valid_773690, JString, required = true, default = newJString(
      "DeleteNotificationConfiguration"))
  if valid_773690 != nil:
    section.add "Action", valid_773690
  var valid_773691 = query.getOrDefault("TopicARN")
  valid_773691 = validateParameter(valid_773691, JString, required = true,
                                 default = nil)
  if valid_773691 != nil:
    section.add "TopicARN", valid_773691
  var valid_773692 = query.getOrDefault("Version")
  valid_773692 = validateParameter(valid_773692, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_773692 != nil:
    section.add "Version", valid_773692
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773693 = header.getOrDefault("X-Amz-Date")
  valid_773693 = validateParameter(valid_773693, JString, required = false,
                                 default = nil)
  if valid_773693 != nil:
    section.add "X-Amz-Date", valid_773693
  var valid_773694 = header.getOrDefault("X-Amz-Security-Token")
  valid_773694 = validateParameter(valid_773694, JString, required = false,
                                 default = nil)
  if valid_773694 != nil:
    section.add "X-Amz-Security-Token", valid_773694
  var valid_773695 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773695 = validateParameter(valid_773695, JString, required = false,
                                 default = nil)
  if valid_773695 != nil:
    section.add "X-Amz-Content-Sha256", valid_773695
  var valid_773696 = header.getOrDefault("X-Amz-Algorithm")
  valid_773696 = validateParameter(valid_773696, JString, required = false,
                                 default = nil)
  if valid_773696 != nil:
    section.add "X-Amz-Algorithm", valid_773696
  var valid_773697 = header.getOrDefault("X-Amz-Signature")
  valid_773697 = validateParameter(valid_773697, JString, required = false,
                                 default = nil)
  if valid_773697 != nil:
    section.add "X-Amz-Signature", valid_773697
  var valid_773698 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773698 = validateParameter(valid_773698, JString, required = false,
                                 default = nil)
  if valid_773698 != nil:
    section.add "X-Amz-SignedHeaders", valid_773698
  var valid_773699 = header.getOrDefault("X-Amz-Credential")
  valid_773699 = validateParameter(valid_773699, JString, required = false,
                                 default = nil)
  if valid_773699 != nil:
    section.add "X-Amz-Credential", valid_773699
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773700: Call_GetDeleteNotificationConfiguration_773686;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes the specified notification.
  ## 
  let valid = call_773700.validator(path, query, header, formData, body)
  let scheme = call_773700.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773700.url(scheme.get, call_773700.host, call_773700.base,
                         call_773700.route, valid.getOrDefault("path"))
  result = hook(call_773700, url, valid)

proc call*(call_773701: Call_GetDeleteNotificationConfiguration_773686;
          AutoScalingGroupName: string; TopicARN: string;
          Action: string = "DeleteNotificationConfiguration";
          Version: string = "2011-01-01"): Recallable =
  ## getDeleteNotificationConfiguration
  ## Deletes the specified notification.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   TopicARN: string (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   Version: string (required)
  var query_773702 = newJObject()
  add(query_773702, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_773702, "Action", newJString(Action))
  add(query_773702, "TopicARN", newJString(TopicARN))
  add(query_773702, "Version", newJString(Version))
  result = call_773701.call(nil, query_773702, nil, nil, nil)

var getDeleteNotificationConfiguration* = Call_GetDeleteNotificationConfiguration_773686(
    name: "getDeleteNotificationConfiguration", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DeleteNotificationConfiguration",
    validator: validate_GetDeleteNotificationConfiguration_773687, base: "/",
    url: url_GetDeleteNotificationConfiguration_773688,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeletePolicy_773738 = ref object of OpenApiRestCall_772597
proc url_PostDeletePolicy_773740(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeletePolicy_773739(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Deletes the specified scaling policy.</p> <p>Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html">Deleting a Scaling Policy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773741 = query.getOrDefault("Action")
  valid_773741 = validateParameter(valid_773741, JString, required = true,
                                 default = newJString("DeletePolicy"))
  if valid_773741 != nil:
    section.add "Action", valid_773741
  var valid_773742 = query.getOrDefault("Version")
  valid_773742 = validateParameter(valid_773742, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_773742 != nil:
    section.add "Version", valid_773742
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773743 = header.getOrDefault("X-Amz-Date")
  valid_773743 = validateParameter(valid_773743, JString, required = false,
                                 default = nil)
  if valid_773743 != nil:
    section.add "X-Amz-Date", valid_773743
  var valid_773744 = header.getOrDefault("X-Amz-Security-Token")
  valid_773744 = validateParameter(valid_773744, JString, required = false,
                                 default = nil)
  if valid_773744 != nil:
    section.add "X-Amz-Security-Token", valid_773744
  var valid_773745 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773745 = validateParameter(valid_773745, JString, required = false,
                                 default = nil)
  if valid_773745 != nil:
    section.add "X-Amz-Content-Sha256", valid_773745
  var valid_773746 = header.getOrDefault("X-Amz-Algorithm")
  valid_773746 = validateParameter(valid_773746, JString, required = false,
                                 default = nil)
  if valid_773746 != nil:
    section.add "X-Amz-Algorithm", valid_773746
  var valid_773747 = header.getOrDefault("X-Amz-Signature")
  valid_773747 = validateParameter(valid_773747, JString, required = false,
                                 default = nil)
  if valid_773747 != nil:
    section.add "X-Amz-Signature", valid_773747
  var valid_773748 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773748 = validateParameter(valid_773748, JString, required = false,
                                 default = nil)
  if valid_773748 != nil:
    section.add "X-Amz-SignedHeaders", valid_773748
  var valid_773749 = header.getOrDefault("X-Amz-Credential")
  valid_773749 = validateParameter(valid_773749, JString, required = false,
                                 default = nil)
  if valid_773749 != nil:
    section.add "X-Amz-Credential", valid_773749
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   PolicyName: JString (required)
  ##             : The name or Amazon Resource Name (ARN) of the policy.
  section = newJObject()
  var valid_773750 = formData.getOrDefault("AutoScalingGroupName")
  valid_773750 = validateParameter(valid_773750, JString, required = false,
                                 default = nil)
  if valid_773750 != nil:
    section.add "AutoScalingGroupName", valid_773750
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_773751 = formData.getOrDefault("PolicyName")
  valid_773751 = validateParameter(valid_773751, JString, required = true,
                                 default = nil)
  if valid_773751 != nil:
    section.add "PolicyName", valid_773751
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773752: Call_PostDeletePolicy_773738; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified scaling policy.</p> <p>Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html">Deleting a Scaling Policy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_773752.validator(path, query, header, formData, body)
  let scheme = call_773752.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773752.url(scheme.get, call_773752.host, call_773752.base,
                         call_773752.route, valid.getOrDefault("path"))
  result = hook(call_773752, url, valid)

proc call*(call_773753: Call_PostDeletePolicy_773738; PolicyName: string;
          AutoScalingGroupName: string = ""; Action: string = "DeletePolicy";
          Version: string = "2011-01-01"): Recallable =
  ## postDeletePolicy
  ## <p>Deletes the specified scaling policy.</p> <p>Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html">Deleting a Scaling Policy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   PolicyName: string (required)
  ##             : The name or Amazon Resource Name (ARN) of the policy.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773754 = newJObject()
  var formData_773755 = newJObject()
  add(formData_773755, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_773755, "PolicyName", newJString(PolicyName))
  add(query_773754, "Action", newJString(Action))
  add(query_773754, "Version", newJString(Version))
  result = call_773753.call(nil, query_773754, nil, formData_773755, nil)

var postDeletePolicy* = Call_PostDeletePolicy_773738(name: "postDeletePolicy",
    meth: HttpMethod.HttpPost, host: "autoscaling.amazonaws.com",
    route: "/#Action=DeletePolicy", validator: validate_PostDeletePolicy_773739,
    base: "/", url: url_PostDeletePolicy_773740,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeletePolicy_773721 = ref object of OpenApiRestCall_772597
proc url_GetDeletePolicy_773723(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeletePolicy_773722(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Deletes the specified scaling policy.</p> <p>Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html">Deleting a Scaling Policy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : The name or Amazon Resource Name (ARN) of the policy.
  section = newJObject()
  var valid_773724 = query.getOrDefault("AutoScalingGroupName")
  valid_773724 = validateParameter(valid_773724, JString, required = false,
                                 default = nil)
  if valid_773724 != nil:
    section.add "AutoScalingGroupName", valid_773724
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773725 = query.getOrDefault("Action")
  valid_773725 = validateParameter(valid_773725, JString, required = true,
                                 default = newJString("DeletePolicy"))
  if valid_773725 != nil:
    section.add "Action", valid_773725
  var valid_773726 = query.getOrDefault("Version")
  valid_773726 = validateParameter(valid_773726, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_773726 != nil:
    section.add "Version", valid_773726
  var valid_773727 = query.getOrDefault("PolicyName")
  valid_773727 = validateParameter(valid_773727, JString, required = true,
                                 default = nil)
  if valid_773727 != nil:
    section.add "PolicyName", valid_773727
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773728 = header.getOrDefault("X-Amz-Date")
  valid_773728 = validateParameter(valid_773728, JString, required = false,
                                 default = nil)
  if valid_773728 != nil:
    section.add "X-Amz-Date", valid_773728
  var valid_773729 = header.getOrDefault("X-Amz-Security-Token")
  valid_773729 = validateParameter(valid_773729, JString, required = false,
                                 default = nil)
  if valid_773729 != nil:
    section.add "X-Amz-Security-Token", valid_773729
  var valid_773730 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773730 = validateParameter(valid_773730, JString, required = false,
                                 default = nil)
  if valid_773730 != nil:
    section.add "X-Amz-Content-Sha256", valid_773730
  var valid_773731 = header.getOrDefault("X-Amz-Algorithm")
  valid_773731 = validateParameter(valid_773731, JString, required = false,
                                 default = nil)
  if valid_773731 != nil:
    section.add "X-Amz-Algorithm", valid_773731
  var valid_773732 = header.getOrDefault("X-Amz-Signature")
  valid_773732 = validateParameter(valid_773732, JString, required = false,
                                 default = nil)
  if valid_773732 != nil:
    section.add "X-Amz-Signature", valid_773732
  var valid_773733 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773733 = validateParameter(valid_773733, JString, required = false,
                                 default = nil)
  if valid_773733 != nil:
    section.add "X-Amz-SignedHeaders", valid_773733
  var valid_773734 = header.getOrDefault("X-Amz-Credential")
  valid_773734 = validateParameter(valid_773734, JString, required = false,
                                 default = nil)
  if valid_773734 != nil:
    section.add "X-Amz-Credential", valid_773734
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773735: Call_GetDeletePolicy_773721; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified scaling policy.</p> <p>Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html">Deleting a Scaling Policy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_773735.validator(path, query, header, formData, body)
  let scheme = call_773735.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773735.url(scheme.get, call_773735.host, call_773735.base,
                         call_773735.route, valid.getOrDefault("path"))
  result = hook(call_773735, url, valid)

proc call*(call_773736: Call_GetDeletePolicy_773721; PolicyName: string;
          AutoScalingGroupName: string = ""; Action: string = "DeletePolicy";
          Version: string = "2011-01-01"): Recallable =
  ## getDeletePolicy
  ## <p>Deletes the specified scaling policy.</p> <p>Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html">Deleting a Scaling Policy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : The name or Amazon Resource Name (ARN) of the policy.
  var query_773737 = newJObject()
  add(query_773737, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_773737, "Action", newJString(Action))
  add(query_773737, "Version", newJString(Version))
  add(query_773737, "PolicyName", newJString(PolicyName))
  result = call_773736.call(nil, query_773737, nil, nil, nil)

var getDeletePolicy* = Call_GetDeletePolicy_773721(name: "getDeletePolicy",
    meth: HttpMethod.HttpGet, host: "autoscaling.amazonaws.com",
    route: "/#Action=DeletePolicy", validator: validate_GetDeletePolicy_773722,
    base: "/", url: url_GetDeletePolicy_773723, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteScheduledAction_773773 = ref object of OpenApiRestCall_772597
proc url_PostDeleteScheduledAction_773775(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteScheduledAction_773774(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified scheduled action.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773776 = query.getOrDefault("Action")
  valid_773776 = validateParameter(valid_773776, JString, required = true,
                                 default = newJString("DeleteScheduledAction"))
  if valid_773776 != nil:
    section.add "Action", valid_773776
  var valid_773777 = query.getOrDefault("Version")
  valid_773777 = validateParameter(valid_773777, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_773777 != nil:
    section.add "Version", valid_773777
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773778 = header.getOrDefault("X-Amz-Date")
  valid_773778 = validateParameter(valid_773778, JString, required = false,
                                 default = nil)
  if valid_773778 != nil:
    section.add "X-Amz-Date", valid_773778
  var valid_773779 = header.getOrDefault("X-Amz-Security-Token")
  valid_773779 = validateParameter(valid_773779, JString, required = false,
                                 default = nil)
  if valid_773779 != nil:
    section.add "X-Amz-Security-Token", valid_773779
  var valid_773780 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773780 = validateParameter(valid_773780, JString, required = false,
                                 default = nil)
  if valid_773780 != nil:
    section.add "X-Amz-Content-Sha256", valid_773780
  var valid_773781 = header.getOrDefault("X-Amz-Algorithm")
  valid_773781 = validateParameter(valid_773781, JString, required = false,
                                 default = nil)
  if valid_773781 != nil:
    section.add "X-Amz-Algorithm", valid_773781
  var valid_773782 = header.getOrDefault("X-Amz-Signature")
  valid_773782 = validateParameter(valid_773782, JString, required = false,
                                 default = nil)
  if valid_773782 != nil:
    section.add "X-Amz-Signature", valid_773782
  var valid_773783 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773783 = validateParameter(valid_773783, JString, required = false,
                                 default = nil)
  if valid_773783 != nil:
    section.add "X-Amz-SignedHeaders", valid_773783
  var valid_773784 = header.getOrDefault("X-Amz-Credential")
  valid_773784 = validateParameter(valid_773784, JString, required = false,
                                 default = nil)
  if valid_773784 != nil:
    section.add "X-Amz-Credential", valid_773784
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScheduledActionName: JString (required)
  ##                      : The name of the action to delete.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_773785 = formData.getOrDefault("AutoScalingGroupName")
  valid_773785 = validateParameter(valid_773785, JString, required = true,
                                 default = nil)
  if valid_773785 != nil:
    section.add "AutoScalingGroupName", valid_773785
  var valid_773786 = formData.getOrDefault("ScheduledActionName")
  valid_773786 = validateParameter(valid_773786, JString, required = true,
                                 default = nil)
  if valid_773786 != nil:
    section.add "ScheduledActionName", valid_773786
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773787: Call_PostDeleteScheduledAction_773773; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified scheduled action.
  ## 
  let valid = call_773787.validator(path, query, header, formData, body)
  let scheme = call_773787.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773787.url(scheme.get, call_773787.host, call_773787.base,
                         call_773787.route, valid.getOrDefault("path"))
  result = hook(call_773787, url, valid)

proc call*(call_773788: Call_PostDeleteScheduledAction_773773;
          AutoScalingGroupName: string; ScheduledActionName: string;
          Action: string = "DeleteScheduledAction"; Version: string = "2011-01-01"): Recallable =
  ## postDeleteScheduledAction
  ## Deletes the specified scheduled action.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   ScheduledActionName: string (required)
  ##                      : The name of the action to delete.
  ##   Version: string (required)
  var query_773789 = newJObject()
  var formData_773790 = newJObject()
  add(formData_773790, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_773789, "Action", newJString(Action))
  add(formData_773790, "ScheduledActionName", newJString(ScheduledActionName))
  add(query_773789, "Version", newJString(Version))
  result = call_773788.call(nil, query_773789, nil, formData_773790, nil)

var postDeleteScheduledAction* = Call_PostDeleteScheduledAction_773773(
    name: "postDeleteScheduledAction", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DeleteScheduledAction",
    validator: validate_PostDeleteScheduledAction_773774, base: "/",
    url: url_PostDeleteScheduledAction_773775,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteScheduledAction_773756 = ref object of OpenApiRestCall_772597
proc url_GetDeleteScheduledAction_773758(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteScheduledAction_773757(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified scheduled action.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ScheduledActionName: JString (required)
  ##                      : The name of the action to delete.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ScheduledActionName` field"
  var valid_773759 = query.getOrDefault("ScheduledActionName")
  valid_773759 = validateParameter(valid_773759, JString, required = true,
                                 default = nil)
  if valid_773759 != nil:
    section.add "ScheduledActionName", valid_773759
  var valid_773760 = query.getOrDefault("AutoScalingGroupName")
  valid_773760 = validateParameter(valid_773760, JString, required = true,
                                 default = nil)
  if valid_773760 != nil:
    section.add "AutoScalingGroupName", valid_773760
  var valid_773761 = query.getOrDefault("Action")
  valid_773761 = validateParameter(valid_773761, JString, required = true,
                                 default = newJString("DeleteScheduledAction"))
  if valid_773761 != nil:
    section.add "Action", valid_773761
  var valid_773762 = query.getOrDefault("Version")
  valid_773762 = validateParameter(valid_773762, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_773762 != nil:
    section.add "Version", valid_773762
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773763 = header.getOrDefault("X-Amz-Date")
  valid_773763 = validateParameter(valid_773763, JString, required = false,
                                 default = nil)
  if valid_773763 != nil:
    section.add "X-Amz-Date", valid_773763
  var valid_773764 = header.getOrDefault("X-Amz-Security-Token")
  valid_773764 = validateParameter(valid_773764, JString, required = false,
                                 default = nil)
  if valid_773764 != nil:
    section.add "X-Amz-Security-Token", valid_773764
  var valid_773765 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773765 = validateParameter(valid_773765, JString, required = false,
                                 default = nil)
  if valid_773765 != nil:
    section.add "X-Amz-Content-Sha256", valid_773765
  var valid_773766 = header.getOrDefault("X-Amz-Algorithm")
  valid_773766 = validateParameter(valid_773766, JString, required = false,
                                 default = nil)
  if valid_773766 != nil:
    section.add "X-Amz-Algorithm", valid_773766
  var valid_773767 = header.getOrDefault("X-Amz-Signature")
  valid_773767 = validateParameter(valid_773767, JString, required = false,
                                 default = nil)
  if valid_773767 != nil:
    section.add "X-Amz-Signature", valid_773767
  var valid_773768 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773768 = validateParameter(valid_773768, JString, required = false,
                                 default = nil)
  if valid_773768 != nil:
    section.add "X-Amz-SignedHeaders", valid_773768
  var valid_773769 = header.getOrDefault("X-Amz-Credential")
  valid_773769 = validateParameter(valid_773769, JString, required = false,
                                 default = nil)
  if valid_773769 != nil:
    section.add "X-Amz-Credential", valid_773769
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773770: Call_GetDeleteScheduledAction_773756; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified scheduled action.
  ## 
  let valid = call_773770.validator(path, query, header, formData, body)
  let scheme = call_773770.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773770.url(scheme.get, call_773770.host, call_773770.base,
                         call_773770.route, valid.getOrDefault("path"))
  result = hook(call_773770, url, valid)

proc call*(call_773771: Call_GetDeleteScheduledAction_773756;
          ScheduledActionName: string; AutoScalingGroupName: string;
          Action: string = "DeleteScheduledAction"; Version: string = "2011-01-01"): Recallable =
  ## getDeleteScheduledAction
  ## Deletes the specified scheduled action.
  ##   ScheduledActionName: string (required)
  ##                      : The name of the action to delete.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773772 = newJObject()
  add(query_773772, "ScheduledActionName", newJString(ScheduledActionName))
  add(query_773772, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_773772, "Action", newJString(Action))
  add(query_773772, "Version", newJString(Version))
  result = call_773771.call(nil, query_773772, nil, nil, nil)

var getDeleteScheduledAction* = Call_GetDeleteScheduledAction_773756(
    name: "getDeleteScheduledAction", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DeleteScheduledAction",
    validator: validate_GetDeleteScheduledAction_773757, base: "/",
    url: url_GetDeleteScheduledAction_773758, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteTags_773807 = ref object of OpenApiRestCall_772597
proc url_PostDeleteTags_773809(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteTags_773808(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Deletes the specified tags.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773810 = query.getOrDefault("Action")
  valid_773810 = validateParameter(valid_773810, JString, required = true,
                                 default = newJString("DeleteTags"))
  if valid_773810 != nil:
    section.add "Action", valid_773810
  var valid_773811 = query.getOrDefault("Version")
  valid_773811 = validateParameter(valid_773811, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_773811 != nil:
    section.add "Version", valid_773811
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773812 = header.getOrDefault("X-Amz-Date")
  valid_773812 = validateParameter(valid_773812, JString, required = false,
                                 default = nil)
  if valid_773812 != nil:
    section.add "X-Amz-Date", valid_773812
  var valid_773813 = header.getOrDefault("X-Amz-Security-Token")
  valid_773813 = validateParameter(valid_773813, JString, required = false,
                                 default = nil)
  if valid_773813 != nil:
    section.add "X-Amz-Security-Token", valid_773813
  var valid_773814 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773814 = validateParameter(valid_773814, JString, required = false,
                                 default = nil)
  if valid_773814 != nil:
    section.add "X-Amz-Content-Sha256", valid_773814
  var valid_773815 = header.getOrDefault("X-Amz-Algorithm")
  valid_773815 = validateParameter(valid_773815, JString, required = false,
                                 default = nil)
  if valid_773815 != nil:
    section.add "X-Amz-Algorithm", valid_773815
  var valid_773816 = header.getOrDefault("X-Amz-Signature")
  valid_773816 = validateParameter(valid_773816, JString, required = false,
                                 default = nil)
  if valid_773816 != nil:
    section.add "X-Amz-Signature", valid_773816
  var valid_773817 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773817 = validateParameter(valid_773817, JString, required = false,
                                 default = nil)
  if valid_773817 != nil:
    section.add "X-Amz-SignedHeaders", valid_773817
  var valid_773818 = header.getOrDefault("X-Amz-Credential")
  valid_773818 = validateParameter(valid_773818, JString, required = false,
                                 default = nil)
  if valid_773818 != nil:
    section.add "X-Amz-Credential", valid_773818
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray (required)
  ##       : One or more tags.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Tags` field"
  var valid_773819 = formData.getOrDefault("Tags")
  valid_773819 = validateParameter(valid_773819, JArray, required = true, default = nil)
  if valid_773819 != nil:
    section.add "Tags", valid_773819
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773820: Call_PostDeleteTags_773807; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified tags.
  ## 
  let valid = call_773820.validator(path, query, header, formData, body)
  let scheme = call_773820.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773820.url(scheme.get, call_773820.host, call_773820.base,
                         call_773820.route, valid.getOrDefault("path"))
  result = hook(call_773820, url, valid)

proc call*(call_773821: Call_PostDeleteTags_773807; Tags: JsonNode;
          Action: string = "DeleteTags"; Version: string = "2011-01-01"): Recallable =
  ## postDeleteTags
  ## Deletes the specified tags.
  ##   Tags: JArray (required)
  ##       : One or more tags.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773822 = newJObject()
  var formData_773823 = newJObject()
  if Tags != nil:
    formData_773823.add "Tags", Tags
  add(query_773822, "Action", newJString(Action))
  add(query_773822, "Version", newJString(Version))
  result = call_773821.call(nil, query_773822, nil, formData_773823, nil)

var postDeleteTags* = Call_PostDeleteTags_773807(name: "postDeleteTags",
    meth: HttpMethod.HttpPost, host: "autoscaling.amazonaws.com",
    route: "/#Action=DeleteTags", validator: validate_PostDeleteTags_773808,
    base: "/", url: url_PostDeleteTags_773809, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteTags_773791 = ref object of OpenApiRestCall_772597
proc url_GetDeleteTags_773793(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteTags_773792(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified tags.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : One or more tags.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_773794 = query.getOrDefault("Tags")
  valid_773794 = validateParameter(valid_773794, JArray, required = true, default = nil)
  if valid_773794 != nil:
    section.add "Tags", valid_773794
  var valid_773795 = query.getOrDefault("Action")
  valid_773795 = validateParameter(valid_773795, JString, required = true,
                                 default = newJString("DeleteTags"))
  if valid_773795 != nil:
    section.add "Action", valid_773795
  var valid_773796 = query.getOrDefault("Version")
  valid_773796 = validateParameter(valid_773796, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_773796 != nil:
    section.add "Version", valid_773796
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773797 = header.getOrDefault("X-Amz-Date")
  valid_773797 = validateParameter(valid_773797, JString, required = false,
                                 default = nil)
  if valid_773797 != nil:
    section.add "X-Amz-Date", valid_773797
  var valid_773798 = header.getOrDefault("X-Amz-Security-Token")
  valid_773798 = validateParameter(valid_773798, JString, required = false,
                                 default = nil)
  if valid_773798 != nil:
    section.add "X-Amz-Security-Token", valid_773798
  var valid_773799 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773799 = validateParameter(valid_773799, JString, required = false,
                                 default = nil)
  if valid_773799 != nil:
    section.add "X-Amz-Content-Sha256", valid_773799
  var valid_773800 = header.getOrDefault("X-Amz-Algorithm")
  valid_773800 = validateParameter(valid_773800, JString, required = false,
                                 default = nil)
  if valid_773800 != nil:
    section.add "X-Amz-Algorithm", valid_773800
  var valid_773801 = header.getOrDefault("X-Amz-Signature")
  valid_773801 = validateParameter(valid_773801, JString, required = false,
                                 default = nil)
  if valid_773801 != nil:
    section.add "X-Amz-Signature", valid_773801
  var valid_773802 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773802 = validateParameter(valid_773802, JString, required = false,
                                 default = nil)
  if valid_773802 != nil:
    section.add "X-Amz-SignedHeaders", valid_773802
  var valid_773803 = header.getOrDefault("X-Amz-Credential")
  valid_773803 = validateParameter(valid_773803, JString, required = false,
                                 default = nil)
  if valid_773803 != nil:
    section.add "X-Amz-Credential", valid_773803
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773804: Call_GetDeleteTags_773791; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified tags.
  ## 
  let valid = call_773804.validator(path, query, header, formData, body)
  let scheme = call_773804.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773804.url(scheme.get, call_773804.host, call_773804.base,
                         call_773804.route, valid.getOrDefault("path"))
  result = hook(call_773804, url, valid)

proc call*(call_773805: Call_GetDeleteTags_773791; Tags: JsonNode;
          Action: string = "DeleteTags"; Version: string = "2011-01-01"): Recallable =
  ## getDeleteTags
  ## Deletes the specified tags.
  ##   Tags: JArray (required)
  ##       : One or more tags.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773806 = newJObject()
  if Tags != nil:
    query_773806.add "Tags", Tags
  add(query_773806, "Action", newJString(Action))
  add(query_773806, "Version", newJString(Version))
  result = call_773805.call(nil, query_773806, nil, nil, nil)

var getDeleteTags* = Call_GetDeleteTags_773791(name: "getDeleteTags",
    meth: HttpMethod.HttpGet, host: "autoscaling.amazonaws.com",
    route: "/#Action=DeleteTags", validator: validate_GetDeleteTags_773792,
    base: "/", url: url_GetDeleteTags_773793, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeAccountLimits_773839 = ref object of OpenApiRestCall_772597
proc url_PostDescribeAccountLimits_773841(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeAccountLimits_773840(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the current Amazon EC2 Auto Scaling resource limits for your AWS account.</p> <p>For information about requesting an increase in these limits, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773842 = query.getOrDefault("Action")
  valid_773842 = validateParameter(valid_773842, JString, required = true,
                                 default = newJString("DescribeAccountLimits"))
  if valid_773842 != nil:
    section.add "Action", valid_773842
  var valid_773843 = query.getOrDefault("Version")
  valid_773843 = validateParameter(valid_773843, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_773843 != nil:
    section.add "Version", valid_773843
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773844 = header.getOrDefault("X-Amz-Date")
  valid_773844 = validateParameter(valid_773844, JString, required = false,
                                 default = nil)
  if valid_773844 != nil:
    section.add "X-Amz-Date", valid_773844
  var valid_773845 = header.getOrDefault("X-Amz-Security-Token")
  valid_773845 = validateParameter(valid_773845, JString, required = false,
                                 default = nil)
  if valid_773845 != nil:
    section.add "X-Amz-Security-Token", valid_773845
  var valid_773846 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773846 = validateParameter(valid_773846, JString, required = false,
                                 default = nil)
  if valid_773846 != nil:
    section.add "X-Amz-Content-Sha256", valid_773846
  var valid_773847 = header.getOrDefault("X-Amz-Algorithm")
  valid_773847 = validateParameter(valid_773847, JString, required = false,
                                 default = nil)
  if valid_773847 != nil:
    section.add "X-Amz-Algorithm", valid_773847
  var valid_773848 = header.getOrDefault("X-Amz-Signature")
  valid_773848 = validateParameter(valid_773848, JString, required = false,
                                 default = nil)
  if valid_773848 != nil:
    section.add "X-Amz-Signature", valid_773848
  var valid_773849 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773849 = validateParameter(valid_773849, JString, required = false,
                                 default = nil)
  if valid_773849 != nil:
    section.add "X-Amz-SignedHeaders", valid_773849
  var valid_773850 = header.getOrDefault("X-Amz-Credential")
  valid_773850 = validateParameter(valid_773850, JString, required = false,
                                 default = nil)
  if valid_773850 != nil:
    section.add "X-Amz-Credential", valid_773850
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773851: Call_PostDescribeAccountLimits_773839; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the current Amazon EC2 Auto Scaling resource limits for your AWS account.</p> <p>For information about requesting an increase in these limits, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_773851.validator(path, query, header, formData, body)
  let scheme = call_773851.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773851.url(scheme.get, call_773851.host, call_773851.base,
                         call_773851.route, valid.getOrDefault("path"))
  result = hook(call_773851, url, valid)

proc call*(call_773852: Call_PostDescribeAccountLimits_773839;
          Action: string = "DescribeAccountLimits"; Version: string = "2011-01-01"): Recallable =
  ## postDescribeAccountLimits
  ## <p>Describes the current Amazon EC2 Auto Scaling resource limits for your AWS account.</p> <p>For information about requesting an increase in these limits, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773853 = newJObject()
  add(query_773853, "Action", newJString(Action))
  add(query_773853, "Version", newJString(Version))
  result = call_773852.call(nil, query_773853, nil, nil, nil)

var postDescribeAccountLimits* = Call_PostDescribeAccountLimits_773839(
    name: "postDescribeAccountLimits", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeAccountLimits",
    validator: validate_PostDescribeAccountLimits_773840, base: "/",
    url: url_PostDescribeAccountLimits_773841,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeAccountLimits_773824 = ref object of OpenApiRestCall_772597
proc url_GetDescribeAccountLimits_773826(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeAccountLimits_773825(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the current Amazon EC2 Auto Scaling resource limits for your AWS account.</p> <p>For information about requesting an increase in these limits, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773827 = query.getOrDefault("Action")
  valid_773827 = validateParameter(valid_773827, JString, required = true,
                                 default = newJString("DescribeAccountLimits"))
  if valid_773827 != nil:
    section.add "Action", valid_773827
  var valid_773828 = query.getOrDefault("Version")
  valid_773828 = validateParameter(valid_773828, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_773828 != nil:
    section.add "Version", valid_773828
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773829 = header.getOrDefault("X-Amz-Date")
  valid_773829 = validateParameter(valid_773829, JString, required = false,
                                 default = nil)
  if valid_773829 != nil:
    section.add "X-Amz-Date", valid_773829
  var valid_773830 = header.getOrDefault("X-Amz-Security-Token")
  valid_773830 = validateParameter(valid_773830, JString, required = false,
                                 default = nil)
  if valid_773830 != nil:
    section.add "X-Amz-Security-Token", valid_773830
  var valid_773831 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773831 = validateParameter(valid_773831, JString, required = false,
                                 default = nil)
  if valid_773831 != nil:
    section.add "X-Amz-Content-Sha256", valid_773831
  var valid_773832 = header.getOrDefault("X-Amz-Algorithm")
  valid_773832 = validateParameter(valid_773832, JString, required = false,
                                 default = nil)
  if valid_773832 != nil:
    section.add "X-Amz-Algorithm", valid_773832
  var valid_773833 = header.getOrDefault("X-Amz-Signature")
  valid_773833 = validateParameter(valid_773833, JString, required = false,
                                 default = nil)
  if valid_773833 != nil:
    section.add "X-Amz-Signature", valid_773833
  var valid_773834 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773834 = validateParameter(valid_773834, JString, required = false,
                                 default = nil)
  if valid_773834 != nil:
    section.add "X-Amz-SignedHeaders", valid_773834
  var valid_773835 = header.getOrDefault("X-Amz-Credential")
  valid_773835 = validateParameter(valid_773835, JString, required = false,
                                 default = nil)
  if valid_773835 != nil:
    section.add "X-Amz-Credential", valid_773835
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773836: Call_GetDescribeAccountLimits_773824; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the current Amazon EC2 Auto Scaling resource limits for your AWS account.</p> <p>For information about requesting an increase in these limits, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_773836.validator(path, query, header, formData, body)
  let scheme = call_773836.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773836.url(scheme.get, call_773836.host, call_773836.base,
                         call_773836.route, valid.getOrDefault("path"))
  result = hook(call_773836, url, valid)

proc call*(call_773837: Call_GetDescribeAccountLimits_773824;
          Action: string = "DescribeAccountLimits"; Version: string = "2011-01-01"): Recallable =
  ## getDescribeAccountLimits
  ## <p>Describes the current Amazon EC2 Auto Scaling resource limits for your AWS account.</p> <p>For information about requesting an increase in these limits, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773838 = newJObject()
  add(query_773838, "Action", newJString(Action))
  add(query_773838, "Version", newJString(Version))
  result = call_773837.call(nil, query_773838, nil, nil, nil)

var getDescribeAccountLimits* = Call_GetDescribeAccountLimits_773824(
    name: "getDescribeAccountLimits", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeAccountLimits",
    validator: validate_GetDescribeAccountLimits_773825, base: "/",
    url: url_GetDescribeAccountLimits_773826, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeAdjustmentTypes_773869 = ref object of OpenApiRestCall_772597
proc url_PostDescribeAdjustmentTypes_773871(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeAdjustmentTypes_773870(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the policy adjustment types for use with <a>PutScalingPolicy</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773872 = query.getOrDefault("Action")
  valid_773872 = validateParameter(valid_773872, JString, required = true, default = newJString(
      "DescribeAdjustmentTypes"))
  if valid_773872 != nil:
    section.add "Action", valid_773872
  var valid_773873 = query.getOrDefault("Version")
  valid_773873 = validateParameter(valid_773873, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_773873 != nil:
    section.add "Version", valid_773873
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773874 = header.getOrDefault("X-Amz-Date")
  valid_773874 = validateParameter(valid_773874, JString, required = false,
                                 default = nil)
  if valid_773874 != nil:
    section.add "X-Amz-Date", valid_773874
  var valid_773875 = header.getOrDefault("X-Amz-Security-Token")
  valid_773875 = validateParameter(valid_773875, JString, required = false,
                                 default = nil)
  if valid_773875 != nil:
    section.add "X-Amz-Security-Token", valid_773875
  var valid_773876 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773876 = validateParameter(valid_773876, JString, required = false,
                                 default = nil)
  if valid_773876 != nil:
    section.add "X-Amz-Content-Sha256", valid_773876
  var valid_773877 = header.getOrDefault("X-Amz-Algorithm")
  valid_773877 = validateParameter(valid_773877, JString, required = false,
                                 default = nil)
  if valid_773877 != nil:
    section.add "X-Amz-Algorithm", valid_773877
  var valid_773878 = header.getOrDefault("X-Amz-Signature")
  valid_773878 = validateParameter(valid_773878, JString, required = false,
                                 default = nil)
  if valid_773878 != nil:
    section.add "X-Amz-Signature", valid_773878
  var valid_773879 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773879 = validateParameter(valid_773879, JString, required = false,
                                 default = nil)
  if valid_773879 != nil:
    section.add "X-Amz-SignedHeaders", valid_773879
  var valid_773880 = header.getOrDefault("X-Amz-Credential")
  valid_773880 = validateParameter(valid_773880, JString, required = false,
                                 default = nil)
  if valid_773880 != nil:
    section.add "X-Amz-Credential", valid_773880
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773881: Call_PostDescribeAdjustmentTypes_773869; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the policy adjustment types for use with <a>PutScalingPolicy</a>.
  ## 
  let valid = call_773881.validator(path, query, header, formData, body)
  let scheme = call_773881.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773881.url(scheme.get, call_773881.host, call_773881.base,
                         call_773881.route, valid.getOrDefault("path"))
  result = hook(call_773881, url, valid)

proc call*(call_773882: Call_PostDescribeAdjustmentTypes_773869;
          Action: string = "DescribeAdjustmentTypes"; Version: string = "2011-01-01"): Recallable =
  ## postDescribeAdjustmentTypes
  ## Describes the policy adjustment types for use with <a>PutScalingPolicy</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773883 = newJObject()
  add(query_773883, "Action", newJString(Action))
  add(query_773883, "Version", newJString(Version))
  result = call_773882.call(nil, query_773883, nil, nil, nil)

var postDescribeAdjustmentTypes* = Call_PostDescribeAdjustmentTypes_773869(
    name: "postDescribeAdjustmentTypes", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeAdjustmentTypes",
    validator: validate_PostDescribeAdjustmentTypes_773870, base: "/",
    url: url_PostDescribeAdjustmentTypes_773871,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeAdjustmentTypes_773854 = ref object of OpenApiRestCall_772597
proc url_GetDescribeAdjustmentTypes_773856(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeAdjustmentTypes_773855(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the policy adjustment types for use with <a>PutScalingPolicy</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773857 = query.getOrDefault("Action")
  valid_773857 = validateParameter(valid_773857, JString, required = true, default = newJString(
      "DescribeAdjustmentTypes"))
  if valid_773857 != nil:
    section.add "Action", valid_773857
  var valid_773858 = query.getOrDefault("Version")
  valid_773858 = validateParameter(valid_773858, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_773858 != nil:
    section.add "Version", valid_773858
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773859 = header.getOrDefault("X-Amz-Date")
  valid_773859 = validateParameter(valid_773859, JString, required = false,
                                 default = nil)
  if valid_773859 != nil:
    section.add "X-Amz-Date", valid_773859
  var valid_773860 = header.getOrDefault("X-Amz-Security-Token")
  valid_773860 = validateParameter(valid_773860, JString, required = false,
                                 default = nil)
  if valid_773860 != nil:
    section.add "X-Amz-Security-Token", valid_773860
  var valid_773861 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773861 = validateParameter(valid_773861, JString, required = false,
                                 default = nil)
  if valid_773861 != nil:
    section.add "X-Amz-Content-Sha256", valid_773861
  var valid_773862 = header.getOrDefault("X-Amz-Algorithm")
  valid_773862 = validateParameter(valid_773862, JString, required = false,
                                 default = nil)
  if valid_773862 != nil:
    section.add "X-Amz-Algorithm", valid_773862
  var valid_773863 = header.getOrDefault("X-Amz-Signature")
  valid_773863 = validateParameter(valid_773863, JString, required = false,
                                 default = nil)
  if valid_773863 != nil:
    section.add "X-Amz-Signature", valid_773863
  var valid_773864 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773864 = validateParameter(valid_773864, JString, required = false,
                                 default = nil)
  if valid_773864 != nil:
    section.add "X-Amz-SignedHeaders", valid_773864
  var valid_773865 = header.getOrDefault("X-Amz-Credential")
  valid_773865 = validateParameter(valid_773865, JString, required = false,
                                 default = nil)
  if valid_773865 != nil:
    section.add "X-Amz-Credential", valid_773865
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773866: Call_GetDescribeAdjustmentTypes_773854; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the policy adjustment types for use with <a>PutScalingPolicy</a>.
  ## 
  let valid = call_773866.validator(path, query, header, formData, body)
  let scheme = call_773866.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773866.url(scheme.get, call_773866.host, call_773866.base,
                         call_773866.route, valid.getOrDefault("path"))
  result = hook(call_773866, url, valid)

proc call*(call_773867: Call_GetDescribeAdjustmentTypes_773854;
          Action: string = "DescribeAdjustmentTypes"; Version: string = "2011-01-01"): Recallable =
  ## getDescribeAdjustmentTypes
  ## Describes the policy adjustment types for use with <a>PutScalingPolicy</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773868 = newJObject()
  add(query_773868, "Action", newJString(Action))
  add(query_773868, "Version", newJString(Version))
  result = call_773867.call(nil, query_773868, nil, nil, nil)

var getDescribeAdjustmentTypes* = Call_GetDescribeAdjustmentTypes_773854(
    name: "getDescribeAdjustmentTypes", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeAdjustmentTypes",
    validator: validate_GetDescribeAdjustmentTypes_773855, base: "/",
    url: url_GetDescribeAdjustmentTypes_773856,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeAutoScalingGroups_773902 = ref object of OpenApiRestCall_772597
proc url_PostDescribeAutoScalingGroups_773904(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeAutoScalingGroups_773903(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more Auto Scaling groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773905 = query.getOrDefault("Action")
  valid_773905 = validateParameter(valid_773905, JString, required = true, default = newJString(
      "DescribeAutoScalingGroups"))
  if valid_773905 != nil:
    section.add "Action", valid_773905
  var valid_773906 = query.getOrDefault("Version")
  valid_773906 = validateParameter(valid_773906, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_773906 != nil:
    section.add "Version", valid_773906
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773907 = header.getOrDefault("X-Amz-Date")
  valid_773907 = validateParameter(valid_773907, JString, required = false,
                                 default = nil)
  if valid_773907 != nil:
    section.add "X-Amz-Date", valid_773907
  var valid_773908 = header.getOrDefault("X-Amz-Security-Token")
  valid_773908 = validateParameter(valid_773908, JString, required = false,
                                 default = nil)
  if valid_773908 != nil:
    section.add "X-Amz-Security-Token", valid_773908
  var valid_773909 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773909 = validateParameter(valid_773909, JString, required = false,
                                 default = nil)
  if valid_773909 != nil:
    section.add "X-Amz-Content-Sha256", valid_773909
  var valid_773910 = header.getOrDefault("X-Amz-Algorithm")
  valid_773910 = validateParameter(valid_773910, JString, required = false,
                                 default = nil)
  if valid_773910 != nil:
    section.add "X-Amz-Algorithm", valid_773910
  var valid_773911 = header.getOrDefault("X-Amz-Signature")
  valid_773911 = validateParameter(valid_773911, JString, required = false,
                                 default = nil)
  if valid_773911 != nil:
    section.add "X-Amz-Signature", valid_773911
  var valid_773912 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773912 = validateParameter(valid_773912, JString, required = false,
                                 default = nil)
  if valid_773912 != nil:
    section.add "X-Amz-SignedHeaders", valid_773912
  var valid_773913 = header.getOrDefault("X-Amz-Credential")
  valid_773913 = validateParameter(valid_773913, JString, required = false,
                                 default = nil)
  if valid_773913 != nil:
    section.add "X-Amz-Credential", valid_773913
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>. 
  ##   AutoScalingGroupNames: JArray
  ##                        : <p>The names of the Auto Scaling groups. Each name can be a maximum of 1600 characters. By default, you can only specify up to 50 names. You can optionally increase this limit using the <code>MaxRecords</code> parameter. </p> <p>If you omit this parameter, all Auto Scaling groups are described.</p>
  section = newJObject()
  var valid_773914 = formData.getOrDefault("NextToken")
  valid_773914 = validateParameter(valid_773914, JString, required = false,
                                 default = nil)
  if valid_773914 != nil:
    section.add "NextToken", valid_773914
  var valid_773915 = formData.getOrDefault("MaxRecords")
  valid_773915 = validateParameter(valid_773915, JInt, required = false, default = nil)
  if valid_773915 != nil:
    section.add "MaxRecords", valid_773915
  var valid_773916 = formData.getOrDefault("AutoScalingGroupNames")
  valid_773916 = validateParameter(valid_773916, JArray, required = false,
                                 default = nil)
  if valid_773916 != nil:
    section.add "AutoScalingGroupNames", valid_773916
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773917: Call_PostDescribeAutoScalingGroups_773902; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes one or more Auto Scaling groups.
  ## 
  let valid = call_773917.validator(path, query, header, formData, body)
  let scheme = call_773917.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773917.url(scheme.get, call_773917.host, call_773917.base,
                         call_773917.route, valid.getOrDefault("path"))
  result = hook(call_773917, url, valid)

proc call*(call_773918: Call_PostDescribeAutoScalingGroups_773902;
          NextToken: string = ""; Action: string = "DescribeAutoScalingGroups";
          MaxRecords: int = 0; Version: string = "2011-01-01";
          AutoScalingGroupNames: JsonNode = nil): Recallable =
  ## postDescribeAutoScalingGroups
  ## Describes one or more Auto Scaling groups.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>. 
  ##   Version: string (required)
  ##   AutoScalingGroupNames: JArray
  ##                        : <p>The names of the Auto Scaling groups. Each name can be a maximum of 1600 characters. By default, you can only specify up to 50 names. You can optionally increase this limit using the <code>MaxRecords</code> parameter. </p> <p>If you omit this parameter, all Auto Scaling groups are described.</p>
  var query_773919 = newJObject()
  var formData_773920 = newJObject()
  add(formData_773920, "NextToken", newJString(NextToken))
  add(query_773919, "Action", newJString(Action))
  add(formData_773920, "MaxRecords", newJInt(MaxRecords))
  add(query_773919, "Version", newJString(Version))
  if AutoScalingGroupNames != nil:
    formData_773920.add "AutoScalingGroupNames", AutoScalingGroupNames
  result = call_773918.call(nil, query_773919, nil, formData_773920, nil)

var postDescribeAutoScalingGroups* = Call_PostDescribeAutoScalingGroups_773902(
    name: "postDescribeAutoScalingGroups", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeAutoScalingGroups",
    validator: validate_PostDescribeAutoScalingGroups_773903, base: "/",
    url: url_PostDescribeAutoScalingGroups_773904,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeAutoScalingGroups_773884 = ref object of OpenApiRestCall_772597
proc url_GetDescribeAutoScalingGroups_773886(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeAutoScalingGroups_773885(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more Auto Scaling groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>. 
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: JString (required)
  ##   AutoScalingGroupNames: JArray
  ##                        : <p>The names of the Auto Scaling groups. Each name can be a maximum of 1600 characters. By default, you can only specify up to 50 names. You can optionally increase this limit using the <code>MaxRecords</code> parameter. </p> <p>If you omit this parameter, all Auto Scaling groups are described.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_773887 = query.getOrDefault("MaxRecords")
  valid_773887 = validateParameter(valid_773887, JInt, required = false, default = nil)
  if valid_773887 != nil:
    section.add "MaxRecords", valid_773887
  var valid_773888 = query.getOrDefault("NextToken")
  valid_773888 = validateParameter(valid_773888, JString, required = false,
                                 default = nil)
  if valid_773888 != nil:
    section.add "NextToken", valid_773888
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773889 = query.getOrDefault("Action")
  valid_773889 = validateParameter(valid_773889, JString, required = true, default = newJString(
      "DescribeAutoScalingGroups"))
  if valid_773889 != nil:
    section.add "Action", valid_773889
  var valid_773890 = query.getOrDefault("AutoScalingGroupNames")
  valid_773890 = validateParameter(valid_773890, JArray, required = false,
                                 default = nil)
  if valid_773890 != nil:
    section.add "AutoScalingGroupNames", valid_773890
  var valid_773891 = query.getOrDefault("Version")
  valid_773891 = validateParameter(valid_773891, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_773891 != nil:
    section.add "Version", valid_773891
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773892 = header.getOrDefault("X-Amz-Date")
  valid_773892 = validateParameter(valid_773892, JString, required = false,
                                 default = nil)
  if valid_773892 != nil:
    section.add "X-Amz-Date", valid_773892
  var valid_773893 = header.getOrDefault("X-Amz-Security-Token")
  valid_773893 = validateParameter(valid_773893, JString, required = false,
                                 default = nil)
  if valid_773893 != nil:
    section.add "X-Amz-Security-Token", valid_773893
  var valid_773894 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773894 = validateParameter(valid_773894, JString, required = false,
                                 default = nil)
  if valid_773894 != nil:
    section.add "X-Amz-Content-Sha256", valid_773894
  var valid_773895 = header.getOrDefault("X-Amz-Algorithm")
  valid_773895 = validateParameter(valid_773895, JString, required = false,
                                 default = nil)
  if valid_773895 != nil:
    section.add "X-Amz-Algorithm", valid_773895
  var valid_773896 = header.getOrDefault("X-Amz-Signature")
  valid_773896 = validateParameter(valid_773896, JString, required = false,
                                 default = nil)
  if valid_773896 != nil:
    section.add "X-Amz-Signature", valid_773896
  var valid_773897 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773897 = validateParameter(valid_773897, JString, required = false,
                                 default = nil)
  if valid_773897 != nil:
    section.add "X-Amz-SignedHeaders", valid_773897
  var valid_773898 = header.getOrDefault("X-Amz-Credential")
  valid_773898 = validateParameter(valid_773898, JString, required = false,
                                 default = nil)
  if valid_773898 != nil:
    section.add "X-Amz-Credential", valid_773898
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773899: Call_GetDescribeAutoScalingGroups_773884; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes one or more Auto Scaling groups.
  ## 
  let valid = call_773899.validator(path, query, header, formData, body)
  let scheme = call_773899.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773899.url(scheme.get, call_773899.host, call_773899.base,
                         call_773899.route, valid.getOrDefault("path"))
  result = hook(call_773899, url, valid)

proc call*(call_773900: Call_GetDescribeAutoScalingGroups_773884;
          MaxRecords: int = 0; NextToken: string = "";
          Action: string = "DescribeAutoScalingGroups";
          AutoScalingGroupNames: JsonNode = nil; Version: string = "2011-01-01"): Recallable =
  ## getDescribeAutoScalingGroups
  ## Describes one or more Auto Scaling groups.
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>. 
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   AutoScalingGroupNames: JArray
  ##                        : <p>The names of the Auto Scaling groups. Each name can be a maximum of 1600 characters. By default, you can only specify up to 50 names. You can optionally increase this limit using the <code>MaxRecords</code> parameter. </p> <p>If you omit this parameter, all Auto Scaling groups are described.</p>
  ##   Version: string (required)
  var query_773901 = newJObject()
  add(query_773901, "MaxRecords", newJInt(MaxRecords))
  add(query_773901, "NextToken", newJString(NextToken))
  add(query_773901, "Action", newJString(Action))
  if AutoScalingGroupNames != nil:
    query_773901.add "AutoScalingGroupNames", AutoScalingGroupNames
  add(query_773901, "Version", newJString(Version))
  result = call_773900.call(nil, query_773901, nil, nil, nil)

var getDescribeAutoScalingGroups* = Call_GetDescribeAutoScalingGroups_773884(
    name: "getDescribeAutoScalingGroups", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeAutoScalingGroups",
    validator: validate_GetDescribeAutoScalingGroups_773885, base: "/",
    url: url_GetDescribeAutoScalingGroups_773886,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeAutoScalingInstances_773939 = ref object of OpenApiRestCall_772597
proc url_PostDescribeAutoScalingInstances_773941(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeAutoScalingInstances_773940(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more Auto Scaling instances.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773942 = query.getOrDefault("Action")
  valid_773942 = validateParameter(valid_773942, JString, required = true, default = newJString(
      "DescribeAutoScalingInstances"))
  if valid_773942 != nil:
    section.add "Action", valid_773942
  var valid_773943 = query.getOrDefault("Version")
  valid_773943 = validateParameter(valid_773943, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_773943 != nil:
    section.add "Version", valid_773943
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773944 = header.getOrDefault("X-Amz-Date")
  valid_773944 = validateParameter(valid_773944, JString, required = false,
                                 default = nil)
  if valid_773944 != nil:
    section.add "X-Amz-Date", valid_773944
  var valid_773945 = header.getOrDefault("X-Amz-Security-Token")
  valid_773945 = validateParameter(valid_773945, JString, required = false,
                                 default = nil)
  if valid_773945 != nil:
    section.add "X-Amz-Security-Token", valid_773945
  var valid_773946 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773946 = validateParameter(valid_773946, JString, required = false,
                                 default = nil)
  if valid_773946 != nil:
    section.add "X-Amz-Content-Sha256", valid_773946
  var valid_773947 = header.getOrDefault("X-Amz-Algorithm")
  valid_773947 = validateParameter(valid_773947, JString, required = false,
                                 default = nil)
  if valid_773947 != nil:
    section.add "X-Amz-Algorithm", valid_773947
  var valid_773948 = header.getOrDefault("X-Amz-Signature")
  valid_773948 = validateParameter(valid_773948, JString, required = false,
                                 default = nil)
  if valid_773948 != nil:
    section.add "X-Amz-Signature", valid_773948
  var valid_773949 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773949 = validateParameter(valid_773949, JString, required = false,
                                 default = nil)
  if valid_773949 != nil:
    section.add "X-Amz-SignedHeaders", valid_773949
  var valid_773950 = header.getOrDefault("X-Amz-Credential")
  valid_773950 = validateParameter(valid_773950, JString, required = false,
                                 default = nil)
  if valid_773950 != nil:
    section.add "X-Amz-Credential", valid_773950
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to <code>MaxRecords</code> IDs. If you omit this parameter, all Auto Scaling instances are described. If you specify an ID that does not exist, it is ignored with no error.
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>50</code>.
  section = newJObject()
  var valid_773951 = formData.getOrDefault("NextToken")
  valid_773951 = validateParameter(valid_773951, JString, required = false,
                                 default = nil)
  if valid_773951 != nil:
    section.add "NextToken", valid_773951
  var valid_773952 = formData.getOrDefault("InstanceIds")
  valid_773952 = validateParameter(valid_773952, JArray, required = false,
                                 default = nil)
  if valid_773952 != nil:
    section.add "InstanceIds", valid_773952
  var valid_773953 = formData.getOrDefault("MaxRecords")
  valid_773953 = validateParameter(valid_773953, JInt, required = false, default = nil)
  if valid_773953 != nil:
    section.add "MaxRecords", valid_773953
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773954: Call_PostDescribeAutoScalingInstances_773939;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes one or more Auto Scaling instances.
  ## 
  let valid = call_773954.validator(path, query, header, formData, body)
  let scheme = call_773954.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773954.url(scheme.get, call_773954.host, call_773954.base,
                         call_773954.route, valid.getOrDefault("path"))
  result = hook(call_773954, url, valid)

proc call*(call_773955: Call_PostDescribeAutoScalingInstances_773939;
          NextToken: string = ""; InstanceIds: JsonNode = nil;
          Action: string = "DescribeAutoScalingInstances"; MaxRecords: int = 0;
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeAutoScalingInstances
  ## Describes one or more Auto Scaling instances.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to <code>MaxRecords</code> IDs. If you omit this parameter, all Auto Scaling instances are described. If you specify an ID that does not exist, it is ignored with no error.
  ##   Action: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>50</code>.
  ##   Version: string (required)
  var query_773956 = newJObject()
  var formData_773957 = newJObject()
  add(formData_773957, "NextToken", newJString(NextToken))
  if InstanceIds != nil:
    formData_773957.add "InstanceIds", InstanceIds
  add(query_773956, "Action", newJString(Action))
  add(formData_773957, "MaxRecords", newJInt(MaxRecords))
  add(query_773956, "Version", newJString(Version))
  result = call_773955.call(nil, query_773956, nil, formData_773957, nil)

var postDescribeAutoScalingInstances* = Call_PostDescribeAutoScalingInstances_773939(
    name: "postDescribeAutoScalingInstances", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeAutoScalingInstances",
    validator: validate_PostDescribeAutoScalingInstances_773940, base: "/",
    url: url_PostDescribeAutoScalingInstances_773941,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeAutoScalingInstances_773921 = ref object of OpenApiRestCall_772597
proc url_GetDescribeAutoScalingInstances_773923(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeAutoScalingInstances_773922(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more Auto Scaling instances.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>50</code>.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: JString (required)
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to <code>MaxRecords</code> IDs. If you omit this parameter, all Auto Scaling instances are described. If you specify an ID that does not exist, it is ignored with no error.
  ##   Version: JString (required)
  section = newJObject()
  var valid_773924 = query.getOrDefault("MaxRecords")
  valid_773924 = validateParameter(valid_773924, JInt, required = false, default = nil)
  if valid_773924 != nil:
    section.add "MaxRecords", valid_773924
  var valid_773925 = query.getOrDefault("NextToken")
  valid_773925 = validateParameter(valid_773925, JString, required = false,
                                 default = nil)
  if valid_773925 != nil:
    section.add "NextToken", valid_773925
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773926 = query.getOrDefault("Action")
  valid_773926 = validateParameter(valid_773926, JString, required = true, default = newJString(
      "DescribeAutoScalingInstances"))
  if valid_773926 != nil:
    section.add "Action", valid_773926
  var valid_773927 = query.getOrDefault("InstanceIds")
  valid_773927 = validateParameter(valid_773927, JArray, required = false,
                                 default = nil)
  if valid_773927 != nil:
    section.add "InstanceIds", valid_773927
  var valid_773928 = query.getOrDefault("Version")
  valid_773928 = validateParameter(valid_773928, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_773928 != nil:
    section.add "Version", valid_773928
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773929 = header.getOrDefault("X-Amz-Date")
  valid_773929 = validateParameter(valid_773929, JString, required = false,
                                 default = nil)
  if valid_773929 != nil:
    section.add "X-Amz-Date", valid_773929
  var valid_773930 = header.getOrDefault("X-Amz-Security-Token")
  valid_773930 = validateParameter(valid_773930, JString, required = false,
                                 default = nil)
  if valid_773930 != nil:
    section.add "X-Amz-Security-Token", valid_773930
  var valid_773931 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773931 = validateParameter(valid_773931, JString, required = false,
                                 default = nil)
  if valid_773931 != nil:
    section.add "X-Amz-Content-Sha256", valid_773931
  var valid_773932 = header.getOrDefault("X-Amz-Algorithm")
  valid_773932 = validateParameter(valid_773932, JString, required = false,
                                 default = nil)
  if valid_773932 != nil:
    section.add "X-Amz-Algorithm", valid_773932
  var valid_773933 = header.getOrDefault("X-Amz-Signature")
  valid_773933 = validateParameter(valid_773933, JString, required = false,
                                 default = nil)
  if valid_773933 != nil:
    section.add "X-Amz-Signature", valid_773933
  var valid_773934 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773934 = validateParameter(valid_773934, JString, required = false,
                                 default = nil)
  if valid_773934 != nil:
    section.add "X-Amz-SignedHeaders", valid_773934
  var valid_773935 = header.getOrDefault("X-Amz-Credential")
  valid_773935 = validateParameter(valid_773935, JString, required = false,
                                 default = nil)
  if valid_773935 != nil:
    section.add "X-Amz-Credential", valid_773935
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773936: Call_GetDescribeAutoScalingInstances_773921;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes one or more Auto Scaling instances.
  ## 
  let valid = call_773936.validator(path, query, header, formData, body)
  let scheme = call_773936.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773936.url(scheme.get, call_773936.host, call_773936.base,
                         call_773936.route, valid.getOrDefault("path"))
  result = hook(call_773936, url, valid)

proc call*(call_773937: Call_GetDescribeAutoScalingInstances_773921;
          MaxRecords: int = 0; NextToken: string = "";
          Action: string = "DescribeAutoScalingInstances";
          InstanceIds: JsonNode = nil; Version: string = "2011-01-01"): Recallable =
  ## getDescribeAutoScalingInstances
  ## Describes one or more Auto Scaling instances.
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>50</code>.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to <code>MaxRecords</code> IDs. If you omit this parameter, all Auto Scaling instances are described. If you specify an ID that does not exist, it is ignored with no error.
  ##   Version: string (required)
  var query_773938 = newJObject()
  add(query_773938, "MaxRecords", newJInt(MaxRecords))
  add(query_773938, "NextToken", newJString(NextToken))
  add(query_773938, "Action", newJString(Action))
  if InstanceIds != nil:
    query_773938.add "InstanceIds", InstanceIds
  add(query_773938, "Version", newJString(Version))
  result = call_773937.call(nil, query_773938, nil, nil, nil)

var getDescribeAutoScalingInstances* = Call_GetDescribeAutoScalingInstances_773921(
    name: "getDescribeAutoScalingInstances", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeAutoScalingInstances",
    validator: validate_GetDescribeAutoScalingInstances_773922, base: "/",
    url: url_GetDescribeAutoScalingInstances_773923,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeAutoScalingNotificationTypes_773973 = ref object of OpenApiRestCall_772597
proc url_PostDescribeAutoScalingNotificationTypes_773975(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeAutoScalingNotificationTypes_773974(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the notification types that are supported by Amazon EC2 Auto Scaling.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773976 = query.getOrDefault("Action")
  valid_773976 = validateParameter(valid_773976, JString, required = true, default = newJString(
      "DescribeAutoScalingNotificationTypes"))
  if valid_773976 != nil:
    section.add "Action", valid_773976
  var valid_773977 = query.getOrDefault("Version")
  valid_773977 = validateParameter(valid_773977, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_773977 != nil:
    section.add "Version", valid_773977
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773978 = header.getOrDefault("X-Amz-Date")
  valid_773978 = validateParameter(valid_773978, JString, required = false,
                                 default = nil)
  if valid_773978 != nil:
    section.add "X-Amz-Date", valid_773978
  var valid_773979 = header.getOrDefault("X-Amz-Security-Token")
  valid_773979 = validateParameter(valid_773979, JString, required = false,
                                 default = nil)
  if valid_773979 != nil:
    section.add "X-Amz-Security-Token", valid_773979
  var valid_773980 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773980 = validateParameter(valid_773980, JString, required = false,
                                 default = nil)
  if valid_773980 != nil:
    section.add "X-Amz-Content-Sha256", valid_773980
  var valid_773981 = header.getOrDefault("X-Amz-Algorithm")
  valid_773981 = validateParameter(valid_773981, JString, required = false,
                                 default = nil)
  if valid_773981 != nil:
    section.add "X-Amz-Algorithm", valid_773981
  var valid_773982 = header.getOrDefault("X-Amz-Signature")
  valid_773982 = validateParameter(valid_773982, JString, required = false,
                                 default = nil)
  if valid_773982 != nil:
    section.add "X-Amz-Signature", valid_773982
  var valid_773983 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773983 = validateParameter(valid_773983, JString, required = false,
                                 default = nil)
  if valid_773983 != nil:
    section.add "X-Amz-SignedHeaders", valid_773983
  var valid_773984 = header.getOrDefault("X-Amz-Credential")
  valid_773984 = validateParameter(valid_773984, JString, required = false,
                                 default = nil)
  if valid_773984 != nil:
    section.add "X-Amz-Credential", valid_773984
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773985: Call_PostDescribeAutoScalingNotificationTypes_773973;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the notification types that are supported by Amazon EC2 Auto Scaling.
  ## 
  let valid = call_773985.validator(path, query, header, formData, body)
  let scheme = call_773985.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773985.url(scheme.get, call_773985.host, call_773985.base,
                         call_773985.route, valid.getOrDefault("path"))
  result = hook(call_773985, url, valid)

proc call*(call_773986: Call_PostDescribeAutoScalingNotificationTypes_773973;
          Action: string = "DescribeAutoScalingNotificationTypes";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeAutoScalingNotificationTypes
  ## Describes the notification types that are supported by Amazon EC2 Auto Scaling.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773987 = newJObject()
  add(query_773987, "Action", newJString(Action))
  add(query_773987, "Version", newJString(Version))
  result = call_773986.call(nil, query_773987, nil, nil, nil)

var postDescribeAutoScalingNotificationTypes* = Call_PostDescribeAutoScalingNotificationTypes_773973(
    name: "postDescribeAutoScalingNotificationTypes", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeAutoScalingNotificationTypes",
    validator: validate_PostDescribeAutoScalingNotificationTypes_773974,
    base: "/", url: url_PostDescribeAutoScalingNotificationTypes_773975,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeAutoScalingNotificationTypes_773958 = ref object of OpenApiRestCall_772597
proc url_GetDescribeAutoScalingNotificationTypes_773960(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeAutoScalingNotificationTypes_773959(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the notification types that are supported by Amazon EC2 Auto Scaling.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773961 = query.getOrDefault("Action")
  valid_773961 = validateParameter(valid_773961, JString, required = true, default = newJString(
      "DescribeAutoScalingNotificationTypes"))
  if valid_773961 != nil:
    section.add "Action", valid_773961
  var valid_773962 = query.getOrDefault("Version")
  valid_773962 = validateParameter(valid_773962, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_773962 != nil:
    section.add "Version", valid_773962
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773963 = header.getOrDefault("X-Amz-Date")
  valid_773963 = validateParameter(valid_773963, JString, required = false,
                                 default = nil)
  if valid_773963 != nil:
    section.add "X-Amz-Date", valid_773963
  var valid_773964 = header.getOrDefault("X-Amz-Security-Token")
  valid_773964 = validateParameter(valid_773964, JString, required = false,
                                 default = nil)
  if valid_773964 != nil:
    section.add "X-Amz-Security-Token", valid_773964
  var valid_773965 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773965 = validateParameter(valid_773965, JString, required = false,
                                 default = nil)
  if valid_773965 != nil:
    section.add "X-Amz-Content-Sha256", valid_773965
  var valid_773966 = header.getOrDefault("X-Amz-Algorithm")
  valid_773966 = validateParameter(valid_773966, JString, required = false,
                                 default = nil)
  if valid_773966 != nil:
    section.add "X-Amz-Algorithm", valid_773966
  var valid_773967 = header.getOrDefault("X-Amz-Signature")
  valid_773967 = validateParameter(valid_773967, JString, required = false,
                                 default = nil)
  if valid_773967 != nil:
    section.add "X-Amz-Signature", valid_773967
  var valid_773968 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773968 = validateParameter(valid_773968, JString, required = false,
                                 default = nil)
  if valid_773968 != nil:
    section.add "X-Amz-SignedHeaders", valid_773968
  var valid_773969 = header.getOrDefault("X-Amz-Credential")
  valid_773969 = validateParameter(valid_773969, JString, required = false,
                                 default = nil)
  if valid_773969 != nil:
    section.add "X-Amz-Credential", valid_773969
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773970: Call_GetDescribeAutoScalingNotificationTypes_773958;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the notification types that are supported by Amazon EC2 Auto Scaling.
  ## 
  let valid = call_773970.validator(path, query, header, formData, body)
  let scheme = call_773970.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773970.url(scheme.get, call_773970.host, call_773970.base,
                         call_773970.route, valid.getOrDefault("path"))
  result = hook(call_773970, url, valid)

proc call*(call_773971: Call_GetDescribeAutoScalingNotificationTypes_773958;
          Action: string = "DescribeAutoScalingNotificationTypes";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeAutoScalingNotificationTypes
  ## Describes the notification types that are supported by Amazon EC2 Auto Scaling.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773972 = newJObject()
  add(query_773972, "Action", newJString(Action))
  add(query_773972, "Version", newJString(Version))
  result = call_773971.call(nil, query_773972, nil, nil, nil)

var getDescribeAutoScalingNotificationTypes* = Call_GetDescribeAutoScalingNotificationTypes_773958(
    name: "getDescribeAutoScalingNotificationTypes", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeAutoScalingNotificationTypes",
    validator: validate_GetDescribeAutoScalingNotificationTypes_773959, base: "/",
    url: url_GetDescribeAutoScalingNotificationTypes_773960,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeLaunchConfigurations_774006 = ref object of OpenApiRestCall_772597
proc url_PostDescribeLaunchConfigurations_774008(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeLaunchConfigurations_774007(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more launch configurations.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774009 = query.getOrDefault("Action")
  valid_774009 = validateParameter(valid_774009, JString, required = true, default = newJString(
      "DescribeLaunchConfigurations"))
  if valid_774009 != nil:
    section.add "Action", valid_774009
  var valid_774010 = query.getOrDefault("Version")
  valid_774010 = validateParameter(valid_774010, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_774010 != nil:
    section.add "Version", valid_774010
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774011 = header.getOrDefault("X-Amz-Date")
  valid_774011 = validateParameter(valid_774011, JString, required = false,
                                 default = nil)
  if valid_774011 != nil:
    section.add "X-Amz-Date", valid_774011
  var valid_774012 = header.getOrDefault("X-Amz-Security-Token")
  valid_774012 = validateParameter(valid_774012, JString, required = false,
                                 default = nil)
  if valid_774012 != nil:
    section.add "X-Amz-Security-Token", valid_774012
  var valid_774013 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774013 = validateParameter(valid_774013, JString, required = false,
                                 default = nil)
  if valid_774013 != nil:
    section.add "X-Amz-Content-Sha256", valid_774013
  var valid_774014 = header.getOrDefault("X-Amz-Algorithm")
  valid_774014 = validateParameter(valid_774014, JString, required = false,
                                 default = nil)
  if valid_774014 != nil:
    section.add "X-Amz-Algorithm", valid_774014
  var valid_774015 = header.getOrDefault("X-Amz-Signature")
  valid_774015 = validateParameter(valid_774015, JString, required = false,
                                 default = nil)
  if valid_774015 != nil:
    section.add "X-Amz-Signature", valid_774015
  var valid_774016 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774016 = validateParameter(valid_774016, JString, required = false,
                                 default = nil)
  if valid_774016 != nil:
    section.add "X-Amz-SignedHeaders", valid_774016
  var valid_774017 = header.getOrDefault("X-Amz-Credential")
  valid_774017 = validateParameter(valid_774017, JString, required = false,
                                 default = nil)
  if valid_774017 != nil:
    section.add "X-Amz-Credential", valid_774017
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   LaunchConfigurationNames: JArray
  ##                           : The launch configuration names. If you omit this parameter, all launch configurations are described.
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  section = newJObject()
  var valid_774018 = formData.getOrDefault("NextToken")
  valid_774018 = validateParameter(valid_774018, JString, required = false,
                                 default = nil)
  if valid_774018 != nil:
    section.add "NextToken", valid_774018
  var valid_774019 = formData.getOrDefault("LaunchConfigurationNames")
  valid_774019 = validateParameter(valid_774019, JArray, required = false,
                                 default = nil)
  if valid_774019 != nil:
    section.add "LaunchConfigurationNames", valid_774019
  var valid_774020 = formData.getOrDefault("MaxRecords")
  valid_774020 = validateParameter(valid_774020, JInt, required = false, default = nil)
  if valid_774020 != nil:
    section.add "MaxRecords", valid_774020
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774021: Call_PostDescribeLaunchConfigurations_774006;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes one or more launch configurations.
  ## 
  let valid = call_774021.validator(path, query, header, formData, body)
  let scheme = call_774021.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774021.url(scheme.get, call_774021.host, call_774021.base,
                         call_774021.route, valid.getOrDefault("path"))
  result = hook(call_774021, url, valid)

proc call*(call_774022: Call_PostDescribeLaunchConfigurations_774006;
          NextToken: string = ""; LaunchConfigurationNames: JsonNode = nil;
          Action: string = "DescribeLaunchConfigurations"; MaxRecords: int = 0;
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeLaunchConfigurations
  ## Describes one or more launch configurations.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   LaunchConfigurationNames: JArray
  ##                           : The launch configuration names. If you omit this parameter, all launch configurations are described.
  ##   Action: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   Version: string (required)
  var query_774023 = newJObject()
  var formData_774024 = newJObject()
  add(formData_774024, "NextToken", newJString(NextToken))
  if LaunchConfigurationNames != nil:
    formData_774024.add "LaunchConfigurationNames", LaunchConfigurationNames
  add(query_774023, "Action", newJString(Action))
  add(formData_774024, "MaxRecords", newJInt(MaxRecords))
  add(query_774023, "Version", newJString(Version))
  result = call_774022.call(nil, query_774023, nil, formData_774024, nil)

var postDescribeLaunchConfigurations* = Call_PostDescribeLaunchConfigurations_774006(
    name: "postDescribeLaunchConfigurations", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeLaunchConfigurations",
    validator: validate_PostDescribeLaunchConfigurations_774007, base: "/",
    url: url_PostDescribeLaunchConfigurations_774008,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeLaunchConfigurations_773988 = ref object of OpenApiRestCall_772597
proc url_GetDescribeLaunchConfigurations_773990(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeLaunchConfigurations_773989(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more launch configurations.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   LaunchConfigurationNames: JArray
  ##                           : The launch configuration names. If you omit this parameter, all launch configurations are described.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_773991 = query.getOrDefault("MaxRecords")
  valid_773991 = validateParameter(valid_773991, JInt, required = false, default = nil)
  if valid_773991 != nil:
    section.add "MaxRecords", valid_773991
  var valid_773992 = query.getOrDefault("NextToken")
  valid_773992 = validateParameter(valid_773992, JString, required = false,
                                 default = nil)
  if valid_773992 != nil:
    section.add "NextToken", valid_773992
  var valid_773993 = query.getOrDefault("LaunchConfigurationNames")
  valid_773993 = validateParameter(valid_773993, JArray, required = false,
                                 default = nil)
  if valid_773993 != nil:
    section.add "LaunchConfigurationNames", valid_773993
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773994 = query.getOrDefault("Action")
  valid_773994 = validateParameter(valid_773994, JString, required = true, default = newJString(
      "DescribeLaunchConfigurations"))
  if valid_773994 != nil:
    section.add "Action", valid_773994
  var valid_773995 = query.getOrDefault("Version")
  valid_773995 = validateParameter(valid_773995, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_773995 != nil:
    section.add "Version", valid_773995
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773996 = header.getOrDefault("X-Amz-Date")
  valid_773996 = validateParameter(valid_773996, JString, required = false,
                                 default = nil)
  if valid_773996 != nil:
    section.add "X-Amz-Date", valid_773996
  var valid_773997 = header.getOrDefault("X-Amz-Security-Token")
  valid_773997 = validateParameter(valid_773997, JString, required = false,
                                 default = nil)
  if valid_773997 != nil:
    section.add "X-Amz-Security-Token", valid_773997
  var valid_773998 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773998 = validateParameter(valid_773998, JString, required = false,
                                 default = nil)
  if valid_773998 != nil:
    section.add "X-Amz-Content-Sha256", valid_773998
  var valid_773999 = header.getOrDefault("X-Amz-Algorithm")
  valid_773999 = validateParameter(valid_773999, JString, required = false,
                                 default = nil)
  if valid_773999 != nil:
    section.add "X-Amz-Algorithm", valid_773999
  var valid_774000 = header.getOrDefault("X-Amz-Signature")
  valid_774000 = validateParameter(valid_774000, JString, required = false,
                                 default = nil)
  if valid_774000 != nil:
    section.add "X-Amz-Signature", valid_774000
  var valid_774001 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774001 = validateParameter(valid_774001, JString, required = false,
                                 default = nil)
  if valid_774001 != nil:
    section.add "X-Amz-SignedHeaders", valid_774001
  var valid_774002 = header.getOrDefault("X-Amz-Credential")
  valid_774002 = validateParameter(valid_774002, JString, required = false,
                                 default = nil)
  if valid_774002 != nil:
    section.add "X-Amz-Credential", valid_774002
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774003: Call_GetDescribeLaunchConfigurations_773988;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes one or more launch configurations.
  ## 
  let valid = call_774003.validator(path, query, header, formData, body)
  let scheme = call_774003.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774003.url(scheme.get, call_774003.host, call_774003.base,
                         call_774003.route, valid.getOrDefault("path"))
  result = hook(call_774003, url, valid)

proc call*(call_774004: Call_GetDescribeLaunchConfigurations_773988;
          MaxRecords: int = 0; NextToken: string = "";
          LaunchConfigurationNames: JsonNode = nil;
          Action: string = "DescribeLaunchConfigurations";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeLaunchConfigurations
  ## Describes one or more launch configurations.
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   LaunchConfigurationNames: JArray
  ##                           : The launch configuration names. If you omit this parameter, all launch configurations are described.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774005 = newJObject()
  add(query_774005, "MaxRecords", newJInt(MaxRecords))
  add(query_774005, "NextToken", newJString(NextToken))
  if LaunchConfigurationNames != nil:
    query_774005.add "LaunchConfigurationNames", LaunchConfigurationNames
  add(query_774005, "Action", newJString(Action))
  add(query_774005, "Version", newJString(Version))
  result = call_774004.call(nil, query_774005, nil, nil, nil)

var getDescribeLaunchConfigurations* = Call_GetDescribeLaunchConfigurations_773988(
    name: "getDescribeLaunchConfigurations", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeLaunchConfigurations",
    validator: validate_GetDescribeLaunchConfigurations_773989, base: "/",
    url: url_GetDescribeLaunchConfigurations_773990,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeLifecycleHookTypes_774040 = ref object of OpenApiRestCall_772597
proc url_PostDescribeLifecycleHookTypes_774042(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeLifecycleHookTypes_774041(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the available types of lifecycle hooks.</p> <p>The following hook types are supported:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774043 = query.getOrDefault("Action")
  valid_774043 = validateParameter(valid_774043, JString, required = true, default = newJString(
      "DescribeLifecycleHookTypes"))
  if valid_774043 != nil:
    section.add "Action", valid_774043
  var valid_774044 = query.getOrDefault("Version")
  valid_774044 = validateParameter(valid_774044, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_774044 != nil:
    section.add "Version", valid_774044
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774045 = header.getOrDefault("X-Amz-Date")
  valid_774045 = validateParameter(valid_774045, JString, required = false,
                                 default = nil)
  if valid_774045 != nil:
    section.add "X-Amz-Date", valid_774045
  var valid_774046 = header.getOrDefault("X-Amz-Security-Token")
  valid_774046 = validateParameter(valid_774046, JString, required = false,
                                 default = nil)
  if valid_774046 != nil:
    section.add "X-Amz-Security-Token", valid_774046
  var valid_774047 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774047 = validateParameter(valid_774047, JString, required = false,
                                 default = nil)
  if valid_774047 != nil:
    section.add "X-Amz-Content-Sha256", valid_774047
  var valid_774048 = header.getOrDefault("X-Amz-Algorithm")
  valid_774048 = validateParameter(valid_774048, JString, required = false,
                                 default = nil)
  if valid_774048 != nil:
    section.add "X-Amz-Algorithm", valid_774048
  var valid_774049 = header.getOrDefault("X-Amz-Signature")
  valid_774049 = validateParameter(valid_774049, JString, required = false,
                                 default = nil)
  if valid_774049 != nil:
    section.add "X-Amz-Signature", valid_774049
  var valid_774050 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774050 = validateParameter(valid_774050, JString, required = false,
                                 default = nil)
  if valid_774050 != nil:
    section.add "X-Amz-SignedHeaders", valid_774050
  var valid_774051 = header.getOrDefault("X-Amz-Credential")
  valid_774051 = validateParameter(valid_774051, JString, required = false,
                                 default = nil)
  if valid_774051 != nil:
    section.add "X-Amz-Credential", valid_774051
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774052: Call_PostDescribeLifecycleHookTypes_774040; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the available types of lifecycle hooks.</p> <p>The following hook types are supported:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul>
  ## 
  let valid = call_774052.validator(path, query, header, formData, body)
  let scheme = call_774052.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774052.url(scheme.get, call_774052.host, call_774052.base,
                         call_774052.route, valid.getOrDefault("path"))
  result = hook(call_774052, url, valid)

proc call*(call_774053: Call_PostDescribeLifecycleHookTypes_774040;
          Action: string = "DescribeLifecycleHookTypes";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeLifecycleHookTypes
  ## <p>Describes the available types of lifecycle hooks.</p> <p>The following hook types are supported:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774054 = newJObject()
  add(query_774054, "Action", newJString(Action))
  add(query_774054, "Version", newJString(Version))
  result = call_774053.call(nil, query_774054, nil, nil, nil)

var postDescribeLifecycleHookTypes* = Call_PostDescribeLifecycleHookTypes_774040(
    name: "postDescribeLifecycleHookTypes", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeLifecycleHookTypes",
    validator: validate_PostDescribeLifecycleHookTypes_774041, base: "/",
    url: url_PostDescribeLifecycleHookTypes_774042,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeLifecycleHookTypes_774025 = ref object of OpenApiRestCall_772597
proc url_GetDescribeLifecycleHookTypes_774027(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeLifecycleHookTypes_774026(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the available types of lifecycle hooks.</p> <p>The following hook types are supported:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774028 = query.getOrDefault("Action")
  valid_774028 = validateParameter(valid_774028, JString, required = true, default = newJString(
      "DescribeLifecycleHookTypes"))
  if valid_774028 != nil:
    section.add "Action", valid_774028
  var valid_774029 = query.getOrDefault("Version")
  valid_774029 = validateParameter(valid_774029, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_774029 != nil:
    section.add "Version", valid_774029
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774030 = header.getOrDefault("X-Amz-Date")
  valid_774030 = validateParameter(valid_774030, JString, required = false,
                                 default = nil)
  if valid_774030 != nil:
    section.add "X-Amz-Date", valid_774030
  var valid_774031 = header.getOrDefault("X-Amz-Security-Token")
  valid_774031 = validateParameter(valid_774031, JString, required = false,
                                 default = nil)
  if valid_774031 != nil:
    section.add "X-Amz-Security-Token", valid_774031
  var valid_774032 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774032 = validateParameter(valid_774032, JString, required = false,
                                 default = nil)
  if valid_774032 != nil:
    section.add "X-Amz-Content-Sha256", valid_774032
  var valid_774033 = header.getOrDefault("X-Amz-Algorithm")
  valid_774033 = validateParameter(valid_774033, JString, required = false,
                                 default = nil)
  if valid_774033 != nil:
    section.add "X-Amz-Algorithm", valid_774033
  var valid_774034 = header.getOrDefault("X-Amz-Signature")
  valid_774034 = validateParameter(valid_774034, JString, required = false,
                                 default = nil)
  if valid_774034 != nil:
    section.add "X-Amz-Signature", valid_774034
  var valid_774035 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774035 = validateParameter(valid_774035, JString, required = false,
                                 default = nil)
  if valid_774035 != nil:
    section.add "X-Amz-SignedHeaders", valid_774035
  var valid_774036 = header.getOrDefault("X-Amz-Credential")
  valid_774036 = validateParameter(valid_774036, JString, required = false,
                                 default = nil)
  if valid_774036 != nil:
    section.add "X-Amz-Credential", valid_774036
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774037: Call_GetDescribeLifecycleHookTypes_774025; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the available types of lifecycle hooks.</p> <p>The following hook types are supported:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul>
  ## 
  let valid = call_774037.validator(path, query, header, formData, body)
  let scheme = call_774037.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774037.url(scheme.get, call_774037.host, call_774037.base,
                         call_774037.route, valid.getOrDefault("path"))
  result = hook(call_774037, url, valid)

proc call*(call_774038: Call_GetDescribeLifecycleHookTypes_774025;
          Action: string = "DescribeLifecycleHookTypes";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeLifecycleHookTypes
  ## <p>Describes the available types of lifecycle hooks.</p> <p>The following hook types are supported:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774039 = newJObject()
  add(query_774039, "Action", newJString(Action))
  add(query_774039, "Version", newJString(Version))
  result = call_774038.call(nil, query_774039, nil, nil, nil)

var getDescribeLifecycleHookTypes* = Call_GetDescribeLifecycleHookTypes_774025(
    name: "getDescribeLifecycleHookTypes", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeLifecycleHookTypes",
    validator: validate_GetDescribeLifecycleHookTypes_774026, base: "/",
    url: url_GetDescribeLifecycleHookTypes_774027,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeLifecycleHooks_774072 = ref object of OpenApiRestCall_772597
proc url_PostDescribeLifecycleHooks_774074(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeLifecycleHooks_774073(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the lifecycle hooks for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774075 = query.getOrDefault("Action")
  valid_774075 = validateParameter(valid_774075, JString, required = true,
                                 default = newJString("DescribeLifecycleHooks"))
  if valid_774075 != nil:
    section.add "Action", valid_774075
  var valid_774076 = query.getOrDefault("Version")
  valid_774076 = validateParameter(valid_774076, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_774076 != nil:
    section.add "Version", valid_774076
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774077 = header.getOrDefault("X-Amz-Date")
  valid_774077 = validateParameter(valid_774077, JString, required = false,
                                 default = nil)
  if valid_774077 != nil:
    section.add "X-Amz-Date", valid_774077
  var valid_774078 = header.getOrDefault("X-Amz-Security-Token")
  valid_774078 = validateParameter(valid_774078, JString, required = false,
                                 default = nil)
  if valid_774078 != nil:
    section.add "X-Amz-Security-Token", valid_774078
  var valid_774079 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774079 = validateParameter(valid_774079, JString, required = false,
                                 default = nil)
  if valid_774079 != nil:
    section.add "X-Amz-Content-Sha256", valid_774079
  var valid_774080 = header.getOrDefault("X-Amz-Algorithm")
  valid_774080 = validateParameter(valid_774080, JString, required = false,
                                 default = nil)
  if valid_774080 != nil:
    section.add "X-Amz-Algorithm", valid_774080
  var valid_774081 = header.getOrDefault("X-Amz-Signature")
  valid_774081 = validateParameter(valid_774081, JString, required = false,
                                 default = nil)
  if valid_774081 != nil:
    section.add "X-Amz-Signature", valid_774081
  var valid_774082 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774082 = validateParameter(valid_774082, JString, required = false,
                                 default = nil)
  if valid_774082 != nil:
    section.add "X-Amz-SignedHeaders", valid_774082
  var valid_774083 = header.getOrDefault("X-Amz-Credential")
  valid_774083 = validateParameter(valid_774083, JString, required = false,
                                 default = nil)
  if valid_774083 != nil:
    section.add "X-Amz-Credential", valid_774083
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookNames: JArray
  ##                     : The names of one or more lifecycle hooks. If you omit this parameter, all lifecycle hooks are described.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_774084 = formData.getOrDefault("AutoScalingGroupName")
  valid_774084 = validateParameter(valid_774084, JString, required = true,
                                 default = nil)
  if valid_774084 != nil:
    section.add "AutoScalingGroupName", valid_774084
  var valid_774085 = formData.getOrDefault("LifecycleHookNames")
  valid_774085 = validateParameter(valid_774085, JArray, required = false,
                                 default = nil)
  if valid_774085 != nil:
    section.add "LifecycleHookNames", valid_774085
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774086: Call_PostDescribeLifecycleHooks_774072; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the lifecycle hooks for the specified Auto Scaling group.
  ## 
  let valid = call_774086.validator(path, query, header, formData, body)
  let scheme = call_774086.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774086.url(scheme.get, call_774086.host, call_774086.base,
                         call_774086.route, valid.getOrDefault("path"))
  result = hook(call_774086, url, valid)

proc call*(call_774087: Call_PostDescribeLifecycleHooks_774072;
          AutoScalingGroupName: string; LifecycleHookNames: JsonNode = nil;
          Action: string = "DescribeLifecycleHooks"; Version: string = "2011-01-01"): Recallable =
  ## postDescribeLifecycleHooks
  ## Describes the lifecycle hooks for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookNames: JArray
  ##                     : The names of one or more lifecycle hooks. If you omit this parameter, all lifecycle hooks are described.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774088 = newJObject()
  var formData_774089 = newJObject()
  add(formData_774089, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if LifecycleHookNames != nil:
    formData_774089.add "LifecycleHookNames", LifecycleHookNames
  add(query_774088, "Action", newJString(Action))
  add(query_774088, "Version", newJString(Version))
  result = call_774087.call(nil, query_774088, nil, formData_774089, nil)

var postDescribeLifecycleHooks* = Call_PostDescribeLifecycleHooks_774072(
    name: "postDescribeLifecycleHooks", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeLifecycleHooks",
    validator: validate_PostDescribeLifecycleHooks_774073, base: "/",
    url: url_PostDescribeLifecycleHooks_774074,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeLifecycleHooks_774055 = ref object of OpenApiRestCall_772597
proc url_GetDescribeLifecycleHooks_774057(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeLifecycleHooks_774056(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the lifecycle hooks for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookNames: JArray
  ##                     : The names of one or more lifecycle hooks. If you omit this parameter, all lifecycle hooks are described.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_774058 = query.getOrDefault("AutoScalingGroupName")
  valid_774058 = validateParameter(valid_774058, JString, required = true,
                                 default = nil)
  if valid_774058 != nil:
    section.add "AutoScalingGroupName", valid_774058
  var valid_774059 = query.getOrDefault("LifecycleHookNames")
  valid_774059 = validateParameter(valid_774059, JArray, required = false,
                                 default = nil)
  if valid_774059 != nil:
    section.add "LifecycleHookNames", valid_774059
  var valid_774060 = query.getOrDefault("Action")
  valid_774060 = validateParameter(valid_774060, JString, required = true,
                                 default = newJString("DescribeLifecycleHooks"))
  if valid_774060 != nil:
    section.add "Action", valid_774060
  var valid_774061 = query.getOrDefault("Version")
  valid_774061 = validateParameter(valid_774061, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_774061 != nil:
    section.add "Version", valid_774061
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774062 = header.getOrDefault("X-Amz-Date")
  valid_774062 = validateParameter(valid_774062, JString, required = false,
                                 default = nil)
  if valid_774062 != nil:
    section.add "X-Amz-Date", valid_774062
  var valid_774063 = header.getOrDefault("X-Amz-Security-Token")
  valid_774063 = validateParameter(valid_774063, JString, required = false,
                                 default = nil)
  if valid_774063 != nil:
    section.add "X-Amz-Security-Token", valid_774063
  var valid_774064 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774064 = validateParameter(valid_774064, JString, required = false,
                                 default = nil)
  if valid_774064 != nil:
    section.add "X-Amz-Content-Sha256", valid_774064
  var valid_774065 = header.getOrDefault("X-Amz-Algorithm")
  valid_774065 = validateParameter(valid_774065, JString, required = false,
                                 default = nil)
  if valid_774065 != nil:
    section.add "X-Amz-Algorithm", valid_774065
  var valid_774066 = header.getOrDefault("X-Amz-Signature")
  valid_774066 = validateParameter(valid_774066, JString, required = false,
                                 default = nil)
  if valid_774066 != nil:
    section.add "X-Amz-Signature", valid_774066
  var valid_774067 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774067 = validateParameter(valid_774067, JString, required = false,
                                 default = nil)
  if valid_774067 != nil:
    section.add "X-Amz-SignedHeaders", valid_774067
  var valid_774068 = header.getOrDefault("X-Amz-Credential")
  valid_774068 = validateParameter(valid_774068, JString, required = false,
                                 default = nil)
  if valid_774068 != nil:
    section.add "X-Amz-Credential", valid_774068
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774069: Call_GetDescribeLifecycleHooks_774055; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the lifecycle hooks for the specified Auto Scaling group.
  ## 
  let valid = call_774069.validator(path, query, header, formData, body)
  let scheme = call_774069.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774069.url(scheme.get, call_774069.host, call_774069.base,
                         call_774069.route, valid.getOrDefault("path"))
  result = hook(call_774069, url, valid)

proc call*(call_774070: Call_GetDescribeLifecycleHooks_774055;
          AutoScalingGroupName: string; LifecycleHookNames: JsonNode = nil;
          Action: string = "DescribeLifecycleHooks"; Version: string = "2011-01-01"): Recallable =
  ## getDescribeLifecycleHooks
  ## Describes the lifecycle hooks for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookNames: JArray
  ##                     : The names of one or more lifecycle hooks. If you omit this parameter, all lifecycle hooks are described.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774071 = newJObject()
  add(query_774071, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if LifecycleHookNames != nil:
    query_774071.add "LifecycleHookNames", LifecycleHookNames
  add(query_774071, "Action", newJString(Action))
  add(query_774071, "Version", newJString(Version))
  result = call_774070.call(nil, query_774071, nil, nil, nil)

var getDescribeLifecycleHooks* = Call_GetDescribeLifecycleHooks_774055(
    name: "getDescribeLifecycleHooks", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeLifecycleHooks",
    validator: validate_GetDescribeLifecycleHooks_774056, base: "/",
    url: url_GetDescribeLifecycleHooks_774057,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeLoadBalancerTargetGroups_774108 = ref object of OpenApiRestCall_772597
proc url_PostDescribeLoadBalancerTargetGroups_774110(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeLoadBalancerTargetGroups_774109(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the target groups for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774111 = query.getOrDefault("Action")
  valid_774111 = validateParameter(valid_774111, JString, required = true, default = newJString(
      "DescribeLoadBalancerTargetGroups"))
  if valid_774111 != nil:
    section.add "Action", valid_774111
  var valid_774112 = query.getOrDefault("Version")
  valid_774112 = validateParameter(valid_774112, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_774112 != nil:
    section.add "Version", valid_774112
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774113 = header.getOrDefault("X-Amz-Date")
  valid_774113 = validateParameter(valid_774113, JString, required = false,
                                 default = nil)
  if valid_774113 != nil:
    section.add "X-Amz-Date", valid_774113
  var valid_774114 = header.getOrDefault("X-Amz-Security-Token")
  valid_774114 = validateParameter(valid_774114, JString, required = false,
                                 default = nil)
  if valid_774114 != nil:
    section.add "X-Amz-Security-Token", valid_774114
  var valid_774115 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774115 = validateParameter(valid_774115, JString, required = false,
                                 default = nil)
  if valid_774115 != nil:
    section.add "X-Amz-Content-Sha256", valid_774115
  var valid_774116 = header.getOrDefault("X-Amz-Algorithm")
  valid_774116 = validateParameter(valid_774116, JString, required = false,
                                 default = nil)
  if valid_774116 != nil:
    section.add "X-Amz-Algorithm", valid_774116
  var valid_774117 = header.getOrDefault("X-Amz-Signature")
  valid_774117 = validateParameter(valid_774117, JString, required = false,
                                 default = nil)
  if valid_774117 != nil:
    section.add "X-Amz-Signature", valid_774117
  var valid_774118 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774118 = validateParameter(valid_774118, JString, required = false,
                                 default = nil)
  if valid_774118 != nil:
    section.add "X-Amz-SignedHeaders", valid_774118
  var valid_774119 = header.getOrDefault("X-Amz-Credential")
  valid_774119 = validateParameter(valid_774119, JString, required = false,
                                 default = nil)
  if valid_774119 != nil:
    section.add "X-Amz-Credential", valid_774119
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_774120 = formData.getOrDefault("AutoScalingGroupName")
  valid_774120 = validateParameter(valid_774120, JString, required = true,
                                 default = nil)
  if valid_774120 != nil:
    section.add "AutoScalingGroupName", valid_774120
  var valid_774121 = formData.getOrDefault("NextToken")
  valid_774121 = validateParameter(valid_774121, JString, required = false,
                                 default = nil)
  if valid_774121 != nil:
    section.add "NextToken", valid_774121
  var valid_774122 = formData.getOrDefault("MaxRecords")
  valid_774122 = validateParameter(valid_774122, JInt, required = false, default = nil)
  if valid_774122 != nil:
    section.add "MaxRecords", valid_774122
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774123: Call_PostDescribeLoadBalancerTargetGroups_774108;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the target groups for the specified Auto Scaling group.
  ## 
  let valid = call_774123.validator(path, query, header, formData, body)
  let scheme = call_774123.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774123.url(scheme.get, call_774123.host, call_774123.base,
                         call_774123.route, valid.getOrDefault("path"))
  result = hook(call_774123, url, valid)

proc call*(call_774124: Call_PostDescribeLoadBalancerTargetGroups_774108;
          AutoScalingGroupName: string; NextToken: string = "";
          Action: string = "DescribeLoadBalancerTargetGroups"; MaxRecords: int = 0;
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeLoadBalancerTargetGroups
  ## Describes the target groups for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   Version: string (required)
  var query_774125 = newJObject()
  var formData_774126 = newJObject()
  add(formData_774126, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_774126, "NextToken", newJString(NextToken))
  add(query_774125, "Action", newJString(Action))
  add(formData_774126, "MaxRecords", newJInt(MaxRecords))
  add(query_774125, "Version", newJString(Version))
  result = call_774124.call(nil, query_774125, nil, formData_774126, nil)

var postDescribeLoadBalancerTargetGroups* = Call_PostDescribeLoadBalancerTargetGroups_774108(
    name: "postDescribeLoadBalancerTargetGroups", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeLoadBalancerTargetGroups",
    validator: validate_PostDescribeLoadBalancerTargetGroups_774109, base: "/",
    url: url_PostDescribeLoadBalancerTargetGroups_774110,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeLoadBalancerTargetGroups_774090 = ref object of OpenApiRestCall_772597
proc url_GetDescribeLoadBalancerTargetGroups_774092(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeLoadBalancerTargetGroups_774091(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the target groups for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_774093 = query.getOrDefault("MaxRecords")
  valid_774093 = validateParameter(valid_774093, JInt, required = false, default = nil)
  if valid_774093 != nil:
    section.add "MaxRecords", valid_774093
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_774094 = query.getOrDefault("AutoScalingGroupName")
  valid_774094 = validateParameter(valid_774094, JString, required = true,
                                 default = nil)
  if valid_774094 != nil:
    section.add "AutoScalingGroupName", valid_774094
  var valid_774095 = query.getOrDefault("NextToken")
  valid_774095 = validateParameter(valid_774095, JString, required = false,
                                 default = nil)
  if valid_774095 != nil:
    section.add "NextToken", valid_774095
  var valid_774096 = query.getOrDefault("Action")
  valid_774096 = validateParameter(valid_774096, JString, required = true, default = newJString(
      "DescribeLoadBalancerTargetGroups"))
  if valid_774096 != nil:
    section.add "Action", valid_774096
  var valid_774097 = query.getOrDefault("Version")
  valid_774097 = validateParameter(valid_774097, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_774097 != nil:
    section.add "Version", valid_774097
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774098 = header.getOrDefault("X-Amz-Date")
  valid_774098 = validateParameter(valid_774098, JString, required = false,
                                 default = nil)
  if valid_774098 != nil:
    section.add "X-Amz-Date", valid_774098
  var valid_774099 = header.getOrDefault("X-Amz-Security-Token")
  valid_774099 = validateParameter(valid_774099, JString, required = false,
                                 default = nil)
  if valid_774099 != nil:
    section.add "X-Amz-Security-Token", valid_774099
  var valid_774100 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774100 = validateParameter(valid_774100, JString, required = false,
                                 default = nil)
  if valid_774100 != nil:
    section.add "X-Amz-Content-Sha256", valid_774100
  var valid_774101 = header.getOrDefault("X-Amz-Algorithm")
  valid_774101 = validateParameter(valid_774101, JString, required = false,
                                 default = nil)
  if valid_774101 != nil:
    section.add "X-Amz-Algorithm", valid_774101
  var valid_774102 = header.getOrDefault("X-Amz-Signature")
  valid_774102 = validateParameter(valid_774102, JString, required = false,
                                 default = nil)
  if valid_774102 != nil:
    section.add "X-Amz-Signature", valid_774102
  var valid_774103 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774103 = validateParameter(valid_774103, JString, required = false,
                                 default = nil)
  if valid_774103 != nil:
    section.add "X-Amz-SignedHeaders", valid_774103
  var valid_774104 = header.getOrDefault("X-Amz-Credential")
  valid_774104 = validateParameter(valid_774104, JString, required = false,
                                 default = nil)
  if valid_774104 != nil:
    section.add "X-Amz-Credential", valid_774104
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774105: Call_GetDescribeLoadBalancerTargetGroups_774090;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the target groups for the specified Auto Scaling group.
  ## 
  let valid = call_774105.validator(path, query, header, formData, body)
  let scheme = call_774105.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774105.url(scheme.get, call_774105.host, call_774105.base,
                         call_774105.route, valid.getOrDefault("path"))
  result = hook(call_774105, url, valid)

proc call*(call_774106: Call_GetDescribeLoadBalancerTargetGroups_774090;
          AutoScalingGroupName: string; MaxRecords: int = 0; NextToken: string = "";
          Action: string = "DescribeLoadBalancerTargetGroups";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeLoadBalancerTargetGroups
  ## Describes the target groups for the specified Auto Scaling group.
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774107 = newJObject()
  add(query_774107, "MaxRecords", newJInt(MaxRecords))
  add(query_774107, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_774107, "NextToken", newJString(NextToken))
  add(query_774107, "Action", newJString(Action))
  add(query_774107, "Version", newJString(Version))
  result = call_774106.call(nil, query_774107, nil, nil, nil)

var getDescribeLoadBalancerTargetGroups* = Call_GetDescribeLoadBalancerTargetGroups_774090(
    name: "getDescribeLoadBalancerTargetGroups", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeLoadBalancerTargetGroups",
    validator: validate_GetDescribeLoadBalancerTargetGroups_774091, base: "/",
    url: url_GetDescribeLoadBalancerTargetGroups_774092,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeLoadBalancers_774145 = ref object of OpenApiRestCall_772597
proc url_PostDescribeLoadBalancers_774147(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeLoadBalancers_774146(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the load balancers for the specified Auto Scaling group.</p> <p>This operation describes only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DescribeLoadBalancerTargetGroups</a> instead.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774148 = query.getOrDefault("Action")
  valid_774148 = validateParameter(valid_774148, JString, required = true,
                                 default = newJString("DescribeLoadBalancers"))
  if valid_774148 != nil:
    section.add "Action", valid_774148
  var valid_774149 = query.getOrDefault("Version")
  valid_774149 = validateParameter(valid_774149, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_774149 != nil:
    section.add "Version", valid_774149
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774150 = header.getOrDefault("X-Amz-Date")
  valid_774150 = validateParameter(valid_774150, JString, required = false,
                                 default = nil)
  if valid_774150 != nil:
    section.add "X-Amz-Date", valid_774150
  var valid_774151 = header.getOrDefault("X-Amz-Security-Token")
  valid_774151 = validateParameter(valid_774151, JString, required = false,
                                 default = nil)
  if valid_774151 != nil:
    section.add "X-Amz-Security-Token", valid_774151
  var valid_774152 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774152 = validateParameter(valid_774152, JString, required = false,
                                 default = nil)
  if valid_774152 != nil:
    section.add "X-Amz-Content-Sha256", valid_774152
  var valid_774153 = header.getOrDefault("X-Amz-Algorithm")
  valid_774153 = validateParameter(valid_774153, JString, required = false,
                                 default = nil)
  if valid_774153 != nil:
    section.add "X-Amz-Algorithm", valid_774153
  var valid_774154 = header.getOrDefault("X-Amz-Signature")
  valid_774154 = validateParameter(valid_774154, JString, required = false,
                                 default = nil)
  if valid_774154 != nil:
    section.add "X-Amz-Signature", valid_774154
  var valid_774155 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774155 = validateParameter(valid_774155, JString, required = false,
                                 default = nil)
  if valid_774155 != nil:
    section.add "X-Amz-SignedHeaders", valid_774155
  var valid_774156 = header.getOrDefault("X-Amz-Credential")
  valid_774156 = validateParameter(valid_774156, JString, required = false,
                                 default = nil)
  if valid_774156 != nil:
    section.add "X-Amz-Credential", valid_774156
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_774157 = formData.getOrDefault("AutoScalingGroupName")
  valid_774157 = validateParameter(valid_774157, JString, required = true,
                                 default = nil)
  if valid_774157 != nil:
    section.add "AutoScalingGroupName", valid_774157
  var valid_774158 = formData.getOrDefault("NextToken")
  valid_774158 = validateParameter(valid_774158, JString, required = false,
                                 default = nil)
  if valid_774158 != nil:
    section.add "NextToken", valid_774158
  var valid_774159 = formData.getOrDefault("MaxRecords")
  valid_774159 = validateParameter(valid_774159, JInt, required = false, default = nil)
  if valid_774159 != nil:
    section.add "MaxRecords", valid_774159
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774160: Call_PostDescribeLoadBalancers_774145; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the load balancers for the specified Auto Scaling group.</p> <p>This operation describes only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DescribeLoadBalancerTargetGroups</a> instead.</p>
  ## 
  let valid = call_774160.validator(path, query, header, formData, body)
  let scheme = call_774160.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774160.url(scheme.get, call_774160.host, call_774160.base,
                         call_774160.route, valid.getOrDefault("path"))
  result = hook(call_774160, url, valid)

proc call*(call_774161: Call_PostDescribeLoadBalancers_774145;
          AutoScalingGroupName: string; NextToken: string = "";
          Action: string = "DescribeLoadBalancers"; MaxRecords: int = 0;
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeLoadBalancers
  ## <p>Describes the load balancers for the specified Auto Scaling group.</p> <p>This operation describes only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DescribeLoadBalancerTargetGroups</a> instead.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   Version: string (required)
  var query_774162 = newJObject()
  var formData_774163 = newJObject()
  add(formData_774163, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_774163, "NextToken", newJString(NextToken))
  add(query_774162, "Action", newJString(Action))
  add(formData_774163, "MaxRecords", newJInt(MaxRecords))
  add(query_774162, "Version", newJString(Version))
  result = call_774161.call(nil, query_774162, nil, formData_774163, nil)

var postDescribeLoadBalancers* = Call_PostDescribeLoadBalancers_774145(
    name: "postDescribeLoadBalancers", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeLoadBalancers",
    validator: validate_PostDescribeLoadBalancers_774146, base: "/",
    url: url_PostDescribeLoadBalancers_774147,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeLoadBalancers_774127 = ref object of OpenApiRestCall_772597
proc url_GetDescribeLoadBalancers_774129(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeLoadBalancers_774128(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the load balancers for the specified Auto Scaling group.</p> <p>This operation describes only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DescribeLoadBalancerTargetGroups</a> instead.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_774130 = query.getOrDefault("MaxRecords")
  valid_774130 = validateParameter(valid_774130, JInt, required = false, default = nil)
  if valid_774130 != nil:
    section.add "MaxRecords", valid_774130
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_774131 = query.getOrDefault("AutoScalingGroupName")
  valid_774131 = validateParameter(valid_774131, JString, required = true,
                                 default = nil)
  if valid_774131 != nil:
    section.add "AutoScalingGroupName", valid_774131
  var valid_774132 = query.getOrDefault("NextToken")
  valid_774132 = validateParameter(valid_774132, JString, required = false,
                                 default = nil)
  if valid_774132 != nil:
    section.add "NextToken", valid_774132
  var valid_774133 = query.getOrDefault("Action")
  valid_774133 = validateParameter(valid_774133, JString, required = true,
                                 default = newJString("DescribeLoadBalancers"))
  if valid_774133 != nil:
    section.add "Action", valid_774133
  var valid_774134 = query.getOrDefault("Version")
  valid_774134 = validateParameter(valid_774134, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_774134 != nil:
    section.add "Version", valid_774134
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774135 = header.getOrDefault("X-Amz-Date")
  valid_774135 = validateParameter(valid_774135, JString, required = false,
                                 default = nil)
  if valid_774135 != nil:
    section.add "X-Amz-Date", valid_774135
  var valid_774136 = header.getOrDefault("X-Amz-Security-Token")
  valid_774136 = validateParameter(valid_774136, JString, required = false,
                                 default = nil)
  if valid_774136 != nil:
    section.add "X-Amz-Security-Token", valid_774136
  var valid_774137 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774137 = validateParameter(valid_774137, JString, required = false,
                                 default = nil)
  if valid_774137 != nil:
    section.add "X-Amz-Content-Sha256", valid_774137
  var valid_774138 = header.getOrDefault("X-Amz-Algorithm")
  valid_774138 = validateParameter(valid_774138, JString, required = false,
                                 default = nil)
  if valid_774138 != nil:
    section.add "X-Amz-Algorithm", valid_774138
  var valid_774139 = header.getOrDefault("X-Amz-Signature")
  valid_774139 = validateParameter(valid_774139, JString, required = false,
                                 default = nil)
  if valid_774139 != nil:
    section.add "X-Amz-Signature", valid_774139
  var valid_774140 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774140 = validateParameter(valid_774140, JString, required = false,
                                 default = nil)
  if valid_774140 != nil:
    section.add "X-Amz-SignedHeaders", valid_774140
  var valid_774141 = header.getOrDefault("X-Amz-Credential")
  valid_774141 = validateParameter(valid_774141, JString, required = false,
                                 default = nil)
  if valid_774141 != nil:
    section.add "X-Amz-Credential", valid_774141
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774142: Call_GetDescribeLoadBalancers_774127; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the load balancers for the specified Auto Scaling group.</p> <p>This operation describes only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DescribeLoadBalancerTargetGroups</a> instead.</p>
  ## 
  let valid = call_774142.validator(path, query, header, formData, body)
  let scheme = call_774142.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774142.url(scheme.get, call_774142.host, call_774142.base,
                         call_774142.route, valid.getOrDefault("path"))
  result = hook(call_774142, url, valid)

proc call*(call_774143: Call_GetDescribeLoadBalancers_774127;
          AutoScalingGroupName: string; MaxRecords: int = 0; NextToken: string = "";
          Action: string = "DescribeLoadBalancers"; Version: string = "2011-01-01"): Recallable =
  ## getDescribeLoadBalancers
  ## <p>Describes the load balancers for the specified Auto Scaling group.</p> <p>This operation describes only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DescribeLoadBalancerTargetGroups</a> instead.</p>
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774144 = newJObject()
  add(query_774144, "MaxRecords", newJInt(MaxRecords))
  add(query_774144, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_774144, "NextToken", newJString(NextToken))
  add(query_774144, "Action", newJString(Action))
  add(query_774144, "Version", newJString(Version))
  result = call_774143.call(nil, query_774144, nil, nil, nil)

var getDescribeLoadBalancers* = Call_GetDescribeLoadBalancers_774127(
    name: "getDescribeLoadBalancers", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeLoadBalancers",
    validator: validate_GetDescribeLoadBalancers_774128, base: "/",
    url: url_GetDescribeLoadBalancers_774129, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeMetricCollectionTypes_774179 = ref object of OpenApiRestCall_772597
proc url_PostDescribeMetricCollectionTypes_774181(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeMetricCollectionTypes_774180(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.</p> <p>The <code>GroupStandbyInstances</code> metric is not returned by default. You must explicitly request this metric when calling <a>EnableMetricsCollection</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774182 = query.getOrDefault("Action")
  valid_774182 = validateParameter(valid_774182, JString, required = true, default = newJString(
      "DescribeMetricCollectionTypes"))
  if valid_774182 != nil:
    section.add "Action", valid_774182
  var valid_774183 = query.getOrDefault("Version")
  valid_774183 = validateParameter(valid_774183, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_774183 != nil:
    section.add "Version", valid_774183
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774184 = header.getOrDefault("X-Amz-Date")
  valid_774184 = validateParameter(valid_774184, JString, required = false,
                                 default = nil)
  if valid_774184 != nil:
    section.add "X-Amz-Date", valid_774184
  var valid_774185 = header.getOrDefault("X-Amz-Security-Token")
  valid_774185 = validateParameter(valid_774185, JString, required = false,
                                 default = nil)
  if valid_774185 != nil:
    section.add "X-Amz-Security-Token", valid_774185
  var valid_774186 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774186 = validateParameter(valid_774186, JString, required = false,
                                 default = nil)
  if valid_774186 != nil:
    section.add "X-Amz-Content-Sha256", valid_774186
  var valid_774187 = header.getOrDefault("X-Amz-Algorithm")
  valid_774187 = validateParameter(valid_774187, JString, required = false,
                                 default = nil)
  if valid_774187 != nil:
    section.add "X-Amz-Algorithm", valid_774187
  var valid_774188 = header.getOrDefault("X-Amz-Signature")
  valid_774188 = validateParameter(valid_774188, JString, required = false,
                                 default = nil)
  if valid_774188 != nil:
    section.add "X-Amz-Signature", valid_774188
  var valid_774189 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774189 = validateParameter(valid_774189, JString, required = false,
                                 default = nil)
  if valid_774189 != nil:
    section.add "X-Amz-SignedHeaders", valid_774189
  var valid_774190 = header.getOrDefault("X-Amz-Credential")
  valid_774190 = validateParameter(valid_774190, JString, required = false,
                                 default = nil)
  if valid_774190 != nil:
    section.add "X-Amz-Credential", valid_774190
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774191: Call_PostDescribeMetricCollectionTypes_774179;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.</p> <p>The <code>GroupStandbyInstances</code> metric is not returned by default. You must explicitly request this metric when calling <a>EnableMetricsCollection</a>.</p>
  ## 
  let valid = call_774191.validator(path, query, header, formData, body)
  let scheme = call_774191.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774191.url(scheme.get, call_774191.host, call_774191.base,
                         call_774191.route, valid.getOrDefault("path"))
  result = hook(call_774191, url, valid)

proc call*(call_774192: Call_PostDescribeMetricCollectionTypes_774179;
          Action: string = "DescribeMetricCollectionTypes";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeMetricCollectionTypes
  ## <p>Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.</p> <p>The <code>GroupStandbyInstances</code> metric is not returned by default. You must explicitly request this metric when calling <a>EnableMetricsCollection</a>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774193 = newJObject()
  add(query_774193, "Action", newJString(Action))
  add(query_774193, "Version", newJString(Version))
  result = call_774192.call(nil, query_774193, nil, nil, nil)

var postDescribeMetricCollectionTypes* = Call_PostDescribeMetricCollectionTypes_774179(
    name: "postDescribeMetricCollectionTypes", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeMetricCollectionTypes",
    validator: validate_PostDescribeMetricCollectionTypes_774180, base: "/",
    url: url_PostDescribeMetricCollectionTypes_774181,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeMetricCollectionTypes_774164 = ref object of OpenApiRestCall_772597
proc url_GetDescribeMetricCollectionTypes_774166(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeMetricCollectionTypes_774165(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.</p> <p>The <code>GroupStandbyInstances</code> metric is not returned by default. You must explicitly request this metric when calling <a>EnableMetricsCollection</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774167 = query.getOrDefault("Action")
  valid_774167 = validateParameter(valid_774167, JString, required = true, default = newJString(
      "DescribeMetricCollectionTypes"))
  if valid_774167 != nil:
    section.add "Action", valid_774167
  var valid_774168 = query.getOrDefault("Version")
  valid_774168 = validateParameter(valid_774168, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_774168 != nil:
    section.add "Version", valid_774168
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774169 = header.getOrDefault("X-Amz-Date")
  valid_774169 = validateParameter(valid_774169, JString, required = false,
                                 default = nil)
  if valid_774169 != nil:
    section.add "X-Amz-Date", valid_774169
  var valid_774170 = header.getOrDefault("X-Amz-Security-Token")
  valid_774170 = validateParameter(valid_774170, JString, required = false,
                                 default = nil)
  if valid_774170 != nil:
    section.add "X-Amz-Security-Token", valid_774170
  var valid_774171 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774171 = validateParameter(valid_774171, JString, required = false,
                                 default = nil)
  if valid_774171 != nil:
    section.add "X-Amz-Content-Sha256", valid_774171
  var valid_774172 = header.getOrDefault("X-Amz-Algorithm")
  valid_774172 = validateParameter(valid_774172, JString, required = false,
                                 default = nil)
  if valid_774172 != nil:
    section.add "X-Amz-Algorithm", valid_774172
  var valid_774173 = header.getOrDefault("X-Amz-Signature")
  valid_774173 = validateParameter(valid_774173, JString, required = false,
                                 default = nil)
  if valid_774173 != nil:
    section.add "X-Amz-Signature", valid_774173
  var valid_774174 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774174 = validateParameter(valid_774174, JString, required = false,
                                 default = nil)
  if valid_774174 != nil:
    section.add "X-Amz-SignedHeaders", valid_774174
  var valid_774175 = header.getOrDefault("X-Amz-Credential")
  valid_774175 = validateParameter(valid_774175, JString, required = false,
                                 default = nil)
  if valid_774175 != nil:
    section.add "X-Amz-Credential", valid_774175
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774176: Call_GetDescribeMetricCollectionTypes_774164;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.</p> <p>The <code>GroupStandbyInstances</code> metric is not returned by default. You must explicitly request this metric when calling <a>EnableMetricsCollection</a>.</p>
  ## 
  let valid = call_774176.validator(path, query, header, formData, body)
  let scheme = call_774176.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774176.url(scheme.get, call_774176.host, call_774176.base,
                         call_774176.route, valid.getOrDefault("path"))
  result = hook(call_774176, url, valid)

proc call*(call_774177: Call_GetDescribeMetricCollectionTypes_774164;
          Action: string = "DescribeMetricCollectionTypes";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeMetricCollectionTypes
  ## <p>Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.</p> <p>The <code>GroupStandbyInstances</code> metric is not returned by default. You must explicitly request this metric when calling <a>EnableMetricsCollection</a>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774178 = newJObject()
  add(query_774178, "Action", newJString(Action))
  add(query_774178, "Version", newJString(Version))
  result = call_774177.call(nil, query_774178, nil, nil, nil)

var getDescribeMetricCollectionTypes* = Call_GetDescribeMetricCollectionTypes_774164(
    name: "getDescribeMetricCollectionTypes", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeMetricCollectionTypes",
    validator: validate_GetDescribeMetricCollectionTypes_774165, base: "/",
    url: url_GetDescribeMetricCollectionTypes_774166,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeNotificationConfigurations_774212 = ref object of OpenApiRestCall_772597
proc url_PostDescribeNotificationConfigurations_774214(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeNotificationConfigurations_774213(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the notification actions associated with the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774215 = query.getOrDefault("Action")
  valid_774215 = validateParameter(valid_774215, JString, required = true, default = newJString(
      "DescribeNotificationConfigurations"))
  if valid_774215 != nil:
    section.add "Action", valid_774215
  var valid_774216 = query.getOrDefault("Version")
  valid_774216 = validateParameter(valid_774216, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_774216 != nil:
    section.add "Version", valid_774216
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774217 = header.getOrDefault("X-Amz-Date")
  valid_774217 = validateParameter(valid_774217, JString, required = false,
                                 default = nil)
  if valid_774217 != nil:
    section.add "X-Amz-Date", valid_774217
  var valid_774218 = header.getOrDefault("X-Amz-Security-Token")
  valid_774218 = validateParameter(valid_774218, JString, required = false,
                                 default = nil)
  if valid_774218 != nil:
    section.add "X-Amz-Security-Token", valid_774218
  var valid_774219 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774219 = validateParameter(valid_774219, JString, required = false,
                                 default = nil)
  if valid_774219 != nil:
    section.add "X-Amz-Content-Sha256", valid_774219
  var valid_774220 = header.getOrDefault("X-Amz-Algorithm")
  valid_774220 = validateParameter(valid_774220, JString, required = false,
                                 default = nil)
  if valid_774220 != nil:
    section.add "X-Amz-Algorithm", valid_774220
  var valid_774221 = header.getOrDefault("X-Amz-Signature")
  valid_774221 = validateParameter(valid_774221, JString, required = false,
                                 default = nil)
  if valid_774221 != nil:
    section.add "X-Amz-Signature", valid_774221
  var valid_774222 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774222 = validateParameter(valid_774222, JString, required = false,
                                 default = nil)
  if valid_774222 != nil:
    section.add "X-Amz-SignedHeaders", valid_774222
  var valid_774223 = header.getOrDefault("X-Amz-Credential")
  valid_774223 = validateParameter(valid_774223, JString, required = false,
                                 default = nil)
  if valid_774223 != nil:
    section.add "X-Amz-Credential", valid_774223
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupNames: JArray
  ##                        : The name of the Auto Scaling group.
  section = newJObject()
  var valid_774224 = formData.getOrDefault("NextToken")
  valid_774224 = validateParameter(valid_774224, JString, required = false,
                                 default = nil)
  if valid_774224 != nil:
    section.add "NextToken", valid_774224
  var valid_774225 = formData.getOrDefault("MaxRecords")
  valid_774225 = validateParameter(valid_774225, JInt, required = false, default = nil)
  if valid_774225 != nil:
    section.add "MaxRecords", valid_774225
  var valid_774226 = formData.getOrDefault("AutoScalingGroupNames")
  valid_774226 = validateParameter(valid_774226, JArray, required = false,
                                 default = nil)
  if valid_774226 != nil:
    section.add "AutoScalingGroupNames", valid_774226
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774227: Call_PostDescribeNotificationConfigurations_774212;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the notification actions associated with the specified Auto Scaling group.
  ## 
  let valid = call_774227.validator(path, query, header, formData, body)
  let scheme = call_774227.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774227.url(scheme.get, call_774227.host, call_774227.base,
                         call_774227.route, valid.getOrDefault("path"))
  result = hook(call_774227, url, valid)

proc call*(call_774228: Call_PostDescribeNotificationConfigurations_774212;
          NextToken: string = "";
          Action: string = "DescribeNotificationConfigurations";
          MaxRecords: int = 0; Version: string = "2011-01-01";
          AutoScalingGroupNames: JsonNode = nil): Recallable =
  ## postDescribeNotificationConfigurations
  ## Describes the notification actions associated with the specified Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   Version: string (required)
  ##   AutoScalingGroupNames: JArray
  ##                        : The name of the Auto Scaling group.
  var query_774229 = newJObject()
  var formData_774230 = newJObject()
  add(formData_774230, "NextToken", newJString(NextToken))
  add(query_774229, "Action", newJString(Action))
  add(formData_774230, "MaxRecords", newJInt(MaxRecords))
  add(query_774229, "Version", newJString(Version))
  if AutoScalingGroupNames != nil:
    formData_774230.add "AutoScalingGroupNames", AutoScalingGroupNames
  result = call_774228.call(nil, query_774229, nil, formData_774230, nil)

var postDescribeNotificationConfigurations* = Call_PostDescribeNotificationConfigurations_774212(
    name: "postDescribeNotificationConfigurations", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeNotificationConfigurations",
    validator: validate_PostDescribeNotificationConfigurations_774213, base: "/",
    url: url_PostDescribeNotificationConfigurations_774214,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeNotificationConfigurations_774194 = ref object of OpenApiRestCall_772597
proc url_GetDescribeNotificationConfigurations_774196(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeNotificationConfigurations_774195(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the notification actions associated with the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: JString (required)
  ##   AutoScalingGroupNames: JArray
  ##                        : The name of the Auto Scaling group.
  ##   Version: JString (required)
  section = newJObject()
  var valid_774197 = query.getOrDefault("MaxRecords")
  valid_774197 = validateParameter(valid_774197, JInt, required = false, default = nil)
  if valid_774197 != nil:
    section.add "MaxRecords", valid_774197
  var valid_774198 = query.getOrDefault("NextToken")
  valid_774198 = validateParameter(valid_774198, JString, required = false,
                                 default = nil)
  if valid_774198 != nil:
    section.add "NextToken", valid_774198
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774199 = query.getOrDefault("Action")
  valid_774199 = validateParameter(valid_774199, JString, required = true, default = newJString(
      "DescribeNotificationConfigurations"))
  if valid_774199 != nil:
    section.add "Action", valid_774199
  var valid_774200 = query.getOrDefault("AutoScalingGroupNames")
  valid_774200 = validateParameter(valid_774200, JArray, required = false,
                                 default = nil)
  if valid_774200 != nil:
    section.add "AutoScalingGroupNames", valid_774200
  var valid_774201 = query.getOrDefault("Version")
  valid_774201 = validateParameter(valid_774201, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_774201 != nil:
    section.add "Version", valid_774201
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774202 = header.getOrDefault("X-Amz-Date")
  valid_774202 = validateParameter(valid_774202, JString, required = false,
                                 default = nil)
  if valid_774202 != nil:
    section.add "X-Amz-Date", valid_774202
  var valid_774203 = header.getOrDefault("X-Amz-Security-Token")
  valid_774203 = validateParameter(valid_774203, JString, required = false,
                                 default = nil)
  if valid_774203 != nil:
    section.add "X-Amz-Security-Token", valid_774203
  var valid_774204 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774204 = validateParameter(valid_774204, JString, required = false,
                                 default = nil)
  if valid_774204 != nil:
    section.add "X-Amz-Content-Sha256", valid_774204
  var valid_774205 = header.getOrDefault("X-Amz-Algorithm")
  valid_774205 = validateParameter(valid_774205, JString, required = false,
                                 default = nil)
  if valid_774205 != nil:
    section.add "X-Amz-Algorithm", valid_774205
  var valid_774206 = header.getOrDefault("X-Amz-Signature")
  valid_774206 = validateParameter(valid_774206, JString, required = false,
                                 default = nil)
  if valid_774206 != nil:
    section.add "X-Amz-Signature", valid_774206
  var valid_774207 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774207 = validateParameter(valid_774207, JString, required = false,
                                 default = nil)
  if valid_774207 != nil:
    section.add "X-Amz-SignedHeaders", valid_774207
  var valid_774208 = header.getOrDefault("X-Amz-Credential")
  valid_774208 = validateParameter(valid_774208, JString, required = false,
                                 default = nil)
  if valid_774208 != nil:
    section.add "X-Amz-Credential", valid_774208
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774209: Call_GetDescribeNotificationConfigurations_774194;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the notification actions associated with the specified Auto Scaling group.
  ## 
  let valid = call_774209.validator(path, query, header, formData, body)
  let scheme = call_774209.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774209.url(scheme.get, call_774209.host, call_774209.base,
                         call_774209.route, valid.getOrDefault("path"))
  result = hook(call_774209, url, valid)

proc call*(call_774210: Call_GetDescribeNotificationConfigurations_774194;
          MaxRecords: int = 0; NextToken: string = "";
          Action: string = "DescribeNotificationConfigurations";
          AutoScalingGroupNames: JsonNode = nil; Version: string = "2011-01-01"): Recallable =
  ## getDescribeNotificationConfigurations
  ## Describes the notification actions associated with the specified Auto Scaling group.
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   AutoScalingGroupNames: JArray
  ##                        : The name of the Auto Scaling group.
  ##   Version: string (required)
  var query_774211 = newJObject()
  add(query_774211, "MaxRecords", newJInt(MaxRecords))
  add(query_774211, "NextToken", newJString(NextToken))
  add(query_774211, "Action", newJString(Action))
  if AutoScalingGroupNames != nil:
    query_774211.add "AutoScalingGroupNames", AutoScalingGroupNames
  add(query_774211, "Version", newJString(Version))
  result = call_774210.call(nil, query_774211, nil, nil, nil)

var getDescribeNotificationConfigurations* = Call_GetDescribeNotificationConfigurations_774194(
    name: "getDescribeNotificationConfigurations", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeNotificationConfigurations",
    validator: validate_GetDescribeNotificationConfigurations_774195, base: "/",
    url: url_GetDescribeNotificationConfigurations_774196,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribePolicies_774251 = ref object of OpenApiRestCall_772597
proc url_PostDescribePolicies_774253(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribePolicies_774252(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the policies for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774254 = query.getOrDefault("Action")
  valid_774254 = validateParameter(valid_774254, JString, required = true,
                                 default = newJString("DescribePolicies"))
  if valid_774254 != nil:
    section.add "Action", valid_774254
  var valid_774255 = query.getOrDefault("Version")
  valid_774255 = validateParameter(valid_774255, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_774255 != nil:
    section.add "Version", valid_774255
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774256 = header.getOrDefault("X-Amz-Date")
  valid_774256 = validateParameter(valid_774256, JString, required = false,
                                 default = nil)
  if valid_774256 != nil:
    section.add "X-Amz-Date", valid_774256
  var valid_774257 = header.getOrDefault("X-Amz-Security-Token")
  valid_774257 = validateParameter(valid_774257, JString, required = false,
                                 default = nil)
  if valid_774257 != nil:
    section.add "X-Amz-Security-Token", valid_774257
  var valid_774258 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774258 = validateParameter(valid_774258, JString, required = false,
                                 default = nil)
  if valid_774258 != nil:
    section.add "X-Amz-Content-Sha256", valid_774258
  var valid_774259 = header.getOrDefault("X-Amz-Algorithm")
  valid_774259 = validateParameter(valid_774259, JString, required = false,
                                 default = nil)
  if valid_774259 != nil:
    section.add "X-Amz-Algorithm", valid_774259
  var valid_774260 = header.getOrDefault("X-Amz-Signature")
  valid_774260 = validateParameter(valid_774260, JString, required = false,
                                 default = nil)
  if valid_774260 != nil:
    section.add "X-Amz-Signature", valid_774260
  var valid_774261 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774261 = validateParameter(valid_774261, JString, required = false,
                                 default = nil)
  if valid_774261 != nil:
    section.add "X-Amz-SignedHeaders", valid_774261
  var valid_774262 = header.getOrDefault("X-Amz-Credential")
  valid_774262 = validateParameter(valid_774262, JString, required = false,
                                 default = nil)
  if valid_774262 != nil:
    section.add "X-Amz-Credential", valid_774262
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   PolicyNames: JArray
  ##              : The names of one or more policies. If you omit this parameter, all policies are described. If a group name is provided, the results are limited to that group. This list is limited to 50 items. If you specify an unknown policy name, it is ignored with no error.
  ##   PolicyTypes: JArray
  ##              : One or more policy types. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>.
  ##   MaxRecords: JInt
  ##             : The maximum number of items to be returned with each call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  section = newJObject()
  var valid_774263 = formData.getOrDefault("AutoScalingGroupName")
  valid_774263 = validateParameter(valid_774263, JString, required = false,
                                 default = nil)
  if valid_774263 != nil:
    section.add "AutoScalingGroupName", valid_774263
  var valid_774264 = formData.getOrDefault("NextToken")
  valid_774264 = validateParameter(valid_774264, JString, required = false,
                                 default = nil)
  if valid_774264 != nil:
    section.add "NextToken", valid_774264
  var valid_774265 = formData.getOrDefault("PolicyNames")
  valid_774265 = validateParameter(valid_774265, JArray, required = false,
                                 default = nil)
  if valid_774265 != nil:
    section.add "PolicyNames", valid_774265
  var valid_774266 = formData.getOrDefault("PolicyTypes")
  valid_774266 = validateParameter(valid_774266, JArray, required = false,
                                 default = nil)
  if valid_774266 != nil:
    section.add "PolicyTypes", valid_774266
  var valid_774267 = formData.getOrDefault("MaxRecords")
  valid_774267 = validateParameter(valid_774267, JInt, required = false, default = nil)
  if valid_774267 != nil:
    section.add "MaxRecords", valid_774267
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774268: Call_PostDescribePolicies_774251; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the policies for the specified Auto Scaling group.
  ## 
  let valid = call_774268.validator(path, query, header, formData, body)
  let scheme = call_774268.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774268.url(scheme.get, call_774268.host, call_774268.base,
                         call_774268.route, valid.getOrDefault("path"))
  result = hook(call_774268, url, valid)

proc call*(call_774269: Call_PostDescribePolicies_774251;
          AutoScalingGroupName: string = ""; NextToken: string = "";
          PolicyNames: JsonNode = nil; Action: string = "DescribePolicies";
          PolicyTypes: JsonNode = nil; MaxRecords: int = 0;
          Version: string = "2011-01-01"): Recallable =
  ## postDescribePolicies
  ## Describes the policies for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   PolicyNames: JArray
  ##              : The names of one or more policies. If you omit this parameter, all policies are described. If a group name is provided, the results are limited to that group. This list is limited to 50 items. If you specify an unknown policy name, it is ignored with no error.
  ##   Action: string (required)
  ##   PolicyTypes: JArray
  ##              : One or more policy types. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>.
  ##   MaxRecords: int
  ##             : The maximum number of items to be returned with each call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   Version: string (required)
  var query_774270 = newJObject()
  var formData_774271 = newJObject()
  add(formData_774271, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_774271, "NextToken", newJString(NextToken))
  if PolicyNames != nil:
    formData_774271.add "PolicyNames", PolicyNames
  add(query_774270, "Action", newJString(Action))
  if PolicyTypes != nil:
    formData_774271.add "PolicyTypes", PolicyTypes
  add(formData_774271, "MaxRecords", newJInt(MaxRecords))
  add(query_774270, "Version", newJString(Version))
  result = call_774269.call(nil, query_774270, nil, formData_774271, nil)

var postDescribePolicies* = Call_PostDescribePolicies_774251(
    name: "postDescribePolicies", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribePolicies",
    validator: validate_PostDescribePolicies_774252, base: "/",
    url: url_PostDescribePolicies_774253, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribePolicies_774231 = ref object of OpenApiRestCall_772597
proc url_GetDescribePolicies_774233(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribePolicies_774232(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Describes the policies for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of items to be returned with each call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: JString (required)
  ##   PolicyNames: JArray
  ##              : The names of one or more policies. If you omit this parameter, all policies are described. If a group name is provided, the results are limited to that group. This list is limited to 50 items. If you specify an unknown policy name, it is ignored with no error.
  ##   Version: JString (required)
  ##   PolicyTypes: JArray
  ##              : One or more policy types. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>.
  section = newJObject()
  var valid_774234 = query.getOrDefault("MaxRecords")
  valid_774234 = validateParameter(valid_774234, JInt, required = false, default = nil)
  if valid_774234 != nil:
    section.add "MaxRecords", valid_774234
  var valid_774235 = query.getOrDefault("AutoScalingGroupName")
  valid_774235 = validateParameter(valid_774235, JString, required = false,
                                 default = nil)
  if valid_774235 != nil:
    section.add "AutoScalingGroupName", valid_774235
  var valid_774236 = query.getOrDefault("NextToken")
  valid_774236 = validateParameter(valid_774236, JString, required = false,
                                 default = nil)
  if valid_774236 != nil:
    section.add "NextToken", valid_774236
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774237 = query.getOrDefault("Action")
  valid_774237 = validateParameter(valid_774237, JString, required = true,
                                 default = newJString("DescribePolicies"))
  if valid_774237 != nil:
    section.add "Action", valid_774237
  var valid_774238 = query.getOrDefault("PolicyNames")
  valid_774238 = validateParameter(valid_774238, JArray, required = false,
                                 default = nil)
  if valid_774238 != nil:
    section.add "PolicyNames", valid_774238
  var valid_774239 = query.getOrDefault("Version")
  valid_774239 = validateParameter(valid_774239, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_774239 != nil:
    section.add "Version", valid_774239
  var valid_774240 = query.getOrDefault("PolicyTypes")
  valid_774240 = validateParameter(valid_774240, JArray, required = false,
                                 default = nil)
  if valid_774240 != nil:
    section.add "PolicyTypes", valid_774240
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774241 = header.getOrDefault("X-Amz-Date")
  valid_774241 = validateParameter(valid_774241, JString, required = false,
                                 default = nil)
  if valid_774241 != nil:
    section.add "X-Amz-Date", valid_774241
  var valid_774242 = header.getOrDefault("X-Amz-Security-Token")
  valid_774242 = validateParameter(valid_774242, JString, required = false,
                                 default = nil)
  if valid_774242 != nil:
    section.add "X-Amz-Security-Token", valid_774242
  var valid_774243 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774243 = validateParameter(valid_774243, JString, required = false,
                                 default = nil)
  if valid_774243 != nil:
    section.add "X-Amz-Content-Sha256", valid_774243
  var valid_774244 = header.getOrDefault("X-Amz-Algorithm")
  valid_774244 = validateParameter(valid_774244, JString, required = false,
                                 default = nil)
  if valid_774244 != nil:
    section.add "X-Amz-Algorithm", valid_774244
  var valid_774245 = header.getOrDefault("X-Amz-Signature")
  valid_774245 = validateParameter(valid_774245, JString, required = false,
                                 default = nil)
  if valid_774245 != nil:
    section.add "X-Amz-Signature", valid_774245
  var valid_774246 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774246 = validateParameter(valid_774246, JString, required = false,
                                 default = nil)
  if valid_774246 != nil:
    section.add "X-Amz-SignedHeaders", valid_774246
  var valid_774247 = header.getOrDefault("X-Amz-Credential")
  valid_774247 = validateParameter(valid_774247, JString, required = false,
                                 default = nil)
  if valid_774247 != nil:
    section.add "X-Amz-Credential", valid_774247
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774248: Call_GetDescribePolicies_774231; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the policies for the specified Auto Scaling group.
  ## 
  let valid = call_774248.validator(path, query, header, formData, body)
  let scheme = call_774248.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774248.url(scheme.get, call_774248.host, call_774248.base,
                         call_774248.route, valid.getOrDefault("path"))
  result = hook(call_774248, url, valid)

proc call*(call_774249: Call_GetDescribePolicies_774231; MaxRecords: int = 0;
          AutoScalingGroupName: string = ""; NextToken: string = "";
          Action: string = "DescribePolicies"; PolicyNames: JsonNode = nil;
          Version: string = "2011-01-01"; PolicyTypes: JsonNode = nil): Recallable =
  ## getDescribePolicies
  ## Describes the policies for the specified Auto Scaling group.
  ##   MaxRecords: int
  ##             : The maximum number of items to be returned with each call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   PolicyNames: JArray
  ##              : The names of one or more policies. If you omit this parameter, all policies are described. If a group name is provided, the results are limited to that group. This list is limited to 50 items. If you specify an unknown policy name, it is ignored with no error.
  ##   Version: string (required)
  ##   PolicyTypes: JArray
  ##              : One or more policy types. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>.
  var query_774250 = newJObject()
  add(query_774250, "MaxRecords", newJInt(MaxRecords))
  add(query_774250, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_774250, "NextToken", newJString(NextToken))
  add(query_774250, "Action", newJString(Action))
  if PolicyNames != nil:
    query_774250.add "PolicyNames", PolicyNames
  add(query_774250, "Version", newJString(Version))
  if PolicyTypes != nil:
    query_774250.add "PolicyTypes", PolicyTypes
  result = call_774249.call(nil, query_774250, nil, nil, nil)

var getDescribePolicies* = Call_GetDescribePolicies_774231(
    name: "getDescribePolicies", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribePolicies",
    validator: validate_GetDescribePolicies_774232, base: "/",
    url: url_GetDescribePolicies_774233, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeScalingActivities_774291 = ref object of OpenApiRestCall_772597
proc url_PostDescribeScalingActivities_774293(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeScalingActivities_774292(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more scaling activities for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774294 = query.getOrDefault("Action")
  valid_774294 = validateParameter(valid_774294, JString, required = true, default = newJString(
      "DescribeScalingActivities"))
  if valid_774294 != nil:
    section.add "Action", valid_774294
  var valid_774295 = query.getOrDefault("Version")
  valid_774295 = validateParameter(valid_774295, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_774295 != nil:
    section.add "Version", valid_774295
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774296 = header.getOrDefault("X-Amz-Date")
  valid_774296 = validateParameter(valid_774296, JString, required = false,
                                 default = nil)
  if valid_774296 != nil:
    section.add "X-Amz-Date", valid_774296
  var valid_774297 = header.getOrDefault("X-Amz-Security-Token")
  valid_774297 = validateParameter(valid_774297, JString, required = false,
                                 default = nil)
  if valid_774297 != nil:
    section.add "X-Amz-Security-Token", valid_774297
  var valid_774298 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774298 = validateParameter(valid_774298, JString, required = false,
                                 default = nil)
  if valid_774298 != nil:
    section.add "X-Amz-Content-Sha256", valid_774298
  var valid_774299 = header.getOrDefault("X-Amz-Algorithm")
  valid_774299 = validateParameter(valid_774299, JString, required = false,
                                 default = nil)
  if valid_774299 != nil:
    section.add "X-Amz-Algorithm", valid_774299
  var valid_774300 = header.getOrDefault("X-Amz-Signature")
  valid_774300 = validateParameter(valid_774300, JString, required = false,
                                 default = nil)
  if valid_774300 != nil:
    section.add "X-Amz-Signature", valid_774300
  var valid_774301 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774301 = validateParameter(valid_774301, JString, required = false,
                                 default = nil)
  if valid_774301 != nil:
    section.add "X-Amz-SignedHeaders", valid_774301
  var valid_774302 = header.getOrDefault("X-Amz-Credential")
  valid_774302 = validateParameter(valid_774302, JString, required = false,
                                 default = nil)
  if valid_774302 != nil:
    section.add "X-Amz-Credential", valid_774302
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   ActivityIds: JArray
  ##              : The activity IDs of the desired scaling activities. You can specify up to 50 IDs. If you omit this parameter, all activities for the past six weeks are described. If unknown activities are requested, they are ignored with no error. If you specify an Auto Scaling group, the results are limited to that group.
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  section = newJObject()
  var valid_774303 = formData.getOrDefault("AutoScalingGroupName")
  valid_774303 = validateParameter(valid_774303, JString, required = false,
                                 default = nil)
  if valid_774303 != nil:
    section.add "AutoScalingGroupName", valid_774303
  var valid_774304 = formData.getOrDefault("NextToken")
  valid_774304 = validateParameter(valid_774304, JString, required = false,
                                 default = nil)
  if valid_774304 != nil:
    section.add "NextToken", valid_774304
  var valid_774305 = formData.getOrDefault("ActivityIds")
  valid_774305 = validateParameter(valid_774305, JArray, required = false,
                                 default = nil)
  if valid_774305 != nil:
    section.add "ActivityIds", valid_774305
  var valid_774306 = formData.getOrDefault("MaxRecords")
  valid_774306 = validateParameter(valid_774306, JInt, required = false, default = nil)
  if valid_774306 != nil:
    section.add "MaxRecords", valid_774306
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774307: Call_PostDescribeScalingActivities_774291; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes one or more scaling activities for the specified Auto Scaling group.
  ## 
  let valid = call_774307.validator(path, query, header, formData, body)
  let scheme = call_774307.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774307.url(scheme.get, call_774307.host, call_774307.base,
                         call_774307.route, valid.getOrDefault("path"))
  result = hook(call_774307, url, valid)

proc call*(call_774308: Call_PostDescribeScalingActivities_774291;
          AutoScalingGroupName: string = ""; NextToken: string = "";
          ActivityIds: JsonNode = nil; Action: string = "DescribeScalingActivities";
          MaxRecords: int = 0; Version: string = "2011-01-01"): Recallable =
  ## postDescribeScalingActivities
  ## Describes one or more scaling activities for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   ActivityIds: JArray
  ##              : The activity IDs of the desired scaling activities. You can specify up to 50 IDs. If you omit this parameter, all activities for the past six weeks are described. If unknown activities are requested, they are ignored with no error. If you specify an Auto Scaling group, the results are limited to that group.
  ##   Action: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   Version: string (required)
  var query_774309 = newJObject()
  var formData_774310 = newJObject()
  add(formData_774310, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_774310, "NextToken", newJString(NextToken))
  if ActivityIds != nil:
    formData_774310.add "ActivityIds", ActivityIds
  add(query_774309, "Action", newJString(Action))
  add(formData_774310, "MaxRecords", newJInt(MaxRecords))
  add(query_774309, "Version", newJString(Version))
  result = call_774308.call(nil, query_774309, nil, formData_774310, nil)

var postDescribeScalingActivities* = Call_PostDescribeScalingActivities_774291(
    name: "postDescribeScalingActivities", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeScalingActivities",
    validator: validate_PostDescribeScalingActivities_774292, base: "/",
    url: url_PostDescribeScalingActivities_774293,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeScalingActivities_774272 = ref object of OpenApiRestCall_772597
proc url_GetDescribeScalingActivities_774274(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeScalingActivities_774273(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more scaling activities for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: JString (required)
  ##   ActivityIds: JArray
  ##              : The activity IDs of the desired scaling activities. You can specify up to 50 IDs. If you omit this parameter, all activities for the past six weeks are described. If unknown activities are requested, they are ignored with no error. If you specify an Auto Scaling group, the results are limited to that group.
  ##   Version: JString (required)
  section = newJObject()
  var valid_774275 = query.getOrDefault("MaxRecords")
  valid_774275 = validateParameter(valid_774275, JInt, required = false, default = nil)
  if valid_774275 != nil:
    section.add "MaxRecords", valid_774275
  var valid_774276 = query.getOrDefault("AutoScalingGroupName")
  valid_774276 = validateParameter(valid_774276, JString, required = false,
                                 default = nil)
  if valid_774276 != nil:
    section.add "AutoScalingGroupName", valid_774276
  var valid_774277 = query.getOrDefault("NextToken")
  valid_774277 = validateParameter(valid_774277, JString, required = false,
                                 default = nil)
  if valid_774277 != nil:
    section.add "NextToken", valid_774277
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774278 = query.getOrDefault("Action")
  valid_774278 = validateParameter(valid_774278, JString, required = true, default = newJString(
      "DescribeScalingActivities"))
  if valid_774278 != nil:
    section.add "Action", valid_774278
  var valid_774279 = query.getOrDefault("ActivityIds")
  valid_774279 = validateParameter(valid_774279, JArray, required = false,
                                 default = nil)
  if valid_774279 != nil:
    section.add "ActivityIds", valid_774279
  var valid_774280 = query.getOrDefault("Version")
  valid_774280 = validateParameter(valid_774280, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_774280 != nil:
    section.add "Version", valid_774280
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774281 = header.getOrDefault("X-Amz-Date")
  valid_774281 = validateParameter(valid_774281, JString, required = false,
                                 default = nil)
  if valid_774281 != nil:
    section.add "X-Amz-Date", valid_774281
  var valid_774282 = header.getOrDefault("X-Amz-Security-Token")
  valid_774282 = validateParameter(valid_774282, JString, required = false,
                                 default = nil)
  if valid_774282 != nil:
    section.add "X-Amz-Security-Token", valid_774282
  var valid_774283 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774283 = validateParameter(valid_774283, JString, required = false,
                                 default = nil)
  if valid_774283 != nil:
    section.add "X-Amz-Content-Sha256", valid_774283
  var valid_774284 = header.getOrDefault("X-Amz-Algorithm")
  valid_774284 = validateParameter(valid_774284, JString, required = false,
                                 default = nil)
  if valid_774284 != nil:
    section.add "X-Amz-Algorithm", valid_774284
  var valid_774285 = header.getOrDefault("X-Amz-Signature")
  valid_774285 = validateParameter(valid_774285, JString, required = false,
                                 default = nil)
  if valid_774285 != nil:
    section.add "X-Amz-Signature", valid_774285
  var valid_774286 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774286 = validateParameter(valid_774286, JString, required = false,
                                 default = nil)
  if valid_774286 != nil:
    section.add "X-Amz-SignedHeaders", valid_774286
  var valid_774287 = header.getOrDefault("X-Amz-Credential")
  valid_774287 = validateParameter(valid_774287, JString, required = false,
                                 default = nil)
  if valid_774287 != nil:
    section.add "X-Amz-Credential", valid_774287
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774288: Call_GetDescribeScalingActivities_774272; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes one or more scaling activities for the specified Auto Scaling group.
  ## 
  let valid = call_774288.validator(path, query, header, formData, body)
  let scheme = call_774288.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774288.url(scheme.get, call_774288.host, call_774288.base,
                         call_774288.route, valid.getOrDefault("path"))
  result = hook(call_774288, url, valid)

proc call*(call_774289: Call_GetDescribeScalingActivities_774272;
          MaxRecords: int = 0; AutoScalingGroupName: string = "";
          NextToken: string = ""; Action: string = "DescribeScalingActivities";
          ActivityIds: JsonNode = nil; Version: string = "2011-01-01"): Recallable =
  ## getDescribeScalingActivities
  ## Describes one or more scaling activities for the specified Auto Scaling group.
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   ActivityIds: JArray
  ##              : The activity IDs of the desired scaling activities. You can specify up to 50 IDs. If you omit this parameter, all activities for the past six weeks are described. If unknown activities are requested, they are ignored with no error. If you specify an Auto Scaling group, the results are limited to that group.
  ##   Version: string (required)
  var query_774290 = newJObject()
  add(query_774290, "MaxRecords", newJInt(MaxRecords))
  add(query_774290, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_774290, "NextToken", newJString(NextToken))
  add(query_774290, "Action", newJString(Action))
  if ActivityIds != nil:
    query_774290.add "ActivityIds", ActivityIds
  add(query_774290, "Version", newJString(Version))
  result = call_774289.call(nil, query_774290, nil, nil, nil)

var getDescribeScalingActivities* = Call_GetDescribeScalingActivities_774272(
    name: "getDescribeScalingActivities", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeScalingActivities",
    validator: validate_GetDescribeScalingActivities_774273, base: "/",
    url: url_GetDescribeScalingActivities_774274,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeScalingProcessTypes_774326 = ref object of OpenApiRestCall_772597
proc url_PostDescribeScalingProcessTypes_774328(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeScalingProcessTypes_774327(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the scaling process types for use with <a>ResumeProcesses</a> and <a>SuspendProcesses</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774329 = query.getOrDefault("Action")
  valid_774329 = validateParameter(valid_774329, JString, required = true, default = newJString(
      "DescribeScalingProcessTypes"))
  if valid_774329 != nil:
    section.add "Action", valid_774329
  var valid_774330 = query.getOrDefault("Version")
  valid_774330 = validateParameter(valid_774330, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_774330 != nil:
    section.add "Version", valid_774330
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774331 = header.getOrDefault("X-Amz-Date")
  valid_774331 = validateParameter(valid_774331, JString, required = false,
                                 default = nil)
  if valid_774331 != nil:
    section.add "X-Amz-Date", valid_774331
  var valid_774332 = header.getOrDefault("X-Amz-Security-Token")
  valid_774332 = validateParameter(valid_774332, JString, required = false,
                                 default = nil)
  if valid_774332 != nil:
    section.add "X-Amz-Security-Token", valid_774332
  var valid_774333 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774333 = validateParameter(valid_774333, JString, required = false,
                                 default = nil)
  if valid_774333 != nil:
    section.add "X-Amz-Content-Sha256", valid_774333
  var valid_774334 = header.getOrDefault("X-Amz-Algorithm")
  valid_774334 = validateParameter(valid_774334, JString, required = false,
                                 default = nil)
  if valid_774334 != nil:
    section.add "X-Amz-Algorithm", valid_774334
  var valid_774335 = header.getOrDefault("X-Amz-Signature")
  valid_774335 = validateParameter(valid_774335, JString, required = false,
                                 default = nil)
  if valid_774335 != nil:
    section.add "X-Amz-Signature", valid_774335
  var valid_774336 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774336 = validateParameter(valid_774336, JString, required = false,
                                 default = nil)
  if valid_774336 != nil:
    section.add "X-Amz-SignedHeaders", valid_774336
  var valid_774337 = header.getOrDefault("X-Amz-Credential")
  valid_774337 = validateParameter(valid_774337, JString, required = false,
                                 default = nil)
  if valid_774337 != nil:
    section.add "X-Amz-Credential", valid_774337
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774338: Call_PostDescribeScalingProcessTypes_774326;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the scaling process types for use with <a>ResumeProcesses</a> and <a>SuspendProcesses</a>.
  ## 
  let valid = call_774338.validator(path, query, header, formData, body)
  let scheme = call_774338.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774338.url(scheme.get, call_774338.host, call_774338.base,
                         call_774338.route, valid.getOrDefault("path"))
  result = hook(call_774338, url, valid)

proc call*(call_774339: Call_PostDescribeScalingProcessTypes_774326;
          Action: string = "DescribeScalingProcessTypes";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeScalingProcessTypes
  ## Describes the scaling process types for use with <a>ResumeProcesses</a> and <a>SuspendProcesses</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774340 = newJObject()
  add(query_774340, "Action", newJString(Action))
  add(query_774340, "Version", newJString(Version))
  result = call_774339.call(nil, query_774340, nil, nil, nil)

var postDescribeScalingProcessTypes* = Call_PostDescribeScalingProcessTypes_774326(
    name: "postDescribeScalingProcessTypes", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeScalingProcessTypes",
    validator: validate_PostDescribeScalingProcessTypes_774327, base: "/",
    url: url_PostDescribeScalingProcessTypes_774328,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeScalingProcessTypes_774311 = ref object of OpenApiRestCall_772597
proc url_GetDescribeScalingProcessTypes_774313(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeScalingProcessTypes_774312(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the scaling process types for use with <a>ResumeProcesses</a> and <a>SuspendProcesses</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774314 = query.getOrDefault("Action")
  valid_774314 = validateParameter(valid_774314, JString, required = true, default = newJString(
      "DescribeScalingProcessTypes"))
  if valid_774314 != nil:
    section.add "Action", valid_774314
  var valid_774315 = query.getOrDefault("Version")
  valid_774315 = validateParameter(valid_774315, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_774315 != nil:
    section.add "Version", valid_774315
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774316 = header.getOrDefault("X-Amz-Date")
  valid_774316 = validateParameter(valid_774316, JString, required = false,
                                 default = nil)
  if valid_774316 != nil:
    section.add "X-Amz-Date", valid_774316
  var valid_774317 = header.getOrDefault("X-Amz-Security-Token")
  valid_774317 = validateParameter(valid_774317, JString, required = false,
                                 default = nil)
  if valid_774317 != nil:
    section.add "X-Amz-Security-Token", valid_774317
  var valid_774318 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774318 = validateParameter(valid_774318, JString, required = false,
                                 default = nil)
  if valid_774318 != nil:
    section.add "X-Amz-Content-Sha256", valid_774318
  var valid_774319 = header.getOrDefault("X-Amz-Algorithm")
  valid_774319 = validateParameter(valid_774319, JString, required = false,
                                 default = nil)
  if valid_774319 != nil:
    section.add "X-Amz-Algorithm", valid_774319
  var valid_774320 = header.getOrDefault("X-Amz-Signature")
  valid_774320 = validateParameter(valid_774320, JString, required = false,
                                 default = nil)
  if valid_774320 != nil:
    section.add "X-Amz-Signature", valid_774320
  var valid_774321 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774321 = validateParameter(valid_774321, JString, required = false,
                                 default = nil)
  if valid_774321 != nil:
    section.add "X-Amz-SignedHeaders", valid_774321
  var valid_774322 = header.getOrDefault("X-Amz-Credential")
  valid_774322 = validateParameter(valid_774322, JString, required = false,
                                 default = nil)
  if valid_774322 != nil:
    section.add "X-Amz-Credential", valid_774322
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774323: Call_GetDescribeScalingProcessTypes_774311; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the scaling process types for use with <a>ResumeProcesses</a> and <a>SuspendProcesses</a>.
  ## 
  let valid = call_774323.validator(path, query, header, formData, body)
  let scheme = call_774323.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774323.url(scheme.get, call_774323.host, call_774323.base,
                         call_774323.route, valid.getOrDefault("path"))
  result = hook(call_774323, url, valid)

proc call*(call_774324: Call_GetDescribeScalingProcessTypes_774311;
          Action: string = "DescribeScalingProcessTypes";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeScalingProcessTypes
  ## Describes the scaling process types for use with <a>ResumeProcesses</a> and <a>SuspendProcesses</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774325 = newJObject()
  add(query_774325, "Action", newJString(Action))
  add(query_774325, "Version", newJString(Version))
  result = call_774324.call(nil, query_774325, nil, nil, nil)

var getDescribeScalingProcessTypes* = Call_GetDescribeScalingProcessTypes_774311(
    name: "getDescribeScalingProcessTypes", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeScalingProcessTypes",
    validator: validate_GetDescribeScalingProcessTypes_774312, base: "/",
    url: url_GetDescribeScalingProcessTypes_774313,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeScheduledActions_774362 = ref object of OpenApiRestCall_772597
proc url_PostDescribeScheduledActions_774364(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeScheduledActions_774363(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the actions scheduled for your Auto Scaling group that haven't run or that have not reached their end time. To describe the actions that have already run, use <a>DescribeScalingActivities</a>. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774365 = query.getOrDefault("Action")
  valid_774365 = validateParameter(valid_774365, JString, required = true, default = newJString(
      "DescribeScheduledActions"))
  if valid_774365 != nil:
    section.add "Action", valid_774365
  var valid_774366 = query.getOrDefault("Version")
  valid_774366 = validateParameter(valid_774366, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_774366 != nil:
    section.add "Version", valid_774366
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774367 = header.getOrDefault("X-Amz-Date")
  valid_774367 = validateParameter(valid_774367, JString, required = false,
                                 default = nil)
  if valid_774367 != nil:
    section.add "X-Amz-Date", valid_774367
  var valid_774368 = header.getOrDefault("X-Amz-Security-Token")
  valid_774368 = validateParameter(valid_774368, JString, required = false,
                                 default = nil)
  if valid_774368 != nil:
    section.add "X-Amz-Security-Token", valid_774368
  var valid_774369 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774369 = validateParameter(valid_774369, JString, required = false,
                                 default = nil)
  if valid_774369 != nil:
    section.add "X-Amz-Content-Sha256", valid_774369
  var valid_774370 = header.getOrDefault("X-Amz-Algorithm")
  valid_774370 = validateParameter(valid_774370, JString, required = false,
                                 default = nil)
  if valid_774370 != nil:
    section.add "X-Amz-Algorithm", valid_774370
  var valid_774371 = header.getOrDefault("X-Amz-Signature")
  valid_774371 = validateParameter(valid_774371, JString, required = false,
                                 default = nil)
  if valid_774371 != nil:
    section.add "X-Amz-Signature", valid_774371
  var valid_774372 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774372 = validateParameter(valid_774372, JString, required = false,
                                 default = nil)
  if valid_774372 != nil:
    section.add "X-Amz-SignedHeaders", valid_774372
  var valid_774373 = header.getOrDefault("X-Amz-Credential")
  valid_774373 = validateParameter(valid_774373, JString, required = false,
                                 default = nil)
  if valid_774373 != nil:
    section.add "X-Amz-Credential", valid_774373
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   StartTime: JString
  ##            : The earliest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   EndTime: JString
  ##          : The latest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   ScheduledActionNames: JArray
  ##                       : The names of one or more scheduled actions. You can specify up to 50 actions. If you omit this parameter, all scheduled actions are described. If you specify an unknown scheduled action, it is ignored with no error.
  section = newJObject()
  var valid_774374 = formData.getOrDefault("AutoScalingGroupName")
  valid_774374 = validateParameter(valid_774374, JString, required = false,
                                 default = nil)
  if valid_774374 != nil:
    section.add "AutoScalingGroupName", valid_774374
  var valid_774375 = formData.getOrDefault("NextToken")
  valid_774375 = validateParameter(valid_774375, JString, required = false,
                                 default = nil)
  if valid_774375 != nil:
    section.add "NextToken", valid_774375
  var valid_774376 = formData.getOrDefault("StartTime")
  valid_774376 = validateParameter(valid_774376, JString, required = false,
                                 default = nil)
  if valid_774376 != nil:
    section.add "StartTime", valid_774376
  var valid_774377 = formData.getOrDefault("EndTime")
  valid_774377 = validateParameter(valid_774377, JString, required = false,
                                 default = nil)
  if valid_774377 != nil:
    section.add "EndTime", valid_774377
  var valid_774378 = formData.getOrDefault("MaxRecords")
  valid_774378 = validateParameter(valid_774378, JInt, required = false, default = nil)
  if valid_774378 != nil:
    section.add "MaxRecords", valid_774378
  var valid_774379 = formData.getOrDefault("ScheduledActionNames")
  valid_774379 = validateParameter(valid_774379, JArray, required = false,
                                 default = nil)
  if valid_774379 != nil:
    section.add "ScheduledActionNames", valid_774379
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774380: Call_PostDescribeScheduledActions_774362; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the actions scheduled for your Auto Scaling group that haven't run or that have not reached their end time. To describe the actions that have already run, use <a>DescribeScalingActivities</a>. 
  ## 
  let valid = call_774380.validator(path, query, header, formData, body)
  let scheme = call_774380.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774380.url(scheme.get, call_774380.host, call_774380.base,
                         call_774380.route, valid.getOrDefault("path"))
  result = hook(call_774380, url, valid)

proc call*(call_774381: Call_PostDescribeScheduledActions_774362;
          AutoScalingGroupName: string = ""; NextToken: string = "";
          StartTime: string = ""; Action: string = "DescribeScheduledActions";
          EndTime: string = ""; MaxRecords: int = 0; Version: string = "2011-01-01";
          ScheduledActionNames: JsonNode = nil): Recallable =
  ## postDescribeScheduledActions
  ## Describes the actions scheduled for your Auto Scaling group that haven't run or that have not reached their end time. To describe the actions that have already run, use <a>DescribeScalingActivities</a>. 
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   StartTime: string
  ##            : The earliest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   Action: string (required)
  ##   EndTime: string
  ##          : The latest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   Version: string (required)
  ##   ScheduledActionNames: JArray
  ##                       : The names of one or more scheduled actions. You can specify up to 50 actions. If you omit this parameter, all scheduled actions are described. If you specify an unknown scheduled action, it is ignored with no error.
  var query_774382 = newJObject()
  var formData_774383 = newJObject()
  add(formData_774383, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_774383, "NextToken", newJString(NextToken))
  add(formData_774383, "StartTime", newJString(StartTime))
  add(query_774382, "Action", newJString(Action))
  add(formData_774383, "EndTime", newJString(EndTime))
  add(formData_774383, "MaxRecords", newJInt(MaxRecords))
  add(query_774382, "Version", newJString(Version))
  if ScheduledActionNames != nil:
    formData_774383.add "ScheduledActionNames", ScheduledActionNames
  result = call_774381.call(nil, query_774382, nil, formData_774383, nil)

var postDescribeScheduledActions* = Call_PostDescribeScheduledActions_774362(
    name: "postDescribeScheduledActions", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeScheduledActions",
    validator: validate_PostDescribeScheduledActions_774363, base: "/",
    url: url_PostDescribeScheduledActions_774364,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeScheduledActions_774341 = ref object of OpenApiRestCall_772597
proc url_GetDescribeScheduledActions_774343(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeScheduledActions_774342(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the actions scheduled for your Auto Scaling group that haven't run or that have not reached their end time. To describe the actions that have already run, use <a>DescribeScalingActivities</a>. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   StartTime: JString
  ##            : The earliest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: JString (required)
  ##   ScheduledActionNames: JArray
  ##                       : The names of one or more scheduled actions. You can specify up to 50 actions. If you omit this parameter, all scheduled actions are described. If you specify an unknown scheduled action, it is ignored with no error.
  ##   EndTime: JString
  ##          : The latest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   Version: JString (required)
  section = newJObject()
  var valid_774344 = query.getOrDefault("MaxRecords")
  valid_774344 = validateParameter(valid_774344, JInt, required = false, default = nil)
  if valid_774344 != nil:
    section.add "MaxRecords", valid_774344
  var valid_774345 = query.getOrDefault("AutoScalingGroupName")
  valid_774345 = validateParameter(valid_774345, JString, required = false,
                                 default = nil)
  if valid_774345 != nil:
    section.add "AutoScalingGroupName", valid_774345
  var valid_774346 = query.getOrDefault("StartTime")
  valid_774346 = validateParameter(valid_774346, JString, required = false,
                                 default = nil)
  if valid_774346 != nil:
    section.add "StartTime", valid_774346
  var valid_774347 = query.getOrDefault("NextToken")
  valid_774347 = validateParameter(valid_774347, JString, required = false,
                                 default = nil)
  if valid_774347 != nil:
    section.add "NextToken", valid_774347
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774348 = query.getOrDefault("Action")
  valid_774348 = validateParameter(valid_774348, JString, required = true, default = newJString(
      "DescribeScheduledActions"))
  if valid_774348 != nil:
    section.add "Action", valid_774348
  var valid_774349 = query.getOrDefault("ScheduledActionNames")
  valid_774349 = validateParameter(valid_774349, JArray, required = false,
                                 default = nil)
  if valid_774349 != nil:
    section.add "ScheduledActionNames", valid_774349
  var valid_774350 = query.getOrDefault("EndTime")
  valid_774350 = validateParameter(valid_774350, JString, required = false,
                                 default = nil)
  if valid_774350 != nil:
    section.add "EndTime", valid_774350
  var valid_774351 = query.getOrDefault("Version")
  valid_774351 = validateParameter(valid_774351, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_774351 != nil:
    section.add "Version", valid_774351
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774352 = header.getOrDefault("X-Amz-Date")
  valid_774352 = validateParameter(valid_774352, JString, required = false,
                                 default = nil)
  if valid_774352 != nil:
    section.add "X-Amz-Date", valid_774352
  var valid_774353 = header.getOrDefault("X-Amz-Security-Token")
  valid_774353 = validateParameter(valid_774353, JString, required = false,
                                 default = nil)
  if valid_774353 != nil:
    section.add "X-Amz-Security-Token", valid_774353
  var valid_774354 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774354 = validateParameter(valid_774354, JString, required = false,
                                 default = nil)
  if valid_774354 != nil:
    section.add "X-Amz-Content-Sha256", valid_774354
  var valid_774355 = header.getOrDefault("X-Amz-Algorithm")
  valid_774355 = validateParameter(valid_774355, JString, required = false,
                                 default = nil)
  if valid_774355 != nil:
    section.add "X-Amz-Algorithm", valid_774355
  var valid_774356 = header.getOrDefault("X-Amz-Signature")
  valid_774356 = validateParameter(valid_774356, JString, required = false,
                                 default = nil)
  if valid_774356 != nil:
    section.add "X-Amz-Signature", valid_774356
  var valid_774357 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774357 = validateParameter(valid_774357, JString, required = false,
                                 default = nil)
  if valid_774357 != nil:
    section.add "X-Amz-SignedHeaders", valid_774357
  var valid_774358 = header.getOrDefault("X-Amz-Credential")
  valid_774358 = validateParameter(valid_774358, JString, required = false,
                                 default = nil)
  if valid_774358 != nil:
    section.add "X-Amz-Credential", valid_774358
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774359: Call_GetDescribeScheduledActions_774341; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the actions scheduled for your Auto Scaling group that haven't run or that have not reached their end time. To describe the actions that have already run, use <a>DescribeScalingActivities</a>. 
  ## 
  let valid = call_774359.validator(path, query, header, formData, body)
  let scheme = call_774359.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774359.url(scheme.get, call_774359.host, call_774359.base,
                         call_774359.route, valid.getOrDefault("path"))
  result = hook(call_774359, url, valid)

proc call*(call_774360: Call_GetDescribeScheduledActions_774341;
          MaxRecords: int = 0; AutoScalingGroupName: string = "";
          StartTime: string = ""; NextToken: string = "";
          Action: string = "DescribeScheduledActions";
          ScheduledActionNames: JsonNode = nil; EndTime: string = "";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeScheduledActions
  ## Describes the actions scheduled for your Auto Scaling group that haven't run or that have not reached their end time. To describe the actions that have already run, use <a>DescribeScalingActivities</a>. 
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   StartTime: string
  ##            : The earliest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   ScheduledActionNames: JArray
  ##                       : The names of one or more scheduled actions. You can specify up to 50 actions. If you omit this parameter, all scheduled actions are described. If you specify an unknown scheduled action, it is ignored with no error.
  ##   EndTime: string
  ##          : The latest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   Version: string (required)
  var query_774361 = newJObject()
  add(query_774361, "MaxRecords", newJInt(MaxRecords))
  add(query_774361, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_774361, "StartTime", newJString(StartTime))
  add(query_774361, "NextToken", newJString(NextToken))
  add(query_774361, "Action", newJString(Action))
  if ScheduledActionNames != nil:
    query_774361.add "ScheduledActionNames", ScheduledActionNames
  add(query_774361, "EndTime", newJString(EndTime))
  add(query_774361, "Version", newJString(Version))
  result = call_774360.call(nil, query_774361, nil, nil, nil)

var getDescribeScheduledActions* = Call_GetDescribeScheduledActions_774341(
    name: "getDescribeScheduledActions", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeScheduledActions",
    validator: validate_GetDescribeScheduledActions_774342, base: "/",
    url: url_GetDescribeScheduledActions_774343,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeTags_774402 = ref object of OpenApiRestCall_772597
proc url_PostDescribeTags_774404(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeTags_774403(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Describes the specified tags.</p> <p>You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.</p> <p>You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there's no match, no special message is returned.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774405 = query.getOrDefault("Action")
  valid_774405 = validateParameter(valid_774405, JString, required = true,
                                 default = newJString("DescribeTags"))
  if valid_774405 != nil:
    section.add "Action", valid_774405
  var valid_774406 = query.getOrDefault("Version")
  valid_774406 = validateParameter(valid_774406, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_774406 != nil:
    section.add "Version", valid_774406
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774407 = header.getOrDefault("X-Amz-Date")
  valid_774407 = validateParameter(valid_774407, JString, required = false,
                                 default = nil)
  if valid_774407 != nil:
    section.add "X-Amz-Date", valid_774407
  var valid_774408 = header.getOrDefault("X-Amz-Security-Token")
  valid_774408 = validateParameter(valid_774408, JString, required = false,
                                 default = nil)
  if valid_774408 != nil:
    section.add "X-Amz-Security-Token", valid_774408
  var valid_774409 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774409 = validateParameter(valid_774409, JString, required = false,
                                 default = nil)
  if valid_774409 != nil:
    section.add "X-Amz-Content-Sha256", valid_774409
  var valid_774410 = header.getOrDefault("X-Amz-Algorithm")
  valid_774410 = validateParameter(valid_774410, JString, required = false,
                                 default = nil)
  if valid_774410 != nil:
    section.add "X-Amz-Algorithm", valid_774410
  var valid_774411 = header.getOrDefault("X-Amz-Signature")
  valid_774411 = validateParameter(valid_774411, JString, required = false,
                                 default = nil)
  if valid_774411 != nil:
    section.add "X-Amz-Signature", valid_774411
  var valid_774412 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774412 = validateParameter(valid_774412, JString, required = false,
                                 default = nil)
  if valid_774412 != nil:
    section.add "X-Amz-SignedHeaders", valid_774412
  var valid_774413 = header.getOrDefault("X-Amz-Credential")
  valid_774413 = validateParameter(valid_774413, JString, required = false,
                                 default = nil)
  if valid_774413 != nil:
    section.add "X-Amz-Credential", valid_774413
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Filters: JArray
  ##          : One or more filters to scope the tags to return. The maximum number of filters per filter type (for example, <code>auto-scaling-group</code>) is 1000.
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  section = newJObject()
  var valid_774414 = formData.getOrDefault("NextToken")
  valid_774414 = validateParameter(valid_774414, JString, required = false,
                                 default = nil)
  if valid_774414 != nil:
    section.add "NextToken", valid_774414
  var valid_774415 = formData.getOrDefault("Filters")
  valid_774415 = validateParameter(valid_774415, JArray, required = false,
                                 default = nil)
  if valid_774415 != nil:
    section.add "Filters", valid_774415
  var valid_774416 = formData.getOrDefault("MaxRecords")
  valid_774416 = validateParameter(valid_774416, JInt, required = false, default = nil)
  if valid_774416 != nil:
    section.add "MaxRecords", valid_774416
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774417: Call_PostDescribeTags_774402; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the specified tags.</p> <p>You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.</p> <p>You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there's no match, no special message is returned.</p>
  ## 
  let valid = call_774417.validator(path, query, header, formData, body)
  let scheme = call_774417.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774417.url(scheme.get, call_774417.host, call_774417.base,
                         call_774417.route, valid.getOrDefault("path"))
  result = hook(call_774417, url, valid)

proc call*(call_774418: Call_PostDescribeTags_774402; NextToken: string = "";
          Action: string = "DescribeTags"; Filters: JsonNode = nil; MaxRecords: int = 0;
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeTags
  ## <p>Describes the specified tags.</p> <p>You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.</p> <p>You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there's no match, no special message is returned.</p>
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : One or more filters to scope the tags to return. The maximum number of filters per filter type (for example, <code>auto-scaling-group</code>) is 1000.
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   Version: string (required)
  var query_774419 = newJObject()
  var formData_774420 = newJObject()
  add(formData_774420, "NextToken", newJString(NextToken))
  add(query_774419, "Action", newJString(Action))
  if Filters != nil:
    formData_774420.add "Filters", Filters
  add(formData_774420, "MaxRecords", newJInt(MaxRecords))
  add(query_774419, "Version", newJString(Version))
  result = call_774418.call(nil, query_774419, nil, formData_774420, nil)

var postDescribeTags* = Call_PostDescribeTags_774402(name: "postDescribeTags",
    meth: HttpMethod.HttpPost, host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeTags", validator: validate_PostDescribeTags_774403,
    base: "/", url: url_PostDescribeTags_774404,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeTags_774384 = ref object of OpenApiRestCall_772597
proc url_GetDescribeTags_774386(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeTags_774385(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Describes the specified tags.</p> <p>You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.</p> <p>You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there's no match, no special message is returned.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   Filters: JArray
  ##          : One or more filters to scope the tags to return. The maximum number of filters per filter type (for example, <code>auto-scaling-group</code>) is 1000.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_774387 = query.getOrDefault("MaxRecords")
  valid_774387 = validateParameter(valid_774387, JInt, required = false, default = nil)
  if valid_774387 != nil:
    section.add "MaxRecords", valid_774387
  var valid_774388 = query.getOrDefault("Filters")
  valid_774388 = validateParameter(valid_774388, JArray, required = false,
                                 default = nil)
  if valid_774388 != nil:
    section.add "Filters", valid_774388
  var valid_774389 = query.getOrDefault("NextToken")
  valid_774389 = validateParameter(valid_774389, JString, required = false,
                                 default = nil)
  if valid_774389 != nil:
    section.add "NextToken", valid_774389
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774390 = query.getOrDefault("Action")
  valid_774390 = validateParameter(valid_774390, JString, required = true,
                                 default = newJString("DescribeTags"))
  if valid_774390 != nil:
    section.add "Action", valid_774390
  var valid_774391 = query.getOrDefault("Version")
  valid_774391 = validateParameter(valid_774391, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_774391 != nil:
    section.add "Version", valid_774391
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774392 = header.getOrDefault("X-Amz-Date")
  valid_774392 = validateParameter(valid_774392, JString, required = false,
                                 default = nil)
  if valid_774392 != nil:
    section.add "X-Amz-Date", valid_774392
  var valid_774393 = header.getOrDefault("X-Amz-Security-Token")
  valid_774393 = validateParameter(valid_774393, JString, required = false,
                                 default = nil)
  if valid_774393 != nil:
    section.add "X-Amz-Security-Token", valid_774393
  var valid_774394 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774394 = validateParameter(valid_774394, JString, required = false,
                                 default = nil)
  if valid_774394 != nil:
    section.add "X-Amz-Content-Sha256", valid_774394
  var valid_774395 = header.getOrDefault("X-Amz-Algorithm")
  valid_774395 = validateParameter(valid_774395, JString, required = false,
                                 default = nil)
  if valid_774395 != nil:
    section.add "X-Amz-Algorithm", valid_774395
  var valid_774396 = header.getOrDefault("X-Amz-Signature")
  valid_774396 = validateParameter(valid_774396, JString, required = false,
                                 default = nil)
  if valid_774396 != nil:
    section.add "X-Amz-Signature", valid_774396
  var valid_774397 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774397 = validateParameter(valid_774397, JString, required = false,
                                 default = nil)
  if valid_774397 != nil:
    section.add "X-Amz-SignedHeaders", valid_774397
  var valid_774398 = header.getOrDefault("X-Amz-Credential")
  valid_774398 = validateParameter(valid_774398, JString, required = false,
                                 default = nil)
  if valid_774398 != nil:
    section.add "X-Amz-Credential", valid_774398
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774399: Call_GetDescribeTags_774384; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the specified tags.</p> <p>You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.</p> <p>You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there's no match, no special message is returned.</p>
  ## 
  let valid = call_774399.validator(path, query, header, formData, body)
  let scheme = call_774399.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774399.url(scheme.get, call_774399.host, call_774399.base,
                         call_774399.route, valid.getOrDefault("path"))
  result = hook(call_774399, url, valid)

proc call*(call_774400: Call_GetDescribeTags_774384; MaxRecords: int = 0;
          Filters: JsonNode = nil; NextToken: string = "";
          Action: string = "DescribeTags"; Version: string = "2011-01-01"): Recallable =
  ## getDescribeTags
  ## <p>Describes the specified tags.</p> <p>You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.</p> <p>You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there's no match, no special message is returned.</p>
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   Filters: JArray
  ##          : One or more filters to scope the tags to return. The maximum number of filters per filter type (for example, <code>auto-scaling-group</code>) is 1000.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774401 = newJObject()
  add(query_774401, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_774401.add "Filters", Filters
  add(query_774401, "NextToken", newJString(NextToken))
  add(query_774401, "Action", newJString(Action))
  add(query_774401, "Version", newJString(Version))
  result = call_774400.call(nil, query_774401, nil, nil, nil)

var getDescribeTags* = Call_GetDescribeTags_774384(name: "getDescribeTags",
    meth: HttpMethod.HttpGet, host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeTags", validator: validate_GetDescribeTags_774385,
    base: "/", url: url_GetDescribeTags_774386, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeTerminationPolicyTypes_774436 = ref object of OpenApiRestCall_772597
proc url_PostDescribeTerminationPolicyTypes_774438(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeTerminationPolicyTypes_774437(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the termination policies supported by Amazon EC2 Auto Scaling.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Auto Scaling Instances Terminate During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774439 = query.getOrDefault("Action")
  valid_774439 = validateParameter(valid_774439, JString, required = true, default = newJString(
      "DescribeTerminationPolicyTypes"))
  if valid_774439 != nil:
    section.add "Action", valid_774439
  var valid_774440 = query.getOrDefault("Version")
  valid_774440 = validateParameter(valid_774440, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_774440 != nil:
    section.add "Version", valid_774440
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774441 = header.getOrDefault("X-Amz-Date")
  valid_774441 = validateParameter(valid_774441, JString, required = false,
                                 default = nil)
  if valid_774441 != nil:
    section.add "X-Amz-Date", valid_774441
  var valid_774442 = header.getOrDefault("X-Amz-Security-Token")
  valid_774442 = validateParameter(valid_774442, JString, required = false,
                                 default = nil)
  if valid_774442 != nil:
    section.add "X-Amz-Security-Token", valid_774442
  var valid_774443 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774443 = validateParameter(valid_774443, JString, required = false,
                                 default = nil)
  if valid_774443 != nil:
    section.add "X-Amz-Content-Sha256", valid_774443
  var valid_774444 = header.getOrDefault("X-Amz-Algorithm")
  valid_774444 = validateParameter(valid_774444, JString, required = false,
                                 default = nil)
  if valid_774444 != nil:
    section.add "X-Amz-Algorithm", valid_774444
  var valid_774445 = header.getOrDefault("X-Amz-Signature")
  valid_774445 = validateParameter(valid_774445, JString, required = false,
                                 default = nil)
  if valid_774445 != nil:
    section.add "X-Amz-Signature", valid_774445
  var valid_774446 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774446 = validateParameter(valid_774446, JString, required = false,
                                 default = nil)
  if valid_774446 != nil:
    section.add "X-Amz-SignedHeaders", valid_774446
  var valid_774447 = header.getOrDefault("X-Amz-Credential")
  valid_774447 = validateParameter(valid_774447, JString, required = false,
                                 default = nil)
  if valid_774447 != nil:
    section.add "X-Amz-Credential", valid_774447
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774448: Call_PostDescribeTerminationPolicyTypes_774436;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Describes the termination policies supported by Amazon EC2 Auto Scaling.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Auto Scaling Instances Terminate During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_774448.validator(path, query, header, formData, body)
  let scheme = call_774448.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774448.url(scheme.get, call_774448.host, call_774448.base,
                         call_774448.route, valid.getOrDefault("path"))
  result = hook(call_774448, url, valid)

proc call*(call_774449: Call_PostDescribeTerminationPolicyTypes_774436;
          Action: string = "DescribeTerminationPolicyTypes";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeTerminationPolicyTypes
  ## <p>Describes the termination policies supported by Amazon EC2 Auto Scaling.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Auto Scaling Instances Terminate During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774450 = newJObject()
  add(query_774450, "Action", newJString(Action))
  add(query_774450, "Version", newJString(Version))
  result = call_774449.call(nil, query_774450, nil, nil, nil)

var postDescribeTerminationPolicyTypes* = Call_PostDescribeTerminationPolicyTypes_774436(
    name: "postDescribeTerminationPolicyTypes", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeTerminationPolicyTypes",
    validator: validate_PostDescribeTerminationPolicyTypes_774437, base: "/",
    url: url_PostDescribeTerminationPolicyTypes_774438,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeTerminationPolicyTypes_774421 = ref object of OpenApiRestCall_772597
proc url_GetDescribeTerminationPolicyTypes_774423(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeTerminationPolicyTypes_774422(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the termination policies supported by Amazon EC2 Auto Scaling.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Auto Scaling Instances Terminate During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774424 = query.getOrDefault("Action")
  valid_774424 = validateParameter(valid_774424, JString, required = true, default = newJString(
      "DescribeTerminationPolicyTypes"))
  if valid_774424 != nil:
    section.add "Action", valid_774424
  var valid_774425 = query.getOrDefault("Version")
  valid_774425 = validateParameter(valid_774425, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_774425 != nil:
    section.add "Version", valid_774425
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774426 = header.getOrDefault("X-Amz-Date")
  valid_774426 = validateParameter(valid_774426, JString, required = false,
                                 default = nil)
  if valid_774426 != nil:
    section.add "X-Amz-Date", valid_774426
  var valid_774427 = header.getOrDefault("X-Amz-Security-Token")
  valid_774427 = validateParameter(valid_774427, JString, required = false,
                                 default = nil)
  if valid_774427 != nil:
    section.add "X-Amz-Security-Token", valid_774427
  var valid_774428 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774428 = validateParameter(valid_774428, JString, required = false,
                                 default = nil)
  if valid_774428 != nil:
    section.add "X-Amz-Content-Sha256", valid_774428
  var valid_774429 = header.getOrDefault("X-Amz-Algorithm")
  valid_774429 = validateParameter(valid_774429, JString, required = false,
                                 default = nil)
  if valid_774429 != nil:
    section.add "X-Amz-Algorithm", valid_774429
  var valid_774430 = header.getOrDefault("X-Amz-Signature")
  valid_774430 = validateParameter(valid_774430, JString, required = false,
                                 default = nil)
  if valid_774430 != nil:
    section.add "X-Amz-Signature", valid_774430
  var valid_774431 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774431 = validateParameter(valid_774431, JString, required = false,
                                 default = nil)
  if valid_774431 != nil:
    section.add "X-Amz-SignedHeaders", valid_774431
  var valid_774432 = header.getOrDefault("X-Amz-Credential")
  valid_774432 = validateParameter(valid_774432, JString, required = false,
                                 default = nil)
  if valid_774432 != nil:
    section.add "X-Amz-Credential", valid_774432
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774433: Call_GetDescribeTerminationPolicyTypes_774421;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Describes the termination policies supported by Amazon EC2 Auto Scaling.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Auto Scaling Instances Terminate During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_774433.validator(path, query, header, formData, body)
  let scheme = call_774433.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774433.url(scheme.get, call_774433.host, call_774433.base,
                         call_774433.route, valid.getOrDefault("path"))
  result = hook(call_774433, url, valid)

proc call*(call_774434: Call_GetDescribeTerminationPolicyTypes_774421;
          Action: string = "DescribeTerminationPolicyTypes";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeTerminationPolicyTypes
  ## <p>Describes the termination policies supported by Amazon EC2 Auto Scaling.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Auto Scaling Instances Terminate During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774435 = newJObject()
  add(query_774435, "Action", newJString(Action))
  add(query_774435, "Version", newJString(Version))
  result = call_774434.call(nil, query_774435, nil, nil, nil)

var getDescribeTerminationPolicyTypes* = Call_GetDescribeTerminationPolicyTypes_774421(
    name: "getDescribeTerminationPolicyTypes", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeTerminationPolicyTypes",
    validator: validate_GetDescribeTerminationPolicyTypes_774422, base: "/",
    url: url_GetDescribeTerminationPolicyTypes_774423,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDetachInstances_774469 = ref object of OpenApiRestCall_772597
proc url_PostDetachInstances_774471(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDetachInstances_774470(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Removes one or more instances from the specified Auto Scaling group.</p> <p>After the instances are detached, you can manage them independent of the Auto Scaling group.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.</p> <p>If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html">Detach EC2 Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774472 = query.getOrDefault("Action")
  valid_774472 = validateParameter(valid_774472, JString, required = true,
                                 default = newJString("DetachInstances"))
  if valid_774472 != nil:
    section.add "Action", valid_774472
  var valid_774473 = query.getOrDefault("Version")
  valid_774473 = validateParameter(valid_774473, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_774473 != nil:
    section.add "Version", valid_774473
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774474 = header.getOrDefault("X-Amz-Date")
  valid_774474 = validateParameter(valid_774474, JString, required = false,
                                 default = nil)
  if valid_774474 != nil:
    section.add "X-Amz-Date", valid_774474
  var valid_774475 = header.getOrDefault("X-Amz-Security-Token")
  valid_774475 = validateParameter(valid_774475, JString, required = false,
                                 default = nil)
  if valid_774475 != nil:
    section.add "X-Amz-Security-Token", valid_774475
  var valid_774476 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774476 = validateParameter(valid_774476, JString, required = false,
                                 default = nil)
  if valid_774476 != nil:
    section.add "X-Amz-Content-Sha256", valid_774476
  var valid_774477 = header.getOrDefault("X-Amz-Algorithm")
  valid_774477 = validateParameter(valid_774477, JString, required = false,
                                 default = nil)
  if valid_774477 != nil:
    section.add "X-Amz-Algorithm", valid_774477
  var valid_774478 = header.getOrDefault("X-Amz-Signature")
  valid_774478 = validateParameter(valid_774478, JString, required = false,
                                 default = nil)
  if valid_774478 != nil:
    section.add "X-Amz-Signature", valid_774478
  var valid_774479 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774479 = validateParameter(valid_774479, JString, required = false,
                                 default = nil)
  if valid_774479 != nil:
    section.add "X-Amz-SignedHeaders", valid_774479
  var valid_774480 = header.getOrDefault("X-Amz-Credential")
  valid_774480 = validateParameter(valid_774480, JString, required = false,
                                 default = nil)
  if valid_774480 != nil:
    section.add "X-Amz-Credential", valid_774480
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   ShouldDecrementDesiredCapacity: JBool (required)
  ##                                 : Indicates whether the Auto Scaling group decrements the desired capacity value by the number of instances detached.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_774481 = formData.getOrDefault("AutoScalingGroupName")
  valid_774481 = validateParameter(valid_774481, JString, required = true,
                                 default = nil)
  if valid_774481 != nil:
    section.add "AutoScalingGroupName", valid_774481
  var valid_774482 = formData.getOrDefault("InstanceIds")
  valid_774482 = validateParameter(valid_774482, JArray, required = false,
                                 default = nil)
  if valid_774482 != nil:
    section.add "InstanceIds", valid_774482
  var valid_774483 = formData.getOrDefault("ShouldDecrementDesiredCapacity")
  valid_774483 = validateParameter(valid_774483, JBool, required = true, default = nil)
  if valid_774483 != nil:
    section.add "ShouldDecrementDesiredCapacity", valid_774483
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774484: Call_PostDetachInstances_774469; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes one or more instances from the specified Auto Scaling group.</p> <p>After the instances are detached, you can manage them independent of the Auto Scaling group.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.</p> <p>If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html">Detach EC2 Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_774484.validator(path, query, header, formData, body)
  let scheme = call_774484.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774484.url(scheme.get, call_774484.host, call_774484.base,
                         call_774484.route, valid.getOrDefault("path"))
  result = hook(call_774484, url, valid)

proc call*(call_774485: Call_PostDetachInstances_774469;
          AutoScalingGroupName: string; ShouldDecrementDesiredCapacity: bool;
          InstanceIds: JsonNode = nil; Action: string = "DetachInstances";
          Version: string = "2011-01-01"): Recallable =
  ## postDetachInstances
  ## <p>Removes one or more instances from the specified Auto Scaling group.</p> <p>After the instances are detached, you can manage them independent of the Auto Scaling group.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.</p> <p>If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html">Detach EC2 Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   ShouldDecrementDesiredCapacity: bool (required)
  ##                                 : Indicates whether the Auto Scaling group decrements the desired capacity value by the number of instances detached.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774486 = newJObject()
  var formData_774487 = newJObject()
  add(formData_774487, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if InstanceIds != nil:
    formData_774487.add "InstanceIds", InstanceIds
  add(formData_774487, "ShouldDecrementDesiredCapacity",
      newJBool(ShouldDecrementDesiredCapacity))
  add(query_774486, "Action", newJString(Action))
  add(query_774486, "Version", newJString(Version))
  result = call_774485.call(nil, query_774486, nil, formData_774487, nil)

var postDetachInstances* = Call_PostDetachInstances_774469(
    name: "postDetachInstances", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DetachInstances",
    validator: validate_PostDetachInstances_774470, base: "/",
    url: url_PostDetachInstances_774471, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDetachInstances_774451 = ref object of OpenApiRestCall_772597
proc url_GetDetachInstances_774453(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDetachInstances_774452(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Removes one or more instances from the specified Auto Scaling group.</p> <p>After the instances are detached, you can manage them independent of the Auto Scaling group.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.</p> <p>If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html">Detach EC2 Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   ShouldDecrementDesiredCapacity: JBool (required)
  ##                                 : Indicates whether the Auto Scaling group decrements the desired capacity value by the number of instances detached.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_774454 = query.getOrDefault("AutoScalingGroupName")
  valid_774454 = validateParameter(valid_774454, JString, required = true,
                                 default = nil)
  if valid_774454 != nil:
    section.add "AutoScalingGroupName", valid_774454
  var valid_774455 = query.getOrDefault("Action")
  valid_774455 = validateParameter(valid_774455, JString, required = true,
                                 default = newJString("DetachInstances"))
  if valid_774455 != nil:
    section.add "Action", valid_774455
  var valid_774456 = query.getOrDefault("ShouldDecrementDesiredCapacity")
  valid_774456 = validateParameter(valid_774456, JBool, required = true, default = nil)
  if valid_774456 != nil:
    section.add "ShouldDecrementDesiredCapacity", valid_774456
  var valid_774457 = query.getOrDefault("InstanceIds")
  valid_774457 = validateParameter(valid_774457, JArray, required = false,
                                 default = nil)
  if valid_774457 != nil:
    section.add "InstanceIds", valid_774457
  var valid_774458 = query.getOrDefault("Version")
  valid_774458 = validateParameter(valid_774458, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_774458 != nil:
    section.add "Version", valid_774458
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774459 = header.getOrDefault("X-Amz-Date")
  valid_774459 = validateParameter(valid_774459, JString, required = false,
                                 default = nil)
  if valid_774459 != nil:
    section.add "X-Amz-Date", valid_774459
  var valid_774460 = header.getOrDefault("X-Amz-Security-Token")
  valid_774460 = validateParameter(valid_774460, JString, required = false,
                                 default = nil)
  if valid_774460 != nil:
    section.add "X-Amz-Security-Token", valid_774460
  var valid_774461 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774461 = validateParameter(valid_774461, JString, required = false,
                                 default = nil)
  if valid_774461 != nil:
    section.add "X-Amz-Content-Sha256", valid_774461
  var valid_774462 = header.getOrDefault("X-Amz-Algorithm")
  valid_774462 = validateParameter(valid_774462, JString, required = false,
                                 default = nil)
  if valid_774462 != nil:
    section.add "X-Amz-Algorithm", valid_774462
  var valid_774463 = header.getOrDefault("X-Amz-Signature")
  valid_774463 = validateParameter(valid_774463, JString, required = false,
                                 default = nil)
  if valid_774463 != nil:
    section.add "X-Amz-Signature", valid_774463
  var valid_774464 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774464 = validateParameter(valid_774464, JString, required = false,
                                 default = nil)
  if valid_774464 != nil:
    section.add "X-Amz-SignedHeaders", valid_774464
  var valid_774465 = header.getOrDefault("X-Amz-Credential")
  valid_774465 = validateParameter(valid_774465, JString, required = false,
                                 default = nil)
  if valid_774465 != nil:
    section.add "X-Amz-Credential", valid_774465
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774466: Call_GetDetachInstances_774451; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes one or more instances from the specified Auto Scaling group.</p> <p>After the instances are detached, you can manage them independent of the Auto Scaling group.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.</p> <p>If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html">Detach EC2 Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_774466.validator(path, query, header, formData, body)
  let scheme = call_774466.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774466.url(scheme.get, call_774466.host, call_774466.base,
                         call_774466.route, valid.getOrDefault("path"))
  result = hook(call_774466, url, valid)

proc call*(call_774467: Call_GetDetachInstances_774451;
          AutoScalingGroupName: string; ShouldDecrementDesiredCapacity: bool;
          Action: string = "DetachInstances"; InstanceIds: JsonNode = nil;
          Version: string = "2011-01-01"): Recallable =
  ## getDetachInstances
  ## <p>Removes one or more instances from the specified Auto Scaling group.</p> <p>After the instances are detached, you can manage them independent of the Auto Scaling group.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.</p> <p>If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html">Detach EC2 Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   ShouldDecrementDesiredCapacity: bool (required)
  ##                                 : Indicates whether the Auto Scaling group decrements the desired capacity value by the number of instances detached.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Version: string (required)
  var query_774468 = newJObject()
  add(query_774468, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_774468, "Action", newJString(Action))
  add(query_774468, "ShouldDecrementDesiredCapacity",
      newJBool(ShouldDecrementDesiredCapacity))
  if InstanceIds != nil:
    query_774468.add "InstanceIds", InstanceIds
  add(query_774468, "Version", newJString(Version))
  result = call_774467.call(nil, query_774468, nil, nil, nil)

var getDetachInstances* = Call_GetDetachInstances_774451(
    name: "getDetachInstances", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DetachInstances",
    validator: validate_GetDetachInstances_774452, base: "/",
    url: url_GetDetachInstances_774453, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDetachLoadBalancerTargetGroups_774505 = ref object of OpenApiRestCall_772597
proc url_PostDetachLoadBalancerTargetGroups_774507(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDetachLoadBalancerTargetGroups_774506(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Detaches one or more target groups from the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774508 = query.getOrDefault("Action")
  valid_774508 = validateParameter(valid_774508, JString, required = true, default = newJString(
      "DetachLoadBalancerTargetGroups"))
  if valid_774508 != nil:
    section.add "Action", valid_774508
  var valid_774509 = query.getOrDefault("Version")
  valid_774509 = validateParameter(valid_774509, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_774509 != nil:
    section.add "Version", valid_774509
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774510 = header.getOrDefault("X-Amz-Date")
  valid_774510 = validateParameter(valid_774510, JString, required = false,
                                 default = nil)
  if valid_774510 != nil:
    section.add "X-Amz-Date", valid_774510
  var valid_774511 = header.getOrDefault("X-Amz-Security-Token")
  valid_774511 = validateParameter(valid_774511, JString, required = false,
                                 default = nil)
  if valid_774511 != nil:
    section.add "X-Amz-Security-Token", valid_774511
  var valid_774512 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774512 = validateParameter(valid_774512, JString, required = false,
                                 default = nil)
  if valid_774512 != nil:
    section.add "X-Amz-Content-Sha256", valid_774512
  var valid_774513 = header.getOrDefault("X-Amz-Algorithm")
  valid_774513 = validateParameter(valid_774513, JString, required = false,
                                 default = nil)
  if valid_774513 != nil:
    section.add "X-Amz-Algorithm", valid_774513
  var valid_774514 = header.getOrDefault("X-Amz-Signature")
  valid_774514 = validateParameter(valid_774514, JString, required = false,
                                 default = nil)
  if valid_774514 != nil:
    section.add "X-Amz-Signature", valid_774514
  var valid_774515 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774515 = validateParameter(valid_774515, JString, required = false,
                                 default = nil)
  if valid_774515 != nil:
    section.add "X-Amz-SignedHeaders", valid_774515
  var valid_774516 = header.getOrDefault("X-Amz-Credential")
  valid_774516 = validateParameter(valid_774516, JString, required = false,
                                 default = nil)
  if valid_774516 != nil:
    section.add "X-Amz-Credential", valid_774516
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_774517 = formData.getOrDefault("AutoScalingGroupName")
  valid_774517 = validateParameter(valid_774517, JString, required = true,
                                 default = nil)
  if valid_774517 != nil:
    section.add "AutoScalingGroupName", valid_774517
  var valid_774518 = formData.getOrDefault("TargetGroupARNs")
  valid_774518 = validateParameter(valid_774518, JArray, required = true, default = nil)
  if valid_774518 != nil:
    section.add "TargetGroupARNs", valid_774518
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774519: Call_PostDetachLoadBalancerTargetGroups_774505;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Detaches one or more target groups from the specified Auto Scaling group.
  ## 
  let valid = call_774519.validator(path, query, header, formData, body)
  let scheme = call_774519.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774519.url(scheme.get, call_774519.host, call_774519.base,
                         call_774519.route, valid.getOrDefault("path"))
  result = hook(call_774519, url, valid)

proc call*(call_774520: Call_PostDetachLoadBalancerTargetGroups_774505;
          AutoScalingGroupName: string; TargetGroupARNs: JsonNode;
          Action: string = "DetachLoadBalancerTargetGroups";
          Version: string = "2011-01-01"): Recallable =
  ## postDetachLoadBalancerTargetGroups
  ## Detaches one or more target groups from the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774521 = newJObject()
  var formData_774522 = newJObject()
  add(formData_774522, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if TargetGroupARNs != nil:
    formData_774522.add "TargetGroupARNs", TargetGroupARNs
  add(query_774521, "Action", newJString(Action))
  add(query_774521, "Version", newJString(Version))
  result = call_774520.call(nil, query_774521, nil, formData_774522, nil)

var postDetachLoadBalancerTargetGroups* = Call_PostDetachLoadBalancerTargetGroups_774505(
    name: "postDetachLoadBalancerTargetGroups", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DetachLoadBalancerTargetGroups",
    validator: validate_PostDetachLoadBalancerTargetGroups_774506, base: "/",
    url: url_PostDetachLoadBalancerTargetGroups_774507,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDetachLoadBalancerTargetGroups_774488 = ref object of OpenApiRestCall_772597
proc url_GetDetachLoadBalancerTargetGroups_774490(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDetachLoadBalancerTargetGroups_774489(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Detaches one or more target groups from the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_774491 = query.getOrDefault("AutoScalingGroupName")
  valid_774491 = validateParameter(valid_774491, JString, required = true,
                                 default = nil)
  if valid_774491 != nil:
    section.add "AutoScalingGroupName", valid_774491
  var valid_774492 = query.getOrDefault("Action")
  valid_774492 = validateParameter(valid_774492, JString, required = true, default = newJString(
      "DetachLoadBalancerTargetGroups"))
  if valid_774492 != nil:
    section.add "Action", valid_774492
  var valid_774493 = query.getOrDefault("TargetGroupARNs")
  valid_774493 = validateParameter(valid_774493, JArray, required = true, default = nil)
  if valid_774493 != nil:
    section.add "TargetGroupARNs", valid_774493
  var valid_774494 = query.getOrDefault("Version")
  valid_774494 = validateParameter(valid_774494, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_774494 != nil:
    section.add "Version", valid_774494
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774495 = header.getOrDefault("X-Amz-Date")
  valid_774495 = validateParameter(valid_774495, JString, required = false,
                                 default = nil)
  if valid_774495 != nil:
    section.add "X-Amz-Date", valid_774495
  var valid_774496 = header.getOrDefault("X-Amz-Security-Token")
  valid_774496 = validateParameter(valid_774496, JString, required = false,
                                 default = nil)
  if valid_774496 != nil:
    section.add "X-Amz-Security-Token", valid_774496
  var valid_774497 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774497 = validateParameter(valid_774497, JString, required = false,
                                 default = nil)
  if valid_774497 != nil:
    section.add "X-Amz-Content-Sha256", valid_774497
  var valid_774498 = header.getOrDefault("X-Amz-Algorithm")
  valid_774498 = validateParameter(valid_774498, JString, required = false,
                                 default = nil)
  if valid_774498 != nil:
    section.add "X-Amz-Algorithm", valid_774498
  var valid_774499 = header.getOrDefault("X-Amz-Signature")
  valid_774499 = validateParameter(valid_774499, JString, required = false,
                                 default = nil)
  if valid_774499 != nil:
    section.add "X-Amz-Signature", valid_774499
  var valid_774500 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774500 = validateParameter(valid_774500, JString, required = false,
                                 default = nil)
  if valid_774500 != nil:
    section.add "X-Amz-SignedHeaders", valid_774500
  var valid_774501 = header.getOrDefault("X-Amz-Credential")
  valid_774501 = validateParameter(valid_774501, JString, required = false,
                                 default = nil)
  if valid_774501 != nil:
    section.add "X-Amz-Credential", valid_774501
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774502: Call_GetDetachLoadBalancerTargetGroups_774488;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Detaches one or more target groups from the specified Auto Scaling group.
  ## 
  let valid = call_774502.validator(path, query, header, formData, body)
  let scheme = call_774502.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774502.url(scheme.get, call_774502.host, call_774502.base,
                         call_774502.route, valid.getOrDefault("path"))
  result = hook(call_774502, url, valid)

proc call*(call_774503: Call_GetDetachLoadBalancerTargetGroups_774488;
          AutoScalingGroupName: string; TargetGroupARNs: JsonNode;
          Action: string = "DetachLoadBalancerTargetGroups";
          Version: string = "2011-01-01"): Recallable =
  ## getDetachLoadBalancerTargetGroups
  ## Detaches one or more target groups from the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  ##   Version: string (required)
  var query_774504 = newJObject()
  add(query_774504, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_774504, "Action", newJString(Action))
  if TargetGroupARNs != nil:
    query_774504.add "TargetGroupARNs", TargetGroupARNs
  add(query_774504, "Version", newJString(Version))
  result = call_774503.call(nil, query_774504, nil, nil, nil)

var getDetachLoadBalancerTargetGroups* = Call_GetDetachLoadBalancerTargetGroups_774488(
    name: "getDetachLoadBalancerTargetGroups", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DetachLoadBalancerTargetGroups",
    validator: validate_GetDetachLoadBalancerTargetGroups_774489, base: "/",
    url: url_GetDetachLoadBalancerTargetGroups_774490,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDetachLoadBalancers_774540 = ref object of OpenApiRestCall_772597
proc url_PostDetachLoadBalancers_774542(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDetachLoadBalancers_774541(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Detaches one or more Classic Load Balancers from the specified Auto Scaling group.</p> <p>This operation detaches only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DetachLoadBalancerTargetGroups</a> instead.</p> <p>When you detach a load balancer, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using <a>DescribeLoadBalancers</a>. The instances remain running.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774543 = query.getOrDefault("Action")
  valid_774543 = validateParameter(valid_774543, JString, required = true,
                                 default = newJString("DetachLoadBalancers"))
  if valid_774543 != nil:
    section.add "Action", valid_774543
  var valid_774544 = query.getOrDefault("Version")
  valid_774544 = validateParameter(valid_774544, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_774544 != nil:
    section.add "Version", valid_774544
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774545 = header.getOrDefault("X-Amz-Date")
  valid_774545 = validateParameter(valid_774545, JString, required = false,
                                 default = nil)
  if valid_774545 != nil:
    section.add "X-Amz-Date", valid_774545
  var valid_774546 = header.getOrDefault("X-Amz-Security-Token")
  valid_774546 = validateParameter(valid_774546, JString, required = false,
                                 default = nil)
  if valid_774546 != nil:
    section.add "X-Amz-Security-Token", valid_774546
  var valid_774547 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774547 = validateParameter(valid_774547, JString, required = false,
                                 default = nil)
  if valid_774547 != nil:
    section.add "X-Amz-Content-Sha256", valid_774547
  var valid_774548 = header.getOrDefault("X-Amz-Algorithm")
  valid_774548 = validateParameter(valid_774548, JString, required = false,
                                 default = nil)
  if valid_774548 != nil:
    section.add "X-Amz-Algorithm", valid_774548
  var valid_774549 = header.getOrDefault("X-Amz-Signature")
  valid_774549 = validateParameter(valid_774549, JString, required = false,
                                 default = nil)
  if valid_774549 != nil:
    section.add "X-Amz-Signature", valid_774549
  var valid_774550 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774550 = validateParameter(valid_774550, JString, required = false,
                                 default = nil)
  if valid_774550 != nil:
    section.add "X-Amz-SignedHeaders", valid_774550
  var valid_774551 = header.getOrDefault("X-Amz-Credential")
  valid_774551 = validateParameter(valid_774551, JString, required = false,
                                 default = nil)
  if valid_774551 != nil:
    section.add "X-Amz-Credential", valid_774551
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_774552 = formData.getOrDefault("AutoScalingGroupName")
  valid_774552 = validateParameter(valid_774552, JString, required = true,
                                 default = nil)
  if valid_774552 != nil:
    section.add "AutoScalingGroupName", valid_774552
  var valid_774553 = formData.getOrDefault("LoadBalancerNames")
  valid_774553 = validateParameter(valid_774553, JArray, required = true, default = nil)
  if valid_774553 != nil:
    section.add "LoadBalancerNames", valid_774553
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774554: Call_PostDetachLoadBalancers_774540; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Detaches one or more Classic Load Balancers from the specified Auto Scaling group.</p> <p>This operation detaches only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DetachLoadBalancerTargetGroups</a> instead.</p> <p>When you detach a load balancer, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using <a>DescribeLoadBalancers</a>. The instances remain running.</p>
  ## 
  let valid = call_774554.validator(path, query, header, formData, body)
  let scheme = call_774554.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774554.url(scheme.get, call_774554.host, call_774554.base,
                         call_774554.route, valid.getOrDefault("path"))
  result = hook(call_774554, url, valid)

proc call*(call_774555: Call_PostDetachLoadBalancers_774540;
          AutoScalingGroupName: string; LoadBalancerNames: JsonNode;
          Action: string = "DetachLoadBalancers"; Version: string = "2011-01-01"): Recallable =
  ## postDetachLoadBalancers
  ## <p>Detaches one or more Classic Load Balancers from the specified Auto Scaling group.</p> <p>This operation detaches only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DetachLoadBalancerTargetGroups</a> instead.</p> <p>When you detach a load balancer, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using <a>DescribeLoadBalancers</a>. The instances remain running.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  ##   Version: string (required)
  var query_774556 = newJObject()
  var formData_774557 = newJObject()
  add(formData_774557, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_774556, "Action", newJString(Action))
  if LoadBalancerNames != nil:
    formData_774557.add "LoadBalancerNames", LoadBalancerNames
  add(query_774556, "Version", newJString(Version))
  result = call_774555.call(nil, query_774556, nil, formData_774557, nil)

var postDetachLoadBalancers* = Call_PostDetachLoadBalancers_774540(
    name: "postDetachLoadBalancers", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DetachLoadBalancers",
    validator: validate_PostDetachLoadBalancers_774541, base: "/",
    url: url_PostDetachLoadBalancers_774542, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDetachLoadBalancers_774523 = ref object of OpenApiRestCall_772597
proc url_GetDetachLoadBalancers_774525(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDetachLoadBalancers_774524(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Detaches one or more Classic Load Balancers from the specified Auto Scaling group.</p> <p>This operation detaches only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DetachLoadBalancerTargetGroups</a> instead.</p> <p>When you detach a load balancer, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using <a>DescribeLoadBalancers</a>. The instances remain running.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_774526 = query.getOrDefault("AutoScalingGroupName")
  valid_774526 = validateParameter(valid_774526, JString, required = true,
                                 default = nil)
  if valid_774526 != nil:
    section.add "AutoScalingGroupName", valid_774526
  var valid_774527 = query.getOrDefault("Action")
  valid_774527 = validateParameter(valid_774527, JString, required = true,
                                 default = newJString("DetachLoadBalancers"))
  if valid_774527 != nil:
    section.add "Action", valid_774527
  var valid_774528 = query.getOrDefault("LoadBalancerNames")
  valid_774528 = validateParameter(valid_774528, JArray, required = true, default = nil)
  if valid_774528 != nil:
    section.add "LoadBalancerNames", valid_774528
  var valid_774529 = query.getOrDefault("Version")
  valid_774529 = validateParameter(valid_774529, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_774529 != nil:
    section.add "Version", valid_774529
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774530 = header.getOrDefault("X-Amz-Date")
  valid_774530 = validateParameter(valid_774530, JString, required = false,
                                 default = nil)
  if valid_774530 != nil:
    section.add "X-Amz-Date", valid_774530
  var valid_774531 = header.getOrDefault("X-Amz-Security-Token")
  valid_774531 = validateParameter(valid_774531, JString, required = false,
                                 default = nil)
  if valid_774531 != nil:
    section.add "X-Amz-Security-Token", valid_774531
  var valid_774532 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774532 = validateParameter(valid_774532, JString, required = false,
                                 default = nil)
  if valid_774532 != nil:
    section.add "X-Amz-Content-Sha256", valid_774532
  var valid_774533 = header.getOrDefault("X-Amz-Algorithm")
  valid_774533 = validateParameter(valid_774533, JString, required = false,
                                 default = nil)
  if valid_774533 != nil:
    section.add "X-Amz-Algorithm", valid_774533
  var valid_774534 = header.getOrDefault("X-Amz-Signature")
  valid_774534 = validateParameter(valid_774534, JString, required = false,
                                 default = nil)
  if valid_774534 != nil:
    section.add "X-Amz-Signature", valid_774534
  var valid_774535 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774535 = validateParameter(valid_774535, JString, required = false,
                                 default = nil)
  if valid_774535 != nil:
    section.add "X-Amz-SignedHeaders", valid_774535
  var valid_774536 = header.getOrDefault("X-Amz-Credential")
  valid_774536 = validateParameter(valid_774536, JString, required = false,
                                 default = nil)
  if valid_774536 != nil:
    section.add "X-Amz-Credential", valid_774536
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774537: Call_GetDetachLoadBalancers_774523; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Detaches one or more Classic Load Balancers from the specified Auto Scaling group.</p> <p>This operation detaches only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DetachLoadBalancerTargetGroups</a> instead.</p> <p>When you detach a load balancer, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using <a>DescribeLoadBalancers</a>. The instances remain running.</p>
  ## 
  let valid = call_774537.validator(path, query, header, formData, body)
  let scheme = call_774537.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774537.url(scheme.get, call_774537.host, call_774537.base,
                         call_774537.route, valid.getOrDefault("path"))
  result = hook(call_774537, url, valid)

proc call*(call_774538: Call_GetDetachLoadBalancers_774523;
          AutoScalingGroupName: string; LoadBalancerNames: JsonNode;
          Action: string = "DetachLoadBalancers"; Version: string = "2011-01-01"): Recallable =
  ## getDetachLoadBalancers
  ## <p>Detaches one or more Classic Load Balancers from the specified Auto Scaling group.</p> <p>This operation detaches only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DetachLoadBalancerTargetGroups</a> instead.</p> <p>When you detach a load balancer, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using <a>DescribeLoadBalancers</a>. The instances remain running.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  ##   Version: string (required)
  var query_774539 = newJObject()
  add(query_774539, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_774539, "Action", newJString(Action))
  if LoadBalancerNames != nil:
    query_774539.add "LoadBalancerNames", LoadBalancerNames
  add(query_774539, "Version", newJString(Version))
  result = call_774538.call(nil, query_774539, nil, nil, nil)

var getDetachLoadBalancers* = Call_GetDetachLoadBalancers_774523(
    name: "getDetachLoadBalancers", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DetachLoadBalancers",
    validator: validate_GetDetachLoadBalancers_774524, base: "/",
    url: url_GetDetachLoadBalancers_774525, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDisableMetricsCollection_774575 = ref object of OpenApiRestCall_772597
proc url_PostDisableMetricsCollection_774577(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDisableMetricsCollection_774576(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disables group metrics for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774578 = query.getOrDefault("Action")
  valid_774578 = validateParameter(valid_774578, JString, required = true, default = newJString(
      "DisableMetricsCollection"))
  if valid_774578 != nil:
    section.add "Action", valid_774578
  var valid_774579 = query.getOrDefault("Version")
  valid_774579 = validateParameter(valid_774579, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_774579 != nil:
    section.add "Version", valid_774579
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774580 = header.getOrDefault("X-Amz-Date")
  valid_774580 = validateParameter(valid_774580, JString, required = false,
                                 default = nil)
  if valid_774580 != nil:
    section.add "X-Amz-Date", valid_774580
  var valid_774581 = header.getOrDefault("X-Amz-Security-Token")
  valid_774581 = validateParameter(valid_774581, JString, required = false,
                                 default = nil)
  if valid_774581 != nil:
    section.add "X-Amz-Security-Token", valid_774581
  var valid_774582 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774582 = validateParameter(valid_774582, JString, required = false,
                                 default = nil)
  if valid_774582 != nil:
    section.add "X-Amz-Content-Sha256", valid_774582
  var valid_774583 = header.getOrDefault("X-Amz-Algorithm")
  valid_774583 = validateParameter(valid_774583, JString, required = false,
                                 default = nil)
  if valid_774583 != nil:
    section.add "X-Amz-Algorithm", valid_774583
  var valid_774584 = header.getOrDefault("X-Amz-Signature")
  valid_774584 = validateParameter(valid_774584, JString, required = false,
                                 default = nil)
  if valid_774584 != nil:
    section.add "X-Amz-Signature", valid_774584
  var valid_774585 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774585 = validateParameter(valid_774585, JString, required = false,
                                 default = nil)
  if valid_774585 != nil:
    section.add "X-Amz-SignedHeaders", valid_774585
  var valid_774586 = header.getOrDefault("X-Amz-Credential")
  valid_774586 = validateParameter(valid_774586, JString, required = false,
                                 default = nil)
  if valid_774586 != nil:
    section.add "X-Amz-Credential", valid_774586
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are disabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_774587 = formData.getOrDefault("AutoScalingGroupName")
  valid_774587 = validateParameter(valid_774587, JString, required = true,
                                 default = nil)
  if valid_774587 != nil:
    section.add "AutoScalingGroupName", valid_774587
  var valid_774588 = formData.getOrDefault("Metrics")
  valid_774588 = validateParameter(valid_774588, JArray, required = false,
                                 default = nil)
  if valid_774588 != nil:
    section.add "Metrics", valid_774588
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774589: Call_PostDisableMetricsCollection_774575; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disables group metrics for the specified Auto Scaling group.
  ## 
  let valid = call_774589.validator(path, query, header, formData, body)
  let scheme = call_774589.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774589.url(scheme.get, call_774589.host, call_774589.base,
                         call_774589.route, valid.getOrDefault("path"))
  result = hook(call_774589, url, valid)

proc call*(call_774590: Call_PostDisableMetricsCollection_774575;
          AutoScalingGroupName: string; Metrics: JsonNode = nil;
          Action: string = "DisableMetricsCollection";
          Version: string = "2011-01-01"): Recallable =
  ## postDisableMetricsCollection
  ## Disables group metrics for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are disabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774591 = newJObject()
  var formData_774592 = newJObject()
  add(formData_774592, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if Metrics != nil:
    formData_774592.add "Metrics", Metrics
  add(query_774591, "Action", newJString(Action))
  add(query_774591, "Version", newJString(Version))
  result = call_774590.call(nil, query_774591, nil, formData_774592, nil)

var postDisableMetricsCollection* = Call_PostDisableMetricsCollection_774575(
    name: "postDisableMetricsCollection", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DisableMetricsCollection",
    validator: validate_PostDisableMetricsCollection_774576, base: "/",
    url: url_PostDisableMetricsCollection_774577,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDisableMetricsCollection_774558 = ref object of OpenApiRestCall_772597
proc url_GetDisableMetricsCollection_774560(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDisableMetricsCollection_774559(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disables group metrics for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are disabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_774561 = query.getOrDefault("AutoScalingGroupName")
  valid_774561 = validateParameter(valid_774561, JString, required = true,
                                 default = nil)
  if valid_774561 != nil:
    section.add "AutoScalingGroupName", valid_774561
  var valid_774562 = query.getOrDefault("Action")
  valid_774562 = validateParameter(valid_774562, JString, required = true, default = newJString(
      "DisableMetricsCollection"))
  if valid_774562 != nil:
    section.add "Action", valid_774562
  var valid_774563 = query.getOrDefault("Metrics")
  valid_774563 = validateParameter(valid_774563, JArray, required = false,
                                 default = nil)
  if valid_774563 != nil:
    section.add "Metrics", valid_774563
  var valid_774564 = query.getOrDefault("Version")
  valid_774564 = validateParameter(valid_774564, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_774564 != nil:
    section.add "Version", valid_774564
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774565 = header.getOrDefault("X-Amz-Date")
  valid_774565 = validateParameter(valid_774565, JString, required = false,
                                 default = nil)
  if valid_774565 != nil:
    section.add "X-Amz-Date", valid_774565
  var valid_774566 = header.getOrDefault("X-Amz-Security-Token")
  valid_774566 = validateParameter(valid_774566, JString, required = false,
                                 default = nil)
  if valid_774566 != nil:
    section.add "X-Amz-Security-Token", valid_774566
  var valid_774567 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774567 = validateParameter(valid_774567, JString, required = false,
                                 default = nil)
  if valid_774567 != nil:
    section.add "X-Amz-Content-Sha256", valid_774567
  var valid_774568 = header.getOrDefault("X-Amz-Algorithm")
  valid_774568 = validateParameter(valid_774568, JString, required = false,
                                 default = nil)
  if valid_774568 != nil:
    section.add "X-Amz-Algorithm", valid_774568
  var valid_774569 = header.getOrDefault("X-Amz-Signature")
  valid_774569 = validateParameter(valid_774569, JString, required = false,
                                 default = nil)
  if valid_774569 != nil:
    section.add "X-Amz-Signature", valid_774569
  var valid_774570 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774570 = validateParameter(valid_774570, JString, required = false,
                                 default = nil)
  if valid_774570 != nil:
    section.add "X-Amz-SignedHeaders", valid_774570
  var valid_774571 = header.getOrDefault("X-Amz-Credential")
  valid_774571 = validateParameter(valid_774571, JString, required = false,
                                 default = nil)
  if valid_774571 != nil:
    section.add "X-Amz-Credential", valid_774571
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774572: Call_GetDisableMetricsCollection_774558; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disables group metrics for the specified Auto Scaling group.
  ## 
  let valid = call_774572.validator(path, query, header, formData, body)
  let scheme = call_774572.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774572.url(scheme.get, call_774572.host, call_774572.base,
                         call_774572.route, valid.getOrDefault("path"))
  result = hook(call_774572, url, valid)

proc call*(call_774573: Call_GetDisableMetricsCollection_774558;
          AutoScalingGroupName: string;
          Action: string = "DisableMetricsCollection"; Metrics: JsonNode = nil;
          Version: string = "2011-01-01"): Recallable =
  ## getDisableMetricsCollection
  ## Disables group metrics for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are disabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  ##   Version: string (required)
  var query_774574 = newJObject()
  add(query_774574, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_774574, "Action", newJString(Action))
  if Metrics != nil:
    query_774574.add "Metrics", Metrics
  add(query_774574, "Version", newJString(Version))
  result = call_774573.call(nil, query_774574, nil, nil, nil)

var getDisableMetricsCollection* = Call_GetDisableMetricsCollection_774558(
    name: "getDisableMetricsCollection", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DisableMetricsCollection",
    validator: validate_GetDisableMetricsCollection_774559, base: "/",
    url: url_GetDisableMetricsCollection_774560,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostEnableMetricsCollection_774611 = ref object of OpenApiRestCall_772597
proc url_PostEnableMetricsCollection_774613(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostEnableMetricsCollection_774612(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Enables group metrics for the specified Auto Scaling group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html">Monitoring Your Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774614 = query.getOrDefault("Action")
  valid_774614 = validateParameter(valid_774614, JString, required = true, default = newJString(
      "EnableMetricsCollection"))
  if valid_774614 != nil:
    section.add "Action", valid_774614
  var valid_774615 = query.getOrDefault("Version")
  valid_774615 = validateParameter(valid_774615, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_774615 != nil:
    section.add "Version", valid_774615
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774616 = header.getOrDefault("X-Amz-Date")
  valid_774616 = validateParameter(valid_774616, JString, required = false,
                                 default = nil)
  if valid_774616 != nil:
    section.add "X-Amz-Date", valid_774616
  var valid_774617 = header.getOrDefault("X-Amz-Security-Token")
  valid_774617 = validateParameter(valid_774617, JString, required = false,
                                 default = nil)
  if valid_774617 != nil:
    section.add "X-Amz-Security-Token", valid_774617
  var valid_774618 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774618 = validateParameter(valid_774618, JString, required = false,
                                 default = nil)
  if valid_774618 != nil:
    section.add "X-Amz-Content-Sha256", valid_774618
  var valid_774619 = header.getOrDefault("X-Amz-Algorithm")
  valid_774619 = validateParameter(valid_774619, JString, required = false,
                                 default = nil)
  if valid_774619 != nil:
    section.add "X-Amz-Algorithm", valid_774619
  var valid_774620 = header.getOrDefault("X-Amz-Signature")
  valid_774620 = validateParameter(valid_774620, JString, required = false,
                                 default = nil)
  if valid_774620 != nil:
    section.add "X-Amz-Signature", valid_774620
  var valid_774621 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774621 = validateParameter(valid_774621, JString, required = false,
                                 default = nil)
  if valid_774621 != nil:
    section.add "X-Amz-SignedHeaders", valid_774621
  var valid_774622 = header.getOrDefault("X-Amz-Credential")
  valid_774622 = validateParameter(valid_774622, JString, required = false,
                                 default = nil)
  if valid_774622 != nil:
    section.add "X-Amz-Credential", valid_774622
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are enabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  ##   Granularity: JString (required)
  ##              : The granularity to associate with the metrics to collect. The only valid value is <code>1Minute</code>.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_774623 = formData.getOrDefault("AutoScalingGroupName")
  valid_774623 = validateParameter(valid_774623, JString, required = true,
                                 default = nil)
  if valid_774623 != nil:
    section.add "AutoScalingGroupName", valid_774623
  var valid_774624 = formData.getOrDefault("Metrics")
  valid_774624 = validateParameter(valid_774624, JArray, required = false,
                                 default = nil)
  if valid_774624 != nil:
    section.add "Metrics", valid_774624
  var valid_774625 = formData.getOrDefault("Granularity")
  valid_774625 = validateParameter(valid_774625, JString, required = true,
                                 default = nil)
  if valid_774625 != nil:
    section.add "Granularity", valid_774625
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774626: Call_PostEnableMetricsCollection_774611; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Enables group metrics for the specified Auto Scaling group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html">Monitoring Your Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ## 
  let valid = call_774626.validator(path, query, header, formData, body)
  let scheme = call_774626.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774626.url(scheme.get, call_774626.host, call_774626.base,
                         call_774626.route, valid.getOrDefault("path"))
  result = hook(call_774626, url, valid)

proc call*(call_774627: Call_PostEnableMetricsCollection_774611;
          AutoScalingGroupName: string; Granularity: string;
          Metrics: JsonNode = nil; Action: string = "EnableMetricsCollection";
          Version: string = "2011-01-01"): Recallable =
  ## postEnableMetricsCollection
  ## Enables group metrics for the specified Auto Scaling group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html">Monitoring Your Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are enabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  ##   Granularity: string (required)
  ##              : The granularity to associate with the metrics to collect. The only valid value is <code>1Minute</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774628 = newJObject()
  var formData_774629 = newJObject()
  add(formData_774629, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if Metrics != nil:
    formData_774629.add "Metrics", Metrics
  add(formData_774629, "Granularity", newJString(Granularity))
  add(query_774628, "Action", newJString(Action))
  add(query_774628, "Version", newJString(Version))
  result = call_774627.call(nil, query_774628, nil, formData_774629, nil)

var postEnableMetricsCollection* = Call_PostEnableMetricsCollection_774611(
    name: "postEnableMetricsCollection", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=EnableMetricsCollection",
    validator: validate_PostEnableMetricsCollection_774612, base: "/",
    url: url_PostEnableMetricsCollection_774613,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetEnableMetricsCollection_774593 = ref object of OpenApiRestCall_772597
proc url_GetEnableMetricsCollection_774595(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetEnableMetricsCollection_774594(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Enables group metrics for the specified Auto Scaling group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html">Monitoring Your Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Granularity: JString (required)
  ##              : The granularity to associate with the metrics to collect. The only valid value is <code>1Minute</code>.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are enabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Granularity` field"
  var valid_774596 = query.getOrDefault("Granularity")
  valid_774596 = validateParameter(valid_774596, JString, required = true,
                                 default = nil)
  if valid_774596 != nil:
    section.add "Granularity", valid_774596
  var valid_774597 = query.getOrDefault("AutoScalingGroupName")
  valid_774597 = validateParameter(valid_774597, JString, required = true,
                                 default = nil)
  if valid_774597 != nil:
    section.add "AutoScalingGroupName", valid_774597
  var valid_774598 = query.getOrDefault("Action")
  valid_774598 = validateParameter(valid_774598, JString, required = true, default = newJString(
      "EnableMetricsCollection"))
  if valid_774598 != nil:
    section.add "Action", valid_774598
  var valid_774599 = query.getOrDefault("Metrics")
  valid_774599 = validateParameter(valid_774599, JArray, required = false,
                                 default = nil)
  if valid_774599 != nil:
    section.add "Metrics", valid_774599
  var valid_774600 = query.getOrDefault("Version")
  valid_774600 = validateParameter(valid_774600, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_774600 != nil:
    section.add "Version", valid_774600
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774601 = header.getOrDefault("X-Amz-Date")
  valid_774601 = validateParameter(valid_774601, JString, required = false,
                                 default = nil)
  if valid_774601 != nil:
    section.add "X-Amz-Date", valid_774601
  var valid_774602 = header.getOrDefault("X-Amz-Security-Token")
  valid_774602 = validateParameter(valid_774602, JString, required = false,
                                 default = nil)
  if valid_774602 != nil:
    section.add "X-Amz-Security-Token", valid_774602
  var valid_774603 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774603 = validateParameter(valid_774603, JString, required = false,
                                 default = nil)
  if valid_774603 != nil:
    section.add "X-Amz-Content-Sha256", valid_774603
  var valid_774604 = header.getOrDefault("X-Amz-Algorithm")
  valid_774604 = validateParameter(valid_774604, JString, required = false,
                                 default = nil)
  if valid_774604 != nil:
    section.add "X-Amz-Algorithm", valid_774604
  var valid_774605 = header.getOrDefault("X-Amz-Signature")
  valid_774605 = validateParameter(valid_774605, JString, required = false,
                                 default = nil)
  if valid_774605 != nil:
    section.add "X-Amz-Signature", valid_774605
  var valid_774606 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774606 = validateParameter(valid_774606, JString, required = false,
                                 default = nil)
  if valid_774606 != nil:
    section.add "X-Amz-SignedHeaders", valid_774606
  var valid_774607 = header.getOrDefault("X-Amz-Credential")
  valid_774607 = validateParameter(valid_774607, JString, required = false,
                                 default = nil)
  if valid_774607 != nil:
    section.add "X-Amz-Credential", valid_774607
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774608: Call_GetEnableMetricsCollection_774593; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Enables group metrics for the specified Auto Scaling group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html">Monitoring Your Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ## 
  let valid = call_774608.validator(path, query, header, formData, body)
  let scheme = call_774608.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774608.url(scheme.get, call_774608.host, call_774608.base,
                         call_774608.route, valid.getOrDefault("path"))
  result = hook(call_774608, url, valid)

proc call*(call_774609: Call_GetEnableMetricsCollection_774593;
          Granularity: string; AutoScalingGroupName: string;
          Action: string = "EnableMetricsCollection"; Metrics: JsonNode = nil;
          Version: string = "2011-01-01"): Recallable =
  ## getEnableMetricsCollection
  ## Enables group metrics for the specified Auto Scaling group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html">Monitoring Your Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   Granularity: string (required)
  ##              : The granularity to associate with the metrics to collect. The only valid value is <code>1Minute</code>.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are enabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  ##   Version: string (required)
  var query_774610 = newJObject()
  add(query_774610, "Granularity", newJString(Granularity))
  add(query_774610, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_774610, "Action", newJString(Action))
  if Metrics != nil:
    query_774610.add "Metrics", Metrics
  add(query_774610, "Version", newJString(Version))
  result = call_774609.call(nil, query_774610, nil, nil, nil)

var getEnableMetricsCollection* = Call_GetEnableMetricsCollection_774593(
    name: "getEnableMetricsCollection", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=EnableMetricsCollection",
    validator: validate_GetEnableMetricsCollection_774594, base: "/",
    url: url_GetEnableMetricsCollection_774595,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostEnterStandby_774648 = ref object of OpenApiRestCall_772597
proc url_PostEnterStandby_774650(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostEnterStandby_774649(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Moves the specified instances into the standby state.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774651 = query.getOrDefault("Action")
  valid_774651 = validateParameter(valid_774651, JString, required = true,
                                 default = newJString("EnterStandby"))
  if valid_774651 != nil:
    section.add "Action", valid_774651
  var valid_774652 = query.getOrDefault("Version")
  valid_774652 = validateParameter(valid_774652, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_774652 != nil:
    section.add "Version", valid_774652
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774653 = header.getOrDefault("X-Amz-Date")
  valid_774653 = validateParameter(valid_774653, JString, required = false,
                                 default = nil)
  if valid_774653 != nil:
    section.add "X-Amz-Date", valid_774653
  var valid_774654 = header.getOrDefault("X-Amz-Security-Token")
  valid_774654 = validateParameter(valid_774654, JString, required = false,
                                 default = nil)
  if valid_774654 != nil:
    section.add "X-Amz-Security-Token", valid_774654
  var valid_774655 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774655 = validateParameter(valid_774655, JString, required = false,
                                 default = nil)
  if valid_774655 != nil:
    section.add "X-Amz-Content-Sha256", valid_774655
  var valid_774656 = header.getOrDefault("X-Amz-Algorithm")
  valid_774656 = validateParameter(valid_774656, JString, required = false,
                                 default = nil)
  if valid_774656 != nil:
    section.add "X-Amz-Algorithm", valid_774656
  var valid_774657 = header.getOrDefault("X-Amz-Signature")
  valid_774657 = validateParameter(valid_774657, JString, required = false,
                                 default = nil)
  if valid_774657 != nil:
    section.add "X-Amz-Signature", valid_774657
  var valid_774658 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774658 = validateParameter(valid_774658, JString, required = false,
                                 default = nil)
  if valid_774658 != nil:
    section.add "X-Amz-SignedHeaders", valid_774658
  var valid_774659 = header.getOrDefault("X-Amz-Credential")
  valid_774659 = validateParameter(valid_774659, JString, required = false,
                                 default = nil)
  if valid_774659 != nil:
    section.add "X-Amz-Credential", valid_774659
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   ShouldDecrementDesiredCapacity: JBool (required)
  ##                                 : Indicates whether to decrement the desired capacity of the Auto Scaling group by the number of instances moved to <code>Standby</code> mode.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_774660 = formData.getOrDefault("AutoScalingGroupName")
  valid_774660 = validateParameter(valid_774660, JString, required = true,
                                 default = nil)
  if valid_774660 != nil:
    section.add "AutoScalingGroupName", valid_774660
  var valid_774661 = formData.getOrDefault("InstanceIds")
  valid_774661 = validateParameter(valid_774661, JArray, required = false,
                                 default = nil)
  if valid_774661 != nil:
    section.add "InstanceIds", valid_774661
  var valid_774662 = formData.getOrDefault("ShouldDecrementDesiredCapacity")
  valid_774662 = validateParameter(valid_774662, JBool, required = true, default = nil)
  if valid_774662 != nil:
    section.add "ShouldDecrementDesiredCapacity", valid_774662
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774663: Call_PostEnterStandby_774648; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Moves the specified instances into the standby state.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_774663.validator(path, query, header, formData, body)
  let scheme = call_774663.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774663.url(scheme.get, call_774663.host, call_774663.base,
                         call_774663.route, valid.getOrDefault("path"))
  result = hook(call_774663, url, valid)

proc call*(call_774664: Call_PostEnterStandby_774648; AutoScalingGroupName: string;
          ShouldDecrementDesiredCapacity: bool; InstanceIds: JsonNode = nil;
          Action: string = "EnterStandby"; Version: string = "2011-01-01"): Recallable =
  ## postEnterStandby
  ## <p>Moves the specified instances into the standby state.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   ShouldDecrementDesiredCapacity: bool (required)
  ##                                 : Indicates whether to decrement the desired capacity of the Auto Scaling group by the number of instances moved to <code>Standby</code> mode.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774665 = newJObject()
  var formData_774666 = newJObject()
  add(formData_774666, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if InstanceIds != nil:
    formData_774666.add "InstanceIds", InstanceIds
  add(formData_774666, "ShouldDecrementDesiredCapacity",
      newJBool(ShouldDecrementDesiredCapacity))
  add(query_774665, "Action", newJString(Action))
  add(query_774665, "Version", newJString(Version))
  result = call_774664.call(nil, query_774665, nil, formData_774666, nil)

var postEnterStandby* = Call_PostEnterStandby_774648(name: "postEnterStandby",
    meth: HttpMethod.HttpPost, host: "autoscaling.amazonaws.com",
    route: "/#Action=EnterStandby", validator: validate_PostEnterStandby_774649,
    base: "/", url: url_PostEnterStandby_774650,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetEnterStandby_774630 = ref object of OpenApiRestCall_772597
proc url_GetEnterStandby_774632(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetEnterStandby_774631(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Moves the specified instances into the standby state.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   ShouldDecrementDesiredCapacity: JBool (required)
  ##                                 : Indicates whether to decrement the desired capacity of the Auto Scaling group by the number of instances moved to <code>Standby</code> mode.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_774633 = query.getOrDefault("AutoScalingGroupName")
  valid_774633 = validateParameter(valid_774633, JString, required = true,
                                 default = nil)
  if valid_774633 != nil:
    section.add "AutoScalingGroupName", valid_774633
  var valid_774634 = query.getOrDefault("Action")
  valid_774634 = validateParameter(valid_774634, JString, required = true,
                                 default = newJString("EnterStandby"))
  if valid_774634 != nil:
    section.add "Action", valid_774634
  var valid_774635 = query.getOrDefault("ShouldDecrementDesiredCapacity")
  valid_774635 = validateParameter(valid_774635, JBool, required = true, default = nil)
  if valid_774635 != nil:
    section.add "ShouldDecrementDesiredCapacity", valid_774635
  var valid_774636 = query.getOrDefault("InstanceIds")
  valid_774636 = validateParameter(valid_774636, JArray, required = false,
                                 default = nil)
  if valid_774636 != nil:
    section.add "InstanceIds", valid_774636
  var valid_774637 = query.getOrDefault("Version")
  valid_774637 = validateParameter(valid_774637, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_774637 != nil:
    section.add "Version", valid_774637
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774638 = header.getOrDefault("X-Amz-Date")
  valid_774638 = validateParameter(valid_774638, JString, required = false,
                                 default = nil)
  if valid_774638 != nil:
    section.add "X-Amz-Date", valid_774638
  var valid_774639 = header.getOrDefault("X-Amz-Security-Token")
  valid_774639 = validateParameter(valid_774639, JString, required = false,
                                 default = nil)
  if valid_774639 != nil:
    section.add "X-Amz-Security-Token", valid_774639
  var valid_774640 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774640 = validateParameter(valid_774640, JString, required = false,
                                 default = nil)
  if valid_774640 != nil:
    section.add "X-Amz-Content-Sha256", valid_774640
  var valid_774641 = header.getOrDefault("X-Amz-Algorithm")
  valid_774641 = validateParameter(valid_774641, JString, required = false,
                                 default = nil)
  if valid_774641 != nil:
    section.add "X-Amz-Algorithm", valid_774641
  var valid_774642 = header.getOrDefault("X-Amz-Signature")
  valid_774642 = validateParameter(valid_774642, JString, required = false,
                                 default = nil)
  if valid_774642 != nil:
    section.add "X-Amz-Signature", valid_774642
  var valid_774643 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774643 = validateParameter(valid_774643, JString, required = false,
                                 default = nil)
  if valid_774643 != nil:
    section.add "X-Amz-SignedHeaders", valid_774643
  var valid_774644 = header.getOrDefault("X-Amz-Credential")
  valid_774644 = validateParameter(valid_774644, JString, required = false,
                                 default = nil)
  if valid_774644 != nil:
    section.add "X-Amz-Credential", valid_774644
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774645: Call_GetEnterStandby_774630; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Moves the specified instances into the standby state.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_774645.validator(path, query, header, formData, body)
  let scheme = call_774645.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774645.url(scheme.get, call_774645.host, call_774645.base,
                         call_774645.route, valid.getOrDefault("path"))
  result = hook(call_774645, url, valid)

proc call*(call_774646: Call_GetEnterStandby_774630; AutoScalingGroupName: string;
          ShouldDecrementDesiredCapacity: bool; Action: string = "EnterStandby";
          InstanceIds: JsonNode = nil; Version: string = "2011-01-01"): Recallable =
  ## getEnterStandby
  ## <p>Moves the specified instances into the standby state.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   ShouldDecrementDesiredCapacity: bool (required)
  ##                                 : Indicates whether to decrement the desired capacity of the Auto Scaling group by the number of instances moved to <code>Standby</code> mode.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Version: string (required)
  var query_774647 = newJObject()
  add(query_774647, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_774647, "Action", newJString(Action))
  add(query_774647, "ShouldDecrementDesiredCapacity",
      newJBool(ShouldDecrementDesiredCapacity))
  if InstanceIds != nil:
    query_774647.add "InstanceIds", InstanceIds
  add(query_774647, "Version", newJString(Version))
  result = call_774646.call(nil, query_774647, nil, nil, nil)

var getEnterStandby* = Call_GetEnterStandby_774630(name: "getEnterStandby",
    meth: HttpMethod.HttpGet, host: "autoscaling.amazonaws.com",
    route: "/#Action=EnterStandby", validator: validate_GetEnterStandby_774631,
    base: "/", url: url_GetEnterStandby_774632, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostExecutePolicy_774687 = ref object of OpenApiRestCall_772597
proc url_PostExecutePolicy_774689(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostExecutePolicy_774688(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Executes the specified policy.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774690 = query.getOrDefault("Action")
  valid_774690 = validateParameter(valid_774690, JString, required = true,
                                 default = newJString("ExecutePolicy"))
  if valid_774690 != nil:
    section.add "Action", valid_774690
  var valid_774691 = query.getOrDefault("Version")
  valid_774691 = validateParameter(valid_774691, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_774691 != nil:
    section.add "Version", valid_774691
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774692 = header.getOrDefault("X-Amz-Date")
  valid_774692 = validateParameter(valid_774692, JString, required = false,
                                 default = nil)
  if valid_774692 != nil:
    section.add "X-Amz-Date", valid_774692
  var valid_774693 = header.getOrDefault("X-Amz-Security-Token")
  valid_774693 = validateParameter(valid_774693, JString, required = false,
                                 default = nil)
  if valid_774693 != nil:
    section.add "X-Amz-Security-Token", valid_774693
  var valid_774694 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774694 = validateParameter(valid_774694, JString, required = false,
                                 default = nil)
  if valid_774694 != nil:
    section.add "X-Amz-Content-Sha256", valid_774694
  var valid_774695 = header.getOrDefault("X-Amz-Algorithm")
  valid_774695 = validateParameter(valid_774695, JString, required = false,
                                 default = nil)
  if valid_774695 != nil:
    section.add "X-Amz-Algorithm", valid_774695
  var valid_774696 = header.getOrDefault("X-Amz-Signature")
  valid_774696 = validateParameter(valid_774696, JString, required = false,
                                 default = nil)
  if valid_774696 != nil:
    section.add "X-Amz-Signature", valid_774696
  var valid_774697 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774697 = validateParameter(valid_774697, JString, required = false,
                                 default = nil)
  if valid_774697 != nil:
    section.add "X-Amz-SignedHeaders", valid_774697
  var valid_774698 = header.getOrDefault("X-Amz-Credential")
  valid_774698 = validateParameter(valid_774698, JString, required = false,
                                 default = nil)
  if valid_774698 != nil:
    section.add "X-Amz-Credential", valid_774698
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   PolicyName: JString (required)
  ##             : The name or ARN of the policy.
  ##   MetricValue: JFloat
  ##              : <p>The metric value to compare to <code>BreachThreshold</code>. This enables you to execute a policy of type <code>StepScaling</code> and determine which step adjustment to use. For example, if the breach threshold is 50 and you want to use a step adjustment with a lower bound of 0 and an upper bound of 10, you can set the metric value to 59.</p> <p>If you specify a metric value that doesn't correspond to a step adjustment for the policy, the call returns an error.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   HonorCooldown: JBool
  ##                : <p>Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before executing the policy.</p> <p>This parameter is not supported if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   BreachThreshold: JFloat
  ##                  : <p>The breach threshold for the alarm.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  section = newJObject()
  var valid_774699 = formData.getOrDefault("AutoScalingGroupName")
  valid_774699 = validateParameter(valid_774699, JString, required = false,
                                 default = nil)
  if valid_774699 != nil:
    section.add "AutoScalingGroupName", valid_774699
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_774700 = formData.getOrDefault("PolicyName")
  valid_774700 = validateParameter(valid_774700, JString, required = true,
                                 default = nil)
  if valid_774700 != nil:
    section.add "PolicyName", valid_774700
  var valid_774701 = formData.getOrDefault("MetricValue")
  valid_774701 = validateParameter(valid_774701, JFloat, required = false,
                                 default = nil)
  if valid_774701 != nil:
    section.add "MetricValue", valid_774701
  var valid_774702 = formData.getOrDefault("HonorCooldown")
  valid_774702 = validateParameter(valid_774702, JBool, required = false, default = nil)
  if valid_774702 != nil:
    section.add "HonorCooldown", valid_774702
  var valid_774703 = formData.getOrDefault("BreachThreshold")
  valid_774703 = validateParameter(valid_774703, JFloat, required = false,
                                 default = nil)
  if valid_774703 != nil:
    section.add "BreachThreshold", valid_774703
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774704: Call_PostExecutePolicy_774687; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Executes the specified policy.
  ## 
  let valid = call_774704.validator(path, query, header, formData, body)
  let scheme = call_774704.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774704.url(scheme.get, call_774704.host, call_774704.base,
                         call_774704.route, valid.getOrDefault("path"))
  result = hook(call_774704, url, valid)

proc call*(call_774705: Call_PostExecutePolicy_774687; PolicyName: string;
          AutoScalingGroupName: string = ""; MetricValue: float = 0.0;
          HonorCooldown: bool = false; BreachThreshold: float = 0.0;
          Action: string = "ExecutePolicy"; Version: string = "2011-01-01"): Recallable =
  ## postExecutePolicy
  ## Executes the specified policy.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   PolicyName: string (required)
  ##             : The name or ARN of the policy.
  ##   MetricValue: float
  ##              : <p>The metric value to compare to <code>BreachThreshold</code>. This enables you to execute a policy of type <code>StepScaling</code> and determine which step adjustment to use. For example, if the breach threshold is 50 and you want to use a step adjustment with a lower bound of 0 and an upper bound of 10, you can set the metric value to 59.</p> <p>If you specify a metric value that doesn't correspond to a step adjustment for the policy, the call returns an error.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   HonorCooldown: bool
  ##                : <p>Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before executing the policy.</p> <p>This parameter is not supported if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   BreachThreshold: float
  ##                  : <p>The breach threshold for the alarm.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774706 = newJObject()
  var formData_774707 = newJObject()
  add(formData_774707, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_774707, "PolicyName", newJString(PolicyName))
  add(formData_774707, "MetricValue", newJFloat(MetricValue))
  add(formData_774707, "HonorCooldown", newJBool(HonorCooldown))
  add(formData_774707, "BreachThreshold", newJFloat(BreachThreshold))
  add(query_774706, "Action", newJString(Action))
  add(query_774706, "Version", newJString(Version))
  result = call_774705.call(nil, query_774706, nil, formData_774707, nil)

var postExecutePolicy* = Call_PostExecutePolicy_774687(name: "postExecutePolicy",
    meth: HttpMethod.HttpPost, host: "autoscaling.amazonaws.com",
    route: "/#Action=ExecutePolicy", validator: validate_PostExecutePolicy_774688,
    base: "/", url: url_PostExecutePolicy_774689,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetExecutePolicy_774667 = ref object of OpenApiRestCall_772597
proc url_GetExecutePolicy_774669(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetExecutePolicy_774668(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Executes the specified policy.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   MetricValue: JFloat
  ##              : <p>The metric value to compare to <code>BreachThreshold</code>. This enables you to execute a policy of type <code>StepScaling</code> and determine which step adjustment to use. For example, if the breach threshold is 50 and you want to use a step adjustment with a lower bound of 0 and an upper bound of 10, you can set the metric value to 59.</p> <p>If you specify a metric value that doesn't correspond to a step adjustment for the policy, the call returns an error.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   BreachThreshold: JFloat
  ##                  : <p>The breach threshold for the alarm.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   Action: JString (required)
  ##   HonorCooldown: JBool
  ##                : <p>Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before executing the policy.</p> <p>This parameter is not supported if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : The name or ARN of the policy.
  section = newJObject()
  var valid_774670 = query.getOrDefault("AutoScalingGroupName")
  valid_774670 = validateParameter(valid_774670, JString, required = false,
                                 default = nil)
  if valid_774670 != nil:
    section.add "AutoScalingGroupName", valid_774670
  var valid_774671 = query.getOrDefault("MetricValue")
  valid_774671 = validateParameter(valid_774671, JFloat, required = false,
                                 default = nil)
  if valid_774671 != nil:
    section.add "MetricValue", valid_774671
  var valid_774672 = query.getOrDefault("BreachThreshold")
  valid_774672 = validateParameter(valid_774672, JFloat, required = false,
                                 default = nil)
  if valid_774672 != nil:
    section.add "BreachThreshold", valid_774672
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774673 = query.getOrDefault("Action")
  valid_774673 = validateParameter(valid_774673, JString, required = true,
                                 default = newJString("ExecutePolicy"))
  if valid_774673 != nil:
    section.add "Action", valid_774673
  var valid_774674 = query.getOrDefault("HonorCooldown")
  valid_774674 = validateParameter(valid_774674, JBool, required = false, default = nil)
  if valid_774674 != nil:
    section.add "HonorCooldown", valid_774674
  var valid_774675 = query.getOrDefault("Version")
  valid_774675 = validateParameter(valid_774675, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_774675 != nil:
    section.add "Version", valid_774675
  var valid_774676 = query.getOrDefault("PolicyName")
  valid_774676 = validateParameter(valid_774676, JString, required = true,
                                 default = nil)
  if valid_774676 != nil:
    section.add "PolicyName", valid_774676
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774677 = header.getOrDefault("X-Amz-Date")
  valid_774677 = validateParameter(valid_774677, JString, required = false,
                                 default = nil)
  if valid_774677 != nil:
    section.add "X-Amz-Date", valid_774677
  var valid_774678 = header.getOrDefault("X-Amz-Security-Token")
  valid_774678 = validateParameter(valid_774678, JString, required = false,
                                 default = nil)
  if valid_774678 != nil:
    section.add "X-Amz-Security-Token", valid_774678
  var valid_774679 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774679 = validateParameter(valid_774679, JString, required = false,
                                 default = nil)
  if valid_774679 != nil:
    section.add "X-Amz-Content-Sha256", valid_774679
  var valid_774680 = header.getOrDefault("X-Amz-Algorithm")
  valid_774680 = validateParameter(valid_774680, JString, required = false,
                                 default = nil)
  if valid_774680 != nil:
    section.add "X-Amz-Algorithm", valid_774680
  var valid_774681 = header.getOrDefault("X-Amz-Signature")
  valid_774681 = validateParameter(valid_774681, JString, required = false,
                                 default = nil)
  if valid_774681 != nil:
    section.add "X-Amz-Signature", valid_774681
  var valid_774682 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774682 = validateParameter(valid_774682, JString, required = false,
                                 default = nil)
  if valid_774682 != nil:
    section.add "X-Amz-SignedHeaders", valid_774682
  var valid_774683 = header.getOrDefault("X-Amz-Credential")
  valid_774683 = validateParameter(valid_774683, JString, required = false,
                                 default = nil)
  if valid_774683 != nil:
    section.add "X-Amz-Credential", valid_774683
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774684: Call_GetExecutePolicy_774667; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Executes the specified policy.
  ## 
  let valid = call_774684.validator(path, query, header, formData, body)
  let scheme = call_774684.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774684.url(scheme.get, call_774684.host, call_774684.base,
                         call_774684.route, valid.getOrDefault("path"))
  result = hook(call_774684, url, valid)

proc call*(call_774685: Call_GetExecutePolicy_774667; PolicyName: string;
          AutoScalingGroupName: string = ""; MetricValue: float = 0.0;
          BreachThreshold: float = 0.0; Action: string = "ExecutePolicy";
          HonorCooldown: bool = false; Version: string = "2011-01-01"): Recallable =
  ## getExecutePolicy
  ## Executes the specified policy.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   MetricValue: float
  ##              : <p>The metric value to compare to <code>BreachThreshold</code>. This enables you to execute a policy of type <code>StepScaling</code> and determine which step adjustment to use. For example, if the breach threshold is 50 and you want to use a step adjustment with a lower bound of 0 and an upper bound of 10, you can set the metric value to 59.</p> <p>If you specify a metric value that doesn't correspond to a step adjustment for the policy, the call returns an error.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   BreachThreshold: float
  ##                  : <p>The breach threshold for the alarm.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   Action: string (required)
  ##   HonorCooldown: bool
  ##                : <p>Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before executing the policy.</p> <p>This parameter is not supported if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : The name or ARN of the policy.
  var query_774686 = newJObject()
  add(query_774686, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_774686, "MetricValue", newJFloat(MetricValue))
  add(query_774686, "BreachThreshold", newJFloat(BreachThreshold))
  add(query_774686, "Action", newJString(Action))
  add(query_774686, "HonorCooldown", newJBool(HonorCooldown))
  add(query_774686, "Version", newJString(Version))
  add(query_774686, "PolicyName", newJString(PolicyName))
  result = call_774685.call(nil, query_774686, nil, nil, nil)

var getExecutePolicy* = Call_GetExecutePolicy_774667(name: "getExecutePolicy",
    meth: HttpMethod.HttpGet, host: "autoscaling.amazonaws.com",
    route: "/#Action=ExecutePolicy", validator: validate_GetExecutePolicy_774668,
    base: "/", url: url_GetExecutePolicy_774669,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostExitStandby_774725 = ref object of OpenApiRestCall_772597
proc url_PostExitStandby_774727(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostExitStandby_774726(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Moves the specified instances out of the standby state.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774728 = query.getOrDefault("Action")
  valid_774728 = validateParameter(valid_774728, JString, required = true,
                                 default = newJString("ExitStandby"))
  if valid_774728 != nil:
    section.add "Action", valid_774728
  var valid_774729 = query.getOrDefault("Version")
  valid_774729 = validateParameter(valid_774729, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_774729 != nil:
    section.add "Version", valid_774729
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774730 = header.getOrDefault("X-Amz-Date")
  valid_774730 = validateParameter(valid_774730, JString, required = false,
                                 default = nil)
  if valid_774730 != nil:
    section.add "X-Amz-Date", valid_774730
  var valid_774731 = header.getOrDefault("X-Amz-Security-Token")
  valid_774731 = validateParameter(valid_774731, JString, required = false,
                                 default = nil)
  if valid_774731 != nil:
    section.add "X-Amz-Security-Token", valid_774731
  var valid_774732 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774732 = validateParameter(valid_774732, JString, required = false,
                                 default = nil)
  if valid_774732 != nil:
    section.add "X-Amz-Content-Sha256", valid_774732
  var valid_774733 = header.getOrDefault("X-Amz-Algorithm")
  valid_774733 = validateParameter(valid_774733, JString, required = false,
                                 default = nil)
  if valid_774733 != nil:
    section.add "X-Amz-Algorithm", valid_774733
  var valid_774734 = header.getOrDefault("X-Amz-Signature")
  valid_774734 = validateParameter(valid_774734, JString, required = false,
                                 default = nil)
  if valid_774734 != nil:
    section.add "X-Amz-Signature", valid_774734
  var valid_774735 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774735 = validateParameter(valid_774735, JString, required = false,
                                 default = nil)
  if valid_774735 != nil:
    section.add "X-Amz-SignedHeaders", valid_774735
  var valid_774736 = header.getOrDefault("X-Amz-Credential")
  valid_774736 = validateParameter(valid_774736, JString, required = false,
                                 default = nil)
  if valid_774736 != nil:
    section.add "X-Amz-Credential", valid_774736
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_774737 = formData.getOrDefault("AutoScalingGroupName")
  valid_774737 = validateParameter(valid_774737, JString, required = true,
                                 default = nil)
  if valid_774737 != nil:
    section.add "AutoScalingGroupName", valid_774737
  var valid_774738 = formData.getOrDefault("InstanceIds")
  valid_774738 = validateParameter(valid_774738, JArray, required = false,
                                 default = nil)
  if valid_774738 != nil:
    section.add "InstanceIds", valid_774738
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774739: Call_PostExitStandby_774725; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Moves the specified instances out of the standby state.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_774739.validator(path, query, header, formData, body)
  let scheme = call_774739.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774739.url(scheme.get, call_774739.host, call_774739.base,
                         call_774739.route, valid.getOrDefault("path"))
  result = hook(call_774739, url, valid)

proc call*(call_774740: Call_PostExitStandby_774725; AutoScalingGroupName: string;
          InstanceIds: JsonNode = nil; Action: string = "ExitStandby";
          Version: string = "2011-01-01"): Recallable =
  ## postExitStandby
  ## <p>Moves the specified instances out of the standby state.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774741 = newJObject()
  var formData_774742 = newJObject()
  add(formData_774742, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if InstanceIds != nil:
    formData_774742.add "InstanceIds", InstanceIds
  add(query_774741, "Action", newJString(Action))
  add(query_774741, "Version", newJString(Version))
  result = call_774740.call(nil, query_774741, nil, formData_774742, nil)

var postExitStandby* = Call_PostExitStandby_774725(name: "postExitStandby",
    meth: HttpMethod.HttpPost, host: "autoscaling.amazonaws.com",
    route: "/#Action=ExitStandby", validator: validate_PostExitStandby_774726,
    base: "/", url: url_PostExitStandby_774727, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetExitStandby_774708 = ref object of OpenApiRestCall_772597
proc url_GetExitStandby_774710(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetExitStandby_774709(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Moves the specified instances out of the standby state.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_774711 = query.getOrDefault("AutoScalingGroupName")
  valid_774711 = validateParameter(valid_774711, JString, required = true,
                                 default = nil)
  if valid_774711 != nil:
    section.add "AutoScalingGroupName", valid_774711
  var valid_774712 = query.getOrDefault("Action")
  valid_774712 = validateParameter(valid_774712, JString, required = true,
                                 default = newJString("ExitStandby"))
  if valid_774712 != nil:
    section.add "Action", valid_774712
  var valid_774713 = query.getOrDefault("InstanceIds")
  valid_774713 = validateParameter(valid_774713, JArray, required = false,
                                 default = nil)
  if valid_774713 != nil:
    section.add "InstanceIds", valid_774713
  var valid_774714 = query.getOrDefault("Version")
  valid_774714 = validateParameter(valid_774714, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_774714 != nil:
    section.add "Version", valid_774714
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774715 = header.getOrDefault("X-Amz-Date")
  valid_774715 = validateParameter(valid_774715, JString, required = false,
                                 default = nil)
  if valid_774715 != nil:
    section.add "X-Amz-Date", valid_774715
  var valid_774716 = header.getOrDefault("X-Amz-Security-Token")
  valid_774716 = validateParameter(valid_774716, JString, required = false,
                                 default = nil)
  if valid_774716 != nil:
    section.add "X-Amz-Security-Token", valid_774716
  var valid_774717 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774717 = validateParameter(valid_774717, JString, required = false,
                                 default = nil)
  if valid_774717 != nil:
    section.add "X-Amz-Content-Sha256", valid_774717
  var valid_774718 = header.getOrDefault("X-Amz-Algorithm")
  valid_774718 = validateParameter(valid_774718, JString, required = false,
                                 default = nil)
  if valid_774718 != nil:
    section.add "X-Amz-Algorithm", valid_774718
  var valid_774719 = header.getOrDefault("X-Amz-Signature")
  valid_774719 = validateParameter(valid_774719, JString, required = false,
                                 default = nil)
  if valid_774719 != nil:
    section.add "X-Amz-Signature", valid_774719
  var valid_774720 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774720 = validateParameter(valid_774720, JString, required = false,
                                 default = nil)
  if valid_774720 != nil:
    section.add "X-Amz-SignedHeaders", valid_774720
  var valid_774721 = header.getOrDefault("X-Amz-Credential")
  valid_774721 = validateParameter(valid_774721, JString, required = false,
                                 default = nil)
  if valid_774721 != nil:
    section.add "X-Amz-Credential", valid_774721
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774722: Call_GetExitStandby_774708; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Moves the specified instances out of the standby state.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_774722.validator(path, query, header, formData, body)
  let scheme = call_774722.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774722.url(scheme.get, call_774722.host, call_774722.base,
                         call_774722.route, valid.getOrDefault("path"))
  result = hook(call_774722, url, valid)

proc call*(call_774723: Call_GetExitStandby_774708; AutoScalingGroupName: string;
          Action: string = "ExitStandby"; InstanceIds: JsonNode = nil;
          Version: string = "2011-01-01"): Recallable =
  ## getExitStandby
  ## <p>Moves the specified instances out of the standby state.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Version: string (required)
  var query_774724 = newJObject()
  add(query_774724, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_774724, "Action", newJString(Action))
  if InstanceIds != nil:
    query_774724.add "InstanceIds", InstanceIds
  add(query_774724, "Version", newJString(Version))
  result = call_774723.call(nil, query_774724, nil, nil, nil)

var getExitStandby* = Call_GetExitStandby_774708(name: "getExitStandby",
    meth: HttpMethod.HttpGet, host: "autoscaling.amazonaws.com",
    route: "/#Action=ExitStandby", validator: validate_GetExitStandby_774709,
    base: "/", url: url_GetExitStandby_774710, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutLifecycleHook_774766 = ref object of OpenApiRestCall_772597
proc url_PostPutLifecycleHook_774768(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostPutLifecycleHook_774767(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates or updates a lifecycle hook for the specified Auto Scaling group.</p> <p>A lifecycle hook tells Amazon EC2 Auto Scaling to perform an action on an instance when the instance launches (before it is put into service) or as the instance terminates (before it is fully terminated).</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p> <b>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</b> </p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state using <a>RecordLifecycleActionHeartbeat</a>.</p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action using <a>CompleteLifecycleAction</a>.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.</p> <p>You can view the lifecycle hooks for an Auto Scaling group using <a>DescribeLifecycleHooks</a>. If you are no longer using a lifecycle hook, you can delete it using <a>DeleteLifecycleHook</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774769 = query.getOrDefault("Action")
  valid_774769 = validateParameter(valid_774769, JString, required = true,
                                 default = newJString("PutLifecycleHook"))
  if valid_774769 != nil:
    section.add "Action", valid_774769
  var valid_774770 = query.getOrDefault("Version")
  valid_774770 = validateParameter(valid_774770, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_774770 != nil:
    section.add "Version", valid_774770
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774771 = header.getOrDefault("X-Amz-Date")
  valid_774771 = validateParameter(valid_774771, JString, required = false,
                                 default = nil)
  if valid_774771 != nil:
    section.add "X-Amz-Date", valid_774771
  var valid_774772 = header.getOrDefault("X-Amz-Security-Token")
  valid_774772 = validateParameter(valid_774772, JString, required = false,
                                 default = nil)
  if valid_774772 != nil:
    section.add "X-Amz-Security-Token", valid_774772
  var valid_774773 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774773 = validateParameter(valid_774773, JString, required = false,
                                 default = nil)
  if valid_774773 != nil:
    section.add "X-Amz-Content-Sha256", valid_774773
  var valid_774774 = header.getOrDefault("X-Amz-Algorithm")
  valid_774774 = validateParameter(valid_774774, JString, required = false,
                                 default = nil)
  if valid_774774 != nil:
    section.add "X-Amz-Algorithm", valid_774774
  var valid_774775 = header.getOrDefault("X-Amz-Signature")
  valid_774775 = validateParameter(valid_774775, JString, required = false,
                                 default = nil)
  if valid_774775 != nil:
    section.add "X-Amz-Signature", valid_774775
  var valid_774776 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774776 = validateParameter(valid_774776, JString, required = false,
                                 default = nil)
  if valid_774776 != nil:
    section.add "X-Amz-SignedHeaders", valid_774776
  var valid_774777 = header.getOrDefault("X-Amz-Credential")
  valid_774777 = validateParameter(valid_774777, JString, required = false,
                                 default = nil)
  if valid_774777 != nil:
    section.add "X-Amz-Credential", valid_774777
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleTransition: JString
  ##                      : <p>The instance state to which you want to attach the lifecycle hook. The valid values are:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  ##   DefaultResult: JString
  ##                : Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>. The default value is <code>ABANDON</code>.
  ##   NotificationTargetARN: JString
  ##                        : <p>The ARN of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in the transition state for the lifecycle hook. This target can be either an SQS queue or an SNS topic.</p> <p>If you specify an empty string, this overrides the current ARN.</p> <p>This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key-value pair format when sending notifications to an Amazon SNS topic.</p> <p>When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test messages contain the following additional key-value pair: <code>"Event": "autoscaling:TEST_NOTIFICATION"</code>.</p>
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   NotificationMetadata: JString
  ##                       : Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.
  ##   HeartbeatTimeout: JInt
  ##                   : <p>The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from <code>30</code> to <code>7200</code> seconds. The default value is <code>3600</code> seconds (1 hour).</p> <p>If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action that you specified in the <code>DefaultResult</code> parameter. You can prevent the lifecycle hook from timing out by calling <a>RecordLifecycleActionHeartbeat</a>.</p>
  ##   RoleARN: JString
  ##          : <p>The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target, for example, an Amazon SNS topic or an Amazon SQS queue.</p> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_774778 = formData.getOrDefault("AutoScalingGroupName")
  valid_774778 = validateParameter(valid_774778, JString, required = true,
                                 default = nil)
  if valid_774778 != nil:
    section.add "AutoScalingGroupName", valid_774778
  var valid_774779 = formData.getOrDefault("LifecycleTransition")
  valid_774779 = validateParameter(valid_774779, JString, required = false,
                                 default = nil)
  if valid_774779 != nil:
    section.add "LifecycleTransition", valid_774779
  var valid_774780 = formData.getOrDefault("DefaultResult")
  valid_774780 = validateParameter(valid_774780, JString, required = false,
                                 default = nil)
  if valid_774780 != nil:
    section.add "DefaultResult", valid_774780
  var valid_774781 = formData.getOrDefault("NotificationTargetARN")
  valid_774781 = validateParameter(valid_774781, JString, required = false,
                                 default = nil)
  if valid_774781 != nil:
    section.add "NotificationTargetARN", valid_774781
  var valid_774782 = formData.getOrDefault("LifecycleHookName")
  valid_774782 = validateParameter(valid_774782, JString, required = true,
                                 default = nil)
  if valid_774782 != nil:
    section.add "LifecycleHookName", valid_774782
  var valid_774783 = formData.getOrDefault("NotificationMetadata")
  valid_774783 = validateParameter(valid_774783, JString, required = false,
                                 default = nil)
  if valid_774783 != nil:
    section.add "NotificationMetadata", valid_774783
  var valid_774784 = formData.getOrDefault("HeartbeatTimeout")
  valid_774784 = validateParameter(valid_774784, JInt, required = false, default = nil)
  if valid_774784 != nil:
    section.add "HeartbeatTimeout", valid_774784
  var valid_774785 = formData.getOrDefault("RoleARN")
  valid_774785 = validateParameter(valid_774785, JString, required = false,
                                 default = nil)
  if valid_774785 != nil:
    section.add "RoleARN", valid_774785
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774786: Call_PostPutLifecycleHook_774766; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates or updates a lifecycle hook for the specified Auto Scaling group.</p> <p>A lifecycle hook tells Amazon EC2 Auto Scaling to perform an action on an instance when the instance launches (before it is put into service) or as the instance terminates (before it is fully terminated).</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p> <b>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</b> </p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state using <a>RecordLifecycleActionHeartbeat</a>.</p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action using <a>CompleteLifecycleAction</a>.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.</p> <p>You can view the lifecycle hooks for an Auto Scaling group using <a>DescribeLifecycleHooks</a>. If you are no longer using a lifecycle hook, you can delete it using <a>DeleteLifecycleHook</a>.</p>
  ## 
  let valid = call_774786.validator(path, query, header, formData, body)
  let scheme = call_774786.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774786.url(scheme.get, call_774786.host, call_774786.base,
                         call_774786.route, valid.getOrDefault("path"))
  result = hook(call_774786, url, valid)

proc call*(call_774787: Call_PostPutLifecycleHook_774766;
          AutoScalingGroupName: string; LifecycleHookName: string;
          LifecycleTransition: string = ""; DefaultResult: string = "";
          Action: string = "PutLifecycleHook"; NotificationTargetARN: string = "";
          NotificationMetadata: string = ""; HeartbeatTimeout: int = 0;
          Version: string = "2011-01-01"; RoleARN: string = ""): Recallable =
  ## postPutLifecycleHook
  ## <p>Creates or updates a lifecycle hook for the specified Auto Scaling group.</p> <p>A lifecycle hook tells Amazon EC2 Auto Scaling to perform an action on an instance when the instance launches (before it is put into service) or as the instance terminates (before it is fully terminated).</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p> <b>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</b> </p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state using <a>RecordLifecycleActionHeartbeat</a>.</p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action using <a>CompleteLifecycleAction</a>.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.</p> <p>You can view the lifecycle hooks for an Auto Scaling group using <a>DescribeLifecycleHooks</a>. If you are no longer using a lifecycle hook, you can delete it using <a>DeleteLifecycleHook</a>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleTransition: string
  ##                      : <p>The instance state to which you want to attach the lifecycle hook. The valid values are:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  ##   DefaultResult: string
  ##                : Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>. The default value is <code>ABANDON</code>.
  ##   Action: string (required)
  ##   NotificationTargetARN: string
  ##                        : <p>The ARN of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in the transition state for the lifecycle hook. This target can be either an SQS queue or an SNS topic.</p> <p>If you specify an empty string, this overrides the current ARN.</p> <p>This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key-value pair format when sending notifications to an Amazon SNS topic.</p> <p>When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test messages contain the following additional key-value pair: <code>"Event": "autoscaling:TEST_NOTIFICATION"</code>.</p>
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   NotificationMetadata: string
  ##                       : Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.
  ##   HeartbeatTimeout: int
  ##                   : <p>The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from <code>30</code> to <code>7200</code> seconds. The default value is <code>3600</code> seconds (1 hour).</p> <p>If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action that you specified in the <code>DefaultResult</code> parameter. You can prevent the lifecycle hook from timing out by calling <a>RecordLifecycleActionHeartbeat</a>.</p>
  ##   Version: string (required)
  ##   RoleARN: string
  ##          : <p>The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target, for example, an Amazon SNS topic or an Amazon SQS queue.</p> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  var query_774788 = newJObject()
  var formData_774789 = newJObject()
  add(formData_774789, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_774789, "LifecycleTransition", newJString(LifecycleTransition))
  add(formData_774789, "DefaultResult", newJString(DefaultResult))
  add(query_774788, "Action", newJString(Action))
  add(formData_774789, "NotificationTargetARN", newJString(NotificationTargetARN))
  add(formData_774789, "LifecycleHookName", newJString(LifecycleHookName))
  add(formData_774789, "NotificationMetadata", newJString(NotificationMetadata))
  add(formData_774789, "HeartbeatTimeout", newJInt(HeartbeatTimeout))
  add(query_774788, "Version", newJString(Version))
  add(formData_774789, "RoleARN", newJString(RoleARN))
  result = call_774787.call(nil, query_774788, nil, formData_774789, nil)

var postPutLifecycleHook* = Call_PostPutLifecycleHook_774766(
    name: "postPutLifecycleHook", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=PutLifecycleHook",
    validator: validate_PostPutLifecycleHook_774767, base: "/",
    url: url_PostPutLifecycleHook_774768, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutLifecycleHook_774743 = ref object of OpenApiRestCall_772597
proc url_GetPutLifecycleHook_774745(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetPutLifecycleHook_774744(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Creates or updates a lifecycle hook for the specified Auto Scaling group.</p> <p>A lifecycle hook tells Amazon EC2 Auto Scaling to perform an action on an instance when the instance launches (before it is put into service) or as the instance terminates (before it is fully terminated).</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p> <b>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</b> </p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state using <a>RecordLifecycleActionHeartbeat</a>.</p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action using <a>CompleteLifecycleAction</a>.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.</p> <p>You can view the lifecycle hooks for an Auto Scaling group using <a>DescribeLifecycleHooks</a>. If you are no longer using a lifecycle hook, you can delete it using <a>DeleteLifecycleHook</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   NotificationTargetARN: JString
  ##                        : <p>The ARN of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in the transition state for the lifecycle hook. This target can be either an SQS queue or an SNS topic.</p> <p>If you specify an empty string, this overrides the current ARN.</p> <p>This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key-value pair format when sending notifications to an Amazon SNS topic.</p> <p>When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test messages contain the following additional key-value pair: <code>"Event": "autoscaling:TEST_NOTIFICATION"</code>.</p>
  ##   DefaultResult: JString
  ##                : Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>. The default value is <code>ABANDON</code>.
  ##   Action: JString (required)
  ##   RoleARN: JString
  ##          : <p>The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target, for example, an Amazon SNS topic or an Amazon SQS queue.</p> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  ##   LifecycleTransition: JString
  ##                      : <p>The instance state to which you want to attach the lifecycle hook. The valid values are:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  ##   NotificationMetadata: JString
  ##                       : Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.
  ##   HeartbeatTimeout: JInt
  ##                   : <p>The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from <code>30</code> to <code>7200</code> seconds. The default value is <code>3600</code> seconds (1 hour).</p> <p>If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action that you specified in the <code>DefaultResult</code> parameter. You can prevent the lifecycle hook from timing out by calling <a>RecordLifecycleActionHeartbeat</a>.</p>
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_774746 = query.getOrDefault("AutoScalingGroupName")
  valid_774746 = validateParameter(valid_774746, JString, required = true,
                                 default = nil)
  if valid_774746 != nil:
    section.add "AutoScalingGroupName", valid_774746
  var valid_774747 = query.getOrDefault("NotificationTargetARN")
  valid_774747 = validateParameter(valid_774747, JString, required = false,
                                 default = nil)
  if valid_774747 != nil:
    section.add "NotificationTargetARN", valid_774747
  var valid_774748 = query.getOrDefault("DefaultResult")
  valid_774748 = validateParameter(valid_774748, JString, required = false,
                                 default = nil)
  if valid_774748 != nil:
    section.add "DefaultResult", valid_774748
  var valid_774749 = query.getOrDefault("Action")
  valid_774749 = validateParameter(valid_774749, JString, required = true,
                                 default = newJString("PutLifecycleHook"))
  if valid_774749 != nil:
    section.add "Action", valid_774749
  var valid_774750 = query.getOrDefault("RoleARN")
  valid_774750 = validateParameter(valid_774750, JString, required = false,
                                 default = nil)
  if valid_774750 != nil:
    section.add "RoleARN", valid_774750
  var valid_774751 = query.getOrDefault("LifecycleTransition")
  valid_774751 = validateParameter(valid_774751, JString, required = false,
                                 default = nil)
  if valid_774751 != nil:
    section.add "LifecycleTransition", valid_774751
  var valid_774752 = query.getOrDefault("NotificationMetadata")
  valid_774752 = validateParameter(valid_774752, JString, required = false,
                                 default = nil)
  if valid_774752 != nil:
    section.add "NotificationMetadata", valid_774752
  var valid_774753 = query.getOrDefault("HeartbeatTimeout")
  valid_774753 = validateParameter(valid_774753, JInt, required = false, default = nil)
  if valid_774753 != nil:
    section.add "HeartbeatTimeout", valid_774753
  var valid_774754 = query.getOrDefault("LifecycleHookName")
  valid_774754 = validateParameter(valid_774754, JString, required = true,
                                 default = nil)
  if valid_774754 != nil:
    section.add "LifecycleHookName", valid_774754
  var valid_774755 = query.getOrDefault("Version")
  valid_774755 = validateParameter(valid_774755, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_774755 != nil:
    section.add "Version", valid_774755
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774756 = header.getOrDefault("X-Amz-Date")
  valid_774756 = validateParameter(valid_774756, JString, required = false,
                                 default = nil)
  if valid_774756 != nil:
    section.add "X-Amz-Date", valid_774756
  var valid_774757 = header.getOrDefault("X-Amz-Security-Token")
  valid_774757 = validateParameter(valid_774757, JString, required = false,
                                 default = nil)
  if valid_774757 != nil:
    section.add "X-Amz-Security-Token", valid_774757
  var valid_774758 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774758 = validateParameter(valid_774758, JString, required = false,
                                 default = nil)
  if valid_774758 != nil:
    section.add "X-Amz-Content-Sha256", valid_774758
  var valid_774759 = header.getOrDefault("X-Amz-Algorithm")
  valid_774759 = validateParameter(valid_774759, JString, required = false,
                                 default = nil)
  if valid_774759 != nil:
    section.add "X-Amz-Algorithm", valid_774759
  var valid_774760 = header.getOrDefault("X-Amz-Signature")
  valid_774760 = validateParameter(valid_774760, JString, required = false,
                                 default = nil)
  if valid_774760 != nil:
    section.add "X-Amz-Signature", valid_774760
  var valid_774761 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774761 = validateParameter(valid_774761, JString, required = false,
                                 default = nil)
  if valid_774761 != nil:
    section.add "X-Amz-SignedHeaders", valid_774761
  var valid_774762 = header.getOrDefault("X-Amz-Credential")
  valid_774762 = validateParameter(valid_774762, JString, required = false,
                                 default = nil)
  if valid_774762 != nil:
    section.add "X-Amz-Credential", valid_774762
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774763: Call_GetPutLifecycleHook_774743; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates or updates a lifecycle hook for the specified Auto Scaling group.</p> <p>A lifecycle hook tells Amazon EC2 Auto Scaling to perform an action on an instance when the instance launches (before it is put into service) or as the instance terminates (before it is fully terminated).</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p> <b>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</b> </p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state using <a>RecordLifecycleActionHeartbeat</a>.</p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action using <a>CompleteLifecycleAction</a>.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.</p> <p>You can view the lifecycle hooks for an Auto Scaling group using <a>DescribeLifecycleHooks</a>. If you are no longer using a lifecycle hook, you can delete it using <a>DeleteLifecycleHook</a>.</p>
  ## 
  let valid = call_774763.validator(path, query, header, formData, body)
  let scheme = call_774763.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774763.url(scheme.get, call_774763.host, call_774763.base,
                         call_774763.route, valid.getOrDefault("path"))
  result = hook(call_774763, url, valid)

proc call*(call_774764: Call_GetPutLifecycleHook_774743;
          AutoScalingGroupName: string; LifecycleHookName: string;
          NotificationTargetARN: string = ""; DefaultResult: string = "";
          Action: string = "PutLifecycleHook"; RoleARN: string = "";
          LifecycleTransition: string = ""; NotificationMetadata: string = "";
          HeartbeatTimeout: int = 0; Version: string = "2011-01-01"): Recallable =
  ## getPutLifecycleHook
  ## <p>Creates or updates a lifecycle hook for the specified Auto Scaling group.</p> <p>A lifecycle hook tells Amazon EC2 Auto Scaling to perform an action on an instance when the instance launches (before it is put into service) or as the instance terminates (before it is fully terminated).</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p> <b>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</b> </p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state using <a>RecordLifecycleActionHeartbeat</a>.</p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action using <a>CompleteLifecycleAction</a>.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.</p> <p>You can view the lifecycle hooks for an Auto Scaling group using <a>DescribeLifecycleHooks</a>. If you are no longer using a lifecycle hook, you can delete it using <a>DeleteLifecycleHook</a>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   NotificationTargetARN: string
  ##                        : <p>The ARN of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in the transition state for the lifecycle hook. This target can be either an SQS queue or an SNS topic.</p> <p>If you specify an empty string, this overrides the current ARN.</p> <p>This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key-value pair format when sending notifications to an Amazon SNS topic.</p> <p>When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test messages contain the following additional key-value pair: <code>"Event": "autoscaling:TEST_NOTIFICATION"</code>.</p>
  ##   DefaultResult: string
  ##                : Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>. The default value is <code>ABANDON</code>.
  ##   Action: string (required)
  ##   RoleARN: string
  ##          : <p>The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target, for example, an Amazon SNS topic or an Amazon SQS queue.</p> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  ##   LifecycleTransition: string
  ##                      : <p>The instance state to which you want to attach the lifecycle hook. The valid values are:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  ##   NotificationMetadata: string
  ##                       : Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.
  ##   HeartbeatTimeout: int
  ##                   : <p>The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from <code>30</code> to <code>7200</code> seconds. The default value is <code>3600</code> seconds (1 hour).</p> <p>If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action that you specified in the <code>DefaultResult</code> parameter. You can prevent the lifecycle hook from timing out by calling <a>RecordLifecycleActionHeartbeat</a>.</p>
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   Version: string (required)
  var query_774765 = newJObject()
  add(query_774765, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_774765, "NotificationTargetARN", newJString(NotificationTargetARN))
  add(query_774765, "DefaultResult", newJString(DefaultResult))
  add(query_774765, "Action", newJString(Action))
  add(query_774765, "RoleARN", newJString(RoleARN))
  add(query_774765, "LifecycleTransition", newJString(LifecycleTransition))
  add(query_774765, "NotificationMetadata", newJString(NotificationMetadata))
  add(query_774765, "HeartbeatTimeout", newJInt(HeartbeatTimeout))
  add(query_774765, "LifecycleHookName", newJString(LifecycleHookName))
  add(query_774765, "Version", newJString(Version))
  result = call_774764.call(nil, query_774765, nil, nil, nil)

var getPutLifecycleHook* = Call_GetPutLifecycleHook_774743(
    name: "getPutLifecycleHook", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=PutLifecycleHook",
    validator: validate_GetPutLifecycleHook_774744, base: "/",
    url: url_GetPutLifecycleHook_774745, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutNotificationConfiguration_774808 = ref object of OpenApiRestCall_772597
proc url_PostPutNotificationConfiguration_774810(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostPutNotificationConfiguration_774809(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.</p> <p>This configuration overwrites any existing configuration.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html">Getting Amazon SNS Notifications When Your Auto Scaling Group Scales</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774811 = query.getOrDefault("Action")
  valid_774811 = validateParameter(valid_774811, JString, required = true, default = newJString(
      "PutNotificationConfiguration"))
  if valid_774811 != nil:
    section.add "Action", valid_774811
  var valid_774812 = query.getOrDefault("Version")
  valid_774812 = validateParameter(valid_774812, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_774812 != nil:
    section.add "Version", valid_774812
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774813 = header.getOrDefault("X-Amz-Date")
  valid_774813 = validateParameter(valid_774813, JString, required = false,
                                 default = nil)
  if valid_774813 != nil:
    section.add "X-Amz-Date", valid_774813
  var valid_774814 = header.getOrDefault("X-Amz-Security-Token")
  valid_774814 = validateParameter(valid_774814, JString, required = false,
                                 default = nil)
  if valid_774814 != nil:
    section.add "X-Amz-Security-Token", valid_774814
  var valid_774815 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774815 = validateParameter(valid_774815, JString, required = false,
                                 default = nil)
  if valid_774815 != nil:
    section.add "X-Amz-Content-Sha256", valid_774815
  var valid_774816 = header.getOrDefault("X-Amz-Algorithm")
  valid_774816 = validateParameter(valid_774816, JString, required = false,
                                 default = nil)
  if valid_774816 != nil:
    section.add "X-Amz-Algorithm", valid_774816
  var valid_774817 = header.getOrDefault("X-Amz-Signature")
  valid_774817 = validateParameter(valid_774817, JString, required = false,
                                 default = nil)
  if valid_774817 != nil:
    section.add "X-Amz-Signature", valid_774817
  var valid_774818 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774818 = validateParameter(valid_774818, JString, required = false,
                                 default = nil)
  if valid_774818 != nil:
    section.add "X-Amz-SignedHeaders", valid_774818
  var valid_774819 = header.getOrDefault("X-Amz-Credential")
  valid_774819 = validateParameter(valid_774819, JString, required = false,
                                 default = nil)
  if valid_774819 != nil:
    section.add "X-Amz-Credential", valid_774819
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   TopicARN: JString (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   NotificationTypes: JArray (required)
  ##                    : The type of event that causes the notification to be sent. For more information about notification types supported by Amazon EC2 Auto Scaling, see <a>DescribeAutoScalingNotificationTypes</a>.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_774820 = formData.getOrDefault("AutoScalingGroupName")
  valid_774820 = validateParameter(valid_774820, JString, required = true,
                                 default = nil)
  if valid_774820 != nil:
    section.add "AutoScalingGroupName", valid_774820
  var valid_774821 = formData.getOrDefault("TopicARN")
  valid_774821 = validateParameter(valid_774821, JString, required = true,
                                 default = nil)
  if valid_774821 != nil:
    section.add "TopicARN", valid_774821
  var valid_774822 = formData.getOrDefault("NotificationTypes")
  valid_774822 = validateParameter(valid_774822, JArray, required = true, default = nil)
  if valid_774822 != nil:
    section.add "NotificationTypes", valid_774822
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774823: Call_PostPutNotificationConfiguration_774808;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.</p> <p>This configuration overwrites any existing configuration.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html">Getting Amazon SNS Notifications When Your Auto Scaling Group Scales</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_774823.validator(path, query, header, formData, body)
  let scheme = call_774823.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774823.url(scheme.get, call_774823.host, call_774823.base,
                         call_774823.route, valid.getOrDefault("path"))
  result = hook(call_774823, url, valid)

proc call*(call_774824: Call_PostPutNotificationConfiguration_774808;
          AutoScalingGroupName: string; TopicARN: string;
          NotificationTypes: JsonNode;
          Action: string = "PutNotificationConfiguration";
          Version: string = "2011-01-01"): Recallable =
  ## postPutNotificationConfiguration
  ## <p>Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.</p> <p>This configuration overwrites any existing configuration.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html">Getting Amazon SNS Notifications When Your Auto Scaling Group Scales</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   TopicARN: string (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   Action: string (required)
  ##   NotificationTypes: JArray (required)
  ##                    : The type of event that causes the notification to be sent. For more information about notification types supported by Amazon EC2 Auto Scaling, see <a>DescribeAutoScalingNotificationTypes</a>.
  ##   Version: string (required)
  var query_774825 = newJObject()
  var formData_774826 = newJObject()
  add(formData_774826, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_774826, "TopicARN", newJString(TopicARN))
  add(query_774825, "Action", newJString(Action))
  if NotificationTypes != nil:
    formData_774826.add "NotificationTypes", NotificationTypes
  add(query_774825, "Version", newJString(Version))
  result = call_774824.call(nil, query_774825, nil, formData_774826, nil)

var postPutNotificationConfiguration* = Call_PostPutNotificationConfiguration_774808(
    name: "postPutNotificationConfiguration", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=PutNotificationConfiguration",
    validator: validate_PostPutNotificationConfiguration_774809, base: "/",
    url: url_PostPutNotificationConfiguration_774810,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutNotificationConfiguration_774790 = ref object of OpenApiRestCall_772597
proc url_GetPutNotificationConfiguration_774792(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetPutNotificationConfiguration_774791(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.</p> <p>This configuration overwrites any existing configuration.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html">Getting Amazon SNS Notifications When Your Auto Scaling Group Scales</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   NotificationTypes: JArray (required)
  ##                    : The type of event that causes the notification to be sent. For more information about notification types supported by Amazon EC2 Auto Scaling, see <a>DescribeAutoScalingNotificationTypes</a>.
  ##   TopicARN: JString (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_774793 = query.getOrDefault("AutoScalingGroupName")
  valid_774793 = validateParameter(valid_774793, JString, required = true,
                                 default = nil)
  if valid_774793 != nil:
    section.add "AutoScalingGroupName", valid_774793
  var valid_774794 = query.getOrDefault("Action")
  valid_774794 = validateParameter(valid_774794, JString, required = true, default = newJString(
      "PutNotificationConfiguration"))
  if valid_774794 != nil:
    section.add "Action", valid_774794
  var valid_774795 = query.getOrDefault("NotificationTypes")
  valid_774795 = validateParameter(valid_774795, JArray, required = true, default = nil)
  if valid_774795 != nil:
    section.add "NotificationTypes", valid_774795
  var valid_774796 = query.getOrDefault("TopicARN")
  valid_774796 = validateParameter(valid_774796, JString, required = true,
                                 default = nil)
  if valid_774796 != nil:
    section.add "TopicARN", valid_774796
  var valid_774797 = query.getOrDefault("Version")
  valid_774797 = validateParameter(valid_774797, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_774797 != nil:
    section.add "Version", valid_774797
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774798 = header.getOrDefault("X-Amz-Date")
  valid_774798 = validateParameter(valid_774798, JString, required = false,
                                 default = nil)
  if valid_774798 != nil:
    section.add "X-Amz-Date", valid_774798
  var valid_774799 = header.getOrDefault("X-Amz-Security-Token")
  valid_774799 = validateParameter(valid_774799, JString, required = false,
                                 default = nil)
  if valid_774799 != nil:
    section.add "X-Amz-Security-Token", valid_774799
  var valid_774800 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774800 = validateParameter(valid_774800, JString, required = false,
                                 default = nil)
  if valid_774800 != nil:
    section.add "X-Amz-Content-Sha256", valid_774800
  var valid_774801 = header.getOrDefault("X-Amz-Algorithm")
  valid_774801 = validateParameter(valid_774801, JString, required = false,
                                 default = nil)
  if valid_774801 != nil:
    section.add "X-Amz-Algorithm", valid_774801
  var valid_774802 = header.getOrDefault("X-Amz-Signature")
  valid_774802 = validateParameter(valid_774802, JString, required = false,
                                 default = nil)
  if valid_774802 != nil:
    section.add "X-Amz-Signature", valid_774802
  var valid_774803 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774803 = validateParameter(valid_774803, JString, required = false,
                                 default = nil)
  if valid_774803 != nil:
    section.add "X-Amz-SignedHeaders", valid_774803
  var valid_774804 = header.getOrDefault("X-Amz-Credential")
  valid_774804 = validateParameter(valid_774804, JString, required = false,
                                 default = nil)
  if valid_774804 != nil:
    section.add "X-Amz-Credential", valid_774804
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774805: Call_GetPutNotificationConfiguration_774790;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.</p> <p>This configuration overwrites any existing configuration.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html">Getting Amazon SNS Notifications When Your Auto Scaling Group Scales</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_774805.validator(path, query, header, formData, body)
  let scheme = call_774805.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774805.url(scheme.get, call_774805.host, call_774805.base,
                         call_774805.route, valid.getOrDefault("path"))
  result = hook(call_774805, url, valid)

proc call*(call_774806: Call_GetPutNotificationConfiguration_774790;
          AutoScalingGroupName: string; NotificationTypes: JsonNode;
          TopicARN: string; Action: string = "PutNotificationConfiguration";
          Version: string = "2011-01-01"): Recallable =
  ## getPutNotificationConfiguration
  ## <p>Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.</p> <p>This configuration overwrites any existing configuration.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html">Getting Amazon SNS Notifications When Your Auto Scaling Group Scales</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   NotificationTypes: JArray (required)
  ##                    : The type of event that causes the notification to be sent. For more information about notification types supported by Amazon EC2 Auto Scaling, see <a>DescribeAutoScalingNotificationTypes</a>.
  ##   TopicARN: string (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   Version: string (required)
  var query_774807 = newJObject()
  add(query_774807, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_774807, "Action", newJString(Action))
  if NotificationTypes != nil:
    query_774807.add "NotificationTypes", NotificationTypes
  add(query_774807, "TopicARN", newJString(TopicARN))
  add(query_774807, "Version", newJString(Version))
  result = call_774806.call(nil, query_774807, nil, nil, nil)

var getPutNotificationConfiguration* = Call_GetPutNotificationConfiguration_774790(
    name: "getPutNotificationConfiguration", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=PutNotificationConfiguration",
    validator: validate_GetPutNotificationConfiguration_774791, base: "/",
    url: url_GetPutNotificationConfiguration_774792,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutScalingPolicy_774857 = ref object of OpenApiRestCall_772597
proc url_PostPutScalingPolicy_774859(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostPutScalingPolicy_774858(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates or updates a scaling policy for an Auto Scaling group. To update an existing scaling policy, use the existing policy name and set the parameters to change. Any existing parameter not changed in an update to an existing policy is not changed in this update request.</p> <p>For more information about using scaling policies to scale your Auto Scaling group automatically, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scale-based-on-demand.html">Dynamic Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774860 = query.getOrDefault("Action")
  valid_774860 = validateParameter(valid_774860, JString, required = true,
                                 default = newJString("PutScalingPolicy"))
  if valid_774860 != nil:
    section.add "Action", valid_774860
  var valid_774861 = query.getOrDefault("Version")
  valid_774861 = validateParameter(valid_774861, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_774861 != nil:
    section.add "Version", valid_774861
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774862 = header.getOrDefault("X-Amz-Date")
  valid_774862 = validateParameter(valid_774862, JString, required = false,
                                 default = nil)
  if valid_774862 != nil:
    section.add "X-Amz-Date", valid_774862
  var valid_774863 = header.getOrDefault("X-Amz-Security-Token")
  valid_774863 = validateParameter(valid_774863, JString, required = false,
                                 default = nil)
  if valid_774863 != nil:
    section.add "X-Amz-Security-Token", valid_774863
  var valid_774864 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774864 = validateParameter(valid_774864, JString, required = false,
                                 default = nil)
  if valid_774864 != nil:
    section.add "X-Amz-Content-Sha256", valid_774864
  var valid_774865 = header.getOrDefault("X-Amz-Algorithm")
  valid_774865 = validateParameter(valid_774865, JString, required = false,
                                 default = nil)
  if valid_774865 != nil:
    section.add "X-Amz-Algorithm", valid_774865
  var valid_774866 = header.getOrDefault("X-Amz-Signature")
  valid_774866 = validateParameter(valid_774866, JString, required = false,
                                 default = nil)
  if valid_774866 != nil:
    section.add "X-Amz-Signature", valid_774866
  var valid_774867 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774867 = validateParameter(valid_774867, JString, required = false,
                                 default = nil)
  if valid_774867 != nil:
    section.add "X-Amz-SignedHeaders", valid_774867
  var valid_774868 = header.getOrDefault("X-Amz-Credential")
  valid_774868 = validateParameter(valid_774868, JString, required = false,
                                 default = nil)
  if valid_774868 != nil:
    section.add "X-Amz-Credential", valid_774868
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetTrackingConfiguration.CustomizedMetricSpecification: JString
  ##                                                            : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A customized metric. You must specify either a predefined metric or a customized metric.
  ##   PolicyName: JString (required)
  ##             : The name of the policy.
  ##   StepAdjustments: JArray
  ##                  : <p>A set of adjustments that enable you to scale based on the size of the alarm breach.</p> <p>Conditional: If you specify <code>StepScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   TargetTrackingConfiguration.PredefinedMetricSpecification: JString
  ##                                                            : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A predefined metric. You must specify either a predefined metric or a customized metric.
  ##   TargetTrackingConfiguration.DisableScaleIn: JString
  ##                                             : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## Indicates whether scaling in by the target tracking scaling policy is disabled. If scaling in is disabled, the target tracking scaling policy doesn't remove instances from the Auto Scaling group. Otherwise, the target tracking scaling policy can remove instances from the Auto Scaling group. The default is <code>false</code>.
  ##   ScalingAdjustment: JInt
  ##                    : <p>The amount by which a simple scaling policy scales the Auto Scaling group in response to an alarm breach. The adjustment is based on the value that you specified in the <code>AdjustmentType</code> parameter (either an absolute number or a percentage). A positive value adds to the current capacity and a negative value subtracts from the current capacity. For exact capacity, you must specify a positive value. </p> <p>Conditional: If you specify <code>SimpleScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   MinAdjustmentStep: JInt
  ##                    : Available for backward compatibility. Use <code>MinAdjustmentMagnitude</code> instead.
  ##   Cooldown: JInt
  ##           : <p>The amount of time, in seconds, after a scaling activity completes before any further dynamic scaling activities can start. If this parameter is not specified, the default cooldown period for the group applies.</p> <p>Valid only if the policy type is <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MetricAggregationType: JString
  ##                        : <p>The aggregation type for the CloudWatch metrics. The valid values are <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code>. If the aggregation type is null, the value is treated as <code>Average</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code>.</p>
  ##   AdjustmentType: JString
  ##                 : <p>Specifies whether the <code>ScalingAdjustment</code> parameter is an absolute number or a percentage of the current capacity. The valid values are <code>ChangeInCapacity</code>, <code>ExactCapacity</code>, and <code>PercentChangeInCapacity</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment">Scaling Adjustment Types</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   EstimatedInstanceWarmup: JInt
  ##                          : <p>The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. The default is to use the value specified for the default cooldown period for the group.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p>
  ##   MinAdjustmentMagnitude: JInt
  ##                         : <p>The minimum number of instances to scale. If the value of <code>AdjustmentType</code> is <code>PercentChangeInCapacity</code>, the scaling policy changes the <code>DesiredCapacity</code> of the Auto Scaling group by at least this many instances. Otherwise, the error is <code>ValidationError</code>.</p> <p>This property replaces the <code>MinAdjustmentStep</code> property. For example, suppose that you create a step scaling policy to scale out an Auto Scaling group by 25 percent and you specify a <code>MinAdjustmentMagnitude</code> of 2. If the group has 4 instances and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a <code>MinAdjustmentMagnitude</code> of 2, Amazon EC2 Auto Scaling scales out the group by 2 instances.</p> <p>Valid only if the policy type is <code>SimpleScaling</code> or <code>StepScaling</code>.</p>
  ##   TargetTrackingConfiguration.TargetValue: JString
  ##                                          : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## The target value for the metric.
  ##   PolicyType: JString
  ##             : The policy type. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>. If the policy type is null, the value is treated as <code>SimpleScaling</code>.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_774869 = formData.getOrDefault("AutoScalingGroupName")
  valid_774869 = validateParameter(valid_774869, JString, required = true,
                                 default = nil)
  if valid_774869 != nil:
    section.add "AutoScalingGroupName", valid_774869
  var valid_774870 = formData.getOrDefault("TargetTrackingConfiguration.CustomizedMetricSpecification")
  valid_774870 = validateParameter(valid_774870, JString, required = false,
                                 default = nil)
  if valid_774870 != nil:
    section.add "TargetTrackingConfiguration.CustomizedMetricSpecification", valid_774870
  var valid_774871 = formData.getOrDefault("PolicyName")
  valid_774871 = validateParameter(valid_774871, JString, required = true,
                                 default = nil)
  if valid_774871 != nil:
    section.add "PolicyName", valid_774871
  var valid_774872 = formData.getOrDefault("StepAdjustments")
  valid_774872 = validateParameter(valid_774872, JArray, required = false,
                                 default = nil)
  if valid_774872 != nil:
    section.add "StepAdjustments", valid_774872
  var valid_774873 = formData.getOrDefault("TargetTrackingConfiguration.PredefinedMetricSpecification")
  valid_774873 = validateParameter(valid_774873, JString, required = false,
                                 default = nil)
  if valid_774873 != nil:
    section.add "TargetTrackingConfiguration.PredefinedMetricSpecification", valid_774873
  var valid_774874 = formData.getOrDefault("TargetTrackingConfiguration.DisableScaleIn")
  valid_774874 = validateParameter(valid_774874, JString, required = false,
                                 default = nil)
  if valid_774874 != nil:
    section.add "TargetTrackingConfiguration.DisableScaleIn", valid_774874
  var valid_774875 = formData.getOrDefault("ScalingAdjustment")
  valid_774875 = validateParameter(valid_774875, JInt, required = false, default = nil)
  if valid_774875 != nil:
    section.add "ScalingAdjustment", valid_774875
  var valid_774876 = formData.getOrDefault("MinAdjustmentStep")
  valid_774876 = validateParameter(valid_774876, JInt, required = false, default = nil)
  if valid_774876 != nil:
    section.add "MinAdjustmentStep", valid_774876
  var valid_774877 = formData.getOrDefault("Cooldown")
  valid_774877 = validateParameter(valid_774877, JInt, required = false, default = nil)
  if valid_774877 != nil:
    section.add "Cooldown", valid_774877
  var valid_774878 = formData.getOrDefault("MetricAggregationType")
  valid_774878 = validateParameter(valid_774878, JString, required = false,
                                 default = nil)
  if valid_774878 != nil:
    section.add "MetricAggregationType", valid_774878
  var valid_774879 = formData.getOrDefault("AdjustmentType")
  valid_774879 = validateParameter(valid_774879, JString, required = false,
                                 default = nil)
  if valid_774879 != nil:
    section.add "AdjustmentType", valid_774879
  var valid_774880 = formData.getOrDefault("EstimatedInstanceWarmup")
  valid_774880 = validateParameter(valid_774880, JInt, required = false, default = nil)
  if valid_774880 != nil:
    section.add "EstimatedInstanceWarmup", valid_774880
  var valid_774881 = formData.getOrDefault("MinAdjustmentMagnitude")
  valid_774881 = validateParameter(valid_774881, JInt, required = false, default = nil)
  if valid_774881 != nil:
    section.add "MinAdjustmentMagnitude", valid_774881
  var valid_774882 = formData.getOrDefault("TargetTrackingConfiguration.TargetValue")
  valid_774882 = validateParameter(valid_774882, JString, required = false,
                                 default = nil)
  if valid_774882 != nil:
    section.add "TargetTrackingConfiguration.TargetValue", valid_774882
  var valid_774883 = formData.getOrDefault("PolicyType")
  valid_774883 = validateParameter(valid_774883, JString, required = false,
                                 default = nil)
  if valid_774883 != nil:
    section.add "PolicyType", valid_774883
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774884: Call_PostPutScalingPolicy_774857; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates or updates a scaling policy for an Auto Scaling group. To update an existing scaling policy, use the existing policy name and set the parameters to change. Any existing parameter not changed in an update to an existing policy is not changed in this update request.</p> <p>For more information about using scaling policies to scale your Auto Scaling group automatically, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scale-based-on-demand.html">Dynamic Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_774884.validator(path, query, header, formData, body)
  let scheme = call_774884.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774884.url(scheme.get, call_774884.host, call_774884.base,
                         call_774884.route, valid.getOrDefault("path"))
  result = hook(call_774884, url, valid)

proc call*(call_774885: Call_PostPutScalingPolicy_774857;
          AutoScalingGroupName: string; PolicyName: string;
    TargetTrackingConfigurationCustomizedMetricSpecification: string = "";
          StepAdjustments: JsonNode = nil; TargetTrackingConfigurationPredefinedMetricSpecification: string = "";
          TargetTrackingConfigurationDisableScaleIn: string = "";
          ScalingAdjustment: int = 0; MinAdjustmentStep: int = 0; Cooldown: int = 0;
          Action: string = "PutScalingPolicy"; MetricAggregationType: string = "";
          AdjustmentType: string = ""; EstimatedInstanceWarmup: int = 0;
          MinAdjustmentMagnitude: int = 0;
          TargetTrackingConfigurationTargetValue: string = "";
          Version: string = "2011-01-01"; PolicyType: string = ""): Recallable =
  ## postPutScalingPolicy
  ## <p>Creates or updates a scaling policy for an Auto Scaling group. To update an existing scaling policy, use the existing policy name and set the parameters to change. Any existing parameter not changed in an update to an existing policy is not changed in this update request.</p> <p>For more information about using scaling policies to scale your Auto Scaling group automatically, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scale-based-on-demand.html">Dynamic Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetTrackingConfigurationCustomizedMetricSpecification: string
  ##                                                           : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A customized metric. You must specify either a predefined metric or a customized metric.
  ##   PolicyName: string (required)
  ##             : The name of the policy.
  ##   StepAdjustments: JArray
  ##                  : <p>A set of adjustments that enable you to scale based on the size of the alarm breach.</p> <p>Conditional: If you specify <code>StepScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   TargetTrackingConfigurationPredefinedMetricSpecification: string
  ##                                                           : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A predefined metric. You must specify either a predefined metric or a customized metric.
  ##   TargetTrackingConfigurationDisableScaleIn: string
  ##                                            : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## Indicates whether scaling in by the target tracking scaling policy is disabled. If scaling in is disabled, the target tracking scaling policy doesn't remove instances from the Auto Scaling group. Otherwise, the target tracking scaling policy can remove instances from the Auto Scaling group. The default is <code>false</code>.
  ##   ScalingAdjustment: int
  ##                    : <p>The amount by which a simple scaling policy scales the Auto Scaling group in response to an alarm breach. The adjustment is based on the value that you specified in the <code>AdjustmentType</code> parameter (either an absolute number or a percentage). A positive value adds to the current capacity and a negative value subtracts from the current capacity. For exact capacity, you must specify a positive value. </p> <p>Conditional: If you specify <code>SimpleScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   MinAdjustmentStep: int
  ##                    : Available for backward compatibility. Use <code>MinAdjustmentMagnitude</code> instead.
  ##   Cooldown: int
  ##           : <p>The amount of time, in seconds, after a scaling activity completes before any further dynamic scaling activities can start. If this parameter is not specified, the default cooldown period for the group applies.</p> <p>Valid only if the policy type is <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   MetricAggregationType: string
  ##                        : <p>The aggregation type for the CloudWatch metrics. The valid values are <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code>. If the aggregation type is null, the value is treated as <code>Average</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code>.</p>
  ##   AdjustmentType: string
  ##                 : <p>Specifies whether the <code>ScalingAdjustment</code> parameter is an absolute number or a percentage of the current capacity. The valid values are <code>ChangeInCapacity</code>, <code>ExactCapacity</code>, and <code>PercentChangeInCapacity</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment">Scaling Adjustment Types</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   EstimatedInstanceWarmup: int
  ##                          : <p>The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. The default is to use the value specified for the default cooldown period for the group.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p>
  ##   MinAdjustmentMagnitude: int
  ##                         : <p>The minimum number of instances to scale. If the value of <code>AdjustmentType</code> is <code>PercentChangeInCapacity</code>, the scaling policy changes the <code>DesiredCapacity</code> of the Auto Scaling group by at least this many instances. Otherwise, the error is <code>ValidationError</code>.</p> <p>This property replaces the <code>MinAdjustmentStep</code> property. For example, suppose that you create a step scaling policy to scale out an Auto Scaling group by 25 percent and you specify a <code>MinAdjustmentMagnitude</code> of 2. If the group has 4 instances and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a <code>MinAdjustmentMagnitude</code> of 2, Amazon EC2 Auto Scaling scales out the group by 2 instances.</p> <p>Valid only if the policy type is <code>SimpleScaling</code> or <code>StepScaling</code>.</p>
  ##   TargetTrackingConfigurationTargetValue: string
  ##                                         : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## The target value for the metric.
  ##   Version: string (required)
  ##   PolicyType: string
  ##             : The policy type. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>. If the policy type is null, the value is treated as <code>SimpleScaling</code>.
  var query_774886 = newJObject()
  var formData_774887 = newJObject()
  add(formData_774887, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_774887,
      "TargetTrackingConfiguration.CustomizedMetricSpecification",
      newJString(TargetTrackingConfigurationCustomizedMetricSpecification))
  add(formData_774887, "PolicyName", newJString(PolicyName))
  if StepAdjustments != nil:
    formData_774887.add "StepAdjustments", StepAdjustments
  add(formData_774887,
      "TargetTrackingConfiguration.PredefinedMetricSpecification",
      newJString(TargetTrackingConfigurationPredefinedMetricSpecification))
  add(formData_774887, "TargetTrackingConfiguration.DisableScaleIn",
      newJString(TargetTrackingConfigurationDisableScaleIn))
  add(formData_774887, "ScalingAdjustment", newJInt(ScalingAdjustment))
  add(formData_774887, "MinAdjustmentStep", newJInt(MinAdjustmentStep))
  add(formData_774887, "Cooldown", newJInt(Cooldown))
  add(query_774886, "Action", newJString(Action))
  add(formData_774887, "MetricAggregationType", newJString(MetricAggregationType))
  add(formData_774887, "AdjustmentType", newJString(AdjustmentType))
  add(formData_774887, "EstimatedInstanceWarmup", newJInt(EstimatedInstanceWarmup))
  add(formData_774887, "MinAdjustmentMagnitude", newJInt(MinAdjustmentMagnitude))
  add(formData_774887, "TargetTrackingConfiguration.TargetValue",
      newJString(TargetTrackingConfigurationTargetValue))
  add(query_774886, "Version", newJString(Version))
  add(formData_774887, "PolicyType", newJString(PolicyType))
  result = call_774885.call(nil, query_774886, nil, formData_774887, nil)

var postPutScalingPolicy* = Call_PostPutScalingPolicy_774857(
    name: "postPutScalingPolicy", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=PutScalingPolicy",
    validator: validate_PostPutScalingPolicy_774858, base: "/",
    url: url_PostPutScalingPolicy_774859, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutScalingPolicy_774827 = ref object of OpenApiRestCall_772597
proc url_GetPutScalingPolicy_774829(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetPutScalingPolicy_774828(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Creates or updates a scaling policy for an Auto Scaling group. To update an existing scaling policy, use the existing policy name and set the parameters to change. Any existing parameter not changed in an update to an existing policy is not changed in this update request.</p> <p>For more information about using scaling policies to scale your Auto Scaling group automatically, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scale-based-on-demand.html">Dynamic Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TargetTrackingConfiguration.DisableScaleIn: JString
  ##                                             : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## Indicates whether scaling in by the target tracking scaling policy is disabled. If scaling in is disabled, the target tracking scaling policy doesn't remove instances from the Auto Scaling group. Otherwise, the target tracking scaling policy can remove instances from the Auto Scaling group. The default is <code>false</code>.
  ##   AdjustmentType: JString
  ##                 : <p>Specifies whether the <code>ScalingAdjustment</code> parameter is an absolute number or a percentage of the current capacity. The valid values are <code>ChangeInCapacity</code>, <code>ExactCapacity</code>, and <code>PercentChangeInCapacity</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment">Scaling Adjustment Types</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   TargetTrackingConfiguration.PredefinedMetricSpecification: JString
  ##                                                            : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A predefined metric. You must specify either a predefined metric or a customized metric.
  ##   MetricAggregationType: JString
  ##                        : <p>The aggregation type for the CloudWatch metrics. The valid values are <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code>. If the aggregation type is null, the value is treated as <code>Average</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code>.</p>
  ##   MinAdjustmentStep: JInt
  ##                    : Available for backward compatibility. Use <code>MinAdjustmentMagnitude</code> instead.
  ##   Cooldown: JInt
  ##           : <p>The amount of time, in seconds, after a scaling activity completes before any further dynamic scaling activities can start. If this parameter is not specified, the default cooldown period for the group applies.</p> <p>Valid only if the policy type is <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetTrackingConfiguration.TargetValue: JString
  ##                                          : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## The target value for the metric.
  ##   TargetTrackingConfiguration.CustomizedMetricSpecification: JString
  ##                                                            : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A customized metric. You must specify either a predefined metric or a customized metric.
  ##   Action: JString (required)
  ##   EstimatedInstanceWarmup: JInt
  ##                          : <p>The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. The default is to use the value specified for the default cooldown period for the group.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p>
  ##   MinAdjustmentMagnitude: JInt
  ##                         : <p>The minimum number of instances to scale. If the value of <code>AdjustmentType</code> is <code>PercentChangeInCapacity</code>, the scaling policy changes the <code>DesiredCapacity</code> of the Auto Scaling group by at least this many instances. Otherwise, the error is <code>ValidationError</code>.</p> <p>This property replaces the <code>MinAdjustmentStep</code> property. For example, suppose that you create a step scaling policy to scale out an Auto Scaling group by 25 percent and you specify a <code>MinAdjustmentMagnitude</code> of 2. If the group has 4 instances and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a <code>MinAdjustmentMagnitude</code> of 2, Amazon EC2 Auto Scaling scales out the group by 2 instances.</p> <p>Valid only if the policy type is <code>SimpleScaling</code> or <code>StepScaling</code>.</p>
  ##   StepAdjustments: JArray
  ##                  : <p>A set of adjustments that enable you to scale based on the size of the alarm breach.</p> <p>Conditional: If you specify <code>StepScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   PolicyType: JString
  ##             : The policy type. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>. If the policy type is null, the value is treated as <code>SimpleScaling</code>.
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : The name of the policy.
  ##   ScalingAdjustment: JInt
  ##                    : <p>The amount by which a simple scaling policy scales the Auto Scaling group in response to an alarm breach. The adjustment is based on the value that you specified in the <code>AdjustmentType</code> parameter (either an absolute number or a percentage). A positive value adds to the current capacity and a negative value subtracts from the current capacity. For exact capacity, you must specify a positive value. </p> <p>Conditional: If you specify <code>SimpleScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  section = newJObject()
  var valid_774830 = query.getOrDefault("TargetTrackingConfiguration.DisableScaleIn")
  valid_774830 = validateParameter(valid_774830, JString, required = false,
                                 default = nil)
  if valid_774830 != nil:
    section.add "TargetTrackingConfiguration.DisableScaleIn", valid_774830
  var valid_774831 = query.getOrDefault("AdjustmentType")
  valid_774831 = validateParameter(valid_774831, JString, required = false,
                                 default = nil)
  if valid_774831 != nil:
    section.add "AdjustmentType", valid_774831
  var valid_774832 = query.getOrDefault("TargetTrackingConfiguration.PredefinedMetricSpecification")
  valid_774832 = validateParameter(valid_774832, JString, required = false,
                                 default = nil)
  if valid_774832 != nil:
    section.add "TargetTrackingConfiguration.PredefinedMetricSpecification", valid_774832
  var valid_774833 = query.getOrDefault("MetricAggregationType")
  valid_774833 = validateParameter(valid_774833, JString, required = false,
                                 default = nil)
  if valid_774833 != nil:
    section.add "MetricAggregationType", valid_774833
  var valid_774834 = query.getOrDefault("MinAdjustmentStep")
  valid_774834 = validateParameter(valid_774834, JInt, required = false, default = nil)
  if valid_774834 != nil:
    section.add "MinAdjustmentStep", valid_774834
  var valid_774835 = query.getOrDefault("Cooldown")
  valid_774835 = validateParameter(valid_774835, JInt, required = false, default = nil)
  if valid_774835 != nil:
    section.add "Cooldown", valid_774835
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_774836 = query.getOrDefault("AutoScalingGroupName")
  valid_774836 = validateParameter(valid_774836, JString, required = true,
                                 default = nil)
  if valid_774836 != nil:
    section.add "AutoScalingGroupName", valid_774836
  var valid_774837 = query.getOrDefault("TargetTrackingConfiguration.TargetValue")
  valid_774837 = validateParameter(valid_774837, JString, required = false,
                                 default = nil)
  if valid_774837 != nil:
    section.add "TargetTrackingConfiguration.TargetValue", valid_774837
  var valid_774838 = query.getOrDefault("TargetTrackingConfiguration.CustomizedMetricSpecification")
  valid_774838 = validateParameter(valid_774838, JString, required = false,
                                 default = nil)
  if valid_774838 != nil:
    section.add "TargetTrackingConfiguration.CustomizedMetricSpecification", valid_774838
  var valid_774839 = query.getOrDefault("Action")
  valid_774839 = validateParameter(valid_774839, JString, required = true,
                                 default = newJString("PutScalingPolicy"))
  if valid_774839 != nil:
    section.add "Action", valid_774839
  var valid_774840 = query.getOrDefault("EstimatedInstanceWarmup")
  valid_774840 = validateParameter(valid_774840, JInt, required = false, default = nil)
  if valid_774840 != nil:
    section.add "EstimatedInstanceWarmup", valid_774840
  var valid_774841 = query.getOrDefault("MinAdjustmentMagnitude")
  valid_774841 = validateParameter(valid_774841, JInt, required = false, default = nil)
  if valid_774841 != nil:
    section.add "MinAdjustmentMagnitude", valid_774841
  var valid_774842 = query.getOrDefault("StepAdjustments")
  valid_774842 = validateParameter(valid_774842, JArray, required = false,
                                 default = nil)
  if valid_774842 != nil:
    section.add "StepAdjustments", valid_774842
  var valid_774843 = query.getOrDefault("PolicyType")
  valid_774843 = validateParameter(valid_774843, JString, required = false,
                                 default = nil)
  if valid_774843 != nil:
    section.add "PolicyType", valid_774843
  var valid_774844 = query.getOrDefault("Version")
  valid_774844 = validateParameter(valid_774844, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_774844 != nil:
    section.add "Version", valid_774844
  var valid_774845 = query.getOrDefault("PolicyName")
  valid_774845 = validateParameter(valid_774845, JString, required = true,
                                 default = nil)
  if valid_774845 != nil:
    section.add "PolicyName", valid_774845
  var valid_774846 = query.getOrDefault("ScalingAdjustment")
  valid_774846 = validateParameter(valid_774846, JInt, required = false, default = nil)
  if valid_774846 != nil:
    section.add "ScalingAdjustment", valid_774846
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774847 = header.getOrDefault("X-Amz-Date")
  valid_774847 = validateParameter(valid_774847, JString, required = false,
                                 default = nil)
  if valid_774847 != nil:
    section.add "X-Amz-Date", valid_774847
  var valid_774848 = header.getOrDefault("X-Amz-Security-Token")
  valid_774848 = validateParameter(valid_774848, JString, required = false,
                                 default = nil)
  if valid_774848 != nil:
    section.add "X-Amz-Security-Token", valid_774848
  var valid_774849 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774849 = validateParameter(valid_774849, JString, required = false,
                                 default = nil)
  if valid_774849 != nil:
    section.add "X-Amz-Content-Sha256", valid_774849
  var valid_774850 = header.getOrDefault("X-Amz-Algorithm")
  valid_774850 = validateParameter(valid_774850, JString, required = false,
                                 default = nil)
  if valid_774850 != nil:
    section.add "X-Amz-Algorithm", valid_774850
  var valid_774851 = header.getOrDefault("X-Amz-Signature")
  valid_774851 = validateParameter(valid_774851, JString, required = false,
                                 default = nil)
  if valid_774851 != nil:
    section.add "X-Amz-Signature", valid_774851
  var valid_774852 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774852 = validateParameter(valid_774852, JString, required = false,
                                 default = nil)
  if valid_774852 != nil:
    section.add "X-Amz-SignedHeaders", valid_774852
  var valid_774853 = header.getOrDefault("X-Amz-Credential")
  valid_774853 = validateParameter(valid_774853, JString, required = false,
                                 default = nil)
  if valid_774853 != nil:
    section.add "X-Amz-Credential", valid_774853
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774854: Call_GetPutScalingPolicy_774827; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates or updates a scaling policy for an Auto Scaling group. To update an existing scaling policy, use the existing policy name and set the parameters to change. Any existing parameter not changed in an update to an existing policy is not changed in this update request.</p> <p>For more information about using scaling policies to scale your Auto Scaling group automatically, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scale-based-on-demand.html">Dynamic Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_774854.validator(path, query, header, formData, body)
  let scheme = call_774854.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774854.url(scheme.get, call_774854.host, call_774854.base,
                         call_774854.route, valid.getOrDefault("path"))
  result = hook(call_774854, url, valid)

proc call*(call_774855: Call_GetPutScalingPolicy_774827;
          AutoScalingGroupName: string; PolicyName: string;
          TargetTrackingConfigurationDisableScaleIn: string = "";
          AdjustmentType: string = ""; TargetTrackingConfigurationPredefinedMetricSpecification: string = "";
          MetricAggregationType: string = ""; MinAdjustmentStep: int = 0;
          Cooldown: int = 0; TargetTrackingConfigurationTargetValue: string = "";
    TargetTrackingConfigurationCustomizedMetricSpecification: string = "";
          Action: string = "PutScalingPolicy"; EstimatedInstanceWarmup: int = 0;
          MinAdjustmentMagnitude: int = 0; StepAdjustments: JsonNode = nil;
          PolicyType: string = ""; Version: string = "2011-01-01";
          ScalingAdjustment: int = 0): Recallable =
  ## getPutScalingPolicy
  ## <p>Creates or updates a scaling policy for an Auto Scaling group. To update an existing scaling policy, use the existing policy name and set the parameters to change. Any existing parameter not changed in an update to an existing policy is not changed in this update request.</p> <p>For more information about using scaling policies to scale your Auto Scaling group automatically, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scale-based-on-demand.html">Dynamic Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   TargetTrackingConfigurationDisableScaleIn: string
  ##                                            : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## Indicates whether scaling in by the target tracking scaling policy is disabled. If scaling in is disabled, the target tracking scaling policy doesn't remove instances from the Auto Scaling group. Otherwise, the target tracking scaling policy can remove instances from the Auto Scaling group. The default is <code>false</code>.
  ##   AdjustmentType: string
  ##                 : <p>Specifies whether the <code>ScalingAdjustment</code> parameter is an absolute number or a percentage of the current capacity. The valid values are <code>ChangeInCapacity</code>, <code>ExactCapacity</code>, and <code>PercentChangeInCapacity</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment">Scaling Adjustment Types</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   TargetTrackingConfigurationPredefinedMetricSpecification: string
  ##                                                           : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A predefined metric. You must specify either a predefined metric or a customized metric.
  ##   MetricAggregationType: string
  ##                        : <p>The aggregation type for the CloudWatch metrics. The valid values are <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code>. If the aggregation type is null, the value is treated as <code>Average</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code>.</p>
  ##   MinAdjustmentStep: int
  ##                    : Available for backward compatibility. Use <code>MinAdjustmentMagnitude</code> instead.
  ##   Cooldown: int
  ##           : <p>The amount of time, in seconds, after a scaling activity completes before any further dynamic scaling activities can start. If this parameter is not specified, the default cooldown period for the group applies.</p> <p>Valid only if the policy type is <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetTrackingConfigurationTargetValue: string
  ##                                         : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## The target value for the metric.
  ##   TargetTrackingConfigurationCustomizedMetricSpecification: string
  ##                                                           : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A customized metric. You must specify either a predefined metric or a customized metric.
  ##   Action: string (required)
  ##   EstimatedInstanceWarmup: int
  ##                          : <p>The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. The default is to use the value specified for the default cooldown period for the group.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p>
  ##   MinAdjustmentMagnitude: int
  ##                         : <p>The minimum number of instances to scale. If the value of <code>AdjustmentType</code> is <code>PercentChangeInCapacity</code>, the scaling policy changes the <code>DesiredCapacity</code> of the Auto Scaling group by at least this many instances. Otherwise, the error is <code>ValidationError</code>.</p> <p>This property replaces the <code>MinAdjustmentStep</code> property. For example, suppose that you create a step scaling policy to scale out an Auto Scaling group by 25 percent and you specify a <code>MinAdjustmentMagnitude</code> of 2. If the group has 4 instances and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a <code>MinAdjustmentMagnitude</code> of 2, Amazon EC2 Auto Scaling scales out the group by 2 instances.</p> <p>Valid only if the policy type is <code>SimpleScaling</code> or <code>StepScaling</code>.</p>
  ##   StepAdjustments: JArray
  ##                  : <p>A set of adjustments that enable you to scale based on the size of the alarm breach.</p> <p>Conditional: If you specify <code>StepScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   PolicyType: string
  ##             : The policy type. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>. If the policy type is null, the value is treated as <code>SimpleScaling</code>.
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : The name of the policy.
  ##   ScalingAdjustment: int
  ##                    : <p>The amount by which a simple scaling policy scales the Auto Scaling group in response to an alarm breach. The adjustment is based on the value that you specified in the <code>AdjustmentType</code> parameter (either an absolute number or a percentage). A positive value adds to the current capacity and a negative value subtracts from the current capacity. For exact capacity, you must specify a positive value. </p> <p>Conditional: If you specify <code>SimpleScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  var query_774856 = newJObject()
  add(query_774856, "TargetTrackingConfiguration.DisableScaleIn",
      newJString(TargetTrackingConfigurationDisableScaleIn))
  add(query_774856, "AdjustmentType", newJString(AdjustmentType))
  add(query_774856, "TargetTrackingConfiguration.PredefinedMetricSpecification",
      newJString(TargetTrackingConfigurationPredefinedMetricSpecification))
  add(query_774856, "MetricAggregationType", newJString(MetricAggregationType))
  add(query_774856, "MinAdjustmentStep", newJInt(MinAdjustmentStep))
  add(query_774856, "Cooldown", newJInt(Cooldown))
  add(query_774856, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_774856, "TargetTrackingConfiguration.TargetValue",
      newJString(TargetTrackingConfigurationTargetValue))
  add(query_774856, "TargetTrackingConfiguration.CustomizedMetricSpecification",
      newJString(TargetTrackingConfigurationCustomizedMetricSpecification))
  add(query_774856, "Action", newJString(Action))
  add(query_774856, "EstimatedInstanceWarmup", newJInt(EstimatedInstanceWarmup))
  add(query_774856, "MinAdjustmentMagnitude", newJInt(MinAdjustmentMagnitude))
  if StepAdjustments != nil:
    query_774856.add "StepAdjustments", StepAdjustments
  add(query_774856, "PolicyType", newJString(PolicyType))
  add(query_774856, "Version", newJString(Version))
  add(query_774856, "PolicyName", newJString(PolicyName))
  add(query_774856, "ScalingAdjustment", newJInt(ScalingAdjustment))
  result = call_774855.call(nil, query_774856, nil, nil, nil)

var getPutScalingPolicy* = Call_GetPutScalingPolicy_774827(
    name: "getPutScalingPolicy", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=PutScalingPolicy",
    validator: validate_GetPutScalingPolicy_774828, base: "/",
    url: url_GetPutScalingPolicy_774829, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutScheduledUpdateGroupAction_774912 = ref object of OpenApiRestCall_772597
proc url_PostPutScheduledUpdateGroupAction_774914(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostPutScheduledUpdateGroupAction_774913(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates or updates a scheduled scaling action for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html">Scheduled Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774915 = query.getOrDefault("Action")
  valid_774915 = validateParameter(valid_774915, JString, required = true, default = newJString(
      "PutScheduledUpdateGroupAction"))
  if valid_774915 != nil:
    section.add "Action", valid_774915
  var valid_774916 = query.getOrDefault("Version")
  valid_774916 = validateParameter(valid_774916, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_774916 != nil:
    section.add "Version", valid_774916
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774917 = header.getOrDefault("X-Amz-Date")
  valid_774917 = validateParameter(valid_774917, JString, required = false,
                                 default = nil)
  if valid_774917 != nil:
    section.add "X-Amz-Date", valid_774917
  var valid_774918 = header.getOrDefault("X-Amz-Security-Token")
  valid_774918 = validateParameter(valid_774918, JString, required = false,
                                 default = nil)
  if valid_774918 != nil:
    section.add "X-Amz-Security-Token", valid_774918
  var valid_774919 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774919 = validateParameter(valid_774919, JString, required = false,
                                 default = nil)
  if valid_774919 != nil:
    section.add "X-Amz-Content-Sha256", valid_774919
  var valid_774920 = header.getOrDefault("X-Amz-Algorithm")
  valid_774920 = validateParameter(valid_774920, JString, required = false,
                                 default = nil)
  if valid_774920 != nil:
    section.add "X-Amz-Algorithm", valid_774920
  var valid_774921 = header.getOrDefault("X-Amz-Signature")
  valid_774921 = validateParameter(valid_774921, JString, required = false,
                                 default = nil)
  if valid_774921 != nil:
    section.add "X-Amz-Signature", valid_774921
  var valid_774922 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774922 = validateParameter(valid_774922, JString, required = false,
                                 default = nil)
  if valid_774922 != nil:
    section.add "X-Amz-SignedHeaders", valid_774922
  var valid_774923 = header.getOrDefault("X-Amz-Credential")
  valid_774923 = validateParameter(valid_774923, JString, required = false,
                                 default = nil)
  if valid_774923 != nil:
    section.add "X-Amz-Credential", valid_774923
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Recurrence: JString
  ##             : <p>The recurring schedule for this action, in Unix cron syntax format. This format consists of five fields separated by white spaces: [Minute] [Hour] [Day_of_Month] [Month_of_Year] [Day_of_Week]. The value must be in quotes (for example, <code>"30 0 1 1,6,12 *"</code>). For more information about this format, see <a href="http://crontab.org">Crontab</a>.</p> <p>When <code>StartTime</code> and <code>EndTime</code> are specified with <code>Recurrence</code>, they form the boundaries of when the recurring action starts and stops.</p>
  ##   DesiredCapacity: JInt
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   Time: JString
  ##       : This parameter is no longer used.
  ##   StartTime: JString
  ##            : <p>The date and time for this action to start, in YYYY-MM-DDThh:mm:ssZ format in UTC/GMT only and in quotes (for example, <code>"2019-06-01T00:00:00Z"</code>).</p> <p>If you specify <code>Recurrence</code> and <code>StartTime</code>, Amazon EC2 Auto Scaling performs the action at this time, and then performs the action based on the specified recurrence.</p> <p>If you try to schedule your action in the past, Amazon EC2 Auto Scaling returns an error message.</p>
  ##   ScheduledActionName: JString (required)
  ##                      : The name of this scaling action.
  ##   MinSize: JInt
  ##          : The minimum number of instances in the Auto Scaling group.
  ##   MaxSize: JInt
  ##          : The maximum number of instances in the Auto Scaling group.
  ##   EndTime: JString
  ##          : The date and time for the recurring schedule to end. Amazon EC2 Auto Scaling does not perform the action after this time. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_774924 = formData.getOrDefault("AutoScalingGroupName")
  valid_774924 = validateParameter(valid_774924, JString, required = true,
                                 default = nil)
  if valid_774924 != nil:
    section.add "AutoScalingGroupName", valid_774924
  var valid_774925 = formData.getOrDefault("Recurrence")
  valid_774925 = validateParameter(valid_774925, JString, required = false,
                                 default = nil)
  if valid_774925 != nil:
    section.add "Recurrence", valid_774925
  var valid_774926 = formData.getOrDefault("DesiredCapacity")
  valid_774926 = validateParameter(valid_774926, JInt, required = false, default = nil)
  if valid_774926 != nil:
    section.add "DesiredCapacity", valid_774926
  var valid_774927 = formData.getOrDefault("Time")
  valid_774927 = validateParameter(valid_774927, JString, required = false,
                                 default = nil)
  if valid_774927 != nil:
    section.add "Time", valid_774927
  var valid_774928 = formData.getOrDefault("StartTime")
  valid_774928 = validateParameter(valid_774928, JString, required = false,
                                 default = nil)
  if valid_774928 != nil:
    section.add "StartTime", valid_774928
  var valid_774929 = formData.getOrDefault("ScheduledActionName")
  valid_774929 = validateParameter(valid_774929, JString, required = true,
                                 default = nil)
  if valid_774929 != nil:
    section.add "ScheduledActionName", valid_774929
  var valid_774930 = formData.getOrDefault("MinSize")
  valid_774930 = validateParameter(valid_774930, JInt, required = false, default = nil)
  if valid_774930 != nil:
    section.add "MinSize", valid_774930
  var valid_774931 = formData.getOrDefault("MaxSize")
  valid_774931 = validateParameter(valid_774931, JInt, required = false, default = nil)
  if valid_774931 != nil:
    section.add "MaxSize", valid_774931
  var valid_774932 = formData.getOrDefault("EndTime")
  valid_774932 = validateParameter(valid_774932, JString, required = false,
                                 default = nil)
  if valid_774932 != nil:
    section.add "EndTime", valid_774932
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774933: Call_PostPutScheduledUpdateGroupAction_774912;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates or updates a scheduled scaling action for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html">Scheduled Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_774933.validator(path, query, header, formData, body)
  let scheme = call_774933.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774933.url(scheme.get, call_774933.host, call_774933.base,
                         call_774933.route, valid.getOrDefault("path"))
  result = hook(call_774933, url, valid)

proc call*(call_774934: Call_PostPutScheduledUpdateGroupAction_774912;
          AutoScalingGroupName: string; ScheduledActionName: string;
          Recurrence: string = ""; DesiredCapacity: int = 0; Time: string = "";
          StartTime: string = ""; Action: string = "PutScheduledUpdateGroupAction";
          MinSize: int = 0; MaxSize: int = 0; EndTime: string = "";
          Version: string = "2011-01-01"): Recallable =
  ## postPutScheduledUpdateGroupAction
  ## <p>Creates or updates a scheduled scaling action for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html">Scheduled Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Recurrence: string
  ##             : <p>The recurring schedule for this action, in Unix cron syntax format. This format consists of five fields separated by white spaces: [Minute] [Hour] [Day_of_Month] [Month_of_Year] [Day_of_Week]. The value must be in quotes (for example, <code>"30 0 1 1,6,12 *"</code>). For more information about this format, see <a href="http://crontab.org">Crontab</a>.</p> <p>When <code>StartTime</code> and <code>EndTime</code> are specified with <code>Recurrence</code>, they form the boundaries of when the recurring action starts and stops.</p>
  ##   DesiredCapacity: int
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   Time: string
  ##       : This parameter is no longer used.
  ##   StartTime: string
  ##            : <p>The date and time for this action to start, in YYYY-MM-DDThh:mm:ssZ format in UTC/GMT only and in quotes (for example, <code>"2019-06-01T00:00:00Z"</code>).</p> <p>If you specify <code>Recurrence</code> and <code>StartTime</code>, Amazon EC2 Auto Scaling performs the action at this time, and then performs the action based on the specified recurrence.</p> <p>If you try to schedule your action in the past, Amazon EC2 Auto Scaling returns an error message.</p>
  ##   Action: string (required)
  ##   ScheduledActionName: string (required)
  ##                      : The name of this scaling action.
  ##   MinSize: int
  ##          : The minimum number of instances in the Auto Scaling group.
  ##   MaxSize: int
  ##          : The maximum number of instances in the Auto Scaling group.
  ##   EndTime: string
  ##          : The date and time for the recurring schedule to end. Amazon EC2 Auto Scaling does not perform the action after this time. 
  ##   Version: string (required)
  var query_774935 = newJObject()
  var formData_774936 = newJObject()
  add(formData_774936, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_774936, "Recurrence", newJString(Recurrence))
  add(formData_774936, "DesiredCapacity", newJInt(DesiredCapacity))
  add(formData_774936, "Time", newJString(Time))
  add(formData_774936, "StartTime", newJString(StartTime))
  add(query_774935, "Action", newJString(Action))
  add(formData_774936, "ScheduledActionName", newJString(ScheduledActionName))
  add(formData_774936, "MinSize", newJInt(MinSize))
  add(formData_774936, "MaxSize", newJInt(MaxSize))
  add(formData_774936, "EndTime", newJString(EndTime))
  add(query_774935, "Version", newJString(Version))
  result = call_774934.call(nil, query_774935, nil, formData_774936, nil)

var postPutScheduledUpdateGroupAction* = Call_PostPutScheduledUpdateGroupAction_774912(
    name: "postPutScheduledUpdateGroupAction", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=PutScheduledUpdateGroupAction",
    validator: validate_PostPutScheduledUpdateGroupAction_774913, base: "/",
    url: url_PostPutScheduledUpdateGroupAction_774914,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutScheduledUpdateGroupAction_774888 = ref object of OpenApiRestCall_772597
proc url_GetPutScheduledUpdateGroupAction_774890(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetPutScheduledUpdateGroupAction_774889(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates or updates a scheduled scaling action for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html">Scheduled Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DesiredCapacity: JInt
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   ScheduledActionName: JString (required)
  ##                      : The name of this scaling action.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Time: JString
  ##       : This parameter is no longer used.
  ##   StartTime: JString
  ##            : <p>The date and time for this action to start, in YYYY-MM-DDThh:mm:ssZ format in UTC/GMT only and in quotes (for example, <code>"2019-06-01T00:00:00Z"</code>).</p> <p>If you specify <code>Recurrence</code> and <code>StartTime</code>, Amazon EC2 Auto Scaling performs the action at this time, and then performs the action based on the specified recurrence.</p> <p>If you try to schedule your action in the past, Amazon EC2 Auto Scaling returns an error message.</p>
  ##   Recurrence: JString
  ##             : <p>The recurring schedule for this action, in Unix cron syntax format. This format consists of five fields separated by white spaces: [Minute] [Hour] [Day_of_Month] [Month_of_Year] [Day_of_Week]. The value must be in quotes (for example, <code>"30 0 1 1,6,12 *"</code>). For more information about this format, see <a href="http://crontab.org">Crontab</a>.</p> <p>When <code>StartTime</code> and <code>EndTime</code> are specified with <code>Recurrence</code>, they form the boundaries of when the recurring action starts and stops.</p>
  ##   Action: JString (required)
  ##   MaxSize: JInt
  ##          : The maximum number of instances in the Auto Scaling group.
  ##   EndTime: JString
  ##          : The date and time for the recurring schedule to end. Amazon EC2 Auto Scaling does not perform the action after this time. 
  ##   MinSize: JInt
  ##          : The minimum number of instances in the Auto Scaling group.
  ##   Version: JString (required)
  section = newJObject()
  var valid_774891 = query.getOrDefault("DesiredCapacity")
  valid_774891 = validateParameter(valid_774891, JInt, required = false, default = nil)
  if valid_774891 != nil:
    section.add "DesiredCapacity", valid_774891
  assert query != nil, "query argument is necessary due to required `ScheduledActionName` field"
  var valid_774892 = query.getOrDefault("ScheduledActionName")
  valid_774892 = validateParameter(valid_774892, JString, required = true,
                                 default = nil)
  if valid_774892 != nil:
    section.add "ScheduledActionName", valid_774892
  var valid_774893 = query.getOrDefault("AutoScalingGroupName")
  valid_774893 = validateParameter(valid_774893, JString, required = true,
                                 default = nil)
  if valid_774893 != nil:
    section.add "AutoScalingGroupName", valid_774893
  var valid_774894 = query.getOrDefault("Time")
  valid_774894 = validateParameter(valid_774894, JString, required = false,
                                 default = nil)
  if valid_774894 != nil:
    section.add "Time", valid_774894
  var valid_774895 = query.getOrDefault("StartTime")
  valid_774895 = validateParameter(valid_774895, JString, required = false,
                                 default = nil)
  if valid_774895 != nil:
    section.add "StartTime", valid_774895
  var valid_774896 = query.getOrDefault("Recurrence")
  valid_774896 = validateParameter(valid_774896, JString, required = false,
                                 default = nil)
  if valid_774896 != nil:
    section.add "Recurrence", valid_774896
  var valid_774897 = query.getOrDefault("Action")
  valid_774897 = validateParameter(valid_774897, JString, required = true, default = newJString(
      "PutScheduledUpdateGroupAction"))
  if valid_774897 != nil:
    section.add "Action", valid_774897
  var valid_774898 = query.getOrDefault("MaxSize")
  valid_774898 = validateParameter(valid_774898, JInt, required = false, default = nil)
  if valid_774898 != nil:
    section.add "MaxSize", valid_774898
  var valid_774899 = query.getOrDefault("EndTime")
  valid_774899 = validateParameter(valid_774899, JString, required = false,
                                 default = nil)
  if valid_774899 != nil:
    section.add "EndTime", valid_774899
  var valid_774900 = query.getOrDefault("MinSize")
  valid_774900 = validateParameter(valid_774900, JInt, required = false, default = nil)
  if valid_774900 != nil:
    section.add "MinSize", valid_774900
  var valid_774901 = query.getOrDefault("Version")
  valid_774901 = validateParameter(valid_774901, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_774901 != nil:
    section.add "Version", valid_774901
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774902 = header.getOrDefault("X-Amz-Date")
  valid_774902 = validateParameter(valid_774902, JString, required = false,
                                 default = nil)
  if valid_774902 != nil:
    section.add "X-Amz-Date", valid_774902
  var valid_774903 = header.getOrDefault("X-Amz-Security-Token")
  valid_774903 = validateParameter(valid_774903, JString, required = false,
                                 default = nil)
  if valid_774903 != nil:
    section.add "X-Amz-Security-Token", valid_774903
  var valid_774904 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774904 = validateParameter(valid_774904, JString, required = false,
                                 default = nil)
  if valid_774904 != nil:
    section.add "X-Amz-Content-Sha256", valid_774904
  var valid_774905 = header.getOrDefault("X-Amz-Algorithm")
  valid_774905 = validateParameter(valid_774905, JString, required = false,
                                 default = nil)
  if valid_774905 != nil:
    section.add "X-Amz-Algorithm", valid_774905
  var valid_774906 = header.getOrDefault("X-Amz-Signature")
  valid_774906 = validateParameter(valid_774906, JString, required = false,
                                 default = nil)
  if valid_774906 != nil:
    section.add "X-Amz-Signature", valid_774906
  var valid_774907 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774907 = validateParameter(valid_774907, JString, required = false,
                                 default = nil)
  if valid_774907 != nil:
    section.add "X-Amz-SignedHeaders", valid_774907
  var valid_774908 = header.getOrDefault("X-Amz-Credential")
  valid_774908 = validateParameter(valid_774908, JString, required = false,
                                 default = nil)
  if valid_774908 != nil:
    section.add "X-Amz-Credential", valid_774908
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774909: Call_GetPutScheduledUpdateGroupAction_774888;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates or updates a scheduled scaling action for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html">Scheduled Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_774909.validator(path, query, header, formData, body)
  let scheme = call_774909.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774909.url(scheme.get, call_774909.host, call_774909.base,
                         call_774909.route, valid.getOrDefault("path"))
  result = hook(call_774909, url, valid)

proc call*(call_774910: Call_GetPutScheduledUpdateGroupAction_774888;
          ScheduledActionName: string; AutoScalingGroupName: string;
          DesiredCapacity: int = 0; Time: string = ""; StartTime: string = "";
          Recurrence: string = ""; Action: string = "PutScheduledUpdateGroupAction";
          MaxSize: int = 0; EndTime: string = ""; MinSize: int = 0;
          Version: string = "2011-01-01"): Recallable =
  ## getPutScheduledUpdateGroupAction
  ## <p>Creates or updates a scheduled scaling action for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html">Scheduled Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   DesiredCapacity: int
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   ScheduledActionName: string (required)
  ##                      : The name of this scaling action.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Time: string
  ##       : This parameter is no longer used.
  ##   StartTime: string
  ##            : <p>The date and time for this action to start, in YYYY-MM-DDThh:mm:ssZ format in UTC/GMT only and in quotes (for example, <code>"2019-06-01T00:00:00Z"</code>).</p> <p>If you specify <code>Recurrence</code> and <code>StartTime</code>, Amazon EC2 Auto Scaling performs the action at this time, and then performs the action based on the specified recurrence.</p> <p>If you try to schedule your action in the past, Amazon EC2 Auto Scaling returns an error message.</p>
  ##   Recurrence: string
  ##             : <p>The recurring schedule for this action, in Unix cron syntax format. This format consists of five fields separated by white spaces: [Minute] [Hour] [Day_of_Month] [Month_of_Year] [Day_of_Week]. The value must be in quotes (for example, <code>"30 0 1 1,6,12 *"</code>). For more information about this format, see <a href="http://crontab.org">Crontab</a>.</p> <p>When <code>StartTime</code> and <code>EndTime</code> are specified with <code>Recurrence</code>, they form the boundaries of when the recurring action starts and stops.</p>
  ##   Action: string (required)
  ##   MaxSize: int
  ##          : The maximum number of instances in the Auto Scaling group.
  ##   EndTime: string
  ##          : The date and time for the recurring schedule to end. Amazon EC2 Auto Scaling does not perform the action after this time. 
  ##   MinSize: int
  ##          : The minimum number of instances in the Auto Scaling group.
  ##   Version: string (required)
  var query_774911 = newJObject()
  add(query_774911, "DesiredCapacity", newJInt(DesiredCapacity))
  add(query_774911, "ScheduledActionName", newJString(ScheduledActionName))
  add(query_774911, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_774911, "Time", newJString(Time))
  add(query_774911, "StartTime", newJString(StartTime))
  add(query_774911, "Recurrence", newJString(Recurrence))
  add(query_774911, "Action", newJString(Action))
  add(query_774911, "MaxSize", newJInt(MaxSize))
  add(query_774911, "EndTime", newJString(EndTime))
  add(query_774911, "MinSize", newJInt(MinSize))
  add(query_774911, "Version", newJString(Version))
  result = call_774910.call(nil, query_774911, nil, nil, nil)

var getPutScheduledUpdateGroupAction* = Call_GetPutScheduledUpdateGroupAction_774888(
    name: "getPutScheduledUpdateGroupAction", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=PutScheduledUpdateGroupAction",
    validator: validate_GetPutScheduledUpdateGroupAction_774889, base: "/",
    url: url_GetPutScheduledUpdateGroupAction_774890,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRecordLifecycleActionHeartbeat_774956 = ref object of OpenApiRestCall_772597
proc url_PostRecordLifecycleActionHeartbeat_774958(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostRecordLifecycleActionHeartbeat_774957(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using <a>PutLifecycleHook</a>.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p> <b>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</b> </p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html">Auto Scaling Lifecycle</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774959 = query.getOrDefault("Action")
  valid_774959 = validateParameter(valid_774959, JString, required = true, default = newJString(
      "RecordLifecycleActionHeartbeat"))
  if valid_774959 != nil:
    section.add "Action", valid_774959
  var valid_774960 = query.getOrDefault("Version")
  valid_774960 = validateParameter(valid_774960, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_774960 != nil:
    section.add "Version", valid_774960
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774961 = header.getOrDefault("X-Amz-Date")
  valid_774961 = validateParameter(valid_774961, JString, required = false,
                                 default = nil)
  if valid_774961 != nil:
    section.add "X-Amz-Date", valid_774961
  var valid_774962 = header.getOrDefault("X-Amz-Security-Token")
  valid_774962 = validateParameter(valid_774962, JString, required = false,
                                 default = nil)
  if valid_774962 != nil:
    section.add "X-Amz-Security-Token", valid_774962
  var valid_774963 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774963 = validateParameter(valid_774963, JString, required = false,
                                 default = nil)
  if valid_774963 != nil:
    section.add "X-Amz-Content-Sha256", valid_774963
  var valid_774964 = header.getOrDefault("X-Amz-Algorithm")
  valid_774964 = validateParameter(valid_774964, JString, required = false,
                                 default = nil)
  if valid_774964 != nil:
    section.add "X-Amz-Algorithm", valid_774964
  var valid_774965 = header.getOrDefault("X-Amz-Signature")
  valid_774965 = validateParameter(valid_774965, JString, required = false,
                                 default = nil)
  if valid_774965 != nil:
    section.add "X-Amz-Signature", valid_774965
  var valid_774966 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774966 = validateParameter(valid_774966, JString, required = false,
                                 default = nil)
  if valid_774966 != nil:
    section.add "X-Amz-SignedHeaders", valid_774966
  var valid_774967 = header.getOrDefault("X-Amz-Credential")
  valid_774967 = validateParameter(valid_774967, JString, required = false,
                                 default = nil)
  if valid_774967 != nil:
    section.add "X-Amz-Credential", valid_774967
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceId: JString
  ##             : The ID of the instance.
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   LifecycleActionToken: JString
  ##                       : A token that uniquely identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target that you specified when you created the lifecycle hook.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_774968 = formData.getOrDefault("AutoScalingGroupName")
  valid_774968 = validateParameter(valid_774968, JString, required = true,
                                 default = nil)
  if valid_774968 != nil:
    section.add "AutoScalingGroupName", valid_774968
  var valid_774969 = formData.getOrDefault("InstanceId")
  valid_774969 = validateParameter(valid_774969, JString, required = false,
                                 default = nil)
  if valid_774969 != nil:
    section.add "InstanceId", valid_774969
  var valid_774970 = formData.getOrDefault("LifecycleHookName")
  valid_774970 = validateParameter(valid_774970, JString, required = true,
                                 default = nil)
  if valid_774970 != nil:
    section.add "LifecycleHookName", valid_774970
  var valid_774971 = formData.getOrDefault("LifecycleActionToken")
  valid_774971 = validateParameter(valid_774971, JString, required = false,
                                 default = nil)
  if valid_774971 != nil:
    section.add "LifecycleActionToken", valid_774971
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774972: Call_PostRecordLifecycleActionHeartbeat_774956;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using <a>PutLifecycleHook</a>.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p> <b>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</b> </p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html">Auto Scaling Lifecycle</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_774972.validator(path, query, header, formData, body)
  let scheme = call_774972.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774972.url(scheme.get, call_774972.host, call_774972.base,
                         call_774972.route, valid.getOrDefault("path"))
  result = hook(call_774972, url, valid)

proc call*(call_774973: Call_PostRecordLifecycleActionHeartbeat_774956;
          AutoScalingGroupName: string; LifecycleHookName: string;
          Action: string = "RecordLifecycleActionHeartbeat";
          InstanceId: string = ""; Version: string = "2011-01-01";
          LifecycleActionToken: string = ""): Recallable =
  ## postRecordLifecycleActionHeartbeat
  ## <p>Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using <a>PutLifecycleHook</a>.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p> <b>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</b> </p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html">Auto Scaling Lifecycle</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   InstanceId: string
  ##             : The ID of the instance.
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   Version: string (required)
  ##   LifecycleActionToken: string
  ##                       : A token that uniquely identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target that you specified when you created the lifecycle hook.
  var query_774974 = newJObject()
  var formData_774975 = newJObject()
  add(formData_774975, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_774974, "Action", newJString(Action))
  add(formData_774975, "InstanceId", newJString(InstanceId))
  add(formData_774975, "LifecycleHookName", newJString(LifecycleHookName))
  add(query_774974, "Version", newJString(Version))
  add(formData_774975, "LifecycleActionToken", newJString(LifecycleActionToken))
  result = call_774973.call(nil, query_774974, nil, formData_774975, nil)

var postRecordLifecycleActionHeartbeat* = Call_PostRecordLifecycleActionHeartbeat_774956(
    name: "postRecordLifecycleActionHeartbeat", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=RecordLifecycleActionHeartbeat",
    validator: validate_PostRecordLifecycleActionHeartbeat_774957, base: "/",
    url: url_PostRecordLifecycleActionHeartbeat_774958,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRecordLifecycleActionHeartbeat_774937 = ref object of OpenApiRestCall_772597
proc url_GetRecordLifecycleActionHeartbeat_774939(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetRecordLifecycleActionHeartbeat_774938(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using <a>PutLifecycleHook</a>.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p> <b>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</b> </p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html">Auto Scaling Lifecycle</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   InstanceId: JString
  ##             : The ID of the instance.
  ##   Version: JString (required)
  ##   LifecycleActionToken: JString
  ##                       : A token that uniquely identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target that you specified when you created the lifecycle hook.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_774940 = query.getOrDefault("AutoScalingGroupName")
  valid_774940 = validateParameter(valid_774940, JString, required = true,
                                 default = nil)
  if valid_774940 != nil:
    section.add "AutoScalingGroupName", valid_774940
  var valid_774941 = query.getOrDefault("Action")
  valid_774941 = validateParameter(valid_774941, JString, required = true, default = newJString(
      "RecordLifecycleActionHeartbeat"))
  if valid_774941 != nil:
    section.add "Action", valid_774941
  var valid_774942 = query.getOrDefault("LifecycleHookName")
  valid_774942 = validateParameter(valid_774942, JString, required = true,
                                 default = nil)
  if valid_774942 != nil:
    section.add "LifecycleHookName", valid_774942
  var valid_774943 = query.getOrDefault("InstanceId")
  valid_774943 = validateParameter(valid_774943, JString, required = false,
                                 default = nil)
  if valid_774943 != nil:
    section.add "InstanceId", valid_774943
  var valid_774944 = query.getOrDefault("Version")
  valid_774944 = validateParameter(valid_774944, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_774944 != nil:
    section.add "Version", valid_774944
  var valid_774945 = query.getOrDefault("LifecycleActionToken")
  valid_774945 = validateParameter(valid_774945, JString, required = false,
                                 default = nil)
  if valid_774945 != nil:
    section.add "LifecycleActionToken", valid_774945
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774946 = header.getOrDefault("X-Amz-Date")
  valid_774946 = validateParameter(valid_774946, JString, required = false,
                                 default = nil)
  if valid_774946 != nil:
    section.add "X-Amz-Date", valid_774946
  var valid_774947 = header.getOrDefault("X-Amz-Security-Token")
  valid_774947 = validateParameter(valid_774947, JString, required = false,
                                 default = nil)
  if valid_774947 != nil:
    section.add "X-Amz-Security-Token", valid_774947
  var valid_774948 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774948 = validateParameter(valid_774948, JString, required = false,
                                 default = nil)
  if valid_774948 != nil:
    section.add "X-Amz-Content-Sha256", valid_774948
  var valid_774949 = header.getOrDefault("X-Amz-Algorithm")
  valid_774949 = validateParameter(valid_774949, JString, required = false,
                                 default = nil)
  if valid_774949 != nil:
    section.add "X-Amz-Algorithm", valid_774949
  var valid_774950 = header.getOrDefault("X-Amz-Signature")
  valid_774950 = validateParameter(valid_774950, JString, required = false,
                                 default = nil)
  if valid_774950 != nil:
    section.add "X-Amz-Signature", valid_774950
  var valid_774951 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774951 = validateParameter(valid_774951, JString, required = false,
                                 default = nil)
  if valid_774951 != nil:
    section.add "X-Amz-SignedHeaders", valid_774951
  var valid_774952 = header.getOrDefault("X-Amz-Credential")
  valid_774952 = validateParameter(valid_774952, JString, required = false,
                                 default = nil)
  if valid_774952 != nil:
    section.add "X-Amz-Credential", valid_774952
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774953: Call_GetRecordLifecycleActionHeartbeat_774937;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using <a>PutLifecycleHook</a>.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p> <b>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</b> </p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html">Auto Scaling Lifecycle</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_774953.validator(path, query, header, formData, body)
  let scheme = call_774953.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774953.url(scheme.get, call_774953.host, call_774953.base,
                         call_774953.route, valid.getOrDefault("path"))
  result = hook(call_774953, url, valid)

proc call*(call_774954: Call_GetRecordLifecycleActionHeartbeat_774937;
          AutoScalingGroupName: string; LifecycleHookName: string;
          Action: string = "RecordLifecycleActionHeartbeat";
          InstanceId: string = ""; Version: string = "2011-01-01";
          LifecycleActionToken: string = ""): Recallable =
  ## getRecordLifecycleActionHeartbeat
  ## <p>Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using <a>PutLifecycleHook</a>.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p> <b>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</b> </p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html">Auto Scaling Lifecycle</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   InstanceId: string
  ##             : The ID of the instance.
  ##   Version: string (required)
  ##   LifecycleActionToken: string
  ##                       : A token that uniquely identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target that you specified when you created the lifecycle hook.
  var query_774955 = newJObject()
  add(query_774955, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_774955, "Action", newJString(Action))
  add(query_774955, "LifecycleHookName", newJString(LifecycleHookName))
  add(query_774955, "InstanceId", newJString(InstanceId))
  add(query_774955, "Version", newJString(Version))
  add(query_774955, "LifecycleActionToken", newJString(LifecycleActionToken))
  result = call_774954.call(nil, query_774955, nil, nil, nil)

var getRecordLifecycleActionHeartbeat* = Call_GetRecordLifecycleActionHeartbeat_774937(
    name: "getRecordLifecycleActionHeartbeat", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=RecordLifecycleActionHeartbeat",
    validator: validate_GetRecordLifecycleActionHeartbeat_774938, base: "/",
    url: url_GetRecordLifecycleActionHeartbeat_774939,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResumeProcesses_774993 = ref object of OpenApiRestCall_772597
proc url_PostResumeProcesses_774995(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostResumeProcesses_774994(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Resumes the specified suspended automatic scaling processes, or all suspended process, for the specified Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774996 = query.getOrDefault("Action")
  valid_774996 = validateParameter(valid_774996, JString, required = true,
                                 default = newJString("ResumeProcesses"))
  if valid_774996 != nil:
    section.add "Action", valid_774996
  var valid_774997 = query.getOrDefault("Version")
  valid_774997 = validateParameter(valid_774997, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_774997 != nil:
    section.add "Version", valid_774997
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774998 = header.getOrDefault("X-Amz-Date")
  valid_774998 = validateParameter(valid_774998, JString, required = false,
                                 default = nil)
  if valid_774998 != nil:
    section.add "X-Amz-Date", valid_774998
  var valid_774999 = header.getOrDefault("X-Amz-Security-Token")
  valid_774999 = validateParameter(valid_774999, JString, required = false,
                                 default = nil)
  if valid_774999 != nil:
    section.add "X-Amz-Security-Token", valid_774999
  var valid_775000 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775000 = validateParameter(valid_775000, JString, required = false,
                                 default = nil)
  if valid_775000 != nil:
    section.add "X-Amz-Content-Sha256", valid_775000
  var valid_775001 = header.getOrDefault("X-Amz-Algorithm")
  valid_775001 = validateParameter(valid_775001, JString, required = false,
                                 default = nil)
  if valid_775001 != nil:
    section.add "X-Amz-Algorithm", valid_775001
  var valid_775002 = header.getOrDefault("X-Amz-Signature")
  valid_775002 = validateParameter(valid_775002, JString, required = false,
                                 default = nil)
  if valid_775002 != nil:
    section.add "X-Amz-Signature", valid_775002
  var valid_775003 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775003 = validateParameter(valid_775003, JString, required = false,
                                 default = nil)
  if valid_775003 != nil:
    section.add "X-Amz-SignedHeaders", valid_775003
  var valid_775004 = header.getOrDefault("X-Amz-Credential")
  valid_775004 = validateParameter(valid_775004, JString, required = false,
                                 default = nil)
  if valid_775004 != nil:
    section.add "X-Amz-Credential", valid_775004
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_775005 = formData.getOrDefault("AutoScalingGroupName")
  valid_775005 = validateParameter(valid_775005, JString, required = true,
                                 default = nil)
  if valid_775005 != nil:
    section.add "AutoScalingGroupName", valid_775005
  var valid_775006 = formData.getOrDefault("ScalingProcesses")
  valid_775006 = validateParameter(valid_775006, JArray, required = false,
                                 default = nil)
  if valid_775006 != nil:
    section.add "ScalingProcesses", valid_775006
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775007: Call_PostResumeProcesses_774993; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Resumes the specified suspended automatic scaling processes, or all suspended process, for the specified Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_775007.validator(path, query, header, formData, body)
  let scheme = call_775007.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775007.url(scheme.get, call_775007.host, call_775007.base,
                         call_775007.route, valid.getOrDefault("path"))
  result = hook(call_775007, url, valid)

proc call*(call_775008: Call_PostResumeProcesses_774993;
          AutoScalingGroupName: string; ScalingProcesses: JsonNode = nil;
          Action: string = "ResumeProcesses"; Version: string = "2011-01-01"): Recallable =
  ## postResumeProcesses
  ## <p>Resumes the specified suspended automatic scaling processes, or all suspended process, for the specified Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775009 = newJObject()
  var formData_775010 = newJObject()
  add(formData_775010, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if ScalingProcesses != nil:
    formData_775010.add "ScalingProcesses", ScalingProcesses
  add(query_775009, "Action", newJString(Action))
  add(query_775009, "Version", newJString(Version))
  result = call_775008.call(nil, query_775009, nil, formData_775010, nil)

var postResumeProcesses* = Call_PostResumeProcesses_774993(
    name: "postResumeProcesses", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=ResumeProcesses",
    validator: validate_PostResumeProcesses_774994, base: "/",
    url: url_PostResumeProcesses_774995, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResumeProcesses_774976 = ref object of OpenApiRestCall_772597
proc url_GetResumeProcesses_774978(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetResumeProcesses_774977(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Resumes the specified suspended automatic scaling processes, or all suspended process, for the specified Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_774979 = query.getOrDefault("ScalingProcesses")
  valid_774979 = validateParameter(valid_774979, JArray, required = false,
                                 default = nil)
  if valid_774979 != nil:
    section.add "ScalingProcesses", valid_774979
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_774980 = query.getOrDefault("AutoScalingGroupName")
  valid_774980 = validateParameter(valid_774980, JString, required = true,
                                 default = nil)
  if valid_774980 != nil:
    section.add "AutoScalingGroupName", valid_774980
  var valid_774981 = query.getOrDefault("Action")
  valid_774981 = validateParameter(valid_774981, JString, required = true,
                                 default = newJString("ResumeProcesses"))
  if valid_774981 != nil:
    section.add "Action", valid_774981
  var valid_774982 = query.getOrDefault("Version")
  valid_774982 = validateParameter(valid_774982, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_774982 != nil:
    section.add "Version", valid_774982
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774983 = header.getOrDefault("X-Amz-Date")
  valid_774983 = validateParameter(valid_774983, JString, required = false,
                                 default = nil)
  if valid_774983 != nil:
    section.add "X-Amz-Date", valid_774983
  var valid_774984 = header.getOrDefault("X-Amz-Security-Token")
  valid_774984 = validateParameter(valid_774984, JString, required = false,
                                 default = nil)
  if valid_774984 != nil:
    section.add "X-Amz-Security-Token", valid_774984
  var valid_774985 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774985 = validateParameter(valid_774985, JString, required = false,
                                 default = nil)
  if valid_774985 != nil:
    section.add "X-Amz-Content-Sha256", valid_774985
  var valid_774986 = header.getOrDefault("X-Amz-Algorithm")
  valid_774986 = validateParameter(valid_774986, JString, required = false,
                                 default = nil)
  if valid_774986 != nil:
    section.add "X-Amz-Algorithm", valid_774986
  var valid_774987 = header.getOrDefault("X-Amz-Signature")
  valid_774987 = validateParameter(valid_774987, JString, required = false,
                                 default = nil)
  if valid_774987 != nil:
    section.add "X-Amz-Signature", valid_774987
  var valid_774988 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774988 = validateParameter(valid_774988, JString, required = false,
                                 default = nil)
  if valid_774988 != nil:
    section.add "X-Amz-SignedHeaders", valid_774988
  var valid_774989 = header.getOrDefault("X-Amz-Credential")
  valid_774989 = validateParameter(valid_774989, JString, required = false,
                                 default = nil)
  if valid_774989 != nil:
    section.add "X-Amz-Credential", valid_774989
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774990: Call_GetResumeProcesses_774976; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Resumes the specified suspended automatic scaling processes, or all suspended process, for the specified Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_774990.validator(path, query, header, formData, body)
  let scheme = call_774990.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774990.url(scheme.get, call_774990.host, call_774990.base,
                         call_774990.route, valid.getOrDefault("path"))
  result = hook(call_774990, url, valid)

proc call*(call_774991: Call_GetResumeProcesses_774976;
          AutoScalingGroupName: string; ScalingProcesses: JsonNode = nil;
          Action: string = "ResumeProcesses"; Version: string = "2011-01-01"): Recallable =
  ## getResumeProcesses
  ## <p>Resumes the specified suspended automatic scaling processes, or all suspended process, for the specified Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774992 = newJObject()
  if ScalingProcesses != nil:
    query_774992.add "ScalingProcesses", ScalingProcesses
  add(query_774992, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_774992, "Action", newJString(Action))
  add(query_774992, "Version", newJString(Version))
  result = call_774991.call(nil, query_774992, nil, nil, nil)

var getResumeProcesses* = Call_GetResumeProcesses_774976(
    name: "getResumeProcesses", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=ResumeProcesses",
    validator: validate_GetResumeProcesses_774977, base: "/",
    url: url_GetResumeProcesses_774978, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetDesiredCapacity_775029 = ref object of OpenApiRestCall_772597
proc url_PostSetDesiredCapacity_775031(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSetDesiredCapacity_775030(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the size of the specified Auto Scaling group.</p> <p>For more information about desired capacity, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">What Is Amazon EC2 Auto Scaling?</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775032 = query.getOrDefault("Action")
  valid_775032 = validateParameter(valid_775032, JString, required = true,
                                 default = newJString("SetDesiredCapacity"))
  if valid_775032 != nil:
    section.add "Action", valid_775032
  var valid_775033 = query.getOrDefault("Version")
  valid_775033 = validateParameter(valid_775033, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_775033 != nil:
    section.add "Version", valid_775033
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775034 = header.getOrDefault("X-Amz-Date")
  valid_775034 = validateParameter(valid_775034, JString, required = false,
                                 default = nil)
  if valid_775034 != nil:
    section.add "X-Amz-Date", valid_775034
  var valid_775035 = header.getOrDefault("X-Amz-Security-Token")
  valid_775035 = validateParameter(valid_775035, JString, required = false,
                                 default = nil)
  if valid_775035 != nil:
    section.add "X-Amz-Security-Token", valid_775035
  var valid_775036 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775036 = validateParameter(valid_775036, JString, required = false,
                                 default = nil)
  if valid_775036 != nil:
    section.add "X-Amz-Content-Sha256", valid_775036
  var valid_775037 = header.getOrDefault("X-Amz-Algorithm")
  valid_775037 = validateParameter(valid_775037, JString, required = false,
                                 default = nil)
  if valid_775037 != nil:
    section.add "X-Amz-Algorithm", valid_775037
  var valid_775038 = header.getOrDefault("X-Amz-Signature")
  valid_775038 = validateParameter(valid_775038, JString, required = false,
                                 default = nil)
  if valid_775038 != nil:
    section.add "X-Amz-Signature", valid_775038
  var valid_775039 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775039 = validateParameter(valid_775039, JString, required = false,
                                 default = nil)
  if valid_775039 != nil:
    section.add "X-Amz-SignedHeaders", valid_775039
  var valid_775040 = header.getOrDefault("X-Amz-Credential")
  valid_775040 = validateParameter(valid_775040, JString, required = false,
                                 default = nil)
  if valid_775040 != nil:
    section.add "X-Amz-Credential", valid_775040
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   DesiredCapacity: JInt (required)
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   HonorCooldown: JBool
  ##                : Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before initiating a scaling activity to set your Auto Scaling group to its new capacity. By default, Amazon EC2 Auto Scaling does not honor the cooldown period during manual scaling activities.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_775041 = formData.getOrDefault("AutoScalingGroupName")
  valid_775041 = validateParameter(valid_775041, JString, required = true,
                                 default = nil)
  if valid_775041 != nil:
    section.add "AutoScalingGroupName", valid_775041
  var valid_775042 = formData.getOrDefault("DesiredCapacity")
  valid_775042 = validateParameter(valid_775042, JInt, required = true, default = nil)
  if valid_775042 != nil:
    section.add "DesiredCapacity", valid_775042
  var valid_775043 = formData.getOrDefault("HonorCooldown")
  valid_775043 = validateParameter(valid_775043, JBool, required = false, default = nil)
  if valid_775043 != nil:
    section.add "HonorCooldown", valid_775043
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775044: Call_PostSetDesiredCapacity_775029; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the size of the specified Auto Scaling group.</p> <p>For more information about desired capacity, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">What Is Amazon EC2 Auto Scaling?</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_775044.validator(path, query, header, formData, body)
  let scheme = call_775044.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775044.url(scheme.get, call_775044.host, call_775044.base,
                         call_775044.route, valid.getOrDefault("path"))
  result = hook(call_775044, url, valid)

proc call*(call_775045: Call_PostSetDesiredCapacity_775029;
          AutoScalingGroupName: string; DesiredCapacity: int;
          HonorCooldown: bool = false; Action: string = "SetDesiredCapacity";
          Version: string = "2011-01-01"): Recallable =
  ## postSetDesiredCapacity
  ## <p>Sets the size of the specified Auto Scaling group.</p> <p>For more information about desired capacity, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">What Is Amazon EC2 Auto Scaling?</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   DesiredCapacity: int (required)
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   HonorCooldown: bool
  ##                : Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before initiating a scaling activity to set your Auto Scaling group to its new capacity. By default, Amazon EC2 Auto Scaling does not honor the cooldown period during manual scaling activities.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775046 = newJObject()
  var formData_775047 = newJObject()
  add(formData_775047, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_775047, "DesiredCapacity", newJInt(DesiredCapacity))
  add(formData_775047, "HonorCooldown", newJBool(HonorCooldown))
  add(query_775046, "Action", newJString(Action))
  add(query_775046, "Version", newJString(Version))
  result = call_775045.call(nil, query_775046, nil, formData_775047, nil)

var postSetDesiredCapacity* = Call_PostSetDesiredCapacity_775029(
    name: "postSetDesiredCapacity", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=SetDesiredCapacity",
    validator: validate_PostSetDesiredCapacity_775030, base: "/",
    url: url_PostSetDesiredCapacity_775031, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetDesiredCapacity_775011 = ref object of OpenApiRestCall_772597
proc url_GetSetDesiredCapacity_775013(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSetDesiredCapacity_775012(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the size of the specified Auto Scaling group.</p> <p>For more information about desired capacity, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">What Is Amazon EC2 Auto Scaling?</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DesiredCapacity: JInt (required)
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   HonorCooldown: JBool
  ##                : Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before initiating a scaling activity to set your Auto Scaling group to its new capacity. By default, Amazon EC2 Auto Scaling does not honor the cooldown period during manual scaling activities.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `DesiredCapacity` field"
  var valid_775014 = query.getOrDefault("DesiredCapacity")
  valid_775014 = validateParameter(valid_775014, JInt, required = true, default = nil)
  if valid_775014 != nil:
    section.add "DesiredCapacity", valid_775014
  var valid_775015 = query.getOrDefault("AutoScalingGroupName")
  valid_775015 = validateParameter(valid_775015, JString, required = true,
                                 default = nil)
  if valid_775015 != nil:
    section.add "AutoScalingGroupName", valid_775015
  var valid_775016 = query.getOrDefault("Action")
  valid_775016 = validateParameter(valid_775016, JString, required = true,
                                 default = newJString("SetDesiredCapacity"))
  if valid_775016 != nil:
    section.add "Action", valid_775016
  var valid_775017 = query.getOrDefault("HonorCooldown")
  valid_775017 = validateParameter(valid_775017, JBool, required = false, default = nil)
  if valid_775017 != nil:
    section.add "HonorCooldown", valid_775017
  var valid_775018 = query.getOrDefault("Version")
  valid_775018 = validateParameter(valid_775018, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_775018 != nil:
    section.add "Version", valid_775018
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775019 = header.getOrDefault("X-Amz-Date")
  valid_775019 = validateParameter(valid_775019, JString, required = false,
                                 default = nil)
  if valid_775019 != nil:
    section.add "X-Amz-Date", valid_775019
  var valid_775020 = header.getOrDefault("X-Amz-Security-Token")
  valid_775020 = validateParameter(valid_775020, JString, required = false,
                                 default = nil)
  if valid_775020 != nil:
    section.add "X-Amz-Security-Token", valid_775020
  var valid_775021 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775021 = validateParameter(valid_775021, JString, required = false,
                                 default = nil)
  if valid_775021 != nil:
    section.add "X-Amz-Content-Sha256", valid_775021
  var valid_775022 = header.getOrDefault("X-Amz-Algorithm")
  valid_775022 = validateParameter(valid_775022, JString, required = false,
                                 default = nil)
  if valid_775022 != nil:
    section.add "X-Amz-Algorithm", valid_775022
  var valid_775023 = header.getOrDefault("X-Amz-Signature")
  valid_775023 = validateParameter(valid_775023, JString, required = false,
                                 default = nil)
  if valid_775023 != nil:
    section.add "X-Amz-Signature", valid_775023
  var valid_775024 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775024 = validateParameter(valid_775024, JString, required = false,
                                 default = nil)
  if valid_775024 != nil:
    section.add "X-Amz-SignedHeaders", valid_775024
  var valid_775025 = header.getOrDefault("X-Amz-Credential")
  valid_775025 = validateParameter(valid_775025, JString, required = false,
                                 default = nil)
  if valid_775025 != nil:
    section.add "X-Amz-Credential", valid_775025
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775026: Call_GetSetDesiredCapacity_775011; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the size of the specified Auto Scaling group.</p> <p>For more information about desired capacity, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">What Is Amazon EC2 Auto Scaling?</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_775026.validator(path, query, header, formData, body)
  let scheme = call_775026.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775026.url(scheme.get, call_775026.host, call_775026.base,
                         call_775026.route, valid.getOrDefault("path"))
  result = hook(call_775026, url, valid)

proc call*(call_775027: Call_GetSetDesiredCapacity_775011; DesiredCapacity: int;
          AutoScalingGroupName: string; Action: string = "SetDesiredCapacity";
          HonorCooldown: bool = false; Version: string = "2011-01-01"): Recallable =
  ## getSetDesiredCapacity
  ## <p>Sets the size of the specified Auto Scaling group.</p> <p>For more information about desired capacity, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">What Is Amazon EC2 Auto Scaling?</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   DesiredCapacity: int (required)
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   HonorCooldown: bool
  ##                : Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before initiating a scaling activity to set your Auto Scaling group to its new capacity. By default, Amazon EC2 Auto Scaling does not honor the cooldown period during manual scaling activities.
  ##   Version: string (required)
  var query_775028 = newJObject()
  add(query_775028, "DesiredCapacity", newJInt(DesiredCapacity))
  add(query_775028, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_775028, "Action", newJString(Action))
  add(query_775028, "HonorCooldown", newJBool(HonorCooldown))
  add(query_775028, "Version", newJString(Version))
  result = call_775027.call(nil, query_775028, nil, nil, nil)

var getSetDesiredCapacity* = Call_GetSetDesiredCapacity_775011(
    name: "getSetDesiredCapacity", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=SetDesiredCapacity",
    validator: validate_GetSetDesiredCapacity_775012, base: "/",
    url: url_GetSetDesiredCapacity_775013, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetInstanceHealth_775066 = ref object of OpenApiRestCall_772597
proc url_PostSetInstanceHealth_775068(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSetInstanceHealth_775067(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the health status of the specified instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775069 = query.getOrDefault("Action")
  valid_775069 = validateParameter(valid_775069, JString, required = true,
                                 default = newJString("SetInstanceHealth"))
  if valid_775069 != nil:
    section.add "Action", valid_775069
  var valid_775070 = query.getOrDefault("Version")
  valid_775070 = validateParameter(valid_775070, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_775070 != nil:
    section.add "Version", valid_775070
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775071 = header.getOrDefault("X-Amz-Date")
  valid_775071 = validateParameter(valid_775071, JString, required = false,
                                 default = nil)
  if valid_775071 != nil:
    section.add "X-Amz-Date", valid_775071
  var valid_775072 = header.getOrDefault("X-Amz-Security-Token")
  valid_775072 = validateParameter(valid_775072, JString, required = false,
                                 default = nil)
  if valid_775072 != nil:
    section.add "X-Amz-Security-Token", valid_775072
  var valid_775073 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775073 = validateParameter(valid_775073, JString, required = false,
                                 default = nil)
  if valid_775073 != nil:
    section.add "X-Amz-Content-Sha256", valid_775073
  var valid_775074 = header.getOrDefault("X-Amz-Algorithm")
  valid_775074 = validateParameter(valid_775074, JString, required = false,
                                 default = nil)
  if valid_775074 != nil:
    section.add "X-Amz-Algorithm", valid_775074
  var valid_775075 = header.getOrDefault("X-Amz-Signature")
  valid_775075 = validateParameter(valid_775075, JString, required = false,
                                 default = nil)
  if valid_775075 != nil:
    section.add "X-Amz-Signature", valid_775075
  var valid_775076 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775076 = validateParameter(valid_775076, JString, required = false,
                                 default = nil)
  if valid_775076 != nil:
    section.add "X-Amz-SignedHeaders", valid_775076
  var valid_775077 = header.getOrDefault("X-Amz-Credential")
  valid_775077 = validateParameter(valid_775077, JString, required = false,
                                 default = nil)
  if valid_775077 != nil:
    section.add "X-Amz-Credential", valid_775077
  result.add "header", section
  ## parameters in `formData` object:
  ##   ShouldRespectGracePeriod: JBool
  ##                           : <p>If the Auto Scaling group of the specified instance has a <code>HealthCheckGracePeriod</code> specified for the group, by default, this call respects the grace period. Set this to <code>False</code>, to have the call not respect the grace period associated with the group.</p> <p>For more information about the health check grace period, see <a>CreateAutoScalingGroup</a>.</p>
  ##   HealthStatus: JString (required)
  ##               : The health status of the instance. Set to <code>Healthy</code> to have the instance remain in service. Set to <code>Unhealthy</code> to have the instance be out of service. Amazon EC2 Auto Scaling terminates and replaces the unhealthy instance.
  ##   InstanceId: JString (required)
  ##             : The ID of the instance.
  section = newJObject()
  var valid_775078 = formData.getOrDefault("ShouldRespectGracePeriod")
  valid_775078 = validateParameter(valid_775078, JBool, required = false, default = nil)
  if valid_775078 != nil:
    section.add "ShouldRespectGracePeriod", valid_775078
  assert formData != nil,
        "formData argument is necessary due to required `HealthStatus` field"
  var valid_775079 = formData.getOrDefault("HealthStatus")
  valid_775079 = validateParameter(valid_775079, JString, required = true,
                                 default = nil)
  if valid_775079 != nil:
    section.add "HealthStatus", valid_775079
  var valid_775080 = formData.getOrDefault("InstanceId")
  valid_775080 = validateParameter(valid_775080, JString, required = true,
                                 default = nil)
  if valid_775080 != nil:
    section.add "InstanceId", valid_775080
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775081: Call_PostSetInstanceHealth_775066; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the health status of the specified instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_775081.validator(path, query, header, formData, body)
  let scheme = call_775081.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775081.url(scheme.get, call_775081.host, call_775081.base,
                         call_775081.route, valid.getOrDefault("path"))
  result = hook(call_775081, url, valid)

proc call*(call_775082: Call_PostSetInstanceHealth_775066; HealthStatus: string;
          InstanceId: string; ShouldRespectGracePeriod: bool = false;
          Action: string = "SetInstanceHealth"; Version: string = "2011-01-01"): Recallable =
  ## postSetInstanceHealth
  ## <p>Sets the health status of the specified instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   ShouldRespectGracePeriod: bool
  ##                           : <p>If the Auto Scaling group of the specified instance has a <code>HealthCheckGracePeriod</code> specified for the group, by default, this call respects the grace period. Set this to <code>False</code>, to have the call not respect the grace period associated with the group.</p> <p>For more information about the health check grace period, see <a>CreateAutoScalingGroup</a>.</p>
  ##   Action: string (required)
  ##   HealthStatus: string (required)
  ##               : The health status of the instance. Set to <code>Healthy</code> to have the instance remain in service. Set to <code>Unhealthy</code> to have the instance be out of service. Amazon EC2 Auto Scaling terminates and replaces the unhealthy instance.
  ##   InstanceId: string (required)
  ##             : The ID of the instance.
  ##   Version: string (required)
  var query_775083 = newJObject()
  var formData_775084 = newJObject()
  add(formData_775084, "ShouldRespectGracePeriod",
      newJBool(ShouldRespectGracePeriod))
  add(query_775083, "Action", newJString(Action))
  add(formData_775084, "HealthStatus", newJString(HealthStatus))
  add(formData_775084, "InstanceId", newJString(InstanceId))
  add(query_775083, "Version", newJString(Version))
  result = call_775082.call(nil, query_775083, nil, formData_775084, nil)

var postSetInstanceHealth* = Call_PostSetInstanceHealth_775066(
    name: "postSetInstanceHealth", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=SetInstanceHealth",
    validator: validate_PostSetInstanceHealth_775067, base: "/",
    url: url_PostSetInstanceHealth_775068, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetInstanceHealth_775048 = ref object of OpenApiRestCall_772597
proc url_GetSetInstanceHealth_775050(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSetInstanceHealth_775049(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the health status of the specified instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   HealthStatus: JString (required)
  ##               : The health status of the instance. Set to <code>Healthy</code> to have the instance remain in service. Set to <code>Unhealthy</code> to have the instance be out of service. Amazon EC2 Auto Scaling terminates and replaces the unhealthy instance.
  ##   ShouldRespectGracePeriod: JBool
  ##                           : <p>If the Auto Scaling group of the specified instance has a <code>HealthCheckGracePeriod</code> specified for the group, by default, this call respects the grace period. Set this to <code>False</code>, to have the call not respect the grace period associated with the group.</p> <p>For more information about the health check grace period, see <a>CreateAutoScalingGroup</a>.</p>
  ##   Action: JString (required)
  ##   InstanceId: JString (required)
  ##             : The ID of the instance.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `HealthStatus` field"
  var valid_775051 = query.getOrDefault("HealthStatus")
  valid_775051 = validateParameter(valid_775051, JString, required = true,
                                 default = nil)
  if valid_775051 != nil:
    section.add "HealthStatus", valid_775051
  var valid_775052 = query.getOrDefault("ShouldRespectGracePeriod")
  valid_775052 = validateParameter(valid_775052, JBool, required = false, default = nil)
  if valid_775052 != nil:
    section.add "ShouldRespectGracePeriod", valid_775052
  var valid_775053 = query.getOrDefault("Action")
  valid_775053 = validateParameter(valid_775053, JString, required = true,
                                 default = newJString("SetInstanceHealth"))
  if valid_775053 != nil:
    section.add "Action", valid_775053
  var valid_775054 = query.getOrDefault("InstanceId")
  valid_775054 = validateParameter(valid_775054, JString, required = true,
                                 default = nil)
  if valid_775054 != nil:
    section.add "InstanceId", valid_775054
  var valid_775055 = query.getOrDefault("Version")
  valid_775055 = validateParameter(valid_775055, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_775055 != nil:
    section.add "Version", valid_775055
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775056 = header.getOrDefault("X-Amz-Date")
  valid_775056 = validateParameter(valid_775056, JString, required = false,
                                 default = nil)
  if valid_775056 != nil:
    section.add "X-Amz-Date", valid_775056
  var valid_775057 = header.getOrDefault("X-Amz-Security-Token")
  valid_775057 = validateParameter(valid_775057, JString, required = false,
                                 default = nil)
  if valid_775057 != nil:
    section.add "X-Amz-Security-Token", valid_775057
  var valid_775058 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775058 = validateParameter(valid_775058, JString, required = false,
                                 default = nil)
  if valid_775058 != nil:
    section.add "X-Amz-Content-Sha256", valid_775058
  var valid_775059 = header.getOrDefault("X-Amz-Algorithm")
  valid_775059 = validateParameter(valid_775059, JString, required = false,
                                 default = nil)
  if valid_775059 != nil:
    section.add "X-Amz-Algorithm", valid_775059
  var valid_775060 = header.getOrDefault("X-Amz-Signature")
  valid_775060 = validateParameter(valid_775060, JString, required = false,
                                 default = nil)
  if valid_775060 != nil:
    section.add "X-Amz-Signature", valid_775060
  var valid_775061 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775061 = validateParameter(valid_775061, JString, required = false,
                                 default = nil)
  if valid_775061 != nil:
    section.add "X-Amz-SignedHeaders", valid_775061
  var valid_775062 = header.getOrDefault("X-Amz-Credential")
  valid_775062 = validateParameter(valid_775062, JString, required = false,
                                 default = nil)
  if valid_775062 != nil:
    section.add "X-Amz-Credential", valid_775062
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775063: Call_GetSetInstanceHealth_775048; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the health status of the specified instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_775063.validator(path, query, header, formData, body)
  let scheme = call_775063.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775063.url(scheme.get, call_775063.host, call_775063.base,
                         call_775063.route, valid.getOrDefault("path"))
  result = hook(call_775063, url, valid)

proc call*(call_775064: Call_GetSetInstanceHealth_775048; HealthStatus: string;
          InstanceId: string; ShouldRespectGracePeriod: bool = false;
          Action: string = "SetInstanceHealth"; Version: string = "2011-01-01"): Recallable =
  ## getSetInstanceHealth
  ## <p>Sets the health status of the specified instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   HealthStatus: string (required)
  ##               : The health status of the instance. Set to <code>Healthy</code> to have the instance remain in service. Set to <code>Unhealthy</code> to have the instance be out of service. Amazon EC2 Auto Scaling terminates and replaces the unhealthy instance.
  ##   ShouldRespectGracePeriod: bool
  ##                           : <p>If the Auto Scaling group of the specified instance has a <code>HealthCheckGracePeriod</code> specified for the group, by default, this call respects the grace period. Set this to <code>False</code>, to have the call not respect the grace period associated with the group.</p> <p>For more information about the health check grace period, see <a>CreateAutoScalingGroup</a>.</p>
  ##   Action: string (required)
  ##   InstanceId: string (required)
  ##             : The ID of the instance.
  ##   Version: string (required)
  var query_775065 = newJObject()
  add(query_775065, "HealthStatus", newJString(HealthStatus))
  add(query_775065, "ShouldRespectGracePeriod", newJBool(ShouldRespectGracePeriod))
  add(query_775065, "Action", newJString(Action))
  add(query_775065, "InstanceId", newJString(InstanceId))
  add(query_775065, "Version", newJString(Version))
  result = call_775064.call(nil, query_775065, nil, nil, nil)

var getSetInstanceHealth* = Call_GetSetInstanceHealth_775048(
    name: "getSetInstanceHealth", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=SetInstanceHealth",
    validator: validate_GetSetInstanceHealth_775049, base: "/",
    url: url_GetSetInstanceHealth_775050, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetInstanceProtection_775103 = ref object of OpenApiRestCall_772597
proc url_PostSetInstanceProtection_775105(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSetInstanceProtection_775104(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the instance protection settings of the specified instances.</p> <p>For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775106 = query.getOrDefault("Action")
  valid_775106 = validateParameter(valid_775106, JString, required = true,
                                 default = newJString("SetInstanceProtection"))
  if valid_775106 != nil:
    section.add "Action", valid_775106
  var valid_775107 = query.getOrDefault("Version")
  valid_775107 = validateParameter(valid_775107, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_775107 != nil:
    section.add "Version", valid_775107
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775108 = header.getOrDefault("X-Amz-Date")
  valid_775108 = validateParameter(valid_775108, JString, required = false,
                                 default = nil)
  if valid_775108 != nil:
    section.add "X-Amz-Date", valid_775108
  var valid_775109 = header.getOrDefault("X-Amz-Security-Token")
  valid_775109 = validateParameter(valid_775109, JString, required = false,
                                 default = nil)
  if valid_775109 != nil:
    section.add "X-Amz-Security-Token", valid_775109
  var valid_775110 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775110 = validateParameter(valid_775110, JString, required = false,
                                 default = nil)
  if valid_775110 != nil:
    section.add "X-Amz-Content-Sha256", valid_775110
  var valid_775111 = header.getOrDefault("X-Amz-Algorithm")
  valid_775111 = validateParameter(valid_775111, JString, required = false,
                                 default = nil)
  if valid_775111 != nil:
    section.add "X-Amz-Algorithm", valid_775111
  var valid_775112 = header.getOrDefault("X-Amz-Signature")
  valid_775112 = validateParameter(valid_775112, JString, required = false,
                                 default = nil)
  if valid_775112 != nil:
    section.add "X-Amz-Signature", valid_775112
  var valid_775113 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775113 = validateParameter(valid_775113, JString, required = false,
                                 default = nil)
  if valid_775113 != nil:
    section.add "X-Amz-SignedHeaders", valid_775113
  var valid_775114 = header.getOrDefault("X-Amz-Credential")
  valid_775114 = validateParameter(valid_775114, JString, required = false,
                                 default = nil)
  if valid_775114 != nil:
    section.add "X-Amz-Credential", valid_775114
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray (required)
  ##              : One or more instance IDs.
  ##   ProtectedFromScaleIn: JBool (required)
  ##                       : Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling in.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_775115 = formData.getOrDefault("AutoScalingGroupName")
  valid_775115 = validateParameter(valid_775115, JString, required = true,
                                 default = nil)
  if valid_775115 != nil:
    section.add "AutoScalingGroupName", valid_775115
  var valid_775116 = formData.getOrDefault("InstanceIds")
  valid_775116 = validateParameter(valid_775116, JArray, required = true, default = nil)
  if valid_775116 != nil:
    section.add "InstanceIds", valid_775116
  var valid_775117 = formData.getOrDefault("ProtectedFromScaleIn")
  valid_775117 = validateParameter(valid_775117, JBool, required = true, default = nil)
  if valid_775117 != nil:
    section.add "ProtectedFromScaleIn", valid_775117
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775118: Call_PostSetInstanceProtection_775103; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the instance protection settings of the specified instances.</p> <p>For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_775118.validator(path, query, header, formData, body)
  let scheme = call_775118.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775118.url(scheme.get, call_775118.host, call_775118.base,
                         call_775118.route, valid.getOrDefault("path"))
  result = hook(call_775118, url, valid)

proc call*(call_775119: Call_PostSetInstanceProtection_775103;
          AutoScalingGroupName: string; InstanceIds: JsonNode;
          ProtectedFromScaleIn: bool; Action: string = "SetInstanceProtection";
          Version: string = "2011-01-01"): Recallable =
  ## postSetInstanceProtection
  ## <p>Updates the instance protection settings of the specified instances.</p> <p>For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray (required)
  ##              : One or more instance IDs.
  ##   Action: string (required)
  ##   ProtectedFromScaleIn: bool (required)
  ##                       : Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling in.
  ##   Version: string (required)
  var query_775120 = newJObject()
  var formData_775121 = newJObject()
  add(formData_775121, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if InstanceIds != nil:
    formData_775121.add "InstanceIds", InstanceIds
  add(query_775120, "Action", newJString(Action))
  add(formData_775121, "ProtectedFromScaleIn", newJBool(ProtectedFromScaleIn))
  add(query_775120, "Version", newJString(Version))
  result = call_775119.call(nil, query_775120, nil, formData_775121, nil)

var postSetInstanceProtection* = Call_PostSetInstanceProtection_775103(
    name: "postSetInstanceProtection", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=SetInstanceProtection",
    validator: validate_PostSetInstanceProtection_775104, base: "/",
    url: url_PostSetInstanceProtection_775105,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetInstanceProtection_775085 = ref object of OpenApiRestCall_772597
proc url_GetSetInstanceProtection_775087(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSetInstanceProtection_775086(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the instance protection settings of the specified instances.</p> <p>For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   InstanceIds: JArray (required)
  ##              : One or more instance IDs.
  ##   ProtectedFromScaleIn: JBool (required)
  ##                       : Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling in.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_775088 = query.getOrDefault("AutoScalingGroupName")
  valid_775088 = validateParameter(valid_775088, JString, required = true,
                                 default = nil)
  if valid_775088 != nil:
    section.add "AutoScalingGroupName", valid_775088
  var valid_775089 = query.getOrDefault("Action")
  valid_775089 = validateParameter(valid_775089, JString, required = true,
                                 default = newJString("SetInstanceProtection"))
  if valid_775089 != nil:
    section.add "Action", valid_775089
  var valid_775090 = query.getOrDefault("InstanceIds")
  valid_775090 = validateParameter(valid_775090, JArray, required = true, default = nil)
  if valid_775090 != nil:
    section.add "InstanceIds", valid_775090
  var valid_775091 = query.getOrDefault("ProtectedFromScaleIn")
  valid_775091 = validateParameter(valid_775091, JBool, required = true, default = nil)
  if valid_775091 != nil:
    section.add "ProtectedFromScaleIn", valid_775091
  var valid_775092 = query.getOrDefault("Version")
  valid_775092 = validateParameter(valid_775092, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_775092 != nil:
    section.add "Version", valid_775092
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775093 = header.getOrDefault("X-Amz-Date")
  valid_775093 = validateParameter(valid_775093, JString, required = false,
                                 default = nil)
  if valid_775093 != nil:
    section.add "X-Amz-Date", valid_775093
  var valid_775094 = header.getOrDefault("X-Amz-Security-Token")
  valid_775094 = validateParameter(valid_775094, JString, required = false,
                                 default = nil)
  if valid_775094 != nil:
    section.add "X-Amz-Security-Token", valid_775094
  var valid_775095 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775095 = validateParameter(valid_775095, JString, required = false,
                                 default = nil)
  if valid_775095 != nil:
    section.add "X-Amz-Content-Sha256", valid_775095
  var valid_775096 = header.getOrDefault("X-Amz-Algorithm")
  valid_775096 = validateParameter(valid_775096, JString, required = false,
                                 default = nil)
  if valid_775096 != nil:
    section.add "X-Amz-Algorithm", valid_775096
  var valid_775097 = header.getOrDefault("X-Amz-Signature")
  valid_775097 = validateParameter(valid_775097, JString, required = false,
                                 default = nil)
  if valid_775097 != nil:
    section.add "X-Amz-Signature", valid_775097
  var valid_775098 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775098 = validateParameter(valid_775098, JString, required = false,
                                 default = nil)
  if valid_775098 != nil:
    section.add "X-Amz-SignedHeaders", valid_775098
  var valid_775099 = header.getOrDefault("X-Amz-Credential")
  valid_775099 = validateParameter(valid_775099, JString, required = false,
                                 default = nil)
  if valid_775099 != nil:
    section.add "X-Amz-Credential", valid_775099
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775100: Call_GetSetInstanceProtection_775085; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the instance protection settings of the specified instances.</p> <p>For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_775100.validator(path, query, header, formData, body)
  let scheme = call_775100.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775100.url(scheme.get, call_775100.host, call_775100.base,
                         call_775100.route, valid.getOrDefault("path"))
  result = hook(call_775100, url, valid)

proc call*(call_775101: Call_GetSetInstanceProtection_775085;
          AutoScalingGroupName: string; InstanceIds: JsonNode;
          ProtectedFromScaleIn: bool; Action: string = "SetInstanceProtection";
          Version: string = "2011-01-01"): Recallable =
  ## getSetInstanceProtection
  ## <p>Updates the instance protection settings of the specified instances.</p> <p>For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   InstanceIds: JArray (required)
  ##              : One or more instance IDs.
  ##   ProtectedFromScaleIn: bool (required)
  ##                       : Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling in.
  ##   Version: string (required)
  var query_775102 = newJObject()
  add(query_775102, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_775102, "Action", newJString(Action))
  if InstanceIds != nil:
    query_775102.add "InstanceIds", InstanceIds
  add(query_775102, "ProtectedFromScaleIn", newJBool(ProtectedFromScaleIn))
  add(query_775102, "Version", newJString(Version))
  result = call_775101.call(nil, query_775102, nil, nil, nil)

var getSetInstanceProtection* = Call_GetSetInstanceProtection_775085(
    name: "getSetInstanceProtection", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=SetInstanceProtection",
    validator: validate_GetSetInstanceProtection_775086, base: "/",
    url: url_GetSetInstanceProtection_775087, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSuspendProcesses_775139 = ref object of OpenApiRestCall_772597
proc url_PostSuspendProcesses_775141(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSuspendProcesses_775140(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Suspends the specified automatic scaling processes, or all processes, for the specified Auto Scaling group.</p> <p>If you suspend either the <code>Launch</code> or <code>Terminate</code> process types, it can prevent other process types from functioning properly.</p> <p>To resume processes that have been suspended, use <a>ResumeProcesses</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775142 = query.getOrDefault("Action")
  valid_775142 = validateParameter(valid_775142, JString, required = true,
                                 default = newJString("SuspendProcesses"))
  if valid_775142 != nil:
    section.add "Action", valid_775142
  var valid_775143 = query.getOrDefault("Version")
  valid_775143 = validateParameter(valid_775143, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_775143 != nil:
    section.add "Version", valid_775143
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775144 = header.getOrDefault("X-Amz-Date")
  valid_775144 = validateParameter(valid_775144, JString, required = false,
                                 default = nil)
  if valid_775144 != nil:
    section.add "X-Amz-Date", valid_775144
  var valid_775145 = header.getOrDefault("X-Amz-Security-Token")
  valid_775145 = validateParameter(valid_775145, JString, required = false,
                                 default = nil)
  if valid_775145 != nil:
    section.add "X-Amz-Security-Token", valid_775145
  var valid_775146 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775146 = validateParameter(valid_775146, JString, required = false,
                                 default = nil)
  if valid_775146 != nil:
    section.add "X-Amz-Content-Sha256", valid_775146
  var valid_775147 = header.getOrDefault("X-Amz-Algorithm")
  valid_775147 = validateParameter(valid_775147, JString, required = false,
                                 default = nil)
  if valid_775147 != nil:
    section.add "X-Amz-Algorithm", valid_775147
  var valid_775148 = header.getOrDefault("X-Amz-Signature")
  valid_775148 = validateParameter(valid_775148, JString, required = false,
                                 default = nil)
  if valid_775148 != nil:
    section.add "X-Amz-Signature", valid_775148
  var valid_775149 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775149 = validateParameter(valid_775149, JString, required = false,
                                 default = nil)
  if valid_775149 != nil:
    section.add "X-Amz-SignedHeaders", valid_775149
  var valid_775150 = header.getOrDefault("X-Amz-Credential")
  valid_775150 = validateParameter(valid_775150, JString, required = false,
                                 default = nil)
  if valid_775150 != nil:
    section.add "X-Amz-Credential", valid_775150
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_775151 = formData.getOrDefault("AutoScalingGroupName")
  valid_775151 = validateParameter(valid_775151, JString, required = true,
                                 default = nil)
  if valid_775151 != nil:
    section.add "AutoScalingGroupName", valid_775151
  var valid_775152 = formData.getOrDefault("ScalingProcesses")
  valid_775152 = validateParameter(valid_775152, JArray, required = false,
                                 default = nil)
  if valid_775152 != nil:
    section.add "ScalingProcesses", valid_775152
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775153: Call_PostSuspendProcesses_775139; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Suspends the specified automatic scaling processes, or all processes, for the specified Auto Scaling group.</p> <p>If you suspend either the <code>Launch</code> or <code>Terminate</code> process types, it can prevent other process types from functioning properly.</p> <p>To resume processes that have been suspended, use <a>ResumeProcesses</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_775153.validator(path, query, header, formData, body)
  let scheme = call_775153.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775153.url(scheme.get, call_775153.host, call_775153.base,
                         call_775153.route, valid.getOrDefault("path"))
  result = hook(call_775153, url, valid)

proc call*(call_775154: Call_PostSuspendProcesses_775139;
          AutoScalingGroupName: string; ScalingProcesses: JsonNode = nil;
          Action: string = "SuspendProcesses"; Version: string = "2011-01-01"): Recallable =
  ## postSuspendProcesses
  ## <p>Suspends the specified automatic scaling processes, or all processes, for the specified Auto Scaling group.</p> <p>If you suspend either the <code>Launch</code> or <code>Terminate</code> process types, it can prevent other process types from functioning properly.</p> <p>To resume processes that have been suspended, use <a>ResumeProcesses</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775155 = newJObject()
  var formData_775156 = newJObject()
  add(formData_775156, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if ScalingProcesses != nil:
    formData_775156.add "ScalingProcesses", ScalingProcesses
  add(query_775155, "Action", newJString(Action))
  add(query_775155, "Version", newJString(Version))
  result = call_775154.call(nil, query_775155, nil, formData_775156, nil)

var postSuspendProcesses* = Call_PostSuspendProcesses_775139(
    name: "postSuspendProcesses", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=SuspendProcesses",
    validator: validate_PostSuspendProcesses_775140, base: "/",
    url: url_PostSuspendProcesses_775141, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSuspendProcesses_775122 = ref object of OpenApiRestCall_772597
proc url_GetSuspendProcesses_775124(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSuspendProcesses_775123(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Suspends the specified automatic scaling processes, or all processes, for the specified Auto Scaling group.</p> <p>If you suspend either the <code>Launch</code> or <code>Terminate</code> process types, it can prevent other process types from functioning properly.</p> <p>To resume processes that have been suspended, use <a>ResumeProcesses</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_775125 = query.getOrDefault("ScalingProcesses")
  valid_775125 = validateParameter(valid_775125, JArray, required = false,
                                 default = nil)
  if valid_775125 != nil:
    section.add "ScalingProcesses", valid_775125
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_775126 = query.getOrDefault("AutoScalingGroupName")
  valid_775126 = validateParameter(valid_775126, JString, required = true,
                                 default = nil)
  if valid_775126 != nil:
    section.add "AutoScalingGroupName", valid_775126
  var valid_775127 = query.getOrDefault("Action")
  valid_775127 = validateParameter(valid_775127, JString, required = true,
                                 default = newJString("SuspendProcesses"))
  if valid_775127 != nil:
    section.add "Action", valid_775127
  var valid_775128 = query.getOrDefault("Version")
  valid_775128 = validateParameter(valid_775128, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_775128 != nil:
    section.add "Version", valid_775128
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775129 = header.getOrDefault("X-Amz-Date")
  valid_775129 = validateParameter(valid_775129, JString, required = false,
                                 default = nil)
  if valid_775129 != nil:
    section.add "X-Amz-Date", valid_775129
  var valid_775130 = header.getOrDefault("X-Amz-Security-Token")
  valid_775130 = validateParameter(valid_775130, JString, required = false,
                                 default = nil)
  if valid_775130 != nil:
    section.add "X-Amz-Security-Token", valid_775130
  var valid_775131 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775131 = validateParameter(valid_775131, JString, required = false,
                                 default = nil)
  if valid_775131 != nil:
    section.add "X-Amz-Content-Sha256", valid_775131
  var valid_775132 = header.getOrDefault("X-Amz-Algorithm")
  valid_775132 = validateParameter(valid_775132, JString, required = false,
                                 default = nil)
  if valid_775132 != nil:
    section.add "X-Amz-Algorithm", valid_775132
  var valid_775133 = header.getOrDefault("X-Amz-Signature")
  valid_775133 = validateParameter(valid_775133, JString, required = false,
                                 default = nil)
  if valid_775133 != nil:
    section.add "X-Amz-Signature", valid_775133
  var valid_775134 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775134 = validateParameter(valid_775134, JString, required = false,
                                 default = nil)
  if valid_775134 != nil:
    section.add "X-Amz-SignedHeaders", valid_775134
  var valid_775135 = header.getOrDefault("X-Amz-Credential")
  valid_775135 = validateParameter(valid_775135, JString, required = false,
                                 default = nil)
  if valid_775135 != nil:
    section.add "X-Amz-Credential", valid_775135
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775136: Call_GetSuspendProcesses_775122; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Suspends the specified automatic scaling processes, or all processes, for the specified Auto Scaling group.</p> <p>If you suspend either the <code>Launch</code> or <code>Terminate</code> process types, it can prevent other process types from functioning properly.</p> <p>To resume processes that have been suspended, use <a>ResumeProcesses</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_775136.validator(path, query, header, formData, body)
  let scheme = call_775136.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775136.url(scheme.get, call_775136.host, call_775136.base,
                         call_775136.route, valid.getOrDefault("path"))
  result = hook(call_775136, url, valid)

proc call*(call_775137: Call_GetSuspendProcesses_775122;
          AutoScalingGroupName: string; ScalingProcesses: JsonNode = nil;
          Action: string = "SuspendProcesses"; Version: string = "2011-01-01"): Recallable =
  ## getSuspendProcesses
  ## <p>Suspends the specified automatic scaling processes, or all processes, for the specified Auto Scaling group.</p> <p>If you suspend either the <code>Launch</code> or <code>Terminate</code> process types, it can prevent other process types from functioning properly.</p> <p>To resume processes that have been suspended, use <a>ResumeProcesses</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775138 = newJObject()
  if ScalingProcesses != nil:
    query_775138.add "ScalingProcesses", ScalingProcesses
  add(query_775138, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_775138, "Action", newJString(Action))
  add(query_775138, "Version", newJString(Version))
  result = call_775137.call(nil, query_775138, nil, nil, nil)

var getSuspendProcesses* = Call_GetSuspendProcesses_775122(
    name: "getSuspendProcesses", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=SuspendProcesses",
    validator: validate_GetSuspendProcesses_775123, base: "/",
    url: url_GetSuspendProcesses_775124, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostTerminateInstanceInAutoScalingGroup_775174 = ref object of OpenApiRestCall_772597
proc url_PostTerminateInstanceInAutoScalingGroup_775176(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostTerminateInstanceInAutoScalingGroup_775175(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Terminates the specified instance and optionally adjusts the desired group size.</p> <p>This call simply makes a termination request. The instance is not terminated immediately.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775177 = query.getOrDefault("Action")
  valid_775177 = validateParameter(valid_775177, JString, required = true, default = newJString(
      "TerminateInstanceInAutoScalingGroup"))
  if valid_775177 != nil:
    section.add "Action", valid_775177
  var valid_775178 = query.getOrDefault("Version")
  valid_775178 = validateParameter(valid_775178, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_775178 != nil:
    section.add "Version", valid_775178
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775179 = header.getOrDefault("X-Amz-Date")
  valid_775179 = validateParameter(valid_775179, JString, required = false,
                                 default = nil)
  if valid_775179 != nil:
    section.add "X-Amz-Date", valid_775179
  var valid_775180 = header.getOrDefault("X-Amz-Security-Token")
  valid_775180 = validateParameter(valid_775180, JString, required = false,
                                 default = nil)
  if valid_775180 != nil:
    section.add "X-Amz-Security-Token", valid_775180
  var valid_775181 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775181 = validateParameter(valid_775181, JString, required = false,
                                 default = nil)
  if valid_775181 != nil:
    section.add "X-Amz-Content-Sha256", valid_775181
  var valid_775182 = header.getOrDefault("X-Amz-Algorithm")
  valid_775182 = validateParameter(valid_775182, JString, required = false,
                                 default = nil)
  if valid_775182 != nil:
    section.add "X-Amz-Algorithm", valid_775182
  var valid_775183 = header.getOrDefault("X-Amz-Signature")
  valid_775183 = validateParameter(valid_775183, JString, required = false,
                                 default = nil)
  if valid_775183 != nil:
    section.add "X-Amz-Signature", valid_775183
  var valid_775184 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775184 = validateParameter(valid_775184, JString, required = false,
                                 default = nil)
  if valid_775184 != nil:
    section.add "X-Amz-SignedHeaders", valid_775184
  var valid_775185 = header.getOrDefault("X-Amz-Credential")
  valid_775185 = validateParameter(valid_775185, JString, required = false,
                                 default = nil)
  if valid_775185 != nil:
    section.add "X-Amz-Credential", valid_775185
  result.add "header", section
  ## parameters in `formData` object:
  ##   ShouldDecrementDesiredCapacity: JBool (required)
  ##                                 : Indicates whether terminating the instance also decrements the size of the Auto Scaling group.
  ##   InstanceId: JString (required)
  ##             : The ID of the instance.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ShouldDecrementDesiredCapacity` field"
  var valid_775186 = formData.getOrDefault("ShouldDecrementDesiredCapacity")
  valid_775186 = validateParameter(valid_775186, JBool, required = true, default = nil)
  if valid_775186 != nil:
    section.add "ShouldDecrementDesiredCapacity", valid_775186
  var valid_775187 = formData.getOrDefault("InstanceId")
  valid_775187 = validateParameter(valid_775187, JString, required = true,
                                 default = nil)
  if valid_775187 != nil:
    section.add "InstanceId", valid_775187
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775188: Call_PostTerminateInstanceInAutoScalingGroup_775174;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Terminates the specified instance and optionally adjusts the desired group size.</p> <p>This call simply makes a termination request. The instance is not terminated immediately.</p>
  ## 
  let valid = call_775188.validator(path, query, header, formData, body)
  let scheme = call_775188.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775188.url(scheme.get, call_775188.host, call_775188.base,
                         call_775188.route, valid.getOrDefault("path"))
  result = hook(call_775188, url, valid)

proc call*(call_775189: Call_PostTerminateInstanceInAutoScalingGroup_775174;
          ShouldDecrementDesiredCapacity: bool; InstanceId: string;
          Action: string = "TerminateInstanceInAutoScalingGroup";
          Version: string = "2011-01-01"): Recallable =
  ## postTerminateInstanceInAutoScalingGroup
  ## <p>Terminates the specified instance and optionally adjusts the desired group size.</p> <p>This call simply makes a termination request. The instance is not terminated immediately.</p>
  ##   ShouldDecrementDesiredCapacity: bool (required)
  ##                                 : Indicates whether terminating the instance also decrements the size of the Auto Scaling group.
  ##   Action: string (required)
  ##   InstanceId: string (required)
  ##             : The ID of the instance.
  ##   Version: string (required)
  var query_775190 = newJObject()
  var formData_775191 = newJObject()
  add(formData_775191, "ShouldDecrementDesiredCapacity",
      newJBool(ShouldDecrementDesiredCapacity))
  add(query_775190, "Action", newJString(Action))
  add(formData_775191, "InstanceId", newJString(InstanceId))
  add(query_775190, "Version", newJString(Version))
  result = call_775189.call(nil, query_775190, nil, formData_775191, nil)

var postTerminateInstanceInAutoScalingGroup* = Call_PostTerminateInstanceInAutoScalingGroup_775174(
    name: "postTerminateInstanceInAutoScalingGroup", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=TerminateInstanceInAutoScalingGroup",
    validator: validate_PostTerminateInstanceInAutoScalingGroup_775175, base: "/",
    url: url_PostTerminateInstanceInAutoScalingGroup_775176,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetTerminateInstanceInAutoScalingGroup_775157 = ref object of OpenApiRestCall_772597
proc url_GetTerminateInstanceInAutoScalingGroup_775159(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetTerminateInstanceInAutoScalingGroup_775158(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Terminates the specified instance and optionally adjusts the desired group size.</p> <p>This call simply makes a termination request. The instance is not terminated immediately.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   ShouldDecrementDesiredCapacity: JBool (required)
  ##                                 : Indicates whether terminating the instance also decrements the size of the Auto Scaling group.
  ##   InstanceId: JString (required)
  ##             : The ID of the instance.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775160 = query.getOrDefault("Action")
  valid_775160 = validateParameter(valid_775160, JString, required = true, default = newJString(
      "TerminateInstanceInAutoScalingGroup"))
  if valid_775160 != nil:
    section.add "Action", valid_775160
  var valid_775161 = query.getOrDefault("ShouldDecrementDesiredCapacity")
  valid_775161 = validateParameter(valid_775161, JBool, required = true, default = nil)
  if valid_775161 != nil:
    section.add "ShouldDecrementDesiredCapacity", valid_775161
  var valid_775162 = query.getOrDefault("InstanceId")
  valid_775162 = validateParameter(valid_775162, JString, required = true,
                                 default = nil)
  if valid_775162 != nil:
    section.add "InstanceId", valid_775162
  var valid_775163 = query.getOrDefault("Version")
  valid_775163 = validateParameter(valid_775163, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_775163 != nil:
    section.add "Version", valid_775163
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775164 = header.getOrDefault("X-Amz-Date")
  valid_775164 = validateParameter(valid_775164, JString, required = false,
                                 default = nil)
  if valid_775164 != nil:
    section.add "X-Amz-Date", valid_775164
  var valid_775165 = header.getOrDefault("X-Amz-Security-Token")
  valid_775165 = validateParameter(valid_775165, JString, required = false,
                                 default = nil)
  if valid_775165 != nil:
    section.add "X-Amz-Security-Token", valid_775165
  var valid_775166 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775166 = validateParameter(valid_775166, JString, required = false,
                                 default = nil)
  if valid_775166 != nil:
    section.add "X-Amz-Content-Sha256", valid_775166
  var valid_775167 = header.getOrDefault("X-Amz-Algorithm")
  valid_775167 = validateParameter(valid_775167, JString, required = false,
                                 default = nil)
  if valid_775167 != nil:
    section.add "X-Amz-Algorithm", valid_775167
  var valid_775168 = header.getOrDefault("X-Amz-Signature")
  valid_775168 = validateParameter(valid_775168, JString, required = false,
                                 default = nil)
  if valid_775168 != nil:
    section.add "X-Amz-Signature", valid_775168
  var valid_775169 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775169 = validateParameter(valid_775169, JString, required = false,
                                 default = nil)
  if valid_775169 != nil:
    section.add "X-Amz-SignedHeaders", valid_775169
  var valid_775170 = header.getOrDefault("X-Amz-Credential")
  valid_775170 = validateParameter(valid_775170, JString, required = false,
                                 default = nil)
  if valid_775170 != nil:
    section.add "X-Amz-Credential", valid_775170
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775171: Call_GetTerminateInstanceInAutoScalingGroup_775157;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Terminates the specified instance and optionally adjusts the desired group size.</p> <p>This call simply makes a termination request. The instance is not terminated immediately.</p>
  ## 
  let valid = call_775171.validator(path, query, header, formData, body)
  let scheme = call_775171.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775171.url(scheme.get, call_775171.host, call_775171.base,
                         call_775171.route, valid.getOrDefault("path"))
  result = hook(call_775171, url, valid)

proc call*(call_775172: Call_GetTerminateInstanceInAutoScalingGroup_775157;
          ShouldDecrementDesiredCapacity: bool; InstanceId: string;
          Action: string = "TerminateInstanceInAutoScalingGroup";
          Version: string = "2011-01-01"): Recallable =
  ## getTerminateInstanceInAutoScalingGroup
  ## <p>Terminates the specified instance and optionally adjusts the desired group size.</p> <p>This call simply makes a termination request. The instance is not terminated immediately.</p>
  ##   Action: string (required)
  ##   ShouldDecrementDesiredCapacity: bool (required)
  ##                                 : Indicates whether terminating the instance also decrements the size of the Auto Scaling group.
  ##   InstanceId: string (required)
  ##             : The ID of the instance.
  ##   Version: string (required)
  var query_775173 = newJObject()
  add(query_775173, "Action", newJString(Action))
  add(query_775173, "ShouldDecrementDesiredCapacity",
      newJBool(ShouldDecrementDesiredCapacity))
  add(query_775173, "InstanceId", newJString(InstanceId))
  add(query_775173, "Version", newJString(Version))
  result = call_775172.call(nil, query_775173, nil, nil, nil)

var getTerminateInstanceInAutoScalingGroup* = Call_GetTerminateInstanceInAutoScalingGroup_775157(
    name: "getTerminateInstanceInAutoScalingGroup", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=TerminateInstanceInAutoScalingGroup",
    validator: validate_GetTerminateInstanceInAutoScalingGroup_775158, base: "/",
    url: url_GetTerminateInstanceInAutoScalingGroup_775159,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateAutoScalingGroup_775226 = ref object of OpenApiRestCall_772597
proc url_PostUpdateAutoScalingGroup_775228(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateAutoScalingGroup_775227(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the configuration for the specified Auto Scaling group.</p> <p>To update an Auto Scaling group, specify the name of the group and the parameter that you want to change. Any parameters that you don't specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. Scaling activities that are currently in progress aren't affected.</p> <p>If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.</p> <p>Note the following about changing <code>DesiredCapacity</code>, <code>MaxSize</code>, or <code>MinSize</code>:</p> <ul> <li> <p>If a scale-in event occurs as a result of a new <code>DesiredCapacity</code> value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.</p> </li> <li> <p>If you specify a new value for <code>MinSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MinSize</code> is larger than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MinSize</code> value.</p> </li> <li> <p>If you specify a new value for <code>MaxSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MaxSize</code> is smaller than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MaxSize</code> value.</p> </li> </ul> <p>To see which parameters have been set, use <a>DescribeAutoScalingGroups</a>. You can also view the scaling policies for an Auto Scaling group using <a>DescribePolicies</a>. If the group has scaling policies, you can update them using <a>PutScalingPolicy</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775229 = query.getOrDefault("Action")
  valid_775229 = validateParameter(valid_775229, JString, required = true,
                                 default = newJString("UpdateAutoScalingGroup"))
  if valid_775229 != nil:
    section.add "Action", valid_775229
  var valid_775230 = query.getOrDefault("Version")
  valid_775230 = validateParameter(valid_775230, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_775230 != nil:
    section.add "Version", valid_775230
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775231 = header.getOrDefault("X-Amz-Date")
  valid_775231 = validateParameter(valid_775231, JString, required = false,
                                 default = nil)
  if valid_775231 != nil:
    section.add "X-Amz-Date", valid_775231
  var valid_775232 = header.getOrDefault("X-Amz-Security-Token")
  valid_775232 = validateParameter(valid_775232, JString, required = false,
                                 default = nil)
  if valid_775232 != nil:
    section.add "X-Amz-Security-Token", valid_775232
  var valid_775233 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775233 = validateParameter(valid_775233, JString, required = false,
                                 default = nil)
  if valid_775233 != nil:
    section.add "X-Amz-Content-Sha256", valid_775233
  var valid_775234 = header.getOrDefault("X-Amz-Algorithm")
  valid_775234 = validateParameter(valid_775234, JString, required = false,
                                 default = nil)
  if valid_775234 != nil:
    section.add "X-Amz-Algorithm", valid_775234
  var valid_775235 = header.getOrDefault("X-Amz-Signature")
  valid_775235 = validateParameter(valid_775235, JString, required = false,
                                 default = nil)
  if valid_775235 != nil:
    section.add "X-Amz-Signature", valid_775235
  var valid_775236 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775236 = validateParameter(valid_775236, JString, required = false,
                                 default = nil)
  if valid_775236 != nil:
    section.add "X-Amz-SignedHeaders", valid_775236
  var valid_775237 = header.getOrDefault("X-Amz-Credential")
  valid_775237 = validateParameter(valid_775237, JString, required = false,
                                 default = nil)
  if valid_775237 != nil:
    section.add "X-Amz-Credential", valid_775237
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LaunchTemplate.LaunchTemplateId: JString
  ##                                  : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  ##   LaunchConfigurationName: JString
  ##                          : <p>The name of the launch configuration. If you specify <code>LaunchConfigurationName</code> in your update request, you can't specify <code>LaunchTemplate</code> or <code>MixedInstancesPolicy</code>.</p> <important> <p>To update an Auto Scaling group with a launch configuration with <code>InstanceMonitoring</code> set to <code>false</code>, you must first disable the collection of group metrics. Otherwise, you get an error. If you have previously enabled the collection of group metrics, you can disable it using <a>DisableMetricsCollection</a>.</p> </important>
  ##   HealthCheckType: JString
  ##                  : The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.
  ##   ServiceLinkedRoleARN: JString
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   DesiredCapacity: JInt
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group.
  ##   HealthCheckGracePeriod: JInt
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   VPCZoneIdentifier: JString
  ##                    : <p>A comma-separated list of subnet IDs for virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p>
  ##   AvailabilityZones: JArray
  ##                    : One or more Availability Zones for the group.
  ##   MinSize: JInt
  ##          : The minimum size of the Auto Scaling group.
  ##   DefaultCooldown: JInt
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>. This cooldown period is not used when a scaling-specific cooldown is specified.</p> <p>Cooldown periods are not supported for target tracking scaling policies, step scaling policies, or scheduled scaling. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MixedInstancesPolicy.LaunchTemplate: JString
  ##                                      : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   MaxSize: JInt
  ##          : The maximum size of the Auto Scaling group.
  ##   MixedInstancesPolicy.InstancesDistribution: JString
  ##                                             : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified when creating a mixed instances policy, the default values are used.</p>
  ##   PlacementGroup: JString
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   NewInstancesProtectedFromScaleIn: JBool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LaunchTemplate.Version: JString
  ##                         : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   TerminationPolicies: JArray
  ##                      : <p>A standalone termination policy or a list of termination policies used to select the instance to terminate. The policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LaunchTemplate.LaunchTemplateName: JString
  ##                                    : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_775238 = formData.getOrDefault("AutoScalingGroupName")
  valid_775238 = validateParameter(valid_775238, JString, required = true,
                                 default = nil)
  if valid_775238 != nil:
    section.add "AutoScalingGroupName", valid_775238
  var valid_775239 = formData.getOrDefault("LaunchTemplate.LaunchTemplateId")
  valid_775239 = validateParameter(valid_775239, JString, required = false,
                                 default = nil)
  if valid_775239 != nil:
    section.add "LaunchTemplate.LaunchTemplateId", valid_775239
  var valid_775240 = formData.getOrDefault("LaunchConfigurationName")
  valid_775240 = validateParameter(valid_775240, JString, required = false,
                                 default = nil)
  if valid_775240 != nil:
    section.add "LaunchConfigurationName", valid_775240
  var valid_775241 = formData.getOrDefault("HealthCheckType")
  valid_775241 = validateParameter(valid_775241, JString, required = false,
                                 default = nil)
  if valid_775241 != nil:
    section.add "HealthCheckType", valid_775241
  var valid_775242 = formData.getOrDefault("ServiceLinkedRoleARN")
  valid_775242 = validateParameter(valid_775242, JString, required = false,
                                 default = nil)
  if valid_775242 != nil:
    section.add "ServiceLinkedRoleARN", valid_775242
  var valid_775243 = formData.getOrDefault("DesiredCapacity")
  valid_775243 = validateParameter(valid_775243, JInt, required = false, default = nil)
  if valid_775243 != nil:
    section.add "DesiredCapacity", valid_775243
  var valid_775244 = formData.getOrDefault("HealthCheckGracePeriod")
  valid_775244 = validateParameter(valid_775244, JInt, required = false, default = nil)
  if valid_775244 != nil:
    section.add "HealthCheckGracePeriod", valid_775244
  var valid_775245 = formData.getOrDefault("VPCZoneIdentifier")
  valid_775245 = validateParameter(valid_775245, JString, required = false,
                                 default = nil)
  if valid_775245 != nil:
    section.add "VPCZoneIdentifier", valid_775245
  var valid_775246 = formData.getOrDefault("AvailabilityZones")
  valid_775246 = validateParameter(valid_775246, JArray, required = false,
                                 default = nil)
  if valid_775246 != nil:
    section.add "AvailabilityZones", valid_775246
  var valid_775247 = formData.getOrDefault("MinSize")
  valid_775247 = validateParameter(valid_775247, JInt, required = false, default = nil)
  if valid_775247 != nil:
    section.add "MinSize", valid_775247
  var valid_775248 = formData.getOrDefault("DefaultCooldown")
  valid_775248 = validateParameter(valid_775248, JInt, required = false, default = nil)
  if valid_775248 != nil:
    section.add "DefaultCooldown", valid_775248
  var valid_775249 = formData.getOrDefault("MixedInstancesPolicy.LaunchTemplate")
  valid_775249 = validateParameter(valid_775249, JString, required = false,
                                 default = nil)
  if valid_775249 != nil:
    section.add "MixedInstancesPolicy.LaunchTemplate", valid_775249
  var valid_775250 = formData.getOrDefault("MaxSize")
  valid_775250 = validateParameter(valid_775250, JInt, required = false, default = nil)
  if valid_775250 != nil:
    section.add "MaxSize", valid_775250
  var valid_775251 = formData.getOrDefault("MixedInstancesPolicy.InstancesDistribution")
  valid_775251 = validateParameter(valid_775251, JString, required = false,
                                 default = nil)
  if valid_775251 != nil:
    section.add "MixedInstancesPolicy.InstancesDistribution", valid_775251
  var valid_775252 = formData.getOrDefault("PlacementGroup")
  valid_775252 = validateParameter(valid_775252, JString, required = false,
                                 default = nil)
  if valid_775252 != nil:
    section.add "PlacementGroup", valid_775252
  var valid_775253 = formData.getOrDefault("NewInstancesProtectedFromScaleIn")
  valid_775253 = validateParameter(valid_775253, JBool, required = false, default = nil)
  if valid_775253 != nil:
    section.add "NewInstancesProtectedFromScaleIn", valid_775253
  var valid_775254 = formData.getOrDefault("LaunchTemplate.Version")
  valid_775254 = validateParameter(valid_775254, JString, required = false,
                                 default = nil)
  if valid_775254 != nil:
    section.add "LaunchTemplate.Version", valid_775254
  var valid_775255 = formData.getOrDefault("TerminationPolicies")
  valid_775255 = validateParameter(valid_775255, JArray, required = false,
                                 default = nil)
  if valid_775255 != nil:
    section.add "TerminationPolicies", valid_775255
  var valid_775256 = formData.getOrDefault("LaunchTemplate.LaunchTemplateName")
  valid_775256 = validateParameter(valid_775256, JString, required = false,
                                 default = nil)
  if valid_775256 != nil:
    section.add "LaunchTemplate.LaunchTemplateName", valid_775256
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775257: Call_PostUpdateAutoScalingGroup_775226; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the configuration for the specified Auto Scaling group.</p> <p>To update an Auto Scaling group, specify the name of the group and the parameter that you want to change. Any parameters that you don't specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. Scaling activities that are currently in progress aren't affected.</p> <p>If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.</p> <p>Note the following about changing <code>DesiredCapacity</code>, <code>MaxSize</code>, or <code>MinSize</code>:</p> <ul> <li> <p>If a scale-in event occurs as a result of a new <code>DesiredCapacity</code> value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.</p> </li> <li> <p>If you specify a new value for <code>MinSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MinSize</code> is larger than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MinSize</code> value.</p> </li> <li> <p>If you specify a new value for <code>MaxSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MaxSize</code> is smaller than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MaxSize</code> value.</p> </li> </ul> <p>To see which parameters have been set, use <a>DescribeAutoScalingGroups</a>. You can also view the scaling policies for an Auto Scaling group using <a>DescribePolicies</a>. If the group has scaling policies, you can update them using <a>PutScalingPolicy</a>.</p>
  ## 
  let valid = call_775257.validator(path, query, header, formData, body)
  let scheme = call_775257.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775257.url(scheme.get, call_775257.host, call_775257.base,
                         call_775257.route, valid.getOrDefault("path"))
  result = hook(call_775257, url, valid)

proc call*(call_775258: Call_PostUpdateAutoScalingGroup_775226;
          AutoScalingGroupName: string;
          LaunchTemplateLaunchTemplateId: string = "";
          LaunchConfigurationName: string = ""; HealthCheckType: string = "";
          ServiceLinkedRoleARN: string = ""; DesiredCapacity: int = 0;
          HealthCheckGracePeriod: int = 0; VPCZoneIdentifier: string = "";
          Action: string = "UpdateAutoScalingGroup";
          AvailabilityZones: JsonNode = nil; MinSize: int = 0; DefaultCooldown: int = 0;
          MixedInstancesPolicyLaunchTemplate: string = ""; MaxSize: int = 0;
          MixedInstancesPolicyInstancesDistribution: string = "";
          PlacementGroup: string = "";
          NewInstancesProtectedFromScaleIn: bool = false;
          LaunchTemplateVersion: string = ""; TerminationPolicies: JsonNode = nil;
          Version: string = "2011-01-01";
          LaunchTemplateLaunchTemplateName: string = ""): Recallable =
  ## postUpdateAutoScalingGroup
  ## <p>Updates the configuration for the specified Auto Scaling group.</p> <p>To update an Auto Scaling group, specify the name of the group and the parameter that you want to change. Any parameters that you don't specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. Scaling activities that are currently in progress aren't affected.</p> <p>If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.</p> <p>Note the following about changing <code>DesiredCapacity</code>, <code>MaxSize</code>, or <code>MinSize</code>:</p> <ul> <li> <p>If a scale-in event occurs as a result of a new <code>DesiredCapacity</code> value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.</p> </li> <li> <p>If you specify a new value for <code>MinSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MinSize</code> is larger than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MinSize</code> value.</p> </li> <li> <p>If you specify a new value for <code>MaxSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MaxSize</code> is smaller than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MaxSize</code> value.</p> </li> </ul> <p>To see which parameters have been set, use <a>DescribeAutoScalingGroups</a>. You can also view the scaling policies for an Auto Scaling group using <a>DescribePolicies</a>. If the group has scaling policies, you can update them using <a>PutScalingPolicy</a>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   LaunchTemplateLaunchTemplateId: string
  ##                                 : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  ##   LaunchConfigurationName: string
  ##                          : <p>The name of the launch configuration. If you specify <code>LaunchConfigurationName</code> in your update request, you can't specify <code>LaunchTemplate</code> or <code>MixedInstancesPolicy</code>.</p> <important> <p>To update an Auto Scaling group with a launch configuration with <code>InstanceMonitoring</code> set to <code>false</code>, you must first disable the collection of group metrics. Otherwise, you get an error. If you have previously enabled the collection of group metrics, you can disable it using <a>DisableMetricsCollection</a>.</p> </important>
  ##   HealthCheckType: string
  ##                  : The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.
  ##   ServiceLinkedRoleARN: string
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   DesiredCapacity: int
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group.
  ##   HealthCheckGracePeriod: int
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   VPCZoneIdentifier: string
  ##                    : <p>A comma-separated list of subnet IDs for virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p>
  ##   Action: string (required)
  ##   AvailabilityZones: JArray
  ##                    : One or more Availability Zones for the group.
  ##   MinSize: int
  ##          : The minimum size of the Auto Scaling group.
  ##   DefaultCooldown: int
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>. This cooldown period is not used when a scaling-specific cooldown is specified.</p> <p>Cooldown periods are not supported for target tracking scaling policies, step scaling policies, or scheduled scaling. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MixedInstancesPolicyLaunchTemplate: string
  ##                                     : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   MaxSize: int
  ##          : The maximum size of the Auto Scaling group.
  ##   MixedInstancesPolicyInstancesDistribution: string
  ##                                            : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified when creating a mixed instances policy, the default values are used.</p>
  ##   PlacementGroup: string
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   NewInstancesProtectedFromScaleIn: bool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LaunchTemplateVersion: string
  ##                        : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   TerminationPolicies: JArray
  ##                      : <p>A standalone termination policy or a list of termination policies used to select the instance to terminate. The policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Version: string (required)
  ##   LaunchTemplateLaunchTemplateName: string
  ##                                   : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  var query_775259 = newJObject()
  var formData_775260 = newJObject()
  add(formData_775260, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_775260, "LaunchTemplate.LaunchTemplateId",
      newJString(LaunchTemplateLaunchTemplateId))
  add(formData_775260, "LaunchConfigurationName",
      newJString(LaunchConfigurationName))
  add(formData_775260, "HealthCheckType", newJString(HealthCheckType))
  add(formData_775260, "ServiceLinkedRoleARN", newJString(ServiceLinkedRoleARN))
  add(formData_775260, "DesiredCapacity", newJInt(DesiredCapacity))
  add(formData_775260, "HealthCheckGracePeriod", newJInt(HealthCheckGracePeriod))
  add(formData_775260, "VPCZoneIdentifier", newJString(VPCZoneIdentifier))
  add(query_775259, "Action", newJString(Action))
  if AvailabilityZones != nil:
    formData_775260.add "AvailabilityZones", AvailabilityZones
  add(formData_775260, "MinSize", newJInt(MinSize))
  add(formData_775260, "DefaultCooldown", newJInt(DefaultCooldown))
  add(formData_775260, "MixedInstancesPolicy.LaunchTemplate",
      newJString(MixedInstancesPolicyLaunchTemplate))
  add(formData_775260, "MaxSize", newJInt(MaxSize))
  add(formData_775260, "MixedInstancesPolicy.InstancesDistribution",
      newJString(MixedInstancesPolicyInstancesDistribution))
  add(formData_775260, "PlacementGroup", newJString(PlacementGroup))
  add(formData_775260, "NewInstancesProtectedFromScaleIn",
      newJBool(NewInstancesProtectedFromScaleIn))
  add(formData_775260, "LaunchTemplate.Version", newJString(LaunchTemplateVersion))
  if TerminationPolicies != nil:
    formData_775260.add "TerminationPolicies", TerminationPolicies
  add(query_775259, "Version", newJString(Version))
  add(formData_775260, "LaunchTemplate.LaunchTemplateName",
      newJString(LaunchTemplateLaunchTemplateName))
  result = call_775258.call(nil, query_775259, nil, formData_775260, nil)

var postUpdateAutoScalingGroup* = Call_PostUpdateAutoScalingGroup_775226(
    name: "postUpdateAutoScalingGroup", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=UpdateAutoScalingGroup",
    validator: validate_PostUpdateAutoScalingGroup_775227, base: "/",
    url: url_PostUpdateAutoScalingGroup_775228,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateAutoScalingGroup_775192 = ref object of OpenApiRestCall_772597
proc url_GetUpdateAutoScalingGroup_775194(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateAutoScalingGroup_775193(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the configuration for the specified Auto Scaling group.</p> <p>To update an Auto Scaling group, specify the name of the group and the parameter that you want to change. Any parameters that you don't specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. Scaling activities that are currently in progress aren't affected.</p> <p>If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.</p> <p>Note the following about changing <code>DesiredCapacity</code>, <code>MaxSize</code>, or <code>MinSize</code>:</p> <ul> <li> <p>If a scale-in event occurs as a result of a new <code>DesiredCapacity</code> value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.</p> </li> <li> <p>If you specify a new value for <code>MinSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MinSize</code> is larger than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MinSize</code> value.</p> </li> <li> <p>If you specify a new value for <code>MaxSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MaxSize</code> is smaller than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MaxSize</code> value.</p> </li> </ul> <p>To see which parameters have been set, use <a>DescribeAutoScalingGroups</a>. You can also view the scaling policies for an Auto Scaling group using <a>DescribePolicies</a>. If the group has scaling policies, you can update them using <a>PutScalingPolicy</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   HealthCheckGracePeriod: JInt
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   TerminationPolicies: JArray
  ##                      : <p>A standalone termination policy or a list of termination policies used to select the instance to terminate. The policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   HealthCheckType: JString
  ##                  : The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.
  ##   DesiredCapacity: JInt
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group.
  ##   DefaultCooldown: JInt
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>. This cooldown period is not used when a scaling-specific cooldown is specified.</p> <p>Cooldown periods are not supported for target tracking scaling policies, step scaling policies, or scheduled scaling. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LaunchTemplate.LaunchTemplateId: JString
  ##                                  : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  ##   LaunchTemplate.LaunchTemplateName: JString
  ##                                    : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   AvailabilityZones: JArray
  ##                    : One or more Availability Zones for the group.
  ##   VPCZoneIdentifier: JString
  ##                    : <p>A comma-separated list of subnet IDs for virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p>
  ##   NewInstancesProtectedFromScaleIn: JBool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MixedInstancesPolicy.LaunchTemplate: JString
  ##                                      : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   LaunchConfigurationName: JString
  ##                          : <p>The name of the launch configuration. If you specify <code>LaunchConfigurationName</code> in your update request, you can't specify <code>LaunchTemplate</code> or <code>MixedInstancesPolicy</code>.</p> <important> <p>To update an Auto Scaling group with a launch configuration with <code>InstanceMonitoring</code> set to <code>false</code>, you must first disable the collection of group metrics. Otherwise, you get an error. If you have previously enabled the collection of group metrics, you can disable it using <a>DisableMetricsCollection</a>.</p> </important>
  ##   Action: JString (required)
  ##   PlacementGroup: JString
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   MixedInstancesPolicy.InstancesDistribution: JString
  ##                                             : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified when creating a mixed instances policy, the default values are used.</p>
  ##   LaunchTemplate.Version: JString
  ##                         : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   MaxSize: JInt
  ##          : The maximum size of the Auto Scaling group.
  ##   MinSize: JInt
  ##          : The minimum size of the Auto Scaling group.
  ##   Version: JString (required)
  ##   ServiceLinkedRoleARN: JString
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  section = newJObject()
  var valid_775195 = query.getOrDefault("HealthCheckGracePeriod")
  valid_775195 = validateParameter(valid_775195, JInt, required = false, default = nil)
  if valid_775195 != nil:
    section.add "HealthCheckGracePeriod", valid_775195
  var valid_775196 = query.getOrDefault("TerminationPolicies")
  valid_775196 = validateParameter(valid_775196, JArray, required = false,
                                 default = nil)
  if valid_775196 != nil:
    section.add "TerminationPolicies", valid_775196
  var valid_775197 = query.getOrDefault("HealthCheckType")
  valid_775197 = validateParameter(valid_775197, JString, required = false,
                                 default = nil)
  if valid_775197 != nil:
    section.add "HealthCheckType", valid_775197
  var valid_775198 = query.getOrDefault("DesiredCapacity")
  valid_775198 = validateParameter(valid_775198, JInt, required = false, default = nil)
  if valid_775198 != nil:
    section.add "DesiredCapacity", valid_775198
  var valid_775199 = query.getOrDefault("DefaultCooldown")
  valid_775199 = validateParameter(valid_775199, JInt, required = false, default = nil)
  if valid_775199 != nil:
    section.add "DefaultCooldown", valid_775199
  var valid_775200 = query.getOrDefault("LaunchTemplate.LaunchTemplateId")
  valid_775200 = validateParameter(valid_775200, JString, required = false,
                                 default = nil)
  if valid_775200 != nil:
    section.add "LaunchTemplate.LaunchTemplateId", valid_775200
  var valid_775201 = query.getOrDefault("LaunchTemplate.LaunchTemplateName")
  valid_775201 = validateParameter(valid_775201, JString, required = false,
                                 default = nil)
  if valid_775201 != nil:
    section.add "LaunchTemplate.LaunchTemplateName", valid_775201
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_775202 = query.getOrDefault("AutoScalingGroupName")
  valid_775202 = validateParameter(valid_775202, JString, required = true,
                                 default = nil)
  if valid_775202 != nil:
    section.add "AutoScalingGroupName", valid_775202
  var valid_775203 = query.getOrDefault("AvailabilityZones")
  valid_775203 = validateParameter(valid_775203, JArray, required = false,
                                 default = nil)
  if valid_775203 != nil:
    section.add "AvailabilityZones", valid_775203
  var valid_775204 = query.getOrDefault("VPCZoneIdentifier")
  valid_775204 = validateParameter(valid_775204, JString, required = false,
                                 default = nil)
  if valid_775204 != nil:
    section.add "VPCZoneIdentifier", valid_775204
  var valid_775205 = query.getOrDefault("NewInstancesProtectedFromScaleIn")
  valid_775205 = validateParameter(valid_775205, JBool, required = false, default = nil)
  if valid_775205 != nil:
    section.add "NewInstancesProtectedFromScaleIn", valid_775205
  var valid_775206 = query.getOrDefault("MixedInstancesPolicy.LaunchTemplate")
  valid_775206 = validateParameter(valid_775206, JString, required = false,
                                 default = nil)
  if valid_775206 != nil:
    section.add "MixedInstancesPolicy.LaunchTemplate", valid_775206
  var valid_775207 = query.getOrDefault("LaunchConfigurationName")
  valid_775207 = validateParameter(valid_775207, JString, required = false,
                                 default = nil)
  if valid_775207 != nil:
    section.add "LaunchConfigurationName", valid_775207
  var valid_775208 = query.getOrDefault("Action")
  valid_775208 = validateParameter(valid_775208, JString, required = true,
                                 default = newJString("UpdateAutoScalingGroup"))
  if valid_775208 != nil:
    section.add "Action", valid_775208
  var valid_775209 = query.getOrDefault("PlacementGroup")
  valid_775209 = validateParameter(valid_775209, JString, required = false,
                                 default = nil)
  if valid_775209 != nil:
    section.add "PlacementGroup", valid_775209
  var valid_775210 = query.getOrDefault("MixedInstancesPolicy.InstancesDistribution")
  valid_775210 = validateParameter(valid_775210, JString, required = false,
                                 default = nil)
  if valid_775210 != nil:
    section.add "MixedInstancesPolicy.InstancesDistribution", valid_775210
  var valid_775211 = query.getOrDefault("LaunchTemplate.Version")
  valid_775211 = validateParameter(valid_775211, JString, required = false,
                                 default = nil)
  if valid_775211 != nil:
    section.add "LaunchTemplate.Version", valid_775211
  var valid_775212 = query.getOrDefault("MaxSize")
  valid_775212 = validateParameter(valid_775212, JInt, required = false, default = nil)
  if valid_775212 != nil:
    section.add "MaxSize", valid_775212
  var valid_775213 = query.getOrDefault("MinSize")
  valid_775213 = validateParameter(valid_775213, JInt, required = false, default = nil)
  if valid_775213 != nil:
    section.add "MinSize", valid_775213
  var valid_775214 = query.getOrDefault("Version")
  valid_775214 = validateParameter(valid_775214, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_775214 != nil:
    section.add "Version", valid_775214
  var valid_775215 = query.getOrDefault("ServiceLinkedRoleARN")
  valid_775215 = validateParameter(valid_775215, JString, required = false,
                                 default = nil)
  if valid_775215 != nil:
    section.add "ServiceLinkedRoleARN", valid_775215
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775216 = header.getOrDefault("X-Amz-Date")
  valid_775216 = validateParameter(valid_775216, JString, required = false,
                                 default = nil)
  if valid_775216 != nil:
    section.add "X-Amz-Date", valid_775216
  var valid_775217 = header.getOrDefault("X-Amz-Security-Token")
  valid_775217 = validateParameter(valid_775217, JString, required = false,
                                 default = nil)
  if valid_775217 != nil:
    section.add "X-Amz-Security-Token", valid_775217
  var valid_775218 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775218 = validateParameter(valid_775218, JString, required = false,
                                 default = nil)
  if valid_775218 != nil:
    section.add "X-Amz-Content-Sha256", valid_775218
  var valid_775219 = header.getOrDefault("X-Amz-Algorithm")
  valid_775219 = validateParameter(valid_775219, JString, required = false,
                                 default = nil)
  if valid_775219 != nil:
    section.add "X-Amz-Algorithm", valid_775219
  var valid_775220 = header.getOrDefault("X-Amz-Signature")
  valid_775220 = validateParameter(valid_775220, JString, required = false,
                                 default = nil)
  if valid_775220 != nil:
    section.add "X-Amz-Signature", valid_775220
  var valid_775221 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775221 = validateParameter(valid_775221, JString, required = false,
                                 default = nil)
  if valid_775221 != nil:
    section.add "X-Amz-SignedHeaders", valid_775221
  var valid_775222 = header.getOrDefault("X-Amz-Credential")
  valid_775222 = validateParameter(valid_775222, JString, required = false,
                                 default = nil)
  if valid_775222 != nil:
    section.add "X-Amz-Credential", valid_775222
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775223: Call_GetUpdateAutoScalingGroup_775192; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the configuration for the specified Auto Scaling group.</p> <p>To update an Auto Scaling group, specify the name of the group and the parameter that you want to change. Any parameters that you don't specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. Scaling activities that are currently in progress aren't affected.</p> <p>If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.</p> <p>Note the following about changing <code>DesiredCapacity</code>, <code>MaxSize</code>, or <code>MinSize</code>:</p> <ul> <li> <p>If a scale-in event occurs as a result of a new <code>DesiredCapacity</code> value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.</p> </li> <li> <p>If you specify a new value for <code>MinSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MinSize</code> is larger than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MinSize</code> value.</p> </li> <li> <p>If you specify a new value for <code>MaxSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MaxSize</code> is smaller than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MaxSize</code> value.</p> </li> </ul> <p>To see which parameters have been set, use <a>DescribeAutoScalingGroups</a>. You can also view the scaling policies for an Auto Scaling group using <a>DescribePolicies</a>. If the group has scaling policies, you can update them using <a>PutScalingPolicy</a>.</p>
  ## 
  let valid = call_775223.validator(path, query, header, formData, body)
  let scheme = call_775223.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775223.url(scheme.get, call_775223.host, call_775223.base,
                         call_775223.route, valid.getOrDefault("path"))
  result = hook(call_775223, url, valid)

proc call*(call_775224: Call_GetUpdateAutoScalingGroup_775192;
          AutoScalingGroupName: string; HealthCheckGracePeriod: int = 0;
          TerminationPolicies: JsonNode = nil; HealthCheckType: string = "";
          DesiredCapacity: int = 0; DefaultCooldown: int = 0;
          LaunchTemplateLaunchTemplateId: string = "";
          LaunchTemplateLaunchTemplateName: string = "";
          AvailabilityZones: JsonNode = nil; VPCZoneIdentifier: string = "";
          NewInstancesProtectedFromScaleIn: bool = false;
          MixedInstancesPolicyLaunchTemplate: string = "";
          LaunchConfigurationName: string = "";
          Action: string = "UpdateAutoScalingGroup"; PlacementGroup: string = "";
          MixedInstancesPolicyInstancesDistribution: string = "";
          LaunchTemplateVersion: string = ""; MaxSize: int = 0; MinSize: int = 0;
          Version: string = "2011-01-01"; ServiceLinkedRoleARN: string = ""): Recallable =
  ## getUpdateAutoScalingGroup
  ## <p>Updates the configuration for the specified Auto Scaling group.</p> <p>To update an Auto Scaling group, specify the name of the group and the parameter that you want to change. Any parameters that you don't specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. Scaling activities that are currently in progress aren't affected.</p> <p>If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.</p> <p>Note the following about changing <code>DesiredCapacity</code>, <code>MaxSize</code>, or <code>MinSize</code>:</p> <ul> <li> <p>If a scale-in event occurs as a result of a new <code>DesiredCapacity</code> value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.</p> </li> <li> <p>If you specify a new value for <code>MinSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MinSize</code> is larger than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MinSize</code> value.</p> </li> <li> <p>If you specify a new value for <code>MaxSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MaxSize</code> is smaller than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MaxSize</code> value.</p> </li> </ul> <p>To see which parameters have been set, use <a>DescribeAutoScalingGroups</a>. You can also view the scaling policies for an Auto Scaling group using <a>DescribePolicies</a>. If the group has scaling policies, you can update them using <a>PutScalingPolicy</a>.</p>
  ##   HealthCheckGracePeriod: int
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   TerminationPolicies: JArray
  ##                      : <p>A standalone termination policy or a list of termination policies used to select the instance to terminate. The policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   HealthCheckType: string
  ##                  : The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.
  ##   DesiredCapacity: int
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group.
  ##   DefaultCooldown: int
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>. This cooldown period is not used when a scaling-specific cooldown is specified.</p> <p>Cooldown periods are not supported for target tracking scaling policies, step scaling policies, or scheduled scaling. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LaunchTemplateLaunchTemplateId: string
  ##                                 : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  ##   LaunchTemplateLaunchTemplateName: string
  ##                                   : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   AvailabilityZones: JArray
  ##                    : One or more Availability Zones for the group.
  ##   VPCZoneIdentifier: string
  ##                    : <p>A comma-separated list of subnet IDs for virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p>
  ##   NewInstancesProtectedFromScaleIn: bool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MixedInstancesPolicyLaunchTemplate: string
  ##                                     : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   LaunchConfigurationName: string
  ##                          : <p>The name of the launch configuration. If you specify <code>LaunchConfigurationName</code> in your update request, you can't specify <code>LaunchTemplate</code> or <code>MixedInstancesPolicy</code>.</p> <important> <p>To update an Auto Scaling group with a launch configuration with <code>InstanceMonitoring</code> set to <code>false</code>, you must first disable the collection of group metrics. Otherwise, you get an error. If you have previously enabled the collection of group metrics, you can disable it using <a>DisableMetricsCollection</a>.</p> </important>
  ##   Action: string (required)
  ##   PlacementGroup: string
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   MixedInstancesPolicyInstancesDistribution: string
  ##                                            : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified when creating a mixed instances policy, the default values are used.</p>
  ##   LaunchTemplateVersion: string
  ##                        : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   MaxSize: int
  ##          : The maximum size of the Auto Scaling group.
  ##   MinSize: int
  ##          : The minimum size of the Auto Scaling group.
  ##   Version: string (required)
  ##   ServiceLinkedRoleARN: string
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  var query_775225 = newJObject()
  add(query_775225, "HealthCheckGracePeriod", newJInt(HealthCheckGracePeriod))
  if TerminationPolicies != nil:
    query_775225.add "TerminationPolicies", TerminationPolicies
  add(query_775225, "HealthCheckType", newJString(HealthCheckType))
  add(query_775225, "DesiredCapacity", newJInt(DesiredCapacity))
  add(query_775225, "DefaultCooldown", newJInt(DefaultCooldown))
  add(query_775225, "LaunchTemplate.LaunchTemplateId",
      newJString(LaunchTemplateLaunchTemplateId))
  add(query_775225, "LaunchTemplate.LaunchTemplateName",
      newJString(LaunchTemplateLaunchTemplateName))
  add(query_775225, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if AvailabilityZones != nil:
    query_775225.add "AvailabilityZones", AvailabilityZones
  add(query_775225, "VPCZoneIdentifier", newJString(VPCZoneIdentifier))
  add(query_775225, "NewInstancesProtectedFromScaleIn",
      newJBool(NewInstancesProtectedFromScaleIn))
  add(query_775225, "MixedInstancesPolicy.LaunchTemplate",
      newJString(MixedInstancesPolicyLaunchTemplate))
  add(query_775225, "LaunchConfigurationName", newJString(LaunchConfigurationName))
  add(query_775225, "Action", newJString(Action))
  add(query_775225, "PlacementGroup", newJString(PlacementGroup))
  add(query_775225, "MixedInstancesPolicy.InstancesDistribution",
      newJString(MixedInstancesPolicyInstancesDistribution))
  add(query_775225, "LaunchTemplate.Version", newJString(LaunchTemplateVersion))
  add(query_775225, "MaxSize", newJInt(MaxSize))
  add(query_775225, "MinSize", newJInt(MinSize))
  add(query_775225, "Version", newJString(Version))
  add(query_775225, "ServiceLinkedRoleARN", newJString(ServiceLinkedRoleARN))
  result = call_775224.call(nil, query_775225, nil, nil, nil)

var getUpdateAutoScalingGroup* = Call_GetUpdateAutoScalingGroup_775192(
    name: "getUpdateAutoScalingGroup", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=UpdateAutoScalingGroup",
    validator: validate_GetUpdateAutoScalingGroup_775193, base: "/",
    url: url_GetUpdateAutoScalingGroup_775194,
    schemes: {Scheme.Https, Scheme.Http})
proc sign(recall: var Recallable; query: JsonNode; algo: SigningAlgo = SHA256) =
  let
    date = makeDateTime()
    access = os.getEnv("AWS_ACCESS_KEY_ID", "")
    secret = os.getEnv("AWS_SECRET_ACCESS_KEY", "")
    region = os.getEnv("AWS_REGION", "")
  assert secret != "", "need secret key in env"
  assert access != "", "need access key in env"
  assert region != "", "need region in env"
  var
    normal: PathNormal
    url = normalizeUrl(recall.url, query, normalize = normal)
    scheme = parseEnum[Scheme](url.scheme)
  assert scheme in awsServers, "unknown scheme `" & $scheme & "`"
  assert region in awsServers[scheme], "unknown region `" & region & "`"
  url.hostname = awsServers[scheme][region]
  case awsServiceName.toLowerAscii
  of "s3":
    normal = PathNormal.S3
  else:
    normal = PathNormal.Default
  recall.headers["Host"] = url.hostname
  recall.headers["X-Amz-Date"] = date
  let
    algo = SHA256
    scope = credentialScope(region = region, service = awsServiceName, date = date)
    request = canonicalRequest(recall.meth, $url, query, recall.headers, recall.body,
                             normalize = normal, digest = algo)
    sts = stringToSign(request.hash(algo), scope, date = date, digest = algo)
    signature = calculateSignature(secret = secret, date = date, region = region,
                                 service = awsServiceName, sts, digest = algo)
  var auth = $algo & " "
  auth &= "Credential=" & access / scope & ", "
  auth &= "SignedHeaders=" & recall.headers.signedHeaders & ", "
  auth &= "Signature=" & signature
  recall.headers["Authorization"] = auth
  echo recall.headers
  recall.headers.del "Host"
  recall.url = $url

method hook(call: OpenApiRestCall; url: string; input: JsonNode): Recallable {.base.} =
  let headers = massageHeaders(input.getOrDefault("header"))
  result = newRecallable(call, url, headers, "")
  result.sign(input.getOrDefault("query"), SHA256)
