
import
  json, options, hashes, uri, strutils, tables, rest, os, uri, strutils, httpcore, sigv4

## auto-generated via openapi macro
## title: Auto Scaling
## version: 2011-01-01
## termsOfService: https://aws.amazon.com/service-terms/
## license:
##     name: Apache 2.0 License
##     url: http://www.apache.org/licenses/
## 
## <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch or terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks. Use this service with AWS Auto Scaling, Amazon CloudWatch, and Elastic Load Balancing.</p> <p>For more information, including information about granting IAM users required permissions for Amazon EC2 Auto Scaling actions, see the <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">Amazon EC2 Auto Scaling User Guide</a>.</p>
## 
## Amazon Web Services documentation
## https://docs.aws.amazon.com/autoscaling/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_612658 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_612658](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_612658): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    case js.kind
    of JInt, JFloat, JNull, JBool:
      head = $js
    of JString:
      head = js.getStr
    else:
      return
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  awsServers = {Scheme.Http: {"ap-northeast-1": "autoscaling.ap-northeast-1.amazonaws.com", "ap-southeast-1": "autoscaling.ap-southeast-1.amazonaws.com",
                           "us-west-2": "autoscaling.us-west-2.amazonaws.com",
                           "eu-west-2": "autoscaling.eu-west-2.amazonaws.com", "ap-northeast-3": "autoscaling.ap-northeast-3.amazonaws.com", "eu-central-1": "autoscaling.eu-central-1.amazonaws.com",
                           "us-east-2": "autoscaling.us-east-2.amazonaws.com",
                           "us-east-1": "autoscaling.us-east-1.amazonaws.com", "cn-northwest-1": "autoscaling.cn-northwest-1.amazonaws.com.cn", "ap-south-1": "autoscaling.ap-south-1.amazonaws.com", "eu-north-1": "autoscaling.eu-north-1.amazonaws.com", "ap-northeast-2": "autoscaling.ap-northeast-2.amazonaws.com",
                           "us-west-1": "autoscaling.us-west-1.amazonaws.com", "us-gov-east-1": "autoscaling.us-gov-east-1.amazonaws.com",
                           "eu-west-3": "autoscaling.eu-west-3.amazonaws.com", "cn-north-1": "autoscaling.cn-north-1.amazonaws.com.cn",
                           "sa-east-1": "autoscaling.sa-east-1.amazonaws.com",
                           "eu-west-1": "autoscaling.eu-west-1.amazonaws.com", "us-gov-west-1": "autoscaling.us-gov-west-1.amazonaws.com", "ap-southeast-2": "autoscaling.ap-southeast-2.amazonaws.com", "ca-central-1": "autoscaling.ca-central-1.amazonaws.com"}.toTable, Scheme.Https: {
      "ap-northeast-1": "autoscaling.ap-northeast-1.amazonaws.com",
      "ap-southeast-1": "autoscaling.ap-southeast-1.amazonaws.com",
      "us-west-2": "autoscaling.us-west-2.amazonaws.com",
      "eu-west-2": "autoscaling.eu-west-2.amazonaws.com",
      "ap-northeast-3": "autoscaling.ap-northeast-3.amazonaws.com",
      "eu-central-1": "autoscaling.eu-central-1.amazonaws.com",
      "us-east-2": "autoscaling.us-east-2.amazonaws.com",
      "us-east-1": "autoscaling.us-east-1.amazonaws.com",
      "cn-northwest-1": "autoscaling.cn-northwest-1.amazonaws.com.cn",
      "ap-south-1": "autoscaling.ap-south-1.amazonaws.com",
      "eu-north-1": "autoscaling.eu-north-1.amazonaws.com",
      "ap-northeast-2": "autoscaling.ap-northeast-2.amazonaws.com",
      "us-west-1": "autoscaling.us-west-1.amazonaws.com",
      "us-gov-east-1": "autoscaling.us-gov-east-1.amazonaws.com",
      "eu-west-3": "autoscaling.eu-west-3.amazonaws.com",
      "cn-north-1": "autoscaling.cn-north-1.amazonaws.com.cn",
      "sa-east-1": "autoscaling.sa-east-1.amazonaws.com",
      "eu-west-1": "autoscaling.eu-west-1.amazonaws.com",
      "us-gov-west-1": "autoscaling.us-gov-west-1.amazonaws.com",
      "ap-southeast-2": "autoscaling.ap-southeast-2.amazonaws.com",
      "ca-central-1": "autoscaling.ca-central-1.amazonaws.com"}.toTable}.toTable
const
  awsServiceName = "autoscaling"
method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_PostAttachInstances_613268 = ref object of OpenApiRestCall_612658
proc url_PostAttachInstances_613270(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAttachInstances_613269(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Attaches one or more EC2 instances to the specified Auto Scaling group.</p> <p>When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.</p> <p>If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html">Attach EC2 Instances to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613271 = query.getOrDefault("Action")
  valid_613271 = validateParameter(valid_613271, JString, required = true,
                                 default = newJString("AttachInstances"))
  if valid_613271 != nil:
    section.add "Action", valid_613271
  var valid_613272 = query.getOrDefault("Version")
  valid_613272 = validateParameter(valid_613272, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613272 != nil:
    section.add "Version", valid_613272
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613273 = header.getOrDefault("X-Amz-Signature")
  valid_613273 = validateParameter(valid_613273, JString, required = false,
                                 default = nil)
  if valid_613273 != nil:
    section.add "X-Amz-Signature", valid_613273
  var valid_613274 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613274 = validateParameter(valid_613274, JString, required = false,
                                 default = nil)
  if valid_613274 != nil:
    section.add "X-Amz-Content-Sha256", valid_613274
  var valid_613275 = header.getOrDefault("X-Amz-Date")
  valid_613275 = validateParameter(valid_613275, JString, required = false,
                                 default = nil)
  if valid_613275 != nil:
    section.add "X-Amz-Date", valid_613275
  var valid_613276 = header.getOrDefault("X-Amz-Credential")
  valid_613276 = validateParameter(valid_613276, JString, required = false,
                                 default = nil)
  if valid_613276 != nil:
    section.add "X-Amz-Credential", valid_613276
  var valid_613277 = header.getOrDefault("X-Amz-Security-Token")
  valid_613277 = validateParameter(valid_613277, JString, required = false,
                                 default = nil)
  if valid_613277 != nil:
    section.add "X-Amz-Security-Token", valid_613277
  var valid_613278 = header.getOrDefault("X-Amz-Algorithm")
  valid_613278 = validateParameter(valid_613278, JString, required = false,
                                 default = nil)
  if valid_613278 != nil:
    section.add "X-Amz-Algorithm", valid_613278
  var valid_613279 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613279 = validateParameter(valid_613279, JString, required = false,
                                 default = nil)
  if valid_613279 != nil:
    section.add "X-Amz-SignedHeaders", valid_613279
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_613280 = formData.getOrDefault("AutoScalingGroupName")
  valid_613280 = validateParameter(valid_613280, JString, required = true,
                                 default = nil)
  if valid_613280 != nil:
    section.add "AutoScalingGroupName", valid_613280
  var valid_613281 = formData.getOrDefault("InstanceIds")
  valid_613281 = validateParameter(valid_613281, JArray, required = false,
                                 default = nil)
  if valid_613281 != nil:
    section.add "InstanceIds", valid_613281
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613282: Call_PostAttachInstances_613268; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches one or more EC2 instances to the specified Auto Scaling group.</p> <p>When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.</p> <p>If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html">Attach EC2 Instances to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_613282.validator(path, query, header, formData, body)
  let scheme = call_613282.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613282.url(scheme.get, call_613282.host, call_613282.base,
                         call_613282.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613282, url, valid)

proc call*(call_613283: Call_PostAttachInstances_613268;
          AutoScalingGroupName: string; InstanceIds: JsonNode = nil;
          Action: string = "AttachInstances"; Version: string = "2011-01-01"): Recallable =
  ## postAttachInstances
  ## <p>Attaches one or more EC2 instances to the specified Auto Scaling group.</p> <p>When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.</p> <p>If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html">Attach EC2 Instances to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613284 = newJObject()
  var formData_613285 = newJObject()
  add(formData_613285, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if InstanceIds != nil:
    formData_613285.add "InstanceIds", InstanceIds
  add(query_613284, "Action", newJString(Action))
  add(query_613284, "Version", newJString(Version))
  result = call_613283.call(nil, query_613284, nil, formData_613285, nil)

var postAttachInstances* = Call_PostAttachInstances_613268(
    name: "postAttachInstances", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=AttachInstances",
    validator: validate_PostAttachInstances_613269, base: "/",
    url: url_PostAttachInstances_613270, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAttachInstances_612996 = ref object of OpenApiRestCall_612658
proc url_GetAttachInstances_612998(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAttachInstances_612997(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Attaches one or more EC2 instances to the specified Auto Scaling group.</p> <p>When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.</p> <p>If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html">Attach EC2 Instances to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613110 = query.getOrDefault("InstanceIds")
  valid_613110 = validateParameter(valid_613110, JArray, required = false,
                                 default = nil)
  if valid_613110 != nil:
    section.add "InstanceIds", valid_613110
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_613111 = query.getOrDefault("AutoScalingGroupName")
  valid_613111 = validateParameter(valid_613111, JString, required = true,
                                 default = nil)
  if valid_613111 != nil:
    section.add "AutoScalingGroupName", valid_613111
  var valid_613125 = query.getOrDefault("Action")
  valid_613125 = validateParameter(valid_613125, JString, required = true,
                                 default = newJString("AttachInstances"))
  if valid_613125 != nil:
    section.add "Action", valid_613125
  var valid_613126 = query.getOrDefault("Version")
  valid_613126 = validateParameter(valid_613126, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613126 != nil:
    section.add "Version", valid_613126
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613127 = header.getOrDefault("X-Amz-Signature")
  valid_613127 = validateParameter(valid_613127, JString, required = false,
                                 default = nil)
  if valid_613127 != nil:
    section.add "X-Amz-Signature", valid_613127
  var valid_613128 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613128 = validateParameter(valid_613128, JString, required = false,
                                 default = nil)
  if valid_613128 != nil:
    section.add "X-Amz-Content-Sha256", valid_613128
  var valid_613129 = header.getOrDefault("X-Amz-Date")
  valid_613129 = validateParameter(valid_613129, JString, required = false,
                                 default = nil)
  if valid_613129 != nil:
    section.add "X-Amz-Date", valid_613129
  var valid_613130 = header.getOrDefault("X-Amz-Credential")
  valid_613130 = validateParameter(valid_613130, JString, required = false,
                                 default = nil)
  if valid_613130 != nil:
    section.add "X-Amz-Credential", valid_613130
  var valid_613131 = header.getOrDefault("X-Amz-Security-Token")
  valid_613131 = validateParameter(valid_613131, JString, required = false,
                                 default = nil)
  if valid_613131 != nil:
    section.add "X-Amz-Security-Token", valid_613131
  var valid_613132 = header.getOrDefault("X-Amz-Algorithm")
  valid_613132 = validateParameter(valid_613132, JString, required = false,
                                 default = nil)
  if valid_613132 != nil:
    section.add "X-Amz-Algorithm", valid_613132
  var valid_613133 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613133 = validateParameter(valid_613133, JString, required = false,
                                 default = nil)
  if valid_613133 != nil:
    section.add "X-Amz-SignedHeaders", valid_613133
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613156: Call_GetAttachInstances_612996; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches one or more EC2 instances to the specified Auto Scaling group.</p> <p>When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.</p> <p>If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html">Attach EC2 Instances to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_613156.validator(path, query, header, formData, body)
  let scheme = call_613156.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613156.url(scheme.get, call_613156.host, call_613156.base,
                         call_613156.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613156, url, valid)

proc call*(call_613227: Call_GetAttachInstances_612996;
          AutoScalingGroupName: string; InstanceIds: JsonNode = nil;
          Action: string = "AttachInstances"; Version: string = "2011-01-01"): Recallable =
  ## getAttachInstances
  ## <p>Attaches one or more EC2 instances to the specified Auto Scaling group.</p> <p>When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.</p> <p>If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html">Attach EC2 Instances to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613228 = newJObject()
  if InstanceIds != nil:
    query_613228.add "InstanceIds", InstanceIds
  add(query_613228, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_613228, "Action", newJString(Action))
  add(query_613228, "Version", newJString(Version))
  result = call_613227.call(nil, query_613228, nil, nil, nil)

var getAttachInstances* = Call_GetAttachInstances_612996(
    name: "getAttachInstances", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=AttachInstances",
    validator: validate_GetAttachInstances_612997, base: "/",
    url: url_GetAttachInstances_612998, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAttachLoadBalancerTargetGroups_613303 = ref object of OpenApiRestCall_612658
proc url_PostAttachLoadBalancerTargetGroups_613305(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAttachLoadBalancerTargetGroups_613304(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches one or more target groups to the specified Auto Scaling group.</p> <p>To describe the target groups for an Auto Scaling group, use <a>DescribeLoadBalancerTargetGroups</a>. To detach the target group from the Auto Scaling group, use <a>DetachLoadBalancerTargetGroups</a>.</p> <p>With Application Load Balancers and Network Load Balancers, instances are registered as targets with a target group. With Classic Load Balancers, instances are registered with the load balancer. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613306 = query.getOrDefault("Action")
  valid_613306 = validateParameter(valid_613306, JString, required = true, default = newJString(
      "AttachLoadBalancerTargetGroups"))
  if valid_613306 != nil:
    section.add "Action", valid_613306
  var valid_613307 = query.getOrDefault("Version")
  valid_613307 = validateParameter(valid_613307, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613307 != nil:
    section.add "Version", valid_613307
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613308 = header.getOrDefault("X-Amz-Signature")
  valid_613308 = validateParameter(valid_613308, JString, required = false,
                                 default = nil)
  if valid_613308 != nil:
    section.add "X-Amz-Signature", valid_613308
  var valid_613309 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613309 = validateParameter(valid_613309, JString, required = false,
                                 default = nil)
  if valid_613309 != nil:
    section.add "X-Amz-Content-Sha256", valid_613309
  var valid_613310 = header.getOrDefault("X-Amz-Date")
  valid_613310 = validateParameter(valid_613310, JString, required = false,
                                 default = nil)
  if valid_613310 != nil:
    section.add "X-Amz-Date", valid_613310
  var valid_613311 = header.getOrDefault("X-Amz-Credential")
  valid_613311 = validateParameter(valid_613311, JString, required = false,
                                 default = nil)
  if valid_613311 != nil:
    section.add "X-Amz-Credential", valid_613311
  var valid_613312 = header.getOrDefault("X-Amz-Security-Token")
  valid_613312 = validateParameter(valid_613312, JString, required = false,
                                 default = nil)
  if valid_613312 != nil:
    section.add "X-Amz-Security-Token", valid_613312
  var valid_613313 = header.getOrDefault("X-Amz-Algorithm")
  valid_613313 = validateParameter(valid_613313, JString, required = false,
                                 default = nil)
  if valid_613313 != nil:
    section.add "X-Amz-Algorithm", valid_613313
  var valid_613314 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613314 = validateParameter(valid_613314, JString, required = false,
                                 default = nil)
  if valid_613314 != nil:
    section.add "X-Amz-SignedHeaders", valid_613314
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_613315 = formData.getOrDefault("AutoScalingGroupName")
  valid_613315 = validateParameter(valid_613315, JString, required = true,
                                 default = nil)
  if valid_613315 != nil:
    section.add "AutoScalingGroupName", valid_613315
  var valid_613316 = formData.getOrDefault("TargetGroupARNs")
  valid_613316 = validateParameter(valid_613316, JArray, required = true, default = nil)
  if valid_613316 != nil:
    section.add "TargetGroupARNs", valid_613316
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613317: Call_PostAttachLoadBalancerTargetGroups_613303;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Attaches one or more target groups to the specified Auto Scaling group.</p> <p>To describe the target groups for an Auto Scaling group, use <a>DescribeLoadBalancerTargetGroups</a>. To detach the target group from the Auto Scaling group, use <a>DetachLoadBalancerTargetGroups</a>.</p> <p>With Application Load Balancers and Network Load Balancers, instances are registered as targets with a target group. With Classic Load Balancers, instances are registered with the load balancer. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_613317.validator(path, query, header, formData, body)
  let scheme = call_613317.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613317.url(scheme.get, call_613317.host, call_613317.base,
                         call_613317.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613317, url, valid)

proc call*(call_613318: Call_PostAttachLoadBalancerTargetGroups_613303;
          AutoScalingGroupName: string; TargetGroupARNs: JsonNode;
          Action: string = "AttachLoadBalancerTargetGroups";
          Version: string = "2011-01-01"): Recallable =
  ## postAttachLoadBalancerTargetGroups
  ## <p>Attaches one or more target groups to the specified Auto Scaling group.</p> <p>To describe the target groups for an Auto Scaling group, use <a>DescribeLoadBalancerTargetGroups</a>. To detach the target group from the Auto Scaling group, use <a>DetachLoadBalancerTargetGroups</a>.</p> <p>With Application Load Balancers and Network Load Balancers, instances are registered as targets with a target group. With Classic Load Balancers, instances are registered with the load balancer. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613319 = newJObject()
  var formData_613320 = newJObject()
  add(formData_613320, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if TargetGroupARNs != nil:
    formData_613320.add "TargetGroupARNs", TargetGroupARNs
  add(query_613319, "Action", newJString(Action))
  add(query_613319, "Version", newJString(Version))
  result = call_613318.call(nil, query_613319, nil, formData_613320, nil)

var postAttachLoadBalancerTargetGroups* = Call_PostAttachLoadBalancerTargetGroups_613303(
    name: "postAttachLoadBalancerTargetGroups", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=AttachLoadBalancerTargetGroups",
    validator: validate_PostAttachLoadBalancerTargetGroups_613304, base: "/",
    url: url_PostAttachLoadBalancerTargetGroups_613305,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAttachLoadBalancerTargetGroups_613286 = ref object of OpenApiRestCall_612658
proc url_GetAttachLoadBalancerTargetGroups_613288(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAttachLoadBalancerTargetGroups_613287(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches one or more target groups to the specified Auto Scaling group.</p> <p>To describe the target groups for an Auto Scaling group, use <a>DescribeLoadBalancerTargetGroups</a>. To detach the target group from the Auto Scaling group, use <a>DetachLoadBalancerTargetGroups</a>.</p> <p>With Application Load Balancers and Network Load Balancers, instances are registered as targets with a target group. With Classic Load Balancers, instances are registered with the load balancer. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_613289 = query.getOrDefault("AutoScalingGroupName")
  valid_613289 = validateParameter(valid_613289, JString, required = true,
                                 default = nil)
  if valid_613289 != nil:
    section.add "AutoScalingGroupName", valid_613289
  var valid_613290 = query.getOrDefault("TargetGroupARNs")
  valid_613290 = validateParameter(valid_613290, JArray, required = true, default = nil)
  if valid_613290 != nil:
    section.add "TargetGroupARNs", valid_613290
  var valid_613291 = query.getOrDefault("Action")
  valid_613291 = validateParameter(valid_613291, JString, required = true, default = newJString(
      "AttachLoadBalancerTargetGroups"))
  if valid_613291 != nil:
    section.add "Action", valid_613291
  var valid_613292 = query.getOrDefault("Version")
  valid_613292 = validateParameter(valid_613292, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613292 != nil:
    section.add "Version", valid_613292
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613293 = header.getOrDefault("X-Amz-Signature")
  valid_613293 = validateParameter(valid_613293, JString, required = false,
                                 default = nil)
  if valid_613293 != nil:
    section.add "X-Amz-Signature", valid_613293
  var valid_613294 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613294 = validateParameter(valid_613294, JString, required = false,
                                 default = nil)
  if valid_613294 != nil:
    section.add "X-Amz-Content-Sha256", valid_613294
  var valid_613295 = header.getOrDefault("X-Amz-Date")
  valid_613295 = validateParameter(valid_613295, JString, required = false,
                                 default = nil)
  if valid_613295 != nil:
    section.add "X-Amz-Date", valid_613295
  var valid_613296 = header.getOrDefault("X-Amz-Credential")
  valid_613296 = validateParameter(valid_613296, JString, required = false,
                                 default = nil)
  if valid_613296 != nil:
    section.add "X-Amz-Credential", valid_613296
  var valid_613297 = header.getOrDefault("X-Amz-Security-Token")
  valid_613297 = validateParameter(valid_613297, JString, required = false,
                                 default = nil)
  if valid_613297 != nil:
    section.add "X-Amz-Security-Token", valid_613297
  var valid_613298 = header.getOrDefault("X-Amz-Algorithm")
  valid_613298 = validateParameter(valid_613298, JString, required = false,
                                 default = nil)
  if valid_613298 != nil:
    section.add "X-Amz-Algorithm", valid_613298
  var valid_613299 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613299 = validateParameter(valid_613299, JString, required = false,
                                 default = nil)
  if valid_613299 != nil:
    section.add "X-Amz-SignedHeaders", valid_613299
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613300: Call_GetAttachLoadBalancerTargetGroups_613286;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Attaches one or more target groups to the specified Auto Scaling group.</p> <p>To describe the target groups for an Auto Scaling group, use <a>DescribeLoadBalancerTargetGroups</a>. To detach the target group from the Auto Scaling group, use <a>DetachLoadBalancerTargetGroups</a>.</p> <p>With Application Load Balancers and Network Load Balancers, instances are registered as targets with a target group. With Classic Load Balancers, instances are registered with the load balancer. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_613300.validator(path, query, header, formData, body)
  let scheme = call_613300.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613300.url(scheme.get, call_613300.host, call_613300.base,
                         call_613300.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613300, url, valid)

proc call*(call_613301: Call_GetAttachLoadBalancerTargetGroups_613286;
          AutoScalingGroupName: string; TargetGroupARNs: JsonNode;
          Action: string = "AttachLoadBalancerTargetGroups";
          Version: string = "2011-01-01"): Recallable =
  ## getAttachLoadBalancerTargetGroups
  ## <p>Attaches one or more target groups to the specified Auto Scaling group.</p> <p>To describe the target groups for an Auto Scaling group, use <a>DescribeLoadBalancerTargetGroups</a>. To detach the target group from the Auto Scaling group, use <a>DetachLoadBalancerTargetGroups</a>.</p> <p>With Application Load Balancers and Network Load Balancers, instances are registered as targets with a target group. With Classic Load Balancers, instances are registered with the load balancer. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613302 = newJObject()
  add(query_613302, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if TargetGroupARNs != nil:
    query_613302.add "TargetGroupARNs", TargetGroupARNs
  add(query_613302, "Action", newJString(Action))
  add(query_613302, "Version", newJString(Version))
  result = call_613301.call(nil, query_613302, nil, nil, nil)

var getAttachLoadBalancerTargetGroups* = Call_GetAttachLoadBalancerTargetGroups_613286(
    name: "getAttachLoadBalancerTargetGroups", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=AttachLoadBalancerTargetGroups",
    validator: validate_GetAttachLoadBalancerTargetGroups_613287, base: "/",
    url: url_GetAttachLoadBalancerTargetGroups_613288,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAttachLoadBalancers_613338 = ref object of OpenApiRestCall_612658
proc url_PostAttachLoadBalancers_613340(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAttachLoadBalancers_613339(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches one or more Classic Load Balancers to the specified Auto Scaling group.</p> <p>To attach an Application Load Balancer or a Network Load Balancer instead, see <a>AttachLoadBalancerTargetGroups</a>.</p> <p>To describe the load balancers for an Auto Scaling group, use <a>DescribeLoadBalancers</a>. To detach the load balancer from the Auto Scaling group, use <a>DetachLoadBalancers</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613341 = query.getOrDefault("Action")
  valid_613341 = validateParameter(valid_613341, JString, required = true,
                                 default = newJString("AttachLoadBalancers"))
  if valid_613341 != nil:
    section.add "Action", valid_613341
  var valid_613342 = query.getOrDefault("Version")
  valid_613342 = validateParameter(valid_613342, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613342 != nil:
    section.add "Version", valid_613342
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613343 = header.getOrDefault("X-Amz-Signature")
  valid_613343 = validateParameter(valid_613343, JString, required = false,
                                 default = nil)
  if valid_613343 != nil:
    section.add "X-Amz-Signature", valid_613343
  var valid_613344 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613344 = validateParameter(valid_613344, JString, required = false,
                                 default = nil)
  if valid_613344 != nil:
    section.add "X-Amz-Content-Sha256", valid_613344
  var valid_613345 = header.getOrDefault("X-Amz-Date")
  valid_613345 = validateParameter(valid_613345, JString, required = false,
                                 default = nil)
  if valid_613345 != nil:
    section.add "X-Amz-Date", valid_613345
  var valid_613346 = header.getOrDefault("X-Amz-Credential")
  valid_613346 = validateParameter(valid_613346, JString, required = false,
                                 default = nil)
  if valid_613346 != nil:
    section.add "X-Amz-Credential", valid_613346
  var valid_613347 = header.getOrDefault("X-Amz-Security-Token")
  valid_613347 = validateParameter(valid_613347, JString, required = false,
                                 default = nil)
  if valid_613347 != nil:
    section.add "X-Amz-Security-Token", valid_613347
  var valid_613348 = header.getOrDefault("X-Amz-Algorithm")
  valid_613348 = validateParameter(valid_613348, JString, required = false,
                                 default = nil)
  if valid_613348 != nil:
    section.add "X-Amz-Algorithm", valid_613348
  var valid_613349 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613349 = validateParameter(valid_613349, JString, required = false,
                                 default = nil)
  if valid_613349 != nil:
    section.add "X-Amz-SignedHeaders", valid_613349
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_613350 = formData.getOrDefault("AutoScalingGroupName")
  valid_613350 = validateParameter(valid_613350, JString, required = true,
                                 default = nil)
  if valid_613350 != nil:
    section.add "AutoScalingGroupName", valid_613350
  var valid_613351 = formData.getOrDefault("LoadBalancerNames")
  valid_613351 = validateParameter(valid_613351, JArray, required = true, default = nil)
  if valid_613351 != nil:
    section.add "LoadBalancerNames", valid_613351
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613352: Call_PostAttachLoadBalancers_613338; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches one or more Classic Load Balancers to the specified Auto Scaling group.</p> <p>To attach an Application Load Balancer or a Network Load Balancer instead, see <a>AttachLoadBalancerTargetGroups</a>.</p> <p>To describe the load balancers for an Auto Scaling group, use <a>DescribeLoadBalancers</a>. To detach the load balancer from the Auto Scaling group, use <a>DetachLoadBalancers</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_613352.validator(path, query, header, formData, body)
  let scheme = call_613352.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613352.url(scheme.get, call_613352.host, call_613352.base,
                         call_613352.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613352, url, valid)

proc call*(call_613353: Call_PostAttachLoadBalancers_613338;
          AutoScalingGroupName: string; LoadBalancerNames: JsonNode;
          Action: string = "AttachLoadBalancers"; Version: string = "2011-01-01"): Recallable =
  ## postAttachLoadBalancers
  ## <p>Attaches one or more Classic Load Balancers to the specified Auto Scaling group.</p> <p>To attach an Application Load Balancer or a Network Load Balancer instead, see <a>AttachLoadBalancerTargetGroups</a>.</p> <p>To describe the load balancers for an Auto Scaling group, use <a>DescribeLoadBalancers</a>. To detach the load balancer from the Auto Scaling group, use <a>DetachLoadBalancers</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613354 = newJObject()
  var formData_613355 = newJObject()
  add(formData_613355, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if LoadBalancerNames != nil:
    formData_613355.add "LoadBalancerNames", LoadBalancerNames
  add(query_613354, "Action", newJString(Action))
  add(query_613354, "Version", newJString(Version))
  result = call_613353.call(nil, query_613354, nil, formData_613355, nil)

var postAttachLoadBalancers* = Call_PostAttachLoadBalancers_613338(
    name: "postAttachLoadBalancers", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=AttachLoadBalancers",
    validator: validate_PostAttachLoadBalancers_613339, base: "/",
    url: url_PostAttachLoadBalancers_613340, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAttachLoadBalancers_613321 = ref object of OpenApiRestCall_612658
proc url_GetAttachLoadBalancers_613323(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAttachLoadBalancers_613322(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches one or more Classic Load Balancers to the specified Auto Scaling group.</p> <p>To attach an Application Load Balancer or a Network Load Balancer instead, see <a>AttachLoadBalancerTargetGroups</a>.</p> <p>To describe the load balancers for an Auto Scaling group, use <a>DescribeLoadBalancers</a>. To detach the load balancer from the Auto Scaling group, use <a>DetachLoadBalancers</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_613324 = query.getOrDefault("AutoScalingGroupName")
  valid_613324 = validateParameter(valid_613324, JString, required = true,
                                 default = nil)
  if valid_613324 != nil:
    section.add "AutoScalingGroupName", valid_613324
  var valid_613325 = query.getOrDefault("Action")
  valid_613325 = validateParameter(valid_613325, JString, required = true,
                                 default = newJString("AttachLoadBalancers"))
  if valid_613325 != nil:
    section.add "Action", valid_613325
  var valid_613326 = query.getOrDefault("Version")
  valid_613326 = validateParameter(valid_613326, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613326 != nil:
    section.add "Version", valid_613326
  var valid_613327 = query.getOrDefault("LoadBalancerNames")
  valid_613327 = validateParameter(valid_613327, JArray, required = true, default = nil)
  if valid_613327 != nil:
    section.add "LoadBalancerNames", valid_613327
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613328 = header.getOrDefault("X-Amz-Signature")
  valid_613328 = validateParameter(valid_613328, JString, required = false,
                                 default = nil)
  if valid_613328 != nil:
    section.add "X-Amz-Signature", valid_613328
  var valid_613329 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613329 = validateParameter(valid_613329, JString, required = false,
                                 default = nil)
  if valid_613329 != nil:
    section.add "X-Amz-Content-Sha256", valid_613329
  var valid_613330 = header.getOrDefault("X-Amz-Date")
  valid_613330 = validateParameter(valid_613330, JString, required = false,
                                 default = nil)
  if valid_613330 != nil:
    section.add "X-Amz-Date", valid_613330
  var valid_613331 = header.getOrDefault("X-Amz-Credential")
  valid_613331 = validateParameter(valid_613331, JString, required = false,
                                 default = nil)
  if valid_613331 != nil:
    section.add "X-Amz-Credential", valid_613331
  var valid_613332 = header.getOrDefault("X-Amz-Security-Token")
  valid_613332 = validateParameter(valid_613332, JString, required = false,
                                 default = nil)
  if valid_613332 != nil:
    section.add "X-Amz-Security-Token", valid_613332
  var valid_613333 = header.getOrDefault("X-Amz-Algorithm")
  valid_613333 = validateParameter(valid_613333, JString, required = false,
                                 default = nil)
  if valid_613333 != nil:
    section.add "X-Amz-Algorithm", valid_613333
  var valid_613334 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613334 = validateParameter(valid_613334, JString, required = false,
                                 default = nil)
  if valid_613334 != nil:
    section.add "X-Amz-SignedHeaders", valid_613334
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613335: Call_GetAttachLoadBalancers_613321; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches one or more Classic Load Balancers to the specified Auto Scaling group.</p> <p>To attach an Application Load Balancer or a Network Load Balancer instead, see <a>AttachLoadBalancerTargetGroups</a>.</p> <p>To describe the load balancers for an Auto Scaling group, use <a>DescribeLoadBalancers</a>. To detach the load balancer from the Auto Scaling group, use <a>DetachLoadBalancers</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_613335.validator(path, query, header, formData, body)
  let scheme = call_613335.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613335.url(scheme.get, call_613335.host, call_613335.base,
                         call_613335.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613335, url, valid)

proc call*(call_613336: Call_GetAttachLoadBalancers_613321;
          AutoScalingGroupName: string; LoadBalancerNames: JsonNode;
          Action: string = "AttachLoadBalancers"; Version: string = "2011-01-01"): Recallable =
  ## getAttachLoadBalancers
  ## <p>Attaches one or more Classic Load Balancers to the specified Auto Scaling group.</p> <p>To attach an Application Load Balancer or a Network Load Balancer instead, see <a>AttachLoadBalancerTargetGroups</a>.</p> <p>To describe the load balancers for an Auto Scaling group, use <a>DescribeLoadBalancers</a>. To detach the load balancer from the Auto Scaling group, use <a>DetachLoadBalancers</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  var query_613337 = newJObject()
  add(query_613337, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_613337, "Action", newJString(Action))
  add(query_613337, "Version", newJString(Version))
  if LoadBalancerNames != nil:
    query_613337.add "LoadBalancerNames", LoadBalancerNames
  result = call_613336.call(nil, query_613337, nil, nil, nil)

var getAttachLoadBalancers* = Call_GetAttachLoadBalancers_613321(
    name: "getAttachLoadBalancers", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=AttachLoadBalancers",
    validator: validate_GetAttachLoadBalancers_613322, base: "/",
    url: url_GetAttachLoadBalancers_613323, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostBatchDeleteScheduledAction_613373 = ref object of OpenApiRestCall_612658
proc url_PostBatchDeleteScheduledAction_613375(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostBatchDeleteScheduledAction_613374(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes one or more scheduled actions for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613376 = query.getOrDefault("Action")
  valid_613376 = validateParameter(valid_613376, JString, required = true, default = newJString(
      "BatchDeleteScheduledAction"))
  if valid_613376 != nil:
    section.add "Action", valid_613376
  var valid_613377 = query.getOrDefault("Version")
  valid_613377 = validateParameter(valid_613377, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613377 != nil:
    section.add "Version", valid_613377
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613378 = header.getOrDefault("X-Amz-Signature")
  valid_613378 = validateParameter(valid_613378, JString, required = false,
                                 default = nil)
  if valid_613378 != nil:
    section.add "X-Amz-Signature", valid_613378
  var valid_613379 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613379 = validateParameter(valid_613379, JString, required = false,
                                 default = nil)
  if valid_613379 != nil:
    section.add "X-Amz-Content-Sha256", valid_613379
  var valid_613380 = header.getOrDefault("X-Amz-Date")
  valid_613380 = validateParameter(valid_613380, JString, required = false,
                                 default = nil)
  if valid_613380 != nil:
    section.add "X-Amz-Date", valid_613380
  var valid_613381 = header.getOrDefault("X-Amz-Credential")
  valid_613381 = validateParameter(valid_613381, JString, required = false,
                                 default = nil)
  if valid_613381 != nil:
    section.add "X-Amz-Credential", valid_613381
  var valid_613382 = header.getOrDefault("X-Amz-Security-Token")
  valid_613382 = validateParameter(valid_613382, JString, required = false,
                                 default = nil)
  if valid_613382 != nil:
    section.add "X-Amz-Security-Token", valid_613382
  var valid_613383 = header.getOrDefault("X-Amz-Algorithm")
  valid_613383 = validateParameter(valid_613383, JString, required = false,
                                 default = nil)
  if valid_613383 != nil:
    section.add "X-Amz-Algorithm", valid_613383
  var valid_613384 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613384 = validateParameter(valid_613384, JString, required = false,
                                 default = nil)
  if valid_613384 != nil:
    section.add "X-Amz-SignedHeaders", valid_613384
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScheduledActionNames: JArray (required)
  ##                       : The names of the scheduled actions to delete. The maximum number allowed is 50. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_613385 = formData.getOrDefault("AutoScalingGroupName")
  valid_613385 = validateParameter(valid_613385, JString, required = true,
                                 default = nil)
  if valid_613385 != nil:
    section.add "AutoScalingGroupName", valid_613385
  var valid_613386 = formData.getOrDefault("ScheduledActionNames")
  valid_613386 = validateParameter(valid_613386, JArray, required = true, default = nil)
  if valid_613386 != nil:
    section.add "ScheduledActionNames", valid_613386
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613387: Call_PostBatchDeleteScheduledAction_613373; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes one or more scheduled actions for the specified Auto Scaling group.
  ## 
  let valid = call_613387.validator(path, query, header, formData, body)
  let scheme = call_613387.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613387.url(scheme.get, call_613387.host, call_613387.base,
                         call_613387.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613387, url, valid)

proc call*(call_613388: Call_PostBatchDeleteScheduledAction_613373;
          AutoScalingGroupName: string; ScheduledActionNames: JsonNode;
          Action: string = "BatchDeleteScheduledAction";
          Version: string = "2011-01-01"): Recallable =
  ## postBatchDeleteScheduledAction
  ## Deletes one or more scheduled actions for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ScheduledActionNames: JArray (required)
  ##                       : The names of the scheduled actions to delete. The maximum number allowed is 50. 
  var query_613389 = newJObject()
  var formData_613390 = newJObject()
  add(formData_613390, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_613389, "Action", newJString(Action))
  add(query_613389, "Version", newJString(Version))
  if ScheduledActionNames != nil:
    formData_613390.add "ScheduledActionNames", ScheduledActionNames
  result = call_613388.call(nil, query_613389, nil, formData_613390, nil)

var postBatchDeleteScheduledAction* = Call_PostBatchDeleteScheduledAction_613373(
    name: "postBatchDeleteScheduledAction", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=BatchDeleteScheduledAction",
    validator: validate_PostBatchDeleteScheduledAction_613374, base: "/",
    url: url_PostBatchDeleteScheduledAction_613375,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBatchDeleteScheduledAction_613356 = ref object of OpenApiRestCall_612658
proc url_GetBatchDeleteScheduledAction_613358(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetBatchDeleteScheduledAction_613357(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes one or more scheduled actions for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   ScheduledActionNames: JArray (required)
  ##                       : The names of the scheduled actions to delete. The maximum number allowed is 50. 
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_613359 = query.getOrDefault("AutoScalingGroupName")
  valid_613359 = validateParameter(valid_613359, JString, required = true,
                                 default = nil)
  if valid_613359 != nil:
    section.add "AutoScalingGroupName", valid_613359
  var valid_613360 = query.getOrDefault("Action")
  valid_613360 = validateParameter(valid_613360, JString, required = true, default = newJString(
      "BatchDeleteScheduledAction"))
  if valid_613360 != nil:
    section.add "Action", valid_613360
  var valid_613361 = query.getOrDefault("ScheduledActionNames")
  valid_613361 = validateParameter(valid_613361, JArray, required = true, default = nil)
  if valid_613361 != nil:
    section.add "ScheduledActionNames", valid_613361
  var valid_613362 = query.getOrDefault("Version")
  valid_613362 = validateParameter(valid_613362, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613362 != nil:
    section.add "Version", valid_613362
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613363 = header.getOrDefault("X-Amz-Signature")
  valid_613363 = validateParameter(valid_613363, JString, required = false,
                                 default = nil)
  if valid_613363 != nil:
    section.add "X-Amz-Signature", valid_613363
  var valid_613364 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613364 = validateParameter(valid_613364, JString, required = false,
                                 default = nil)
  if valid_613364 != nil:
    section.add "X-Amz-Content-Sha256", valid_613364
  var valid_613365 = header.getOrDefault("X-Amz-Date")
  valid_613365 = validateParameter(valid_613365, JString, required = false,
                                 default = nil)
  if valid_613365 != nil:
    section.add "X-Amz-Date", valid_613365
  var valid_613366 = header.getOrDefault("X-Amz-Credential")
  valid_613366 = validateParameter(valid_613366, JString, required = false,
                                 default = nil)
  if valid_613366 != nil:
    section.add "X-Amz-Credential", valid_613366
  var valid_613367 = header.getOrDefault("X-Amz-Security-Token")
  valid_613367 = validateParameter(valid_613367, JString, required = false,
                                 default = nil)
  if valid_613367 != nil:
    section.add "X-Amz-Security-Token", valid_613367
  var valid_613368 = header.getOrDefault("X-Amz-Algorithm")
  valid_613368 = validateParameter(valid_613368, JString, required = false,
                                 default = nil)
  if valid_613368 != nil:
    section.add "X-Amz-Algorithm", valid_613368
  var valid_613369 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613369 = validateParameter(valid_613369, JString, required = false,
                                 default = nil)
  if valid_613369 != nil:
    section.add "X-Amz-SignedHeaders", valid_613369
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613370: Call_GetBatchDeleteScheduledAction_613356; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes one or more scheduled actions for the specified Auto Scaling group.
  ## 
  let valid = call_613370.validator(path, query, header, formData, body)
  let scheme = call_613370.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613370.url(scheme.get, call_613370.host, call_613370.base,
                         call_613370.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613370, url, valid)

proc call*(call_613371: Call_GetBatchDeleteScheduledAction_613356;
          AutoScalingGroupName: string; ScheduledActionNames: JsonNode;
          Action: string = "BatchDeleteScheduledAction";
          Version: string = "2011-01-01"): Recallable =
  ## getBatchDeleteScheduledAction
  ## Deletes one or more scheduled actions for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   ScheduledActionNames: JArray (required)
  ##                       : The names of the scheduled actions to delete. The maximum number allowed is 50. 
  ##   Version: string (required)
  var query_613372 = newJObject()
  add(query_613372, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_613372, "Action", newJString(Action))
  if ScheduledActionNames != nil:
    query_613372.add "ScheduledActionNames", ScheduledActionNames
  add(query_613372, "Version", newJString(Version))
  result = call_613371.call(nil, query_613372, nil, nil, nil)

var getBatchDeleteScheduledAction* = Call_GetBatchDeleteScheduledAction_613356(
    name: "getBatchDeleteScheduledAction", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=BatchDeleteScheduledAction",
    validator: validate_GetBatchDeleteScheduledAction_613357, base: "/",
    url: url_GetBatchDeleteScheduledAction_613358,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostBatchPutScheduledUpdateGroupAction_613408 = ref object of OpenApiRestCall_612658
proc url_PostBatchPutScheduledUpdateGroupAction_613410(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostBatchPutScheduledUpdateGroupAction_613409(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates or updates one or more scheduled scaling actions for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613411 = query.getOrDefault("Action")
  valid_613411 = validateParameter(valid_613411, JString, required = true, default = newJString(
      "BatchPutScheduledUpdateGroupAction"))
  if valid_613411 != nil:
    section.add "Action", valid_613411
  var valid_613412 = query.getOrDefault("Version")
  valid_613412 = validateParameter(valid_613412, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613412 != nil:
    section.add "Version", valid_613412
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613413 = header.getOrDefault("X-Amz-Signature")
  valid_613413 = validateParameter(valid_613413, JString, required = false,
                                 default = nil)
  if valid_613413 != nil:
    section.add "X-Amz-Signature", valid_613413
  var valid_613414 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613414 = validateParameter(valid_613414, JString, required = false,
                                 default = nil)
  if valid_613414 != nil:
    section.add "X-Amz-Content-Sha256", valid_613414
  var valid_613415 = header.getOrDefault("X-Amz-Date")
  valid_613415 = validateParameter(valid_613415, JString, required = false,
                                 default = nil)
  if valid_613415 != nil:
    section.add "X-Amz-Date", valid_613415
  var valid_613416 = header.getOrDefault("X-Amz-Credential")
  valid_613416 = validateParameter(valid_613416, JString, required = false,
                                 default = nil)
  if valid_613416 != nil:
    section.add "X-Amz-Credential", valid_613416
  var valid_613417 = header.getOrDefault("X-Amz-Security-Token")
  valid_613417 = validateParameter(valid_613417, JString, required = false,
                                 default = nil)
  if valid_613417 != nil:
    section.add "X-Amz-Security-Token", valid_613417
  var valid_613418 = header.getOrDefault("X-Amz-Algorithm")
  valid_613418 = validateParameter(valid_613418, JString, required = false,
                                 default = nil)
  if valid_613418 != nil:
    section.add "X-Amz-Algorithm", valid_613418
  var valid_613419 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613419 = validateParameter(valid_613419, JString, required = false,
                                 default = nil)
  if valid_613419 != nil:
    section.add "X-Amz-SignedHeaders", valid_613419
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScheduledUpdateGroupActions: JArray (required)
  ##                              : One or more scheduled actions. The maximum number allowed is 50.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_613420 = formData.getOrDefault("AutoScalingGroupName")
  valid_613420 = validateParameter(valid_613420, JString, required = true,
                                 default = nil)
  if valid_613420 != nil:
    section.add "AutoScalingGroupName", valid_613420
  var valid_613421 = formData.getOrDefault("ScheduledUpdateGroupActions")
  valid_613421 = validateParameter(valid_613421, JArray, required = true, default = nil)
  if valid_613421 != nil:
    section.add "ScheduledUpdateGroupActions", valid_613421
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613422: Call_PostBatchPutScheduledUpdateGroupAction_613408;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates or updates one or more scheduled scaling actions for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.
  ## 
  let valid = call_613422.validator(path, query, header, formData, body)
  let scheme = call_613422.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613422.url(scheme.get, call_613422.host, call_613422.base,
                         call_613422.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613422, url, valid)

proc call*(call_613423: Call_PostBatchPutScheduledUpdateGroupAction_613408;
          AutoScalingGroupName: string; ScheduledUpdateGroupActions: JsonNode;
          Action: string = "BatchPutScheduledUpdateGroupAction";
          Version: string = "2011-01-01"): Recallable =
  ## postBatchPutScheduledUpdateGroupAction
  ## Creates or updates one or more scheduled scaling actions for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   ScheduledUpdateGroupActions: JArray (required)
  ##                              : One or more scheduled actions. The maximum number allowed is 50.
  ##   Version: string (required)
  var query_613424 = newJObject()
  var formData_613425 = newJObject()
  add(formData_613425, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_613424, "Action", newJString(Action))
  if ScheduledUpdateGroupActions != nil:
    formData_613425.add "ScheduledUpdateGroupActions", ScheduledUpdateGroupActions
  add(query_613424, "Version", newJString(Version))
  result = call_613423.call(nil, query_613424, nil, formData_613425, nil)

var postBatchPutScheduledUpdateGroupAction* = Call_PostBatchPutScheduledUpdateGroupAction_613408(
    name: "postBatchPutScheduledUpdateGroupAction", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=BatchPutScheduledUpdateGroupAction",
    validator: validate_PostBatchPutScheduledUpdateGroupAction_613409, base: "/",
    url: url_PostBatchPutScheduledUpdateGroupAction_613410,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBatchPutScheduledUpdateGroupAction_613391 = ref object of OpenApiRestCall_612658
proc url_GetBatchPutScheduledUpdateGroupAction_613393(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetBatchPutScheduledUpdateGroupAction_613392(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates or updates one or more scheduled scaling actions for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ScheduledUpdateGroupActions: JArray (required)
  ##                              : One or more scheduled actions. The maximum number allowed is 50.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ScheduledUpdateGroupActions` field"
  var valid_613394 = query.getOrDefault("ScheduledUpdateGroupActions")
  valid_613394 = validateParameter(valid_613394, JArray, required = true, default = nil)
  if valid_613394 != nil:
    section.add "ScheduledUpdateGroupActions", valid_613394
  var valid_613395 = query.getOrDefault("AutoScalingGroupName")
  valid_613395 = validateParameter(valid_613395, JString, required = true,
                                 default = nil)
  if valid_613395 != nil:
    section.add "AutoScalingGroupName", valid_613395
  var valid_613396 = query.getOrDefault("Action")
  valid_613396 = validateParameter(valid_613396, JString, required = true, default = newJString(
      "BatchPutScheduledUpdateGroupAction"))
  if valid_613396 != nil:
    section.add "Action", valid_613396
  var valid_613397 = query.getOrDefault("Version")
  valid_613397 = validateParameter(valid_613397, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613397 != nil:
    section.add "Version", valid_613397
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613398 = header.getOrDefault("X-Amz-Signature")
  valid_613398 = validateParameter(valid_613398, JString, required = false,
                                 default = nil)
  if valid_613398 != nil:
    section.add "X-Amz-Signature", valid_613398
  var valid_613399 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613399 = validateParameter(valid_613399, JString, required = false,
                                 default = nil)
  if valid_613399 != nil:
    section.add "X-Amz-Content-Sha256", valid_613399
  var valid_613400 = header.getOrDefault("X-Amz-Date")
  valid_613400 = validateParameter(valid_613400, JString, required = false,
                                 default = nil)
  if valid_613400 != nil:
    section.add "X-Amz-Date", valid_613400
  var valid_613401 = header.getOrDefault("X-Amz-Credential")
  valid_613401 = validateParameter(valid_613401, JString, required = false,
                                 default = nil)
  if valid_613401 != nil:
    section.add "X-Amz-Credential", valid_613401
  var valid_613402 = header.getOrDefault("X-Amz-Security-Token")
  valid_613402 = validateParameter(valid_613402, JString, required = false,
                                 default = nil)
  if valid_613402 != nil:
    section.add "X-Amz-Security-Token", valid_613402
  var valid_613403 = header.getOrDefault("X-Amz-Algorithm")
  valid_613403 = validateParameter(valid_613403, JString, required = false,
                                 default = nil)
  if valid_613403 != nil:
    section.add "X-Amz-Algorithm", valid_613403
  var valid_613404 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613404 = validateParameter(valid_613404, JString, required = false,
                                 default = nil)
  if valid_613404 != nil:
    section.add "X-Amz-SignedHeaders", valid_613404
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613405: Call_GetBatchPutScheduledUpdateGroupAction_613391;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates or updates one or more scheduled scaling actions for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.
  ## 
  let valid = call_613405.validator(path, query, header, formData, body)
  let scheme = call_613405.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613405.url(scheme.get, call_613405.host, call_613405.base,
                         call_613405.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613405, url, valid)

proc call*(call_613406: Call_GetBatchPutScheduledUpdateGroupAction_613391;
          ScheduledUpdateGroupActions: JsonNode; AutoScalingGroupName: string;
          Action: string = "BatchPutScheduledUpdateGroupAction";
          Version: string = "2011-01-01"): Recallable =
  ## getBatchPutScheduledUpdateGroupAction
  ## Creates or updates one or more scheduled scaling actions for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.
  ##   ScheduledUpdateGroupActions: JArray (required)
  ##                              : One or more scheduled actions. The maximum number allowed is 50.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613407 = newJObject()
  if ScheduledUpdateGroupActions != nil:
    query_613407.add "ScheduledUpdateGroupActions", ScheduledUpdateGroupActions
  add(query_613407, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_613407, "Action", newJString(Action))
  add(query_613407, "Version", newJString(Version))
  result = call_613406.call(nil, query_613407, nil, nil, nil)

var getBatchPutScheduledUpdateGroupAction* = Call_GetBatchPutScheduledUpdateGroupAction_613391(
    name: "getBatchPutScheduledUpdateGroupAction", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=BatchPutScheduledUpdateGroupAction",
    validator: validate_GetBatchPutScheduledUpdateGroupAction_613392, base: "/",
    url: url_GetBatchPutScheduledUpdateGroupAction_613393,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCompleteLifecycleAction_613446 = ref object of OpenApiRestCall_612658
proc url_PostCompleteLifecycleAction_613448(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCompleteLifecycleAction_613447(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Completes the lifecycle action for the specified token or instance with the specified result.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</p> </li> <li> <p> <b>If you finish before the timeout period ends, complete the lifecycle action.</b> </p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613449 = query.getOrDefault("Action")
  valid_613449 = validateParameter(valid_613449, JString, required = true, default = newJString(
      "CompleteLifecycleAction"))
  if valid_613449 != nil:
    section.add "Action", valid_613449
  var valid_613450 = query.getOrDefault("Version")
  valid_613450 = validateParameter(valid_613450, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613450 != nil:
    section.add "Version", valid_613450
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613451 = header.getOrDefault("X-Amz-Signature")
  valid_613451 = validateParameter(valid_613451, JString, required = false,
                                 default = nil)
  if valid_613451 != nil:
    section.add "X-Amz-Signature", valid_613451
  var valid_613452 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613452 = validateParameter(valid_613452, JString, required = false,
                                 default = nil)
  if valid_613452 != nil:
    section.add "X-Amz-Content-Sha256", valid_613452
  var valid_613453 = header.getOrDefault("X-Amz-Date")
  valid_613453 = validateParameter(valid_613453, JString, required = false,
                                 default = nil)
  if valid_613453 != nil:
    section.add "X-Amz-Date", valid_613453
  var valid_613454 = header.getOrDefault("X-Amz-Credential")
  valid_613454 = validateParameter(valid_613454, JString, required = false,
                                 default = nil)
  if valid_613454 != nil:
    section.add "X-Amz-Credential", valid_613454
  var valid_613455 = header.getOrDefault("X-Amz-Security-Token")
  valid_613455 = validateParameter(valid_613455, JString, required = false,
                                 default = nil)
  if valid_613455 != nil:
    section.add "X-Amz-Security-Token", valid_613455
  var valid_613456 = header.getOrDefault("X-Amz-Algorithm")
  valid_613456 = validateParameter(valid_613456, JString, required = false,
                                 default = nil)
  if valid_613456 != nil:
    section.add "X-Amz-Algorithm", valid_613456
  var valid_613457 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613457 = validateParameter(valid_613457, JString, required = false,
                                 default = nil)
  if valid_613457 != nil:
    section.add "X-Amz-SignedHeaders", valid_613457
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   LifecycleActionToken: JString
  ##                       : A universally unique identifier (UUID) that identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target you specified when you created the lifecycle hook.
  ##   InstanceId: JString
  ##             : The ID of the instance.
  ##   LifecycleActionResult: JString (required)
  ##                        : The action for the group to take. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_613458 = formData.getOrDefault("AutoScalingGroupName")
  valid_613458 = validateParameter(valid_613458, JString, required = true,
                                 default = nil)
  if valid_613458 != nil:
    section.add "AutoScalingGroupName", valid_613458
  var valid_613459 = formData.getOrDefault("LifecycleHookName")
  valid_613459 = validateParameter(valid_613459, JString, required = true,
                                 default = nil)
  if valid_613459 != nil:
    section.add "LifecycleHookName", valid_613459
  var valid_613460 = formData.getOrDefault("LifecycleActionToken")
  valid_613460 = validateParameter(valid_613460, JString, required = false,
                                 default = nil)
  if valid_613460 != nil:
    section.add "LifecycleActionToken", valid_613460
  var valid_613461 = formData.getOrDefault("InstanceId")
  valid_613461 = validateParameter(valid_613461, JString, required = false,
                                 default = nil)
  if valid_613461 != nil:
    section.add "InstanceId", valid_613461
  var valid_613462 = formData.getOrDefault("LifecycleActionResult")
  valid_613462 = validateParameter(valid_613462, JString, required = true,
                                 default = nil)
  if valid_613462 != nil:
    section.add "LifecycleActionResult", valid_613462
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613463: Call_PostCompleteLifecycleAction_613446; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Completes the lifecycle action for the specified token or instance with the specified result.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</p> </li> <li> <p> <b>If you finish before the timeout period ends, complete the lifecycle action.</b> </p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_613463.validator(path, query, header, formData, body)
  let scheme = call_613463.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613463.url(scheme.get, call_613463.host, call_613463.base,
                         call_613463.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613463, url, valid)

proc call*(call_613464: Call_PostCompleteLifecycleAction_613446;
          AutoScalingGroupName: string; LifecycleHookName: string;
          LifecycleActionResult: string; LifecycleActionToken: string = "";
          InstanceId: string = ""; Action: string = "CompleteLifecycleAction";
          Version: string = "2011-01-01"): Recallable =
  ## postCompleteLifecycleAction
  ## <p>Completes the lifecycle action for the specified token or instance with the specified result.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</p> </li> <li> <p> <b>If you finish before the timeout period ends, complete the lifecycle action.</b> </p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   LifecycleActionToken: string
  ##                       : A universally unique identifier (UUID) that identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target you specified when you created the lifecycle hook.
  ##   InstanceId: string
  ##             : The ID of the instance.
  ##   Action: string (required)
  ##   LifecycleActionResult: string (required)
  ##                        : The action for the group to take. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>.
  ##   Version: string (required)
  var query_613465 = newJObject()
  var formData_613466 = newJObject()
  add(formData_613466, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_613466, "LifecycleHookName", newJString(LifecycleHookName))
  add(formData_613466, "LifecycleActionToken", newJString(LifecycleActionToken))
  add(formData_613466, "InstanceId", newJString(InstanceId))
  add(query_613465, "Action", newJString(Action))
  add(formData_613466, "LifecycleActionResult", newJString(LifecycleActionResult))
  add(query_613465, "Version", newJString(Version))
  result = call_613464.call(nil, query_613465, nil, formData_613466, nil)

var postCompleteLifecycleAction* = Call_PostCompleteLifecycleAction_613446(
    name: "postCompleteLifecycleAction", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=CompleteLifecycleAction",
    validator: validate_PostCompleteLifecycleAction_613447, base: "/",
    url: url_PostCompleteLifecycleAction_613448,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCompleteLifecycleAction_613426 = ref object of OpenApiRestCall_612658
proc url_GetCompleteLifecycleAction_613428(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCompleteLifecycleAction_613427(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Completes the lifecycle action for the specified token or instance with the specified result.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</p> </li> <li> <p> <b>If you finish before the timeout period ends, complete the lifecycle action.</b> </p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   LifecycleActionResult: JString (required)
  ##                        : The action for the group to take. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>.
  ##   InstanceId: JString
  ##             : The ID of the instance.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   Action: JString (required)
  ##   LifecycleActionToken: JString
  ##                       : A universally unique identifier (UUID) that identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target you specified when you created the lifecycle hook.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `LifecycleActionResult` field"
  var valid_613429 = query.getOrDefault("LifecycleActionResult")
  valid_613429 = validateParameter(valid_613429, JString, required = true,
                                 default = nil)
  if valid_613429 != nil:
    section.add "LifecycleActionResult", valid_613429
  var valid_613430 = query.getOrDefault("InstanceId")
  valid_613430 = validateParameter(valid_613430, JString, required = false,
                                 default = nil)
  if valid_613430 != nil:
    section.add "InstanceId", valid_613430
  var valid_613431 = query.getOrDefault("AutoScalingGroupName")
  valid_613431 = validateParameter(valid_613431, JString, required = true,
                                 default = nil)
  if valid_613431 != nil:
    section.add "AutoScalingGroupName", valid_613431
  var valid_613432 = query.getOrDefault("LifecycleHookName")
  valid_613432 = validateParameter(valid_613432, JString, required = true,
                                 default = nil)
  if valid_613432 != nil:
    section.add "LifecycleHookName", valid_613432
  var valid_613433 = query.getOrDefault("Action")
  valid_613433 = validateParameter(valid_613433, JString, required = true, default = newJString(
      "CompleteLifecycleAction"))
  if valid_613433 != nil:
    section.add "Action", valid_613433
  var valid_613434 = query.getOrDefault("LifecycleActionToken")
  valid_613434 = validateParameter(valid_613434, JString, required = false,
                                 default = nil)
  if valid_613434 != nil:
    section.add "LifecycleActionToken", valid_613434
  var valid_613435 = query.getOrDefault("Version")
  valid_613435 = validateParameter(valid_613435, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613435 != nil:
    section.add "Version", valid_613435
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613436 = header.getOrDefault("X-Amz-Signature")
  valid_613436 = validateParameter(valid_613436, JString, required = false,
                                 default = nil)
  if valid_613436 != nil:
    section.add "X-Amz-Signature", valid_613436
  var valid_613437 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613437 = validateParameter(valid_613437, JString, required = false,
                                 default = nil)
  if valid_613437 != nil:
    section.add "X-Amz-Content-Sha256", valid_613437
  var valid_613438 = header.getOrDefault("X-Amz-Date")
  valid_613438 = validateParameter(valid_613438, JString, required = false,
                                 default = nil)
  if valid_613438 != nil:
    section.add "X-Amz-Date", valid_613438
  var valid_613439 = header.getOrDefault("X-Amz-Credential")
  valid_613439 = validateParameter(valid_613439, JString, required = false,
                                 default = nil)
  if valid_613439 != nil:
    section.add "X-Amz-Credential", valid_613439
  var valid_613440 = header.getOrDefault("X-Amz-Security-Token")
  valid_613440 = validateParameter(valid_613440, JString, required = false,
                                 default = nil)
  if valid_613440 != nil:
    section.add "X-Amz-Security-Token", valid_613440
  var valid_613441 = header.getOrDefault("X-Amz-Algorithm")
  valid_613441 = validateParameter(valid_613441, JString, required = false,
                                 default = nil)
  if valid_613441 != nil:
    section.add "X-Amz-Algorithm", valid_613441
  var valid_613442 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613442 = validateParameter(valid_613442, JString, required = false,
                                 default = nil)
  if valid_613442 != nil:
    section.add "X-Amz-SignedHeaders", valid_613442
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613443: Call_GetCompleteLifecycleAction_613426; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Completes the lifecycle action for the specified token or instance with the specified result.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</p> </li> <li> <p> <b>If you finish before the timeout period ends, complete the lifecycle action.</b> </p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_613443.validator(path, query, header, formData, body)
  let scheme = call_613443.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613443.url(scheme.get, call_613443.host, call_613443.base,
                         call_613443.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613443, url, valid)

proc call*(call_613444: Call_GetCompleteLifecycleAction_613426;
          LifecycleActionResult: string; AutoScalingGroupName: string;
          LifecycleHookName: string; InstanceId: string = "";
          Action: string = "CompleteLifecycleAction";
          LifecycleActionToken: string = ""; Version: string = "2011-01-01"): Recallable =
  ## getCompleteLifecycleAction
  ## <p>Completes the lifecycle action for the specified token or instance with the specified result.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</p> </li> <li> <p> <b>If you finish before the timeout period ends, complete the lifecycle action.</b> </p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LifecycleActionResult: string (required)
  ##                        : The action for the group to take. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>.
  ##   InstanceId: string
  ##             : The ID of the instance.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   Action: string (required)
  ##   LifecycleActionToken: string
  ##                       : A universally unique identifier (UUID) that identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target you specified when you created the lifecycle hook.
  ##   Version: string (required)
  var query_613445 = newJObject()
  add(query_613445, "LifecycleActionResult", newJString(LifecycleActionResult))
  add(query_613445, "InstanceId", newJString(InstanceId))
  add(query_613445, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_613445, "LifecycleHookName", newJString(LifecycleHookName))
  add(query_613445, "Action", newJString(Action))
  add(query_613445, "LifecycleActionToken", newJString(LifecycleActionToken))
  add(query_613445, "Version", newJString(Version))
  result = call_613444.call(nil, query_613445, nil, nil, nil)

var getCompleteLifecycleAction* = Call_GetCompleteLifecycleAction_613426(
    name: "getCompleteLifecycleAction", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=CompleteLifecycleAction",
    validator: validate_GetCompleteLifecycleAction_613427, base: "/",
    url: url_GetCompleteLifecycleAction_613428,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateAutoScalingGroup_613507 = ref object of OpenApiRestCall_612658
proc url_PostCreateAutoScalingGroup_613509(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateAutoScalingGroup_613508(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an Auto Scaling group with the specified name and attributes.</p> <p>If you exceed your maximum limit of Auto Scaling groups, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613510 = query.getOrDefault("Action")
  valid_613510 = validateParameter(valid_613510, JString, required = true,
                                 default = newJString("CreateAutoScalingGroup"))
  if valid_613510 != nil:
    section.add "Action", valid_613510
  var valid_613511 = query.getOrDefault("Version")
  valid_613511 = validateParameter(valid_613511, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613511 != nil:
    section.add "Version", valid_613511
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613512 = header.getOrDefault("X-Amz-Signature")
  valid_613512 = validateParameter(valid_613512, JString, required = false,
                                 default = nil)
  if valid_613512 != nil:
    section.add "X-Amz-Signature", valid_613512
  var valid_613513 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613513 = validateParameter(valid_613513, JString, required = false,
                                 default = nil)
  if valid_613513 != nil:
    section.add "X-Amz-Content-Sha256", valid_613513
  var valid_613514 = header.getOrDefault("X-Amz-Date")
  valid_613514 = validateParameter(valid_613514, JString, required = false,
                                 default = nil)
  if valid_613514 != nil:
    section.add "X-Amz-Date", valid_613514
  var valid_613515 = header.getOrDefault("X-Amz-Credential")
  valid_613515 = validateParameter(valid_613515, JString, required = false,
                                 default = nil)
  if valid_613515 != nil:
    section.add "X-Amz-Credential", valid_613515
  var valid_613516 = header.getOrDefault("X-Amz-Security-Token")
  valid_613516 = validateParameter(valid_613516, JString, required = false,
                                 default = nil)
  if valid_613516 != nil:
    section.add "X-Amz-Security-Token", valid_613516
  var valid_613517 = header.getOrDefault("X-Amz-Algorithm")
  valid_613517 = validateParameter(valid_613517, JString, required = false,
                                 default = nil)
  if valid_613517 != nil:
    section.add "X-Amz-Algorithm", valid_613517
  var valid_613518 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613518 = validateParameter(valid_613518, JString, required = false,
                                 default = nil)
  if valid_613518 != nil:
    section.add "X-Amz-SignedHeaders", valid_613518
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group. This name must be unique per Region per account.
  ##   MinSize: JInt (required)
  ##          : The minimum size of the group.
  ##   MixedInstancesPolicy.InstancesDistribution: JString
  ##                                             : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified, the value for each parameter in <code>InstancesDistribution</code> uses a default value.</p>
  ##   DesiredCapacity: JInt
  ##                  : The number of Amazon EC2 instances that the Auto Scaling group attempts to maintain. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group. If you do not specify a desired capacity, the default is the minimum size of the group.
  ##   DefaultCooldown: JInt
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LoadBalancerNames: JArray
  ##                    : <p>A list of Classic Load Balancers associated with this Auto Scaling group. For Application Load Balancers and Network Load Balancers, specify a list of target groups using the <code>TargetGroupARNs</code> property instead.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   NewInstancesProtectedFromScaleIn: JBool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MaxInstanceLifetime: JInt
  ##                      : <p>The maximum amount of time, in seconds, that an instance can be in service.</p> <p>Valid Range: Minimum value of 604800.</p>
  ##   TargetGroupARNs: JArray
  ##                  : <p>The Amazon Resource Names (ARN) of the target groups to associate with the Auto Scaling group. Instances are registered as targets in a target group, and traffic is routed to the target group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   TerminationPolicies: JArray
  ##                      : <p>One or more termination policies used to select the instance to terminate. These policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AvailabilityZones: JArray
  ##                    : <p>One or more Availability Zones for the group. This parameter is optional if you specify one or more subnets for <code>VPCZoneIdentifier</code>.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into EC2-Classic.</p>
  ##   LaunchTemplate.Version: JString
  ##                         : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   HealthCheckType: JString
  ##                  : <p>The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. The default value is <code>EC2</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   PlacementGroup: JString
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   InstanceId: JString
  ##             : <p>The ID of the instance used to create a launch configuration for the group.</p> <p>When you specify an ID of an instance, Amazon EC2 Auto Scaling creates a new launch configuration and associates it with the group. This launch configuration derives its attributes from the specified instance, except for the block device mapping.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-from-instance.html">Create an Auto Scaling Group Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You must specify one of the following parameters in your request: <code>LaunchConfigurationName</code>, <code>LaunchTemplate</code>, <code>InstanceId</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   LaunchTemplate.LaunchTemplateName: JString
  ##                                    : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   LifecycleHookSpecificationList: JArray
  ##                                 : One or more lifecycle hooks.
  ##   LaunchTemplate.LaunchTemplateId: JString
  ##                                  : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  ##   MaxSize: JInt (required)
  ##          : The maximum size of the group.
  ##   HealthCheckGracePeriod: JInt
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. During this time, any health check failures for the instance are ignored. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   Tags: JArray
  ##       : <p>One or more tags.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   ServiceLinkedRoleARN: JString
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. By default, Amazon EC2 Auto Scaling uses a service-linked role named AWSServiceRoleForAutoScaling, which it creates if it does not exist. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   LaunchConfigurationName: JString
  ##                          : <p>The name of the launch configuration.</p> <p>If you do not specify <code>LaunchConfigurationName</code>, you must specify one of the following parameters: <code>InstanceId</code>, <code>LaunchTemplate</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   MixedInstancesPolicy.LaunchTemplate: JString
  ##                                      : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   VPCZoneIdentifier: JString
  ##                    : <p>A comma-separated list of subnet IDs for your virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into a VPC.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_613519 = formData.getOrDefault("AutoScalingGroupName")
  valid_613519 = validateParameter(valid_613519, JString, required = true,
                                 default = nil)
  if valid_613519 != nil:
    section.add "AutoScalingGroupName", valid_613519
  var valid_613520 = formData.getOrDefault("MinSize")
  valid_613520 = validateParameter(valid_613520, JInt, required = true, default = nil)
  if valid_613520 != nil:
    section.add "MinSize", valid_613520
  var valid_613521 = formData.getOrDefault("MixedInstancesPolicy.InstancesDistribution")
  valid_613521 = validateParameter(valid_613521, JString, required = false,
                                 default = nil)
  if valid_613521 != nil:
    section.add "MixedInstancesPolicy.InstancesDistribution", valid_613521
  var valid_613522 = formData.getOrDefault("DesiredCapacity")
  valid_613522 = validateParameter(valid_613522, JInt, required = false, default = nil)
  if valid_613522 != nil:
    section.add "DesiredCapacity", valid_613522
  var valid_613523 = formData.getOrDefault("DefaultCooldown")
  valid_613523 = validateParameter(valid_613523, JInt, required = false, default = nil)
  if valid_613523 != nil:
    section.add "DefaultCooldown", valid_613523
  var valid_613524 = formData.getOrDefault("LoadBalancerNames")
  valid_613524 = validateParameter(valid_613524, JArray, required = false,
                                 default = nil)
  if valid_613524 != nil:
    section.add "LoadBalancerNames", valid_613524
  var valid_613525 = formData.getOrDefault("NewInstancesProtectedFromScaleIn")
  valid_613525 = validateParameter(valid_613525, JBool, required = false, default = nil)
  if valid_613525 != nil:
    section.add "NewInstancesProtectedFromScaleIn", valid_613525
  var valid_613526 = formData.getOrDefault("MaxInstanceLifetime")
  valid_613526 = validateParameter(valid_613526, JInt, required = false, default = nil)
  if valid_613526 != nil:
    section.add "MaxInstanceLifetime", valid_613526
  var valid_613527 = formData.getOrDefault("TargetGroupARNs")
  valid_613527 = validateParameter(valid_613527, JArray, required = false,
                                 default = nil)
  if valid_613527 != nil:
    section.add "TargetGroupARNs", valid_613527
  var valid_613528 = formData.getOrDefault("TerminationPolicies")
  valid_613528 = validateParameter(valid_613528, JArray, required = false,
                                 default = nil)
  if valid_613528 != nil:
    section.add "TerminationPolicies", valid_613528
  var valid_613529 = formData.getOrDefault("AvailabilityZones")
  valid_613529 = validateParameter(valid_613529, JArray, required = false,
                                 default = nil)
  if valid_613529 != nil:
    section.add "AvailabilityZones", valid_613529
  var valid_613530 = formData.getOrDefault("LaunchTemplate.Version")
  valid_613530 = validateParameter(valid_613530, JString, required = false,
                                 default = nil)
  if valid_613530 != nil:
    section.add "LaunchTemplate.Version", valid_613530
  var valid_613531 = formData.getOrDefault("HealthCheckType")
  valid_613531 = validateParameter(valid_613531, JString, required = false,
                                 default = nil)
  if valid_613531 != nil:
    section.add "HealthCheckType", valid_613531
  var valid_613532 = formData.getOrDefault("PlacementGroup")
  valid_613532 = validateParameter(valid_613532, JString, required = false,
                                 default = nil)
  if valid_613532 != nil:
    section.add "PlacementGroup", valid_613532
  var valid_613533 = formData.getOrDefault("InstanceId")
  valid_613533 = validateParameter(valid_613533, JString, required = false,
                                 default = nil)
  if valid_613533 != nil:
    section.add "InstanceId", valid_613533
  var valid_613534 = formData.getOrDefault("LaunchTemplate.LaunchTemplateName")
  valid_613534 = validateParameter(valid_613534, JString, required = false,
                                 default = nil)
  if valid_613534 != nil:
    section.add "LaunchTemplate.LaunchTemplateName", valid_613534
  var valid_613535 = formData.getOrDefault("LifecycleHookSpecificationList")
  valid_613535 = validateParameter(valid_613535, JArray, required = false,
                                 default = nil)
  if valid_613535 != nil:
    section.add "LifecycleHookSpecificationList", valid_613535
  var valid_613536 = formData.getOrDefault("LaunchTemplate.LaunchTemplateId")
  valid_613536 = validateParameter(valid_613536, JString, required = false,
                                 default = nil)
  if valid_613536 != nil:
    section.add "LaunchTemplate.LaunchTemplateId", valid_613536
  var valid_613537 = formData.getOrDefault("MaxSize")
  valid_613537 = validateParameter(valid_613537, JInt, required = true, default = nil)
  if valid_613537 != nil:
    section.add "MaxSize", valid_613537
  var valid_613538 = formData.getOrDefault("HealthCheckGracePeriod")
  valid_613538 = validateParameter(valid_613538, JInt, required = false, default = nil)
  if valid_613538 != nil:
    section.add "HealthCheckGracePeriod", valid_613538
  var valid_613539 = formData.getOrDefault("Tags")
  valid_613539 = validateParameter(valid_613539, JArray, required = false,
                                 default = nil)
  if valid_613539 != nil:
    section.add "Tags", valid_613539
  var valid_613540 = formData.getOrDefault("ServiceLinkedRoleARN")
  valid_613540 = validateParameter(valid_613540, JString, required = false,
                                 default = nil)
  if valid_613540 != nil:
    section.add "ServiceLinkedRoleARN", valid_613540
  var valid_613541 = formData.getOrDefault("LaunchConfigurationName")
  valid_613541 = validateParameter(valid_613541, JString, required = false,
                                 default = nil)
  if valid_613541 != nil:
    section.add "LaunchConfigurationName", valid_613541
  var valid_613542 = formData.getOrDefault("MixedInstancesPolicy.LaunchTemplate")
  valid_613542 = validateParameter(valid_613542, JString, required = false,
                                 default = nil)
  if valid_613542 != nil:
    section.add "MixedInstancesPolicy.LaunchTemplate", valid_613542
  var valid_613543 = formData.getOrDefault("VPCZoneIdentifier")
  valid_613543 = validateParameter(valid_613543, JString, required = false,
                                 default = nil)
  if valid_613543 != nil:
    section.add "VPCZoneIdentifier", valid_613543
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613544: Call_PostCreateAutoScalingGroup_613507; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an Auto Scaling group with the specified name and attributes.</p> <p>If you exceed your maximum limit of Auto Scaling groups, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_613544.validator(path, query, header, formData, body)
  let scheme = call_613544.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613544.url(scheme.get, call_613544.host, call_613544.base,
                         call_613544.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613544, url, valid)

proc call*(call_613545: Call_PostCreateAutoScalingGroup_613507;
          AutoScalingGroupName: string; MinSize: int; MaxSize: int;
          MixedInstancesPolicyInstancesDistribution: string = "";
          DesiredCapacity: int = 0; DefaultCooldown: int = 0;
          LoadBalancerNames: JsonNode = nil;
          NewInstancesProtectedFromScaleIn: bool = false;
          MaxInstanceLifetime: int = 0; TargetGroupARNs: JsonNode = nil;
          TerminationPolicies: JsonNode = nil; AvailabilityZones: JsonNode = nil;
          LaunchTemplateVersion: string = ""; HealthCheckType: string = "";
          PlacementGroup: string = ""; InstanceId: string = "";
          LaunchTemplateLaunchTemplateName: string = "";
          LifecycleHookSpecificationList: JsonNode = nil;
          Action: string = "CreateAutoScalingGroup";
          LaunchTemplateLaunchTemplateId: string = "";
          HealthCheckGracePeriod: int = 0; Tags: JsonNode = nil;
          ServiceLinkedRoleARN: string = ""; LaunchConfigurationName: string = "";
          Version: string = "2011-01-01";
          MixedInstancesPolicyLaunchTemplate: string = "";
          VPCZoneIdentifier: string = ""): Recallable =
  ## postCreateAutoScalingGroup
  ## <p>Creates an Auto Scaling group with the specified name and attributes.</p> <p>If you exceed your maximum limit of Auto Scaling groups, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group. This name must be unique per Region per account.
  ##   MinSize: int (required)
  ##          : The minimum size of the group.
  ##   MixedInstancesPolicyInstancesDistribution: string
  ##                                            : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified, the value for each parameter in <code>InstancesDistribution</code> uses a default value.</p>
  ##   DesiredCapacity: int
  ##                  : The number of Amazon EC2 instances that the Auto Scaling group attempts to maintain. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group. If you do not specify a desired capacity, the default is the minimum size of the group.
  ##   DefaultCooldown: int
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LoadBalancerNames: JArray
  ##                    : <p>A list of Classic Load Balancers associated with this Auto Scaling group. For Application Load Balancers and Network Load Balancers, specify a list of target groups using the <code>TargetGroupARNs</code> property instead.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   NewInstancesProtectedFromScaleIn: bool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MaxInstanceLifetime: int
  ##                      : <p>The maximum amount of time, in seconds, that an instance can be in service.</p> <p>Valid Range: Minimum value of 604800.</p>
  ##   TargetGroupARNs: JArray
  ##                  : <p>The Amazon Resource Names (ARN) of the target groups to associate with the Auto Scaling group. Instances are registered as targets in a target group, and traffic is routed to the target group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   TerminationPolicies: JArray
  ##                      : <p>One or more termination policies used to select the instance to terminate. These policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AvailabilityZones: JArray
  ##                    : <p>One or more Availability Zones for the group. This parameter is optional if you specify one or more subnets for <code>VPCZoneIdentifier</code>.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into EC2-Classic.</p>
  ##   LaunchTemplateVersion: string
  ##                        : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   HealthCheckType: string
  ##                  : <p>The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. The default value is <code>EC2</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   PlacementGroup: string
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   InstanceId: string
  ##             : <p>The ID of the instance used to create a launch configuration for the group.</p> <p>When you specify an ID of an instance, Amazon EC2 Auto Scaling creates a new launch configuration and associates it with the group. This launch configuration derives its attributes from the specified instance, except for the block device mapping.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-from-instance.html">Create an Auto Scaling Group Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You must specify one of the following parameters in your request: <code>LaunchConfigurationName</code>, <code>LaunchTemplate</code>, <code>InstanceId</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   LaunchTemplateLaunchTemplateName: string
  ##                                   : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   LifecycleHookSpecificationList: JArray
  ##                                 : One or more lifecycle hooks.
  ##   Action: string (required)
  ##   LaunchTemplateLaunchTemplateId: string
  ##                                 : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  ##   MaxSize: int (required)
  ##          : The maximum size of the group.
  ##   HealthCheckGracePeriod: int
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. During this time, any health check failures for the instance are ignored. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   Tags: JArray
  ##       : <p>One or more tags.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   ServiceLinkedRoleARN: string
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. By default, Amazon EC2 Auto Scaling uses a service-linked role named AWSServiceRoleForAutoScaling, which it creates if it does not exist. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   LaunchConfigurationName: string
  ##                          : <p>The name of the launch configuration.</p> <p>If you do not specify <code>LaunchConfigurationName</code>, you must specify one of the following parameters: <code>InstanceId</code>, <code>LaunchTemplate</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   Version: string (required)
  ##   MixedInstancesPolicyLaunchTemplate: string
  ##                                     : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   VPCZoneIdentifier: string
  ##                    : <p>A comma-separated list of subnet IDs for your virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into a VPC.</p>
  var query_613546 = newJObject()
  var formData_613547 = newJObject()
  add(formData_613547, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_613547, "MinSize", newJInt(MinSize))
  add(formData_613547, "MixedInstancesPolicy.InstancesDistribution",
      newJString(MixedInstancesPolicyInstancesDistribution))
  add(formData_613547, "DesiredCapacity", newJInt(DesiredCapacity))
  add(formData_613547, "DefaultCooldown", newJInt(DefaultCooldown))
  if LoadBalancerNames != nil:
    formData_613547.add "LoadBalancerNames", LoadBalancerNames
  add(formData_613547, "NewInstancesProtectedFromScaleIn",
      newJBool(NewInstancesProtectedFromScaleIn))
  add(formData_613547, "MaxInstanceLifetime", newJInt(MaxInstanceLifetime))
  if TargetGroupARNs != nil:
    formData_613547.add "TargetGroupARNs", TargetGroupARNs
  if TerminationPolicies != nil:
    formData_613547.add "TerminationPolicies", TerminationPolicies
  if AvailabilityZones != nil:
    formData_613547.add "AvailabilityZones", AvailabilityZones
  add(formData_613547, "LaunchTemplate.Version", newJString(LaunchTemplateVersion))
  add(formData_613547, "HealthCheckType", newJString(HealthCheckType))
  add(formData_613547, "PlacementGroup", newJString(PlacementGroup))
  add(formData_613547, "InstanceId", newJString(InstanceId))
  add(formData_613547, "LaunchTemplate.LaunchTemplateName",
      newJString(LaunchTemplateLaunchTemplateName))
  if LifecycleHookSpecificationList != nil:
    formData_613547.add "LifecycleHookSpecificationList",
                       LifecycleHookSpecificationList
  add(query_613546, "Action", newJString(Action))
  add(formData_613547, "LaunchTemplate.LaunchTemplateId",
      newJString(LaunchTemplateLaunchTemplateId))
  add(formData_613547, "MaxSize", newJInt(MaxSize))
  add(formData_613547, "HealthCheckGracePeriod", newJInt(HealthCheckGracePeriod))
  if Tags != nil:
    formData_613547.add "Tags", Tags
  add(formData_613547, "ServiceLinkedRoleARN", newJString(ServiceLinkedRoleARN))
  add(formData_613547, "LaunchConfigurationName",
      newJString(LaunchConfigurationName))
  add(query_613546, "Version", newJString(Version))
  add(formData_613547, "MixedInstancesPolicy.LaunchTemplate",
      newJString(MixedInstancesPolicyLaunchTemplate))
  add(formData_613547, "VPCZoneIdentifier", newJString(VPCZoneIdentifier))
  result = call_613545.call(nil, query_613546, nil, formData_613547, nil)

var postCreateAutoScalingGroup* = Call_PostCreateAutoScalingGroup_613507(
    name: "postCreateAutoScalingGroup", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=CreateAutoScalingGroup",
    validator: validate_PostCreateAutoScalingGroup_613508, base: "/",
    url: url_PostCreateAutoScalingGroup_613509,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateAutoScalingGroup_613467 = ref object of OpenApiRestCall_612658
proc url_GetCreateAutoScalingGroup_613469(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateAutoScalingGroup_613468(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an Auto Scaling group with the specified name and attributes.</p> <p>If you exceed your maximum limit of Auto Scaling groups, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MixedInstancesPolicy.InstancesDistribution: JString
  ##                                             : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified, the value for each parameter in <code>InstancesDistribution</code> uses a default value.</p>
  ##   LaunchTemplate.LaunchTemplateName: JString
  ##                                    : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   MaxSize: JInt (required)
  ##          : The maximum size of the group.
  ##   LaunchConfigurationName: JString
  ##                          : <p>The name of the launch configuration.</p> <p>If you do not specify <code>LaunchConfigurationName</code>, you must specify one of the following parameters: <code>InstanceId</code>, <code>LaunchTemplate</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   HealthCheckGracePeriod: JInt
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. During this time, any health check failures for the instance are ignored. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   MixedInstancesPolicy.LaunchTemplate: JString
  ##                                      : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   Tags: JArray
  ##       : <p>One or more tags.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   NewInstancesProtectedFromScaleIn: JBool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AvailabilityZones: JArray
  ##                    : <p>One or more Availability Zones for the group. This parameter is optional if you specify one or more subnets for <code>VPCZoneIdentifier</code>.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into EC2-Classic.</p>
  ##   HealthCheckType: JString
  ##                  : <p>The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. The default value is <code>EC2</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   TerminationPolicies: JArray
  ##                      : <p>One or more termination policies used to select the instance to terminate. These policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   InstanceId: JString
  ##             : <p>The ID of the instance used to create a launch configuration for the group.</p> <p>When you specify an ID of an instance, Amazon EC2 Auto Scaling creates a new launch configuration and associates it with the group. This launch configuration derives its attributes from the specified instance, except for the block device mapping.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-from-instance.html">Create an Auto Scaling Group Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You must specify one of the following parameters in your request: <code>LaunchConfigurationName</code>, <code>LaunchTemplate</code>, <code>InstanceId</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   DesiredCapacity: JInt
  ##                  : The number of Amazon EC2 instances that the Auto Scaling group attempts to maintain. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group. If you do not specify a desired capacity, the default is the minimum size of the group.
  ##   LifecycleHookSpecificationList: JArray
  ##                                 : One or more lifecycle hooks.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group. This name must be unique per Region per account.
  ##   DefaultCooldown: JInt
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   TargetGroupARNs: JArray
  ##                  : <p>The Amazon Resource Names (ARN) of the target groups to associate with the Auto Scaling group. Instances are registered as targets in a target group, and traffic is routed to the target group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: JString (required)
  ##   MinSize: JInt (required)
  ##          : The minimum size of the group.
  ##   PlacementGroup: JString
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   LaunchTemplate.Version: JString
  ##                         : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   MaxInstanceLifetime: JInt
  ##                      : <p>The maximum amount of time, in seconds, that an instance can be in service.</p> <p>Valid Range: Minimum value of 604800.</p>
  ##   Version: JString (required)
  ##   VPCZoneIdentifier: JString
  ##                    : <p>A comma-separated list of subnet IDs for your virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into a VPC.</p>
  ##   LoadBalancerNames: JArray
  ##                    : <p>A list of Classic Load Balancers associated with this Auto Scaling group. For Application Load Balancers and Network Load Balancers, specify a list of target groups using the <code>TargetGroupARNs</code> property instead.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   ServiceLinkedRoleARN: JString
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. By default, Amazon EC2 Auto Scaling uses a service-linked role named AWSServiceRoleForAutoScaling, which it creates if it does not exist. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   LaunchTemplate.LaunchTemplateId: JString
  ##                                  : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  section = newJObject()
  var valid_613470 = query.getOrDefault("MixedInstancesPolicy.InstancesDistribution")
  valid_613470 = validateParameter(valid_613470, JString, required = false,
                                 default = nil)
  if valid_613470 != nil:
    section.add "MixedInstancesPolicy.InstancesDistribution", valid_613470
  var valid_613471 = query.getOrDefault("LaunchTemplate.LaunchTemplateName")
  valid_613471 = validateParameter(valid_613471, JString, required = false,
                                 default = nil)
  if valid_613471 != nil:
    section.add "LaunchTemplate.LaunchTemplateName", valid_613471
  assert query != nil, "query argument is necessary due to required `MaxSize` field"
  var valid_613472 = query.getOrDefault("MaxSize")
  valid_613472 = validateParameter(valid_613472, JInt, required = true, default = nil)
  if valid_613472 != nil:
    section.add "MaxSize", valid_613472
  var valid_613473 = query.getOrDefault("LaunchConfigurationName")
  valid_613473 = validateParameter(valid_613473, JString, required = false,
                                 default = nil)
  if valid_613473 != nil:
    section.add "LaunchConfigurationName", valid_613473
  var valid_613474 = query.getOrDefault("HealthCheckGracePeriod")
  valid_613474 = validateParameter(valid_613474, JInt, required = false, default = nil)
  if valid_613474 != nil:
    section.add "HealthCheckGracePeriod", valid_613474
  var valid_613475 = query.getOrDefault("MixedInstancesPolicy.LaunchTemplate")
  valid_613475 = validateParameter(valid_613475, JString, required = false,
                                 default = nil)
  if valid_613475 != nil:
    section.add "MixedInstancesPolicy.LaunchTemplate", valid_613475
  var valid_613476 = query.getOrDefault("Tags")
  valid_613476 = validateParameter(valid_613476, JArray, required = false,
                                 default = nil)
  if valid_613476 != nil:
    section.add "Tags", valid_613476
  var valid_613477 = query.getOrDefault("NewInstancesProtectedFromScaleIn")
  valid_613477 = validateParameter(valid_613477, JBool, required = false, default = nil)
  if valid_613477 != nil:
    section.add "NewInstancesProtectedFromScaleIn", valid_613477
  var valid_613478 = query.getOrDefault("AvailabilityZones")
  valid_613478 = validateParameter(valid_613478, JArray, required = false,
                                 default = nil)
  if valid_613478 != nil:
    section.add "AvailabilityZones", valid_613478
  var valid_613479 = query.getOrDefault("HealthCheckType")
  valid_613479 = validateParameter(valid_613479, JString, required = false,
                                 default = nil)
  if valid_613479 != nil:
    section.add "HealthCheckType", valid_613479
  var valid_613480 = query.getOrDefault("TerminationPolicies")
  valid_613480 = validateParameter(valid_613480, JArray, required = false,
                                 default = nil)
  if valid_613480 != nil:
    section.add "TerminationPolicies", valid_613480
  var valid_613481 = query.getOrDefault("InstanceId")
  valid_613481 = validateParameter(valid_613481, JString, required = false,
                                 default = nil)
  if valid_613481 != nil:
    section.add "InstanceId", valid_613481
  var valid_613482 = query.getOrDefault("DesiredCapacity")
  valid_613482 = validateParameter(valid_613482, JInt, required = false, default = nil)
  if valid_613482 != nil:
    section.add "DesiredCapacity", valid_613482
  var valid_613483 = query.getOrDefault("LifecycleHookSpecificationList")
  valid_613483 = validateParameter(valid_613483, JArray, required = false,
                                 default = nil)
  if valid_613483 != nil:
    section.add "LifecycleHookSpecificationList", valid_613483
  var valid_613484 = query.getOrDefault("AutoScalingGroupName")
  valid_613484 = validateParameter(valid_613484, JString, required = true,
                                 default = nil)
  if valid_613484 != nil:
    section.add "AutoScalingGroupName", valid_613484
  var valid_613485 = query.getOrDefault("DefaultCooldown")
  valid_613485 = validateParameter(valid_613485, JInt, required = false, default = nil)
  if valid_613485 != nil:
    section.add "DefaultCooldown", valid_613485
  var valid_613486 = query.getOrDefault("TargetGroupARNs")
  valid_613486 = validateParameter(valid_613486, JArray, required = false,
                                 default = nil)
  if valid_613486 != nil:
    section.add "TargetGroupARNs", valid_613486
  var valid_613487 = query.getOrDefault("Action")
  valid_613487 = validateParameter(valid_613487, JString, required = true,
                                 default = newJString("CreateAutoScalingGroup"))
  if valid_613487 != nil:
    section.add "Action", valid_613487
  var valid_613488 = query.getOrDefault("MinSize")
  valid_613488 = validateParameter(valid_613488, JInt, required = true, default = nil)
  if valid_613488 != nil:
    section.add "MinSize", valid_613488
  var valid_613489 = query.getOrDefault("PlacementGroup")
  valid_613489 = validateParameter(valid_613489, JString, required = false,
                                 default = nil)
  if valid_613489 != nil:
    section.add "PlacementGroup", valid_613489
  var valid_613490 = query.getOrDefault("LaunchTemplate.Version")
  valid_613490 = validateParameter(valid_613490, JString, required = false,
                                 default = nil)
  if valid_613490 != nil:
    section.add "LaunchTemplate.Version", valid_613490
  var valid_613491 = query.getOrDefault("MaxInstanceLifetime")
  valid_613491 = validateParameter(valid_613491, JInt, required = false, default = nil)
  if valid_613491 != nil:
    section.add "MaxInstanceLifetime", valid_613491
  var valid_613492 = query.getOrDefault("Version")
  valid_613492 = validateParameter(valid_613492, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613492 != nil:
    section.add "Version", valid_613492
  var valid_613493 = query.getOrDefault("VPCZoneIdentifier")
  valid_613493 = validateParameter(valid_613493, JString, required = false,
                                 default = nil)
  if valid_613493 != nil:
    section.add "VPCZoneIdentifier", valid_613493
  var valid_613494 = query.getOrDefault("LoadBalancerNames")
  valid_613494 = validateParameter(valid_613494, JArray, required = false,
                                 default = nil)
  if valid_613494 != nil:
    section.add "LoadBalancerNames", valid_613494
  var valid_613495 = query.getOrDefault("ServiceLinkedRoleARN")
  valid_613495 = validateParameter(valid_613495, JString, required = false,
                                 default = nil)
  if valid_613495 != nil:
    section.add "ServiceLinkedRoleARN", valid_613495
  var valid_613496 = query.getOrDefault("LaunchTemplate.LaunchTemplateId")
  valid_613496 = validateParameter(valid_613496, JString, required = false,
                                 default = nil)
  if valid_613496 != nil:
    section.add "LaunchTemplate.LaunchTemplateId", valid_613496
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613497 = header.getOrDefault("X-Amz-Signature")
  valid_613497 = validateParameter(valid_613497, JString, required = false,
                                 default = nil)
  if valid_613497 != nil:
    section.add "X-Amz-Signature", valid_613497
  var valid_613498 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613498 = validateParameter(valid_613498, JString, required = false,
                                 default = nil)
  if valid_613498 != nil:
    section.add "X-Amz-Content-Sha256", valid_613498
  var valid_613499 = header.getOrDefault("X-Amz-Date")
  valid_613499 = validateParameter(valid_613499, JString, required = false,
                                 default = nil)
  if valid_613499 != nil:
    section.add "X-Amz-Date", valid_613499
  var valid_613500 = header.getOrDefault("X-Amz-Credential")
  valid_613500 = validateParameter(valid_613500, JString, required = false,
                                 default = nil)
  if valid_613500 != nil:
    section.add "X-Amz-Credential", valid_613500
  var valid_613501 = header.getOrDefault("X-Amz-Security-Token")
  valid_613501 = validateParameter(valid_613501, JString, required = false,
                                 default = nil)
  if valid_613501 != nil:
    section.add "X-Amz-Security-Token", valid_613501
  var valid_613502 = header.getOrDefault("X-Amz-Algorithm")
  valid_613502 = validateParameter(valid_613502, JString, required = false,
                                 default = nil)
  if valid_613502 != nil:
    section.add "X-Amz-Algorithm", valid_613502
  var valid_613503 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613503 = validateParameter(valid_613503, JString, required = false,
                                 default = nil)
  if valid_613503 != nil:
    section.add "X-Amz-SignedHeaders", valid_613503
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613504: Call_GetCreateAutoScalingGroup_613467; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an Auto Scaling group with the specified name and attributes.</p> <p>If you exceed your maximum limit of Auto Scaling groups, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_613504.validator(path, query, header, formData, body)
  let scheme = call_613504.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613504.url(scheme.get, call_613504.host, call_613504.base,
                         call_613504.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613504, url, valid)

proc call*(call_613505: Call_GetCreateAutoScalingGroup_613467; MaxSize: int;
          AutoScalingGroupName: string; MinSize: int;
          MixedInstancesPolicyInstancesDistribution: string = "";
          LaunchTemplateLaunchTemplateName: string = "";
          LaunchConfigurationName: string = ""; HealthCheckGracePeriod: int = 0;
          MixedInstancesPolicyLaunchTemplate: string = ""; Tags: JsonNode = nil;
          NewInstancesProtectedFromScaleIn: bool = false;
          AvailabilityZones: JsonNode = nil; HealthCheckType: string = "";
          TerminationPolicies: JsonNode = nil; InstanceId: string = "";
          DesiredCapacity: int = 0; LifecycleHookSpecificationList: JsonNode = nil;
          DefaultCooldown: int = 0; TargetGroupARNs: JsonNode = nil;
          Action: string = "CreateAutoScalingGroup"; PlacementGroup: string = "";
          LaunchTemplateVersion: string = ""; MaxInstanceLifetime: int = 0;
          Version: string = "2011-01-01"; VPCZoneIdentifier: string = "";
          LoadBalancerNames: JsonNode = nil; ServiceLinkedRoleARN: string = "";
          LaunchTemplateLaunchTemplateId: string = ""): Recallable =
  ## getCreateAutoScalingGroup
  ## <p>Creates an Auto Scaling group with the specified name and attributes.</p> <p>If you exceed your maximum limit of Auto Scaling groups, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MixedInstancesPolicyInstancesDistribution: string
  ##                                            : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified, the value for each parameter in <code>InstancesDistribution</code> uses a default value.</p>
  ##   LaunchTemplateLaunchTemplateName: string
  ##                                   : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   MaxSize: int (required)
  ##          : The maximum size of the group.
  ##   LaunchConfigurationName: string
  ##                          : <p>The name of the launch configuration.</p> <p>If you do not specify <code>LaunchConfigurationName</code>, you must specify one of the following parameters: <code>InstanceId</code>, <code>LaunchTemplate</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   HealthCheckGracePeriod: int
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. During this time, any health check failures for the instance are ignored. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   MixedInstancesPolicyLaunchTemplate: string
  ##                                     : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   Tags: JArray
  ##       : <p>One or more tags.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   NewInstancesProtectedFromScaleIn: bool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AvailabilityZones: JArray
  ##                    : <p>One or more Availability Zones for the group. This parameter is optional if you specify one or more subnets for <code>VPCZoneIdentifier</code>.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into EC2-Classic.</p>
  ##   HealthCheckType: string
  ##                  : <p>The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. The default value is <code>EC2</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   TerminationPolicies: JArray
  ##                      : <p>One or more termination policies used to select the instance to terminate. These policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   InstanceId: string
  ##             : <p>The ID of the instance used to create a launch configuration for the group.</p> <p>When you specify an ID of an instance, Amazon EC2 Auto Scaling creates a new launch configuration and associates it with the group. This launch configuration derives its attributes from the specified instance, except for the block device mapping.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-from-instance.html">Create an Auto Scaling Group Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You must specify one of the following parameters in your request: <code>LaunchConfigurationName</code>, <code>LaunchTemplate</code>, <code>InstanceId</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   DesiredCapacity: int
  ##                  : The number of Amazon EC2 instances that the Auto Scaling group attempts to maintain. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group. If you do not specify a desired capacity, the default is the minimum size of the group.
  ##   LifecycleHookSpecificationList: JArray
  ##                                 : One or more lifecycle hooks.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group. This name must be unique per Region per account.
  ##   DefaultCooldown: int
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   TargetGroupARNs: JArray
  ##                  : <p>The Amazon Resource Names (ARN) of the target groups to associate with the Auto Scaling group. Instances are registered as targets in a target group, and traffic is routed to the target group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   MinSize: int (required)
  ##          : The minimum size of the group.
  ##   PlacementGroup: string
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   LaunchTemplateVersion: string
  ##                        : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   MaxInstanceLifetime: int
  ##                      : <p>The maximum amount of time, in seconds, that an instance can be in service.</p> <p>Valid Range: Minimum value of 604800.</p>
  ##   Version: string (required)
  ##   VPCZoneIdentifier: string
  ##                    : <p>A comma-separated list of subnet IDs for your virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into a VPC.</p>
  ##   LoadBalancerNames: JArray
  ##                    : <p>A list of Classic Load Balancers associated with this Auto Scaling group. For Application Load Balancers and Network Load Balancers, specify a list of target groups using the <code>TargetGroupARNs</code> property instead.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   ServiceLinkedRoleARN: string
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. By default, Amazon EC2 Auto Scaling uses a service-linked role named AWSServiceRoleForAutoScaling, which it creates if it does not exist. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   LaunchTemplateLaunchTemplateId: string
  ##                                 : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  var query_613506 = newJObject()
  add(query_613506, "MixedInstancesPolicy.InstancesDistribution",
      newJString(MixedInstancesPolicyInstancesDistribution))
  add(query_613506, "LaunchTemplate.LaunchTemplateName",
      newJString(LaunchTemplateLaunchTemplateName))
  add(query_613506, "MaxSize", newJInt(MaxSize))
  add(query_613506, "LaunchConfigurationName", newJString(LaunchConfigurationName))
  add(query_613506, "HealthCheckGracePeriod", newJInt(HealthCheckGracePeriod))
  add(query_613506, "MixedInstancesPolicy.LaunchTemplate",
      newJString(MixedInstancesPolicyLaunchTemplate))
  if Tags != nil:
    query_613506.add "Tags", Tags
  add(query_613506, "NewInstancesProtectedFromScaleIn",
      newJBool(NewInstancesProtectedFromScaleIn))
  if AvailabilityZones != nil:
    query_613506.add "AvailabilityZones", AvailabilityZones
  add(query_613506, "HealthCheckType", newJString(HealthCheckType))
  if TerminationPolicies != nil:
    query_613506.add "TerminationPolicies", TerminationPolicies
  add(query_613506, "InstanceId", newJString(InstanceId))
  add(query_613506, "DesiredCapacity", newJInt(DesiredCapacity))
  if LifecycleHookSpecificationList != nil:
    query_613506.add "LifecycleHookSpecificationList",
                    LifecycleHookSpecificationList
  add(query_613506, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_613506, "DefaultCooldown", newJInt(DefaultCooldown))
  if TargetGroupARNs != nil:
    query_613506.add "TargetGroupARNs", TargetGroupARNs
  add(query_613506, "Action", newJString(Action))
  add(query_613506, "MinSize", newJInt(MinSize))
  add(query_613506, "PlacementGroup", newJString(PlacementGroup))
  add(query_613506, "LaunchTemplate.Version", newJString(LaunchTemplateVersion))
  add(query_613506, "MaxInstanceLifetime", newJInt(MaxInstanceLifetime))
  add(query_613506, "Version", newJString(Version))
  add(query_613506, "VPCZoneIdentifier", newJString(VPCZoneIdentifier))
  if LoadBalancerNames != nil:
    query_613506.add "LoadBalancerNames", LoadBalancerNames
  add(query_613506, "ServiceLinkedRoleARN", newJString(ServiceLinkedRoleARN))
  add(query_613506, "LaunchTemplate.LaunchTemplateId",
      newJString(LaunchTemplateLaunchTemplateId))
  result = call_613505.call(nil, query_613506, nil, nil, nil)

var getCreateAutoScalingGroup* = Call_GetCreateAutoScalingGroup_613467(
    name: "getCreateAutoScalingGroup", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=CreateAutoScalingGroup",
    validator: validate_GetCreateAutoScalingGroup_613468, base: "/",
    url: url_GetCreateAutoScalingGroup_613469,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateLaunchConfiguration_613581 = ref object of OpenApiRestCall_612658
proc url_PostCreateLaunchConfiguration_613583(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateLaunchConfiguration_613582(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a launch configuration.</p> <p>If you exceed your maximum limit of launch configurations, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html">Launch Configurations</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613584 = query.getOrDefault("Action")
  valid_613584 = validateParameter(valid_613584, JString, required = true, default = newJString(
      "CreateLaunchConfiguration"))
  if valid_613584 != nil:
    section.add "Action", valid_613584
  var valid_613585 = query.getOrDefault("Version")
  valid_613585 = validateParameter(valid_613585, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613585 != nil:
    section.add "Version", valid_613585
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613586 = header.getOrDefault("X-Amz-Signature")
  valid_613586 = validateParameter(valid_613586, JString, required = false,
                                 default = nil)
  if valid_613586 != nil:
    section.add "X-Amz-Signature", valid_613586
  var valid_613587 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613587 = validateParameter(valid_613587, JString, required = false,
                                 default = nil)
  if valid_613587 != nil:
    section.add "X-Amz-Content-Sha256", valid_613587
  var valid_613588 = header.getOrDefault("X-Amz-Date")
  valid_613588 = validateParameter(valid_613588, JString, required = false,
                                 default = nil)
  if valid_613588 != nil:
    section.add "X-Amz-Date", valid_613588
  var valid_613589 = header.getOrDefault("X-Amz-Credential")
  valid_613589 = validateParameter(valid_613589, JString, required = false,
                                 default = nil)
  if valid_613589 != nil:
    section.add "X-Amz-Credential", valid_613589
  var valid_613590 = header.getOrDefault("X-Amz-Security-Token")
  valid_613590 = validateParameter(valid_613590, JString, required = false,
                                 default = nil)
  if valid_613590 != nil:
    section.add "X-Amz-Security-Token", valid_613590
  var valid_613591 = header.getOrDefault("X-Amz-Algorithm")
  valid_613591 = validateParameter(valid_613591, JString, required = false,
                                 default = nil)
  if valid_613591 != nil:
    section.add "X-Amz-Algorithm", valid_613591
  var valid_613592 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613592 = validateParameter(valid_613592, JString, required = false,
                                 default = nil)
  if valid_613592 != nil:
    section.add "X-Amz-SignedHeaders", valid_613592
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserData: JString
  ##           : The Base64-encoded user data to make available to the launched EC2 instances. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance Metadata and User Data</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   InstanceType: JString
  ##               : <p>Specifies the instance type of the EC2 instance.</p> <p>For information about available instance types, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes">Available Instance Types</a> in the <i>Amazon EC2 User Guide for Linux Instances.</i> </p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>InstanceType</code>.</p>
  ##   SecurityGroups: JArray
  ##                 : <p>A list that contains the security groups to assign to the instances in the Auto Scaling group.</p> <p>[EC2-VPC] Specify the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security Groups for Your VPC</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>[EC2-Classic] Specify either the security group names or the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon EC2 Security Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
  ##   KeyName: JString
  ##          : The name of the key pair. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Amazon EC2 Key Pairs</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   SpotPrice: JString
  ##            : <p>The maximum hourly price to be paid for any Spot Instance launched to fulfill the request. Spot Instances are launched when the price you specify exceeds the current Spot price. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-launch-spot-instances.html">Launching Spot Instances in Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <note> <p>When you change your maximum price by creating a new launch configuration, running instances will continue to run as long as the maximum price for those running instances is higher than the current Spot price.</p> </note>
  ##   ClassicLinkVPCId: JString
  ##                   : <p>The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>This parameter can only be used if you are launching EC2-Classic instances.</p>
  ##   PlacementTenancy: JString
  ##                   : <p>The tenancy of the instance. An instance with <code>dedicated</code> tenancy runs on isolated, single-tenant hardware and can only be launched into a VPC.</p> <p>To launch dedicated instances into a shared tenancy VPC (a VPC with the instance placement tenancy attribute set to <code>default</code>), you must set the value of this parameter to <code>dedicated</code>.</p> <p>If you specify <code>PlacementTenancy</code>, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-vpc-tenancy">Instance Placement Tenancy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Valid Values: <code>default</code> | <code>dedicated</code> </p>
  ##   KernelId: JString
  ##           : The ID of the kernel associated with the AMI.
  ##   BlockDeviceMappings: JArray
  ##                      : A block device mapping, which specifies the block devices for the instance. You can specify virtual devices and EBS volumes. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html">Block Device Mapping</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   ClassicLinkVPCSecurityGroups: JArray
  ##                               : <p>The IDs of one or more security groups for the specified ClassicLink-enabled VPC. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify the <code>ClassicLinkVPCId</code> parameter, you must specify this parameter.</p>
  ##   InstanceId: JString
  ##             : <p>The ID of the instance to use to create the launch configuration. The new launch configuration derives attributes from the instance, except for the block device mapping.</p> <p>To create a launch configuration with a block device mapping or override any other instance attributes, specify them as part of the same request.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-lc-with-instanceID.html">Create a Launch Configuration Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify both <code>ImageId</code> and <code>InstanceType</code>.</p>
  ##   AssociatePublicIpAddress: JBool
  ##                           : <p>For Auto Scaling groups that are running in a virtual private cloud (VPC), specifies whether to assign a public IP address to the group's instances. If you specify <code>true</code>, each instance in the Auto Scaling group receives a unique public IP address. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html">Launching Auto Scaling Instances in a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify this parameter, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <note> <p>If the instance is launched into a default subnet, the default is to assign a public IP address, unless you disabled the option to assign a public IP address on the subnet. If the instance is launched into a nondefault subnet, the default is not to assign a public IP address, unless you enabled the option to assign a public IP address on the subnet.</p> </note>
  ##   EbsOptimized: JBool
  ##               : <p>Specifies whether the launch configuration is optimized for EBS I/O (<code>true</code>) or not (<code>false</code>). The optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization is not available with all instance types. Additional fees are incurred when you enable EBS optimization for an instance type that is not EBS-optimized by default. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html">Amazon EBS-Optimized Instances</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>The default value is <code>false</code>.</p>
  ##   RamdiskId: JString
  ##            : The ID of the RAM disk to select.
  ##   LaunchConfigurationName: JString (required)
  ##                          : The name of the launch configuration. This name must be unique per Region per account.
  ##   ImageId: JString
  ##          : <p>The ID of the Amazon Machine Image (AMI) that was assigned during registration. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html">Finding an AMI</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>ImageId</code>.</p>
  ##   IamInstanceProfile: JString
  ##                     : <p>The name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/us-iam-role.html">IAM Role for Applications That Run on Amazon EC2 Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   InstanceMonitoring.Enabled: JString
  ##                             : Describes whether detailed monitoring is enabled for the Auto Scaling instances.
  ## If <code>true</code>, detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
  section = newJObject()
  var valid_613593 = formData.getOrDefault("UserData")
  valid_613593 = validateParameter(valid_613593, JString, required = false,
                                 default = nil)
  if valid_613593 != nil:
    section.add "UserData", valid_613593
  var valid_613594 = formData.getOrDefault("InstanceType")
  valid_613594 = validateParameter(valid_613594, JString, required = false,
                                 default = nil)
  if valid_613594 != nil:
    section.add "InstanceType", valid_613594
  var valid_613595 = formData.getOrDefault("SecurityGroups")
  valid_613595 = validateParameter(valid_613595, JArray, required = false,
                                 default = nil)
  if valid_613595 != nil:
    section.add "SecurityGroups", valid_613595
  var valid_613596 = formData.getOrDefault("KeyName")
  valid_613596 = validateParameter(valid_613596, JString, required = false,
                                 default = nil)
  if valid_613596 != nil:
    section.add "KeyName", valid_613596
  var valid_613597 = formData.getOrDefault("SpotPrice")
  valid_613597 = validateParameter(valid_613597, JString, required = false,
                                 default = nil)
  if valid_613597 != nil:
    section.add "SpotPrice", valid_613597
  var valid_613598 = formData.getOrDefault("ClassicLinkVPCId")
  valid_613598 = validateParameter(valid_613598, JString, required = false,
                                 default = nil)
  if valid_613598 != nil:
    section.add "ClassicLinkVPCId", valid_613598
  var valid_613599 = formData.getOrDefault("PlacementTenancy")
  valid_613599 = validateParameter(valid_613599, JString, required = false,
                                 default = nil)
  if valid_613599 != nil:
    section.add "PlacementTenancy", valid_613599
  var valid_613600 = formData.getOrDefault("KernelId")
  valid_613600 = validateParameter(valid_613600, JString, required = false,
                                 default = nil)
  if valid_613600 != nil:
    section.add "KernelId", valid_613600
  var valid_613601 = formData.getOrDefault("BlockDeviceMappings")
  valid_613601 = validateParameter(valid_613601, JArray, required = false,
                                 default = nil)
  if valid_613601 != nil:
    section.add "BlockDeviceMappings", valid_613601
  var valid_613602 = formData.getOrDefault("ClassicLinkVPCSecurityGroups")
  valid_613602 = validateParameter(valid_613602, JArray, required = false,
                                 default = nil)
  if valid_613602 != nil:
    section.add "ClassicLinkVPCSecurityGroups", valid_613602
  var valid_613603 = formData.getOrDefault("InstanceId")
  valid_613603 = validateParameter(valid_613603, JString, required = false,
                                 default = nil)
  if valid_613603 != nil:
    section.add "InstanceId", valid_613603
  var valid_613604 = formData.getOrDefault("AssociatePublicIpAddress")
  valid_613604 = validateParameter(valid_613604, JBool, required = false, default = nil)
  if valid_613604 != nil:
    section.add "AssociatePublicIpAddress", valid_613604
  var valid_613605 = formData.getOrDefault("EbsOptimized")
  valid_613605 = validateParameter(valid_613605, JBool, required = false, default = nil)
  if valid_613605 != nil:
    section.add "EbsOptimized", valid_613605
  var valid_613606 = formData.getOrDefault("RamdiskId")
  valid_613606 = validateParameter(valid_613606, JString, required = false,
                                 default = nil)
  if valid_613606 != nil:
    section.add "RamdiskId", valid_613606
  assert formData != nil, "formData argument is necessary due to required `LaunchConfigurationName` field"
  var valid_613607 = formData.getOrDefault("LaunchConfigurationName")
  valid_613607 = validateParameter(valid_613607, JString, required = true,
                                 default = nil)
  if valid_613607 != nil:
    section.add "LaunchConfigurationName", valid_613607
  var valid_613608 = formData.getOrDefault("ImageId")
  valid_613608 = validateParameter(valid_613608, JString, required = false,
                                 default = nil)
  if valid_613608 != nil:
    section.add "ImageId", valid_613608
  var valid_613609 = formData.getOrDefault("IamInstanceProfile")
  valid_613609 = validateParameter(valid_613609, JString, required = false,
                                 default = nil)
  if valid_613609 != nil:
    section.add "IamInstanceProfile", valid_613609
  var valid_613610 = formData.getOrDefault("InstanceMonitoring.Enabled")
  valid_613610 = validateParameter(valid_613610, JString, required = false,
                                 default = nil)
  if valid_613610 != nil:
    section.add "InstanceMonitoring.Enabled", valid_613610
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613611: Call_PostCreateLaunchConfiguration_613581; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a launch configuration.</p> <p>If you exceed your maximum limit of launch configurations, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html">Launch Configurations</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_613611.validator(path, query, header, formData, body)
  let scheme = call_613611.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613611.url(scheme.get, call_613611.host, call_613611.base,
                         call_613611.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613611, url, valid)

proc call*(call_613612: Call_PostCreateLaunchConfiguration_613581;
          LaunchConfigurationName: string; UserData: string = "";
          InstanceType: string = ""; SecurityGroups: JsonNode = nil;
          KeyName: string = ""; SpotPrice: string = ""; ClassicLinkVPCId: string = "";
          PlacementTenancy: string = ""; KernelId: string = "";
          BlockDeviceMappings: JsonNode = nil;
          ClassicLinkVPCSecurityGroups: JsonNode = nil; InstanceId: string = "";
          Action: string = "CreateLaunchConfiguration";
          AssociatePublicIpAddress: bool = false; EbsOptimized: bool = false;
          RamdiskId: string = ""; ImageId: string = ""; Version: string = "2011-01-01";
          IamInstanceProfile: string = ""; InstanceMonitoringEnabled: string = ""): Recallable =
  ## postCreateLaunchConfiguration
  ## <p>Creates a launch configuration.</p> <p>If you exceed your maximum limit of launch configurations, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html">Launch Configurations</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   UserData: string
  ##           : The Base64-encoded user data to make available to the launched EC2 instances. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance Metadata and User Data</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   InstanceType: string
  ##               : <p>Specifies the instance type of the EC2 instance.</p> <p>For information about available instance types, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes">Available Instance Types</a> in the <i>Amazon EC2 User Guide for Linux Instances.</i> </p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>InstanceType</code>.</p>
  ##   SecurityGroups: JArray
  ##                 : <p>A list that contains the security groups to assign to the instances in the Auto Scaling group.</p> <p>[EC2-VPC] Specify the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security Groups for Your VPC</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>[EC2-Classic] Specify either the security group names or the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon EC2 Security Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
  ##   KeyName: string
  ##          : The name of the key pair. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Amazon EC2 Key Pairs</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   SpotPrice: string
  ##            : <p>The maximum hourly price to be paid for any Spot Instance launched to fulfill the request. Spot Instances are launched when the price you specify exceeds the current Spot price. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-launch-spot-instances.html">Launching Spot Instances in Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <note> <p>When you change your maximum price by creating a new launch configuration, running instances will continue to run as long as the maximum price for those running instances is higher than the current Spot price.</p> </note>
  ##   ClassicLinkVPCId: string
  ##                   : <p>The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>This parameter can only be used if you are launching EC2-Classic instances.</p>
  ##   PlacementTenancy: string
  ##                   : <p>The tenancy of the instance. An instance with <code>dedicated</code> tenancy runs on isolated, single-tenant hardware and can only be launched into a VPC.</p> <p>To launch dedicated instances into a shared tenancy VPC (a VPC with the instance placement tenancy attribute set to <code>default</code>), you must set the value of this parameter to <code>dedicated</code>.</p> <p>If you specify <code>PlacementTenancy</code>, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-vpc-tenancy">Instance Placement Tenancy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Valid Values: <code>default</code> | <code>dedicated</code> </p>
  ##   KernelId: string
  ##           : The ID of the kernel associated with the AMI.
  ##   BlockDeviceMappings: JArray
  ##                      : A block device mapping, which specifies the block devices for the instance. You can specify virtual devices and EBS volumes. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html">Block Device Mapping</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   ClassicLinkVPCSecurityGroups: JArray
  ##                               : <p>The IDs of one or more security groups for the specified ClassicLink-enabled VPC. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify the <code>ClassicLinkVPCId</code> parameter, you must specify this parameter.</p>
  ##   InstanceId: string
  ##             : <p>The ID of the instance to use to create the launch configuration. The new launch configuration derives attributes from the instance, except for the block device mapping.</p> <p>To create a launch configuration with a block device mapping or override any other instance attributes, specify them as part of the same request.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-lc-with-instanceID.html">Create a Launch Configuration Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify both <code>ImageId</code> and <code>InstanceType</code>.</p>
  ##   Action: string (required)
  ##   AssociatePublicIpAddress: bool
  ##                           : <p>For Auto Scaling groups that are running in a virtual private cloud (VPC), specifies whether to assign a public IP address to the group's instances. If you specify <code>true</code>, each instance in the Auto Scaling group receives a unique public IP address. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html">Launching Auto Scaling Instances in a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify this parameter, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <note> <p>If the instance is launched into a default subnet, the default is to assign a public IP address, unless you disabled the option to assign a public IP address on the subnet. If the instance is launched into a nondefault subnet, the default is not to assign a public IP address, unless you enabled the option to assign a public IP address on the subnet.</p> </note>
  ##   EbsOptimized: bool
  ##               : <p>Specifies whether the launch configuration is optimized for EBS I/O (<code>true</code>) or not (<code>false</code>). The optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization is not available with all instance types. Additional fees are incurred when you enable EBS optimization for an instance type that is not EBS-optimized by default. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html">Amazon EBS-Optimized Instances</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>The default value is <code>false</code>.</p>
  ##   RamdiskId: string
  ##            : The ID of the RAM disk to select.
  ##   LaunchConfigurationName: string (required)
  ##                          : The name of the launch configuration. This name must be unique per Region per account.
  ##   ImageId: string
  ##          : <p>The ID of the Amazon Machine Image (AMI) that was assigned during registration. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html">Finding an AMI</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>ImageId</code>.</p>
  ##   Version: string (required)
  ##   IamInstanceProfile: string
  ##                     : <p>The name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/us-iam-role.html">IAM Role for Applications That Run on Amazon EC2 Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   InstanceMonitoringEnabled: string
  ##                            : Describes whether detailed monitoring is enabled for the Auto Scaling instances.
  ## If <code>true</code>, detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
  var query_613613 = newJObject()
  var formData_613614 = newJObject()
  add(formData_613614, "UserData", newJString(UserData))
  add(formData_613614, "InstanceType", newJString(InstanceType))
  if SecurityGroups != nil:
    formData_613614.add "SecurityGroups", SecurityGroups
  add(formData_613614, "KeyName", newJString(KeyName))
  add(formData_613614, "SpotPrice", newJString(SpotPrice))
  add(formData_613614, "ClassicLinkVPCId", newJString(ClassicLinkVPCId))
  add(formData_613614, "PlacementTenancy", newJString(PlacementTenancy))
  add(formData_613614, "KernelId", newJString(KernelId))
  if BlockDeviceMappings != nil:
    formData_613614.add "BlockDeviceMappings", BlockDeviceMappings
  if ClassicLinkVPCSecurityGroups != nil:
    formData_613614.add "ClassicLinkVPCSecurityGroups",
                       ClassicLinkVPCSecurityGroups
  add(formData_613614, "InstanceId", newJString(InstanceId))
  add(query_613613, "Action", newJString(Action))
  add(formData_613614, "AssociatePublicIpAddress",
      newJBool(AssociatePublicIpAddress))
  add(formData_613614, "EbsOptimized", newJBool(EbsOptimized))
  add(formData_613614, "RamdiskId", newJString(RamdiskId))
  add(formData_613614, "LaunchConfigurationName",
      newJString(LaunchConfigurationName))
  add(formData_613614, "ImageId", newJString(ImageId))
  add(query_613613, "Version", newJString(Version))
  add(formData_613614, "IamInstanceProfile", newJString(IamInstanceProfile))
  add(formData_613614, "InstanceMonitoring.Enabled",
      newJString(InstanceMonitoringEnabled))
  result = call_613612.call(nil, query_613613, nil, formData_613614, nil)

var postCreateLaunchConfiguration* = Call_PostCreateLaunchConfiguration_613581(
    name: "postCreateLaunchConfiguration", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=CreateLaunchConfiguration",
    validator: validate_PostCreateLaunchConfiguration_613582, base: "/",
    url: url_PostCreateLaunchConfiguration_613583,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateLaunchConfiguration_613548 = ref object of OpenApiRestCall_612658
proc url_GetCreateLaunchConfiguration_613550(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateLaunchConfiguration_613549(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a launch configuration.</p> <p>If you exceed your maximum limit of launch configurations, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html">Launch Configurations</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   KeyName: JString
  ##          : The name of the key pair. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Amazon EC2 Key Pairs</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   PlacementTenancy: JString
  ##                   : <p>The tenancy of the instance. An instance with <code>dedicated</code> tenancy runs on isolated, single-tenant hardware and can only be launched into a VPC.</p> <p>To launch dedicated instances into a shared tenancy VPC (a VPC with the instance placement tenancy attribute set to <code>default</code>), you must set the value of this parameter to <code>dedicated</code>.</p> <p>If you specify <code>PlacementTenancy</code>, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-vpc-tenancy">Instance Placement Tenancy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Valid Values: <code>default</code> | <code>dedicated</code> </p>
  ##   ImageId: JString
  ##          : <p>The ID of the Amazon Machine Image (AMI) that was assigned during registration. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html">Finding an AMI</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>ImageId</code>.</p>
  ##   LaunchConfigurationName: JString (required)
  ##                          : The name of the launch configuration. This name must be unique per Region per account.
  ##   EbsOptimized: JBool
  ##               : <p>Specifies whether the launch configuration is optimized for EBS I/O (<code>true</code>) or not (<code>false</code>). The optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization is not available with all instance types. Additional fees are incurred when you enable EBS optimization for an instance type that is not EBS-optimized by default. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html">Amazon EBS-Optimized Instances</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>The default value is <code>false</code>.</p>
  ##   BlockDeviceMappings: JArray
  ##                      : A block device mapping, which specifies the block devices for the instance. You can specify virtual devices and EBS volumes. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html">Block Device Mapping</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   UserData: JString
  ##           : The Base64-encoded user data to make available to the launched EC2 instances. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance Metadata and User Data</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   IamInstanceProfile: JString
  ##                     : <p>The name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/us-iam-role.html">IAM Role for Applications That Run on Amazon EC2 Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   InstanceMonitoring.Enabled: JString
  ##                             : Describes whether detailed monitoring is enabled for the Auto Scaling instances.
  ## If <code>true</code>, detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
  ##   AssociatePublicIpAddress: JBool
  ##                           : <p>For Auto Scaling groups that are running in a virtual private cloud (VPC), specifies whether to assign a public IP address to the group's instances. If you specify <code>true</code>, each instance in the Auto Scaling group receives a unique public IP address. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html">Launching Auto Scaling Instances in a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify this parameter, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <note> <p>If the instance is launched into a default subnet, the default is to assign a public IP address, unless you disabled the option to assign a public IP address on the subnet. If the instance is launched into a nondefault subnet, the default is not to assign a public IP address, unless you enabled the option to assign a public IP address on the subnet.</p> </note>
  ##   InstanceId: JString
  ##             : <p>The ID of the instance to use to create the launch configuration. The new launch configuration derives attributes from the instance, except for the block device mapping.</p> <p>To create a launch configuration with a block device mapping or override any other instance attributes, specify them as part of the same request.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-lc-with-instanceID.html">Create a Launch Configuration Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify both <code>ImageId</code> and <code>InstanceType</code>.</p>
  ##   SecurityGroups: JArray
  ##                 : <p>A list that contains the security groups to assign to the instances in the Auto Scaling group.</p> <p>[EC2-VPC] Specify the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security Groups for Your VPC</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>[EC2-Classic] Specify either the security group names or the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon EC2 Security Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
  ##   ClassicLinkVPCSecurityGroups: JArray
  ##                               : <p>The IDs of one or more security groups for the specified ClassicLink-enabled VPC. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify the <code>ClassicLinkVPCId</code> parameter, you must specify this parameter.</p>
  ##   RamdiskId: JString
  ##            : The ID of the RAM disk to select.
  ##   KernelId: JString
  ##           : The ID of the kernel associated with the AMI.
  ##   ClassicLinkVPCId: JString
  ##                   : <p>The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>This parameter can only be used if you are launching EC2-Classic instances.</p>
  ##   InstanceType: JString
  ##               : <p>Specifies the instance type of the EC2 instance.</p> <p>For information about available instance types, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes">Available Instance Types</a> in the <i>Amazon EC2 User Guide for Linux Instances.</i> </p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>InstanceType</code>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   SpotPrice: JString
  ##            : <p>The maximum hourly price to be paid for any Spot Instance launched to fulfill the request. Spot Instances are launched when the price you specify exceeds the current Spot price. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-launch-spot-instances.html">Launching Spot Instances in Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <note> <p>When you change your maximum price by creating a new launch configuration, running instances will continue to run as long as the maximum price for those running instances is higher than the current Spot price.</p> </note>
  section = newJObject()
  var valid_613551 = query.getOrDefault("KeyName")
  valid_613551 = validateParameter(valid_613551, JString, required = false,
                                 default = nil)
  if valid_613551 != nil:
    section.add "KeyName", valid_613551
  var valid_613552 = query.getOrDefault("PlacementTenancy")
  valid_613552 = validateParameter(valid_613552, JString, required = false,
                                 default = nil)
  if valid_613552 != nil:
    section.add "PlacementTenancy", valid_613552
  var valid_613553 = query.getOrDefault("ImageId")
  valid_613553 = validateParameter(valid_613553, JString, required = false,
                                 default = nil)
  if valid_613553 != nil:
    section.add "ImageId", valid_613553
  assert query != nil, "query argument is necessary due to required `LaunchConfigurationName` field"
  var valid_613554 = query.getOrDefault("LaunchConfigurationName")
  valid_613554 = validateParameter(valid_613554, JString, required = true,
                                 default = nil)
  if valid_613554 != nil:
    section.add "LaunchConfigurationName", valid_613554
  var valid_613555 = query.getOrDefault("EbsOptimized")
  valid_613555 = validateParameter(valid_613555, JBool, required = false, default = nil)
  if valid_613555 != nil:
    section.add "EbsOptimized", valid_613555
  var valid_613556 = query.getOrDefault("BlockDeviceMappings")
  valid_613556 = validateParameter(valid_613556, JArray, required = false,
                                 default = nil)
  if valid_613556 != nil:
    section.add "BlockDeviceMappings", valid_613556
  var valid_613557 = query.getOrDefault("UserData")
  valid_613557 = validateParameter(valid_613557, JString, required = false,
                                 default = nil)
  if valid_613557 != nil:
    section.add "UserData", valid_613557
  var valid_613558 = query.getOrDefault("IamInstanceProfile")
  valid_613558 = validateParameter(valid_613558, JString, required = false,
                                 default = nil)
  if valid_613558 != nil:
    section.add "IamInstanceProfile", valid_613558
  var valid_613559 = query.getOrDefault("InstanceMonitoring.Enabled")
  valid_613559 = validateParameter(valid_613559, JString, required = false,
                                 default = nil)
  if valid_613559 != nil:
    section.add "InstanceMonitoring.Enabled", valid_613559
  var valid_613560 = query.getOrDefault("AssociatePublicIpAddress")
  valid_613560 = validateParameter(valid_613560, JBool, required = false, default = nil)
  if valid_613560 != nil:
    section.add "AssociatePublicIpAddress", valid_613560
  var valid_613561 = query.getOrDefault("InstanceId")
  valid_613561 = validateParameter(valid_613561, JString, required = false,
                                 default = nil)
  if valid_613561 != nil:
    section.add "InstanceId", valid_613561
  var valid_613562 = query.getOrDefault("SecurityGroups")
  valid_613562 = validateParameter(valid_613562, JArray, required = false,
                                 default = nil)
  if valid_613562 != nil:
    section.add "SecurityGroups", valid_613562
  var valid_613563 = query.getOrDefault("ClassicLinkVPCSecurityGroups")
  valid_613563 = validateParameter(valid_613563, JArray, required = false,
                                 default = nil)
  if valid_613563 != nil:
    section.add "ClassicLinkVPCSecurityGroups", valid_613563
  var valid_613564 = query.getOrDefault("RamdiskId")
  valid_613564 = validateParameter(valid_613564, JString, required = false,
                                 default = nil)
  if valid_613564 != nil:
    section.add "RamdiskId", valid_613564
  var valid_613565 = query.getOrDefault("KernelId")
  valid_613565 = validateParameter(valid_613565, JString, required = false,
                                 default = nil)
  if valid_613565 != nil:
    section.add "KernelId", valid_613565
  var valid_613566 = query.getOrDefault("ClassicLinkVPCId")
  valid_613566 = validateParameter(valid_613566, JString, required = false,
                                 default = nil)
  if valid_613566 != nil:
    section.add "ClassicLinkVPCId", valid_613566
  var valid_613567 = query.getOrDefault("InstanceType")
  valid_613567 = validateParameter(valid_613567, JString, required = false,
                                 default = nil)
  if valid_613567 != nil:
    section.add "InstanceType", valid_613567
  var valid_613568 = query.getOrDefault("Action")
  valid_613568 = validateParameter(valid_613568, JString, required = true, default = newJString(
      "CreateLaunchConfiguration"))
  if valid_613568 != nil:
    section.add "Action", valid_613568
  var valid_613569 = query.getOrDefault("Version")
  valid_613569 = validateParameter(valid_613569, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613569 != nil:
    section.add "Version", valid_613569
  var valid_613570 = query.getOrDefault("SpotPrice")
  valid_613570 = validateParameter(valid_613570, JString, required = false,
                                 default = nil)
  if valid_613570 != nil:
    section.add "SpotPrice", valid_613570
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613571 = header.getOrDefault("X-Amz-Signature")
  valid_613571 = validateParameter(valid_613571, JString, required = false,
                                 default = nil)
  if valid_613571 != nil:
    section.add "X-Amz-Signature", valid_613571
  var valid_613572 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613572 = validateParameter(valid_613572, JString, required = false,
                                 default = nil)
  if valid_613572 != nil:
    section.add "X-Amz-Content-Sha256", valid_613572
  var valid_613573 = header.getOrDefault("X-Amz-Date")
  valid_613573 = validateParameter(valid_613573, JString, required = false,
                                 default = nil)
  if valid_613573 != nil:
    section.add "X-Amz-Date", valid_613573
  var valid_613574 = header.getOrDefault("X-Amz-Credential")
  valid_613574 = validateParameter(valid_613574, JString, required = false,
                                 default = nil)
  if valid_613574 != nil:
    section.add "X-Amz-Credential", valid_613574
  var valid_613575 = header.getOrDefault("X-Amz-Security-Token")
  valid_613575 = validateParameter(valid_613575, JString, required = false,
                                 default = nil)
  if valid_613575 != nil:
    section.add "X-Amz-Security-Token", valid_613575
  var valid_613576 = header.getOrDefault("X-Amz-Algorithm")
  valid_613576 = validateParameter(valid_613576, JString, required = false,
                                 default = nil)
  if valid_613576 != nil:
    section.add "X-Amz-Algorithm", valid_613576
  var valid_613577 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613577 = validateParameter(valid_613577, JString, required = false,
                                 default = nil)
  if valid_613577 != nil:
    section.add "X-Amz-SignedHeaders", valid_613577
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613578: Call_GetCreateLaunchConfiguration_613548; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a launch configuration.</p> <p>If you exceed your maximum limit of launch configurations, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html">Launch Configurations</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_613578.validator(path, query, header, formData, body)
  let scheme = call_613578.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613578.url(scheme.get, call_613578.host, call_613578.base,
                         call_613578.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613578, url, valid)

proc call*(call_613579: Call_GetCreateLaunchConfiguration_613548;
          LaunchConfigurationName: string; KeyName: string = "";
          PlacementTenancy: string = ""; ImageId: string = "";
          EbsOptimized: bool = false; BlockDeviceMappings: JsonNode = nil;
          UserData: string = ""; IamInstanceProfile: string = "";
          InstanceMonitoringEnabled: string = "";
          AssociatePublicIpAddress: bool = false; InstanceId: string = "";
          SecurityGroups: JsonNode = nil;
          ClassicLinkVPCSecurityGroups: JsonNode = nil; RamdiskId: string = "";
          KernelId: string = ""; ClassicLinkVPCId: string = "";
          InstanceType: string = ""; Action: string = "CreateLaunchConfiguration";
          Version: string = "2011-01-01"; SpotPrice: string = ""): Recallable =
  ## getCreateLaunchConfiguration
  ## <p>Creates a launch configuration.</p> <p>If you exceed your maximum limit of launch configurations, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html">Launch Configurations</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   KeyName: string
  ##          : The name of the key pair. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Amazon EC2 Key Pairs</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   PlacementTenancy: string
  ##                   : <p>The tenancy of the instance. An instance with <code>dedicated</code> tenancy runs on isolated, single-tenant hardware and can only be launched into a VPC.</p> <p>To launch dedicated instances into a shared tenancy VPC (a VPC with the instance placement tenancy attribute set to <code>default</code>), you must set the value of this parameter to <code>dedicated</code>.</p> <p>If you specify <code>PlacementTenancy</code>, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-vpc-tenancy">Instance Placement Tenancy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Valid Values: <code>default</code> | <code>dedicated</code> </p>
  ##   ImageId: string
  ##          : <p>The ID of the Amazon Machine Image (AMI) that was assigned during registration. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html">Finding an AMI</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>ImageId</code>.</p>
  ##   LaunchConfigurationName: string (required)
  ##                          : The name of the launch configuration. This name must be unique per Region per account.
  ##   EbsOptimized: bool
  ##               : <p>Specifies whether the launch configuration is optimized for EBS I/O (<code>true</code>) or not (<code>false</code>). The optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization is not available with all instance types. Additional fees are incurred when you enable EBS optimization for an instance type that is not EBS-optimized by default. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html">Amazon EBS-Optimized Instances</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>The default value is <code>false</code>.</p>
  ##   BlockDeviceMappings: JArray
  ##                      : A block device mapping, which specifies the block devices for the instance. You can specify virtual devices and EBS volumes. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html">Block Device Mapping</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   UserData: string
  ##           : The Base64-encoded user data to make available to the launched EC2 instances. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance Metadata and User Data</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   IamInstanceProfile: string
  ##                     : <p>The name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/us-iam-role.html">IAM Role for Applications That Run on Amazon EC2 Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   InstanceMonitoringEnabled: string
  ##                            : Describes whether detailed monitoring is enabled for the Auto Scaling instances.
  ## If <code>true</code>, detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
  ##   AssociatePublicIpAddress: bool
  ##                           : <p>For Auto Scaling groups that are running in a virtual private cloud (VPC), specifies whether to assign a public IP address to the group's instances. If you specify <code>true</code>, each instance in the Auto Scaling group receives a unique public IP address. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html">Launching Auto Scaling Instances in a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify this parameter, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <note> <p>If the instance is launched into a default subnet, the default is to assign a public IP address, unless you disabled the option to assign a public IP address on the subnet. If the instance is launched into a nondefault subnet, the default is not to assign a public IP address, unless you enabled the option to assign a public IP address on the subnet.</p> </note>
  ##   InstanceId: string
  ##             : <p>The ID of the instance to use to create the launch configuration. The new launch configuration derives attributes from the instance, except for the block device mapping.</p> <p>To create a launch configuration with a block device mapping or override any other instance attributes, specify them as part of the same request.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-lc-with-instanceID.html">Create a Launch Configuration Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify both <code>ImageId</code> and <code>InstanceType</code>.</p>
  ##   SecurityGroups: JArray
  ##                 : <p>A list that contains the security groups to assign to the instances in the Auto Scaling group.</p> <p>[EC2-VPC] Specify the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security Groups for Your VPC</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>[EC2-Classic] Specify either the security group names or the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon EC2 Security Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
  ##   ClassicLinkVPCSecurityGroups: JArray
  ##                               : <p>The IDs of one or more security groups for the specified ClassicLink-enabled VPC. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify the <code>ClassicLinkVPCId</code> parameter, you must specify this parameter.</p>
  ##   RamdiskId: string
  ##            : The ID of the RAM disk to select.
  ##   KernelId: string
  ##           : The ID of the kernel associated with the AMI.
  ##   ClassicLinkVPCId: string
  ##                   : <p>The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>This parameter can only be used if you are launching EC2-Classic instances.</p>
  ##   InstanceType: string
  ##               : <p>Specifies the instance type of the EC2 instance.</p> <p>For information about available instance types, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes">Available Instance Types</a> in the <i>Amazon EC2 User Guide for Linux Instances.</i> </p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>InstanceType</code>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   SpotPrice: string
  ##            : <p>The maximum hourly price to be paid for any Spot Instance launched to fulfill the request. Spot Instances are launched when the price you specify exceeds the current Spot price. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-launch-spot-instances.html">Launching Spot Instances in Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <note> <p>When you change your maximum price by creating a new launch configuration, running instances will continue to run as long as the maximum price for those running instances is higher than the current Spot price.</p> </note>
  var query_613580 = newJObject()
  add(query_613580, "KeyName", newJString(KeyName))
  add(query_613580, "PlacementTenancy", newJString(PlacementTenancy))
  add(query_613580, "ImageId", newJString(ImageId))
  add(query_613580, "LaunchConfigurationName", newJString(LaunchConfigurationName))
  add(query_613580, "EbsOptimized", newJBool(EbsOptimized))
  if BlockDeviceMappings != nil:
    query_613580.add "BlockDeviceMappings", BlockDeviceMappings
  add(query_613580, "UserData", newJString(UserData))
  add(query_613580, "IamInstanceProfile", newJString(IamInstanceProfile))
  add(query_613580, "InstanceMonitoring.Enabled",
      newJString(InstanceMonitoringEnabled))
  add(query_613580, "AssociatePublicIpAddress", newJBool(AssociatePublicIpAddress))
  add(query_613580, "InstanceId", newJString(InstanceId))
  if SecurityGroups != nil:
    query_613580.add "SecurityGroups", SecurityGroups
  if ClassicLinkVPCSecurityGroups != nil:
    query_613580.add "ClassicLinkVPCSecurityGroups", ClassicLinkVPCSecurityGroups
  add(query_613580, "RamdiskId", newJString(RamdiskId))
  add(query_613580, "KernelId", newJString(KernelId))
  add(query_613580, "ClassicLinkVPCId", newJString(ClassicLinkVPCId))
  add(query_613580, "InstanceType", newJString(InstanceType))
  add(query_613580, "Action", newJString(Action))
  add(query_613580, "Version", newJString(Version))
  add(query_613580, "SpotPrice", newJString(SpotPrice))
  result = call_613579.call(nil, query_613580, nil, nil, nil)

var getCreateLaunchConfiguration* = Call_GetCreateLaunchConfiguration_613548(
    name: "getCreateLaunchConfiguration", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=CreateLaunchConfiguration",
    validator: validate_GetCreateLaunchConfiguration_613549, base: "/",
    url: url_GetCreateLaunchConfiguration_613550,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateOrUpdateTags_613631 = ref object of OpenApiRestCall_612658
proc url_PostCreateOrUpdateTags_613633(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateOrUpdateTags_613632(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates or updates tags for the specified Auto Scaling group.</p> <p>When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613634 = query.getOrDefault("Action")
  valid_613634 = validateParameter(valid_613634, JString, required = true,
                                 default = newJString("CreateOrUpdateTags"))
  if valid_613634 != nil:
    section.add "Action", valid_613634
  var valid_613635 = query.getOrDefault("Version")
  valid_613635 = validateParameter(valid_613635, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613635 != nil:
    section.add "Version", valid_613635
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613636 = header.getOrDefault("X-Amz-Signature")
  valid_613636 = validateParameter(valid_613636, JString, required = false,
                                 default = nil)
  if valid_613636 != nil:
    section.add "X-Amz-Signature", valid_613636
  var valid_613637 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613637 = validateParameter(valid_613637, JString, required = false,
                                 default = nil)
  if valid_613637 != nil:
    section.add "X-Amz-Content-Sha256", valid_613637
  var valid_613638 = header.getOrDefault("X-Amz-Date")
  valid_613638 = validateParameter(valid_613638, JString, required = false,
                                 default = nil)
  if valid_613638 != nil:
    section.add "X-Amz-Date", valid_613638
  var valid_613639 = header.getOrDefault("X-Amz-Credential")
  valid_613639 = validateParameter(valid_613639, JString, required = false,
                                 default = nil)
  if valid_613639 != nil:
    section.add "X-Amz-Credential", valid_613639
  var valid_613640 = header.getOrDefault("X-Amz-Security-Token")
  valid_613640 = validateParameter(valid_613640, JString, required = false,
                                 default = nil)
  if valid_613640 != nil:
    section.add "X-Amz-Security-Token", valid_613640
  var valid_613641 = header.getOrDefault("X-Amz-Algorithm")
  valid_613641 = validateParameter(valid_613641, JString, required = false,
                                 default = nil)
  if valid_613641 != nil:
    section.add "X-Amz-Algorithm", valid_613641
  var valid_613642 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613642 = validateParameter(valid_613642, JString, required = false,
                                 default = nil)
  if valid_613642 != nil:
    section.add "X-Amz-SignedHeaders", valid_613642
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray (required)
  ##       : One or more tags.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Tags` field"
  var valid_613643 = formData.getOrDefault("Tags")
  valid_613643 = validateParameter(valid_613643, JArray, required = true, default = nil)
  if valid_613643 != nil:
    section.add "Tags", valid_613643
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613644: Call_PostCreateOrUpdateTags_613631; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates or updates tags for the specified Auto Scaling group.</p> <p>When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_613644.validator(path, query, header, formData, body)
  let scheme = call_613644.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613644.url(scheme.get, call_613644.host, call_613644.base,
                         call_613644.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613644, url, valid)

proc call*(call_613645: Call_PostCreateOrUpdateTags_613631; Tags: JsonNode;
          Action: string = "CreateOrUpdateTags"; Version: string = "2011-01-01"): Recallable =
  ## postCreateOrUpdateTags
  ## <p>Creates or updates tags for the specified Auto Scaling group.</p> <p>When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   Tags: JArray (required)
  ##       : One or more tags.
  ##   Version: string (required)
  var query_613646 = newJObject()
  var formData_613647 = newJObject()
  add(query_613646, "Action", newJString(Action))
  if Tags != nil:
    formData_613647.add "Tags", Tags
  add(query_613646, "Version", newJString(Version))
  result = call_613645.call(nil, query_613646, nil, formData_613647, nil)

var postCreateOrUpdateTags* = Call_PostCreateOrUpdateTags_613631(
    name: "postCreateOrUpdateTags", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=CreateOrUpdateTags",
    validator: validate_PostCreateOrUpdateTags_613632, base: "/",
    url: url_PostCreateOrUpdateTags_613633, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateOrUpdateTags_613615 = ref object of OpenApiRestCall_612658
proc url_GetCreateOrUpdateTags_613617(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateOrUpdateTags_613616(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates or updates tags for the specified Auto Scaling group.</p> <p>When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : One or more tags.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_613618 = query.getOrDefault("Tags")
  valid_613618 = validateParameter(valid_613618, JArray, required = true, default = nil)
  if valid_613618 != nil:
    section.add "Tags", valid_613618
  var valid_613619 = query.getOrDefault("Action")
  valid_613619 = validateParameter(valid_613619, JString, required = true,
                                 default = newJString("CreateOrUpdateTags"))
  if valid_613619 != nil:
    section.add "Action", valid_613619
  var valid_613620 = query.getOrDefault("Version")
  valid_613620 = validateParameter(valid_613620, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613620 != nil:
    section.add "Version", valid_613620
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613621 = header.getOrDefault("X-Amz-Signature")
  valid_613621 = validateParameter(valid_613621, JString, required = false,
                                 default = nil)
  if valid_613621 != nil:
    section.add "X-Amz-Signature", valid_613621
  var valid_613622 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613622 = validateParameter(valid_613622, JString, required = false,
                                 default = nil)
  if valid_613622 != nil:
    section.add "X-Amz-Content-Sha256", valid_613622
  var valid_613623 = header.getOrDefault("X-Amz-Date")
  valid_613623 = validateParameter(valid_613623, JString, required = false,
                                 default = nil)
  if valid_613623 != nil:
    section.add "X-Amz-Date", valid_613623
  var valid_613624 = header.getOrDefault("X-Amz-Credential")
  valid_613624 = validateParameter(valid_613624, JString, required = false,
                                 default = nil)
  if valid_613624 != nil:
    section.add "X-Amz-Credential", valid_613624
  var valid_613625 = header.getOrDefault("X-Amz-Security-Token")
  valid_613625 = validateParameter(valid_613625, JString, required = false,
                                 default = nil)
  if valid_613625 != nil:
    section.add "X-Amz-Security-Token", valid_613625
  var valid_613626 = header.getOrDefault("X-Amz-Algorithm")
  valid_613626 = validateParameter(valid_613626, JString, required = false,
                                 default = nil)
  if valid_613626 != nil:
    section.add "X-Amz-Algorithm", valid_613626
  var valid_613627 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613627 = validateParameter(valid_613627, JString, required = false,
                                 default = nil)
  if valid_613627 != nil:
    section.add "X-Amz-SignedHeaders", valid_613627
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613628: Call_GetCreateOrUpdateTags_613615; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates or updates tags for the specified Auto Scaling group.</p> <p>When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_613628.validator(path, query, header, formData, body)
  let scheme = call_613628.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613628.url(scheme.get, call_613628.host, call_613628.base,
                         call_613628.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613628, url, valid)

proc call*(call_613629: Call_GetCreateOrUpdateTags_613615; Tags: JsonNode;
          Action: string = "CreateOrUpdateTags"; Version: string = "2011-01-01"): Recallable =
  ## getCreateOrUpdateTags
  ## <p>Creates or updates tags for the specified Auto Scaling group.</p> <p>When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Tags: JArray (required)
  ##       : One or more tags.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613630 = newJObject()
  if Tags != nil:
    query_613630.add "Tags", Tags
  add(query_613630, "Action", newJString(Action))
  add(query_613630, "Version", newJString(Version))
  result = call_613629.call(nil, query_613630, nil, nil, nil)

var getCreateOrUpdateTags* = Call_GetCreateOrUpdateTags_613615(
    name: "getCreateOrUpdateTags", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=CreateOrUpdateTags",
    validator: validate_GetCreateOrUpdateTags_613616, base: "/",
    url: url_GetCreateOrUpdateTags_613617, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteAutoScalingGroup_613665 = ref object of OpenApiRestCall_612658
proc url_PostDeleteAutoScalingGroup_613667(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteAutoScalingGroup_613666(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified Auto Scaling group.</p> <p>If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed.</p> <p>If the group has policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.</p> <p>To remove instances from the Auto Scaling group before deleting it, call <a>DetachInstances</a> with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.</p> <p>To terminate all instances before deleting the Auto Scaling group, call <a>UpdateAutoScalingGroup</a> and set the minimum size and desired capacity of the Auto Scaling group to zero.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613668 = query.getOrDefault("Action")
  valid_613668 = validateParameter(valid_613668, JString, required = true,
                                 default = newJString("DeleteAutoScalingGroup"))
  if valid_613668 != nil:
    section.add "Action", valid_613668
  var valid_613669 = query.getOrDefault("Version")
  valid_613669 = validateParameter(valid_613669, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613669 != nil:
    section.add "Version", valid_613669
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613670 = header.getOrDefault("X-Amz-Signature")
  valid_613670 = validateParameter(valid_613670, JString, required = false,
                                 default = nil)
  if valid_613670 != nil:
    section.add "X-Amz-Signature", valid_613670
  var valid_613671 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613671 = validateParameter(valid_613671, JString, required = false,
                                 default = nil)
  if valid_613671 != nil:
    section.add "X-Amz-Content-Sha256", valid_613671
  var valid_613672 = header.getOrDefault("X-Amz-Date")
  valid_613672 = validateParameter(valid_613672, JString, required = false,
                                 default = nil)
  if valid_613672 != nil:
    section.add "X-Amz-Date", valid_613672
  var valid_613673 = header.getOrDefault("X-Amz-Credential")
  valid_613673 = validateParameter(valid_613673, JString, required = false,
                                 default = nil)
  if valid_613673 != nil:
    section.add "X-Amz-Credential", valid_613673
  var valid_613674 = header.getOrDefault("X-Amz-Security-Token")
  valid_613674 = validateParameter(valid_613674, JString, required = false,
                                 default = nil)
  if valid_613674 != nil:
    section.add "X-Amz-Security-Token", valid_613674
  var valid_613675 = header.getOrDefault("X-Amz-Algorithm")
  valid_613675 = validateParameter(valid_613675, JString, required = false,
                                 default = nil)
  if valid_613675 != nil:
    section.add "X-Amz-Algorithm", valid_613675
  var valid_613676 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613676 = validateParameter(valid_613676, JString, required = false,
                                 default = nil)
  if valid_613676 != nil:
    section.add "X-Amz-SignedHeaders", valid_613676
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   ForceDelete: JBool
  ##              : Specifies that the group is to be deleted along with all instances associated with the group, without waiting for all instances to be terminated. This parameter also deletes any lifecycle actions associated with the group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_613677 = formData.getOrDefault("AutoScalingGroupName")
  valid_613677 = validateParameter(valid_613677, JString, required = true,
                                 default = nil)
  if valid_613677 != nil:
    section.add "AutoScalingGroupName", valid_613677
  var valid_613678 = formData.getOrDefault("ForceDelete")
  valid_613678 = validateParameter(valid_613678, JBool, required = false, default = nil)
  if valid_613678 != nil:
    section.add "ForceDelete", valid_613678
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613679: Call_PostDeleteAutoScalingGroup_613665; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified Auto Scaling group.</p> <p>If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed.</p> <p>If the group has policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.</p> <p>To remove instances from the Auto Scaling group before deleting it, call <a>DetachInstances</a> with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.</p> <p>To terminate all instances before deleting the Auto Scaling group, call <a>UpdateAutoScalingGroup</a> and set the minimum size and desired capacity of the Auto Scaling group to zero.</p>
  ## 
  let valid = call_613679.validator(path, query, header, formData, body)
  let scheme = call_613679.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613679.url(scheme.get, call_613679.host, call_613679.base,
                         call_613679.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613679, url, valid)

proc call*(call_613680: Call_PostDeleteAutoScalingGroup_613665;
          AutoScalingGroupName: string; ForceDelete: bool = false;
          Action: string = "DeleteAutoScalingGroup"; Version: string = "2011-01-01"): Recallable =
  ## postDeleteAutoScalingGroup
  ## <p>Deletes the specified Auto Scaling group.</p> <p>If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed.</p> <p>If the group has policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.</p> <p>To remove instances from the Auto Scaling group before deleting it, call <a>DetachInstances</a> with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.</p> <p>To terminate all instances before deleting the Auto Scaling group, call <a>UpdateAutoScalingGroup</a> and set the minimum size and desired capacity of the Auto Scaling group to zero.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   ForceDelete: bool
  ##              : Specifies that the group is to be deleted along with all instances associated with the group, without waiting for all instances to be terminated. This parameter also deletes any lifecycle actions associated with the group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613681 = newJObject()
  var formData_613682 = newJObject()
  add(formData_613682, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_613682, "ForceDelete", newJBool(ForceDelete))
  add(query_613681, "Action", newJString(Action))
  add(query_613681, "Version", newJString(Version))
  result = call_613680.call(nil, query_613681, nil, formData_613682, nil)

var postDeleteAutoScalingGroup* = Call_PostDeleteAutoScalingGroup_613665(
    name: "postDeleteAutoScalingGroup", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DeleteAutoScalingGroup",
    validator: validate_PostDeleteAutoScalingGroup_613666, base: "/",
    url: url_PostDeleteAutoScalingGroup_613667,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteAutoScalingGroup_613648 = ref object of OpenApiRestCall_612658
proc url_GetDeleteAutoScalingGroup_613650(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteAutoScalingGroup_613649(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified Auto Scaling group.</p> <p>If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed.</p> <p>If the group has policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.</p> <p>To remove instances from the Auto Scaling group before deleting it, call <a>DetachInstances</a> with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.</p> <p>To terminate all instances before deleting the Auto Scaling group, call <a>UpdateAutoScalingGroup</a> and set the minimum size and desired capacity of the Auto Scaling group to zero.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   ForceDelete: JBool
  ##              : Specifies that the group is to be deleted along with all instances associated with the group, without waiting for all instances to be terminated. This parameter also deletes any lifecycle actions associated with the group.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_613651 = query.getOrDefault("AutoScalingGroupName")
  valid_613651 = validateParameter(valid_613651, JString, required = true,
                                 default = nil)
  if valid_613651 != nil:
    section.add "AutoScalingGroupName", valid_613651
  var valid_613652 = query.getOrDefault("Action")
  valid_613652 = validateParameter(valid_613652, JString, required = true,
                                 default = newJString("DeleteAutoScalingGroup"))
  if valid_613652 != nil:
    section.add "Action", valid_613652
  var valid_613653 = query.getOrDefault("ForceDelete")
  valid_613653 = validateParameter(valid_613653, JBool, required = false, default = nil)
  if valid_613653 != nil:
    section.add "ForceDelete", valid_613653
  var valid_613654 = query.getOrDefault("Version")
  valid_613654 = validateParameter(valid_613654, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613654 != nil:
    section.add "Version", valid_613654
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613655 = header.getOrDefault("X-Amz-Signature")
  valid_613655 = validateParameter(valid_613655, JString, required = false,
                                 default = nil)
  if valid_613655 != nil:
    section.add "X-Amz-Signature", valid_613655
  var valid_613656 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613656 = validateParameter(valid_613656, JString, required = false,
                                 default = nil)
  if valid_613656 != nil:
    section.add "X-Amz-Content-Sha256", valid_613656
  var valid_613657 = header.getOrDefault("X-Amz-Date")
  valid_613657 = validateParameter(valid_613657, JString, required = false,
                                 default = nil)
  if valid_613657 != nil:
    section.add "X-Amz-Date", valid_613657
  var valid_613658 = header.getOrDefault("X-Amz-Credential")
  valid_613658 = validateParameter(valid_613658, JString, required = false,
                                 default = nil)
  if valid_613658 != nil:
    section.add "X-Amz-Credential", valid_613658
  var valid_613659 = header.getOrDefault("X-Amz-Security-Token")
  valid_613659 = validateParameter(valid_613659, JString, required = false,
                                 default = nil)
  if valid_613659 != nil:
    section.add "X-Amz-Security-Token", valid_613659
  var valid_613660 = header.getOrDefault("X-Amz-Algorithm")
  valid_613660 = validateParameter(valid_613660, JString, required = false,
                                 default = nil)
  if valid_613660 != nil:
    section.add "X-Amz-Algorithm", valid_613660
  var valid_613661 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613661 = validateParameter(valid_613661, JString, required = false,
                                 default = nil)
  if valid_613661 != nil:
    section.add "X-Amz-SignedHeaders", valid_613661
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613662: Call_GetDeleteAutoScalingGroup_613648; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified Auto Scaling group.</p> <p>If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed.</p> <p>If the group has policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.</p> <p>To remove instances from the Auto Scaling group before deleting it, call <a>DetachInstances</a> with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.</p> <p>To terminate all instances before deleting the Auto Scaling group, call <a>UpdateAutoScalingGroup</a> and set the minimum size and desired capacity of the Auto Scaling group to zero.</p>
  ## 
  let valid = call_613662.validator(path, query, header, formData, body)
  let scheme = call_613662.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613662.url(scheme.get, call_613662.host, call_613662.base,
                         call_613662.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613662, url, valid)

proc call*(call_613663: Call_GetDeleteAutoScalingGroup_613648;
          AutoScalingGroupName: string; Action: string = "DeleteAutoScalingGroup";
          ForceDelete: bool = false; Version: string = "2011-01-01"): Recallable =
  ## getDeleteAutoScalingGroup
  ## <p>Deletes the specified Auto Scaling group.</p> <p>If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed.</p> <p>If the group has policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.</p> <p>To remove instances from the Auto Scaling group before deleting it, call <a>DetachInstances</a> with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.</p> <p>To terminate all instances before deleting the Auto Scaling group, call <a>UpdateAutoScalingGroup</a> and set the minimum size and desired capacity of the Auto Scaling group to zero.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   ForceDelete: bool
  ##              : Specifies that the group is to be deleted along with all instances associated with the group, without waiting for all instances to be terminated. This parameter also deletes any lifecycle actions associated with the group.
  ##   Version: string (required)
  var query_613664 = newJObject()
  add(query_613664, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_613664, "Action", newJString(Action))
  add(query_613664, "ForceDelete", newJBool(ForceDelete))
  add(query_613664, "Version", newJString(Version))
  result = call_613663.call(nil, query_613664, nil, nil, nil)

var getDeleteAutoScalingGroup* = Call_GetDeleteAutoScalingGroup_613648(
    name: "getDeleteAutoScalingGroup", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DeleteAutoScalingGroup",
    validator: validate_GetDeleteAutoScalingGroup_613649, base: "/",
    url: url_GetDeleteAutoScalingGroup_613650,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteLaunchConfiguration_613699 = ref object of OpenApiRestCall_612658
proc url_PostDeleteLaunchConfiguration_613701(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteLaunchConfiguration_613700(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified launch configuration.</p> <p>The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613702 = query.getOrDefault("Action")
  valid_613702 = validateParameter(valid_613702, JString, required = true, default = newJString(
      "DeleteLaunchConfiguration"))
  if valid_613702 != nil:
    section.add "Action", valid_613702
  var valid_613703 = query.getOrDefault("Version")
  valid_613703 = validateParameter(valid_613703, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613703 != nil:
    section.add "Version", valid_613703
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613704 = header.getOrDefault("X-Amz-Signature")
  valid_613704 = validateParameter(valid_613704, JString, required = false,
                                 default = nil)
  if valid_613704 != nil:
    section.add "X-Amz-Signature", valid_613704
  var valid_613705 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613705 = validateParameter(valid_613705, JString, required = false,
                                 default = nil)
  if valid_613705 != nil:
    section.add "X-Amz-Content-Sha256", valid_613705
  var valid_613706 = header.getOrDefault("X-Amz-Date")
  valid_613706 = validateParameter(valid_613706, JString, required = false,
                                 default = nil)
  if valid_613706 != nil:
    section.add "X-Amz-Date", valid_613706
  var valid_613707 = header.getOrDefault("X-Amz-Credential")
  valid_613707 = validateParameter(valid_613707, JString, required = false,
                                 default = nil)
  if valid_613707 != nil:
    section.add "X-Amz-Credential", valid_613707
  var valid_613708 = header.getOrDefault("X-Amz-Security-Token")
  valid_613708 = validateParameter(valid_613708, JString, required = false,
                                 default = nil)
  if valid_613708 != nil:
    section.add "X-Amz-Security-Token", valid_613708
  var valid_613709 = header.getOrDefault("X-Amz-Algorithm")
  valid_613709 = validateParameter(valid_613709, JString, required = false,
                                 default = nil)
  if valid_613709 != nil:
    section.add "X-Amz-Algorithm", valid_613709
  var valid_613710 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613710 = validateParameter(valid_613710, JString, required = false,
                                 default = nil)
  if valid_613710 != nil:
    section.add "X-Amz-SignedHeaders", valid_613710
  result.add "header", section
  ## parameters in `formData` object:
  ##   LaunchConfigurationName: JString (required)
  ##                          : The name of the launch configuration.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `LaunchConfigurationName` field"
  var valid_613711 = formData.getOrDefault("LaunchConfigurationName")
  valid_613711 = validateParameter(valid_613711, JString, required = true,
                                 default = nil)
  if valid_613711 != nil:
    section.add "LaunchConfigurationName", valid_613711
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613712: Call_PostDeleteLaunchConfiguration_613699; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified launch configuration.</p> <p>The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.</p>
  ## 
  let valid = call_613712.validator(path, query, header, formData, body)
  let scheme = call_613712.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613712.url(scheme.get, call_613712.host, call_613712.base,
                         call_613712.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613712, url, valid)

proc call*(call_613713: Call_PostDeleteLaunchConfiguration_613699;
          LaunchConfigurationName: string;
          Action: string = "DeleteLaunchConfiguration";
          Version: string = "2011-01-01"): Recallable =
  ## postDeleteLaunchConfiguration
  ## <p>Deletes the specified launch configuration.</p> <p>The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.</p>
  ##   Action: string (required)
  ##   LaunchConfigurationName: string (required)
  ##                          : The name of the launch configuration.
  ##   Version: string (required)
  var query_613714 = newJObject()
  var formData_613715 = newJObject()
  add(query_613714, "Action", newJString(Action))
  add(formData_613715, "LaunchConfigurationName",
      newJString(LaunchConfigurationName))
  add(query_613714, "Version", newJString(Version))
  result = call_613713.call(nil, query_613714, nil, formData_613715, nil)

var postDeleteLaunchConfiguration* = Call_PostDeleteLaunchConfiguration_613699(
    name: "postDeleteLaunchConfiguration", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DeleteLaunchConfiguration",
    validator: validate_PostDeleteLaunchConfiguration_613700, base: "/",
    url: url_PostDeleteLaunchConfiguration_613701,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteLaunchConfiguration_613683 = ref object of OpenApiRestCall_612658
proc url_GetDeleteLaunchConfiguration_613685(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteLaunchConfiguration_613684(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified launch configuration.</p> <p>The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   LaunchConfigurationName: JString (required)
  ##                          : The name of the launch configuration.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `LaunchConfigurationName` field"
  var valid_613686 = query.getOrDefault("LaunchConfigurationName")
  valid_613686 = validateParameter(valid_613686, JString, required = true,
                                 default = nil)
  if valid_613686 != nil:
    section.add "LaunchConfigurationName", valid_613686
  var valid_613687 = query.getOrDefault("Action")
  valid_613687 = validateParameter(valid_613687, JString, required = true, default = newJString(
      "DeleteLaunchConfiguration"))
  if valid_613687 != nil:
    section.add "Action", valid_613687
  var valid_613688 = query.getOrDefault("Version")
  valid_613688 = validateParameter(valid_613688, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613688 != nil:
    section.add "Version", valid_613688
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613689 = header.getOrDefault("X-Amz-Signature")
  valid_613689 = validateParameter(valid_613689, JString, required = false,
                                 default = nil)
  if valid_613689 != nil:
    section.add "X-Amz-Signature", valid_613689
  var valid_613690 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613690 = validateParameter(valid_613690, JString, required = false,
                                 default = nil)
  if valid_613690 != nil:
    section.add "X-Amz-Content-Sha256", valid_613690
  var valid_613691 = header.getOrDefault("X-Amz-Date")
  valid_613691 = validateParameter(valid_613691, JString, required = false,
                                 default = nil)
  if valid_613691 != nil:
    section.add "X-Amz-Date", valid_613691
  var valid_613692 = header.getOrDefault("X-Amz-Credential")
  valid_613692 = validateParameter(valid_613692, JString, required = false,
                                 default = nil)
  if valid_613692 != nil:
    section.add "X-Amz-Credential", valid_613692
  var valid_613693 = header.getOrDefault("X-Amz-Security-Token")
  valid_613693 = validateParameter(valid_613693, JString, required = false,
                                 default = nil)
  if valid_613693 != nil:
    section.add "X-Amz-Security-Token", valid_613693
  var valid_613694 = header.getOrDefault("X-Amz-Algorithm")
  valid_613694 = validateParameter(valid_613694, JString, required = false,
                                 default = nil)
  if valid_613694 != nil:
    section.add "X-Amz-Algorithm", valid_613694
  var valid_613695 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613695 = validateParameter(valid_613695, JString, required = false,
                                 default = nil)
  if valid_613695 != nil:
    section.add "X-Amz-SignedHeaders", valid_613695
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613696: Call_GetDeleteLaunchConfiguration_613683; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified launch configuration.</p> <p>The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.</p>
  ## 
  let valid = call_613696.validator(path, query, header, formData, body)
  let scheme = call_613696.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613696.url(scheme.get, call_613696.host, call_613696.base,
                         call_613696.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613696, url, valid)

proc call*(call_613697: Call_GetDeleteLaunchConfiguration_613683;
          LaunchConfigurationName: string;
          Action: string = "DeleteLaunchConfiguration";
          Version: string = "2011-01-01"): Recallable =
  ## getDeleteLaunchConfiguration
  ## <p>Deletes the specified launch configuration.</p> <p>The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.</p>
  ##   LaunchConfigurationName: string (required)
  ##                          : The name of the launch configuration.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613698 = newJObject()
  add(query_613698, "LaunchConfigurationName", newJString(LaunchConfigurationName))
  add(query_613698, "Action", newJString(Action))
  add(query_613698, "Version", newJString(Version))
  result = call_613697.call(nil, query_613698, nil, nil, nil)

var getDeleteLaunchConfiguration* = Call_GetDeleteLaunchConfiguration_613683(
    name: "getDeleteLaunchConfiguration", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DeleteLaunchConfiguration",
    validator: validate_GetDeleteLaunchConfiguration_613684, base: "/",
    url: url_GetDeleteLaunchConfiguration_613685,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteLifecycleHook_613733 = ref object of OpenApiRestCall_612658
proc url_PostDeleteLifecycleHook_613735(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteLifecycleHook_613734(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified lifecycle hook.</p> <p>If there are any outstanding lifecycle actions, they are completed first (<code>ABANDON</code> for launching instances, <code>CONTINUE</code> for terminating instances).</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613736 = query.getOrDefault("Action")
  valid_613736 = validateParameter(valid_613736, JString, required = true,
                                 default = newJString("DeleteLifecycleHook"))
  if valid_613736 != nil:
    section.add "Action", valid_613736
  var valid_613737 = query.getOrDefault("Version")
  valid_613737 = validateParameter(valid_613737, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613737 != nil:
    section.add "Version", valid_613737
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613738 = header.getOrDefault("X-Amz-Signature")
  valid_613738 = validateParameter(valid_613738, JString, required = false,
                                 default = nil)
  if valid_613738 != nil:
    section.add "X-Amz-Signature", valid_613738
  var valid_613739 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613739 = validateParameter(valid_613739, JString, required = false,
                                 default = nil)
  if valid_613739 != nil:
    section.add "X-Amz-Content-Sha256", valid_613739
  var valid_613740 = header.getOrDefault("X-Amz-Date")
  valid_613740 = validateParameter(valid_613740, JString, required = false,
                                 default = nil)
  if valid_613740 != nil:
    section.add "X-Amz-Date", valid_613740
  var valid_613741 = header.getOrDefault("X-Amz-Credential")
  valid_613741 = validateParameter(valid_613741, JString, required = false,
                                 default = nil)
  if valid_613741 != nil:
    section.add "X-Amz-Credential", valid_613741
  var valid_613742 = header.getOrDefault("X-Amz-Security-Token")
  valid_613742 = validateParameter(valid_613742, JString, required = false,
                                 default = nil)
  if valid_613742 != nil:
    section.add "X-Amz-Security-Token", valid_613742
  var valid_613743 = header.getOrDefault("X-Amz-Algorithm")
  valid_613743 = validateParameter(valid_613743, JString, required = false,
                                 default = nil)
  if valid_613743 != nil:
    section.add "X-Amz-Algorithm", valid_613743
  var valid_613744 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613744 = validateParameter(valid_613744, JString, required = false,
                                 default = nil)
  if valid_613744 != nil:
    section.add "X-Amz-SignedHeaders", valid_613744
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_613745 = formData.getOrDefault("AutoScalingGroupName")
  valid_613745 = validateParameter(valid_613745, JString, required = true,
                                 default = nil)
  if valid_613745 != nil:
    section.add "AutoScalingGroupName", valid_613745
  var valid_613746 = formData.getOrDefault("LifecycleHookName")
  valid_613746 = validateParameter(valid_613746, JString, required = true,
                                 default = nil)
  if valid_613746 != nil:
    section.add "LifecycleHookName", valid_613746
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613747: Call_PostDeleteLifecycleHook_613733; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified lifecycle hook.</p> <p>If there are any outstanding lifecycle actions, they are completed first (<code>ABANDON</code> for launching instances, <code>CONTINUE</code> for terminating instances).</p>
  ## 
  let valid = call_613747.validator(path, query, header, formData, body)
  let scheme = call_613747.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613747.url(scheme.get, call_613747.host, call_613747.base,
                         call_613747.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613747, url, valid)

proc call*(call_613748: Call_PostDeleteLifecycleHook_613733;
          AutoScalingGroupName: string; LifecycleHookName: string;
          Action: string = "DeleteLifecycleHook"; Version: string = "2011-01-01"): Recallable =
  ## postDeleteLifecycleHook
  ## <p>Deletes the specified lifecycle hook.</p> <p>If there are any outstanding lifecycle actions, they are completed first (<code>ABANDON</code> for launching instances, <code>CONTINUE</code> for terminating instances).</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613749 = newJObject()
  var formData_613750 = newJObject()
  add(formData_613750, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_613750, "LifecycleHookName", newJString(LifecycleHookName))
  add(query_613749, "Action", newJString(Action))
  add(query_613749, "Version", newJString(Version))
  result = call_613748.call(nil, query_613749, nil, formData_613750, nil)

var postDeleteLifecycleHook* = Call_PostDeleteLifecycleHook_613733(
    name: "postDeleteLifecycleHook", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DeleteLifecycleHook",
    validator: validate_PostDeleteLifecycleHook_613734, base: "/",
    url: url_PostDeleteLifecycleHook_613735, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteLifecycleHook_613716 = ref object of OpenApiRestCall_612658
proc url_GetDeleteLifecycleHook_613718(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteLifecycleHook_613717(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified lifecycle hook.</p> <p>If there are any outstanding lifecycle actions, they are completed first (<code>ABANDON</code> for launching instances, <code>CONTINUE</code> for terminating instances).</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_613719 = query.getOrDefault("AutoScalingGroupName")
  valid_613719 = validateParameter(valid_613719, JString, required = true,
                                 default = nil)
  if valid_613719 != nil:
    section.add "AutoScalingGroupName", valid_613719
  var valid_613720 = query.getOrDefault("LifecycleHookName")
  valid_613720 = validateParameter(valid_613720, JString, required = true,
                                 default = nil)
  if valid_613720 != nil:
    section.add "LifecycleHookName", valid_613720
  var valid_613721 = query.getOrDefault("Action")
  valid_613721 = validateParameter(valid_613721, JString, required = true,
                                 default = newJString("DeleteLifecycleHook"))
  if valid_613721 != nil:
    section.add "Action", valid_613721
  var valid_613722 = query.getOrDefault("Version")
  valid_613722 = validateParameter(valid_613722, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613722 != nil:
    section.add "Version", valid_613722
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613723 = header.getOrDefault("X-Amz-Signature")
  valid_613723 = validateParameter(valid_613723, JString, required = false,
                                 default = nil)
  if valid_613723 != nil:
    section.add "X-Amz-Signature", valid_613723
  var valid_613724 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613724 = validateParameter(valid_613724, JString, required = false,
                                 default = nil)
  if valid_613724 != nil:
    section.add "X-Amz-Content-Sha256", valid_613724
  var valid_613725 = header.getOrDefault("X-Amz-Date")
  valid_613725 = validateParameter(valid_613725, JString, required = false,
                                 default = nil)
  if valid_613725 != nil:
    section.add "X-Amz-Date", valid_613725
  var valid_613726 = header.getOrDefault("X-Amz-Credential")
  valid_613726 = validateParameter(valid_613726, JString, required = false,
                                 default = nil)
  if valid_613726 != nil:
    section.add "X-Amz-Credential", valid_613726
  var valid_613727 = header.getOrDefault("X-Amz-Security-Token")
  valid_613727 = validateParameter(valid_613727, JString, required = false,
                                 default = nil)
  if valid_613727 != nil:
    section.add "X-Amz-Security-Token", valid_613727
  var valid_613728 = header.getOrDefault("X-Amz-Algorithm")
  valid_613728 = validateParameter(valid_613728, JString, required = false,
                                 default = nil)
  if valid_613728 != nil:
    section.add "X-Amz-Algorithm", valid_613728
  var valid_613729 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613729 = validateParameter(valid_613729, JString, required = false,
                                 default = nil)
  if valid_613729 != nil:
    section.add "X-Amz-SignedHeaders", valid_613729
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613730: Call_GetDeleteLifecycleHook_613716; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified lifecycle hook.</p> <p>If there are any outstanding lifecycle actions, they are completed first (<code>ABANDON</code> for launching instances, <code>CONTINUE</code> for terminating instances).</p>
  ## 
  let valid = call_613730.validator(path, query, header, formData, body)
  let scheme = call_613730.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613730.url(scheme.get, call_613730.host, call_613730.base,
                         call_613730.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613730, url, valid)

proc call*(call_613731: Call_GetDeleteLifecycleHook_613716;
          AutoScalingGroupName: string; LifecycleHookName: string;
          Action: string = "DeleteLifecycleHook"; Version: string = "2011-01-01"): Recallable =
  ## getDeleteLifecycleHook
  ## <p>Deletes the specified lifecycle hook.</p> <p>If there are any outstanding lifecycle actions, they are completed first (<code>ABANDON</code> for launching instances, <code>CONTINUE</code> for terminating instances).</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613732 = newJObject()
  add(query_613732, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_613732, "LifecycleHookName", newJString(LifecycleHookName))
  add(query_613732, "Action", newJString(Action))
  add(query_613732, "Version", newJString(Version))
  result = call_613731.call(nil, query_613732, nil, nil, nil)

var getDeleteLifecycleHook* = Call_GetDeleteLifecycleHook_613716(
    name: "getDeleteLifecycleHook", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DeleteLifecycleHook",
    validator: validate_GetDeleteLifecycleHook_613717, base: "/",
    url: url_GetDeleteLifecycleHook_613718, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteNotificationConfiguration_613768 = ref object of OpenApiRestCall_612658
proc url_PostDeleteNotificationConfiguration_613770(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteNotificationConfiguration_613769(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified notification.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613771 = query.getOrDefault("Action")
  valid_613771 = validateParameter(valid_613771, JString, required = true, default = newJString(
      "DeleteNotificationConfiguration"))
  if valid_613771 != nil:
    section.add "Action", valid_613771
  var valid_613772 = query.getOrDefault("Version")
  valid_613772 = validateParameter(valid_613772, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613772 != nil:
    section.add "Version", valid_613772
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613773 = header.getOrDefault("X-Amz-Signature")
  valid_613773 = validateParameter(valid_613773, JString, required = false,
                                 default = nil)
  if valid_613773 != nil:
    section.add "X-Amz-Signature", valid_613773
  var valid_613774 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613774 = validateParameter(valid_613774, JString, required = false,
                                 default = nil)
  if valid_613774 != nil:
    section.add "X-Amz-Content-Sha256", valid_613774
  var valid_613775 = header.getOrDefault("X-Amz-Date")
  valid_613775 = validateParameter(valid_613775, JString, required = false,
                                 default = nil)
  if valid_613775 != nil:
    section.add "X-Amz-Date", valid_613775
  var valid_613776 = header.getOrDefault("X-Amz-Credential")
  valid_613776 = validateParameter(valid_613776, JString, required = false,
                                 default = nil)
  if valid_613776 != nil:
    section.add "X-Amz-Credential", valid_613776
  var valid_613777 = header.getOrDefault("X-Amz-Security-Token")
  valid_613777 = validateParameter(valid_613777, JString, required = false,
                                 default = nil)
  if valid_613777 != nil:
    section.add "X-Amz-Security-Token", valid_613777
  var valid_613778 = header.getOrDefault("X-Amz-Algorithm")
  valid_613778 = validateParameter(valid_613778, JString, required = false,
                                 default = nil)
  if valid_613778 != nil:
    section.add "X-Amz-Algorithm", valid_613778
  var valid_613779 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613779 = validateParameter(valid_613779, JString, required = false,
                                 default = nil)
  if valid_613779 != nil:
    section.add "X-Amz-SignedHeaders", valid_613779
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   TopicARN: JString (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_613780 = formData.getOrDefault("AutoScalingGroupName")
  valid_613780 = validateParameter(valid_613780, JString, required = true,
                                 default = nil)
  if valid_613780 != nil:
    section.add "AutoScalingGroupName", valid_613780
  var valid_613781 = formData.getOrDefault("TopicARN")
  valid_613781 = validateParameter(valid_613781, JString, required = true,
                                 default = nil)
  if valid_613781 != nil:
    section.add "TopicARN", valid_613781
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613782: Call_PostDeleteNotificationConfiguration_613768;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes the specified notification.
  ## 
  let valid = call_613782.validator(path, query, header, formData, body)
  let scheme = call_613782.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613782.url(scheme.get, call_613782.host, call_613782.base,
                         call_613782.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613782, url, valid)

proc call*(call_613783: Call_PostDeleteNotificationConfiguration_613768;
          AutoScalingGroupName: string; TopicARN: string;
          Action: string = "DeleteNotificationConfiguration";
          Version: string = "2011-01-01"): Recallable =
  ## postDeleteNotificationConfiguration
  ## Deletes the specified notification.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   TopicARN: string (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   Version: string (required)
  var query_613784 = newJObject()
  var formData_613785 = newJObject()
  add(formData_613785, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_613784, "Action", newJString(Action))
  add(formData_613785, "TopicARN", newJString(TopicARN))
  add(query_613784, "Version", newJString(Version))
  result = call_613783.call(nil, query_613784, nil, formData_613785, nil)

var postDeleteNotificationConfiguration* = Call_PostDeleteNotificationConfiguration_613768(
    name: "postDeleteNotificationConfiguration", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DeleteNotificationConfiguration",
    validator: validate_PostDeleteNotificationConfiguration_613769, base: "/",
    url: url_PostDeleteNotificationConfiguration_613770,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteNotificationConfiguration_613751 = ref object of OpenApiRestCall_612658
proc url_GetDeleteNotificationConfiguration_613753(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteNotificationConfiguration_613752(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified notification.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   TopicARN: JString (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_613754 = query.getOrDefault("AutoScalingGroupName")
  valid_613754 = validateParameter(valid_613754, JString, required = true,
                                 default = nil)
  if valid_613754 != nil:
    section.add "AutoScalingGroupName", valid_613754
  var valid_613755 = query.getOrDefault("TopicARN")
  valid_613755 = validateParameter(valid_613755, JString, required = true,
                                 default = nil)
  if valid_613755 != nil:
    section.add "TopicARN", valid_613755
  var valid_613756 = query.getOrDefault("Action")
  valid_613756 = validateParameter(valid_613756, JString, required = true, default = newJString(
      "DeleteNotificationConfiguration"))
  if valid_613756 != nil:
    section.add "Action", valid_613756
  var valid_613757 = query.getOrDefault("Version")
  valid_613757 = validateParameter(valid_613757, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613757 != nil:
    section.add "Version", valid_613757
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613758 = header.getOrDefault("X-Amz-Signature")
  valid_613758 = validateParameter(valid_613758, JString, required = false,
                                 default = nil)
  if valid_613758 != nil:
    section.add "X-Amz-Signature", valid_613758
  var valid_613759 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613759 = validateParameter(valid_613759, JString, required = false,
                                 default = nil)
  if valid_613759 != nil:
    section.add "X-Amz-Content-Sha256", valid_613759
  var valid_613760 = header.getOrDefault("X-Amz-Date")
  valid_613760 = validateParameter(valid_613760, JString, required = false,
                                 default = nil)
  if valid_613760 != nil:
    section.add "X-Amz-Date", valid_613760
  var valid_613761 = header.getOrDefault("X-Amz-Credential")
  valid_613761 = validateParameter(valid_613761, JString, required = false,
                                 default = nil)
  if valid_613761 != nil:
    section.add "X-Amz-Credential", valid_613761
  var valid_613762 = header.getOrDefault("X-Amz-Security-Token")
  valid_613762 = validateParameter(valid_613762, JString, required = false,
                                 default = nil)
  if valid_613762 != nil:
    section.add "X-Amz-Security-Token", valid_613762
  var valid_613763 = header.getOrDefault("X-Amz-Algorithm")
  valid_613763 = validateParameter(valid_613763, JString, required = false,
                                 default = nil)
  if valid_613763 != nil:
    section.add "X-Amz-Algorithm", valid_613763
  var valid_613764 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613764 = validateParameter(valid_613764, JString, required = false,
                                 default = nil)
  if valid_613764 != nil:
    section.add "X-Amz-SignedHeaders", valid_613764
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613765: Call_GetDeleteNotificationConfiguration_613751;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes the specified notification.
  ## 
  let valid = call_613765.validator(path, query, header, formData, body)
  let scheme = call_613765.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613765.url(scheme.get, call_613765.host, call_613765.base,
                         call_613765.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613765, url, valid)

proc call*(call_613766: Call_GetDeleteNotificationConfiguration_613751;
          AutoScalingGroupName: string; TopicARN: string;
          Action: string = "DeleteNotificationConfiguration";
          Version: string = "2011-01-01"): Recallable =
  ## getDeleteNotificationConfiguration
  ## Deletes the specified notification.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   TopicARN: string (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613767 = newJObject()
  add(query_613767, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_613767, "TopicARN", newJString(TopicARN))
  add(query_613767, "Action", newJString(Action))
  add(query_613767, "Version", newJString(Version))
  result = call_613766.call(nil, query_613767, nil, nil, nil)

var getDeleteNotificationConfiguration* = Call_GetDeleteNotificationConfiguration_613751(
    name: "getDeleteNotificationConfiguration", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DeleteNotificationConfiguration",
    validator: validate_GetDeleteNotificationConfiguration_613752, base: "/",
    url: url_GetDeleteNotificationConfiguration_613753,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeletePolicy_613803 = ref object of OpenApiRestCall_612658
proc url_PostDeletePolicy_613805(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeletePolicy_613804(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Deletes the specified scaling policy.</p> <p>Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html">Deleting a Scaling Policy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613806 = query.getOrDefault("Action")
  valid_613806 = validateParameter(valid_613806, JString, required = true,
                                 default = newJString("DeletePolicy"))
  if valid_613806 != nil:
    section.add "Action", valid_613806
  var valid_613807 = query.getOrDefault("Version")
  valid_613807 = validateParameter(valid_613807, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613807 != nil:
    section.add "Version", valid_613807
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613808 = header.getOrDefault("X-Amz-Signature")
  valid_613808 = validateParameter(valid_613808, JString, required = false,
                                 default = nil)
  if valid_613808 != nil:
    section.add "X-Amz-Signature", valid_613808
  var valid_613809 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613809 = validateParameter(valid_613809, JString, required = false,
                                 default = nil)
  if valid_613809 != nil:
    section.add "X-Amz-Content-Sha256", valid_613809
  var valid_613810 = header.getOrDefault("X-Amz-Date")
  valid_613810 = validateParameter(valid_613810, JString, required = false,
                                 default = nil)
  if valid_613810 != nil:
    section.add "X-Amz-Date", valid_613810
  var valid_613811 = header.getOrDefault("X-Amz-Credential")
  valid_613811 = validateParameter(valid_613811, JString, required = false,
                                 default = nil)
  if valid_613811 != nil:
    section.add "X-Amz-Credential", valid_613811
  var valid_613812 = header.getOrDefault("X-Amz-Security-Token")
  valid_613812 = validateParameter(valid_613812, JString, required = false,
                                 default = nil)
  if valid_613812 != nil:
    section.add "X-Amz-Security-Token", valid_613812
  var valid_613813 = header.getOrDefault("X-Amz-Algorithm")
  valid_613813 = validateParameter(valid_613813, JString, required = false,
                                 default = nil)
  if valid_613813 != nil:
    section.add "X-Amz-Algorithm", valid_613813
  var valid_613814 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613814 = validateParameter(valid_613814, JString, required = false,
                                 default = nil)
  if valid_613814 != nil:
    section.add "X-Amz-SignedHeaders", valid_613814
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   PolicyName: JString (required)
  ##             : The name or Amazon Resource Name (ARN) of the policy.
  section = newJObject()
  var valid_613815 = formData.getOrDefault("AutoScalingGroupName")
  valid_613815 = validateParameter(valid_613815, JString, required = false,
                                 default = nil)
  if valid_613815 != nil:
    section.add "AutoScalingGroupName", valid_613815
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_613816 = formData.getOrDefault("PolicyName")
  valid_613816 = validateParameter(valid_613816, JString, required = true,
                                 default = nil)
  if valid_613816 != nil:
    section.add "PolicyName", valid_613816
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613817: Call_PostDeletePolicy_613803; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified scaling policy.</p> <p>Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html">Deleting a Scaling Policy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_613817.validator(path, query, header, formData, body)
  let scheme = call_613817.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613817.url(scheme.get, call_613817.host, call_613817.base,
                         call_613817.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613817, url, valid)

proc call*(call_613818: Call_PostDeletePolicy_613803; PolicyName: string;
          AutoScalingGroupName: string = ""; Action: string = "DeletePolicy";
          Version: string = "2011-01-01"): Recallable =
  ## postDeletePolicy
  ## <p>Deletes the specified scaling policy.</p> <p>Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html">Deleting a Scaling Policy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : The name or Amazon Resource Name (ARN) of the policy.
  var query_613819 = newJObject()
  var formData_613820 = newJObject()
  add(formData_613820, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_613819, "Action", newJString(Action))
  add(query_613819, "Version", newJString(Version))
  add(formData_613820, "PolicyName", newJString(PolicyName))
  result = call_613818.call(nil, query_613819, nil, formData_613820, nil)

var postDeletePolicy* = Call_PostDeletePolicy_613803(name: "postDeletePolicy",
    meth: HttpMethod.HttpPost, host: "autoscaling.amazonaws.com",
    route: "/#Action=DeletePolicy", validator: validate_PostDeletePolicy_613804,
    base: "/", url: url_PostDeletePolicy_613805,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeletePolicy_613786 = ref object of OpenApiRestCall_612658
proc url_GetDeletePolicy_613788(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeletePolicy_613787(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Deletes the specified scaling policy.</p> <p>Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html">Deleting a Scaling Policy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyName: JString (required)
  ##             : The name or Amazon Resource Name (ARN) of the policy.
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyName` field"
  var valid_613789 = query.getOrDefault("PolicyName")
  valid_613789 = validateParameter(valid_613789, JString, required = true,
                                 default = nil)
  if valid_613789 != nil:
    section.add "PolicyName", valid_613789
  var valid_613790 = query.getOrDefault("AutoScalingGroupName")
  valid_613790 = validateParameter(valid_613790, JString, required = false,
                                 default = nil)
  if valid_613790 != nil:
    section.add "AutoScalingGroupName", valid_613790
  var valid_613791 = query.getOrDefault("Action")
  valid_613791 = validateParameter(valid_613791, JString, required = true,
                                 default = newJString("DeletePolicy"))
  if valid_613791 != nil:
    section.add "Action", valid_613791
  var valid_613792 = query.getOrDefault("Version")
  valid_613792 = validateParameter(valid_613792, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613792 != nil:
    section.add "Version", valid_613792
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613793 = header.getOrDefault("X-Amz-Signature")
  valid_613793 = validateParameter(valid_613793, JString, required = false,
                                 default = nil)
  if valid_613793 != nil:
    section.add "X-Amz-Signature", valid_613793
  var valid_613794 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613794 = validateParameter(valid_613794, JString, required = false,
                                 default = nil)
  if valid_613794 != nil:
    section.add "X-Amz-Content-Sha256", valid_613794
  var valid_613795 = header.getOrDefault("X-Amz-Date")
  valid_613795 = validateParameter(valid_613795, JString, required = false,
                                 default = nil)
  if valid_613795 != nil:
    section.add "X-Amz-Date", valid_613795
  var valid_613796 = header.getOrDefault("X-Amz-Credential")
  valid_613796 = validateParameter(valid_613796, JString, required = false,
                                 default = nil)
  if valid_613796 != nil:
    section.add "X-Amz-Credential", valid_613796
  var valid_613797 = header.getOrDefault("X-Amz-Security-Token")
  valid_613797 = validateParameter(valid_613797, JString, required = false,
                                 default = nil)
  if valid_613797 != nil:
    section.add "X-Amz-Security-Token", valid_613797
  var valid_613798 = header.getOrDefault("X-Amz-Algorithm")
  valid_613798 = validateParameter(valid_613798, JString, required = false,
                                 default = nil)
  if valid_613798 != nil:
    section.add "X-Amz-Algorithm", valid_613798
  var valid_613799 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613799 = validateParameter(valid_613799, JString, required = false,
                                 default = nil)
  if valid_613799 != nil:
    section.add "X-Amz-SignedHeaders", valid_613799
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613800: Call_GetDeletePolicy_613786; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified scaling policy.</p> <p>Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html">Deleting a Scaling Policy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_613800.validator(path, query, header, formData, body)
  let scheme = call_613800.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613800.url(scheme.get, call_613800.host, call_613800.base,
                         call_613800.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613800, url, valid)

proc call*(call_613801: Call_GetDeletePolicy_613786; PolicyName: string;
          AutoScalingGroupName: string = ""; Action: string = "DeletePolicy";
          Version: string = "2011-01-01"): Recallable =
  ## getDeletePolicy
  ## <p>Deletes the specified scaling policy.</p> <p>Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html">Deleting a Scaling Policy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   PolicyName: string (required)
  ##             : The name or Amazon Resource Name (ARN) of the policy.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613802 = newJObject()
  add(query_613802, "PolicyName", newJString(PolicyName))
  add(query_613802, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_613802, "Action", newJString(Action))
  add(query_613802, "Version", newJString(Version))
  result = call_613801.call(nil, query_613802, nil, nil, nil)

var getDeletePolicy* = Call_GetDeletePolicy_613786(name: "getDeletePolicy",
    meth: HttpMethod.HttpGet, host: "autoscaling.amazonaws.com",
    route: "/#Action=DeletePolicy", validator: validate_GetDeletePolicy_613787,
    base: "/", url: url_GetDeletePolicy_613788, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteScheduledAction_613838 = ref object of OpenApiRestCall_612658
proc url_PostDeleteScheduledAction_613840(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteScheduledAction_613839(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified scheduled action.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613841 = query.getOrDefault("Action")
  valid_613841 = validateParameter(valid_613841, JString, required = true,
                                 default = newJString("DeleteScheduledAction"))
  if valid_613841 != nil:
    section.add "Action", valid_613841
  var valid_613842 = query.getOrDefault("Version")
  valid_613842 = validateParameter(valid_613842, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613842 != nil:
    section.add "Version", valid_613842
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613843 = header.getOrDefault("X-Amz-Signature")
  valid_613843 = validateParameter(valid_613843, JString, required = false,
                                 default = nil)
  if valid_613843 != nil:
    section.add "X-Amz-Signature", valid_613843
  var valid_613844 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613844 = validateParameter(valid_613844, JString, required = false,
                                 default = nil)
  if valid_613844 != nil:
    section.add "X-Amz-Content-Sha256", valid_613844
  var valid_613845 = header.getOrDefault("X-Amz-Date")
  valid_613845 = validateParameter(valid_613845, JString, required = false,
                                 default = nil)
  if valid_613845 != nil:
    section.add "X-Amz-Date", valid_613845
  var valid_613846 = header.getOrDefault("X-Amz-Credential")
  valid_613846 = validateParameter(valid_613846, JString, required = false,
                                 default = nil)
  if valid_613846 != nil:
    section.add "X-Amz-Credential", valid_613846
  var valid_613847 = header.getOrDefault("X-Amz-Security-Token")
  valid_613847 = validateParameter(valid_613847, JString, required = false,
                                 default = nil)
  if valid_613847 != nil:
    section.add "X-Amz-Security-Token", valid_613847
  var valid_613848 = header.getOrDefault("X-Amz-Algorithm")
  valid_613848 = validateParameter(valid_613848, JString, required = false,
                                 default = nil)
  if valid_613848 != nil:
    section.add "X-Amz-Algorithm", valid_613848
  var valid_613849 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613849 = validateParameter(valid_613849, JString, required = false,
                                 default = nil)
  if valid_613849 != nil:
    section.add "X-Amz-SignedHeaders", valid_613849
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScheduledActionName: JString (required)
  ##                      : The name of the action to delete.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_613850 = formData.getOrDefault("AutoScalingGroupName")
  valid_613850 = validateParameter(valid_613850, JString, required = true,
                                 default = nil)
  if valid_613850 != nil:
    section.add "AutoScalingGroupName", valid_613850
  var valid_613851 = formData.getOrDefault("ScheduledActionName")
  valid_613851 = validateParameter(valid_613851, JString, required = true,
                                 default = nil)
  if valid_613851 != nil:
    section.add "ScheduledActionName", valid_613851
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613852: Call_PostDeleteScheduledAction_613838; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified scheduled action.
  ## 
  let valid = call_613852.validator(path, query, header, formData, body)
  let scheme = call_613852.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613852.url(scheme.get, call_613852.host, call_613852.base,
                         call_613852.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613852, url, valid)

proc call*(call_613853: Call_PostDeleteScheduledAction_613838;
          AutoScalingGroupName: string; ScheduledActionName: string;
          Action: string = "DeleteScheduledAction"; Version: string = "2011-01-01"): Recallable =
  ## postDeleteScheduledAction
  ## Deletes the specified scheduled action.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScheduledActionName: string (required)
  ##                      : The name of the action to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613854 = newJObject()
  var formData_613855 = newJObject()
  add(formData_613855, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_613855, "ScheduledActionName", newJString(ScheduledActionName))
  add(query_613854, "Action", newJString(Action))
  add(query_613854, "Version", newJString(Version))
  result = call_613853.call(nil, query_613854, nil, formData_613855, nil)

var postDeleteScheduledAction* = Call_PostDeleteScheduledAction_613838(
    name: "postDeleteScheduledAction", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DeleteScheduledAction",
    validator: validate_PostDeleteScheduledAction_613839, base: "/",
    url: url_PostDeleteScheduledAction_613840,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteScheduledAction_613821 = ref object of OpenApiRestCall_612658
proc url_GetDeleteScheduledAction_613823(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteScheduledAction_613822(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified scheduled action.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ScheduledActionName: JString (required)
  ##                      : The name of the action to delete.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ScheduledActionName` field"
  var valid_613824 = query.getOrDefault("ScheduledActionName")
  valid_613824 = validateParameter(valid_613824, JString, required = true,
                                 default = nil)
  if valid_613824 != nil:
    section.add "ScheduledActionName", valid_613824
  var valid_613825 = query.getOrDefault("AutoScalingGroupName")
  valid_613825 = validateParameter(valid_613825, JString, required = true,
                                 default = nil)
  if valid_613825 != nil:
    section.add "AutoScalingGroupName", valid_613825
  var valid_613826 = query.getOrDefault("Action")
  valid_613826 = validateParameter(valid_613826, JString, required = true,
                                 default = newJString("DeleteScheduledAction"))
  if valid_613826 != nil:
    section.add "Action", valid_613826
  var valid_613827 = query.getOrDefault("Version")
  valid_613827 = validateParameter(valid_613827, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613827 != nil:
    section.add "Version", valid_613827
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613828 = header.getOrDefault("X-Amz-Signature")
  valid_613828 = validateParameter(valid_613828, JString, required = false,
                                 default = nil)
  if valid_613828 != nil:
    section.add "X-Amz-Signature", valid_613828
  var valid_613829 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613829 = validateParameter(valid_613829, JString, required = false,
                                 default = nil)
  if valid_613829 != nil:
    section.add "X-Amz-Content-Sha256", valid_613829
  var valid_613830 = header.getOrDefault("X-Amz-Date")
  valid_613830 = validateParameter(valid_613830, JString, required = false,
                                 default = nil)
  if valid_613830 != nil:
    section.add "X-Amz-Date", valid_613830
  var valid_613831 = header.getOrDefault("X-Amz-Credential")
  valid_613831 = validateParameter(valid_613831, JString, required = false,
                                 default = nil)
  if valid_613831 != nil:
    section.add "X-Amz-Credential", valid_613831
  var valid_613832 = header.getOrDefault("X-Amz-Security-Token")
  valid_613832 = validateParameter(valid_613832, JString, required = false,
                                 default = nil)
  if valid_613832 != nil:
    section.add "X-Amz-Security-Token", valid_613832
  var valid_613833 = header.getOrDefault("X-Amz-Algorithm")
  valid_613833 = validateParameter(valid_613833, JString, required = false,
                                 default = nil)
  if valid_613833 != nil:
    section.add "X-Amz-Algorithm", valid_613833
  var valid_613834 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613834 = validateParameter(valid_613834, JString, required = false,
                                 default = nil)
  if valid_613834 != nil:
    section.add "X-Amz-SignedHeaders", valid_613834
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613835: Call_GetDeleteScheduledAction_613821; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified scheduled action.
  ## 
  let valid = call_613835.validator(path, query, header, formData, body)
  let scheme = call_613835.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613835.url(scheme.get, call_613835.host, call_613835.base,
                         call_613835.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613835, url, valid)

proc call*(call_613836: Call_GetDeleteScheduledAction_613821;
          ScheduledActionName: string; AutoScalingGroupName: string;
          Action: string = "DeleteScheduledAction"; Version: string = "2011-01-01"): Recallable =
  ## getDeleteScheduledAction
  ## Deletes the specified scheduled action.
  ##   ScheduledActionName: string (required)
  ##                      : The name of the action to delete.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613837 = newJObject()
  add(query_613837, "ScheduledActionName", newJString(ScheduledActionName))
  add(query_613837, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_613837, "Action", newJString(Action))
  add(query_613837, "Version", newJString(Version))
  result = call_613836.call(nil, query_613837, nil, nil, nil)

var getDeleteScheduledAction* = Call_GetDeleteScheduledAction_613821(
    name: "getDeleteScheduledAction", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DeleteScheduledAction",
    validator: validate_GetDeleteScheduledAction_613822, base: "/",
    url: url_GetDeleteScheduledAction_613823, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteTags_613872 = ref object of OpenApiRestCall_612658
proc url_PostDeleteTags_613874(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteTags_613873(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Deletes the specified tags.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613875 = query.getOrDefault("Action")
  valid_613875 = validateParameter(valid_613875, JString, required = true,
                                 default = newJString("DeleteTags"))
  if valid_613875 != nil:
    section.add "Action", valid_613875
  var valid_613876 = query.getOrDefault("Version")
  valid_613876 = validateParameter(valid_613876, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613876 != nil:
    section.add "Version", valid_613876
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613877 = header.getOrDefault("X-Amz-Signature")
  valid_613877 = validateParameter(valid_613877, JString, required = false,
                                 default = nil)
  if valid_613877 != nil:
    section.add "X-Amz-Signature", valid_613877
  var valid_613878 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613878 = validateParameter(valid_613878, JString, required = false,
                                 default = nil)
  if valid_613878 != nil:
    section.add "X-Amz-Content-Sha256", valid_613878
  var valid_613879 = header.getOrDefault("X-Amz-Date")
  valid_613879 = validateParameter(valid_613879, JString, required = false,
                                 default = nil)
  if valid_613879 != nil:
    section.add "X-Amz-Date", valid_613879
  var valid_613880 = header.getOrDefault("X-Amz-Credential")
  valid_613880 = validateParameter(valid_613880, JString, required = false,
                                 default = nil)
  if valid_613880 != nil:
    section.add "X-Amz-Credential", valid_613880
  var valid_613881 = header.getOrDefault("X-Amz-Security-Token")
  valid_613881 = validateParameter(valid_613881, JString, required = false,
                                 default = nil)
  if valid_613881 != nil:
    section.add "X-Amz-Security-Token", valid_613881
  var valid_613882 = header.getOrDefault("X-Amz-Algorithm")
  valid_613882 = validateParameter(valid_613882, JString, required = false,
                                 default = nil)
  if valid_613882 != nil:
    section.add "X-Amz-Algorithm", valid_613882
  var valid_613883 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613883 = validateParameter(valid_613883, JString, required = false,
                                 default = nil)
  if valid_613883 != nil:
    section.add "X-Amz-SignedHeaders", valid_613883
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray (required)
  ##       : One or more tags.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Tags` field"
  var valid_613884 = formData.getOrDefault("Tags")
  valid_613884 = validateParameter(valid_613884, JArray, required = true, default = nil)
  if valid_613884 != nil:
    section.add "Tags", valid_613884
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613885: Call_PostDeleteTags_613872; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified tags.
  ## 
  let valid = call_613885.validator(path, query, header, formData, body)
  let scheme = call_613885.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613885.url(scheme.get, call_613885.host, call_613885.base,
                         call_613885.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613885, url, valid)

proc call*(call_613886: Call_PostDeleteTags_613872; Tags: JsonNode;
          Action: string = "DeleteTags"; Version: string = "2011-01-01"): Recallable =
  ## postDeleteTags
  ## Deletes the specified tags.
  ##   Action: string (required)
  ##   Tags: JArray (required)
  ##       : One or more tags.
  ##   Version: string (required)
  var query_613887 = newJObject()
  var formData_613888 = newJObject()
  add(query_613887, "Action", newJString(Action))
  if Tags != nil:
    formData_613888.add "Tags", Tags
  add(query_613887, "Version", newJString(Version))
  result = call_613886.call(nil, query_613887, nil, formData_613888, nil)

var postDeleteTags* = Call_PostDeleteTags_613872(name: "postDeleteTags",
    meth: HttpMethod.HttpPost, host: "autoscaling.amazonaws.com",
    route: "/#Action=DeleteTags", validator: validate_PostDeleteTags_613873,
    base: "/", url: url_PostDeleteTags_613874, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteTags_613856 = ref object of OpenApiRestCall_612658
proc url_GetDeleteTags_613858(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteTags_613857(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified tags.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : One or more tags.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_613859 = query.getOrDefault("Tags")
  valid_613859 = validateParameter(valid_613859, JArray, required = true, default = nil)
  if valid_613859 != nil:
    section.add "Tags", valid_613859
  var valid_613860 = query.getOrDefault("Action")
  valid_613860 = validateParameter(valid_613860, JString, required = true,
                                 default = newJString("DeleteTags"))
  if valid_613860 != nil:
    section.add "Action", valid_613860
  var valid_613861 = query.getOrDefault("Version")
  valid_613861 = validateParameter(valid_613861, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613861 != nil:
    section.add "Version", valid_613861
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613862 = header.getOrDefault("X-Amz-Signature")
  valid_613862 = validateParameter(valid_613862, JString, required = false,
                                 default = nil)
  if valid_613862 != nil:
    section.add "X-Amz-Signature", valid_613862
  var valid_613863 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613863 = validateParameter(valid_613863, JString, required = false,
                                 default = nil)
  if valid_613863 != nil:
    section.add "X-Amz-Content-Sha256", valid_613863
  var valid_613864 = header.getOrDefault("X-Amz-Date")
  valid_613864 = validateParameter(valid_613864, JString, required = false,
                                 default = nil)
  if valid_613864 != nil:
    section.add "X-Amz-Date", valid_613864
  var valid_613865 = header.getOrDefault("X-Amz-Credential")
  valid_613865 = validateParameter(valid_613865, JString, required = false,
                                 default = nil)
  if valid_613865 != nil:
    section.add "X-Amz-Credential", valid_613865
  var valid_613866 = header.getOrDefault("X-Amz-Security-Token")
  valid_613866 = validateParameter(valid_613866, JString, required = false,
                                 default = nil)
  if valid_613866 != nil:
    section.add "X-Amz-Security-Token", valid_613866
  var valid_613867 = header.getOrDefault("X-Amz-Algorithm")
  valid_613867 = validateParameter(valid_613867, JString, required = false,
                                 default = nil)
  if valid_613867 != nil:
    section.add "X-Amz-Algorithm", valid_613867
  var valid_613868 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613868 = validateParameter(valid_613868, JString, required = false,
                                 default = nil)
  if valid_613868 != nil:
    section.add "X-Amz-SignedHeaders", valid_613868
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613869: Call_GetDeleteTags_613856; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified tags.
  ## 
  let valid = call_613869.validator(path, query, header, formData, body)
  let scheme = call_613869.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613869.url(scheme.get, call_613869.host, call_613869.base,
                         call_613869.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613869, url, valid)

proc call*(call_613870: Call_GetDeleteTags_613856; Tags: JsonNode;
          Action: string = "DeleteTags"; Version: string = "2011-01-01"): Recallable =
  ## getDeleteTags
  ## Deletes the specified tags.
  ##   Tags: JArray (required)
  ##       : One or more tags.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613871 = newJObject()
  if Tags != nil:
    query_613871.add "Tags", Tags
  add(query_613871, "Action", newJString(Action))
  add(query_613871, "Version", newJString(Version))
  result = call_613870.call(nil, query_613871, nil, nil, nil)

var getDeleteTags* = Call_GetDeleteTags_613856(name: "getDeleteTags",
    meth: HttpMethod.HttpGet, host: "autoscaling.amazonaws.com",
    route: "/#Action=DeleteTags", validator: validate_GetDeleteTags_613857,
    base: "/", url: url_GetDeleteTags_613858, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeAccountLimits_613904 = ref object of OpenApiRestCall_612658
proc url_PostDescribeAccountLimits_613906(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeAccountLimits_613905(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the current Amazon EC2 Auto Scaling resource limits for your AWS account.</p> <p>For information about requesting an increase in these limits, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613907 = query.getOrDefault("Action")
  valid_613907 = validateParameter(valid_613907, JString, required = true,
                                 default = newJString("DescribeAccountLimits"))
  if valid_613907 != nil:
    section.add "Action", valid_613907
  var valid_613908 = query.getOrDefault("Version")
  valid_613908 = validateParameter(valid_613908, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613908 != nil:
    section.add "Version", valid_613908
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613909 = header.getOrDefault("X-Amz-Signature")
  valid_613909 = validateParameter(valid_613909, JString, required = false,
                                 default = nil)
  if valid_613909 != nil:
    section.add "X-Amz-Signature", valid_613909
  var valid_613910 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613910 = validateParameter(valid_613910, JString, required = false,
                                 default = nil)
  if valid_613910 != nil:
    section.add "X-Amz-Content-Sha256", valid_613910
  var valid_613911 = header.getOrDefault("X-Amz-Date")
  valid_613911 = validateParameter(valid_613911, JString, required = false,
                                 default = nil)
  if valid_613911 != nil:
    section.add "X-Amz-Date", valid_613911
  var valid_613912 = header.getOrDefault("X-Amz-Credential")
  valid_613912 = validateParameter(valid_613912, JString, required = false,
                                 default = nil)
  if valid_613912 != nil:
    section.add "X-Amz-Credential", valid_613912
  var valid_613913 = header.getOrDefault("X-Amz-Security-Token")
  valid_613913 = validateParameter(valid_613913, JString, required = false,
                                 default = nil)
  if valid_613913 != nil:
    section.add "X-Amz-Security-Token", valid_613913
  var valid_613914 = header.getOrDefault("X-Amz-Algorithm")
  valid_613914 = validateParameter(valid_613914, JString, required = false,
                                 default = nil)
  if valid_613914 != nil:
    section.add "X-Amz-Algorithm", valid_613914
  var valid_613915 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613915 = validateParameter(valid_613915, JString, required = false,
                                 default = nil)
  if valid_613915 != nil:
    section.add "X-Amz-SignedHeaders", valid_613915
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613916: Call_PostDescribeAccountLimits_613904; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the current Amazon EC2 Auto Scaling resource limits for your AWS account.</p> <p>For information about requesting an increase in these limits, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_613916.validator(path, query, header, formData, body)
  let scheme = call_613916.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613916.url(scheme.get, call_613916.host, call_613916.base,
                         call_613916.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613916, url, valid)

proc call*(call_613917: Call_PostDescribeAccountLimits_613904;
          Action: string = "DescribeAccountLimits"; Version: string = "2011-01-01"): Recallable =
  ## postDescribeAccountLimits
  ## <p>Describes the current Amazon EC2 Auto Scaling resource limits for your AWS account.</p> <p>For information about requesting an increase in these limits, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613918 = newJObject()
  add(query_613918, "Action", newJString(Action))
  add(query_613918, "Version", newJString(Version))
  result = call_613917.call(nil, query_613918, nil, nil, nil)

var postDescribeAccountLimits* = Call_PostDescribeAccountLimits_613904(
    name: "postDescribeAccountLimits", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeAccountLimits",
    validator: validate_PostDescribeAccountLimits_613905, base: "/",
    url: url_PostDescribeAccountLimits_613906,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeAccountLimits_613889 = ref object of OpenApiRestCall_612658
proc url_GetDescribeAccountLimits_613891(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeAccountLimits_613890(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the current Amazon EC2 Auto Scaling resource limits for your AWS account.</p> <p>For information about requesting an increase in these limits, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613892 = query.getOrDefault("Action")
  valid_613892 = validateParameter(valid_613892, JString, required = true,
                                 default = newJString("DescribeAccountLimits"))
  if valid_613892 != nil:
    section.add "Action", valid_613892
  var valid_613893 = query.getOrDefault("Version")
  valid_613893 = validateParameter(valid_613893, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613893 != nil:
    section.add "Version", valid_613893
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613894 = header.getOrDefault("X-Amz-Signature")
  valid_613894 = validateParameter(valid_613894, JString, required = false,
                                 default = nil)
  if valid_613894 != nil:
    section.add "X-Amz-Signature", valid_613894
  var valid_613895 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613895 = validateParameter(valid_613895, JString, required = false,
                                 default = nil)
  if valid_613895 != nil:
    section.add "X-Amz-Content-Sha256", valid_613895
  var valid_613896 = header.getOrDefault("X-Amz-Date")
  valid_613896 = validateParameter(valid_613896, JString, required = false,
                                 default = nil)
  if valid_613896 != nil:
    section.add "X-Amz-Date", valid_613896
  var valid_613897 = header.getOrDefault("X-Amz-Credential")
  valid_613897 = validateParameter(valid_613897, JString, required = false,
                                 default = nil)
  if valid_613897 != nil:
    section.add "X-Amz-Credential", valid_613897
  var valid_613898 = header.getOrDefault("X-Amz-Security-Token")
  valid_613898 = validateParameter(valid_613898, JString, required = false,
                                 default = nil)
  if valid_613898 != nil:
    section.add "X-Amz-Security-Token", valid_613898
  var valid_613899 = header.getOrDefault("X-Amz-Algorithm")
  valid_613899 = validateParameter(valid_613899, JString, required = false,
                                 default = nil)
  if valid_613899 != nil:
    section.add "X-Amz-Algorithm", valid_613899
  var valid_613900 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613900 = validateParameter(valid_613900, JString, required = false,
                                 default = nil)
  if valid_613900 != nil:
    section.add "X-Amz-SignedHeaders", valid_613900
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613901: Call_GetDescribeAccountLimits_613889; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the current Amazon EC2 Auto Scaling resource limits for your AWS account.</p> <p>For information about requesting an increase in these limits, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_613901.validator(path, query, header, formData, body)
  let scheme = call_613901.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613901.url(scheme.get, call_613901.host, call_613901.base,
                         call_613901.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613901, url, valid)

proc call*(call_613902: Call_GetDescribeAccountLimits_613889;
          Action: string = "DescribeAccountLimits"; Version: string = "2011-01-01"): Recallable =
  ## getDescribeAccountLimits
  ## <p>Describes the current Amazon EC2 Auto Scaling resource limits for your AWS account.</p> <p>For information about requesting an increase in these limits, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613903 = newJObject()
  add(query_613903, "Action", newJString(Action))
  add(query_613903, "Version", newJString(Version))
  result = call_613902.call(nil, query_613903, nil, nil, nil)

var getDescribeAccountLimits* = Call_GetDescribeAccountLimits_613889(
    name: "getDescribeAccountLimits", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeAccountLimits",
    validator: validate_GetDescribeAccountLimits_613890, base: "/",
    url: url_GetDescribeAccountLimits_613891, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeAdjustmentTypes_613934 = ref object of OpenApiRestCall_612658
proc url_PostDescribeAdjustmentTypes_613936(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeAdjustmentTypes_613935(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the policy adjustment types for use with <a>PutScalingPolicy</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613937 = query.getOrDefault("Action")
  valid_613937 = validateParameter(valid_613937, JString, required = true, default = newJString(
      "DescribeAdjustmentTypes"))
  if valid_613937 != nil:
    section.add "Action", valid_613937
  var valid_613938 = query.getOrDefault("Version")
  valid_613938 = validateParameter(valid_613938, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613938 != nil:
    section.add "Version", valid_613938
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613939 = header.getOrDefault("X-Amz-Signature")
  valid_613939 = validateParameter(valid_613939, JString, required = false,
                                 default = nil)
  if valid_613939 != nil:
    section.add "X-Amz-Signature", valid_613939
  var valid_613940 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613940 = validateParameter(valid_613940, JString, required = false,
                                 default = nil)
  if valid_613940 != nil:
    section.add "X-Amz-Content-Sha256", valid_613940
  var valid_613941 = header.getOrDefault("X-Amz-Date")
  valid_613941 = validateParameter(valid_613941, JString, required = false,
                                 default = nil)
  if valid_613941 != nil:
    section.add "X-Amz-Date", valid_613941
  var valid_613942 = header.getOrDefault("X-Amz-Credential")
  valid_613942 = validateParameter(valid_613942, JString, required = false,
                                 default = nil)
  if valid_613942 != nil:
    section.add "X-Amz-Credential", valid_613942
  var valid_613943 = header.getOrDefault("X-Amz-Security-Token")
  valid_613943 = validateParameter(valid_613943, JString, required = false,
                                 default = nil)
  if valid_613943 != nil:
    section.add "X-Amz-Security-Token", valid_613943
  var valid_613944 = header.getOrDefault("X-Amz-Algorithm")
  valid_613944 = validateParameter(valid_613944, JString, required = false,
                                 default = nil)
  if valid_613944 != nil:
    section.add "X-Amz-Algorithm", valid_613944
  var valid_613945 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613945 = validateParameter(valid_613945, JString, required = false,
                                 default = nil)
  if valid_613945 != nil:
    section.add "X-Amz-SignedHeaders", valid_613945
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613946: Call_PostDescribeAdjustmentTypes_613934; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the policy adjustment types for use with <a>PutScalingPolicy</a>.
  ## 
  let valid = call_613946.validator(path, query, header, formData, body)
  let scheme = call_613946.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613946.url(scheme.get, call_613946.host, call_613946.base,
                         call_613946.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613946, url, valid)

proc call*(call_613947: Call_PostDescribeAdjustmentTypes_613934;
          Action: string = "DescribeAdjustmentTypes"; Version: string = "2011-01-01"): Recallable =
  ## postDescribeAdjustmentTypes
  ## Describes the policy adjustment types for use with <a>PutScalingPolicy</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613948 = newJObject()
  add(query_613948, "Action", newJString(Action))
  add(query_613948, "Version", newJString(Version))
  result = call_613947.call(nil, query_613948, nil, nil, nil)

var postDescribeAdjustmentTypes* = Call_PostDescribeAdjustmentTypes_613934(
    name: "postDescribeAdjustmentTypes", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeAdjustmentTypes",
    validator: validate_PostDescribeAdjustmentTypes_613935, base: "/",
    url: url_PostDescribeAdjustmentTypes_613936,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeAdjustmentTypes_613919 = ref object of OpenApiRestCall_612658
proc url_GetDescribeAdjustmentTypes_613921(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeAdjustmentTypes_613920(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the policy adjustment types for use with <a>PutScalingPolicy</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613922 = query.getOrDefault("Action")
  valid_613922 = validateParameter(valid_613922, JString, required = true, default = newJString(
      "DescribeAdjustmentTypes"))
  if valid_613922 != nil:
    section.add "Action", valid_613922
  var valid_613923 = query.getOrDefault("Version")
  valid_613923 = validateParameter(valid_613923, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613923 != nil:
    section.add "Version", valid_613923
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613924 = header.getOrDefault("X-Amz-Signature")
  valid_613924 = validateParameter(valid_613924, JString, required = false,
                                 default = nil)
  if valid_613924 != nil:
    section.add "X-Amz-Signature", valid_613924
  var valid_613925 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613925 = validateParameter(valid_613925, JString, required = false,
                                 default = nil)
  if valid_613925 != nil:
    section.add "X-Amz-Content-Sha256", valid_613925
  var valid_613926 = header.getOrDefault("X-Amz-Date")
  valid_613926 = validateParameter(valid_613926, JString, required = false,
                                 default = nil)
  if valid_613926 != nil:
    section.add "X-Amz-Date", valid_613926
  var valid_613927 = header.getOrDefault("X-Amz-Credential")
  valid_613927 = validateParameter(valid_613927, JString, required = false,
                                 default = nil)
  if valid_613927 != nil:
    section.add "X-Amz-Credential", valid_613927
  var valid_613928 = header.getOrDefault("X-Amz-Security-Token")
  valid_613928 = validateParameter(valid_613928, JString, required = false,
                                 default = nil)
  if valid_613928 != nil:
    section.add "X-Amz-Security-Token", valid_613928
  var valid_613929 = header.getOrDefault("X-Amz-Algorithm")
  valid_613929 = validateParameter(valid_613929, JString, required = false,
                                 default = nil)
  if valid_613929 != nil:
    section.add "X-Amz-Algorithm", valid_613929
  var valid_613930 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613930 = validateParameter(valid_613930, JString, required = false,
                                 default = nil)
  if valid_613930 != nil:
    section.add "X-Amz-SignedHeaders", valid_613930
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613931: Call_GetDescribeAdjustmentTypes_613919; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the policy adjustment types for use with <a>PutScalingPolicy</a>.
  ## 
  let valid = call_613931.validator(path, query, header, formData, body)
  let scheme = call_613931.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613931.url(scheme.get, call_613931.host, call_613931.base,
                         call_613931.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613931, url, valid)

proc call*(call_613932: Call_GetDescribeAdjustmentTypes_613919;
          Action: string = "DescribeAdjustmentTypes"; Version: string = "2011-01-01"): Recallable =
  ## getDescribeAdjustmentTypes
  ## Describes the policy adjustment types for use with <a>PutScalingPolicy</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613933 = newJObject()
  add(query_613933, "Action", newJString(Action))
  add(query_613933, "Version", newJString(Version))
  result = call_613932.call(nil, query_613933, nil, nil, nil)

var getDescribeAdjustmentTypes* = Call_GetDescribeAdjustmentTypes_613919(
    name: "getDescribeAdjustmentTypes", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeAdjustmentTypes",
    validator: validate_GetDescribeAdjustmentTypes_613920, base: "/",
    url: url_GetDescribeAdjustmentTypes_613921,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeAutoScalingGroups_613967 = ref object of OpenApiRestCall_612658
proc url_PostDescribeAutoScalingGroups_613969(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeAutoScalingGroups_613968(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more Auto Scaling groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613970 = query.getOrDefault("Action")
  valid_613970 = validateParameter(valid_613970, JString, required = true, default = newJString(
      "DescribeAutoScalingGroups"))
  if valid_613970 != nil:
    section.add "Action", valid_613970
  var valid_613971 = query.getOrDefault("Version")
  valid_613971 = validateParameter(valid_613971, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613971 != nil:
    section.add "Version", valid_613971
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613972 = header.getOrDefault("X-Amz-Signature")
  valid_613972 = validateParameter(valid_613972, JString, required = false,
                                 default = nil)
  if valid_613972 != nil:
    section.add "X-Amz-Signature", valid_613972
  var valid_613973 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613973 = validateParameter(valid_613973, JString, required = false,
                                 default = nil)
  if valid_613973 != nil:
    section.add "X-Amz-Content-Sha256", valid_613973
  var valid_613974 = header.getOrDefault("X-Amz-Date")
  valid_613974 = validateParameter(valid_613974, JString, required = false,
                                 default = nil)
  if valid_613974 != nil:
    section.add "X-Amz-Date", valid_613974
  var valid_613975 = header.getOrDefault("X-Amz-Credential")
  valid_613975 = validateParameter(valid_613975, JString, required = false,
                                 default = nil)
  if valid_613975 != nil:
    section.add "X-Amz-Credential", valid_613975
  var valid_613976 = header.getOrDefault("X-Amz-Security-Token")
  valid_613976 = validateParameter(valid_613976, JString, required = false,
                                 default = nil)
  if valid_613976 != nil:
    section.add "X-Amz-Security-Token", valid_613976
  var valid_613977 = header.getOrDefault("X-Amz-Algorithm")
  valid_613977 = validateParameter(valid_613977, JString, required = false,
                                 default = nil)
  if valid_613977 != nil:
    section.add "X-Amz-Algorithm", valid_613977
  var valid_613978 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613978 = validateParameter(valid_613978, JString, required = false,
                                 default = nil)
  if valid_613978 != nil:
    section.add "X-Amz-SignedHeaders", valid_613978
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupNames: JArray
  ##                        : <p>The names of the Auto Scaling groups. Each name can be a maximum of 1600 characters. By default, you can only specify up to 50 names. You can optionally increase this limit using the <code>MaxRecords</code> parameter.</p> <p>If you omit this parameter, all Auto Scaling groups are described.</p>
  section = newJObject()
  var valid_613979 = formData.getOrDefault("NextToken")
  valid_613979 = validateParameter(valid_613979, JString, required = false,
                                 default = nil)
  if valid_613979 != nil:
    section.add "NextToken", valid_613979
  var valid_613980 = formData.getOrDefault("MaxRecords")
  valid_613980 = validateParameter(valid_613980, JInt, required = false, default = nil)
  if valid_613980 != nil:
    section.add "MaxRecords", valid_613980
  var valid_613981 = formData.getOrDefault("AutoScalingGroupNames")
  valid_613981 = validateParameter(valid_613981, JArray, required = false,
                                 default = nil)
  if valid_613981 != nil:
    section.add "AutoScalingGroupNames", valid_613981
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613982: Call_PostDescribeAutoScalingGroups_613967; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes one or more Auto Scaling groups.
  ## 
  let valid = call_613982.validator(path, query, header, formData, body)
  let scheme = call_613982.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613982.url(scheme.get, call_613982.host, call_613982.base,
                         call_613982.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613982, url, valid)

proc call*(call_613983: Call_PostDescribeAutoScalingGroups_613967;
          NextToken: string = ""; MaxRecords: int = 0;
          AutoScalingGroupNames: JsonNode = nil;
          Action: string = "DescribeAutoScalingGroups";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeAutoScalingGroups
  ## Describes one or more Auto Scaling groups.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupNames: JArray
  ##                        : <p>The names of the Auto Scaling groups. Each name can be a maximum of 1600 characters. By default, you can only specify up to 50 names. You can optionally increase this limit using the <code>MaxRecords</code> parameter.</p> <p>If you omit this parameter, all Auto Scaling groups are described.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613984 = newJObject()
  var formData_613985 = newJObject()
  add(formData_613985, "NextToken", newJString(NextToken))
  add(formData_613985, "MaxRecords", newJInt(MaxRecords))
  if AutoScalingGroupNames != nil:
    formData_613985.add "AutoScalingGroupNames", AutoScalingGroupNames
  add(query_613984, "Action", newJString(Action))
  add(query_613984, "Version", newJString(Version))
  result = call_613983.call(nil, query_613984, nil, formData_613985, nil)

var postDescribeAutoScalingGroups* = Call_PostDescribeAutoScalingGroups_613967(
    name: "postDescribeAutoScalingGroups", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeAutoScalingGroups",
    validator: validate_PostDescribeAutoScalingGroups_613968, base: "/",
    url: url_PostDescribeAutoScalingGroups_613969,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeAutoScalingGroups_613949 = ref object of OpenApiRestCall_612658
proc url_GetDescribeAutoScalingGroups_613951(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeAutoScalingGroups_613950(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more Auto Scaling groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   AutoScalingGroupNames: JArray
  ##                        : <p>The names of the Auto Scaling groups. Each name can be a maximum of 1600 characters. By default, you can only specify up to 50 names. You can optionally increase this limit using the <code>MaxRecords</code> parameter.</p> <p>If you omit this parameter, all Auto Scaling groups are described.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  section = newJObject()
  var valid_613952 = query.getOrDefault("NextToken")
  valid_613952 = validateParameter(valid_613952, JString, required = false,
                                 default = nil)
  if valid_613952 != nil:
    section.add "NextToken", valid_613952
  var valid_613953 = query.getOrDefault("AutoScalingGroupNames")
  valid_613953 = validateParameter(valid_613953, JArray, required = false,
                                 default = nil)
  if valid_613953 != nil:
    section.add "AutoScalingGroupNames", valid_613953
  var valid_613954 = query.getOrDefault("Action")
  valid_613954 = validateParameter(valid_613954, JString, required = true, default = newJString(
      "DescribeAutoScalingGroups"))
  if valid_613954 != nil:
    section.add "Action", valid_613954
  var valid_613955 = query.getOrDefault("Version")
  valid_613955 = validateParameter(valid_613955, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613955 != nil:
    section.add "Version", valid_613955
  var valid_613956 = query.getOrDefault("MaxRecords")
  valid_613956 = validateParameter(valid_613956, JInt, required = false, default = nil)
  if valid_613956 != nil:
    section.add "MaxRecords", valid_613956
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613957 = header.getOrDefault("X-Amz-Signature")
  valid_613957 = validateParameter(valid_613957, JString, required = false,
                                 default = nil)
  if valid_613957 != nil:
    section.add "X-Amz-Signature", valid_613957
  var valid_613958 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613958 = validateParameter(valid_613958, JString, required = false,
                                 default = nil)
  if valid_613958 != nil:
    section.add "X-Amz-Content-Sha256", valid_613958
  var valid_613959 = header.getOrDefault("X-Amz-Date")
  valid_613959 = validateParameter(valid_613959, JString, required = false,
                                 default = nil)
  if valid_613959 != nil:
    section.add "X-Amz-Date", valid_613959
  var valid_613960 = header.getOrDefault("X-Amz-Credential")
  valid_613960 = validateParameter(valid_613960, JString, required = false,
                                 default = nil)
  if valid_613960 != nil:
    section.add "X-Amz-Credential", valid_613960
  var valid_613961 = header.getOrDefault("X-Amz-Security-Token")
  valid_613961 = validateParameter(valid_613961, JString, required = false,
                                 default = nil)
  if valid_613961 != nil:
    section.add "X-Amz-Security-Token", valid_613961
  var valid_613962 = header.getOrDefault("X-Amz-Algorithm")
  valid_613962 = validateParameter(valid_613962, JString, required = false,
                                 default = nil)
  if valid_613962 != nil:
    section.add "X-Amz-Algorithm", valid_613962
  var valid_613963 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613963 = validateParameter(valid_613963, JString, required = false,
                                 default = nil)
  if valid_613963 != nil:
    section.add "X-Amz-SignedHeaders", valid_613963
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613964: Call_GetDescribeAutoScalingGroups_613949; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes one or more Auto Scaling groups.
  ## 
  let valid = call_613964.validator(path, query, header, formData, body)
  let scheme = call_613964.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613964.url(scheme.get, call_613964.host, call_613964.base,
                         call_613964.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613964, url, valid)

proc call*(call_613965: Call_GetDescribeAutoScalingGroups_613949;
          NextToken: string = ""; AutoScalingGroupNames: JsonNode = nil;
          Action: string = "DescribeAutoScalingGroups";
          Version: string = "2011-01-01"; MaxRecords: int = 0): Recallable =
  ## getDescribeAutoScalingGroups
  ## Describes one or more Auto Scaling groups.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   AutoScalingGroupNames: JArray
  ##                        : <p>The names of the Auto Scaling groups. Each name can be a maximum of 1600 characters. By default, you can only specify up to 50 names. You can optionally increase this limit using the <code>MaxRecords</code> parameter.</p> <p>If you omit this parameter, all Auto Scaling groups are described.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  var query_613966 = newJObject()
  add(query_613966, "NextToken", newJString(NextToken))
  if AutoScalingGroupNames != nil:
    query_613966.add "AutoScalingGroupNames", AutoScalingGroupNames
  add(query_613966, "Action", newJString(Action))
  add(query_613966, "Version", newJString(Version))
  add(query_613966, "MaxRecords", newJInt(MaxRecords))
  result = call_613965.call(nil, query_613966, nil, nil, nil)

var getDescribeAutoScalingGroups* = Call_GetDescribeAutoScalingGroups_613949(
    name: "getDescribeAutoScalingGroups", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeAutoScalingGroups",
    validator: validate_GetDescribeAutoScalingGroups_613950, base: "/",
    url: url_GetDescribeAutoScalingGroups_613951,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeAutoScalingInstances_614004 = ref object of OpenApiRestCall_612658
proc url_PostDescribeAutoScalingInstances_614006(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeAutoScalingInstances_614005(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more Auto Scaling instances.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614007 = query.getOrDefault("Action")
  valid_614007 = validateParameter(valid_614007, JString, required = true, default = newJString(
      "DescribeAutoScalingInstances"))
  if valid_614007 != nil:
    section.add "Action", valid_614007
  var valid_614008 = query.getOrDefault("Version")
  valid_614008 = validateParameter(valid_614008, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_614008 != nil:
    section.add "Version", valid_614008
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614009 = header.getOrDefault("X-Amz-Signature")
  valid_614009 = validateParameter(valid_614009, JString, required = false,
                                 default = nil)
  if valid_614009 != nil:
    section.add "X-Amz-Signature", valid_614009
  var valid_614010 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614010 = validateParameter(valid_614010, JString, required = false,
                                 default = nil)
  if valid_614010 != nil:
    section.add "X-Amz-Content-Sha256", valid_614010
  var valid_614011 = header.getOrDefault("X-Amz-Date")
  valid_614011 = validateParameter(valid_614011, JString, required = false,
                                 default = nil)
  if valid_614011 != nil:
    section.add "X-Amz-Date", valid_614011
  var valid_614012 = header.getOrDefault("X-Amz-Credential")
  valid_614012 = validateParameter(valid_614012, JString, required = false,
                                 default = nil)
  if valid_614012 != nil:
    section.add "X-Amz-Credential", valid_614012
  var valid_614013 = header.getOrDefault("X-Amz-Security-Token")
  valid_614013 = validateParameter(valid_614013, JString, required = false,
                                 default = nil)
  if valid_614013 != nil:
    section.add "X-Amz-Security-Token", valid_614013
  var valid_614014 = header.getOrDefault("X-Amz-Algorithm")
  valid_614014 = validateParameter(valid_614014, JString, required = false,
                                 default = nil)
  if valid_614014 != nil:
    section.add "X-Amz-Algorithm", valid_614014
  var valid_614015 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614015 = validateParameter(valid_614015, JString, required = false,
                                 default = nil)
  if valid_614015 != nil:
    section.add "X-Amz-SignedHeaders", valid_614015
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>50</code>.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to <code>MaxRecords</code> IDs. If you omit this parameter, all Auto Scaling instances are described. If you specify an ID that does not exist, it is ignored with no error.
  section = newJObject()
  var valid_614016 = formData.getOrDefault("NextToken")
  valid_614016 = validateParameter(valid_614016, JString, required = false,
                                 default = nil)
  if valid_614016 != nil:
    section.add "NextToken", valid_614016
  var valid_614017 = formData.getOrDefault("MaxRecords")
  valid_614017 = validateParameter(valid_614017, JInt, required = false, default = nil)
  if valid_614017 != nil:
    section.add "MaxRecords", valid_614017
  var valid_614018 = formData.getOrDefault("InstanceIds")
  valid_614018 = validateParameter(valid_614018, JArray, required = false,
                                 default = nil)
  if valid_614018 != nil:
    section.add "InstanceIds", valid_614018
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614019: Call_PostDescribeAutoScalingInstances_614004;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes one or more Auto Scaling instances.
  ## 
  let valid = call_614019.validator(path, query, header, formData, body)
  let scheme = call_614019.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614019.url(scheme.get, call_614019.host, call_614019.base,
                         call_614019.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614019, url, valid)

proc call*(call_614020: Call_PostDescribeAutoScalingInstances_614004;
          NextToken: string = ""; MaxRecords: int = 0; InstanceIds: JsonNode = nil;
          Action: string = "DescribeAutoScalingInstances";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeAutoScalingInstances
  ## Describes one or more Auto Scaling instances.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>50</code>.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to <code>MaxRecords</code> IDs. If you omit this parameter, all Auto Scaling instances are described. If you specify an ID that does not exist, it is ignored with no error.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614021 = newJObject()
  var formData_614022 = newJObject()
  add(formData_614022, "NextToken", newJString(NextToken))
  add(formData_614022, "MaxRecords", newJInt(MaxRecords))
  if InstanceIds != nil:
    formData_614022.add "InstanceIds", InstanceIds
  add(query_614021, "Action", newJString(Action))
  add(query_614021, "Version", newJString(Version))
  result = call_614020.call(nil, query_614021, nil, formData_614022, nil)

var postDescribeAutoScalingInstances* = Call_PostDescribeAutoScalingInstances_614004(
    name: "postDescribeAutoScalingInstances", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeAutoScalingInstances",
    validator: validate_PostDescribeAutoScalingInstances_614005, base: "/",
    url: url_PostDescribeAutoScalingInstances_614006,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeAutoScalingInstances_613986 = ref object of OpenApiRestCall_612658
proc url_GetDescribeAutoScalingInstances_613988(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeAutoScalingInstances_613987(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more Auto Scaling instances.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to <code>MaxRecords</code> IDs. If you omit this parameter, all Auto Scaling instances are described. If you specify an ID that does not exist, it is ignored with no error.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>50</code>.
  section = newJObject()
  var valid_613989 = query.getOrDefault("InstanceIds")
  valid_613989 = validateParameter(valid_613989, JArray, required = false,
                                 default = nil)
  if valid_613989 != nil:
    section.add "InstanceIds", valid_613989
  var valid_613990 = query.getOrDefault("NextToken")
  valid_613990 = validateParameter(valid_613990, JString, required = false,
                                 default = nil)
  if valid_613990 != nil:
    section.add "NextToken", valid_613990
  var valid_613991 = query.getOrDefault("Action")
  valid_613991 = validateParameter(valid_613991, JString, required = true, default = newJString(
      "DescribeAutoScalingInstances"))
  if valid_613991 != nil:
    section.add "Action", valid_613991
  var valid_613992 = query.getOrDefault("Version")
  valid_613992 = validateParameter(valid_613992, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613992 != nil:
    section.add "Version", valid_613992
  var valid_613993 = query.getOrDefault("MaxRecords")
  valid_613993 = validateParameter(valid_613993, JInt, required = false, default = nil)
  if valid_613993 != nil:
    section.add "MaxRecords", valid_613993
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613994 = header.getOrDefault("X-Amz-Signature")
  valid_613994 = validateParameter(valid_613994, JString, required = false,
                                 default = nil)
  if valid_613994 != nil:
    section.add "X-Amz-Signature", valid_613994
  var valid_613995 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613995 = validateParameter(valid_613995, JString, required = false,
                                 default = nil)
  if valid_613995 != nil:
    section.add "X-Amz-Content-Sha256", valid_613995
  var valid_613996 = header.getOrDefault("X-Amz-Date")
  valid_613996 = validateParameter(valid_613996, JString, required = false,
                                 default = nil)
  if valid_613996 != nil:
    section.add "X-Amz-Date", valid_613996
  var valid_613997 = header.getOrDefault("X-Amz-Credential")
  valid_613997 = validateParameter(valid_613997, JString, required = false,
                                 default = nil)
  if valid_613997 != nil:
    section.add "X-Amz-Credential", valid_613997
  var valid_613998 = header.getOrDefault("X-Amz-Security-Token")
  valid_613998 = validateParameter(valid_613998, JString, required = false,
                                 default = nil)
  if valid_613998 != nil:
    section.add "X-Amz-Security-Token", valid_613998
  var valid_613999 = header.getOrDefault("X-Amz-Algorithm")
  valid_613999 = validateParameter(valid_613999, JString, required = false,
                                 default = nil)
  if valid_613999 != nil:
    section.add "X-Amz-Algorithm", valid_613999
  var valid_614000 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614000 = validateParameter(valid_614000, JString, required = false,
                                 default = nil)
  if valid_614000 != nil:
    section.add "X-Amz-SignedHeaders", valid_614000
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614001: Call_GetDescribeAutoScalingInstances_613986;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes one or more Auto Scaling instances.
  ## 
  let valid = call_614001.validator(path, query, header, formData, body)
  let scheme = call_614001.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614001.url(scheme.get, call_614001.host, call_614001.base,
                         call_614001.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614001, url, valid)

proc call*(call_614002: Call_GetDescribeAutoScalingInstances_613986;
          InstanceIds: JsonNode = nil; NextToken: string = "";
          Action: string = "DescribeAutoScalingInstances";
          Version: string = "2011-01-01"; MaxRecords: int = 0): Recallable =
  ## getDescribeAutoScalingInstances
  ## Describes one or more Auto Scaling instances.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to <code>MaxRecords</code> IDs. If you omit this parameter, all Auto Scaling instances are described. If you specify an ID that does not exist, it is ignored with no error.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>50</code>.
  var query_614003 = newJObject()
  if InstanceIds != nil:
    query_614003.add "InstanceIds", InstanceIds
  add(query_614003, "NextToken", newJString(NextToken))
  add(query_614003, "Action", newJString(Action))
  add(query_614003, "Version", newJString(Version))
  add(query_614003, "MaxRecords", newJInt(MaxRecords))
  result = call_614002.call(nil, query_614003, nil, nil, nil)

var getDescribeAutoScalingInstances* = Call_GetDescribeAutoScalingInstances_613986(
    name: "getDescribeAutoScalingInstances", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeAutoScalingInstances",
    validator: validate_GetDescribeAutoScalingInstances_613987, base: "/",
    url: url_GetDescribeAutoScalingInstances_613988,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeAutoScalingNotificationTypes_614038 = ref object of OpenApiRestCall_612658
proc url_PostDescribeAutoScalingNotificationTypes_614040(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeAutoScalingNotificationTypes_614039(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the notification types that are supported by Amazon EC2 Auto Scaling.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614041 = query.getOrDefault("Action")
  valid_614041 = validateParameter(valid_614041, JString, required = true, default = newJString(
      "DescribeAutoScalingNotificationTypes"))
  if valid_614041 != nil:
    section.add "Action", valid_614041
  var valid_614042 = query.getOrDefault("Version")
  valid_614042 = validateParameter(valid_614042, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_614042 != nil:
    section.add "Version", valid_614042
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614043 = header.getOrDefault("X-Amz-Signature")
  valid_614043 = validateParameter(valid_614043, JString, required = false,
                                 default = nil)
  if valid_614043 != nil:
    section.add "X-Amz-Signature", valid_614043
  var valid_614044 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614044 = validateParameter(valid_614044, JString, required = false,
                                 default = nil)
  if valid_614044 != nil:
    section.add "X-Amz-Content-Sha256", valid_614044
  var valid_614045 = header.getOrDefault("X-Amz-Date")
  valid_614045 = validateParameter(valid_614045, JString, required = false,
                                 default = nil)
  if valid_614045 != nil:
    section.add "X-Amz-Date", valid_614045
  var valid_614046 = header.getOrDefault("X-Amz-Credential")
  valid_614046 = validateParameter(valid_614046, JString, required = false,
                                 default = nil)
  if valid_614046 != nil:
    section.add "X-Amz-Credential", valid_614046
  var valid_614047 = header.getOrDefault("X-Amz-Security-Token")
  valid_614047 = validateParameter(valid_614047, JString, required = false,
                                 default = nil)
  if valid_614047 != nil:
    section.add "X-Amz-Security-Token", valid_614047
  var valid_614048 = header.getOrDefault("X-Amz-Algorithm")
  valid_614048 = validateParameter(valid_614048, JString, required = false,
                                 default = nil)
  if valid_614048 != nil:
    section.add "X-Amz-Algorithm", valid_614048
  var valid_614049 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614049 = validateParameter(valid_614049, JString, required = false,
                                 default = nil)
  if valid_614049 != nil:
    section.add "X-Amz-SignedHeaders", valid_614049
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614050: Call_PostDescribeAutoScalingNotificationTypes_614038;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the notification types that are supported by Amazon EC2 Auto Scaling.
  ## 
  let valid = call_614050.validator(path, query, header, formData, body)
  let scheme = call_614050.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614050.url(scheme.get, call_614050.host, call_614050.base,
                         call_614050.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614050, url, valid)

proc call*(call_614051: Call_PostDescribeAutoScalingNotificationTypes_614038;
          Action: string = "DescribeAutoScalingNotificationTypes";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeAutoScalingNotificationTypes
  ## Describes the notification types that are supported by Amazon EC2 Auto Scaling.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614052 = newJObject()
  add(query_614052, "Action", newJString(Action))
  add(query_614052, "Version", newJString(Version))
  result = call_614051.call(nil, query_614052, nil, nil, nil)

var postDescribeAutoScalingNotificationTypes* = Call_PostDescribeAutoScalingNotificationTypes_614038(
    name: "postDescribeAutoScalingNotificationTypes", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeAutoScalingNotificationTypes",
    validator: validate_PostDescribeAutoScalingNotificationTypes_614039,
    base: "/", url: url_PostDescribeAutoScalingNotificationTypes_614040,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeAutoScalingNotificationTypes_614023 = ref object of OpenApiRestCall_612658
proc url_GetDescribeAutoScalingNotificationTypes_614025(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeAutoScalingNotificationTypes_614024(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the notification types that are supported by Amazon EC2 Auto Scaling.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614026 = query.getOrDefault("Action")
  valid_614026 = validateParameter(valid_614026, JString, required = true, default = newJString(
      "DescribeAutoScalingNotificationTypes"))
  if valid_614026 != nil:
    section.add "Action", valid_614026
  var valid_614027 = query.getOrDefault("Version")
  valid_614027 = validateParameter(valid_614027, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_614027 != nil:
    section.add "Version", valid_614027
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614028 = header.getOrDefault("X-Amz-Signature")
  valid_614028 = validateParameter(valid_614028, JString, required = false,
                                 default = nil)
  if valid_614028 != nil:
    section.add "X-Amz-Signature", valid_614028
  var valid_614029 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614029 = validateParameter(valid_614029, JString, required = false,
                                 default = nil)
  if valid_614029 != nil:
    section.add "X-Amz-Content-Sha256", valid_614029
  var valid_614030 = header.getOrDefault("X-Amz-Date")
  valid_614030 = validateParameter(valid_614030, JString, required = false,
                                 default = nil)
  if valid_614030 != nil:
    section.add "X-Amz-Date", valid_614030
  var valid_614031 = header.getOrDefault("X-Amz-Credential")
  valid_614031 = validateParameter(valid_614031, JString, required = false,
                                 default = nil)
  if valid_614031 != nil:
    section.add "X-Amz-Credential", valid_614031
  var valid_614032 = header.getOrDefault("X-Amz-Security-Token")
  valid_614032 = validateParameter(valid_614032, JString, required = false,
                                 default = nil)
  if valid_614032 != nil:
    section.add "X-Amz-Security-Token", valid_614032
  var valid_614033 = header.getOrDefault("X-Amz-Algorithm")
  valid_614033 = validateParameter(valid_614033, JString, required = false,
                                 default = nil)
  if valid_614033 != nil:
    section.add "X-Amz-Algorithm", valid_614033
  var valid_614034 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614034 = validateParameter(valid_614034, JString, required = false,
                                 default = nil)
  if valid_614034 != nil:
    section.add "X-Amz-SignedHeaders", valid_614034
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614035: Call_GetDescribeAutoScalingNotificationTypes_614023;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the notification types that are supported by Amazon EC2 Auto Scaling.
  ## 
  let valid = call_614035.validator(path, query, header, formData, body)
  let scheme = call_614035.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614035.url(scheme.get, call_614035.host, call_614035.base,
                         call_614035.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614035, url, valid)

proc call*(call_614036: Call_GetDescribeAutoScalingNotificationTypes_614023;
          Action: string = "DescribeAutoScalingNotificationTypes";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeAutoScalingNotificationTypes
  ## Describes the notification types that are supported by Amazon EC2 Auto Scaling.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614037 = newJObject()
  add(query_614037, "Action", newJString(Action))
  add(query_614037, "Version", newJString(Version))
  result = call_614036.call(nil, query_614037, nil, nil, nil)

var getDescribeAutoScalingNotificationTypes* = Call_GetDescribeAutoScalingNotificationTypes_614023(
    name: "getDescribeAutoScalingNotificationTypes", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeAutoScalingNotificationTypes",
    validator: validate_GetDescribeAutoScalingNotificationTypes_614024, base: "/",
    url: url_GetDescribeAutoScalingNotificationTypes_614025,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeLaunchConfigurations_614071 = ref object of OpenApiRestCall_612658
proc url_PostDescribeLaunchConfigurations_614073(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeLaunchConfigurations_614072(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more launch configurations.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614074 = query.getOrDefault("Action")
  valid_614074 = validateParameter(valid_614074, JString, required = true, default = newJString(
      "DescribeLaunchConfigurations"))
  if valid_614074 != nil:
    section.add "Action", valid_614074
  var valid_614075 = query.getOrDefault("Version")
  valid_614075 = validateParameter(valid_614075, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_614075 != nil:
    section.add "Version", valid_614075
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614076 = header.getOrDefault("X-Amz-Signature")
  valid_614076 = validateParameter(valid_614076, JString, required = false,
                                 default = nil)
  if valid_614076 != nil:
    section.add "X-Amz-Signature", valid_614076
  var valid_614077 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614077 = validateParameter(valid_614077, JString, required = false,
                                 default = nil)
  if valid_614077 != nil:
    section.add "X-Amz-Content-Sha256", valid_614077
  var valid_614078 = header.getOrDefault("X-Amz-Date")
  valid_614078 = validateParameter(valid_614078, JString, required = false,
                                 default = nil)
  if valid_614078 != nil:
    section.add "X-Amz-Date", valid_614078
  var valid_614079 = header.getOrDefault("X-Amz-Credential")
  valid_614079 = validateParameter(valid_614079, JString, required = false,
                                 default = nil)
  if valid_614079 != nil:
    section.add "X-Amz-Credential", valid_614079
  var valid_614080 = header.getOrDefault("X-Amz-Security-Token")
  valid_614080 = validateParameter(valid_614080, JString, required = false,
                                 default = nil)
  if valid_614080 != nil:
    section.add "X-Amz-Security-Token", valid_614080
  var valid_614081 = header.getOrDefault("X-Amz-Algorithm")
  valid_614081 = validateParameter(valid_614081, JString, required = false,
                                 default = nil)
  if valid_614081 != nil:
    section.add "X-Amz-Algorithm", valid_614081
  var valid_614082 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614082 = validateParameter(valid_614082, JString, required = false,
                                 default = nil)
  if valid_614082 != nil:
    section.add "X-Amz-SignedHeaders", valid_614082
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   LaunchConfigurationNames: JArray
  ##                           : The launch configuration names. If you omit this parameter, all launch configurations are described.
  section = newJObject()
  var valid_614083 = formData.getOrDefault("NextToken")
  valid_614083 = validateParameter(valid_614083, JString, required = false,
                                 default = nil)
  if valid_614083 != nil:
    section.add "NextToken", valid_614083
  var valid_614084 = formData.getOrDefault("MaxRecords")
  valid_614084 = validateParameter(valid_614084, JInt, required = false, default = nil)
  if valid_614084 != nil:
    section.add "MaxRecords", valid_614084
  var valid_614085 = formData.getOrDefault("LaunchConfigurationNames")
  valid_614085 = validateParameter(valid_614085, JArray, required = false,
                                 default = nil)
  if valid_614085 != nil:
    section.add "LaunchConfigurationNames", valid_614085
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614086: Call_PostDescribeLaunchConfigurations_614071;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes one or more launch configurations.
  ## 
  let valid = call_614086.validator(path, query, header, formData, body)
  let scheme = call_614086.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614086.url(scheme.get, call_614086.host, call_614086.base,
                         call_614086.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614086, url, valid)

proc call*(call_614087: Call_PostDescribeLaunchConfigurations_614071;
          NextToken: string = ""; MaxRecords: int = 0;
          LaunchConfigurationNames: JsonNode = nil;
          Action: string = "DescribeLaunchConfigurations";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeLaunchConfigurations
  ## Describes one or more launch configurations.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   LaunchConfigurationNames: JArray
  ##                           : The launch configuration names. If you omit this parameter, all launch configurations are described.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614088 = newJObject()
  var formData_614089 = newJObject()
  add(formData_614089, "NextToken", newJString(NextToken))
  add(formData_614089, "MaxRecords", newJInt(MaxRecords))
  if LaunchConfigurationNames != nil:
    formData_614089.add "LaunchConfigurationNames", LaunchConfigurationNames
  add(query_614088, "Action", newJString(Action))
  add(query_614088, "Version", newJString(Version))
  result = call_614087.call(nil, query_614088, nil, formData_614089, nil)

var postDescribeLaunchConfigurations* = Call_PostDescribeLaunchConfigurations_614071(
    name: "postDescribeLaunchConfigurations", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeLaunchConfigurations",
    validator: validate_PostDescribeLaunchConfigurations_614072, base: "/",
    url: url_PostDescribeLaunchConfigurations_614073,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeLaunchConfigurations_614053 = ref object of OpenApiRestCall_612658
proc url_GetDescribeLaunchConfigurations_614055(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeLaunchConfigurations_614054(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more launch configurations.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   LaunchConfigurationNames: JArray
  ##                           : The launch configuration names. If you omit this parameter, all launch configurations are described.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  section = newJObject()
  var valid_614056 = query.getOrDefault("NextToken")
  valid_614056 = validateParameter(valid_614056, JString, required = false,
                                 default = nil)
  if valid_614056 != nil:
    section.add "NextToken", valid_614056
  var valid_614057 = query.getOrDefault("LaunchConfigurationNames")
  valid_614057 = validateParameter(valid_614057, JArray, required = false,
                                 default = nil)
  if valid_614057 != nil:
    section.add "LaunchConfigurationNames", valid_614057
  var valid_614058 = query.getOrDefault("Action")
  valid_614058 = validateParameter(valid_614058, JString, required = true, default = newJString(
      "DescribeLaunchConfigurations"))
  if valid_614058 != nil:
    section.add "Action", valid_614058
  var valid_614059 = query.getOrDefault("Version")
  valid_614059 = validateParameter(valid_614059, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_614059 != nil:
    section.add "Version", valid_614059
  var valid_614060 = query.getOrDefault("MaxRecords")
  valid_614060 = validateParameter(valid_614060, JInt, required = false, default = nil)
  if valid_614060 != nil:
    section.add "MaxRecords", valid_614060
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614061 = header.getOrDefault("X-Amz-Signature")
  valid_614061 = validateParameter(valid_614061, JString, required = false,
                                 default = nil)
  if valid_614061 != nil:
    section.add "X-Amz-Signature", valid_614061
  var valid_614062 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614062 = validateParameter(valid_614062, JString, required = false,
                                 default = nil)
  if valid_614062 != nil:
    section.add "X-Amz-Content-Sha256", valid_614062
  var valid_614063 = header.getOrDefault("X-Amz-Date")
  valid_614063 = validateParameter(valid_614063, JString, required = false,
                                 default = nil)
  if valid_614063 != nil:
    section.add "X-Amz-Date", valid_614063
  var valid_614064 = header.getOrDefault("X-Amz-Credential")
  valid_614064 = validateParameter(valid_614064, JString, required = false,
                                 default = nil)
  if valid_614064 != nil:
    section.add "X-Amz-Credential", valid_614064
  var valid_614065 = header.getOrDefault("X-Amz-Security-Token")
  valid_614065 = validateParameter(valid_614065, JString, required = false,
                                 default = nil)
  if valid_614065 != nil:
    section.add "X-Amz-Security-Token", valid_614065
  var valid_614066 = header.getOrDefault("X-Amz-Algorithm")
  valid_614066 = validateParameter(valid_614066, JString, required = false,
                                 default = nil)
  if valid_614066 != nil:
    section.add "X-Amz-Algorithm", valid_614066
  var valid_614067 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614067 = validateParameter(valid_614067, JString, required = false,
                                 default = nil)
  if valid_614067 != nil:
    section.add "X-Amz-SignedHeaders", valid_614067
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614068: Call_GetDescribeLaunchConfigurations_614053;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes one or more launch configurations.
  ## 
  let valid = call_614068.validator(path, query, header, formData, body)
  let scheme = call_614068.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614068.url(scheme.get, call_614068.host, call_614068.base,
                         call_614068.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614068, url, valid)

proc call*(call_614069: Call_GetDescribeLaunchConfigurations_614053;
          NextToken: string = ""; LaunchConfigurationNames: JsonNode = nil;
          Action: string = "DescribeLaunchConfigurations";
          Version: string = "2011-01-01"; MaxRecords: int = 0): Recallable =
  ## getDescribeLaunchConfigurations
  ## Describes one or more launch configurations.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   LaunchConfigurationNames: JArray
  ##                           : The launch configuration names. If you omit this parameter, all launch configurations are described.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  var query_614070 = newJObject()
  add(query_614070, "NextToken", newJString(NextToken))
  if LaunchConfigurationNames != nil:
    query_614070.add "LaunchConfigurationNames", LaunchConfigurationNames
  add(query_614070, "Action", newJString(Action))
  add(query_614070, "Version", newJString(Version))
  add(query_614070, "MaxRecords", newJInt(MaxRecords))
  result = call_614069.call(nil, query_614070, nil, nil, nil)

var getDescribeLaunchConfigurations* = Call_GetDescribeLaunchConfigurations_614053(
    name: "getDescribeLaunchConfigurations", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeLaunchConfigurations",
    validator: validate_GetDescribeLaunchConfigurations_614054, base: "/",
    url: url_GetDescribeLaunchConfigurations_614055,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeLifecycleHookTypes_614105 = ref object of OpenApiRestCall_612658
proc url_PostDescribeLifecycleHookTypes_614107(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeLifecycleHookTypes_614106(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the available types of lifecycle hooks.</p> <p>The following hook types are supported:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614108 = query.getOrDefault("Action")
  valid_614108 = validateParameter(valid_614108, JString, required = true, default = newJString(
      "DescribeLifecycleHookTypes"))
  if valid_614108 != nil:
    section.add "Action", valid_614108
  var valid_614109 = query.getOrDefault("Version")
  valid_614109 = validateParameter(valid_614109, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_614109 != nil:
    section.add "Version", valid_614109
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614110 = header.getOrDefault("X-Amz-Signature")
  valid_614110 = validateParameter(valid_614110, JString, required = false,
                                 default = nil)
  if valid_614110 != nil:
    section.add "X-Amz-Signature", valid_614110
  var valid_614111 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614111 = validateParameter(valid_614111, JString, required = false,
                                 default = nil)
  if valid_614111 != nil:
    section.add "X-Amz-Content-Sha256", valid_614111
  var valid_614112 = header.getOrDefault("X-Amz-Date")
  valid_614112 = validateParameter(valid_614112, JString, required = false,
                                 default = nil)
  if valid_614112 != nil:
    section.add "X-Amz-Date", valid_614112
  var valid_614113 = header.getOrDefault("X-Amz-Credential")
  valid_614113 = validateParameter(valid_614113, JString, required = false,
                                 default = nil)
  if valid_614113 != nil:
    section.add "X-Amz-Credential", valid_614113
  var valid_614114 = header.getOrDefault("X-Amz-Security-Token")
  valid_614114 = validateParameter(valid_614114, JString, required = false,
                                 default = nil)
  if valid_614114 != nil:
    section.add "X-Amz-Security-Token", valid_614114
  var valid_614115 = header.getOrDefault("X-Amz-Algorithm")
  valid_614115 = validateParameter(valid_614115, JString, required = false,
                                 default = nil)
  if valid_614115 != nil:
    section.add "X-Amz-Algorithm", valid_614115
  var valid_614116 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614116 = validateParameter(valid_614116, JString, required = false,
                                 default = nil)
  if valid_614116 != nil:
    section.add "X-Amz-SignedHeaders", valid_614116
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614117: Call_PostDescribeLifecycleHookTypes_614105; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the available types of lifecycle hooks.</p> <p>The following hook types are supported:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul>
  ## 
  let valid = call_614117.validator(path, query, header, formData, body)
  let scheme = call_614117.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614117.url(scheme.get, call_614117.host, call_614117.base,
                         call_614117.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614117, url, valid)

proc call*(call_614118: Call_PostDescribeLifecycleHookTypes_614105;
          Action: string = "DescribeLifecycleHookTypes";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeLifecycleHookTypes
  ## <p>Describes the available types of lifecycle hooks.</p> <p>The following hook types are supported:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614119 = newJObject()
  add(query_614119, "Action", newJString(Action))
  add(query_614119, "Version", newJString(Version))
  result = call_614118.call(nil, query_614119, nil, nil, nil)

var postDescribeLifecycleHookTypes* = Call_PostDescribeLifecycleHookTypes_614105(
    name: "postDescribeLifecycleHookTypes", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeLifecycleHookTypes",
    validator: validate_PostDescribeLifecycleHookTypes_614106, base: "/",
    url: url_PostDescribeLifecycleHookTypes_614107,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeLifecycleHookTypes_614090 = ref object of OpenApiRestCall_612658
proc url_GetDescribeLifecycleHookTypes_614092(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeLifecycleHookTypes_614091(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the available types of lifecycle hooks.</p> <p>The following hook types are supported:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614093 = query.getOrDefault("Action")
  valid_614093 = validateParameter(valid_614093, JString, required = true, default = newJString(
      "DescribeLifecycleHookTypes"))
  if valid_614093 != nil:
    section.add "Action", valid_614093
  var valid_614094 = query.getOrDefault("Version")
  valid_614094 = validateParameter(valid_614094, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_614094 != nil:
    section.add "Version", valid_614094
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614095 = header.getOrDefault("X-Amz-Signature")
  valid_614095 = validateParameter(valid_614095, JString, required = false,
                                 default = nil)
  if valid_614095 != nil:
    section.add "X-Amz-Signature", valid_614095
  var valid_614096 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614096 = validateParameter(valid_614096, JString, required = false,
                                 default = nil)
  if valid_614096 != nil:
    section.add "X-Amz-Content-Sha256", valid_614096
  var valid_614097 = header.getOrDefault("X-Amz-Date")
  valid_614097 = validateParameter(valid_614097, JString, required = false,
                                 default = nil)
  if valid_614097 != nil:
    section.add "X-Amz-Date", valid_614097
  var valid_614098 = header.getOrDefault("X-Amz-Credential")
  valid_614098 = validateParameter(valid_614098, JString, required = false,
                                 default = nil)
  if valid_614098 != nil:
    section.add "X-Amz-Credential", valid_614098
  var valid_614099 = header.getOrDefault("X-Amz-Security-Token")
  valid_614099 = validateParameter(valid_614099, JString, required = false,
                                 default = nil)
  if valid_614099 != nil:
    section.add "X-Amz-Security-Token", valid_614099
  var valid_614100 = header.getOrDefault("X-Amz-Algorithm")
  valid_614100 = validateParameter(valid_614100, JString, required = false,
                                 default = nil)
  if valid_614100 != nil:
    section.add "X-Amz-Algorithm", valid_614100
  var valid_614101 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614101 = validateParameter(valid_614101, JString, required = false,
                                 default = nil)
  if valid_614101 != nil:
    section.add "X-Amz-SignedHeaders", valid_614101
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614102: Call_GetDescribeLifecycleHookTypes_614090; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the available types of lifecycle hooks.</p> <p>The following hook types are supported:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul>
  ## 
  let valid = call_614102.validator(path, query, header, formData, body)
  let scheme = call_614102.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614102.url(scheme.get, call_614102.host, call_614102.base,
                         call_614102.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614102, url, valid)

proc call*(call_614103: Call_GetDescribeLifecycleHookTypes_614090;
          Action: string = "DescribeLifecycleHookTypes";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeLifecycleHookTypes
  ## <p>Describes the available types of lifecycle hooks.</p> <p>The following hook types are supported:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614104 = newJObject()
  add(query_614104, "Action", newJString(Action))
  add(query_614104, "Version", newJString(Version))
  result = call_614103.call(nil, query_614104, nil, nil, nil)

var getDescribeLifecycleHookTypes* = Call_GetDescribeLifecycleHookTypes_614090(
    name: "getDescribeLifecycleHookTypes", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeLifecycleHookTypes",
    validator: validate_GetDescribeLifecycleHookTypes_614091, base: "/",
    url: url_GetDescribeLifecycleHookTypes_614092,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeLifecycleHooks_614137 = ref object of OpenApiRestCall_612658
proc url_PostDescribeLifecycleHooks_614139(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeLifecycleHooks_614138(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the lifecycle hooks for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614140 = query.getOrDefault("Action")
  valid_614140 = validateParameter(valid_614140, JString, required = true,
                                 default = newJString("DescribeLifecycleHooks"))
  if valid_614140 != nil:
    section.add "Action", valid_614140
  var valid_614141 = query.getOrDefault("Version")
  valid_614141 = validateParameter(valid_614141, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_614141 != nil:
    section.add "Version", valid_614141
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614142 = header.getOrDefault("X-Amz-Signature")
  valid_614142 = validateParameter(valid_614142, JString, required = false,
                                 default = nil)
  if valid_614142 != nil:
    section.add "X-Amz-Signature", valid_614142
  var valid_614143 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614143 = validateParameter(valid_614143, JString, required = false,
                                 default = nil)
  if valid_614143 != nil:
    section.add "X-Amz-Content-Sha256", valid_614143
  var valid_614144 = header.getOrDefault("X-Amz-Date")
  valid_614144 = validateParameter(valid_614144, JString, required = false,
                                 default = nil)
  if valid_614144 != nil:
    section.add "X-Amz-Date", valid_614144
  var valid_614145 = header.getOrDefault("X-Amz-Credential")
  valid_614145 = validateParameter(valid_614145, JString, required = false,
                                 default = nil)
  if valid_614145 != nil:
    section.add "X-Amz-Credential", valid_614145
  var valid_614146 = header.getOrDefault("X-Amz-Security-Token")
  valid_614146 = validateParameter(valid_614146, JString, required = false,
                                 default = nil)
  if valid_614146 != nil:
    section.add "X-Amz-Security-Token", valid_614146
  var valid_614147 = header.getOrDefault("X-Amz-Algorithm")
  valid_614147 = validateParameter(valid_614147, JString, required = false,
                                 default = nil)
  if valid_614147 != nil:
    section.add "X-Amz-Algorithm", valid_614147
  var valid_614148 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614148 = validateParameter(valid_614148, JString, required = false,
                                 default = nil)
  if valid_614148 != nil:
    section.add "X-Amz-SignedHeaders", valid_614148
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookNames: JArray
  ##                     : The names of one or more lifecycle hooks. If you omit this parameter, all lifecycle hooks are described.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_614149 = formData.getOrDefault("AutoScalingGroupName")
  valid_614149 = validateParameter(valid_614149, JString, required = true,
                                 default = nil)
  if valid_614149 != nil:
    section.add "AutoScalingGroupName", valid_614149
  var valid_614150 = formData.getOrDefault("LifecycleHookNames")
  valid_614150 = validateParameter(valid_614150, JArray, required = false,
                                 default = nil)
  if valid_614150 != nil:
    section.add "LifecycleHookNames", valid_614150
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614151: Call_PostDescribeLifecycleHooks_614137; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the lifecycle hooks for the specified Auto Scaling group.
  ## 
  let valid = call_614151.validator(path, query, header, formData, body)
  let scheme = call_614151.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614151.url(scheme.get, call_614151.host, call_614151.base,
                         call_614151.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614151, url, valid)

proc call*(call_614152: Call_PostDescribeLifecycleHooks_614137;
          AutoScalingGroupName: string; LifecycleHookNames: JsonNode = nil;
          Action: string = "DescribeLifecycleHooks"; Version: string = "2011-01-01"): Recallable =
  ## postDescribeLifecycleHooks
  ## Describes the lifecycle hooks for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookNames: JArray
  ##                     : The names of one or more lifecycle hooks. If you omit this parameter, all lifecycle hooks are described.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614153 = newJObject()
  var formData_614154 = newJObject()
  add(formData_614154, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if LifecycleHookNames != nil:
    formData_614154.add "LifecycleHookNames", LifecycleHookNames
  add(query_614153, "Action", newJString(Action))
  add(query_614153, "Version", newJString(Version))
  result = call_614152.call(nil, query_614153, nil, formData_614154, nil)

var postDescribeLifecycleHooks* = Call_PostDescribeLifecycleHooks_614137(
    name: "postDescribeLifecycleHooks", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeLifecycleHooks",
    validator: validate_PostDescribeLifecycleHooks_614138, base: "/",
    url: url_PostDescribeLifecycleHooks_614139,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeLifecycleHooks_614120 = ref object of OpenApiRestCall_612658
proc url_GetDescribeLifecycleHooks_614122(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeLifecycleHooks_614121(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the lifecycle hooks for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   LifecycleHookNames: JArray
  ##                     : The names of one or more lifecycle hooks. If you omit this parameter, all lifecycle hooks are described.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614123 = query.getOrDefault("LifecycleHookNames")
  valid_614123 = validateParameter(valid_614123, JArray, required = false,
                                 default = nil)
  if valid_614123 != nil:
    section.add "LifecycleHookNames", valid_614123
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_614124 = query.getOrDefault("AutoScalingGroupName")
  valid_614124 = validateParameter(valid_614124, JString, required = true,
                                 default = nil)
  if valid_614124 != nil:
    section.add "AutoScalingGroupName", valid_614124
  var valid_614125 = query.getOrDefault("Action")
  valid_614125 = validateParameter(valid_614125, JString, required = true,
                                 default = newJString("DescribeLifecycleHooks"))
  if valid_614125 != nil:
    section.add "Action", valid_614125
  var valid_614126 = query.getOrDefault("Version")
  valid_614126 = validateParameter(valid_614126, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_614126 != nil:
    section.add "Version", valid_614126
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614127 = header.getOrDefault("X-Amz-Signature")
  valid_614127 = validateParameter(valid_614127, JString, required = false,
                                 default = nil)
  if valid_614127 != nil:
    section.add "X-Amz-Signature", valid_614127
  var valid_614128 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614128 = validateParameter(valid_614128, JString, required = false,
                                 default = nil)
  if valid_614128 != nil:
    section.add "X-Amz-Content-Sha256", valid_614128
  var valid_614129 = header.getOrDefault("X-Amz-Date")
  valid_614129 = validateParameter(valid_614129, JString, required = false,
                                 default = nil)
  if valid_614129 != nil:
    section.add "X-Amz-Date", valid_614129
  var valid_614130 = header.getOrDefault("X-Amz-Credential")
  valid_614130 = validateParameter(valid_614130, JString, required = false,
                                 default = nil)
  if valid_614130 != nil:
    section.add "X-Amz-Credential", valid_614130
  var valid_614131 = header.getOrDefault("X-Amz-Security-Token")
  valid_614131 = validateParameter(valid_614131, JString, required = false,
                                 default = nil)
  if valid_614131 != nil:
    section.add "X-Amz-Security-Token", valid_614131
  var valid_614132 = header.getOrDefault("X-Amz-Algorithm")
  valid_614132 = validateParameter(valid_614132, JString, required = false,
                                 default = nil)
  if valid_614132 != nil:
    section.add "X-Amz-Algorithm", valid_614132
  var valid_614133 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614133 = validateParameter(valid_614133, JString, required = false,
                                 default = nil)
  if valid_614133 != nil:
    section.add "X-Amz-SignedHeaders", valid_614133
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614134: Call_GetDescribeLifecycleHooks_614120; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the lifecycle hooks for the specified Auto Scaling group.
  ## 
  let valid = call_614134.validator(path, query, header, formData, body)
  let scheme = call_614134.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614134.url(scheme.get, call_614134.host, call_614134.base,
                         call_614134.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614134, url, valid)

proc call*(call_614135: Call_GetDescribeLifecycleHooks_614120;
          AutoScalingGroupName: string; LifecycleHookNames: JsonNode = nil;
          Action: string = "DescribeLifecycleHooks"; Version: string = "2011-01-01"): Recallable =
  ## getDescribeLifecycleHooks
  ## Describes the lifecycle hooks for the specified Auto Scaling group.
  ##   LifecycleHookNames: JArray
  ##                     : The names of one or more lifecycle hooks. If you omit this parameter, all lifecycle hooks are described.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614136 = newJObject()
  if LifecycleHookNames != nil:
    query_614136.add "LifecycleHookNames", LifecycleHookNames
  add(query_614136, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_614136, "Action", newJString(Action))
  add(query_614136, "Version", newJString(Version))
  result = call_614135.call(nil, query_614136, nil, nil, nil)

var getDescribeLifecycleHooks* = Call_GetDescribeLifecycleHooks_614120(
    name: "getDescribeLifecycleHooks", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeLifecycleHooks",
    validator: validate_GetDescribeLifecycleHooks_614121, base: "/",
    url: url_GetDescribeLifecycleHooks_614122,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeLoadBalancerTargetGroups_614173 = ref object of OpenApiRestCall_612658
proc url_PostDescribeLoadBalancerTargetGroups_614175(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeLoadBalancerTargetGroups_614174(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the target groups for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614176 = query.getOrDefault("Action")
  valid_614176 = validateParameter(valid_614176, JString, required = true, default = newJString(
      "DescribeLoadBalancerTargetGroups"))
  if valid_614176 != nil:
    section.add "Action", valid_614176
  var valid_614177 = query.getOrDefault("Version")
  valid_614177 = validateParameter(valid_614177, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_614177 != nil:
    section.add "Version", valid_614177
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614178 = header.getOrDefault("X-Amz-Signature")
  valid_614178 = validateParameter(valid_614178, JString, required = false,
                                 default = nil)
  if valid_614178 != nil:
    section.add "X-Amz-Signature", valid_614178
  var valid_614179 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614179 = validateParameter(valid_614179, JString, required = false,
                                 default = nil)
  if valid_614179 != nil:
    section.add "X-Amz-Content-Sha256", valid_614179
  var valid_614180 = header.getOrDefault("X-Amz-Date")
  valid_614180 = validateParameter(valid_614180, JString, required = false,
                                 default = nil)
  if valid_614180 != nil:
    section.add "X-Amz-Date", valid_614180
  var valid_614181 = header.getOrDefault("X-Amz-Credential")
  valid_614181 = validateParameter(valid_614181, JString, required = false,
                                 default = nil)
  if valid_614181 != nil:
    section.add "X-Amz-Credential", valid_614181
  var valid_614182 = header.getOrDefault("X-Amz-Security-Token")
  valid_614182 = validateParameter(valid_614182, JString, required = false,
                                 default = nil)
  if valid_614182 != nil:
    section.add "X-Amz-Security-Token", valid_614182
  var valid_614183 = header.getOrDefault("X-Amz-Algorithm")
  valid_614183 = validateParameter(valid_614183, JString, required = false,
                                 default = nil)
  if valid_614183 != nil:
    section.add "X-Amz-Algorithm", valid_614183
  var valid_614184 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614184 = validateParameter(valid_614184, JString, required = false,
                                 default = nil)
  if valid_614184 != nil:
    section.add "X-Amz-SignedHeaders", valid_614184
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_614185 = formData.getOrDefault("AutoScalingGroupName")
  valid_614185 = validateParameter(valid_614185, JString, required = true,
                                 default = nil)
  if valid_614185 != nil:
    section.add "AutoScalingGroupName", valid_614185
  var valid_614186 = formData.getOrDefault("NextToken")
  valid_614186 = validateParameter(valid_614186, JString, required = false,
                                 default = nil)
  if valid_614186 != nil:
    section.add "NextToken", valid_614186
  var valid_614187 = formData.getOrDefault("MaxRecords")
  valid_614187 = validateParameter(valid_614187, JInt, required = false, default = nil)
  if valid_614187 != nil:
    section.add "MaxRecords", valid_614187
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614188: Call_PostDescribeLoadBalancerTargetGroups_614173;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the target groups for the specified Auto Scaling group.
  ## 
  let valid = call_614188.validator(path, query, header, formData, body)
  let scheme = call_614188.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614188.url(scheme.get, call_614188.host, call_614188.base,
                         call_614188.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614188, url, valid)

proc call*(call_614189: Call_PostDescribeLoadBalancerTargetGroups_614173;
          AutoScalingGroupName: string; NextToken: string = ""; MaxRecords: int = 0;
          Action: string = "DescribeLoadBalancerTargetGroups";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeLoadBalancerTargetGroups
  ## Describes the target groups for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614190 = newJObject()
  var formData_614191 = newJObject()
  add(formData_614191, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_614191, "NextToken", newJString(NextToken))
  add(formData_614191, "MaxRecords", newJInt(MaxRecords))
  add(query_614190, "Action", newJString(Action))
  add(query_614190, "Version", newJString(Version))
  result = call_614189.call(nil, query_614190, nil, formData_614191, nil)

var postDescribeLoadBalancerTargetGroups* = Call_PostDescribeLoadBalancerTargetGroups_614173(
    name: "postDescribeLoadBalancerTargetGroups", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeLoadBalancerTargetGroups",
    validator: validate_PostDescribeLoadBalancerTargetGroups_614174, base: "/",
    url: url_PostDescribeLoadBalancerTargetGroups_614175,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeLoadBalancerTargetGroups_614155 = ref object of OpenApiRestCall_612658
proc url_GetDescribeLoadBalancerTargetGroups_614157(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeLoadBalancerTargetGroups_614156(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the target groups for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  section = newJObject()
  var valid_614158 = query.getOrDefault("NextToken")
  valid_614158 = validateParameter(valid_614158, JString, required = false,
                                 default = nil)
  if valid_614158 != nil:
    section.add "NextToken", valid_614158
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_614159 = query.getOrDefault("AutoScalingGroupName")
  valid_614159 = validateParameter(valid_614159, JString, required = true,
                                 default = nil)
  if valid_614159 != nil:
    section.add "AutoScalingGroupName", valid_614159
  var valid_614160 = query.getOrDefault("Action")
  valid_614160 = validateParameter(valid_614160, JString, required = true, default = newJString(
      "DescribeLoadBalancerTargetGroups"))
  if valid_614160 != nil:
    section.add "Action", valid_614160
  var valid_614161 = query.getOrDefault("Version")
  valid_614161 = validateParameter(valid_614161, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_614161 != nil:
    section.add "Version", valid_614161
  var valid_614162 = query.getOrDefault("MaxRecords")
  valid_614162 = validateParameter(valid_614162, JInt, required = false, default = nil)
  if valid_614162 != nil:
    section.add "MaxRecords", valid_614162
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614163 = header.getOrDefault("X-Amz-Signature")
  valid_614163 = validateParameter(valid_614163, JString, required = false,
                                 default = nil)
  if valid_614163 != nil:
    section.add "X-Amz-Signature", valid_614163
  var valid_614164 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614164 = validateParameter(valid_614164, JString, required = false,
                                 default = nil)
  if valid_614164 != nil:
    section.add "X-Amz-Content-Sha256", valid_614164
  var valid_614165 = header.getOrDefault("X-Amz-Date")
  valid_614165 = validateParameter(valid_614165, JString, required = false,
                                 default = nil)
  if valid_614165 != nil:
    section.add "X-Amz-Date", valid_614165
  var valid_614166 = header.getOrDefault("X-Amz-Credential")
  valid_614166 = validateParameter(valid_614166, JString, required = false,
                                 default = nil)
  if valid_614166 != nil:
    section.add "X-Amz-Credential", valid_614166
  var valid_614167 = header.getOrDefault("X-Amz-Security-Token")
  valid_614167 = validateParameter(valid_614167, JString, required = false,
                                 default = nil)
  if valid_614167 != nil:
    section.add "X-Amz-Security-Token", valid_614167
  var valid_614168 = header.getOrDefault("X-Amz-Algorithm")
  valid_614168 = validateParameter(valid_614168, JString, required = false,
                                 default = nil)
  if valid_614168 != nil:
    section.add "X-Amz-Algorithm", valid_614168
  var valid_614169 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614169 = validateParameter(valid_614169, JString, required = false,
                                 default = nil)
  if valid_614169 != nil:
    section.add "X-Amz-SignedHeaders", valid_614169
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614170: Call_GetDescribeLoadBalancerTargetGroups_614155;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the target groups for the specified Auto Scaling group.
  ## 
  let valid = call_614170.validator(path, query, header, formData, body)
  let scheme = call_614170.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614170.url(scheme.get, call_614170.host, call_614170.base,
                         call_614170.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614170, url, valid)

proc call*(call_614171: Call_GetDescribeLoadBalancerTargetGroups_614155;
          AutoScalingGroupName: string; NextToken: string = "";
          Action: string = "DescribeLoadBalancerTargetGroups";
          Version: string = "2011-01-01"; MaxRecords: int = 0): Recallable =
  ## getDescribeLoadBalancerTargetGroups
  ## Describes the target groups for the specified Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  var query_614172 = newJObject()
  add(query_614172, "NextToken", newJString(NextToken))
  add(query_614172, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_614172, "Action", newJString(Action))
  add(query_614172, "Version", newJString(Version))
  add(query_614172, "MaxRecords", newJInt(MaxRecords))
  result = call_614171.call(nil, query_614172, nil, nil, nil)

var getDescribeLoadBalancerTargetGroups* = Call_GetDescribeLoadBalancerTargetGroups_614155(
    name: "getDescribeLoadBalancerTargetGroups", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeLoadBalancerTargetGroups",
    validator: validate_GetDescribeLoadBalancerTargetGroups_614156, base: "/",
    url: url_GetDescribeLoadBalancerTargetGroups_614157,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeLoadBalancers_614210 = ref object of OpenApiRestCall_612658
proc url_PostDescribeLoadBalancers_614212(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeLoadBalancers_614211(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the load balancers for the specified Auto Scaling group.</p> <p>This operation describes only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DescribeLoadBalancerTargetGroups</a> instead.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614213 = query.getOrDefault("Action")
  valid_614213 = validateParameter(valid_614213, JString, required = true,
                                 default = newJString("DescribeLoadBalancers"))
  if valid_614213 != nil:
    section.add "Action", valid_614213
  var valid_614214 = query.getOrDefault("Version")
  valid_614214 = validateParameter(valid_614214, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_614214 != nil:
    section.add "Version", valid_614214
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614215 = header.getOrDefault("X-Amz-Signature")
  valid_614215 = validateParameter(valid_614215, JString, required = false,
                                 default = nil)
  if valid_614215 != nil:
    section.add "X-Amz-Signature", valid_614215
  var valid_614216 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614216 = validateParameter(valid_614216, JString, required = false,
                                 default = nil)
  if valid_614216 != nil:
    section.add "X-Amz-Content-Sha256", valid_614216
  var valid_614217 = header.getOrDefault("X-Amz-Date")
  valid_614217 = validateParameter(valid_614217, JString, required = false,
                                 default = nil)
  if valid_614217 != nil:
    section.add "X-Amz-Date", valid_614217
  var valid_614218 = header.getOrDefault("X-Amz-Credential")
  valid_614218 = validateParameter(valid_614218, JString, required = false,
                                 default = nil)
  if valid_614218 != nil:
    section.add "X-Amz-Credential", valid_614218
  var valid_614219 = header.getOrDefault("X-Amz-Security-Token")
  valid_614219 = validateParameter(valid_614219, JString, required = false,
                                 default = nil)
  if valid_614219 != nil:
    section.add "X-Amz-Security-Token", valid_614219
  var valid_614220 = header.getOrDefault("X-Amz-Algorithm")
  valid_614220 = validateParameter(valid_614220, JString, required = false,
                                 default = nil)
  if valid_614220 != nil:
    section.add "X-Amz-Algorithm", valid_614220
  var valid_614221 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614221 = validateParameter(valid_614221, JString, required = false,
                                 default = nil)
  if valid_614221 != nil:
    section.add "X-Amz-SignedHeaders", valid_614221
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_614222 = formData.getOrDefault("AutoScalingGroupName")
  valid_614222 = validateParameter(valid_614222, JString, required = true,
                                 default = nil)
  if valid_614222 != nil:
    section.add "AutoScalingGroupName", valid_614222
  var valid_614223 = formData.getOrDefault("NextToken")
  valid_614223 = validateParameter(valid_614223, JString, required = false,
                                 default = nil)
  if valid_614223 != nil:
    section.add "NextToken", valid_614223
  var valid_614224 = formData.getOrDefault("MaxRecords")
  valid_614224 = validateParameter(valid_614224, JInt, required = false, default = nil)
  if valid_614224 != nil:
    section.add "MaxRecords", valid_614224
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614225: Call_PostDescribeLoadBalancers_614210; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the load balancers for the specified Auto Scaling group.</p> <p>This operation describes only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DescribeLoadBalancerTargetGroups</a> instead.</p>
  ## 
  let valid = call_614225.validator(path, query, header, formData, body)
  let scheme = call_614225.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614225.url(scheme.get, call_614225.host, call_614225.base,
                         call_614225.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614225, url, valid)

proc call*(call_614226: Call_PostDescribeLoadBalancers_614210;
          AutoScalingGroupName: string; NextToken: string = ""; MaxRecords: int = 0;
          Action: string = "DescribeLoadBalancers"; Version: string = "2011-01-01"): Recallable =
  ## postDescribeLoadBalancers
  ## <p>Describes the load balancers for the specified Auto Scaling group.</p> <p>This operation describes only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DescribeLoadBalancerTargetGroups</a> instead.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614227 = newJObject()
  var formData_614228 = newJObject()
  add(formData_614228, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_614228, "NextToken", newJString(NextToken))
  add(formData_614228, "MaxRecords", newJInt(MaxRecords))
  add(query_614227, "Action", newJString(Action))
  add(query_614227, "Version", newJString(Version))
  result = call_614226.call(nil, query_614227, nil, formData_614228, nil)

var postDescribeLoadBalancers* = Call_PostDescribeLoadBalancers_614210(
    name: "postDescribeLoadBalancers", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeLoadBalancers",
    validator: validate_PostDescribeLoadBalancers_614211, base: "/",
    url: url_PostDescribeLoadBalancers_614212,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeLoadBalancers_614192 = ref object of OpenApiRestCall_612658
proc url_GetDescribeLoadBalancers_614194(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeLoadBalancers_614193(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the load balancers for the specified Auto Scaling group.</p> <p>This operation describes only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DescribeLoadBalancerTargetGroups</a> instead.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  section = newJObject()
  var valid_614195 = query.getOrDefault("NextToken")
  valid_614195 = validateParameter(valid_614195, JString, required = false,
                                 default = nil)
  if valid_614195 != nil:
    section.add "NextToken", valid_614195
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_614196 = query.getOrDefault("AutoScalingGroupName")
  valid_614196 = validateParameter(valid_614196, JString, required = true,
                                 default = nil)
  if valid_614196 != nil:
    section.add "AutoScalingGroupName", valid_614196
  var valid_614197 = query.getOrDefault("Action")
  valid_614197 = validateParameter(valid_614197, JString, required = true,
                                 default = newJString("DescribeLoadBalancers"))
  if valid_614197 != nil:
    section.add "Action", valid_614197
  var valid_614198 = query.getOrDefault("Version")
  valid_614198 = validateParameter(valid_614198, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_614198 != nil:
    section.add "Version", valid_614198
  var valid_614199 = query.getOrDefault("MaxRecords")
  valid_614199 = validateParameter(valid_614199, JInt, required = false, default = nil)
  if valid_614199 != nil:
    section.add "MaxRecords", valid_614199
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614200 = header.getOrDefault("X-Amz-Signature")
  valid_614200 = validateParameter(valid_614200, JString, required = false,
                                 default = nil)
  if valid_614200 != nil:
    section.add "X-Amz-Signature", valid_614200
  var valid_614201 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614201 = validateParameter(valid_614201, JString, required = false,
                                 default = nil)
  if valid_614201 != nil:
    section.add "X-Amz-Content-Sha256", valid_614201
  var valid_614202 = header.getOrDefault("X-Amz-Date")
  valid_614202 = validateParameter(valid_614202, JString, required = false,
                                 default = nil)
  if valid_614202 != nil:
    section.add "X-Amz-Date", valid_614202
  var valid_614203 = header.getOrDefault("X-Amz-Credential")
  valid_614203 = validateParameter(valid_614203, JString, required = false,
                                 default = nil)
  if valid_614203 != nil:
    section.add "X-Amz-Credential", valid_614203
  var valid_614204 = header.getOrDefault("X-Amz-Security-Token")
  valid_614204 = validateParameter(valid_614204, JString, required = false,
                                 default = nil)
  if valid_614204 != nil:
    section.add "X-Amz-Security-Token", valid_614204
  var valid_614205 = header.getOrDefault("X-Amz-Algorithm")
  valid_614205 = validateParameter(valid_614205, JString, required = false,
                                 default = nil)
  if valid_614205 != nil:
    section.add "X-Amz-Algorithm", valid_614205
  var valid_614206 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614206 = validateParameter(valid_614206, JString, required = false,
                                 default = nil)
  if valid_614206 != nil:
    section.add "X-Amz-SignedHeaders", valid_614206
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614207: Call_GetDescribeLoadBalancers_614192; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the load balancers for the specified Auto Scaling group.</p> <p>This operation describes only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DescribeLoadBalancerTargetGroups</a> instead.</p>
  ## 
  let valid = call_614207.validator(path, query, header, formData, body)
  let scheme = call_614207.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614207.url(scheme.get, call_614207.host, call_614207.base,
                         call_614207.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614207, url, valid)

proc call*(call_614208: Call_GetDescribeLoadBalancers_614192;
          AutoScalingGroupName: string; NextToken: string = "";
          Action: string = "DescribeLoadBalancers"; Version: string = "2011-01-01";
          MaxRecords: int = 0): Recallable =
  ## getDescribeLoadBalancers
  ## <p>Describes the load balancers for the specified Auto Scaling group.</p> <p>This operation describes only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DescribeLoadBalancerTargetGroups</a> instead.</p>
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  var query_614209 = newJObject()
  add(query_614209, "NextToken", newJString(NextToken))
  add(query_614209, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_614209, "Action", newJString(Action))
  add(query_614209, "Version", newJString(Version))
  add(query_614209, "MaxRecords", newJInt(MaxRecords))
  result = call_614208.call(nil, query_614209, nil, nil, nil)

var getDescribeLoadBalancers* = Call_GetDescribeLoadBalancers_614192(
    name: "getDescribeLoadBalancers", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeLoadBalancers",
    validator: validate_GetDescribeLoadBalancers_614193, base: "/",
    url: url_GetDescribeLoadBalancers_614194, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeMetricCollectionTypes_614244 = ref object of OpenApiRestCall_612658
proc url_PostDescribeMetricCollectionTypes_614246(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeMetricCollectionTypes_614245(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.</p> <p>The <code>GroupStandbyInstances</code> metric is not returned by default. You must explicitly request this metric when calling <a>EnableMetricsCollection</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614247 = query.getOrDefault("Action")
  valid_614247 = validateParameter(valid_614247, JString, required = true, default = newJString(
      "DescribeMetricCollectionTypes"))
  if valid_614247 != nil:
    section.add "Action", valid_614247
  var valid_614248 = query.getOrDefault("Version")
  valid_614248 = validateParameter(valid_614248, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_614248 != nil:
    section.add "Version", valid_614248
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614249 = header.getOrDefault("X-Amz-Signature")
  valid_614249 = validateParameter(valid_614249, JString, required = false,
                                 default = nil)
  if valid_614249 != nil:
    section.add "X-Amz-Signature", valid_614249
  var valid_614250 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614250 = validateParameter(valid_614250, JString, required = false,
                                 default = nil)
  if valid_614250 != nil:
    section.add "X-Amz-Content-Sha256", valid_614250
  var valid_614251 = header.getOrDefault("X-Amz-Date")
  valid_614251 = validateParameter(valid_614251, JString, required = false,
                                 default = nil)
  if valid_614251 != nil:
    section.add "X-Amz-Date", valid_614251
  var valid_614252 = header.getOrDefault("X-Amz-Credential")
  valid_614252 = validateParameter(valid_614252, JString, required = false,
                                 default = nil)
  if valid_614252 != nil:
    section.add "X-Amz-Credential", valid_614252
  var valid_614253 = header.getOrDefault("X-Amz-Security-Token")
  valid_614253 = validateParameter(valid_614253, JString, required = false,
                                 default = nil)
  if valid_614253 != nil:
    section.add "X-Amz-Security-Token", valid_614253
  var valid_614254 = header.getOrDefault("X-Amz-Algorithm")
  valid_614254 = validateParameter(valid_614254, JString, required = false,
                                 default = nil)
  if valid_614254 != nil:
    section.add "X-Amz-Algorithm", valid_614254
  var valid_614255 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614255 = validateParameter(valid_614255, JString, required = false,
                                 default = nil)
  if valid_614255 != nil:
    section.add "X-Amz-SignedHeaders", valid_614255
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614256: Call_PostDescribeMetricCollectionTypes_614244;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.</p> <p>The <code>GroupStandbyInstances</code> metric is not returned by default. You must explicitly request this metric when calling <a>EnableMetricsCollection</a>.</p>
  ## 
  let valid = call_614256.validator(path, query, header, formData, body)
  let scheme = call_614256.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614256.url(scheme.get, call_614256.host, call_614256.base,
                         call_614256.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614256, url, valid)

proc call*(call_614257: Call_PostDescribeMetricCollectionTypes_614244;
          Action: string = "DescribeMetricCollectionTypes";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeMetricCollectionTypes
  ## <p>Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.</p> <p>The <code>GroupStandbyInstances</code> metric is not returned by default. You must explicitly request this metric when calling <a>EnableMetricsCollection</a>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614258 = newJObject()
  add(query_614258, "Action", newJString(Action))
  add(query_614258, "Version", newJString(Version))
  result = call_614257.call(nil, query_614258, nil, nil, nil)

var postDescribeMetricCollectionTypes* = Call_PostDescribeMetricCollectionTypes_614244(
    name: "postDescribeMetricCollectionTypes", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeMetricCollectionTypes",
    validator: validate_PostDescribeMetricCollectionTypes_614245, base: "/",
    url: url_PostDescribeMetricCollectionTypes_614246,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeMetricCollectionTypes_614229 = ref object of OpenApiRestCall_612658
proc url_GetDescribeMetricCollectionTypes_614231(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeMetricCollectionTypes_614230(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.</p> <p>The <code>GroupStandbyInstances</code> metric is not returned by default. You must explicitly request this metric when calling <a>EnableMetricsCollection</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614232 = query.getOrDefault("Action")
  valid_614232 = validateParameter(valid_614232, JString, required = true, default = newJString(
      "DescribeMetricCollectionTypes"))
  if valid_614232 != nil:
    section.add "Action", valid_614232
  var valid_614233 = query.getOrDefault("Version")
  valid_614233 = validateParameter(valid_614233, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_614233 != nil:
    section.add "Version", valid_614233
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614234 = header.getOrDefault("X-Amz-Signature")
  valid_614234 = validateParameter(valid_614234, JString, required = false,
                                 default = nil)
  if valid_614234 != nil:
    section.add "X-Amz-Signature", valid_614234
  var valid_614235 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614235 = validateParameter(valid_614235, JString, required = false,
                                 default = nil)
  if valid_614235 != nil:
    section.add "X-Amz-Content-Sha256", valid_614235
  var valid_614236 = header.getOrDefault("X-Amz-Date")
  valid_614236 = validateParameter(valid_614236, JString, required = false,
                                 default = nil)
  if valid_614236 != nil:
    section.add "X-Amz-Date", valid_614236
  var valid_614237 = header.getOrDefault("X-Amz-Credential")
  valid_614237 = validateParameter(valid_614237, JString, required = false,
                                 default = nil)
  if valid_614237 != nil:
    section.add "X-Amz-Credential", valid_614237
  var valid_614238 = header.getOrDefault("X-Amz-Security-Token")
  valid_614238 = validateParameter(valid_614238, JString, required = false,
                                 default = nil)
  if valid_614238 != nil:
    section.add "X-Amz-Security-Token", valid_614238
  var valid_614239 = header.getOrDefault("X-Amz-Algorithm")
  valid_614239 = validateParameter(valid_614239, JString, required = false,
                                 default = nil)
  if valid_614239 != nil:
    section.add "X-Amz-Algorithm", valid_614239
  var valid_614240 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614240 = validateParameter(valid_614240, JString, required = false,
                                 default = nil)
  if valid_614240 != nil:
    section.add "X-Amz-SignedHeaders", valid_614240
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614241: Call_GetDescribeMetricCollectionTypes_614229;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.</p> <p>The <code>GroupStandbyInstances</code> metric is not returned by default. You must explicitly request this metric when calling <a>EnableMetricsCollection</a>.</p>
  ## 
  let valid = call_614241.validator(path, query, header, formData, body)
  let scheme = call_614241.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614241.url(scheme.get, call_614241.host, call_614241.base,
                         call_614241.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614241, url, valid)

proc call*(call_614242: Call_GetDescribeMetricCollectionTypes_614229;
          Action: string = "DescribeMetricCollectionTypes";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeMetricCollectionTypes
  ## <p>Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.</p> <p>The <code>GroupStandbyInstances</code> metric is not returned by default. You must explicitly request this metric when calling <a>EnableMetricsCollection</a>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614243 = newJObject()
  add(query_614243, "Action", newJString(Action))
  add(query_614243, "Version", newJString(Version))
  result = call_614242.call(nil, query_614243, nil, nil, nil)

var getDescribeMetricCollectionTypes* = Call_GetDescribeMetricCollectionTypes_614229(
    name: "getDescribeMetricCollectionTypes", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeMetricCollectionTypes",
    validator: validate_GetDescribeMetricCollectionTypes_614230, base: "/",
    url: url_GetDescribeMetricCollectionTypes_614231,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeNotificationConfigurations_614277 = ref object of OpenApiRestCall_612658
proc url_PostDescribeNotificationConfigurations_614279(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeNotificationConfigurations_614278(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the notification actions associated with the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614280 = query.getOrDefault("Action")
  valid_614280 = validateParameter(valid_614280, JString, required = true, default = newJString(
      "DescribeNotificationConfigurations"))
  if valid_614280 != nil:
    section.add "Action", valid_614280
  var valid_614281 = query.getOrDefault("Version")
  valid_614281 = validateParameter(valid_614281, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_614281 != nil:
    section.add "Version", valid_614281
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614282 = header.getOrDefault("X-Amz-Signature")
  valid_614282 = validateParameter(valid_614282, JString, required = false,
                                 default = nil)
  if valid_614282 != nil:
    section.add "X-Amz-Signature", valid_614282
  var valid_614283 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614283 = validateParameter(valid_614283, JString, required = false,
                                 default = nil)
  if valid_614283 != nil:
    section.add "X-Amz-Content-Sha256", valid_614283
  var valid_614284 = header.getOrDefault("X-Amz-Date")
  valid_614284 = validateParameter(valid_614284, JString, required = false,
                                 default = nil)
  if valid_614284 != nil:
    section.add "X-Amz-Date", valid_614284
  var valid_614285 = header.getOrDefault("X-Amz-Credential")
  valid_614285 = validateParameter(valid_614285, JString, required = false,
                                 default = nil)
  if valid_614285 != nil:
    section.add "X-Amz-Credential", valid_614285
  var valid_614286 = header.getOrDefault("X-Amz-Security-Token")
  valid_614286 = validateParameter(valid_614286, JString, required = false,
                                 default = nil)
  if valid_614286 != nil:
    section.add "X-Amz-Security-Token", valid_614286
  var valid_614287 = header.getOrDefault("X-Amz-Algorithm")
  valid_614287 = validateParameter(valid_614287, JString, required = false,
                                 default = nil)
  if valid_614287 != nil:
    section.add "X-Amz-Algorithm", valid_614287
  var valid_614288 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614288 = validateParameter(valid_614288, JString, required = false,
                                 default = nil)
  if valid_614288 != nil:
    section.add "X-Amz-SignedHeaders", valid_614288
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupNames: JArray
  ##                        : The name of the Auto Scaling group.
  section = newJObject()
  var valid_614289 = formData.getOrDefault("NextToken")
  valid_614289 = validateParameter(valid_614289, JString, required = false,
                                 default = nil)
  if valid_614289 != nil:
    section.add "NextToken", valid_614289
  var valid_614290 = formData.getOrDefault("MaxRecords")
  valid_614290 = validateParameter(valid_614290, JInt, required = false, default = nil)
  if valid_614290 != nil:
    section.add "MaxRecords", valid_614290
  var valid_614291 = formData.getOrDefault("AutoScalingGroupNames")
  valid_614291 = validateParameter(valid_614291, JArray, required = false,
                                 default = nil)
  if valid_614291 != nil:
    section.add "AutoScalingGroupNames", valid_614291
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614292: Call_PostDescribeNotificationConfigurations_614277;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the notification actions associated with the specified Auto Scaling group.
  ## 
  let valid = call_614292.validator(path, query, header, formData, body)
  let scheme = call_614292.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614292.url(scheme.get, call_614292.host, call_614292.base,
                         call_614292.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614292, url, valid)

proc call*(call_614293: Call_PostDescribeNotificationConfigurations_614277;
          NextToken: string = ""; MaxRecords: int = 0;
          AutoScalingGroupNames: JsonNode = nil;
          Action: string = "DescribeNotificationConfigurations";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeNotificationConfigurations
  ## Describes the notification actions associated with the specified Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupNames: JArray
  ##                        : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614294 = newJObject()
  var formData_614295 = newJObject()
  add(formData_614295, "NextToken", newJString(NextToken))
  add(formData_614295, "MaxRecords", newJInt(MaxRecords))
  if AutoScalingGroupNames != nil:
    formData_614295.add "AutoScalingGroupNames", AutoScalingGroupNames
  add(query_614294, "Action", newJString(Action))
  add(query_614294, "Version", newJString(Version))
  result = call_614293.call(nil, query_614294, nil, formData_614295, nil)

var postDescribeNotificationConfigurations* = Call_PostDescribeNotificationConfigurations_614277(
    name: "postDescribeNotificationConfigurations", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeNotificationConfigurations",
    validator: validate_PostDescribeNotificationConfigurations_614278, base: "/",
    url: url_PostDescribeNotificationConfigurations_614279,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeNotificationConfigurations_614259 = ref object of OpenApiRestCall_612658
proc url_GetDescribeNotificationConfigurations_614261(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeNotificationConfigurations_614260(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the notification actions associated with the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   AutoScalingGroupNames: JArray
  ##                        : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  section = newJObject()
  var valid_614262 = query.getOrDefault("NextToken")
  valid_614262 = validateParameter(valid_614262, JString, required = false,
                                 default = nil)
  if valid_614262 != nil:
    section.add "NextToken", valid_614262
  var valid_614263 = query.getOrDefault("AutoScalingGroupNames")
  valid_614263 = validateParameter(valid_614263, JArray, required = false,
                                 default = nil)
  if valid_614263 != nil:
    section.add "AutoScalingGroupNames", valid_614263
  var valid_614264 = query.getOrDefault("Action")
  valid_614264 = validateParameter(valid_614264, JString, required = true, default = newJString(
      "DescribeNotificationConfigurations"))
  if valid_614264 != nil:
    section.add "Action", valid_614264
  var valid_614265 = query.getOrDefault("Version")
  valid_614265 = validateParameter(valid_614265, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_614265 != nil:
    section.add "Version", valid_614265
  var valid_614266 = query.getOrDefault("MaxRecords")
  valid_614266 = validateParameter(valid_614266, JInt, required = false, default = nil)
  if valid_614266 != nil:
    section.add "MaxRecords", valid_614266
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614267 = header.getOrDefault("X-Amz-Signature")
  valid_614267 = validateParameter(valid_614267, JString, required = false,
                                 default = nil)
  if valid_614267 != nil:
    section.add "X-Amz-Signature", valid_614267
  var valid_614268 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614268 = validateParameter(valid_614268, JString, required = false,
                                 default = nil)
  if valid_614268 != nil:
    section.add "X-Amz-Content-Sha256", valid_614268
  var valid_614269 = header.getOrDefault("X-Amz-Date")
  valid_614269 = validateParameter(valid_614269, JString, required = false,
                                 default = nil)
  if valid_614269 != nil:
    section.add "X-Amz-Date", valid_614269
  var valid_614270 = header.getOrDefault("X-Amz-Credential")
  valid_614270 = validateParameter(valid_614270, JString, required = false,
                                 default = nil)
  if valid_614270 != nil:
    section.add "X-Amz-Credential", valid_614270
  var valid_614271 = header.getOrDefault("X-Amz-Security-Token")
  valid_614271 = validateParameter(valid_614271, JString, required = false,
                                 default = nil)
  if valid_614271 != nil:
    section.add "X-Amz-Security-Token", valid_614271
  var valid_614272 = header.getOrDefault("X-Amz-Algorithm")
  valid_614272 = validateParameter(valid_614272, JString, required = false,
                                 default = nil)
  if valid_614272 != nil:
    section.add "X-Amz-Algorithm", valid_614272
  var valid_614273 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614273 = validateParameter(valid_614273, JString, required = false,
                                 default = nil)
  if valid_614273 != nil:
    section.add "X-Amz-SignedHeaders", valid_614273
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614274: Call_GetDescribeNotificationConfigurations_614259;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the notification actions associated with the specified Auto Scaling group.
  ## 
  let valid = call_614274.validator(path, query, header, formData, body)
  let scheme = call_614274.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614274.url(scheme.get, call_614274.host, call_614274.base,
                         call_614274.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614274, url, valid)

proc call*(call_614275: Call_GetDescribeNotificationConfigurations_614259;
          NextToken: string = ""; AutoScalingGroupNames: JsonNode = nil;
          Action: string = "DescribeNotificationConfigurations";
          Version: string = "2011-01-01"; MaxRecords: int = 0): Recallable =
  ## getDescribeNotificationConfigurations
  ## Describes the notification actions associated with the specified Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   AutoScalingGroupNames: JArray
  ##                        : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  var query_614276 = newJObject()
  add(query_614276, "NextToken", newJString(NextToken))
  if AutoScalingGroupNames != nil:
    query_614276.add "AutoScalingGroupNames", AutoScalingGroupNames
  add(query_614276, "Action", newJString(Action))
  add(query_614276, "Version", newJString(Version))
  add(query_614276, "MaxRecords", newJInt(MaxRecords))
  result = call_614275.call(nil, query_614276, nil, nil, nil)

var getDescribeNotificationConfigurations* = Call_GetDescribeNotificationConfigurations_614259(
    name: "getDescribeNotificationConfigurations", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeNotificationConfigurations",
    validator: validate_GetDescribeNotificationConfigurations_614260, base: "/",
    url: url_GetDescribeNotificationConfigurations_614261,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribePolicies_614316 = ref object of OpenApiRestCall_612658
proc url_PostDescribePolicies_614318(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribePolicies_614317(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the policies for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614319 = query.getOrDefault("Action")
  valid_614319 = validateParameter(valid_614319, JString, required = true,
                                 default = newJString("DescribePolicies"))
  if valid_614319 != nil:
    section.add "Action", valid_614319
  var valid_614320 = query.getOrDefault("Version")
  valid_614320 = validateParameter(valid_614320, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_614320 != nil:
    section.add "Version", valid_614320
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614321 = header.getOrDefault("X-Amz-Signature")
  valid_614321 = validateParameter(valid_614321, JString, required = false,
                                 default = nil)
  if valid_614321 != nil:
    section.add "X-Amz-Signature", valid_614321
  var valid_614322 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614322 = validateParameter(valid_614322, JString, required = false,
                                 default = nil)
  if valid_614322 != nil:
    section.add "X-Amz-Content-Sha256", valid_614322
  var valid_614323 = header.getOrDefault("X-Amz-Date")
  valid_614323 = validateParameter(valid_614323, JString, required = false,
                                 default = nil)
  if valid_614323 != nil:
    section.add "X-Amz-Date", valid_614323
  var valid_614324 = header.getOrDefault("X-Amz-Credential")
  valid_614324 = validateParameter(valid_614324, JString, required = false,
                                 default = nil)
  if valid_614324 != nil:
    section.add "X-Amz-Credential", valid_614324
  var valid_614325 = header.getOrDefault("X-Amz-Security-Token")
  valid_614325 = validateParameter(valid_614325, JString, required = false,
                                 default = nil)
  if valid_614325 != nil:
    section.add "X-Amz-Security-Token", valid_614325
  var valid_614326 = header.getOrDefault("X-Amz-Algorithm")
  valid_614326 = validateParameter(valid_614326, JString, required = false,
                                 default = nil)
  if valid_614326 != nil:
    section.add "X-Amz-Algorithm", valid_614326
  var valid_614327 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614327 = validateParameter(valid_614327, JString, required = false,
                                 default = nil)
  if valid_614327 != nil:
    section.add "X-Amz-SignedHeaders", valid_614327
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to be returned with each call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   PolicyTypes: JArray
  ##              : One or more policy types. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>.
  ##   PolicyNames: JArray
  ##              : The names of one or more policies. If you omit this parameter, all policies are described. If a group name is provided, the results are limited to that group. This list is limited to 50 items. If you specify an unknown policy name, it is ignored with no error.
  section = newJObject()
  var valid_614328 = formData.getOrDefault("AutoScalingGroupName")
  valid_614328 = validateParameter(valid_614328, JString, required = false,
                                 default = nil)
  if valid_614328 != nil:
    section.add "AutoScalingGroupName", valid_614328
  var valid_614329 = formData.getOrDefault("NextToken")
  valid_614329 = validateParameter(valid_614329, JString, required = false,
                                 default = nil)
  if valid_614329 != nil:
    section.add "NextToken", valid_614329
  var valid_614330 = formData.getOrDefault("MaxRecords")
  valid_614330 = validateParameter(valid_614330, JInt, required = false, default = nil)
  if valid_614330 != nil:
    section.add "MaxRecords", valid_614330
  var valid_614331 = formData.getOrDefault("PolicyTypes")
  valid_614331 = validateParameter(valid_614331, JArray, required = false,
                                 default = nil)
  if valid_614331 != nil:
    section.add "PolicyTypes", valid_614331
  var valid_614332 = formData.getOrDefault("PolicyNames")
  valid_614332 = validateParameter(valid_614332, JArray, required = false,
                                 default = nil)
  if valid_614332 != nil:
    section.add "PolicyNames", valid_614332
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614333: Call_PostDescribePolicies_614316; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the policies for the specified Auto Scaling group.
  ## 
  let valid = call_614333.validator(path, query, header, formData, body)
  let scheme = call_614333.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614333.url(scheme.get, call_614333.host, call_614333.base,
                         call_614333.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614333, url, valid)

proc call*(call_614334: Call_PostDescribePolicies_614316;
          AutoScalingGroupName: string = ""; NextToken: string = "";
          MaxRecords: int = 0; PolicyTypes: JsonNode = nil; PolicyNames: JsonNode = nil;
          Action: string = "DescribePolicies"; Version: string = "2011-01-01"): Recallable =
  ## postDescribePolicies
  ## Describes the policies for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: int
  ##             : The maximum number of items to be returned with each call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   PolicyTypes: JArray
  ##              : One or more policy types. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>.
  ##   PolicyNames: JArray
  ##              : The names of one or more policies. If you omit this parameter, all policies are described. If a group name is provided, the results are limited to that group. This list is limited to 50 items. If you specify an unknown policy name, it is ignored with no error.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614335 = newJObject()
  var formData_614336 = newJObject()
  add(formData_614336, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_614336, "NextToken", newJString(NextToken))
  add(formData_614336, "MaxRecords", newJInt(MaxRecords))
  if PolicyTypes != nil:
    formData_614336.add "PolicyTypes", PolicyTypes
  if PolicyNames != nil:
    formData_614336.add "PolicyNames", PolicyNames
  add(query_614335, "Action", newJString(Action))
  add(query_614335, "Version", newJString(Version))
  result = call_614334.call(nil, query_614335, nil, formData_614336, nil)

var postDescribePolicies* = Call_PostDescribePolicies_614316(
    name: "postDescribePolicies", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribePolicies",
    validator: validate_PostDescribePolicies_614317, base: "/",
    url: url_PostDescribePolicies_614318, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribePolicies_614296 = ref object of OpenApiRestCall_612658
proc url_GetDescribePolicies_614298(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribePolicies_614297(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Describes the policies for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   PolicyTypes: JArray
  ##              : One or more policy types. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>.
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to be returned with each call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   PolicyNames: JArray
  ##              : The names of one or more policies. If you omit this parameter, all policies are described. If a group name is provided, the results are limited to that group. This list is limited to 50 items. If you specify an unknown policy name, it is ignored with no error.
  section = newJObject()
  var valid_614299 = query.getOrDefault("NextToken")
  valid_614299 = validateParameter(valid_614299, JString, required = false,
                                 default = nil)
  if valid_614299 != nil:
    section.add "NextToken", valid_614299
  var valid_614300 = query.getOrDefault("AutoScalingGroupName")
  valid_614300 = validateParameter(valid_614300, JString, required = false,
                                 default = nil)
  if valid_614300 != nil:
    section.add "AutoScalingGroupName", valid_614300
  var valid_614301 = query.getOrDefault("Action")
  valid_614301 = validateParameter(valid_614301, JString, required = true,
                                 default = newJString("DescribePolicies"))
  if valid_614301 != nil:
    section.add "Action", valid_614301
  var valid_614302 = query.getOrDefault("PolicyTypes")
  valid_614302 = validateParameter(valid_614302, JArray, required = false,
                                 default = nil)
  if valid_614302 != nil:
    section.add "PolicyTypes", valid_614302
  var valid_614303 = query.getOrDefault("Version")
  valid_614303 = validateParameter(valid_614303, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_614303 != nil:
    section.add "Version", valid_614303
  var valid_614304 = query.getOrDefault("MaxRecords")
  valid_614304 = validateParameter(valid_614304, JInt, required = false, default = nil)
  if valid_614304 != nil:
    section.add "MaxRecords", valid_614304
  var valid_614305 = query.getOrDefault("PolicyNames")
  valid_614305 = validateParameter(valid_614305, JArray, required = false,
                                 default = nil)
  if valid_614305 != nil:
    section.add "PolicyNames", valid_614305
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614306 = header.getOrDefault("X-Amz-Signature")
  valid_614306 = validateParameter(valid_614306, JString, required = false,
                                 default = nil)
  if valid_614306 != nil:
    section.add "X-Amz-Signature", valid_614306
  var valid_614307 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614307 = validateParameter(valid_614307, JString, required = false,
                                 default = nil)
  if valid_614307 != nil:
    section.add "X-Amz-Content-Sha256", valid_614307
  var valid_614308 = header.getOrDefault("X-Amz-Date")
  valid_614308 = validateParameter(valid_614308, JString, required = false,
                                 default = nil)
  if valid_614308 != nil:
    section.add "X-Amz-Date", valid_614308
  var valid_614309 = header.getOrDefault("X-Amz-Credential")
  valid_614309 = validateParameter(valid_614309, JString, required = false,
                                 default = nil)
  if valid_614309 != nil:
    section.add "X-Amz-Credential", valid_614309
  var valid_614310 = header.getOrDefault("X-Amz-Security-Token")
  valid_614310 = validateParameter(valid_614310, JString, required = false,
                                 default = nil)
  if valid_614310 != nil:
    section.add "X-Amz-Security-Token", valid_614310
  var valid_614311 = header.getOrDefault("X-Amz-Algorithm")
  valid_614311 = validateParameter(valid_614311, JString, required = false,
                                 default = nil)
  if valid_614311 != nil:
    section.add "X-Amz-Algorithm", valid_614311
  var valid_614312 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614312 = validateParameter(valid_614312, JString, required = false,
                                 default = nil)
  if valid_614312 != nil:
    section.add "X-Amz-SignedHeaders", valid_614312
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614313: Call_GetDescribePolicies_614296; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the policies for the specified Auto Scaling group.
  ## 
  let valid = call_614313.validator(path, query, header, formData, body)
  let scheme = call_614313.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614313.url(scheme.get, call_614313.host, call_614313.base,
                         call_614313.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614313, url, valid)

proc call*(call_614314: Call_GetDescribePolicies_614296; NextToken: string = "";
          AutoScalingGroupName: string = ""; Action: string = "DescribePolicies";
          PolicyTypes: JsonNode = nil; Version: string = "2011-01-01";
          MaxRecords: int = 0; PolicyNames: JsonNode = nil): Recallable =
  ## getDescribePolicies
  ## Describes the policies for the specified Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   PolicyTypes: JArray
  ##              : One or more policy types. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>.
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to be returned with each call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   PolicyNames: JArray
  ##              : The names of one or more policies. If you omit this parameter, all policies are described. If a group name is provided, the results are limited to that group. This list is limited to 50 items. If you specify an unknown policy name, it is ignored with no error.
  var query_614315 = newJObject()
  add(query_614315, "NextToken", newJString(NextToken))
  add(query_614315, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_614315, "Action", newJString(Action))
  if PolicyTypes != nil:
    query_614315.add "PolicyTypes", PolicyTypes
  add(query_614315, "Version", newJString(Version))
  add(query_614315, "MaxRecords", newJInt(MaxRecords))
  if PolicyNames != nil:
    query_614315.add "PolicyNames", PolicyNames
  result = call_614314.call(nil, query_614315, nil, nil, nil)

var getDescribePolicies* = Call_GetDescribePolicies_614296(
    name: "getDescribePolicies", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribePolicies",
    validator: validate_GetDescribePolicies_614297, base: "/",
    url: url_GetDescribePolicies_614298, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeScalingActivities_614356 = ref object of OpenApiRestCall_612658
proc url_PostDescribeScalingActivities_614358(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeScalingActivities_614357(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more scaling activities for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614359 = query.getOrDefault("Action")
  valid_614359 = validateParameter(valid_614359, JString, required = true, default = newJString(
      "DescribeScalingActivities"))
  if valid_614359 != nil:
    section.add "Action", valid_614359
  var valid_614360 = query.getOrDefault("Version")
  valid_614360 = validateParameter(valid_614360, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_614360 != nil:
    section.add "Version", valid_614360
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614361 = header.getOrDefault("X-Amz-Signature")
  valid_614361 = validateParameter(valid_614361, JString, required = false,
                                 default = nil)
  if valid_614361 != nil:
    section.add "X-Amz-Signature", valid_614361
  var valid_614362 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614362 = validateParameter(valid_614362, JString, required = false,
                                 default = nil)
  if valid_614362 != nil:
    section.add "X-Amz-Content-Sha256", valid_614362
  var valid_614363 = header.getOrDefault("X-Amz-Date")
  valid_614363 = validateParameter(valid_614363, JString, required = false,
                                 default = nil)
  if valid_614363 != nil:
    section.add "X-Amz-Date", valid_614363
  var valid_614364 = header.getOrDefault("X-Amz-Credential")
  valid_614364 = validateParameter(valid_614364, JString, required = false,
                                 default = nil)
  if valid_614364 != nil:
    section.add "X-Amz-Credential", valid_614364
  var valid_614365 = header.getOrDefault("X-Amz-Security-Token")
  valid_614365 = validateParameter(valid_614365, JString, required = false,
                                 default = nil)
  if valid_614365 != nil:
    section.add "X-Amz-Security-Token", valid_614365
  var valid_614366 = header.getOrDefault("X-Amz-Algorithm")
  valid_614366 = validateParameter(valid_614366, JString, required = false,
                                 default = nil)
  if valid_614366 != nil:
    section.add "X-Amz-Algorithm", valid_614366
  var valid_614367 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614367 = validateParameter(valid_614367, JString, required = false,
                                 default = nil)
  if valid_614367 != nil:
    section.add "X-Amz-SignedHeaders", valid_614367
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   ActivityIds: JArray
  ##              : The activity IDs of the desired scaling activities. You can specify up to 50 IDs. If you omit this parameter, all activities for the past six weeks are described. If unknown activities are requested, they are ignored with no error. If you specify an Auto Scaling group, the results are limited to that group.
  section = newJObject()
  var valid_614368 = formData.getOrDefault("AutoScalingGroupName")
  valid_614368 = validateParameter(valid_614368, JString, required = false,
                                 default = nil)
  if valid_614368 != nil:
    section.add "AutoScalingGroupName", valid_614368
  var valid_614369 = formData.getOrDefault("NextToken")
  valid_614369 = validateParameter(valid_614369, JString, required = false,
                                 default = nil)
  if valid_614369 != nil:
    section.add "NextToken", valid_614369
  var valid_614370 = formData.getOrDefault("MaxRecords")
  valid_614370 = validateParameter(valid_614370, JInt, required = false, default = nil)
  if valid_614370 != nil:
    section.add "MaxRecords", valid_614370
  var valid_614371 = formData.getOrDefault("ActivityIds")
  valid_614371 = validateParameter(valid_614371, JArray, required = false,
                                 default = nil)
  if valid_614371 != nil:
    section.add "ActivityIds", valid_614371
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614372: Call_PostDescribeScalingActivities_614356; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes one or more scaling activities for the specified Auto Scaling group.
  ## 
  let valid = call_614372.validator(path, query, header, formData, body)
  let scheme = call_614372.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614372.url(scheme.get, call_614372.host, call_614372.base,
                         call_614372.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614372, url, valid)

proc call*(call_614373: Call_PostDescribeScalingActivities_614356;
          AutoScalingGroupName: string = ""; NextToken: string = "";
          MaxRecords: int = 0; Action: string = "DescribeScalingActivities";
          Version: string = "2011-01-01"; ActivityIds: JsonNode = nil): Recallable =
  ## postDescribeScalingActivities
  ## Describes one or more scaling activities for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ActivityIds: JArray
  ##              : The activity IDs of the desired scaling activities. You can specify up to 50 IDs. If you omit this parameter, all activities for the past six weeks are described. If unknown activities are requested, they are ignored with no error. If you specify an Auto Scaling group, the results are limited to that group.
  var query_614374 = newJObject()
  var formData_614375 = newJObject()
  add(formData_614375, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_614375, "NextToken", newJString(NextToken))
  add(formData_614375, "MaxRecords", newJInt(MaxRecords))
  add(query_614374, "Action", newJString(Action))
  add(query_614374, "Version", newJString(Version))
  if ActivityIds != nil:
    formData_614375.add "ActivityIds", ActivityIds
  result = call_614373.call(nil, query_614374, nil, formData_614375, nil)

var postDescribeScalingActivities* = Call_PostDescribeScalingActivities_614356(
    name: "postDescribeScalingActivities", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeScalingActivities",
    validator: validate_PostDescribeScalingActivities_614357, base: "/",
    url: url_PostDescribeScalingActivities_614358,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeScalingActivities_614337 = ref object of OpenApiRestCall_612658
proc url_GetDescribeScalingActivities_614339(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeScalingActivities_614338(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more scaling activities for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ActivityIds: JArray
  ##              : The activity IDs of the desired scaling activities. You can specify up to 50 IDs. If you omit this parameter, all activities for the past six weeks are described. If unknown activities are requested, they are ignored with no error. If you specify an Auto Scaling group, the results are limited to that group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  section = newJObject()
  var valid_614340 = query.getOrDefault("ActivityIds")
  valid_614340 = validateParameter(valid_614340, JArray, required = false,
                                 default = nil)
  if valid_614340 != nil:
    section.add "ActivityIds", valid_614340
  var valid_614341 = query.getOrDefault("NextToken")
  valid_614341 = validateParameter(valid_614341, JString, required = false,
                                 default = nil)
  if valid_614341 != nil:
    section.add "NextToken", valid_614341
  var valid_614342 = query.getOrDefault("AutoScalingGroupName")
  valid_614342 = validateParameter(valid_614342, JString, required = false,
                                 default = nil)
  if valid_614342 != nil:
    section.add "AutoScalingGroupName", valid_614342
  var valid_614343 = query.getOrDefault("Action")
  valid_614343 = validateParameter(valid_614343, JString, required = true, default = newJString(
      "DescribeScalingActivities"))
  if valid_614343 != nil:
    section.add "Action", valid_614343
  var valid_614344 = query.getOrDefault("Version")
  valid_614344 = validateParameter(valid_614344, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_614344 != nil:
    section.add "Version", valid_614344
  var valid_614345 = query.getOrDefault("MaxRecords")
  valid_614345 = validateParameter(valid_614345, JInt, required = false, default = nil)
  if valid_614345 != nil:
    section.add "MaxRecords", valid_614345
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614346 = header.getOrDefault("X-Amz-Signature")
  valid_614346 = validateParameter(valid_614346, JString, required = false,
                                 default = nil)
  if valid_614346 != nil:
    section.add "X-Amz-Signature", valid_614346
  var valid_614347 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614347 = validateParameter(valid_614347, JString, required = false,
                                 default = nil)
  if valid_614347 != nil:
    section.add "X-Amz-Content-Sha256", valid_614347
  var valid_614348 = header.getOrDefault("X-Amz-Date")
  valid_614348 = validateParameter(valid_614348, JString, required = false,
                                 default = nil)
  if valid_614348 != nil:
    section.add "X-Amz-Date", valid_614348
  var valid_614349 = header.getOrDefault("X-Amz-Credential")
  valid_614349 = validateParameter(valid_614349, JString, required = false,
                                 default = nil)
  if valid_614349 != nil:
    section.add "X-Amz-Credential", valid_614349
  var valid_614350 = header.getOrDefault("X-Amz-Security-Token")
  valid_614350 = validateParameter(valid_614350, JString, required = false,
                                 default = nil)
  if valid_614350 != nil:
    section.add "X-Amz-Security-Token", valid_614350
  var valid_614351 = header.getOrDefault("X-Amz-Algorithm")
  valid_614351 = validateParameter(valid_614351, JString, required = false,
                                 default = nil)
  if valid_614351 != nil:
    section.add "X-Amz-Algorithm", valid_614351
  var valid_614352 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614352 = validateParameter(valid_614352, JString, required = false,
                                 default = nil)
  if valid_614352 != nil:
    section.add "X-Amz-SignedHeaders", valid_614352
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614353: Call_GetDescribeScalingActivities_614337; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes one or more scaling activities for the specified Auto Scaling group.
  ## 
  let valid = call_614353.validator(path, query, header, formData, body)
  let scheme = call_614353.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614353.url(scheme.get, call_614353.host, call_614353.base,
                         call_614353.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614353, url, valid)

proc call*(call_614354: Call_GetDescribeScalingActivities_614337;
          ActivityIds: JsonNode = nil; NextToken: string = "";
          AutoScalingGroupName: string = "";
          Action: string = "DescribeScalingActivities";
          Version: string = "2011-01-01"; MaxRecords: int = 0): Recallable =
  ## getDescribeScalingActivities
  ## Describes one or more scaling activities for the specified Auto Scaling group.
  ##   ActivityIds: JArray
  ##              : The activity IDs of the desired scaling activities. You can specify up to 50 IDs. If you omit this parameter, all activities for the past six weeks are described. If unknown activities are requested, they are ignored with no error. If you specify an Auto Scaling group, the results are limited to that group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  var query_614355 = newJObject()
  if ActivityIds != nil:
    query_614355.add "ActivityIds", ActivityIds
  add(query_614355, "NextToken", newJString(NextToken))
  add(query_614355, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_614355, "Action", newJString(Action))
  add(query_614355, "Version", newJString(Version))
  add(query_614355, "MaxRecords", newJInt(MaxRecords))
  result = call_614354.call(nil, query_614355, nil, nil, nil)

var getDescribeScalingActivities* = Call_GetDescribeScalingActivities_614337(
    name: "getDescribeScalingActivities", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeScalingActivities",
    validator: validate_GetDescribeScalingActivities_614338, base: "/",
    url: url_GetDescribeScalingActivities_614339,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeScalingProcessTypes_614391 = ref object of OpenApiRestCall_612658
proc url_PostDescribeScalingProcessTypes_614393(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeScalingProcessTypes_614392(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the scaling process types for use with <a>ResumeProcesses</a> and <a>SuspendProcesses</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614394 = query.getOrDefault("Action")
  valid_614394 = validateParameter(valid_614394, JString, required = true, default = newJString(
      "DescribeScalingProcessTypes"))
  if valid_614394 != nil:
    section.add "Action", valid_614394
  var valid_614395 = query.getOrDefault("Version")
  valid_614395 = validateParameter(valid_614395, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_614395 != nil:
    section.add "Version", valid_614395
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614396 = header.getOrDefault("X-Amz-Signature")
  valid_614396 = validateParameter(valid_614396, JString, required = false,
                                 default = nil)
  if valid_614396 != nil:
    section.add "X-Amz-Signature", valid_614396
  var valid_614397 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614397 = validateParameter(valid_614397, JString, required = false,
                                 default = nil)
  if valid_614397 != nil:
    section.add "X-Amz-Content-Sha256", valid_614397
  var valid_614398 = header.getOrDefault("X-Amz-Date")
  valid_614398 = validateParameter(valid_614398, JString, required = false,
                                 default = nil)
  if valid_614398 != nil:
    section.add "X-Amz-Date", valid_614398
  var valid_614399 = header.getOrDefault("X-Amz-Credential")
  valid_614399 = validateParameter(valid_614399, JString, required = false,
                                 default = nil)
  if valid_614399 != nil:
    section.add "X-Amz-Credential", valid_614399
  var valid_614400 = header.getOrDefault("X-Amz-Security-Token")
  valid_614400 = validateParameter(valid_614400, JString, required = false,
                                 default = nil)
  if valid_614400 != nil:
    section.add "X-Amz-Security-Token", valid_614400
  var valid_614401 = header.getOrDefault("X-Amz-Algorithm")
  valid_614401 = validateParameter(valid_614401, JString, required = false,
                                 default = nil)
  if valid_614401 != nil:
    section.add "X-Amz-Algorithm", valid_614401
  var valid_614402 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614402 = validateParameter(valid_614402, JString, required = false,
                                 default = nil)
  if valid_614402 != nil:
    section.add "X-Amz-SignedHeaders", valid_614402
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614403: Call_PostDescribeScalingProcessTypes_614391;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the scaling process types for use with <a>ResumeProcesses</a> and <a>SuspendProcesses</a>.
  ## 
  let valid = call_614403.validator(path, query, header, formData, body)
  let scheme = call_614403.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614403.url(scheme.get, call_614403.host, call_614403.base,
                         call_614403.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614403, url, valid)

proc call*(call_614404: Call_PostDescribeScalingProcessTypes_614391;
          Action: string = "DescribeScalingProcessTypes";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeScalingProcessTypes
  ## Describes the scaling process types for use with <a>ResumeProcesses</a> and <a>SuspendProcesses</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614405 = newJObject()
  add(query_614405, "Action", newJString(Action))
  add(query_614405, "Version", newJString(Version))
  result = call_614404.call(nil, query_614405, nil, nil, nil)

var postDescribeScalingProcessTypes* = Call_PostDescribeScalingProcessTypes_614391(
    name: "postDescribeScalingProcessTypes", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeScalingProcessTypes",
    validator: validate_PostDescribeScalingProcessTypes_614392, base: "/",
    url: url_PostDescribeScalingProcessTypes_614393,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeScalingProcessTypes_614376 = ref object of OpenApiRestCall_612658
proc url_GetDescribeScalingProcessTypes_614378(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeScalingProcessTypes_614377(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the scaling process types for use with <a>ResumeProcesses</a> and <a>SuspendProcesses</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614379 = query.getOrDefault("Action")
  valid_614379 = validateParameter(valid_614379, JString, required = true, default = newJString(
      "DescribeScalingProcessTypes"))
  if valid_614379 != nil:
    section.add "Action", valid_614379
  var valid_614380 = query.getOrDefault("Version")
  valid_614380 = validateParameter(valid_614380, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_614380 != nil:
    section.add "Version", valid_614380
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614381 = header.getOrDefault("X-Amz-Signature")
  valid_614381 = validateParameter(valid_614381, JString, required = false,
                                 default = nil)
  if valid_614381 != nil:
    section.add "X-Amz-Signature", valid_614381
  var valid_614382 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614382 = validateParameter(valid_614382, JString, required = false,
                                 default = nil)
  if valid_614382 != nil:
    section.add "X-Amz-Content-Sha256", valid_614382
  var valid_614383 = header.getOrDefault("X-Amz-Date")
  valid_614383 = validateParameter(valid_614383, JString, required = false,
                                 default = nil)
  if valid_614383 != nil:
    section.add "X-Amz-Date", valid_614383
  var valid_614384 = header.getOrDefault("X-Amz-Credential")
  valid_614384 = validateParameter(valid_614384, JString, required = false,
                                 default = nil)
  if valid_614384 != nil:
    section.add "X-Amz-Credential", valid_614384
  var valid_614385 = header.getOrDefault("X-Amz-Security-Token")
  valid_614385 = validateParameter(valid_614385, JString, required = false,
                                 default = nil)
  if valid_614385 != nil:
    section.add "X-Amz-Security-Token", valid_614385
  var valid_614386 = header.getOrDefault("X-Amz-Algorithm")
  valid_614386 = validateParameter(valid_614386, JString, required = false,
                                 default = nil)
  if valid_614386 != nil:
    section.add "X-Amz-Algorithm", valid_614386
  var valid_614387 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614387 = validateParameter(valid_614387, JString, required = false,
                                 default = nil)
  if valid_614387 != nil:
    section.add "X-Amz-SignedHeaders", valid_614387
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614388: Call_GetDescribeScalingProcessTypes_614376; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the scaling process types for use with <a>ResumeProcesses</a> and <a>SuspendProcesses</a>.
  ## 
  let valid = call_614388.validator(path, query, header, formData, body)
  let scheme = call_614388.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614388.url(scheme.get, call_614388.host, call_614388.base,
                         call_614388.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614388, url, valid)

proc call*(call_614389: Call_GetDescribeScalingProcessTypes_614376;
          Action: string = "DescribeScalingProcessTypes";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeScalingProcessTypes
  ## Describes the scaling process types for use with <a>ResumeProcesses</a> and <a>SuspendProcesses</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614390 = newJObject()
  add(query_614390, "Action", newJString(Action))
  add(query_614390, "Version", newJString(Version))
  result = call_614389.call(nil, query_614390, nil, nil, nil)

var getDescribeScalingProcessTypes* = Call_GetDescribeScalingProcessTypes_614376(
    name: "getDescribeScalingProcessTypes", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeScalingProcessTypes",
    validator: validate_GetDescribeScalingProcessTypes_614377, base: "/",
    url: url_GetDescribeScalingProcessTypes_614378,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeScheduledActions_614427 = ref object of OpenApiRestCall_612658
proc url_PostDescribeScheduledActions_614429(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeScheduledActions_614428(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the actions scheduled for your Auto Scaling group that haven't run or that have not reached their end time. To describe the actions that have already run, use <a>DescribeScalingActivities</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614430 = query.getOrDefault("Action")
  valid_614430 = validateParameter(valid_614430, JString, required = true, default = newJString(
      "DescribeScheduledActions"))
  if valid_614430 != nil:
    section.add "Action", valid_614430
  var valid_614431 = query.getOrDefault("Version")
  valid_614431 = validateParameter(valid_614431, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_614431 != nil:
    section.add "Version", valid_614431
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614432 = header.getOrDefault("X-Amz-Signature")
  valid_614432 = validateParameter(valid_614432, JString, required = false,
                                 default = nil)
  if valid_614432 != nil:
    section.add "X-Amz-Signature", valid_614432
  var valid_614433 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614433 = validateParameter(valid_614433, JString, required = false,
                                 default = nil)
  if valid_614433 != nil:
    section.add "X-Amz-Content-Sha256", valid_614433
  var valid_614434 = header.getOrDefault("X-Amz-Date")
  valid_614434 = validateParameter(valid_614434, JString, required = false,
                                 default = nil)
  if valid_614434 != nil:
    section.add "X-Amz-Date", valid_614434
  var valid_614435 = header.getOrDefault("X-Amz-Credential")
  valid_614435 = validateParameter(valid_614435, JString, required = false,
                                 default = nil)
  if valid_614435 != nil:
    section.add "X-Amz-Credential", valid_614435
  var valid_614436 = header.getOrDefault("X-Amz-Security-Token")
  valid_614436 = validateParameter(valid_614436, JString, required = false,
                                 default = nil)
  if valid_614436 != nil:
    section.add "X-Amz-Security-Token", valid_614436
  var valid_614437 = header.getOrDefault("X-Amz-Algorithm")
  valid_614437 = validateParameter(valid_614437, JString, required = false,
                                 default = nil)
  if valid_614437 != nil:
    section.add "X-Amz-Algorithm", valid_614437
  var valid_614438 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614438 = validateParameter(valid_614438, JString, required = false,
                                 default = nil)
  if valid_614438 != nil:
    section.add "X-Amz-SignedHeaders", valid_614438
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   EndTime: JString
  ##          : The latest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   StartTime: JString
  ##            : The earliest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   ScheduledActionNames: JArray
  ##                       : The names of one or more scheduled actions. You can specify up to 50 actions. If you omit this parameter, all scheduled actions are described. If you specify an unknown scheduled action, it is ignored with no error.
  section = newJObject()
  var valid_614439 = formData.getOrDefault("AutoScalingGroupName")
  valid_614439 = validateParameter(valid_614439, JString, required = false,
                                 default = nil)
  if valid_614439 != nil:
    section.add "AutoScalingGroupName", valid_614439
  var valid_614440 = formData.getOrDefault("NextToken")
  valid_614440 = validateParameter(valid_614440, JString, required = false,
                                 default = nil)
  if valid_614440 != nil:
    section.add "NextToken", valid_614440
  var valid_614441 = formData.getOrDefault("MaxRecords")
  valid_614441 = validateParameter(valid_614441, JInt, required = false, default = nil)
  if valid_614441 != nil:
    section.add "MaxRecords", valid_614441
  var valid_614442 = formData.getOrDefault("EndTime")
  valid_614442 = validateParameter(valid_614442, JString, required = false,
                                 default = nil)
  if valid_614442 != nil:
    section.add "EndTime", valid_614442
  var valid_614443 = formData.getOrDefault("StartTime")
  valid_614443 = validateParameter(valid_614443, JString, required = false,
                                 default = nil)
  if valid_614443 != nil:
    section.add "StartTime", valid_614443
  var valid_614444 = formData.getOrDefault("ScheduledActionNames")
  valid_614444 = validateParameter(valid_614444, JArray, required = false,
                                 default = nil)
  if valid_614444 != nil:
    section.add "ScheduledActionNames", valid_614444
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614445: Call_PostDescribeScheduledActions_614427; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the actions scheduled for your Auto Scaling group that haven't run or that have not reached their end time. To describe the actions that have already run, use <a>DescribeScalingActivities</a>.
  ## 
  let valid = call_614445.validator(path, query, header, formData, body)
  let scheme = call_614445.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614445.url(scheme.get, call_614445.host, call_614445.base,
                         call_614445.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614445, url, valid)

proc call*(call_614446: Call_PostDescribeScheduledActions_614427;
          AutoScalingGroupName: string = ""; NextToken: string = "";
          MaxRecords: int = 0; EndTime: string = ""; StartTime: string = "";
          Action: string = "DescribeScheduledActions";
          Version: string = "2011-01-01"; ScheduledActionNames: JsonNode = nil): Recallable =
  ## postDescribeScheduledActions
  ## Describes the actions scheduled for your Auto Scaling group that haven't run or that have not reached their end time. To describe the actions that have already run, use <a>DescribeScalingActivities</a>.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   EndTime: string
  ##          : The latest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   StartTime: string
  ##            : The earliest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ScheduledActionNames: JArray
  ##                       : The names of one or more scheduled actions. You can specify up to 50 actions. If you omit this parameter, all scheduled actions are described. If you specify an unknown scheduled action, it is ignored with no error.
  var query_614447 = newJObject()
  var formData_614448 = newJObject()
  add(formData_614448, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_614448, "NextToken", newJString(NextToken))
  add(formData_614448, "MaxRecords", newJInt(MaxRecords))
  add(formData_614448, "EndTime", newJString(EndTime))
  add(formData_614448, "StartTime", newJString(StartTime))
  add(query_614447, "Action", newJString(Action))
  add(query_614447, "Version", newJString(Version))
  if ScheduledActionNames != nil:
    formData_614448.add "ScheduledActionNames", ScheduledActionNames
  result = call_614446.call(nil, query_614447, nil, formData_614448, nil)

var postDescribeScheduledActions* = Call_PostDescribeScheduledActions_614427(
    name: "postDescribeScheduledActions", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeScheduledActions",
    validator: validate_PostDescribeScheduledActions_614428, base: "/",
    url: url_PostDescribeScheduledActions_614429,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeScheduledActions_614406 = ref object of OpenApiRestCall_612658
proc url_GetDescribeScheduledActions_614408(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeScheduledActions_614407(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the actions scheduled for your Auto Scaling group that haven't run or that have not reached their end time. To describe the actions that have already run, use <a>DescribeScalingActivities</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   ScheduledActionNames: JArray
  ##                       : The names of one or more scheduled actions. You can specify up to 50 actions. If you omit this parameter, all scheduled actions are described. If you specify an unknown scheduled action, it is ignored with no error.
  ##   StartTime: JString
  ##            : The earliest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   EndTime: JString
  ##          : The latest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  section = newJObject()
  var valid_614409 = query.getOrDefault("NextToken")
  valid_614409 = validateParameter(valid_614409, JString, required = false,
                                 default = nil)
  if valid_614409 != nil:
    section.add "NextToken", valid_614409
  var valid_614410 = query.getOrDefault("AutoScalingGroupName")
  valid_614410 = validateParameter(valid_614410, JString, required = false,
                                 default = nil)
  if valid_614410 != nil:
    section.add "AutoScalingGroupName", valid_614410
  var valid_614411 = query.getOrDefault("Action")
  valid_614411 = validateParameter(valid_614411, JString, required = true, default = newJString(
      "DescribeScheduledActions"))
  if valid_614411 != nil:
    section.add "Action", valid_614411
  var valid_614412 = query.getOrDefault("ScheduledActionNames")
  valid_614412 = validateParameter(valid_614412, JArray, required = false,
                                 default = nil)
  if valid_614412 != nil:
    section.add "ScheduledActionNames", valid_614412
  var valid_614413 = query.getOrDefault("StartTime")
  valid_614413 = validateParameter(valid_614413, JString, required = false,
                                 default = nil)
  if valid_614413 != nil:
    section.add "StartTime", valid_614413
  var valid_614414 = query.getOrDefault("EndTime")
  valid_614414 = validateParameter(valid_614414, JString, required = false,
                                 default = nil)
  if valid_614414 != nil:
    section.add "EndTime", valid_614414
  var valid_614415 = query.getOrDefault("Version")
  valid_614415 = validateParameter(valid_614415, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_614415 != nil:
    section.add "Version", valid_614415
  var valid_614416 = query.getOrDefault("MaxRecords")
  valid_614416 = validateParameter(valid_614416, JInt, required = false, default = nil)
  if valid_614416 != nil:
    section.add "MaxRecords", valid_614416
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614417 = header.getOrDefault("X-Amz-Signature")
  valid_614417 = validateParameter(valid_614417, JString, required = false,
                                 default = nil)
  if valid_614417 != nil:
    section.add "X-Amz-Signature", valid_614417
  var valid_614418 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614418 = validateParameter(valid_614418, JString, required = false,
                                 default = nil)
  if valid_614418 != nil:
    section.add "X-Amz-Content-Sha256", valid_614418
  var valid_614419 = header.getOrDefault("X-Amz-Date")
  valid_614419 = validateParameter(valid_614419, JString, required = false,
                                 default = nil)
  if valid_614419 != nil:
    section.add "X-Amz-Date", valid_614419
  var valid_614420 = header.getOrDefault("X-Amz-Credential")
  valid_614420 = validateParameter(valid_614420, JString, required = false,
                                 default = nil)
  if valid_614420 != nil:
    section.add "X-Amz-Credential", valid_614420
  var valid_614421 = header.getOrDefault("X-Amz-Security-Token")
  valid_614421 = validateParameter(valid_614421, JString, required = false,
                                 default = nil)
  if valid_614421 != nil:
    section.add "X-Amz-Security-Token", valid_614421
  var valid_614422 = header.getOrDefault("X-Amz-Algorithm")
  valid_614422 = validateParameter(valid_614422, JString, required = false,
                                 default = nil)
  if valid_614422 != nil:
    section.add "X-Amz-Algorithm", valid_614422
  var valid_614423 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614423 = validateParameter(valid_614423, JString, required = false,
                                 default = nil)
  if valid_614423 != nil:
    section.add "X-Amz-SignedHeaders", valid_614423
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614424: Call_GetDescribeScheduledActions_614406; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the actions scheduled for your Auto Scaling group that haven't run or that have not reached their end time. To describe the actions that have already run, use <a>DescribeScalingActivities</a>.
  ## 
  let valid = call_614424.validator(path, query, header, formData, body)
  let scheme = call_614424.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614424.url(scheme.get, call_614424.host, call_614424.base,
                         call_614424.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614424, url, valid)

proc call*(call_614425: Call_GetDescribeScheduledActions_614406;
          NextToken: string = ""; AutoScalingGroupName: string = "";
          Action: string = "DescribeScheduledActions";
          ScheduledActionNames: JsonNode = nil; StartTime: string = "";
          EndTime: string = ""; Version: string = "2011-01-01"; MaxRecords: int = 0): Recallable =
  ## getDescribeScheduledActions
  ## Describes the actions scheduled for your Auto Scaling group that haven't run or that have not reached their end time. To describe the actions that have already run, use <a>DescribeScalingActivities</a>.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   ScheduledActionNames: JArray
  ##                       : The names of one or more scheduled actions. You can specify up to 50 actions. If you omit this parameter, all scheduled actions are described. If you specify an unknown scheduled action, it is ignored with no error.
  ##   StartTime: string
  ##            : The earliest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   EndTime: string
  ##          : The latest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  var query_614426 = newJObject()
  add(query_614426, "NextToken", newJString(NextToken))
  add(query_614426, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_614426, "Action", newJString(Action))
  if ScheduledActionNames != nil:
    query_614426.add "ScheduledActionNames", ScheduledActionNames
  add(query_614426, "StartTime", newJString(StartTime))
  add(query_614426, "EndTime", newJString(EndTime))
  add(query_614426, "Version", newJString(Version))
  add(query_614426, "MaxRecords", newJInt(MaxRecords))
  result = call_614425.call(nil, query_614426, nil, nil, nil)

var getDescribeScheduledActions* = Call_GetDescribeScheduledActions_614406(
    name: "getDescribeScheduledActions", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeScheduledActions",
    validator: validate_GetDescribeScheduledActions_614407, base: "/",
    url: url_GetDescribeScheduledActions_614408,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeTags_614467 = ref object of OpenApiRestCall_612658
proc url_PostDescribeTags_614469(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeTags_614468(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Describes the specified tags.</p> <p>You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.</p> <p>You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there's no match, no special message is returned.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614470 = query.getOrDefault("Action")
  valid_614470 = validateParameter(valid_614470, JString, required = true,
                                 default = newJString("DescribeTags"))
  if valid_614470 != nil:
    section.add "Action", valid_614470
  var valid_614471 = query.getOrDefault("Version")
  valid_614471 = validateParameter(valid_614471, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_614471 != nil:
    section.add "Version", valid_614471
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614472 = header.getOrDefault("X-Amz-Signature")
  valid_614472 = validateParameter(valid_614472, JString, required = false,
                                 default = nil)
  if valid_614472 != nil:
    section.add "X-Amz-Signature", valid_614472
  var valid_614473 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614473 = validateParameter(valid_614473, JString, required = false,
                                 default = nil)
  if valid_614473 != nil:
    section.add "X-Amz-Content-Sha256", valid_614473
  var valid_614474 = header.getOrDefault("X-Amz-Date")
  valid_614474 = validateParameter(valid_614474, JString, required = false,
                                 default = nil)
  if valid_614474 != nil:
    section.add "X-Amz-Date", valid_614474
  var valid_614475 = header.getOrDefault("X-Amz-Credential")
  valid_614475 = validateParameter(valid_614475, JString, required = false,
                                 default = nil)
  if valid_614475 != nil:
    section.add "X-Amz-Credential", valid_614475
  var valid_614476 = header.getOrDefault("X-Amz-Security-Token")
  valid_614476 = validateParameter(valid_614476, JString, required = false,
                                 default = nil)
  if valid_614476 != nil:
    section.add "X-Amz-Security-Token", valid_614476
  var valid_614477 = header.getOrDefault("X-Amz-Algorithm")
  valid_614477 = validateParameter(valid_614477, JString, required = false,
                                 default = nil)
  if valid_614477 != nil:
    section.add "X-Amz-Algorithm", valid_614477
  var valid_614478 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614478 = validateParameter(valid_614478, JString, required = false,
                                 default = nil)
  if valid_614478 != nil:
    section.add "X-Amz-SignedHeaders", valid_614478
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   Filters: JArray
  ##          : One or more filters to scope the tags to return. The maximum number of filters per filter type (for example, <code>auto-scaling-group</code>) is 1000.
  section = newJObject()
  var valid_614479 = formData.getOrDefault("NextToken")
  valid_614479 = validateParameter(valid_614479, JString, required = false,
                                 default = nil)
  if valid_614479 != nil:
    section.add "NextToken", valid_614479
  var valid_614480 = formData.getOrDefault("MaxRecords")
  valid_614480 = validateParameter(valid_614480, JInt, required = false, default = nil)
  if valid_614480 != nil:
    section.add "MaxRecords", valid_614480
  var valid_614481 = formData.getOrDefault("Filters")
  valid_614481 = validateParameter(valid_614481, JArray, required = false,
                                 default = nil)
  if valid_614481 != nil:
    section.add "Filters", valid_614481
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614482: Call_PostDescribeTags_614467; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the specified tags.</p> <p>You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.</p> <p>You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there's no match, no special message is returned.</p>
  ## 
  let valid = call_614482.validator(path, query, header, formData, body)
  let scheme = call_614482.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614482.url(scheme.get, call_614482.host, call_614482.base,
                         call_614482.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614482, url, valid)

proc call*(call_614483: Call_PostDescribeTags_614467; NextToken: string = "";
          MaxRecords: int = 0; Action: string = "DescribeTags"; Filters: JsonNode = nil;
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeTags
  ## <p>Describes the specified tags.</p> <p>You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.</p> <p>You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there's no match, no special message is returned.</p>
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : One or more filters to scope the tags to return. The maximum number of filters per filter type (for example, <code>auto-scaling-group</code>) is 1000.
  ##   Version: string (required)
  var query_614484 = newJObject()
  var formData_614485 = newJObject()
  add(formData_614485, "NextToken", newJString(NextToken))
  add(formData_614485, "MaxRecords", newJInt(MaxRecords))
  add(query_614484, "Action", newJString(Action))
  if Filters != nil:
    formData_614485.add "Filters", Filters
  add(query_614484, "Version", newJString(Version))
  result = call_614483.call(nil, query_614484, nil, formData_614485, nil)

var postDescribeTags* = Call_PostDescribeTags_614467(name: "postDescribeTags",
    meth: HttpMethod.HttpPost, host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeTags", validator: validate_PostDescribeTags_614468,
    base: "/", url: url_PostDescribeTags_614469,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeTags_614449 = ref object of OpenApiRestCall_612658
proc url_GetDescribeTags_614451(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeTags_614450(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Describes the specified tags.</p> <p>You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.</p> <p>You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there's no match, no special message is returned.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : One or more filters to scope the tags to return. The maximum number of filters per filter type (for example, <code>auto-scaling-group</code>) is 1000.
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  section = newJObject()
  var valid_614452 = query.getOrDefault("NextToken")
  valid_614452 = validateParameter(valid_614452, JString, required = false,
                                 default = nil)
  if valid_614452 != nil:
    section.add "NextToken", valid_614452
  var valid_614453 = query.getOrDefault("Action")
  valid_614453 = validateParameter(valid_614453, JString, required = true,
                                 default = newJString("DescribeTags"))
  if valid_614453 != nil:
    section.add "Action", valid_614453
  var valid_614454 = query.getOrDefault("Version")
  valid_614454 = validateParameter(valid_614454, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_614454 != nil:
    section.add "Version", valid_614454
  var valid_614455 = query.getOrDefault("Filters")
  valid_614455 = validateParameter(valid_614455, JArray, required = false,
                                 default = nil)
  if valid_614455 != nil:
    section.add "Filters", valid_614455
  var valid_614456 = query.getOrDefault("MaxRecords")
  valid_614456 = validateParameter(valid_614456, JInt, required = false, default = nil)
  if valid_614456 != nil:
    section.add "MaxRecords", valid_614456
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614457 = header.getOrDefault("X-Amz-Signature")
  valid_614457 = validateParameter(valid_614457, JString, required = false,
                                 default = nil)
  if valid_614457 != nil:
    section.add "X-Amz-Signature", valid_614457
  var valid_614458 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614458 = validateParameter(valid_614458, JString, required = false,
                                 default = nil)
  if valid_614458 != nil:
    section.add "X-Amz-Content-Sha256", valid_614458
  var valid_614459 = header.getOrDefault("X-Amz-Date")
  valid_614459 = validateParameter(valid_614459, JString, required = false,
                                 default = nil)
  if valid_614459 != nil:
    section.add "X-Amz-Date", valid_614459
  var valid_614460 = header.getOrDefault("X-Amz-Credential")
  valid_614460 = validateParameter(valid_614460, JString, required = false,
                                 default = nil)
  if valid_614460 != nil:
    section.add "X-Amz-Credential", valid_614460
  var valid_614461 = header.getOrDefault("X-Amz-Security-Token")
  valid_614461 = validateParameter(valid_614461, JString, required = false,
                                 default = nil)
  if valid_614461 != nil:
    section.add "X-Amz-Security-Token", valid_614461
  var valid_614462 = header.getOrDefault("X-Amz-Algorithm")
  valid_614462 = validateParameter(valid_614462, JString, required = false,
                                 default = nil)
  if valid_614462 != nil:
    section.add "X-Amz-Algorithm", valid_614462
  var valid_614463 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614463 = validateParameter(valid_614463, JString, required = false,
                                 default = nil)
  if valid_614463 != nil:
    section.add "X-Amz-SignedHeaders", valid_614463
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614464: Call_GetDescribeTags_614449; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the specified tags.</p> <p>You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.</p> <p>You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there's no match, no special message is returned.</p>
  ## 
  let valid = call_614464.validator(path, query, header, formData, body)
  let scheme = call_614464.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614464.url(scheme.get, call_614464.host, call_614464.base,
                         call_614464.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614464, url, valid)

proc call*(call_614465: Call_GetDescribeTags_614449; NextToken: string = "";
          Action: string = "DescribeTags"; Version: string = "2011-01-01";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeTags
  ## <p>Describes the specified tags.</p> <p>You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.</p> <p>You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there's no match, no special message is returned.</p>
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : One or more filters to scope the tags to return. The maximum number of filters per filter type (for example, <code>auto-scaling-group</code>) is 1000.
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  var query_614466 = newJObject()
  add(query_614466, "NextToken", newJString(NextToken))
  add(query_614466, "Action", newJString(Action))
  add(query_614466, "Version", newJString(Version))
  if Filters != nil:
    query_614466.add "Filters", Filters
  add(query_614466, "MaxRecords", newJInt(MaxRecords))
  result = call_614465.call(nil, query_614466, nil, nil, nil)

var getDescribeTags* = Call_GetDescribeTags_614449(name: "getDescribeTags",
    meth: HttpMethod.HttpGet, host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeTags", validator: validate_GetDescribeTags_614450,
    base: "/", url: url_GetDescribeTags_614451, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeTerminationPolicyTypes_614501 = ref object of OpenApiRestCall_612658
proc url_PostDescribeTerminationPolicyTypes_614503(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeTerminationPolicyTypes_614502(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the termination policies supported by Amazon EC2 Auto Scaling.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Auto Scaling Instances Terminate During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614504 = query.getOrDefault("Action")
  valid_614504 = validateParameter(valid_614504, JString, required = true, default = newJString(
      "DescribeTerminationPolicyTypes"))
  if valid_614504 != nil:
    section.add "Action", valid_614504
  var valid_614505 = query.getOrDefault("Version")
  valid_614505 = validateParameter(valid_614505, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_614505 != nil:
    section.add "Version", valid_614505
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614506 = header.getOrDefault("X-Amz-Signature")
  valid_614506 = validateParameter(valid_614506, JString, required = false,
                                 default = nil)
  if valid_614506 != nil:
    section.add "X-Amz-Signature", valid_614506
  var valid_614507 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614507 = validateParameter(valid_614507, JString, required = false,
                                 default = nil)
  if valid_614507 != nil:
    section.add "X-Amz-Content-Sha256", valid_614507
  var valid_614508 = header.getOrDefault("X-Amz-Date")
  valid_614508 = validateParameter(valid_614508, JString, required = false,
                                 default = nil)
  if valid_614508 != nil:
    section.add "X-Amz-Date", valid_614508
  var valid_614509 = header.getOrDefault("X-Amz-Credential")
  valid_614509 = validateParameter(valid_614509, JString, required = false,
                                 default = nil)
  if valid_614509 != nil:
    section.add "X-Amz-Credential", valid_614509
  var valid_614510 = header.getOrDefault("X-Amz-Security-Token")
  valid_614510 = validateParameter(valid_614510, JString, required = false,
                                 default = nil)
  if valid_614510 != nil:
    section.add "X-Amz-Security-Token", valid_614510
  var valid_614511 = header.getOrDefault("X-Amz-Algorithm")
  valid_614511 = validateParameter(valid_614511, JString, required = false,
                                 default = nil)
  if valid_614511 != nil:
    section.add "X-Amz-Algorithm", valid_614511
  var valid_614512 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614512 = validateParameter(valid_614512, JString, required = false,
                                 default = nil)
  if valid_614512 != nil:
    section.add "X-Amz-SignedHeaders", valid_614512
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614513: Call_PostDescribeTerminationPolicyTypes_614501;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Describes the termination policies supported by Amazon EC2 Auto Scaling.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Auto Scaling Instances Terminate During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_614513.validator(path, query, header, formData, body)
  let scheme = call_614513.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614513.url(scheme.get, call_614513.host, call_614513.base,
                         call_614513.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614513, url, valid)

proc call*(call_614514: Call_PostDescribeTerminationPolicyTypes_614501;
          Action: string = "DescribeTerminationPolicyTypes";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeTerminationPolicyTypes
  ## <p>Describes the termination policies supported by Amazon EC2 Auto Scaling.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Auto Scaling Instances Terminate During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614515 = newJObject()
  add(query_614515, "Action", newJString(Action))
  add(query_614515, "Version", newJString(Version))
  result = call_614514.call(nil, query_614515, nil, nil, nil)

var postDescribeTerminationPolicyTypes* = Call_PostDescribeTerminationPolicyTypes_614501(
    name: "postDescribeTerminationPolicyTypes", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeTerminationPolicyTypes",
    validator: validate_PostDescribeTerminationPolicyTypes_614502, base: "/",
    url: url_PostDescribeTerminationPolicyTypes_614503,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeTerminationPolicyTypes_614486 = ref object of OpenApiRestCall_612658
proc url_GetDescribeTerminationPolicyTypes_614488(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeTerminationPolicyTypes_614487(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the termination policies supported by Amazon EC2 Auto Scaling.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Auto Scaling Instances Terminate During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614489 = query.getOrDefault("Action")
  valid_614489 = validateParameter(valid_614489, JString, required = true, default = newJString(
      "DescribeTerminationPolicyTypes"))
  if valid_614489 != nil:
    section.add "Action", valid_614489
  var valid_614490 = query.getOrDefault("Version")
  valid_614490 = validateParameter(valid_614490, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_614490 != nil:
    section.add "Version", valid_614490
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614491 = header.getOrDefault("X-Amz-Signature")
  valid_614491 = validateParameter(valid_614491, JString, required = false,
                                 default = nil)
  if valid_614491 != nil:
    section.add "X-Amz-Signature", valid_614491
  var valid_614492 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614492 = validateParameter(valid_614492, JString, required = false,
                                 default = nil)
  if valid_614492 != nil:
    section.add "X-Amz-Content-Sha256", valid_614492
  var valid_614493 = header.getOrDefault("X-Amz-Date")
  valid_614493 = validateParameter(valid_614493, JString, required = false,
                                 default = nil)
  if valid_614493 != nil:
    section.add "X-Amz-Date", valid_614493
  var valid_614494 = header.getOrDefault("X-Amz-Credential")
  valid_614494 = validateParameter(valid_614494, JString, required = false,
                                 default = nil)
  if valid_614494 != nil:
    section.add "X-Amz-Credential", valid_614494
  var valid_614495 = header.getOrDefault("X-Amz-Security-Token")
  valid_614495 = validateParameter(valid_614495, JString, required = false,
                                 default = nil)
  if valid_614495 != nil:
    section.add "X-Amz-Security-Token", valid_614495
  var valid_614496 = header.getOrDefault("X-Amz-Algorithm")
  valid_614496 = validateParameter(valid_614496, JString, required = false,
                                 default = nil)
  if valid_614496 != nil:
    section.add "X-Amz-Algorithm", valid_614496
  var valid_614497 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614497 = validateParameter(valid_614497, JString, required = false,
                                 default = nil)
  if valid_614497 != nil:
    section.add "X-Amz-SignedHeaders", valid_614497
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614498: Call_GetDescribeTerminationPolicyTypes_614486;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Describes the termination policies supported by Amazon EC2 Auto Scaling.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Auto Scaling Instances Terminate During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_614498.validator(path, query, header, formData, body)
  let scheme = call_614498.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614498.url(scheme.get, call_614498.host, call_614498.base,
                         call_614498.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614498, url, valid)

proc call*(call_614499: Call_GetDescribeTerminationPolicyTypes_614486;
          Action: string = "DescribeTerminationPolicyTypes";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeTerminationPolicyTypes
  ## <p>Describes the termination policies supported by Amazon EC2 Auto Scaling.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Auto Scaling Instances Terminate During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614500 = newJObject()
  add(query_614500, "Action", newJString(Action))
  add(query_614500, "Version", newJString(Version))
  result = call_614499.call(nil, query_614500, nil, nil, nil)

var getDescribeTerminationPolicyTypes* = Call_GetDescribeTerminationPolicyTypes_614486(
    name: "getDescribeTerminationPolicyTypes", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeTerminationPolicyTypes",
    validator: validate_GetDescribeTerminationPolicyTypes_614487, base: "/",
    url: url_GetDescribeTerminationPolicyTypes_614488,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDetachInstances_614534 = ref object of OpenApiRestCall_612658
proc url_PostDetachInstances_614536(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDetachInstances_614535(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Removes one or more instances from the specified Auto Scaling group.</p> <p>After the instances are detached, you can manage them independent of the Auto Scaling group.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.</p> <p>If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html">Detach EC2 Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614537 = query.getOrDefault("Action")
  valid_614537 = validateParameter(valid_614537, JString, required = true,
                                 default = newJString("DetachInstances"))
  if valid_614537 != nil:
    section.add "Action", valid_614537
  var valid_614538 = query.getOrDefault("Version")
  valid_614538 = validateParameter(valid_614538, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_614538 != nil:
    section.add "Version", valid_614538
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614539 = header.getOrDefault("X-Amz-Signature")
  valid_614539 = validateParameter(valid_614539, JString, required = false,
                                 default = nil)
  if valid_614539 != nil:
    section.add "X-Amz-Signature", valid_614539
  var valid_614540 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614540 = validateParameter(valid_614540, JString, required = false,
                                 default = nil)
  if valid_614540 != nil:
    section.add "X-Amz-Content-Sha256", valid_614540
  var valid_614541 = header.getOrDefault("X-Amz-Date")
  valid_614541 = validateParameter(valid_614541, JString, required = false,
                                 default = nil)
  if valid_614541 != nil:
    section.add "X-Amz-Date", valid_614541
  var valid_614542 = header.getOrDefault("X-Amz-Credential")
  valid_614542 = validateParameter(valid_614542, JString, required = false,
                                 default = nil)
  if valid_614542 != nil:
    section.add "X-Amz-Credential", valid_614542
  var valid_614543 = header.getOrDefault("X-Amz-Security-Token")
  valid_614543 = validateParameter(valid_614543, JString, required = false,
                                 default = nil)
  if valid_614543 != nil:
    section.add "X-Amz-Security-Token", valid_614543
  var valid_614544 = header.getOrDefault("X-Amz-Algorithm")
  valid_614544 = validateParameter(valid_614544, JString, required = false,
                                 default = nil)
  if valid_614544 != nil:
    section.add "X-Amz-Algorithm", valid_614544
  var valid_614545 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614545 = validateParameter(valid_614545, JString, required = false,
                                 default = nil)
  if valid_614545 != nil:
    section.add "X-Amz-SignedHeaders", valid_614545
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   ShouldDecrementDesiredCapacity: JBool (required)
  ##                                 : Indicates whether the Auto Scaling group decrements the desired capacity value by the number of instances detached.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_614546 = formData.getOrDefault("AutoScalingGroupName")
  valid_614546 = validateParameter(valid_614546, JString, required = true,
                                 default = nil)
  if valid_614546 != nil:
    section.add "AutoScalingGroupName", valid_614546
  var valid_614547 = formData.getOrDefault("InstanceIds")
  valid_614547 = validateParameter(valid_614547, JArray, required = false,
                                 default = nil)
  if valid_614547 != nil:
    section.add "InstanceIds", valid_614547
  var valid_614548 = formData.getOrDefault("ShouldDecrementDesiredCapacity")
  valid_614548 = validateParameter(valid_614548, JBool, required = true, default = nil)
  if valid_614548 != nil:
    section.add "ShouldDecrementDesiredCapacity", valid_614548
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614549: Call_PostDetachInstances_614534; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes one or more instances from the specified Auto Scaling group.</p> <p>After the instances are detached, you can manage them independent of the Auto Scaling group.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.</p> <p>If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html">Detach EC2 Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_614549.validator(path, query, header, formData, body)
  let scheme = call_614549.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614549.url(scheme.get, call_614549.host, call_614549.base,
                         call_614549.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614549, url, valid)

proc call*(call_614550: Call_PostDetachInstances_614534;
          AutoScalingGroupName: string; ShouldDecrementDesiredCapacity: bool;
          InstanceIds: JsonNode = nil; Action: string = "DetachInstances";
          Version: string = "2011-01-01"): Recallable =
  ## postDetachInstances
  ## <p>Removes one or more instances from the specified Auto Scaling group.</p> <p>After the instances are detached, you can manage them independent of the Auto Scaling group.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.</p> <p>If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html">Detach EC2 Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   ShouldDecrementDesiredCapacity: bool (required)
  ##                                 : Indicates whether the Auto Scaling group decrements the desired capacity value by the number of instances detached.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614551 = newJObject()
  var formData_614552 = newJObject()
  add(formData_614552, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if InstanceIds != nil:
    formData_614552.add "InstanceIds", InstanceIds
  add(formData_614552, "ShouldDecrementDesiredCapacity",
      newJBool(ShouldDecrementDesiredCapacity))
  add(query_614551, "Action", newJString(Action))
  add(query_614551, "Version", newJString(Version))
  result = call_614550.call(nil, query_614551, nil, formData_614552, nil)

var postDetachInstances* = Call_PostDetachInstances_614534(
    name: "postDetachInstances", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DetachInstances",
    validator: validate_PostDetachInstances_614535, base: "/",
    url: url_PostDetachInstances_614536, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDetachInstances_614516 = ref object of OpenApiRestCall_612658
proc url_GetDetachInstances_614518(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDetachInstances_614517(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Removes one or more instances from the specified Auto Scaling group.</p> <p>After the instances are detached, you can manage them independent of the Auto Scaling group.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.</p> <p>If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html">Detach EC2 Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   ShouldDecrementDesiredCapacity: JBool (required)
  ##                                 : Indicates whether the Auto Scaling group decrements the desired capacity value by the number of instances detached.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614519 = query.getOrDefault("InstanceIds")
  valid_614519 = validateParameter(valid_614519, JArray, required = false,
                                 default = nil)
  if valid_614519 != nil:
    section.add "InstanceIds", valid_614519
  assert query != nil, "query argument is necessary due to required `ShouldDecrementDesiredCapacity` field"
  var valid_614520 = query.getOrDefault("ShouldDecrementDesiredCapacity")
  valid_614520 = validateParameter(valid_614520, JBool, required = true, default = nil)
  if valid_614520 != nil:
    section.add "ShouldDecrementDesiredCapacity", valid_614520
  var valid_614521 = query.getOrDefault("AutoScalingGroupName")
  valid_614521 = validateParameter(valid_614521, JString, required = true,
                                 default = nil)
  if valid_614521 != nil:
    section.add "AutoScalingGroupName", valid_614521
  var valid_614522 = query.getOrDefault("Action")
  valid_614522 = validateParameter(valid_614522, JString, required = true,
                                 default = newJString("DetachInstances"))
  if valid_614522 != nil:
    section.add "Action", valid_614522
  var valid_614523 = query.getOrDefault("Version")
  valid_614523 = validateParameter(valid_614523, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_614523 != nil:
    section.add "Version", valid_614523
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614524 = header.getOrDefault("X-Amz-Signature")
  valid_614524 = validateParameter(valid_614524, JString, required = false,
                                 default = nil)
  if valid_614524 != nil:
    section.add "X-Amz-Signature", valid_614524
  var valid_614525 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614525 = validateParameter(valid_614525, JString, required = false,
                                 default = nil)
  if valid_614525 != nil:
    section.add "X-Amz-Content-Sha256", valid_614525
  var valid_614526 = header.getOrDefault("X-Amz-Date")
  valid_614526 = validateParameter(valid_614526, JString, required = false,
                                 default = nil)
  if valid_614526 != nil:
    section.add "X-Amz-Date", valid_614526
  var valid_614527 = header.getOrDefault("X-Amz-Credential")
  valid_614527 = validateParameter(valid_614527, JString, required = false,
                                 default = nil)
  if valid_614527 != nil:
    section.add "X-Amz-Credential", valid_614527
  var valid_614528 = header.getOrDefault("X-Amz-Security-Token")
  valid_614528 = validateParameter(valid_614528, JString, required = false,
                                 default = nil)
  if valid_614528 != nil:
    section.add "X-Amz-Security-Token", valid_614528
  var valid_614529 = header.getOrDefault("X-Amz-Algorithm")
  valid_614529 = validateParameter(valid_614529, JString, required = false,
                                 default = nil)
  if valid_614529 != nil:
    section.add "X-Amz-Algorithm", valid_614529
  var valid_614530 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614530 = validateParameter(valid_614530, JString, required = false,
                                 default = nil)
  if valid_614530 != nil:
    section.add "X-Amz-SignedHeaders", valid_614530
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614531: Call_GetDetachInstances_614516; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes one or more instances from the specified Auto Scaling group.</p> <p>After the instances are detached, you can manage them independent of the Auto Scaling group.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.</p> <p>If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html">Detach EC2 Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_614531.validator(path, query, header, formData, body)
  let scheme = call_614531.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614531.url(scheme.get, call_614531.host, call_614531.base,
                         call_614531.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614531, url, valid)

proc call*(call_614532: Call_GetDetachInstances_614516;
          ShouldDecrementDesiredCapacity: bool; AutoScalingGroupName: string;
          InstanceIds: JsonNode = nil; Action: string = "DetachInstances";
          Version: string = "2011-01-01"): Recallable =
  ## getDetachInstances
  ## <p>Removes one or more instances from the specified Auto Scaling group.</p> <p>After the instances are detached, you can manage them independent of the Auto Scaling group.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.</p> <p>If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html">Detach EC2 Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   ShouldDecrementDesiredCapacity: bool (required)
  ##                                 : Indicates whether the Auto Scaling group decrements the desired capacity value by the number of instances detached.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614533 = newJObject()
  if InstanceIds != nil:
    query_614533.add "InstanceIds", InstanceIds
  add(query_614533, "ShouldDecrementDesiredCapacity",
      newJBool(ShouldDecrementDesiredCapacity))
  add(query_614533, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_614533, "Action", newJString(Action))
  add(query_614533, "Version", newJString(Version))
  result = call_614532.call(nil, query_614533, nil, nil, nil)

var getDetachInstances* = Call_GetDetachInstances_614516(
    name: "getDetachInstances", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DetachInstances",
    validator: validate_GetDetachInstances_614517, base: "/",
    url: url_GetDetachInstances_614518, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDetachLoadBalancerTargetGroups_614570 = ref object of OpenApiRestCall_612658
proc url_PostDetachLoadBalancerTargetGroups_614572(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDetachLoadBalancerTargetGroups_614571(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Detaches one or more target groups from the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614573 = query.getOrDefault("Action")
  valid_614573 = validateParameter(valid_614573, JString, required = true, default = newJString(
      "DetachLoadBalancerTargetGroups"))
  if valid_614573 != nil:
    section.add "Action", valid_614573
  var valid_614574 = query.getOrDefault("Version")
  valid_614574 = validateParameter(valid_614574, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_614574 != nil:
    section.add "Version", valid_614574
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614575 = header.getOrDefault("X-Amz-Signature")
  valid_614575 = validateParameter(valid_614575, JString, required = false,
                                 default = nil)
  if valid_614575 != nil:
    section.add "X-Amz-Signature", valid_614575
  var valid_614576 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614576 = validateParameter(valid_614576, JString, required = false,
                                 default = nil)
  if valid_614576 != nil:
    section.add "X-Amz-Content-Sha256", valid_614576
  var valid_614577 = header.getOrDefault("X-Amz-Date")
  valid_614577 = validateParameter(valid_614577, JString, required = false,
                                 default = nil)
  if valid_614577 != nil:
    section.add "X-Amz-Date", valid_614577
  var valid_614578 = header.getOrDefault("X-Amz-Credential")
  valid_614578 = validateParameter(valid_614578, JString, required = false,
                                 default = nil)
  if valid_614578 != nil:
    section.add "X-Amz-Credential", valid_614578
  var valid_614579 = header.getOrDefault("X-Amz-Security-Token")
  valid_614579 = validateParameter(valid_614579, JString, required = false,
                                 default = nil)
  if valid_614579 != nil:
    section.add "X-Amz-Security-Token", valid_614579
  var valid_614580 = header.getOrDefault("X-Amz-Algorithm")
  valid_614580 = validateParameter(valid_614580, JString, required = false,
                                 default = nil)
  if valid_614580 != nil:
    section.add "X-Amz-Algorithm", valid_614580
  var valid_614581 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614581 = validateParameter(valid_614581, JString, required = false,
                                 default = nil)
  if valid_614581 != nil:
    section.add "X-Amz-SignedHeaders", valid_614581
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_614582 = formData.getOrDefault("AutoScalingGroupName")
  valid_614582 = validateParameter(valid_614582, JString, required = true,
                                 default = nil)
  if valid_614582 != nil:
    section.add "AutoScalingGroupName", valid_614582
  var valid_614583 = formData.getOrDefault("TargetGroupARNs")
  valid_614583 = validateParameter(valid_614583, JArray, required = true, default = nil)
  if valid_614583 != nil:
    section.add "TargetGroupARNs", valid_614583
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614584: Call_PostDetachLoadBalancerTargetGroups_614570;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Detaches one or more target groups from the specified Auto Scaling group.
  ## 
  let valid = call_614584.validator(path, query, header, formData, body)
  let scheme = call_614584.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614584.url(scheme.get, call_614584.host, call_614584.base,
                         call_614584.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614584, url, valid)

proc call*(call_614585: Call_PostDetachLoadBalancerTargetGroups_614570;
          AutoScalingGroupName: string; TargetGroupARNs: JsonNode;
          Action: string = "DetachLoadBalancerTargetGroups";
          Version: string = "2011-01-01"): Recallable =
  ## postDetachLoadBalancerTargetGroups
  ## Detaches one or more target groups from the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614586 = newJObject()
  var formData_614587 = newJObject()
  add(formData_614587, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if TargetGroupARNs != nil:
    formData_614587.add "TargetGroupARNs", TargetGroupARNs
  add(query_614586, "Action", newJString(Action))
  add(query_614586, "Version", newJString(Version))
  result = call_614585.call(nil, query_614586, nil, formData_614587, nil)

var postDetachLoadBalancerTargetGroups* = Call_PostDetachLoadBalancerTargetGroups_614570(
    name: "postDetachLoadBalancerTargetGroups", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DetachLoadBalancerTargetGroups",
    validator: validate_PostDetachLoadBalancerTargetGroups_614571, base: "/",
    url: url_PostDetachLoadBalancerTargetGroups_614572,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDetachLoadBalancerTargetGroups_614553 = ref object of OpenApiRestCall_612658
proc url_GetDetachLoadBalancerTargetGroups_614555(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDetachLoadBalancerTargetGroups_614554(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Detaches one or more target groups from the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_614556 = query.getOrDefault("AutoScalingGroupName")
  valid_614556 = validateParameter(valid_614556, JString, required = true,
                                 default = nil)
  if valid_614556 != nil:
    section.add "AutoScalingGroupName", valid_614556
  var valid_614557 = query.getOrDefault("TargetGroupARNs")
  valid_614557 = validateParameter(valid_614557, JArray, required = true, default = nil)
  if valid_614557 != nil:
    section.add "TargetGroupARNs", valid_614557
  var valid_614558 = query.getOrDefault("Action")
  valid_614558 = validateParameter(valid_614558, JString, required = true, default = newJString(
      "DetachLoadBalancerTargetGroups"))
  if valid_614558 != nil:
    section.add "Action", valid_614558
  var valid_614559 = query.getOrDefault("Version")
  valid_614559 = validateParameter(valid_614559, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_614559 != nil:
    section.add "Version", valid_614559
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614560 = header.getOrDefault("X-Amz-Signature")
  valid_614560 = validateParameter(valid_614560, JString, required = false,
                                 default = nil)
  if valid_614560 != nil:
    section.add "X-Amz-Signature", valid_614560
  var valid_614561 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614561 = validateParameter(valid_614561, JString, required = false,
                                 default = nil)
  if valid_614561 != nil:
    section.add "X-Amz-Content-Sha256", valid_614561
  var valid_614562 = header.getOrDefault("X-Amz-Date")
  valid_614562 = validateParameter(valid_614562, JString, required = false,
                                 default = nil)
  if valid_614562 != nil:
    section.add "X-Amz-Date", valid_614562
  var valid_614563 = header.getOrDefault("X-Amz-Credential")
  valid_614563 = validateParameter(valid_614563, JString, required = false,
                                 default = nil)
  if valid_614563 != nil:
    section.add "X-Amz-Credential", valid_614563
  var valid_614564 = header.getOrDefault("X-Amz-Security-Token")
  valid_614564 = validateParameter(valid_614564, JString, required = false,
                                 default = nil)
  if valid_614564 != nil:
    section.add "X-Amz-Security-Token", valid_614564
  var valid_614565 = header.getOrDefault("X-Amz-Algorithm")
  valid_614565 = validateParameter(valid_614565, JString, required = false,
                                 default = nil)
  if valid_614565 != nil:
    section.add "X-Amz-Algorithm", valid_614565
  var valid_614566 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614566 = validateParameter(valid_614566, JString, required = false,
                                 default = nil)
  if valid_614566 != nil:
    section.add "X-Amz-SignedHeaders", valid_614566
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614567: Call_GetDetachLoadBalancerTargetGroups_614553;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Detaches one or more target groups from the specified Auto Scaling group.
  ## 
  let valid = call_614567.validator(path, query, header, formData, body)
  let scheme = call_614567.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614567.url(scheme.get, call_614567.host, call_614567.base,
                         call_614567.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614567, url, valid)

proc call*(call_614568: Call_GetDetachLoadBalancerTargetGroups_614553;
          AutoScalingGroupName: string; TargetGroupARNs: JsonNode;
          Action: string = "DetachLoadBalancerTargetGroups";
          Version: string = "2011-01-01"): Recallable =
  ## getDetachLoadBalancerTargetGroups
  ## Detaches one or more target groups from the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614569 = newJObject()
  add(query_614569, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if TargetGroupARNs != nil:
    query_614569.add "TargetGroupARNs", TargetGroupARNs
  add(query_614569, "Action", newJString(Action))
  add(query_614569, "Version", newJString(Version))
  result = call_614568.call(nil, query_614569, nil, nil, nil)

var getDetachLoadBalancerTargetGroups* = Call_GetDetachLoadBalancerTargetGroups_614553(
    name: "getDetachLoadBalancerTargetGroups", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DetachLoadBalancerTargetGroups",
    validator: validate_GetDetachLoadBalancerTargetGroups_614554, base: "/",
    url: url_GetDetachLoadBalancerTargetGroups_614555,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDetachLoadBalancers_614605 = ref object of OpenApiRestCall_612658
proc url_PostDetachLoadBalancers_614607(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDetachLoadBalancers_614606(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Detaches one or more Classic Load Balancers from the specified Auto Scaling group.</p> <p>This operation detaches only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DetachLoadBalancerTargetGroups</a> instead.</p> <p>When you detach a load balancer, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using <a>DescribeLoadBalancers</a>. The instances remain running.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614608 = query.getOrDefault("Action")
  valid_614608 = validateParameter(valid_614608, JString, required = true,
                                 default = newJString("DetachLoadBalancers"))
  if valid_614608 != nil:
    section.add "Action", valid_614608
  var valid_614609 = query.getOrDefault("Version")
  valid_614609 = validateParameter(valid_614609, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_614609 != nil:
    section.add "Version", valid_614609
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614610 = header.getOrDefault("X-Amz-Signature")
  valid_614610 = validateParameter(valid_614610, JString, required = false,
                                 default = nil)
  if valid_614610 != nil:
    section.add "X-Amz-Signature", valid_614610
  var valid_614611 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614611 = validateParameter(valid_614611, JString, required = false,
                                 default = nil)
  if valid_614611 != nil:
    section.add "X-Amz-Content-Sha256", valid_614611
  var valid_614612 = header.getOrDefault("X-Amz-Date")
  valid_614612 = validateParameter(valid_614612, JString, required = false,
                                 default = nil)
  if valid_614612 != nil:
    section.add "X-Amz-Date", valid_614612
  var valid_614613 = header.getOrDefault("X-Amz-Credential")
  valid_614613 = validateParameter(valid_614613, JString, required = false,
                                 default = nil)
  if valid_614613 != nil:
    section.add "X-Amz-Credential", valid_614613
  var valid_614614 = header.getOrDefault("X-Amz-Security-Token")
  valid_614614 = validateParameter(valid_614614, JString, required = false,
                                 default = nil)
  if valid_614614 != nil:
    section.add "X-Amz-Security-Token", valid_614614
  var valid_614615 = header.getOrDefault("X-Amz-Algorithm")
  valid_614615 = validateParameter(valid_614615, JString, required = false,
                                 default = nil)
  if valid_614615 != nil:
    section.add "X-Amz-Algorithm", valid_614615
  var valid_614616 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614616 = validateParameter(valid_614616, JString, required = false,
                                 default = nil)
  if valid_614616 != nil:
    section.add "X-Amz-SignedHeaders", valid_614616
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_614617 = formData.getOrDefault("AutoScalingGroupName")
  valid_614617 = validateParameter(valid_614617, JString, required = true,
                                 default = nil)
  if valid_614617 != nil:
    section.add "AutoScalingGroupName", valid_614617
  var valid_614618 = formData.getOrDefault("LoadBalancerNames")
  valid_614618 = validateParameter(valid_614618, JArray, required = true, default = nil)
  if valid_614618 != nil:
    section.add "LoadBalancerNames", valid_614618
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614619: Call_PostDetachLoadBalancers_614605; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Detaches one or more Classic Load Balancers from the specified Auto Scaling group.</p> <p>This operation detaches only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DetachLoadBalancerTargetGroups</a> instead.</p> <p>When you detach a load balancer, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using <a>DescribeLoadBalancers</a>. The instances remain running.</p>
  ## 
  let valid = call_614619.validator(path, query, header, formData, body)
  let scheme = call_614619.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614619.url(scheme.get, call_614619.host, call_614619.base,
                         call_614619.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614619, url, valid)

proc call*(call_614620: Call_PostDetachLoadBalancers_614605;
          AutoScalingGroupName: string; LoadBalancerNames: JsonNode;
          Action: string = "DetachLoadBalancers"; Version: string = "2011-01-01"): Recallable =
  ## postDetachLoadBalancers
  ## <p>Detaches one or more Classic Load Balancers from the specified Auto Scaling group.</p> <p>This operation detaches only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DetachLoadBalancerTargetGroups</a> instead.</p> <p>When you detach a load balancer, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using <a>DescribeLoadBalancers</a>. The instances remain running.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614621 = newJObject()
  var formData_614622 = newJObject()
  add(formData_614622, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if LoadBalancerNames != nil:
    formData_614622.add "LoadBalancerNames", LoadBalancerNames
  add(query_614621, "Action", newJString(Action))
  add(query_614621, "Version", newJString(Version))
  result = call_614620.call(nil, query_614621, nil, formData_614622, nil)

var postDetachLoadBalancers* = Call_PostDetachLoadBalancers_614605(
    name: "postDetachLoadBalancers", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DetachLoadBalancers",
    validator: validate_PostDetachLoadBalancers_614606, base: "/",
    url: url_PostDetachLoadBalancers_614607, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDetachLoadBalancers_614588 = ref object of OpenApiRestCall_612658
proc url_GetDetachLoadBalancers_614590(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDetachLoadBalancers_614589(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Detaches one or more Classic Load Balancers from the specified Auto Scaling group.</p> <p>This operation detaches only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DetachLoadBalancerTargetGroups</a> instead.</p> <p>When you detach a load balancer, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using <a>DescribeLoadBalancers</a>. The instances remain running.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_614591 = query.getOrDefault("AutoScalingGroupName")
  valid_614591 = validateParameter(valid_614591, JString, required = true,
                                 default = nil)
  if valid_614591 != nil:
    section.add "AutoScalingGroupName", valid_614591
  var valid_614592 = query.getOrDefault("Action")
  valid_614592 = validateParameter(valid_614592, JString, required = true,
                                 default = newJString("DetachLoadBalancers"))
  if valid_614592 != nil:
    section.add "Action", valid_614592
  var valid_614593 = query.getOrDefault("Version")
  valid_614593 = validateParameter(valid_614593, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_614593 != nil:
    section.add "Version", valid_614593
  var valid_614594 = query.getOrDefault("LoadBalancerNames")
  valid_614594 = validateParameter(valid_614594, JArray, required = true, default = nil)
  if valid_614594 != nil:
    section.add "LoadBalancerNames", valid_614594
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614595 = header.getOrDefault("X-Amz-Signature")
  valid_614595 = validateParameter(valid_614595, JString, required = false,
                                 default = nil)
  if valid_614595 != nil:
    section.add "X-Amz-Signature", valid_614595
  var valid_614596 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614596 = validateParameter(valid_614596, JString, required = false,
                                 default = nil)
  if valid_614596 != nil:
    section.add "X-Amz-Content-Sha256", valid_614596
  var valid_614597 = header.getOrDefault("X-Amz-Date")
  valid_614597 = validateParameter(valid_614597, JString, required = false,
                                 default = nil)
  if valid_614597 != nil:
    section.add "X-Amz-Date", valid_614597
  var valid_614598 = header.getOrDefault("X-Amz-Credential")
  valid_614598 = validateParameter(valid_614598, JString, required = false,
                                 default = nil)
  if valid_614598 != nil:
    section.add "X-Amz-Credential", valid_614598
  var valid_614599 = header.getOrDefault("X-Amz-Security-Token")
  valid_614599 = validateParameter(valid_614599, JString, required = false,
                                 default = nil)
  if valid_614599 != nil:
    section.add "X-Amz-Security-Token", valid_614599
  var valid_614600 = header.getOrDefault("X-Amz-Algorithm")
  valid_614600 = validateParameter(valid_614600, JString, required = false,
                                 default = nil)
  if valid_614600 != nil:
    section.add "X-Amz-Algorithm", valid_614600
  var valid_614601 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614601 = validateParameter(valid_614601, JString, required = false,
                                 default = nil)
  if valid_614601 != nil:
    section.add "X-Amz-SignedHeaders", valid_614601
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614602: Call_GetDetachLoadBalancers_614588; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Detaches one or more Classic Load Balancers from the specified Auto Scaling group.</p> <p>This operation detaches only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DetachLoadBalancerTargetGroups</a> instead.</p> <p>When you detach a load balancer, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using <a>DescribeLoadBalancers</a>. The instances remain running.</p>
  ## 
  let valid = call_614602.validator(path, query, header, formData, body)
  let scheme = call_614602.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614602.url(scheme.get, call_614602.host, call_614602.base,
                         call_614602.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614602, url, valid)

proc call*(call_614603: Call_GetDetachLoadBalancers_614588;
          AutoScalingGroupName: string; LoadBalancerNames: JsonNode;
          Action: string = "DetachLoadBalancers"; Version: string = "2011-01-01"): Recallable =
  ## getDetachLoadBalancers
  ## <p>Detaches one or more Classic Load Balancers from the specified Auto Scaling group.</p> <p>This operation detaches only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DetachLoadBalancerTargetGroups</a> instead.</p> <p>When you detach a load balancer, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using <a>DescribeLoadBalancers</a>. The instances remain running.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  var query_614604 = newJObject()
  add(query_614604, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_614604, "Action", newJString(Action))
  add(query_614604, "Version", newJString(Version))
  if LoadBalancerNames != nil:
    query_614604.add "LoadBalancerNames", LoadBalancerNames
  result = call_614603.call(nil, query_614604, nil, nil, nil)

var getDetachLoadBalancers* = Call_GetDetachLoadBalancers_614588(
    name: "getDetachLoadBalancers", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DetachLoadBalancers",
    validator: validate_GetDetachLoadBalancers_614589, base: "/",
    url: url_GetDetachLoadBalancers_614590, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDisableMetricsCollection_614640 = ref object of OpenApiRestCall_612658
proc url_PostDisableMetricsCollection_614642(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDisableMetricsCollection_614641(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disables group metrics for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614643 = query.getOrDefault("Action")
  valid_614643 = validateParameter(valid_614643, JString, required = true, default = newJString(
      "DisableMetricsCollection"))
  if valid_614643 != nil:
    section.add "Action", valid_614643
  var valid_614644 = query.getOrDefault("Version")
  valid_614644 = validateParameter(valid_614644, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_614644 != nil:
    section.add "Version", valid_614644
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614645 = header.getOrDefault("X-Amz-Signature")
  valid_614645 = validateParameter(valid_614645, JString, required = false,
                                 default = nil)
  if valid_614645 != nil:
    section.add "X-Amz-Signature", valid_614645
  var valid_614646 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614646 = validateParameter(valid_614646, JString, required = false,
                                 default = nil)
  if valid_614646 != nil:
    section.add "X-Amz-Content-Sha256", valid_614646
  var valid_614647 = header.getOrDefault("X-Amz-Date")
  valid_614647 = validateParameter(valid_614647, JString, required = false,
                                 default = nil)
  if valid_614647 != nil:
    section.add "X-Amz-Date", valid_614647
  var valid_614648 = header.getOrDefault("X-Amz-Credential")
  valid_614648 = validateParameter(valid_614648, JString, required = false,
                                 default = nil)
  if valid_614648 != nil:
    section.add "X-Amz-Credential", valid_614648
  var valid_614649 = header.getOrDefault("X-Amz-Security-Token")
  valid_614649 = validateParameter(valid_614649, JString, required = false,
                                 default = nil)
  if valid_614649 != nil:
    section.add "X-Amz-Security-Token", valid_614649
  var valid_614650 = header.getOrDefault("X-Amz-Algorithm")
  valid_614650 = validateParameter(valid_614650, JString, required = false,
                                 default = nil)
  if valid_614650 != nil:
    section.add "X-Amz-Algorithm", valid_614650
  var valid_614651 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614651 = validateParameter(valid_614651, JString, required = false,
                                 default = nil)
  if valid_614651 != nil:
    section.add "X-Amz-SignedHeaders", valid_614651
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are disabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_614652 = formData.getOrDefault("AutoScalingGroupName")
  valid_614652 = validateParameter(valid_614652, JString, required = true,
                                 default = nil)
  if valid_614652 != nil:
    section.add "AutoScalingGroupName", valid_614652
  var valid_614653 = formData.getOrDefault("Metrics")
  valid_614653 = validateParameter(valid_614653, JArray, required = false,
                                 default = nil)
  if valid_614653 != nil:
    section.add "Metrics", valid_614653
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614654: Call_PostDisableMetricsCollection_614640; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disables group metrics for the specified Auto Scaling group.
  ## 
  let valid = call_614654.validator(path, query, header, formData, body)
  let scheme = call_614654.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614654.url(scheme.get, call_614654.host, call_614654.base,
                         call_614654.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614654, url, valid)

proc call*(call_614655: Call_PostDisableMetricsCollection_614640;
          AutoScalingGroupName: string;
          Action: string = "DisableMetricsCollection";
          Version: string = "2011-01-01"; Metrics: JsonNode = nil): Recallable =
  ## postDisableMetricsCollection
  ## Disables group metrics for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are disabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  var query_614656 = newJObject()
  var formData_614657 = newJObject()
  add(formData_614657, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_614656, "Action", newJString(Action))
  add(query_614656, "Version", newJString(Version))
  if Metrics != nil:
    formData_614657.add "Metrics", Metrics
  result = call_614655.call(nil, query_614656, nil, formData_614657, nil)

var postDisableMetricsCollection* = Call_PostDisableMetricsCollection_614640(
    name: "postDisableMetricsCollection", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DisableMetricsCollection",
    validator: validate_PostDisableMetricsCollection_614641, base: "/",
    url: url_PostDisableMetricsCollection_614642,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDisableMetricsCollection_614623 = ref object of OpenApiRestCall_612658
proc url_GetDisableMetricsCollection_614625(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDisableMetricsCollection_614624(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disables group metrics for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are disabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_614626 = query.getOrDefault("AutoScalingGroupName")
  valid_614626 = validateParameter(valid_614626, JString, required = true,
                                 default = nil)
  if valid_614626 != nil:
    section.add "AutoScalingGroupName", valid_614626
  var valid_614627 = query.getOrDefault("Action")
  valid_614627 = validateParameter(valid_614627, JString, required = true, default = newJString(
      "DisableMetricsCollection"))
  if valid_614627 != nil:
    section.add "Action", valid_614627
  var valid_614628 = query.getOrDefault("Metrics")
  valid_614628 = validateParameter(valid_614628, JArray, required = false,
                                 default = nil)
  if valid_614628 != nil:
    section.add "Metrics", valid_614628
  var valid_614629 = query.getOrDefault("Version")
  valid_614629 = validateParameter(valid_614629, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_614629 != nil:
    section.add "Version", valid_614629
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614630 = header.getOrDefault("X-Amz-Signature")
  valid_614630 = validateParameter(valid_614630, JString, required = false,
                                 default = nil)
  if valid_614630 != nil:
    section.add "X-Amz-Signature", valid_614630
  var valid_614631 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614631 = validateParameter(valid_614631, JString, required = false,
                                 default = nil)
  if valid_614631 != nil:
    section.add "X-Amz-Content-Sha256", valid_614631
  var valid_614632 = header.getOrDefault("X-Amz-Date")
  valid_614632 = validateParameter(valid_614632, JString, required = false,
                                 default = nil)
  if valid_614632 != nil:
    section.add "X-Amz-Date", valid_614632
  var valid_614633 = header.getOrDefault("X-Amz-Credential")
  valid_614633 = validateParameter(valid_614633, JString, required = false,
                                 default = nil)
  if valid_614633 != nil:
    section.add "X-Amz-Credential", valid_614633
  var valid_614634 = header.getOrDefault("X-Amz-Security-Token")
  valid_614634 = validateParameter(valid_614634, JString, required = false,
                                 default = nil)
  if valid_614634 != nil:
    section.add "X-Amz-Security-Token", valid_614634
  var valid_614635 = header.getOrDefault("X-Amz-Algorithm")
  valid_614635 = validateParameter(valid_614635, JString, required = false,
                                 default = nil)
  if valid_614635 != nil:
    section.add "X-Amz-Algorithm", valid_614635
  var valid_614636 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614636 = validateParameter(valid_614636, JString, required = false,
                                 default = nil)
  if valid_614636 != nil:
    section.add "X-Amz-SignedHeaders", valid_614636
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614637: Call_GetDisableMetricsCollection_614623; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disables group metrics for the specified Auto Scaling group.
  ## 
  let valid = call_614637.validator(path, query, header, formData, body)
  let scheme = call_614637.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614637.url(scheme.get, call_614637.host, call_614637.base,
                         call_614637.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614637, url, valid)

proc call*(call_614638: Call_GetDisableMetricsCollection_614623;
          AutoScalingGroupName: string;
          Action: string = "DisableMetricsCollection"; Metrics: JsonNode = nil;
          Version: string = "2011-01-01"): Recallable =
  ## getDisableMetricsCollection
  ## Disables group metrics for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are disabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  ##   Version: string (required)
  var query_614639 = newJObject()
  add(query_614639, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_614639, "Action", newJString(Action))
  if Metrics != nil:
    query_614639.add "Metrics", Metrics
  add(query_614639, "Version", newJString(Version))
  result = call_614638.call(nil, query_614639, nil, nil, nil)

var getDisableMetricsCollection* = Call_GetDisableMetricsCollection_614623(
    name: "getDisableMetricsCollection", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DisableMetricsCollection",
    validator: validate_GetDisableMetricsCollection_614624, base: "/",
    url: url_GetDisableMetricsCollection_614625,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostEnableMetricsCollection_614676 = ref object of OpenApiRestCall_612658
proc url_PostEnableMetricsCollection_614678(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostEnableMetricsCollection_614677(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Enables group metrics for the specified Auto Scaling group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html">Monitoring Your Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614679 = query.getOrDefault("Action")
  valid_614679 = validateParameter(valid_614679, JString, required = true, default = newJString(
      "EnableMetricsCollection"))
  if valid_614679 != nil:
    section.add "Action", valid_614679
  var valid_614680 = query.getOrDefault("Version")
  valid_614680 = validateParameter(valid_614680, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_614680 != nil:
    section.add "Version", valid_614680
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614681 = header.getOrDefault("X-Amz-Signature")
  valid_614681 = validateParameter(valid_614681, JString, required = false,
                                 default = nil)
  if valid_614681 != nil:
    section.add "X-Amz-Signature", valid_614681
  var valid_614682 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614682 = validateParameter(valid_614682, JString, required = false,
                                 default = nil)
  if valid_614682 != nil:
    section.add "X-Amz-Content-Sha256", valid_614682
  var valid_614683 = header.getOrDefault("X-Amz-Date")
  valid_614683 = validateParameter(valid_614683, JString, required = false,
                                 default = nil)
  if valid_614683 != nil:
    section.add "X-Amz-Date", valid_614683
  var valid_614684 = header.getOrDefault("X-Amz-Credential")
  valid_614684 = validateParameter(valid_614684, JString, required = false,
                                 default = nil)
  if valid_614684 != nil:
    section.add "X-Amz-Credential", valid_614684
  var valid_614685 = header.getOrDefault("X-Amz-Security-Token")
  valid_614685 = validateParameter(valid_614685, JString, required = false,
                                 default = nil)
  if valid_614685 != nil:
    section.add "X-Amz-Security-Token", valid_614685
  var valid_614686 = header.getOrDefault("X-Amz-Algorithm")
  valid_614686 = validateParameter(valid_614686, JString, required = false,
                                 default = nil)
  if valid_614686 != nil:
    section.add "X-Amz-Algorithm", valid_614686
  var valid_614687 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614687 = validateParameter(valid_614687, JString, required = false,
                                 default = nil)
  if valid_614687 != nil:
    section.add "X-Amz-SignedHeaders", valid_614687
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Granularity: JString (required)
  ##              : The granularity to associate with the metrics to collect. The only valid value is <code>1Minute</code>.
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are enabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_614688 = formData.getOrDefault("AutoScalingGroupName")
  valid_614688 = validateParameter(valid_614688, JString, required = true,
                                 default = nil)
  if valid_614688 != nil:
    section.add "AutoScalingGroupName", valid_614688
  var valid_614689 = formData.getOrDefault("Granularity")
  valid_614689 = validateParameter(valid_614689, JString, required = true,
                                 default = nil)
  if valid_614689 != nil:
    section.add "Granularity", valid_614689
  var valid_614690 = formData.getOrDefault("Metrics")
  valid_614690 = validateParameter(valid_614690, JArray, required = false,
                                 default = nil)
  if valid_614690 != nil:
    section.add "Metrics", valid_614690
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614691: Call_PostEnableMetricsCollection_614676; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Enables group metrics for the specified Auto Scaling group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html">Monitoring Your Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ## 
  let valid = call_614691.validator(path, query, header, formData, body)
  let scheme = call_614691.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614691.url(scheme.get, call_614691.host, call_614691.base,
                         call_614691.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614691, url, valid)

proc call*(call_614692: Call_PostEnableMetricsCollection_614676;
          AutoScalingGroupName: string; Granularity: string;
          Action: string = "EnableMetricsCollection";
          Version: string = "2011-01-01"; Metrics: JsonNode = nil): Recallable =
  ## postEnableMetricsCollection
  ## Enables group metrics for the specified Auto Scaling group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html">Monitoring Your Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Granularity: string (required)
  ##              : The granularity to associate with the metrics to collect. The only valid value is <code>1Minute</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are enabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  var query_614693 = newJObject()
  var formData_614694 = newJObject()
  add(formData_614694, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_614694, "Granularity", newJString(Granularity))
  add(query_614693, "Action", newJString(Action))
  add(query_614693, "Version", newJString(Version))
  if Metrics != nil:
    formData_614694.add "Metrics", Metrics
  result = call_614692.call(nil, query_614693, nil, formData_614694, nil)

var postEnableMetricsCollection* = Call_PostEnableMetricsCollection_614676(
    name: "postEnableMetricsCollection", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=EnableMetricsCollection",
    validator: validate_PostEnableMetricsCollection_614677, base: "/",
    url: url_PostEnableMetricsCollection_614678,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetEnableMetricsCollection_614658 = ref object of OpenApiRestCall_612658
proc url_GetEnableMetricsCollection_614660(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetEnableMetricsCollection_614659(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Enables group metrics for the specified Auto Scaling group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html">Monitoring Your Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Granularity: JString (required)
  ##              : The granularity to associate with the metrics to collect. The only valid value is <code>1Minute</code>.
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are enabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_614661 = query.getOrDefault("AutoScalingGroupName")
  valid_614661 = validateParameter(valid_614661, JString, required = true,
                                 default = nil)
  if valid_614661 != nil:
    section.add "AutoScalingGroupName", valid_614661
  var valid_614662 = query.getOrDefault("Action")
  valid_614662 = validateParameter(valid_614662, JString, required = true, default = newJString(
      "EnableMetricsCollection"))
  if valid_614662 != nil:
    section.add "Action", valid_614662
  var valid_614663 = query.getOrDefault("Granularity")
  valid_614663 = validateParameter(valid_614663, JString, required = true,
                                 default = nil)
  if valid_614663 != nil:
    section.add "Granularity", valid_614663
  var valid_614664 = query.getOrDefault("Metrics")
  valid_614664 = validateParameter(valid_614664, JArray, required = false,
                                 default = nil)
  if valid_614664 != nil:
    section.add "Metrics", valid_614664
  var valid_614665 = query.getOrDefault("Version")
  valid_614665 = validateParameter(valid_614665, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_614665 != nil:
    section.add "Version", valid_614665
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614666 = header.getOrDefault("X-Amz-Signature")
  valid_614666 = validateParameter(valid_614666, JString, required = false,
                                 default = nil)
  if valid_614666 != nil:
    section.add "X-Amz-Signature", valid_614666
  var valid_614667 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614667 = validateParameter(valid_614667, JString, required = false,
                                 default = nil)
  if valid_614667 != nil:
    section.add "X-Amz-Content-Sha256", valid_614667
  var valid_614668 = header.getOrDefault("X-Amz-Date")
  valid_614668 = validateParameter(valid_614668, JString, required = false,
                                 default = nil)
  if valid_614668 != nil:
    section.add "X-Amz-Date", valid_614668
  var valid_614669 = header.getOrDefault("X-Amz-Credential")
  valid_614669 = validateParameter(valid_614669, JString, required = false,
                                 default = nil)
  if valid_614669 != nil:
    section.add "X-Amz-Credential", valid_614669
  var valid_614670 = header.getOrDefault("X-Amz-Security-Token")
  valid_614670 = validateParameter(valid_614670, JString, required = false,
                                 default = nil)
  if valid_614670 != nil:
    section.add "X-Amz-Security-Token", valid_614670
  var valid_614671 = header.getOrDefault("X-Amz-Algorithm")
  valid_614671 = validateParameter(valid_614671, JString, required = false,
                                 default = nil)
  if valid_614671 != nil:
    section.add "X-Amz-Algorithm", valid_614671
  var valid_614672 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614672 = validateParameter(valid_614672, JString, required = false,
                                 default = nil)
  if valid_614672 != nil:
    section.add "X-Amz-SignedHeaders", valid_614672
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614673: Call_GetEnableMetricsCollection_614658; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Enables group metrics for the specified Auto Scaling group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html">Monitoring Your Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ## 
  let valid = call_614673.validator(path, query, header, formData, body)
  let scheme = call_614673.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614673.url(scheme.get, call_614673.host, call_614673.base,
                         call_614673.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614673, url, valid)

proc call*(call_614674: Call_GetEnableMetricsCollection_614658;
          AutoScalingGroupName: string; Granularity: string;
          Action: string = "EnableMetricsCollection"; Metrics: JsonNode = nil;
          Version: string = "2011-01-01"): Recallable =
  ## getEnableMetricsCollection
  ## Enables group metrics for the specified Auto Scaling group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html">Monitoring Your Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Granularity: string (required)
  ##              : The granularity to associate with the metrics to collect. The only valid value is <code>1Minute</code>.
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are enabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  ##   Version: string (required)
  var query_614675 = newJObject()
  add(query_614675, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_614675, "Action", newJString(Action))
  add(query_614675, "Granularity", newJString(Granularity))
  if Metrics != nil:
    query_614675.add "Metrics", Metrics
  add(query_614675, "Version", newJString(Version))
  result = call_614674.call(nil, query_614675, nil, nil, nil)

var getEnableMetricsCollection* = Call_GetEnableMetricsCollection_614658(
    name: "getEnableMetricsCollection", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=EnableMetricsCollection",
    validator: validate_GetEnableMetricsCollection_614659, base: "/",
    url: url_GetEnableMetricsCollection_614660,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostEnterStandby_614713 = ref object of OpenApiRestCall_612658
proc url_PostEnterStandby_614715(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostEnterStandby_614714(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Moves the specified instances into the standby state.</p> <p>If you choose to decrement the desired capacity of the Auto Scaling group, the instances can enter standby as long as the desired capacity of the Auto Scaling group after the instances are placed into standby is equal to or greater than the minimum capacity of the group.</p> <p>If you choose not to decrement the desired capacity of the Auto Scaling group, the Auto Scaling group launches new instances to replace the instances on standby.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614716 = query.getOrDefault("Action")
  valid_614716 = validateParameter(valid_614716, JString, required = true,
                                 default = newJString("EnterStandby"))
  if valid_614716 != nil:
    section.add "Action", valid_614716
  var valid_614717 = query.getOrDefault("Version")
  valid_614717 = validateParameter(valid_614717, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_614717 != nil:
    section.add "Version", valid_614717
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614718 = header.getOrDefault("X-Amz-Signature")
  valid_614718 = validateParameter(valid_614718, JString, required = false,
                                 default = nil)
  if valid_614718 != nil:
    section.add "X-Amz-Signature", valid_614718
  var valid_614719 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614719 = validateParameter(valid_614719, JString, required = false,
                                 default = nil)
  if valid_614719 != nil:
    section.add "X-Amz-Content-Sha256", valid_614719
  var valid_614720 = header.getOrDefault("X-Amz-Date")
  valid_614720 = validateParameter(valid_614720, JString, required = false,
                                 default = nil)
  if valid_614720 != nil:
    section.add "X-Amz-Date", valid_614720
  var valid_614721 = header.getOrDefault("X-Amz-Credential")
  valid_614721 = validateParameter(valid_614721, JString, required = false,
                                 default = nil)
  if valid_614721 != nil:
    section.add "X-Amz-Credential", valid_614721
  var valid_614722 = header.getOrDefault("X-Amz-Security-Token")
  valid_614722 = validateParameter(valid_614722, JString, required = false,
                                 default = nil)
  if valid_614722 != nil:
    section.add "X-Amz-Security-Token", valid_614722
  var valid_614723 = header.getOrDefault("X-Amz-Algorithm")
  valid_614723 = validateParameter(valid_614723, JString, required = false,
                                 default = nil)
  if valid_614723 != nil:
    section.add "X-Amz-Algorithm", valid_614723
  var valid_614724 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614724 = validateParameter(valid_614724, JString, required = false,
                                 default = nil)
  if valid_614724 != nil:
    section.add "X-Amz-SignedHeaders", valid_614724
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   ShouldDecrementDesiredCapacity: JBool (required)
  ##                                 : Indicates whether to decrement the desired capacity of the Auto Scaling group by the number of instances moved to <code>Standby</code> mode.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_614725 = formData.getOrDefault("AutoScalingGroupName")
  valid_614725 = validateParameter(valid_614725, JString, required = true,
                                 default = nil)
  if valid_614725 != nil:
    section.add "AutoScalingGroupName", valid_614725
  var valid_614726 = formData.getOrDefault("InstanceIds")
  valid_614726 = validateParameter(valid_614726, JArray, required = false,
                                 default = nil)
  if valid_614726 != nil:
    section.add "InstanceIds", valid_614726
  var valid_614727 = formData.getOrDefault("ShouldDecrementDesiredCapacity")
  valid_614727 = validateParameter(valid_614727, JBool, required = true, default = nil)
  if valid_614727 != nil:
    section.add "ShouldDecrementDesiredCapacity", valid_614727
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614728: Call_PostEnterStandby_614713; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Moves the specified instances into the standby state.</p> <p>If you choose to decrement the desired capacity of the Auto Scaling group, the instances can enter standby as long as the desired capacity of the Auto Scaling group after the instances are placed into standby is equal to or greater than the minimum capacity of the group.</p> <p>If you choose not to decrement the desired capacity of the Auto Scaling group, the Auto Scaling group launches new instances to replace the instances on standby.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_614728.validator(path, query, header, formData, body)
  let scheme = call_614728.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614728.url(scheme.get, call_614728.host, call_614728.base,
                         call_614728.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614728, url, valid)

proc call*(call_614729: Call_PostEnterStandby_614713; AutoScalingGroupName: string;
          ShouldDecrementDesiredCapacity: bool; InstanceIds: JsonNode = nil;
          Action: string = "EnterStandby"; Version: string = "2011-01-01"): Recallable =
  ## postEnterStandby
  ## <p>Moves the specified instances into the standby state.</p> <p>If you choose to decrement the desired capacity of the Auto Scaling group, the instances can enter standby as long as the desired capacity of the Auto Scaling group after the instances are placed into standby is equal to or greater than the minimum capacity of the group.</p> <p>If you choose not to decrement the desired capacity of the Auto Scaling group, the Auto Scaling group launches new instances to replace the instances on standby.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   ShouldDecrementDesiredCapacity: bool (required)
  ##                                 : Indicates whether to decrement the desired capacity of the Auto Scaling group by the number of instances moved to <code>Standby</code> mode.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614730 = newJObject()
  var formData_614731 = newJObject()
  add(formData_614731, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if InstanceIds != nil:
    formData_614731.add "InstanceIds", InstanceIds
  add(formData_614731, "ShouldDecrementDesiredCapacity",
      newJBool(ShouldDecrementDesiredCapacity))
  add(query_614730, "Action", newJString(Action))
  add(query_614730, "Version", newJString(Version))
  result = call_614729.call(nil, query_614730, nil, formData_614731, nil)

var postEnterStandby* = Call_PostEnterStandby_614713(name: "postEnterStandby",
    meth: HttpMethod.HttpPost, host: "autoscaling.amazonaws.com",
    route: "/#Action=EnterStandby", validator: validate_PostEnterStandby_614714,
    base: "/", url: url_PostEnterStandby_614715,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetEnterStandby_614695 = ref object of OpenApiRestCall_612658
proc url_GetEnterStandby_614697(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetEnterStandby_614696(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Moves the specified instances into the standby state.</p> <p>If you choose to decrement the desired capacity of the Auto Scaling group, the instances can enter standby as long as the desired capacity of the Auto Scaling group after the instances are placed into standby is equal to or greater than the minimum capacity of the group.</p> <p>If you choose not to decrement the desired capacity of the Auto Scaling group, the Auto Scaling group launches new instances to replace the instances on standby.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   ShouldDecrementDesiredCapacity: JBool (required)
  ##                                 : Indicates whether to decrement the desired capacity of the Auto Scaling group by the number of instances moved to <code>Standby</code> mode.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614698 = query.getOrDefault("InstanceIds")
  valid_614698 = validateParameter(valid_614698, JArray, required = false,
                                 default = nil)
  if valid_614698 != nil:
    section.add "InstanceIds", valid_614698
  assert query != nil, "query argument is necessary due to required `ShouldDecrementDesiredCapacity` field"
  var valid_614699 = query.getOrDefault("ShouldDecrementDesiredCapacity")
  valid_614699 = validateParameter(valid_614699, JBool, required = true, default = nil)
  if valid_614699 != nil:
    section.add "ShouldDecrementDesiredCapacity", valid_614699
  var valid_614700 = query.getOrDefault("AutoScalingGroupName")
  valid_614700 = validateParameter(valid_614700, JString, required = true,
                                 default = nil)
  if valid_614700 != nil:
    section.add "AutoScalingGroupName", valid_614700
  var valid_614701 = query.getOrDefault("Action")
  valid_614701 = validateParameter(valid_614701, JString, required = true,
                                 default = newJString("EnterStandby"))
  if valid_614701 != nil:
    section.add "Action", valid_614701
  var valid_614702 = query.getOrDefault("Version")
  valid_614702 = validateParameter(valid_614702, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_614702 != nil:
    section.add "Version", valid_614702
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614703 = header.getOrDefault("X-Amz-Signature")
  valid_614703 = validateParameter(valid_614703, JString, required = false,
                                 default = nil)
  if valid_614703 != nil:
    section.add "X-Amz-Signature", valid_614703
  var valid_614704 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614704 = validateParameter(valid_614704, JString, required = false,
                                 default = nil)
  if valid_614704 != nil:
    section.add "X-Amz-Content-Sha256", valid_614704
  var valid_614705 = header.getOrDefault("X-Amz-Date")
  valid_614705 = validateParameter(valid_614705, JString, required = false,
                                 default = nil)
  if valid_614705 != nil:
    section.add "X-Amz-Date", valid_614705
  var valid_614706 = header.getOrDefault("X-Amz-Credential")
  valid_614706 = validateParameter(valid_614706, JString, required = false,
                                 default = nil)
  if valid_614706 != nil:
    section.add "X-Amz-Credential", valid_614706
  var valid_614707 = header.getOrDefault("X-Amz-Security-Token")
  valid_614707 = validateParameter(valid_614707, JString, required = false,
                                 default = nil)
  if valid_614707 != nil:
    section.add "X-Amz-Security-Token", valid_614707
  var valid_614708 = header.getOrDefault("X-Amz-Algorithm")
  valid_614708 = validateParameter(valid_614708, JString, required = false,
                                 default = nil)
  if valid_614708 != nil:
    section.add "X-Amz-Algorithm", valid_614708
  var valid_614709 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614709 = validateParameter(valid_614709, JString, required = false,
                                 default = nil)
  if valid_614709 != nil:
    section.add "X-Amz-SignedHeaders", valid_614709
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614710: Call_GetEnterStandby_614695; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Moves the specified instances into the standby state.</p> <p>If you choose to decrement the desired capacity of the Auto Scaling group, the instances can enter standby as long as the desired capacity of the Auto Scaling group after the instances are placed into standby is equal to or greater than the minimum capacity of the group.</p> <p>If you choose not to decrement the desired capacity of the Auto Scaling group, the Auto Scaling group launches new instances to replace the instances on standby.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_614710.validator(path, query, header, formData, body)
  let scheme = call_614710.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614710.url(scheme.get, call_614710.host, call_614710.base,
                         call_614710.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614710, url, valid)

proc call*(call_614711: Call_GetEnterStandby_614695;
          ShouldDecrementDesiredCapacity: bool; AutoScalingGroupName: string;
          InstanceIds: JsonNode = nil; Action: string = "EnterStandby";
          Version: string = "2011-01-01"): Recallable =
  ## getEnterStandby
  ## <p>Moves the specified instances into the standby state.</p> <p>If you choose to decrement the desired capacity of the Auto Scaling group, the instances can enter standby as long as the desired capacity of the Auto Scaling group after the instances are placed into standby is equal to or greater than the minimum capacity of the group.</p> <p>If you choose not to decrement the desired capacity of the Auto Scaling group, the Auto Scaling group launches new instances to replace the instances on standby.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   ShouldDecrementDesiredCapacity: bool (required)
  ##                                 : Indicates whether to decrement the desired capacity of the Auto Scaling group by the number of instances moved to <code>Standby</code> mode.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614712 = newJObject()
  if InstanceIds != nil:
    query_614712.add "InstanceIds", InstanceIds
  add(query_614712, "ShouldDecrementDesiredCapacity",
      newJBool(ShouldDecrementDesiredCapacity))
  add(query_614712, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_614712, "Action", newJString(Action))
  add(query_614712, "Version", newJString(Version))
  result = call_614711.call(nil, query_614712, nil, nil, nil)

var getEnterStandby* = Call_GetEnterStandby_614695(name: "getEnterStandby",
    meth: HttpMethod.HttpGet, host: "autoscaling.amazonaws.com",
    route: "/#Action=EnterStandby", validator: validate_GetEnterStandby_614696,
    base: "/", url: url_GetEnterStandby_614697, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostExecutePolicy_614752 = ref object of OpenApiRestCall_612658
proc url_PostExecutePolicy_614754(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostExecutePolicy_614753(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Executes the specified policy.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614755 = query.getOrDefault("Action")
  valid_614755 = validateParameter(valid_614755, JString, required = true,
                                 default = newJString("ExecutePolicy"))
  if valid_614755 != nil:
    section.add "Action", valid_614755
  var valid_614756 = query.getOrDefault("Version")
  valid_614756 = validateParameter(valid_614756, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_614756 != nil:
    section.add "Version", valid_614756
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614757 = header.getOrDefault("X-Amz-Signature")
  valid_614757 = validateParameter(valid_614757, JString, required = false,
                                 default = nil)
  if valid_614757 != nil:
    section.add "X-Amz-Signature", valid_614757
  var valid_614758 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614758 = validateParameter(valid_614758, JString, required = false,
                                 default = nil)
  if valid_614758 != nil:
    section.add "X-Amz-Content-Sha256", valid_614758
  var valid_614759 = header.getOrDefault("X-Amz-Date")
  valid_614759 = validateParameter(valid_614759, JString, required = false,
                                 default = nil)
  if valid_614759 != nil:
    section.add "X-Amz-Date", valid_614759
  var valid_614760 = header.getOrDefault("X-Amz-Credential")
  valid_614760 = validateParameter(valid_614760, JString, required = false,
                                 default = nil)
  if valid_614760 != nil:
    section.add "X-Amz-Credential", valid_614760
  var valid_614761 = header.getOrDefault("X-Amz-Security-Token")
  valid_614761 = validateParameter(valid_614761, JString, required = false,
                                 default = nil)
  if valid_614761 != nil:
    section.add "X-Amz-Security-Token", valid_614761
  var valid_614762 = header.getOrDefault("X-Amz-Algorithm")
  valid_614762 = validateParameter(valid_614762, JString, required = false,
                                 default = nil)
  if valid_614762 != nil:
    section.add "X-Amz-Algorithm", valid_614762
  var valid_614763 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614763 = validateParameter(valid_614763, JString, required = false,
                                 default = nil)
  if valid_614763 != nil:
    section.add "X-Amz-SignedHeaders", valid_614763
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   MetricValue: JFloat
  ##              : <p>The metric value to compare to <code>BreachThreshold</code>. This enables you to execute a policy of type <code>StepScaling</code> and determine which step adjustment to use. For example, if the breach threshold is 50 and you want to use a step adjustment with a lower bound of 0 and an upper bound of 10, you can set the metric value to 59.</p> <p>If you specify a metric value that doesn't correspond to a step adjustment for the policy, the call returns an error.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   BreachThreshold: JFloat
  ##                  : <p>The breach threshold for the alarm.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   HonorCooldown: JBool
  ##                : <p>Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before executing the policy.</p> <p>This parameter is not supported if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   PolicyName: JString (required)
  ##             : The name or ARN of the policy.
  section = newJObject()
  var valid_614764 = formData.getOrDefault("AutoScalingGroupName")
  valid_614764 = validateParameter(valid_614764, JString, required = false,
                                 default = nil)
  if valid_614764 != nil:
    section.add "AutoScalingGroupName", valid_614764
  var valid_614765 = formData.getOrDefault("MetricValue")
  valid_614765 = validateParameter(valid_614765, JFloat, required = false,
                                 default = nil)
  if valid_614765 != nil:
    section.add "MetricValue", valid_614765
  var valid_614766 = formData.getOrDefault("BreachThreshold")
  valid_614766 = validateParameter(valid_614766, JFloat, required = false,
                                 default = nil)
  if valid_614766 != nil:
    section.add "BreachThreshold", valid_614766
  var valid_614767 = formData.getOrDefault("HonorCooldown")
  valid_614767 = validateParameter(valid_614767, JBool, required = false, default = nil)
  if valid_614767 != nil:
    section.add "HonorCooldown", valid_614767
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_614768 = formData.getOrDefault("PolicyName")
  valid_614768 = validateParameter(valid_614768, JString, required = true,
                                 default = nil)
  if valid_614768 != nil:
    section.add "PolicyName", valid_614768
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614769: Call_PostExecutePolicy_614752; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Executes the specified policy.
  ## 
  let valid = call_614769.validator(path, query, header, formData, body)
  let scheme = call_614769.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614769.url(scheme.get, call_614769.host, call_614769.base,
                         call_614769.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614769, url, valid)

proc call*(call_614770: Call_PostExecutePolicy_614752; PolicyName: string;
          AutoScalingGroupName: string = ""; MetricValue: float = 0.0;
          BreachThreshold: float = 0.0; HonorCooldown: bool = false;
          Action: string = "ExecutePolicy"; Version: string = "2011-01-01"): Recallable =
  ## postExecutePolicy
  ## Executes the specified policy.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   MetricValue: float
  ##              : <p>The metric value to compare to <code>BreachThreshold</code>. This enables you to execute a policy of type <code>StepScaling</code> and determine which step adjustment to use. For example, if the breach threshold is 50 and you want to use a step adjustment with a lower bound of 0 and an upper bound of 10, you can set the metric value to 59.</p> <p>If you specify a metric value that doesn't correspond to a step adjustment for the policy, the call returns an error.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   BreachThreshold: float
  ##                  : <p>The breach threshold for the alarm.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   HonorCooldown: bool
  ##                : <p>Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before executing the policy.</p> <p>This parameter is not supported if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : The name or ARN of the policy.
  var query_614771 = newJObject()
  var formData_614772 = newJObject()
  add(formData_614772, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_614772, "MetricValue", newJFloat(MetricValue))
  add(formData_614772, "BreachThreshold", newJFloat(BreachThreshold))
  add(formData_614772, "HonorCooldown", newJBool(HonorCooldown))
  add(query_614771, "Action", newJString(Action))
  add(query_614771, "Version", newJString(Version))
  add(formData_614772, "PolicyName", newJString(PolicyName))
  result = call_614770.call(nil, query_614771, nil, formData_614772, nil)

var postExecutePolicy* = Call_PostExecutePolicy_614752(name: "postExecutePolicy",
    meth: HttpMethod.HttpPost, host: "autoscaling.amazonaws.com",
    route: "/#Action=ExecutePolicy", validator: validate_PostExecutePolicy_614753,
    base: "/", url: url_PostExecutePolicy_614754,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetExecutePolicy_614732 = ref object of OpenApiRestCall_612658
proc url_GetExecutePolicy_614734(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetExecutePolicy_614733(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Executes the specified policy.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MetricValue: JFloat
  ##              : <p>The metric value to compare to <code>BreachThreshold</code>. This enables you to execute a policy of type <code>StepScaling</code> and determine which step adjustment to use. For example, if the breach threshold is 50 and you want to use a step adjustment with a lower bound of 0 and an upper bound of 10, you can set the metric value to 59.</p> <p>If you specify a metric value that doesn't correspond to a step adjustment for the policy, the call returns an error.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   BreachThreshold: JFloat
  ##                  : <p>The breach threshold for the alarm.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   PolicyName: JString (required)
  ##             : The name or ARN of the policy.
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   HonorCooldown: JBool
  ##                : <p>Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before executing the policy.</p> <p>This parameter is not supported if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_614735 = query.getOrDefault("MetricValue")
  valid_614735 = validateParameter(valid_614735, JFloat, required = false,
                                 default = nil)
  if valid_614735 != nil:
    section.add "MetricValue", valid_614735
  var valid_614736 = query.getOrDefault("BreachThreshold")
  valid_614736 = validateParameter(valid_614736, JFloat, required = false,
                                 default = nil)
  if valid_614736 != nil:
    section.add "BreachThreshold", valid_614736
  assert query != nil,
        "query argument is necessary due to required `PolicyName` field"
  var valid_614737 = query.getOrDefault("PolicyName")
  valid_614737 = validateParameter(valid_614737, JString, required = true,
                                 default = nil)
  if valid_614737 != nil:
    section.add "PolicyName", valid_614737
  var valid_614738 = query.getOrDefault("AutoScalingGroupName")
  valid_614738 = validateParameter(valid_614738, JString, required = false,
                                 default = nil)
  if valid_614738 != nil:
    section.add "AutoScalingGroupName", valid_614738
  var valid_614739 = query.getOrDefault("Action")
  valid_614739 = validateParameter(valid_614739, JString, required = true,
                                 default = newJString("ExecutePolicy"))
  if valid_614739 != nil:
    section.add "Action", valid_614739
  var valid_614740 = query.getOrDefault("HonorCooldown")
  valid_614740 = validateParameter(valid_614740, JBool, required = false, default = nil)
  if valid_614740 != nil:
    section.add "HonorCooldown", valid_614740
  var valid_614741 = query.getOrDefault("Version")
  valid_614741 = validateParameter(valid_614741, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_614741 != nil:
    section.add "Version", valid_614741
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614742 = header.getOrDefault("X-Amz-Signature")
  valid_614742 = validateParameter(valid_614742, JString, required = false,
                                 default = nil)
  if valid_614742 != nil:
    section.add "X-Amz-Signature", valid_614742
  var valid_614743 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614743 = validateParameter(valid_614743, JString, required = false,
                                 default = nil)
  if valid_614743 != nil:
    section.add "X-Amz-Content-Sha256", valid_614743
  var valid_614744 = header.getOrDefault("X-Amz-Date")
  valid_614744 = validateParameter(valid_614744, JString, required = false,
                                 default = nil)
  if valid_614744 != nil:
    section.add "X-Amz-Date", valid_614744
  var valid_614745 = header.getOrDefault("X-Amz-Credential")
  valid_614745 = validateParameter(valid_614745, JString, required = false,
                                 default = nil)
  if valid_614745 != nil:
    section.add "X-Amz-Credential", valid_614745
  var valid_614746 = header.getOrDefault("X-Amz-Security-Token")
  valid_614746 = validateParameter(valid_614746, JString, required = false,
                                 default = nil)
  if valid_614746 != nil:
    section.add "X-Amz-Security-Token", valid_614746
  var valid_614747 = header.getOrDefault("X-Amz-Algorithm")
  valid_614747 = validateParameter(valid_614747, JString, required = false,
                                 default = nil)
  if valid_614747 != nil:
    section.add "X-Amz-Algorithm", valid_614747
  var valid_614748 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614748 = validateParameter(valid_614748, JString, required = false,
                                 default = nil)
  if valid_614748 != nil:
    section.add "X-Amz-SignedHeaders", valid_614748
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614749: Call_GetExecutePolicy_614732; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Executes the specified policy.
  ## 
  let valid = call_614749.validator(path, query, header, formData, body)
  let scheme = call_614749.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614749.url(scheme.get, call_614749.host, call_614749.base,
                         call_614749.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614749, url, valid)

proc call*(call_614750: Call_GetExecutePolicy_614732; PolicyName: string;
          MetricValue: float = 0.0; BreachThreshold: float = 0.0;
          AutoScalingGroupName: string = ""; Action: string = "ExecutePolicy";
          HonorCooldown: bool = false; Version: string = "2011-01-01"): Recallable =
  ## getExecutePolicy
  ## Executes the specified policy.
  ##   MetricValue: float
  ##              : <p>The metric value to compare to <code>BreachThreshold</code>. This enables you to execute a policy of type <code>StepScaling</code> and determine which step adjustment to use. For example, if the breach threshold is 50 and you want to use a step adjustment with a lower bound of 0 and an upper bound of 10, you can set the metric value to 59.</p> <p>If you specify a metric value that doesn't correspond to a step adjustment for the policy, the call returns an error.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   BreachThreshold: float
  ##                  : <p>The breach threshold for the alarm.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   PolicyName: string (required)
  ##             : The name or ARN of the policy.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   HonorCooldown: bool
  ##                : <p>Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before executing the policy.</p> <p>This parameter is not supported if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Version: string (required)
  var query_614751 = newJObject()
  add(query_614751, "MetricValue", newJFloat(MetricValue))
  add(query_614751, "BreachThreshold", newJFloat(BreachThreshold))
  add(query_614751, "PolicyName", newJString(PolicyName))
  add(query_614751, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_614751, "Action", newJString(Action))
  add(query_614751, "HonorCooldown", newJBool(HonorCooldown))
  add(query_614751, "Version", newJString(Version))
  result = call_614750.call(nil, query_614751, nil, nil, nil)

var getExecutePolicy* = Call_GetExecutePolicy_614732(name: "getExecutePolicy",
    meth: HttpMethod.HttpGet, host: "autoscaling.amazonaws.com",
    route: "/#Action=ExecutePolicy", validator: validate_GetExecutePolicy_614733,
    base: "/", url: url_GetExecutePolicy_614734,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostExitStandby_614790 = ref object of OpenApiRestCall_612658
proc url_PostExitStandby_614792(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostExitStandby_614791(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Moves the specified instances out of the standby state.</p> <p>After you put the instances back in service, the desired capacity is incremented.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614793 = query.getOrDefault("Action")
  valid_614793 = validateParameter(valid_614793, JString, required = true,
                                 default = newJString("ExitStandby"))
  if valid_614793 != nil:
    section.add "Action", valid_614793
  var valid_614794 = query.getOrDefault("Version")
  valid_614794 = validateParameter(valid_614794, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_614794 != nil:
    section.add "Version", valid_614794
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614795 = header.getOrDefault("X-Amz-Signature")
  valid_614795 = validateParameter(valid_614795, JString, required = false,
                                 default = nil)
  if valid_614795 != nil:
    section.add "X-Amz-Signature", valid_614795
  var valid_614796 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614796 = validateParameter(valid_614796, JString, required = false,
                                 default = nil)
  if valid_614796 != nil:
    section.add "X-Amz-Content-Sha256", valid_614796
  var valid_614797 = header.getOrDefault("X-Amz-Date")
  valid_614797 = validateParameter(valid_614797, JString, required = false,
                                 default = nil)
  if valid_614797 != nil:
    section.add "X-Amz-Date", valid_614797
  var valid_614798 = header.getOrDefault("X-Amz-Credential")
  valid_614798 = validateParameter(valid_614798, JString, required = false,
                                 default = nil)
  if valid_614798 != nil:
    section.add "X-Amz-Credential", valid_614798
  var valid_614799 = header.getOrDefault("X-Amz-Security-Token")
  valid_614799 = validateParameter(valid_614799, JString, required = false,
                                 default = nil)
  if valid_614799 != nil:
    section.add "X-Amz-Security-Token", valid_614799
  var valid_614800 = header.getOrDefault("X-Amz-Algorithm")
  valid_614800 = validateParameter(valid_614800, JString, required = false,
                                 default = nil)
  if valid_614800 != nil:
    section.add "X-Amz-Algorithm", valid_614800
  var valid_614801 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614801 = validateParameter(valid_614801, JString, required = false,
                                 default = nil)
  if valid_614801 != nil:
    section.add "X-Amz-SignedHeaders", valid_614801
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_614802 = formData.getOrDefault("AutoScalingGroupName")
  valid_614802 = validateParameter(valid_614802, JString, required = true,
                                 default = nil)
  if valid_614802 != nil:
    section.add "AutoScalingGroupName", valid_614802
  var valid_614803 = formData.getOrDefault("InstanceIds")
  valid_614803 = validateParameter(valid_614803, JArray, required = false,
                                 default = nil)
  if valid_614803 != nil:
    section.add "InstanceIds", valid_614803
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614804: Call_PostExitStandby_614790; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Moves the specified instances out of the standby state.</p> <p>After you put the instances back in service, the desired capacity is incremented.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_614804.validator(path, query, header, formData, body)
  let scheme = call_614804.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614804.url(scheme.get, call_614804.host, call_614804.base,
                         call_614804.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614804, url, valid)

proc call*(call_614805: Call_PostExitStandby_614790; AutoScalingGroupName: string;
          InstanceIds: JsonNode = nil; Action: string = "ExitStandby";
          Version: string = "2011-01-01"): Recallable =
  ## postExitStandby
  ## <p>Moves the specified instances out of the standby state.</p> <p>After you put the instances back in service, the desired capacity is incremented.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614806 = newJObject()
  var formData_614807 = newJObject()
  add(formData_614807, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if InstanceIds != nil:
    formData_614807.add "InstanceIds", InstanceIds
  add(query_614806, "Action", newJString(Action))
  add(query_614806, "Version", newJString(Version))
  result = call_614805.call(nil, query_614806, nil, formData_614807, nil)

var postExitStandby* = Call_PostExitStandby_614790(name: "postExitStandby",
    meth: HttpMethod.HttpPost, host: "autoscaling.amazonaws.com",
    route: "/#Action=ExitStandby", validator: validate_PostExitStandby_614791,
    base: "/", url: url_PostExitStandby_614792, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetExitStandby_614773 = ref object of OpenApiRestCall_612658
proc url_GetExitStandby_614775(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetExitStandby_614774(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Moves the specified instances out of the standby state.</p> <p>After you put the instances back in service, the desired capacity is incremented.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614776 = query.getOrDefault("InstanceIds")
  valid_614776 = validateParameter(valid_614776, JArray, required = false,
                                 default = nil)
  if valid_614776 != nil:
    section.add "InstanceIds", valid_614776
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_614777 = query.getOrDefault("AutoScalingGroupName")
  valid_614777 = validateParameter(valid_614777, JString, required = true,
                                 default = nil)
  if valid_614777 != nil:
    section.add "AutoScalingGroupName", valid_614777
  var valid_614778 = query.getOrDefault("Action")
  valid_614778 = validateParameter(valid_614778, JString, required = true,
                                 default = newJString("ExitStandby"))
  if valid_614778 != nil:
    section.add "Action", valid_614778
  var valid_614779 = query.getOrDefault("Version")
  valid_614779 = validateParameter(valid_614779, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_614779 != nil:
    section.add "Version", valid_614779
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614780 = header.getOrDefault("X-Amz-Signature")
  valid_614780 = validateParameter(valid_614780, JString, required = false,
                                 default = nil)
  if valid_614780 != nil:
    section.add "X-Amz-Signature", valid_614780
  var valid_614781 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614781 = validateParameter(valid_614781, JString, required = false,
                                 default = nil)
  if valid_614781 != nil:
    section.add "X-Amz-Content-Sha256", valid_614781
  var valid_614782 = header.getOrDefault("X-Amz-Date")
  valid_614782 = validateParameter(valid_614782, JString, required = false,
                                 default = nil)
  if valid_614782 != nil:
    section.add "X-Amz-Date", valid_614782
  var valid_614783 = header.getOrDefault("X-Amz-Credential")
  valid_614783 = validateParameter(valid_614783, JString, required = false,
                                 default = nil)
  if valid_614783 != nil:
    section.add "X-Amz-Credential", valid_614783
  var valid_614784 = header.getOrDefault("X-Amz-Security-Token")
  valid_614784 = validateParameter(valid_614784, JString, required = false,
                                 default = nil)
  if valid_614784 != nil:
    section.add "X-Amz-Security-Token", valid_614784
  var valid_614785 = header.getOrDefault("X-Amz-Algorithm")
  valid_614785 = validateParameter(valid_614785, JString, required = false,
                                 default = nil)
  if valid_614785 != nil:
    section.add "X-Amz-Algorithm", valid_614785
  var valid_614786 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614786 = validateParameter(valid_614786, JString, required = false,
                                 default = nil)
  if valid_614786 != nil:
    section.add "X-Amz-SignedHeaders", valid_614786
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614787: Call_GetExitStandby_614773; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Moves the specified instances out of the standby state.</p> <p>After you put the instances back in service, the desired capacity is incremented.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_614787.validator(path, query, header, formData, body)
  let scheme = call_614787.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614787.url(scheme.get, call_614787.host, call_614787.base,
                         call_614787.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614787, url, valid)

proc call*(call_614788: Call_GetExitStandby_614773; AutoScalingGroupName: string;
          InstanceIds: JsonNode = nil; Action: string = "ExitStandby";
          Version: string = "2011-01-01"): Recallable =
  ## getExitStandby
  ## <p>Moves the specified instances out of the standby state.</p> <p>After you put the instances back in service, the desired capacity is incremented.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614789 = newJObject()
  if InstanceIds != nil:
    query_614789.add "InstanceIds", InstanceIds
  add(query_614789, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_614789, "Action", newJString(Action))
  add(query_614789, "Version", newJString(Version))
  result = call_614788.call(nil, query_614789, nil, nil, nil)

var getExitStandby* = Call_GetExitStandby_614773(name: "getExitStandby",
    meth: HttpMethod.HttpGet, host: "autoscaling.amazonaws.com",
    route: "/#Action=ExitStandby", validator: validate_GetExitStandby_614774,
    base: "/", url: url_GetExitStandby_614775, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutLifecycleHook_614831 = ref object of OpenApiRestCall_612658
proc url_PostPutLifecycleHook_614833(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPutLifecycleHook_614832(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates or updates a lifecycle hook for the specified Auto Scaling group.</p> <p>A lifecycle hook tells Amazon EC2 Auto Scaling to perform an action on an instance when the instance launches (before it is put into service) or as the instance terminates (before it is fully terminated).</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p> <b>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</b> </p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state using <a>RecordLifecycleActionHeartbeat</a>.</p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action using <a>CompleteLifecycleAction</a>.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.</p> <p>You can view the lifecycle hooks for an Auto Scaling group using <a>DescribeLifecycleHooks</a>. If you are no longer using a lifecycle hook, you can delete it using <a>DeleteLifecycleHook</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614834 = query.getOrDefault("Action")
  valid_614834 = validateParameter(valid_614834, JString, required = true,
                                 default = newJString("PutLifecycleHook"))
  if valid_614834 != nil:
    section.add "Action", valid_614834
  var valid_614835 = query.getOrDefault("Version")
  valid_614835 = validateParameter(valid_614835, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_614835 != nil:
    section.add "Version", valid_614835
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614836 = header.getOrDefault("X-Amz-Signature")
  valid_614836 = validateParameter(valid_614836, JString, required = false,
                                 default = nil)
  if valid_614836 != nil:
    section.add "X-Amz-Signature", valid_614836
  var valid_614837 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614837 = validateParameter(valid_614837, JString, required = false,
                                 default = nil)
  if valid_614837 != nil:
    section.add "X-Amz-Content-Sha256", valid_614837
  var valid_614838 = header.getOrDefault("X-Amz-Date")
  valid_614838 = validateParameter(valid_614838, JString, required = false,
                                 default = nil)
  if valid_614838 != nil:
    section.add "X-Amz-Date", valid_614838
  var valid_614839 = header.getOrDefault("X-Amz-Credential")
  valid_614839 = validateParameter(valid_614839, JString, required = false,
                                 default = nil)
  if valid_614839 != nil:
    section.add "X-Amz-Credential", valid_614839
  var valid_614840 = header.getOrDefault("X-Amz-Security-Token")
  valid_614840 = validateParameter(valid_614840, JString, required = false,
                                 default = nil)
  if valid_614840 != nil:
    section.add "X-Amz-Security-Token", valid_614840
  var valid_614841 = header.getOrDefault("X-Amz-Algorithm")
  valid_614841 = validateParameter(valid_614841, JString, required = false,
                                 default = nil)
  if valid_614841 != nil:
    section.add "X-Amz-Algorithm", valid_614841
  var valid_614842 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614842 = validateParameter(valid_614842, JString, required = false,
                                 default = nil)
  if valid_614842 != nil:
    section.add "X-Amz-SignedHeaders", valid_614842
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   HeartbeatTimeout: JInt
  ##                   : <p>The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from <code>30</code> to <code>7200</code> seconds. The default value is <code>3600</code> seconds (1 hour).</p> <p>If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action that you specified in the <code>DefaultResult</code> parameter. You can prevent the lifecycle hook from timing out by calling <a>RecordLifecycleActionHeartbeat</a>.</p>
  ##   NotificationMetadata: JString
  ##                       : Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.
  ##   NotificationTargetARN: JString
  ##                        : <p>The ARN of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in the transition state for the lifecycle hook. This target can be either an SQS queue or an SNS topic.</p> <p>If you specify an empty string, this overrides the current ARN.</p> <p>This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key-value pair format when sending notifications to an Amazon SNS topic.</p> <p>When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test messages contain the following additional key-value pair: <code>"Event": "autoscaling:TEST_NOTIFICATION"</code>.</p>
  ##   LifecycleTransition: JString
  ##                      : <p>The instance state to which you want to attach the lifecycle hook. The valid values are:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   RoleARN: JString
  ##          : <p>The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target, for example, an Amazon SNS topic or an Amazon SQS queue.</p> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  ##   DefaultResult: JString
  ##                : Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>. The default value is <code>ABANDON</code>.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_614843 = formData.getOrDefault("AutoScalingGroupName")
  valid_614843 = validateParameter(valid_614843, JString, required = true,
                                 default = nil)
  if valid_614843 != nil:
    section.add "AutoScalingGroupName", valid_614843
  var valid_614844 = formData.getOrDefault("HeartbeatTimeout")
  valid_614844 = validateParameter(valid_614844, JInt, required = false, default = nil)
  if valid_614844 != nil:
    section.add "HeartbeatTimeout", valid_614844
  var valid_614845 = formData.getOrDefault("NotificationMetadata")
  valid_614845 = validateParameter(valid_614845, JString, required = false,
                                 default = nil)
  if valid_614845 != nil:
    section.add "NotificationMetadata", valid_614845
  var valid_614846 = formData.getOrDefault("NotificationTargetARN")
  valid_614846 = validateParameter(valid_614846, JString, required = false,
                                 default = nil)
  if valid_614846 != nil:
    section.add "NotificationTargetARN", valid_614846
  var valid_614847 = formData.getOrDefault("LifecycleTransition")
  valid_614847 = validateParameter(valid_614847, JString, required = false,
                                 default = nil)
  if valid_614847 != nil:
    section.add "LifecycleTransition", valid_614847
  var valid_614848 = formData.getOrDefault("LifecycleHookName")
  valid_614848 = validateParameter(valid_614848, JString, required = true,
                                 default = nil)
  if valid_614848 != nil:
    section.add "LifecycleHookName", valid_614848
  var valid_614849 = formData.getOrDefault("RoleARN")
  valid_614849 = validateParameter(valid_614849, JString, required = false,
                                 default = nil)
  if valid_614849 != nil:
    section.add "RoleARN", valid_614849
  var valid_614850 = formData.getOrDefault("DefaultResult")
  valid_614850 = validateParameter(valid_614850, JString, required = false,
                                 default = nil)
  if valid_614850 != nil:
    section.add "DefaultResult", valid_614850
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614851: Call_PostPutLifecycleHook_614831; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates or updates a lifecycle hook for the specified Auto Scaling group.</p> <p>A lifecycle hook tells Amazon EC2 Auto Scaling to perform an action on an instance when the instance launches (before it is put into service) or as the instance terminates (before it is fully terminated).</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p> <b>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</b> </p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state using <a>RecordLifecycleActionHeartbeat</a>.</p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action using <a>CompleteLifecycleAction</a>.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.</p> <p>You can view the lifecycle hooks for an Auto Scaling group using <a>DescribeLifecycleHooks</a>. If you are no longer using a lifecycle hook, you can delete it using <a>DeleteLifecycleHook</a>.</p>
  ## 
  let valid = call_614851.validator(path, query, header, formData, body)
  let scheme = call_614851.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614851.url(scheme.get, call_614851.host, call_614851.base,
                         call_614851.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614851, url, valid)

proc call*(call_614852: Call_PostPutLifecycleHook_614831;
          AutoScalingGroupName: string; LifecycleHookName: string;
          HeartbeatTimeout: int = 0; NotificationMetadata: string = "";
          NotificationTargetARN: string = ""; LifecycleTransition: string = "";
          RoleARN: string = ""; Action: string = "PutLifecycleHook";
          Version: string = "2011-01-01"; DefaultResult: string = ""): Recallable =
  ## postPutLifecycleHook
  ## <p>Creates or updates a lifecycle hook for the specified Auto Scaling group.</p> <p>A lifecycle hook tells Amazon EC2 Auto Scaling to perform an action on an instance when the instance launches (before it is put into service) or as the instance terminates (before it is fully terminated).</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p> <b>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</b> </p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state using <a>RecordLifecycleActionHeartbeat</a>.</p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action using <a>CompleteLifecycleAction</a>.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.</p> <p>You can view the lifecycle hooks for an Auto Scaling group using <a>DescribeLifecycleHooks</a>. If you are no longer using a lifecycle hook, you can delete it using <a>DeleteLifecycleHook</a>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   HeartbeatTimeout: int
  ##                   : <p>The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from <code>30</code> to <code>7200</code> seconds. The default value is <code>3600</code> seconds (1 hour).</p> <p>If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action that you specified in the <code>DefaultResult</code> parameter. You can prevent the lifecycle hook from timing out by calling <a>RecordLifecycleActionHeartbeat</a>.</p>
  ##   NotificationMetadata: string
  ##                       : Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.
  ##   NotificationTargetARN: string
  ##                        : <p>The ARN of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in the transition state for the lifecycle hook. This target can be either an SQS queue or an SNS topic.</p> <p>If you specify an empty string, this overrides the current ARN.</p> <p>This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key-value pair format when sending notifications to an Amazon SNS topic.</p> <p>When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test messages contain the following additional key-value pair: <code>"Event": "autoscaling:TEST_NOTIFICATION"</code>.</p>
  ##   LifecycleTransition: string
  ##                      : <p>The instance state to which you want to attach the lifecycle hook. The valid values are:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   RoleARN: string
  ##          : <p>The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target, for example, an Amazon SNS topic or an Amazon SQS queue.</p> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DefaultResult: string
  ##                : Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>. The default value is <code>ABANDON</code>.
  var query_614853 = newJObject()
  var formData_614854 = newJObject()
  add(formData_614854, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_614854, "HeartbeatTimeout", newJInt(HeartbeatTimeout))
  add(formData_614854, "NotificationMetadata", newJString(NotificationMetadata))
  add(formData_614854, "NotificationTargetARN", newJString(NotificationTargetARN))
  add(formData_614854, "LifecycleTransition", newJString(LifecycleTransition))
  add(formData_614854, "LifecycleHookName", newJString(LifecycleHookName))
  add(formData_614854, "RoleARN", newJString(RoleARN))
  add(query_614853, "Action", newJString(Action))
  add(query_614853, "Version", newJString(Version))
  add(formData_614854, "DefaultResult", newJString(DefaultResult))
  result = call_614852.call(nil, query_614853, nil, formData_614854, nil)

var postPutLifecycleHook* = Call_PostPutLifecycleHook_614831(
    name: "postPutLifecycleHook", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=PutLifecycleHook",
    validator: validate_PostPutLifecycleHook_614832, base: "/",
    url: url_PostPutLifecycleHook_614833, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutLifecycleHook_614808 = ref object of OpenApiRestCall_612658
proc url_GetPutLifecycleHook_614810(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPutLifecycleHook_614809(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Creates or updates a lifecycle hook for the specified Auto Scaling group.</p> <p>A lifecycle hook tells Amazon EC2 Auto Scaling to perform an action on an instance when the instance launches (before it is put into service) or as the instance terminates (before it is fully terminated).</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p> <b>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</b> </p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state using <a>RecordLifecycleActionHeartbeat</a>.</p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action using <a>CompleteLifecycleAction</a>.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.</p> <p>You can view the lifecycle hooks for an Auto Scaling group using <a>DescribeLifecycleHooks</a>. If you are no longer using a lifecycle hook, you can delete it using <a>DeleteLifecycleHook</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NotificationTargetARN: JString
  ##                        : <p>The ARN of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in the transition state for the lifecycle hook. This target can be either an SQS queue or an SNS topic.</p> <p>If you specify an empty string, this overrides the current ARN.</p> <p>This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key-value pair format when sending notifications to an Amazon SNS topic.</p> <p>When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test messages contain the following additional key-value pair: <code>"Event": "autoscaling:TEST_NOTIFICATION"</code>.</p>
  ##   LifecycleTransition: JString
  ##                      : <p>The instance state to which you want to attach the lifecycle hook. The valid values are:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  ##   HeartbeatTimeout: JInt
  ##                   : <p>The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from <code>30</code> to <code>7200</code> seconds. The default value is <code>3600</code> seconds (1 hour).</p> <p>If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action that you specified in the <code>DefaultResult</code> parameter. You can prevent the lifecycle hook from timing out by calling <a>RecordLifecycleActionHeartbeat</a>.</p>
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   DefaultResult: JString
  ##                : Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>. The default value is <code>ABANDON</code>.
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   Action: JString (required)
  ##   NotificationMetadata: JString
  ##                       : Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.
  ##   Version: JString (required)
  ##   RoleARN: JString
  ##          : <p>The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target, for example, an Amazon SNS topic or an Amazon SQS queue.</p> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  section = newJObject()
  var valid_614811 = query.getOrDefault("NotificationTargetARN")
  valid_614811 = validateParameter(valid_614811, JString, required = false,
                                 default = nil)
  if valid_614811 != nil:
    section.add "NotificationTargetARN", valid_614811
  var valid_614812 = query.getOrDefault("LifecycleTransition")
  valid_614812 = validateParameter(valid_614812, JString, required = false,
                                 default = nil)
  if valid_614812 != nil:
    section.add "LifecycleTransition", valid_614812
  var valid_614813 = query.getOrDefault("HeartbeatTimeout")
  valid_614813 = validateParameter(valid_614813, JInt, required = false, default = nil)
  if valid_614813 != nil:
    section.add "HeartbeatTimeout", valid_614813
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_614814 = query.getOrDefault("AutoScalingGroupName")
  valid_614814 = validateParameter(valid_614814, JString, required = true,
                                 default = nil)
  if valid_614814 != nil:
    section.add "AutoScalingGroupName", valid_614814
  var valid_614815 = query.getOrDefault("DefaultResult")
  valid_614815 = validateParameter(valid_614815, JString, required = false,
                                 default = nil)
  if valid_614815 != nil:
    section.add "DefaultResult", valid_614815
  var valid_614816 = query.getOrDefault("LifecycleHookName")
  valid_614816 = validateParameter(valid_614816, JString, required = true,
                                 default = nil)
  if valid_614816 != nil:
    section.add "LifecycleHookName", valid_614816
  var valid_614817 = query.getOrDefault("Action")
  valid_614817 = validateParameter(valid_614817, JString, required = true,
                                 default = newJString("PutLifecycleHook"))
  if valid_614817 != nil:
    section.add "Action", valid_614817
  var valid_614818 = query.getOrDefault("NotificationMetadata")
  valid_614818 = validateParameter(valid_614818, JString, required = false,
                                 default = nil)
  if valid_614818 != nil:
    section.add "NotificationMetadata", valid_614818
  var valid_614819 = query.getOrDefault("Version")
  valid_614819 = validateParameter(valid_614819, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_614819 != nil:
    section.add "Version", valid_614819
  var valid_614820 = query.getOrDefault("RoleARN")
  valid_614820 = validateParameter(valid_614820, JString, required = false,
                                 default = nil)
  if valid_614820 != nil:
    section.add "RoleARN", valid_614820
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614821 = header.getOrDefault("X-Amz-Signature")
  valid_614821 = validateParameter(valid_614821, JString, required = false,
                                 default = nil)
  if valid_614821 != nil:
    section.add "X-Amz-Signature", valid_614821
  var valid_614822 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614822 = validateParameter(valid_614822, JString, required = false,
                                 default = nil)
  if valid_614822 != nil:
    section.add "X-Amz-Content-Sha256", valid_614822
  var valid_614823 = header.getOrDefault("X-Amz-Date")
  valid_614823 = validateParameter(valid_614823, JString, required = false,
                                 default = nil)
  if valid_614823 != nil:
    section.add "X-Amz-Date", valid_614823
  var valid_614824 = header.getOrDefault("X-Amz-Credential")
  valid_614824 = validateParameter(valid_614824, JString, required = false,
                                 default = nil)
  if valid_614824 != nil:
    section.add "X-Amz-Credential", valid_614824
  var valid_614825 = header.getOrDefault("X-Amz-Security-Token")
  valid_614825 = validateParameter(valid_614825, JString, required = false,
                                 default = nil)
  if valid_614825 != nil:
    section.add "X-Amz-Security-Token", valid_614825
  var valid_614826 = header.getOrDefault("X-Amz-Algorithm")
  valid_614826 = validateParameter(valid_614826, JString, required = false,
                                 default = nil)
  if valid_614826 != nil:
    section.add "X-Amz-Algorithm", valid_614826
  var valid_614827 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614827 = validateParameter(valid_614827, JString, required = false,
                                 default = nil)
  if valid_614827 != nil:
    section.add "X-Amz-SignedHeaders", valid_614827
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614828: Call_GetPutLifecycleHook_614808; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates or updates a lifecycle hook for the specified Auto Scaling group.</p> <p>A lifecycle hook tells Amazon EC2 Auto Scaling to perform an action on an instance when the instance launches (before it is put into service) or as the instance terminates (before it is fully terminated).</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p> <b>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</b> </p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state using <a>RecordLifecycleActionHeartbeat</a>.</p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action using <a>CompleteLifecycleAction</a>.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.</p> <p>You can view the lifecycle hooks for an Auto Scaling group using <a>DescribeLifecycleHooks</a>. If you are no longer using a lifecycle hook, you can delete it using <a>DeleteLifecycleHook</a>.</p>
  ## 
  let valid = call_614828.validator(path, query, header, formData, body)
  let scheme = call_614828.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614828.url(scheme.get, call_614828.host, call_614828.base,
                         call_614828.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614828, url, valid)

proc call*(call_614829: Call_GetPutLifecycleHook_614808;
          AutoScalingGroupName: string; LifecycleHookName: string;
          NotificationTargetARN: string = ""; LifecycleTransition: string = "";
          HeartbeatTimeout: int = 0; DefaultResult: string = "";
          Action: string = "PutLifecycleHook"; NotificationMetadata: string = "";
          Version: string = "2011-01-01"; RoleARN: string = ""): Recallable =
  ## getPutLifecycleHook
  ## <p>Creates or updates a lifecycle hook for the specified Auto Scaling group.</p> <p>A lifecycle hook tells Amazon EC2 Auto Scaling to perform an action on an instance when the instance launches (before it is put into service) or as the instance terminates (before it is fully terminated).</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p> <b>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</b> </p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state using <a>RecordLifecycleActionHeartbeat</a>.</p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action using <a>CompleteLifecycleAction</a>.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.</p> <p>You can view the lifecycle hooks for an Auto Scaling group using <a>DescribeLifecycleHooks</a>. If you are no longer using a lifecycle hook, you can delete it using <a>DeleteLifecycleHook</a>.</p>
  ##   NotificationTargetARN: string
  ##                        : <p>The ARN of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in the transition state for the lifecycle hook. This target can be either an SQS queue or an SNS topic.</p> <p>If you specify an empty string, this overrides the current ARN.</p> <p>This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key-value pair format when sending notifications to an Amazon SNS topic.</p> <p>When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test messages contain the following additional key-value pair: <code>"Event": "autoscaling:TEST_NOTIFICATION"</code>.</p>
  ##   LifecycleTransition: string
  ##                      : <p>The instance state to which you want to attach the lifecycle hook. The valid values are:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  ##   HeartbeatTimeout: int
  ##                   : <p>The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from <code>30</code> to <code>7200</code> seconds. The default value is <code>3600</code> seconds (1 hour).</p> <p>If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action that you specified in the <code>DefaultResult</code> parameter. You can prevent the lifecycle hook from timing out by calling <a>RecordLifecycleActionHeartbeat</a>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   DefaultResult: string
  ##                : Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>. The default value is <code>ABANDON</code>.
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   Action: string (required)
  ##   NotificationMetadata: string
  ##                       : Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.
  ##   Version: string (required)
  ##   RoleARN: string
  ##          : <p>The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target, for example, an Amazon SNS topic or an Amazon SQS queue.</p> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  var query_614830 = newJObject()
  add(query_614830, "NotificationTargetARN", newJString(NotificationTargetARN))
  add(query_614830, "LifecycleTransition", newJString(LifecycleTransition))
  add(query_614830, "HeartbeatTimeout", newJInt(HeartbeatTimeout))
  add(query_614830, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_614830, "DefaultResult", newJString(DefaultResult))
  add(query_614830, "LifecycleHookName", newJString(LifecycleHookName))
  add(query_614830, "Action", newJString(Action))
  add(query_614830, "NotificationMetadata", newJString(NotificationMetadata))
  add(query_614830, "Version", newJString(Version))
  add(query_614830, "RoleARN", newJString(RoleARN))
  result = call_614829.call(nil, query_614830, nil, nil, nil)

var getPutLifecycleHook* = Call_GetPutLifecycleHook_614808(
    name: "getPutLifecycleHook", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=PutLifecycleHook",
    validator: validate_GetPutLifecycleHook_614809, base: "/",
    url: url_GetPutLifecycleHook_614810, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutNotificationConfiguration_614873 = ref object of OpenApiRestCall_612658
proc url_PostPutNotificationConfiguration_614875(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPutNotificationConfiguration_614874(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.</p> <p>This configuration overwrites any existing configuration.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html">Getting Amazon SNS Notifications When Your Auto Scaling Group Scales</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614876 = query.getOrDefault("Action")
  valid_614876 = validateParameter(valid_614876, JString, required = true, default = newJString(
      "PutNotificationConfiguration"))
  if valid_614876 != nil:
    section.add "Action", valid_614876
  var valid_614877 = query.getOrDefault("Version")
  valid_614877 = validateParameter(valid_614877, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_614877 != nil:
    section.add "Version", valid_614877
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614878 = header.getOrDefault("X-Amz-Signature")
  valid_614878 = validateParameter(valid_614878, JString, required = false,
                                 default = nil)
  if valid_614878 != nil:
    section.add "X-Amz-Signature", valid_614878
  var valid_614879 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614879 = validateParameter(valid_614879, JString, required = false,
                                 default = nil)
  if valid_614879 != nil:
    section.add "X-Amz-Content-Sha256", valid_614879
  var valid_614880 = header.getOrDefault("X-Amz-Date")
  valid_614880 = validateParameter(valid_614880, JString, required = false,
                                 default = nil)
  if valid_614880 != nil:
    section.add "X-Amz-Date", valid_614880
  var valid_614881 = header.getOrDefault("X-Amz-Credential")
  valid_614881 = validateParameter(valid_614881, JString, required = false,
                                 default = nil)
  if valid_614881 != nil:
    section.add "X-Amz-Credential", valid_614881
  var valid_614882 = header.getOrDefault("X-Amz-Security-Token")
  valid_614882 = validateParameter(valid_614882, JString, required = false,
                                 default = nil)
  if valid_614882 != nil:
    section.add "X-Amz-Security-Token", valid_614882
  var valid_614883 = header.getOrDefault("X-Amz-Algorithm")
  valid_614883 = validateParameter(valid_614883, JString, required = false,
                                 default = nil)
  if valid_614883 != nil:
    section.add "X-Amz-Algorithm", valid_614883
  var valid_614884 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614884 = validateParameter(valid_614884, JString, required = false,
                                 default = nil)
  if valid_614884 != nil:
    section.add "X-Amz-SignedHeaders", valid_614884
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   NotificationTypes: JArray (required)
  ##                    : The type of event that causes the notification to be sent. For more information about notification types supported by Amazon EC2 Auto Scaling, see <a>DescribeAutoScalingNotificationTypes</a>.
  ##   TopicARN: JString (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_614885 = formData.getOrDefault("AutoScalingGroupName")
  valid_614885 = validateParameter(valid_614885, JString, required = true,
                                 default = nil)
  if valid_614885 != nil:
    section.add "AutoScalingGroupName", valid_614885
  var valid_614886 = formData.getOrDefault("NotificationTypes")
  valid_614886 = validateParameter(valid_614886, JArray, required = true, default = nil)
  if valid_614886 != nil:
    section.add "NotificationTypes", valid_614886
  var valid_614887 = formData.getOrDefault("TopicARN")
  valid_614887 = validateParameter(valid_614887, JString, required = true,
                                 default = nil)
  if valid_614887 != nil:
    section.add "TopicARN", valid_614887
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614888: Call_PostPutNotificationConfiguration_614873;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.</p> <p>This configuration overwrites any existing configuration.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html">Getting Amazon SNS Notifications When Your Auto Scaling Group Scales</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_614888.validator(path, query, header, formData, body)
  let scheme = call_614888.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614888.url(scheme.get, call_614888.host, call_614888.base,
                         call_614888.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614888, url, valid)

proc call*(call_614889: Call_PostPutNotificationConfiguration_614873;
          AutoScalingGroupName: string; NotificationTypes: JsonNode;
          TopicARN: string; Action: string = "PutNotificationConfiguration";
          Version: string = "2011-01-01"): Recallable =
  ## postPutNotificationConfiguration
  ## <p>Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.</p> <p>This configuration overwrites any existing configuration.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html">Getting Amazon SNS Notifications When Your Auto Scaling Group Scales</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   NotificationTypes: JArray (required)
  ##                    : The type of event that causes the notification to be sent. For more information about notification types supported by Amazon EC2 Auto Scaling, see <a>DescribeAutoScalingNotificationTypes</a>.
  ##   Action: string (required)
  ##   TopicARN: string (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   Version: string (required)
  var query_614890 = newJObject()
  var formData_614891 = newJObject()
  add(formData_614891, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if NotificationTypes != nil:
    formData_614891.add "NotificationTypes", NotificationTypes
  add(query_614890, "Action", newJString(Action))
  add(formData_614891, "TopicARN", newJString(TopicARN))
  add(query_614890, "Version", newJString(Version))
  result = call_614889.call(nil, query_614890, nil, formData_614891, nil)

var postPutNotificationConfiguration* = Call_PostPutNotificationConfiguration_614873(
    name: "postPutNotificationConfiguration", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=PutNotificationConfiguration",
    validator: validate_PostPutNotificationConfiguration_614874, base: "/",
    url: url_PostPutNotificationConfiguration_614875,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutNotificationConfiguration_614855 = ref object of OpenApiRestCall_612658
proc url_GetPutNotificationConfiguration_614857(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPutNotificationConfiguration_614856(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.</p> <p>This configuration overwrites any existing configuration.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html">Getting Amazon SNS Notifications When Your Auto Scaling Group Scales</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NotificationTypes: JArray (required)
  ##                    : The type of event that causes the notification to be sent. For more information about notification types supported by Amazon EC2 Auto Scaling, see <a>DescribeAutoScalingNotificationTypes</a>.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   TopicARN: JString (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `NotificationTypes` field"
  var valid_614858 = query.getOrDefault("NotificationTypes")
  valid_614858 = validateParameter(valid_614858, JArray, required = true, default = nil)
  if valid_614858 != nil:
    section.add "NotificationTypes", valid_614858
  var valid_614859 = query.getOrDefault("AutoScalingGroupName")
  valid_614859 = validateParameter(valid_614859, JString, required = true,
                                 default = nil)
  if valid_614859 != nil:
    section.add "AutoScalingGroupName", valid_614859
  var valid_614860 = query.getOrDefault("TopicARN")
  valid_614860 = validateParameter(valid_614860, JString, required = true,
                                 default = nil)
  if valid_614860 != nil:
    section.add "TopicARN", valid_614860
  var valid_614861 = query.getOrDefault("Action")
  valid_614861 = validateParameter(valid_614861, JString, required = true, default = newJString(
      "PutNotificationConfiguration"))
  if valid_614861 != nil:
    section.add "Action", valid_614861
  var valid_614862 = query.getOrDefault("Version")
  valid_614862 = validateParameter(valid_614862, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_614862 != nil:
    section.add "Version", valid_614862
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614863 = header.getOrDefault("X-Amz-Signature")
  valid_614863 = validateParameter(valid_614863, JString, required = false,
                                 default = nil)
  if valid_614863 != nil:
    section.add "X-Amz-Signature", valid_614863
  var valid_614864 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614864 = validateParameter(valid_614864, JString, required = false,
                                 default = nil)
  if valid_614864 != nil:
    section.add "X-Amz-Content-Sha256", valid_614864
  var valid_614865 = header.getOrDefault("X-Amz-Date")
  valid_614865 = validateParameter(valid_614865, JString, required = false,
                                 default = nil)
  if valid_614865 != nil:
    section.add "X-Amz-Date", valid_614865
  var valid_614866 = header.getOrDefault("X-Amz-Credential")
  valid_614866 = validateParameter(valid_614866, JString, required = false,
                                 default = nil)
  if valid_614866 != nil:
    section.add "X-Amz-Credential", valid_614866
  var valid_614867 = header.getOrDefault("X-Amz-Security-Token")
  valid_614867 = validateParameter(valid_614867, JString, required = false,
                                 default = nil)
  if valid_614867 != nil:
    section.add "X-Amz-Security-Token", valid_614867
  var valid_614868 = header.getOrDefault("X-Amz-Algorithm")
  valid_614868 = validateParameter(valid_614868, JString, required = false,
                                 default = nil)
  if valid_614868 != nil:
    section.add "X-Amz-Algorithm", valid_614868
  var valid_614869 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614869 = validateParameter(valid_614869, JString, required = false,
                                 default = nil)
  if valid_614869 != nil:
    section.add "X-Amz-SignedHeaders", valid_614869
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614870: Call_GetPutNotificationConfiguration_614855;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.</p> <p>This configuration overwrites any existing configuration.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html">Getting Amazon SNS Notifications When Your Auto Scaling Group Scales</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_614870.validator(path, query, header, formData, body)
  let scheme = call_614870.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614870.url(scheme.get, call_614870.host, call_614870.base,
                         call_614870.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614870, url, valid)

proc call*(call_614871: Call_GetPutNotificationConfiguration_614855;
          NotificationTypes: JsonNode; AutoScalingGroupName: string;
          TopicARN: string; Action: string = "PutNotificationConfiguration";
          Version: string = "2011-01-01"): Recallable =
  ## getPutNotificationConfiguration
  ## <p>Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.</p> <p>This configuration overwrites any existing configuration.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html">Getting Amazon SNS Notifications When Your Auto Scaling Group Scales</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   NotificationTypes: JArray (required)
  ##                    : The type of event that causes the notification to be sent. For more information about notification types supported by Amazon EC2 Auto Scaling, see <a>DescribeAutoScalingNotificationTypes</a>.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   TopicARN: string (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614872 = newJObject()
  if NotificationTypes != nil:
    query_614872.add "NotificationTypes", NotificationTypes
  add(query_614872, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_614872, "TopicARN", newJString(TopicARN))
  add(query_614872, "Action", newJString(Action))
  add(query_614872, "Version", newJString(Version))
  result = call_614871.call(nil, query_614872, nil, nil, nil)

var getPutNotificationConfiguration* = Call_GetPutNotificationConfiguration_614855(
    name: "getPutNotificationConfiguration", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=PutNotificationConfiguration",
    validator: validate_GetPutNotificationConfiguration_614856, base: "/",
    url: url_GetPutNotificationConfiguration_614857,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutScalingPolicy_614922 = ref object of OpenApiRestCall_612658
proc url_PostPutScalingPolicy_614924(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPutScalingPolicy_614923(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates or updates a scaling policy for an Auto Scaling group. To update an existing scaling policy, use the existing policy name and set the parameters to change. Any existing parameter not changed in an update to an existing policy is not changed in this update request.</p> <p>For more information about using scaling policies to scale your Auto Scaling group automatically, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scale-based-on-demand.html">Dynamic Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614925 = query.getOrDefault("Action")
  valid_614925 = validateParameter(valid_614925, JString, required = true,
                                 default = newJString("PutScalingPolicy"))
  if valid_614925 != nil:
    section.add "Action", valid_614925
  var valid_614926 = query.getOrDefault("Version")
  valid_614926 = validateParameter(valid_614926, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_614926 != nil:
    section.add "Version", valid_614926
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614927 = header.getOrDefault("X-Amz-Signature")
  valid_614927 = validateParameter(valid_614927, JString, required = false,
                                 default = nil)
  if valid_614927 != nil:
    section.add "X-Amz-Signature", valid_614927
  var valid_614928 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614928 = validateParameter(valid_614928, JString, required = false,
                                 default = nil)
  if valid_614928 != nil:
    section.add "X-Amz-Content-Sha256", valid_614928
  var valid_614929 = header.getOrDefault("X-Amz-Date")
  valid_614929 = validateParameter(valid_614929, JString, required = false,
                                 default = nil)
  if valid_614929 != nil:
    section.add "X-Amz-Date", valid_614929
  var valid_614930 = header.getOrDefault("X-Amz-Credential")
  valid_614930 = validateParameter(valid_614930, JString, required = false,
                                 default = nil)
  if valid_614930 != nil:
    section.add "X-Amz-Credential", valid_614930
  var valid_614931 = header.getOrDefault("X-Amz-Security-Token")
  valid_614931 = validateParameter(valid_614931, JString, required = false,
                                 default = nil)
  if valid_614931 != nil:
    section.add "X-Amz-Security-Token", valid_614931
  var valid_614932 = header.getOrDefault("X-Amz-Algorithm")
  valid_614932 = validateParameter(valid_614932, JString, required = false,
                                 default = nil)
  if valid_614932 != nil:
    section.add "X-Amz-Algorithm", valid_614932
  var valid_614933 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614933 = validateParameter(valid_614933, JString, required = false,
                                 default = nil)
  if valid_614933 != nil:
    section.add "X-Amz-SignedHeaders", valid_614933
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   StepAdjustments: JArray
  ##                  : <p>A set of adjustments that enable you to scale based on the size of the alarm breach.</p> <p>Conditional: If you specify <code>StepScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   TargetTrackingConfiguration.DisableScaleIn: JString
  ##                                             : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## Indicates whether scaling in by the target tracking scaling policy is disabled. If scaling in is disabled, the target tracking scaling policy doesn't remove instances from the Auto Scaling group. Otherwise, the target tracking scaling policy can remove instances from the Auto Scaling group. The default is <code>false</code>.
  ##   PolicyType: JString
  ##             : The policy type. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>. If the policy type is null, the value is treated as <code>SimpleScaling</code>.
  ##   ScalingAdjustment: JInt
  ##                    : <p>The amount by which a simple scaling policy scales the Auto Scaling group in response to an alarm breach. The adjustment is based on the value that you specified in the <code>AdjustmentType</code> parameter (either an absolute number or a percentage). A positive value adds to the current capacity and a negative value subtracts from the current capacity. For exact capacity, you must specify a positive value.</p> <p>Conditional: If you specify <code>SimpleScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   TargetTrackingConfiguration.PredefinedMetricSpecification: JString
  ##                                                            : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A predefined metric. You must specify either a predefined metric or a customized metric.
  ##   TargetTrackingConfiguration.CustomizedMetricSpecification: JString
  ##                                                            : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A customized metric. You must specify either a predefined metric or a customized metric.
  ##   TargetTrackingConfiguration.TargetValue: JString
  ##                                          : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## The target value for the metric.
  ##   Cooldown: JInt
  ##           : <p>The amount of time, in seconds, after a scaling activity completes before any further dynamic scaling activities can start. If this parameter is not specified, the default cooldown period for the group applies.</p> <p>Valid only if the policy type is <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MinAdjustmentStep: JInt
  ##                    : Available for backward compatibility. Use <code>MinAdjustmentMagnitude</code> instead.
  ##   AdjustmentType: JString
  ##                 : <p>Specifies whether the <code>ScalingAdjustment</code> parameter is an absolute number or a percentage of the current capacity. The valid values are <code>ChangeInCapacity</code>, <code>ExactCapacity</code>, and <code>PercentChangeInCapacity</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment">Scaling Adjustment Types</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   PolicyName: JString (required)
  ##             : The name of the policy.
  ##   MinAdjustmentMagnitude: JInt
  ##                         : <p>The minimum number of instances to scale. If the value of <code>AdjustmentType</code> is <code>PercentChangeInCapacity</code>, the scaling policy changes the <code>DesiredCapacity</code> of the Auto Scaling group by at least this many instances. Otherwise, the error is <code>ValidationError</code>.</p> <p>This property replaces the <code>MinAdjustmentStep</code> property. For example, suppose that you create a step scaling policy to scale out an Auto Scaling group by 25 percent and you specify a <code>MinAdjustmentMagnitude</code> of 2. If the group has 4 instances and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a <code>MinAdjustmentMagnitude</code> of 2, Amazon EC2 Auto Scaling scales out the group by 2 instances.</p> <p>Valid only if the policy type is <code>SimpleScaling</code> or <code>StepScaling</code>.</p>
  ##   EstimatedInstanceWarmup: JInt
  ##                          : <p>The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. The default is to use the value specified for the default cooldown period for the group.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p>
  ##   MetricAggregationType: JString
  ##                        : <p>The aggregation type for the CloudWatch metrics. The valid values are <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code>. If the aggregation type is null, the value is treated as <code>Average</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code>.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_614934 = formData.getOrDefault("AutoScalingGroupName")
  valid_614934 = validateParameter(valid_614934, JString, required = true,
                                 default = nil)
  if valid_614934 != nil:
    section.add "AutoScalingGroupName", valid_614934
  var valid_614935 = formData.getOrDefault("StepAdjustments")
  valid_614935 = validateParameter(valid_614935, JArray, required = false,
                                 default = nil)
  if valid_614935 != nil:
    section.add "StepAdjustments", valid_614935
  var valid_614936 = formData.getOrDefault("TargetTrackingConfiguration.DisableScaleIn")
  valid_614936 = validateParameter(valid_614936, JString, required = false,
                                 default = nil)
  if valid_614936 != nil:
    section.add "TargetTrackingConfiguration.DisableScaleIn", valid_614936
  var valid_614937 = formData.getOrDefault("PolicyType")
  valid_614937 = validateParameter(valid_614937, JString, required = false,
                                 default = nil)
  if valid_614937 != nil:
    section.add "PolicyType", valid_614937
  var valid_614938 = formData.getOrDefault("ScalingAdjustment")
  valid_614938 = validateParameter(valid_614938, JInt, required = false, default = nil)
  if valid_614938 != nil:
    section.add "ScalingAdjustment", valid_614938
  var valid_614939 = formData.getOrDefault("TargetTrackingConfiguration.PredefinedMetricSpecification")
  valid_614939 = validateParameter(valid_614939, JString, required = false,
                                 default = nil)
  if valid_614939 != nil:
    section.add "TargetTrackingConfiguration.PredefinedMetricSpecification", valid_614939
  var valid_614940 = formData.getOrDefault("TargetTrackingConfiguration.CustomizedMetricSpecification")
  valid_614940 = validateParameter(valid_614940, JString, required = false,
                                 default = nil)
  if valid_614940 != nil:
    section.add "TargetTrackingConfiguration.CustomizedMetricSpecification", valid_614940
  var valid_614941 = formData.getOrDefault("TargetTrackingConfiguration.TargetValue")
  valid_614941 = validateParameter(valid_614941, JString, required = false,
                                 default = nil)
  if valid_614941 != nil:
    section.add "TargetTrackingConfiguration.TargetValue", valid_614941
  var valid_614942 = formData.getOrDefault("Cooldown")
  valid_614942 = validateParameter(valid_614942, JInt, required = false, default = nil)
  if valid_614942 != nil:
    section.add "Cooldown", valid_614942
  var valid_614943 = formData.getOrDefault("MinAdjustmentStep")
  valid_614943 = validateParameter(valid_614943, JInt, required = false, default = nil)
  if valid_614943 != nil:
    section.add "MinAdjustmentStep", valid_614943
  var valid_614944 = formData.getOrDefault("AdjustmentType")
  valid_614944 = validateParameter(valid_614944, JString, required = false,
                                 default = nil)
  if valid_614944 != nil:
    section.add "AdjustmentType", valid_614944
  var valid_614945 = formData.getOrDefault("PolicyName")
  valid_614945 = validateParameter(valid_614945, JString, required = true,
                                 default = nil)
  if valid_614945 != nil:
    section.add "PolicyName", valid_614945
  var valid_614946 = formData.getOrDefault("MinAdjustmentMagnitude")
  valid_614946 = validateParameter(valid_614946, JInt, required = false, default = nil)
  if valid_614946 != nil:
    section.add "MinAdjustmentMagnitude", valid_614946
  var valid_614947 = formData.getOrDefault("EstimatedInstanceWarmup")
  valid_614947 = validateParameter(valid_614947, JInt, required = false, default = nil)
  if valid_614947 != nil:
    section.add "EstimatedInstanceWarmup", valid_614947
  var valid_614948 = formData.getOrDefault("MetricAggregationType")
  valid_614948 = validateParameter(valid_614948, JString, required = false,
                                 default = nil)
  if valid_614948 != nil:
    section.add "MetricAggregationType", valid_614948
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614949: Call_PostPutScalingPolicy_614922; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates or updates a scaling policy for an Auto Scaling group. To update an existing scaling policy, use the existing policy name and set the parameters to change. Any existing parameter not changed in an update to an existing policy is not changed in this update request.</p> <p>For more information about using scaling policies to scale your Auto Scaling group automatically, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scale-based-on-demand.html">Dynamic Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_614949.validator(path, query, header, formData, body)
  let scheme = call_614949.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614949.url(scheme.get, call_614949.host, call_614949.base,
                         call_614949.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614949, url, valid)

proc call*(call_614950: Call_PostPutScalingPolicy_614922;
          AutoScalingGroupName: string; PolicyName: string;
          StepAdjustments: JsonNode = nil;
          TargetTrackingConfigurationDisableScaleIn: string = "";
          PolicyType: string = ""; ScalingAdjustment: int = 0;
    TargetTrackingConfigurationPredefinedMetricSpecification: string = "";
    TargetTrackingConfigurationCustomizedMetricSpecification: string = "";
          TargetTrackingConfigurationTargetValue: string = ""; Cooldown: int = 0;
          Action: string = "PutScalingPolicy"; MinAdjustmentStep: int = 0;
          AdjustmentType: string = ""; Version: string = "2011-01-01";
          MinAdjustmentMagnitude: int = 0; EstimatedInstanceWarmup: int = 0;
          MetricAggregationType: string = ""): Recallable =
  ## postPutScalingPolicy
  ## <p>Creates or updates a scaling policy for an Auto Scaling group. To update an existing scaling policy, use the existing policy name and set the parameters to change. Any existing parameter not changed in an update to an existing policy is not changed in this update request.</p> <p>For more information about using scaling policies to scale your Auto Scaling group automatically, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scale-based-on-demand.html">Dynamic Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   StepAdjustments: JArray
  ##                  : <p>A set of adjustments that enable you to scale based on the size of the alarm breach.</p> <p>Conditional: If you specify <code>StepScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   TargetTrackingConfigurationDisableScaleIn: string
  ##                                            : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## Indicates whether scaling in by the target tracking scaling policy is disabled. If scaling in is disabled, the target tracking scaling policy doesn't remove instances from the Auto Scaling group. Otherwise, the target tracking scaling policy can remove instances from the Auto Scaling group. The default is <code>false</code>.
  ##   PolicyType: string
  ##             : The policy type. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>. If the policy type is null, the value is treated as <code>SimpleScaling</code>.
  ##   ScalingAdjustment: int
  ##                    : <p>The amount by which a simple scaling policy scales the Auto Scaling group in response to an alarm breach. The adjustment is based on the value that you specified in the <code>AdjustmentType</code> parameter (either an absolute number or a percentage). A positive value adds to the current capacity and a negative value subtracts from the current capacity. For exact capacity, you must specify a positive value.</p> <p>Conditional: If you specify <code>SimpleScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   TargetTrackingConfigurationPredefinedMetricSpecification: string
  ##                                                           : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A predefined metric. You must specify either a predefined metric or a customized metric.
  ##   TargetTrackingConfigurationCustomizedMetricSpecification: string
  ##                                                           : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A customized metric. You must specify either a predefined metric or a customized metric.
  ##   TargetTrackingConfigurationTargetValue: string
  ##                                         : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## The target value for the metric.
  ##   Cooldown: int
  ##           : <p>The amount of time, in seconds, after a scaling activity completes before any further dynamic scaling activities can start. If this parameter is not specified, the default cooldown period for the group applies.</p> <p>Valid only if the policy type is <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   MinAdjustmentStep: int
  ##                    : Available for backward compatibility. Use <code>MinAdjustmentMagnitude</code> instead.
  ##   AdjustmentType: string
  ##                 : <p>Specifies whether the <code>ScalingAdjustment</code> parameter is an absolute number or a percentage of the current capacity. The valid values are <code>ChangeInCapacity</code>, <code>ExactCapacity</code>, and <code>PercentChangeInCapacity</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment">Scaling Adjustment Types</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : The name of the policy.
  ##   MinAdjustmentMagnitude: int
  ##                         : <p>The minimum number of instances to scale. If the value of <code>AdjustmentType</code> is <code>PercentChangeInCapacity</code>, the scaling policy changes the <code>DesiredCapacity</code> of the Auto Scaling group by at least this many instances. Otherwise, the error is <code>ValidationError</code>.</p> <p>This property replaces the <code>MinAdjustmentStep</code> property. For example, suppose that you create a step scaling policy to scale out an Auto Scaling group by 25 percent and you specify a <code>MinAdjustmentMagnitude</code> of 2. If the group has 4 instances and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a <code>MinAdjustmentMagnitude</code> of 2, Amazon EC2 Auto Scaling scales out the group by 2 instances.</p> <p>Valid only if the policy type is <code>SimpleScaling</code> or <code>StepScaling</code>.</p>
  ##   EstimatedInstanceWarmup: int
  ##                          : <p>The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. The default is to use the value specified for the default cooldown period for the group.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p>
  ##   MetricAggregationType: string
  ##                        : <p>The aggregation type for the CloudWatch metrics. The valid values are <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code>. If the aggregation type is null, the value is treated as <code>Average</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code>.</p>
  var query_614951 = newJObject()
  var formData_614952 = newJObject()
  add(formData_614952, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if StepAdjustments != nil:
    formData_614952.add "StepAdjustments", StepAdjustments
  add(formData_614952, "TargetTrackingConfiguration.DisableScaleIn",
      newJString(TargetTrackingConfigurationDisableScaleIn))
  add(formData_614952, "PolicyType", newJString(PolicyType))
  add(formData_614952, "ScalingAdjustment", newJInt(ScalingAdjustment))
  add(formData_614952,
      "TargetTrackingConfiguration.PredefinedMetricSpecification",
      newJString(TargetTrackingConfigurationPredefinedMetricSpecification))
  add(formData_614952,
      "TargetTrackingConfiguration.CustomizedMetricSpecification",
      newJString(TargetTrackingConfigurationCustomizedMetricSpecification))
  add(formData_614952, "TargetTrackingConfiguration.TargetValue",
      newJString(TargetTrackingConfigurationTargetValue))
  add(formData_614952, "Cooldown", newJInt(Cooldown))
  add(query_614951, "Action", newJString(Action))
  add(formData_614952, "MinAdjustmentStep", newJInt(MinAdjustmentStep))
  add(formData_614952, "AdjustmentType", newJString(AdjustmentType))
  add(query_614951, "Version", newJString(Version))
  add(formData_614952, "PolicyName", newJString(PolicyName))
  add(formData_614952, "MinAdjustmentMagnitude", newJInt(MinAdjustmentMagnitude))
  add(formData_614952, "EstimatedInstanceWarmup", newJInt(EstimatedInstanceWarmup))
  add(formData_614952, "MetricAggregationType", newJString(MetricAggregationType))
  result = call_614950.call(nil, query_614951, nil, formData_614952, nil)

var postPutScalingPolicy* = Call_PostPutScalingPolicy_614922(
    name: "postPutScalingPolicy", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=PutScalingPolicy",
    validator: validate_PostPutScalingPolicy_614923, base: "/",
    url: url_PostPutScalingPolicy_614924, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutScalingPolicy_614892 = ref object of OpenApiRestCall_612658
proc url_GetPutScalingPolicy_614894(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPutScalingPolicy_614893(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Creates or updates a scaling policy for an Auto Scaling group. To update an existing scaling policy, use the existing policy name and set the parameters to change. Any existing parameter not changed in an update to an existing policy is not changed in this update request.</p> <p>For more information about using scaling policies to scale your Auto Scaling group automatically, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scale-based-on-demand.html">Dynamic Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyType: JString
  ##             : The policy type. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>. If the policy type is null, the value is treated as <code>SimpleScaling</code>.
  ##   MinAdjustmentMagnitude: JInt
  ##                         : <p>The minimum number of instances to scale. If the value of <code>AdjustmentType</code> is <code>PercentChangeInCapacity</code>, the scaling policy changes the <code>DesiredCapacity</code> of the Auto Scaling group by at least this many instances. Otherwise, the error is <code>ValidationError</code>.</p> <p>This property replaces the <code>MinAdjustmentStep</code> property. For example, suppose that you create a step scaling policy to scale out an Auto Scaling group by 25 percent and you specify a <code>MinAdjustmentMagnitude</code> of 2. If the group has 4 instances and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a <code>MinAdjustmentMagnitude</code> of 2, Amazon EC2 Auto Scaling scales out the group by 2 instances.</p> <p>Valid only if the policy type is <code>SimpleScaling</code> or <code>StepScaling</code>.</p>
  ##   StepAdjustments: JArray
  ##                  : <p>A set of adjustments that enable you to scale based on the size of the alarm breach.</p> <p>Conditional: If you specify <code>StepScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   AdjustmentType: JString
  ##                 : <p>Specifies whether the <code>ScalingAdjustment</code> parameter is an absolute number or a percentage of the current capacity. The valid values are <code>ChangeInCapacity</code>, <code>ExactCapacity</code>, and <code>PercentChangeInCapacity</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment">Scaling Adjustment Types</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   TargetTrackingConfiguration.CustomizedMetricSpecification: JString
  ##                                                            : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A customized metric. You must specify either a predefined metric or a customized metric.
  ##   PolicyName: JString (required)
  ##             : The name of the policy.
  ##   Cooldown: JInt
  ##           : <p>The amount of time, in seconds, after a scaling activity completes before any further dynamic scaling activities can start. If this parameter is not specified, the default cooldown period for the group applies.</p> <p>Valid only if the policy type is <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MetricAggregationType: JString
  ##                        : <p>The aggregation type for the CloudWatch metrics. The valid values are <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code>. If the aggregation type is null, the value is treated as <code>Average</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code>.</p>
  ##   TargetTrackingConfiguration.DisableScaleIn: JString
  ##                                             : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## Indicates whether scaling in by the target tracking scaling policy is disabled. If scaling in is disabled, the target tracking scaling policy doesn't remove instances from the Auto Scaling group. Otherwise, the target tracking scaling policy can remove instances from the Auto Scaling group. The default is <code>false</code>.
  ##   ScalingAdjustment: JInt
  ##                    : <p>The amount by which a simple scaling policy scales the Auto Scaling group in response to an alarm breach. The adjustment is based on the value that you specified in the <code>AdjustmentType</code> parameter (either an absolute number or a percentage). A positive value adds to the current capacity and a negative value subtracts from the current capacity. For exact capacity, you must specify a positive value.</p> <p>Conditional: If you specify <code>SimpleScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetTrackingConfiguration.TargetValue: JString
  ##                                          : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## The target value for the metric.
  ##   Action: JString (required)
  ##   EstimatedInstanceWarmup: JInt
  ##                          : <p>The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. The default is to use the value specified for the default cooldown period for the group.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p>
  ##   MinAdjustmentStep: JInt
  ##                    : Available for backward compatibility. Use <code>MinAdjustmentMagnitude</code> instead.
  ##   Version: JString (required)
  ##   TargetTrackingConfiguration.PredefinedMetricSpecification: JString
  ##                                                            : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A predefined metric. You must specify either a predefined metric or a customized metric.
  section = newJObject()
  var valid_614895 = query.getOrDefault("PolicyType")
  valid_614895 = validateParameter(valid_614895, JString, required = false,
                                 default = nil)
  if valid_614895 != nil:
    section.add "PolicyType", valid_614895
  var valid_614896 = query.getOrDefault("MinAdjustmentMagnitude")
  valid_614896 = validateParameter(valid_614896, JInt, required = false, default = nil)
  if valid_614896 != nil:
    section.add "MinAdjustmentMagnitude", valid_614896
  var valid_614897 = query.getOrDefault("StepAdjustments")
  valid_614897 = validateParameter(valid_614897, JArray, required = false,
                                 default = nil)
  if valid_614897 != nil:
    section.add "StepAdjustments", valid_614897
  var valid_614898 = query.getOrDefault("AdjustmentType")
  valid_614898 = validateParameter(valid_614898, JString, required = false,
                                 default = nil)
  if valid_614898 != nil:
    section.add "AdjustmentType", valid_614898
  var valid_614899 = query.getOrDefault("TargetTrackingConfiguration.CustomizedMetricSpecification")
  valid_614899 = validateParameter(valid_614899, JString, required = false,
                                 default = nil)
  if valid_614899 != nil:
    section.add "TargetTrackingConfiguration.CustomizedMetricSpecification", valid_614899
  assert query != nil,
        "query argument is necessary due to required `PolicyName` field"
  var valid_614900 = query.getOrDefault("PolicyName")
  valid_614900 = validateParameter(valid_614900, JString, required = true,
                                 default = nil)
  if valid_614900 != nil:
    section.add "PolicyName", valid_614900
  var valid_614901 = query.getOrDefault("Cooldown")
  valid_614901 = validateParameter(valid_614901, JInt, required = false, default = nil)
  if valid_614901 != nil:
    section.add "Cooldown", valid_614901
  var valid_614902 = query.getOrDefault("MetricAggregationType")
  valid_614902 = validateParameter(valid_614902, JString, required = false,
                                 default = nil)
  if valid_614902 != nil:
    section.add "MetricAggregationType", valid_614902
  var valid_614903 = query.getOrDefault("TargetTrackingConfiguration.DisableScaleIn")
  valid_614903 = validateParameter(valid_614903, JString, required = false,
                                 default = nil)
  if valid_614903 != nil:
    section.add "TargetTrackingConfiguration.DisableScaleIn", valid_614903
  var valid_614904 = query.getOrDefault("ScalingAdjustment")
  valid_614904 = validateParameter(valid_614904, JInt, required = false, default = nil)
  if valid_614904 != nil:
    section.add "ScalingAdjustment", valid_614904
  var valid_614905 = query.getOrDefault("AutoScalingGroupName")
  valid_614905 = validateParameter(valid_614905, JString, required = true,
                                 default = nil)
  if valid_614905 != nil:
    section.add "AutoScalingGroupName", valid_614905
  var valid_614906 = query.getOrDefault("TargetTrackingConfiguration.TargetValue")
  valid_614906 = validateParameter(valid_614906, JString, required = false,
                                 default = nil)
  if valid_614906 != nil:
    section.add "TargetTrackingConfiguration.TargetValue", valid_614906
  var valid_614907 = query.getOrDefault("Action")
  valid_614907 = validateParameter(valid_614907, JString, required = true,
                                 default = newJString("PutScalingPolicy"))
  if valid_614907 != nil:
    section.add "Action", valid_614907
  var valid_614908 = query.getOrDefault("EstimatedInstanceWarmup")
  valid_614908 = validateParameter(valid_614908, JInt, required = false, default = nil)
  if valid_614908 != nil:
    section.add "EstimatedInstanceWarmup", valid_614908
  var valid_614909 = query.getOrDefault("MinAdjustmentStep")
  valid_614909 = validateParameter(valid_614909, JInt, required = false, default = nil)
  if valid_614909 != nil:
    section.add "MinAdjustmentStep", valid_614909
  var valid_614910 = query.getOrDefault("Version")
  valid_614910 = validateParameter(valid_614910, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_614910 != nil:
    section.add "Version", valid_614910
  var valid_614911 = query.getOrDefault("TargetTrackingConfiguration.PredefinedMetricSpecification")
  valid_614911 = validateParameter(valid_614911, JString, required = false,
                                 default = nil)
  if valid_614911 != nil:
    section.add "TargetTrackingConfiguration.PredefinedMetricSpecification", valid_614911
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614912 = header.getOrDefault("X-Amz-Signature")
  valid_614912 = validateParameter(valid_614912, JString, required = false,
                                 default = nil)
  if valid_614912 != nil:
    section.add "X-Amz-Signature", valid_614912
  var valid_614913 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614913 = validateParameter(valid_614913, JString, required = false,
                                 default = nil)
  if valid_614913 != nil:
    section.add "X-Amz-Content-Sha256", valid_614913
  var valid_614914 = header.getOrDefault("X-Amz-Date")
  valid_614914 = validateParameter(valid_614914, JString, required = false,
                                 default = nil)
  if valid_614914 != nil:
    section.add "X-Amz-Date", valid_614914
  var valid_614915 = header.getOrDefault("X-Amz-Credential")
  valid_614915 = validateParameter(valid_614915, JString, required = false,
                                 default = nil)
  if valid_614915 != nil:
    section.add "X-Amz-Credential", valid_614915
  var valid_614916 = header.getOrDefault("X-Amz-Security-Token")
  valid_614916 = validateParameter(valid_614916, JString, required = false,
                                 default = nil)
  if valid_614916 != nil:
    section.add "X-Amz-Security-Token", valid_614916
  var valid_614917 = header.getOrDefault("X-Amz-Algorithm")
  valid_614917 = validateParameter(valid_614917, JString, required = false,
                                 default = nil)
  if valid_614917 != nil:
    section.add "X-Amz-Algorithm", valid_614917
  var valid_614918 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614918 = validateParameter(valid_614918, JString, required = false,
                                 default = nil)
  if valid_614918 != nil:
    section.add "X-Amz-SignedHeaders", valid_614918
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614919: Call_GetPutScalingPolicy_614892; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates or updates a scaling policy for an Auto Scaling group. To update an existing scaling policy, use the existing policy name and set the parameters to change. Any existing parameter not changed in an update to an existing policy is not changed in this update request.</p> <p>For more information about using scaling policies to scale your Auto Scaling group automatically, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scale-based-on-demand.html">Dynamic Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_614919.validator(path, query, header, formData, body)
  let scheme = call_614919.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614919.url(scheme.get, call_614919.host, call_614919.base,
                         call_614919.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614919, url, valid)

proc call*(call_614920: Call_GetPutScalingPolicy_614892; PolicyName: string;
          AutoScalingGroupName: string; PolicyType: string = "";
          MinAdjustmentMagnitude: int = 0; StepAdjustments: JsonNode = nil;
          AdjustmentType: string = ""; TargetTrackingConfigurationCustomizedMetricSpecification: string = "";
          Cooldown: int = 0; MetricAggregationType: string = "";
          TargetTrackingConfigurationDisableScaleIn: string = "";
          ScalingAdjustment: int = 0;
          TargetTrackingConfigurationTargetValue: string = "";
          Action: string = "PutScalingPolicy"; EstimatedInstanceWarmup: int = 0;
          MinAdjustmentStep: int = 0; Version: string = "2011-01-01";
          TargetTrackingConfigurationPredefinedMetricSpecification: string = ""): Recallable =
  ## getPutScalingPolicy
  ## <p>Creates or updates a scaling policy for an Auto Scaling group. To update an existing scaling policy, use the existing policy name and set the parameters to change. Any existing parameter not changed in an update to an existing policy is not changed in this update request.</p> <p>For more information about using scaling policies to scale your Auto Scaling group automatically, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scale-based-on-demand.html">Dynamic Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   PolicyType: string
  ##             : The policy type. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>. If the policy type is null, the value is treated as <code>SimpleScaling</code>.
  ##   MinAdjustmentMagnitude: int
  ##                         : <p>The minimum number of instances to scale. If the value of <code>AdjustmentType</code> is <code>PercentChangeInCapacity</code>, the scaling policy changes the <code>DesiredCapacity</code> of the Auto Scaling group by at least this many instances. Otherwise, the error is <code>ValidationError</code>.</p> <p>This property replaces the <code>MinAdjustmentStep</code> property. For example, suppose that you create a step scaling policy to scale out an Auto Scaling group by 25 percent and you specify a <code>MinAdjustmentMagnitude</code> of 2. If the group has 4 instances and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a <code>MinAdjustmentMagnitude</code> of 2, Amazon EC2 Auto Scaling scales out the group by 2 instances.</p> <p>Valid only if the policy type is <code>SimpleScaling</code> or <code>StepScaling</code>.</p>
  ##   StepAdjustments: JArray
  ##                  : <p>A set of adjustments that enable you to scale based on the size of the alarm breach.</p> <p>Conditional: If you specify <code>StepScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   AdjustmentType: string
  ##                 : <p>Specifies whether the <code>ScalingAdjustment</code> parameter is an absolute number or a percentage of the current capacity. The valid values are <code>ChangeInCapacity</code>, <code>ExactCapacity</code>, and <code>PercentChangeInCapacity</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment">Scaling Adjustment Types</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   TargetTrackingConfigurationCustomizedMetricSpecification: string
  ##                                                           : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A customized metric. You must specify either a predefined metric or a customized metric.
  ##   PolicyName: string (required)
  ##             : The name of the policy.
  ##   Cooldown: int
  ##           : <p>The amount of time, in seconds, after a scaling activity completes before any further dynamic scaling activities can start. If this parameter is not specified, the default cooldown period for the group applies.</p> <p>Valid only if the policy type is <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MetricAggregationType: string
  ##                        : <p>The aggregation type for the CloudWatch metrics. The valid values are <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code>. If the aggregation type is null, the value is treated as <code>Average</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code>.</p>
  ##   TargetTrackingConfigurationDisableScaleIn: string
  ##                                            : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## Indicates whether scaling in by the target tracking scaling policy is disabled. If scaling in is disabled, the target tracking scaling policy doesn't remove instances from the Auto Scaling group. Otherwise, the target tracking scaling policy can remove instances from the Auto Scaling group. The default is <code>false</code>.
  ##   ScalingAdjustment: int
  ##                    : <p>The amount by which a simple scaling policy scales the Auto Scaling group in response to an alarm breach. The adjustment is based on the value that you specified in the <code>AdjustmentType</code> parameter (either an absolute number or a percentage). A positive value adds to the current capacity and a negative value subtracts from the current capacity. For exact capacity, you must specify a positive value.</p> <p>Conditional: If you specify <code>SimpleScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetTrackingConfigurationTargetValue: string
  ##                                         : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## The target value for the metric.
  ##   Action: string (required)
  ##   EstimatedInstanceWarmup: int
  ##                          : <p>The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. The default is to use the value specified for the default cooldown period for the group.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p>
  ##   MinAdjustmentStep: int
  ##                    : Available for backward compatibility. Use <code>MinAdjustmentMagnitude</code> instead.
  ##   Version: string (required)
  ##   TargetTrackingConfigurationPredefinedMetricSpecification: string
  ##                                                           : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A predefined metric. You must specify either a predefined metric or a customized metric.
  var query_614921 = newJObject()
  add(query_614921, "PolicyType", newJString(PolicyType))
  add(query_614921, "MinAdjustmentMagnitude", newJInt(MinAdjustmentMagnitude))
  if StepAdjustments != nil:
    query_614921.add "StepAdjustments", StepAdjustments
  add(query_614921, "AdjustmentType", newJString(AdjustmentType))
  add(query_614921, "TargetTrackingConfiguration.CustomizedMetricSpecification",
      newJString(TargetTrackingConfigurationCustomizedMetricSpecification))
  add(query_614921, "PolicyName", newJString(PolicyName))
  add(query_614921, "Cooldown", newJInt(Cooldown))
  add(query_614921, "MetricAggregationType", newJString(MetricAggregationType))
  add(query_614921, "TargetTrackingConfiguration.DisableScaleIn",
      newJString(TargetTrackingConfigurationDisableScaleIn))
  add(query_614921, "ScalingAdjustment", newJInt(ScalingAdjustment))
  add(query_614921, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_614921, "TargetTrackingConfiguration.TargetValue",
      newJString(TargetTrackingConfigurationTargetValue))
  add(query_614921, "Action", newJString(Action))
  add(query_614921, "EstimatedInstanceWarmup", newJInt(EstimatedInstanceWarmup))
  add(query_614921, "MinAdjustmentStep", newJInt(MinAdjustmentStep))
  add(query_614921, "Version", newJString(Version))
  add(query_614921, "TargetTrackingConfiguration.PredefinedMetricSpecification",
      newJString(TargetTrackingConfigurationPredefinedMetricSpecification))
  result = call_614920.call(nil, query_614921, nil, nil, nil)

var getPutScalingPolicy* = Call_GetPutScalingPolicy_614892(
    name: "getPutScalingPolicy", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=PutScalingPolicy",
    validator: validate_GetPutScalingPolicy_614893, base: "/",
    url: url_GetPutScalingPolicy_614894, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutScheduledUpdateGroupAction_614977 = ref object of OpenApiRestCall_612658
proc url_PostPutScheduledUpdateGroupAction_614979(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPutScheduledUpdateGroupAction_614978(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates or updates a scheduled scaling action for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html">Scheduled Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614980 = query.getOrDefault("Action")
  valid_614980 = validateParameter(valid_614980, JString, required = true, default = newJString(
      "PutScheduledUpdateGroupAction"))
  if valid_614980 != nil:
    section.add "Action", valid_614980
  var valid_614981 = query.getOrDefault("Version")
  valid_614981 = validateParameter(valid_614981, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_614981 != nil:
    section.add "Version", valid_614981
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614982 = header.getOrDefault("X-Amz-Signature")
  valid_614982 = validateParameter(valid_614982, JString, required = false,
                                 default = nil)
  if valid_614982 != nil:
    section.add "X-Amz-Signature", valid_614982
  var valid_614983 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614983 = validateParameter(valid_614983, JString, required = false,
                                 default = nil)
  if valid_614983 != nil:
    section.add "X-Amz-Content-Sha256", valid_614983
  var valid_614984 = header.getOrDefault("X-Amz-Date")
  valid_614984 = validateParameter(valid_614984, JString, required = false,
                                 default = nil)
  if valid_614984 != nil:
    section.add "X-Amz-Date", valid_614984
  var valid_614985 = header.getOrDefault("X-Amz-Credential")
  valid_614985 = validateParameter(valid_614985, JString, required = false,
                                 default = nil)
  if valid_614985 != nil:
    section.add "X-Amz-Credential", valid_614985
  var valid_614986 = header.getOrDefault("X-Amz-Security-Token")
  valid_614986 = validateParameter(valid_614986, JString, required = false,
                                 default = nil)
  if valid_614986 != nil:
    section.add "X-Amz-Security-Token", valid_614986
  var valid_614987 = header.getOrDefault("X-Amz-Algorithm")
  valid_614987 = validateParameter(valid_614987, JString, required = false,
                                 default = nil)
  if valid_614987 != nil:
    section.add "X-Amz-Algorithm", valid_614987
  var valid_614988 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614988 = validateParameter(valid_614988, JString, required = false,
                                 default = nil)
  if valid_614988 != nil:
    section.add "X-Amz-SignedHeaders", valid_614988
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   MinSize: JInt
  ##          : The minimum number of instances in the Auto Scaling group.
  ##   DesiredCapacity: JInt
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   ScheduledActionName: JString (required)
  ##                      : The name of this scaling action.
  ##   Recurrence: JString
  ##             : <p>The recurring schedule for this action, in Unix cron syntax format. This format consists of five fields separated by white spaces: [Minute] [Hour] [Day_of_Month] [Month_of_Year] [Day_of_Week]. The value must be in quotes (for example, <code>"30 0 1 1,6,12 *"</code>). For more information about this format, see <a href="http://crontab.org">Crontab</a>.</p> <p>When <code>StartTime</code> and <code>EndTime</code> are specified with <code>Recurrence</code>, they form the boundaries of when the recurring action starts and stops.</p>
  ##   EndTime: JString
  ##          : The date and time for the recurring schedule to end. Amazon EC2 Auto Scaling does not perform the action after this time.
  ##   StartTime: JString
  ##            : <p>The date and time for this action to start, in YYYY-MM-DDThh:mm:ssZ format in UTC/GMT only and in quotes (for example, <code>"2019-06-01T00:00:00Z"</code>).</p> <p>If you specify <code>Recurrence</code> and <code>StartTime</code>, Amazon EC2 Auto Scaling performs the action at this time, and then performs the action based on the specified recurrence.</p> <p>If you try to schedule your action in the past, Amazon EC2 Auto Scaling returns an error message.</p>
  ##   Time: JString
  ##       : This parameter is no longer used.
  ##   MaxSize: JInt
  ##          : The maximum number of instances in the Auto Scaling group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_614989 = formData.getOrDefault("AutoScalingGroupName")
  valid_614989 = validateParameter(valid_614989, JString, required = true,
                                 default = nil)
  if valid_614989 != nil:
    section.add "AutoScalingGroupName", valid_614989
  var valid_614990 = formData.getOrDefault("MinSize")
  valid_614990 = validateParameter(valid_614990, JInt, required = false, default = nil)
  if valid_614990 != nil:
    section.add "MinSize", valid_614990
  var valid_614991 = formData.getOrDefault("DesiredCapacity")
  valid_614991 = validateParameter(valid_614991, JInt, required = false, default = nil)
  if valid_614991 != nil:
    section.add "DesiredCapacity", valid_614991
  var valid_614992 = formData.getOrDefault("ScheduledActionName")
  valid_614992 = validateParameter(valid_614992, JString, required = true,
                                 default = nil)
  if valid_614992 != nil:
    section.add "ScheduledActionName", valid_614992
  var valid_614993 = formData.getOrDefault("Recurrence")
  valid_614993 = validateParameter(valid_614993, JString, required = false,
                                 default = nil)
  if valid_614993 != nil:
    section.add "Recurrence", valid_614993
  var valid_614994 = formData.getOrDefault("EndTime")
  valid_614994 = validateParameter(valid_614994, JString, required = false,
                                 default = nil)
  if valid_614994 != nil:
    section.add "EndTime", valid_614994
  var valid_614995 = formData.getOrDefault("StartTime")
  valid_614995 = validateParameter(valid_614995, JString, required = false,
                                 default = nil)
  if valid_614995 != nil:
    section.add "StartTime", valid_614995
  var valid_614996 = formData.getOrDefault("Time")
  valid_614996 = validateParameter(valid_614996, JString, required = false,
                                 default = nil)
  if valid_614996 != nil:
    section.add "Time", valid_614996
  var valid_614997 = formData.getOrDefault("MaxSize")
  valid_614997 = validateParameter(valid_614997, JInt, required = false, default = nil)
  if valid_614997 != nil:
    section.add "MaxSize", valid_614997
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614998: Call_PostPutScheduledUpdateGroupAction_614977;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates or updates a scheduled scaling action for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html">Scheduled Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_614998.validator(path, query, header, formData, body)
  let scheme = call_614998.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614998.url(scheme.get, call_614998.host, call_614998.base,
                         call_614998.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614998, url, valid)

proc call*(call_614999: Call_PostPutScheduledUpdateGroupAction_614977;
          AutoScalingGroupName: string; ScheduledActionName: string;
          MinSize: int = 0; DesiredCapacity: int = 0; Recurrence: string = "";
          EndTime: string = ""; StartTime: string = "";
          Action: string = "PutScheduledUpdateGroupAction"; Time: string = "";
          MaxSize: int = 0; Version: string = "2011-01-01"): Recallable =
  ## postPutScheduledUpdateGroupAction
  ## <p>Creates or updates a scheduled scaling action for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html">Scheduled Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   MinSize: int
  ##          : The minimum number of instances in the Auto Scaling group.
  ##   DesiredCapacity: int
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   ScheduledActionName: string (required)
  ##                      : The name of this scaling action.
  ##   Recurrence: string
  ##             : <p>The recurring schedule for this action, in Unix cron syntax format. This format consists of five fields separated by white spaces: [Minute] [Hour] [Day_of_Month] [Month_of_Year] [Day_of_Week]. The value must be in quotes (for example, <code>"30 0 1 1,6,12 *"</code>). For more information about this format, see <a href="http://crontab.org">Crontab</a>.</p> <p>When <code>StartTime</code> and <code>EndTime</code> are specified with <code>Recurrence</code>, they form the boundaries of when the recurring action starts and stops.</p>
  ##   EndTime: string
  ##          : The date and time for the recurring schedule to end. Amazon EC2 Auto Scaling does not perform the action after this time.
  ##   StartTime: string
  ##            : <p>The date and time for this action to start, in YYYY-MM-DDThh:mm:ssZ format in UTC/GMT only and in quotes (for example, <code>"2019-06-01T00:00:00Z"</code>).</p> <p>If you specify <code>Recurrence</code> and <code>StartTime</code>, Amazon EC2 Auto Scaling performs the action at this time, and then performs the action based on the specified recurrence.</p> <p>If you try to schedule your action in the past, Amazon EC2 Auto Scaling returns an error message.</p>
  ##   Action: string (required)
  ##   Time: string
  ##       : This parameter is no longer used.
  ##   MaxSize: int
  ##          : The maximum number of instances in the Auto Scaling group.
  ##   Version: string (required)
  var query_615000 = newJObject()
  var formData_615001 = newJObject()
  add(formData_615001, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_615001, "MinSize", newJInt(MinSize))
  add(formData_615001, "DesiredCapacity", newJInt(DesiredCapacity))
  add(formData_615001, "ScheduledActionName", newJString(ScheduledActionName))
  add(formData_615001, "Recurrence", newJString(Recurrence))
  add(formData_615001, "EndTime", newJString(EndTime))
  add(formData_615001, "StartTime", newJString(StartTime))
  add(query_615000, "Action", newJString(Action))
  add(formData_615001, "Time", newJString(Time))
  add(formData_615001, "MaxSize", newJInt(MaxSize))
  add(query_615000, "Version", newJString(Version))
  result = call_614999.call(nil, query_615000, nil, formData_615001, nil)

var postPutScheduledUpdateGroupAction* = Call_PostPutScheduledUpdateGroupAction_614977(
    name: "postPutScheduledUpdateGroupAction", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=PutScheduledUpdateGroupAction",
    validator: validate_PostPutScheduledUpdateGroupAction_614978, base: "/",
    url: url_PostPutScheduledUpdateGroupAction_614979,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutScheduledUpdateGroupAction_614953 = ref object of OpenApiRestCall_612658
proc url_GetPutScheduledUpdateGroupAction_614955(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPutScheduledUpdateGroupAction_614954(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates or updates a scheduled scaling action for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html">Scheduled Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Recurrence: JString
  ##             : <p>The recurring schedule for this action, in Unix cron syntax format. This format consists of five fields separated by white spaces: [Minute] [Hour] [Day_of_Month] [Month_of_Year] [Day_of_Week]. The value must be in quotes (for example, <code>"30 0 1 1,6,12 *"</code>). For more information about this format, see <a href="http://crontab.org">Crontab</a>.</p> <p>When <code>StartTime</code> and <code>EndTime</code> are specified with <code>Recurrence</code>, they form the boundaries of when the recurring action starts and stops.</p>
  ##   MaxSize: JInt
  ##          : The maximum number of instances in the Auto Scaling group.
  ##   ScheduledActionName: JString (required)
  ##                      : The name of this scaling action.
  ##   DesiredCapacity: JInt
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   StartTime: JString
  ##            : <p>The date and time for this action to start, in YYYY-MM-DDThh:mm:ssZ format in UTC/GMT only and in quotes (for example, <code>"2019-06-01T00:00:00Z"</code>).</p> <p>If you specify <code>Recurrence</code> and <code>StartTime</code>, Amazon EC2 Auto Scaling performs the action at this time, and then performs the action based on the specified recurrence.</p> <p>If you try to schedule your action in the past, Amazon EC2 Auto Scaling returns an error message.</p>
  ##   MinSize: JInt
  ##          : The minimum number of instances in the Auto Scaling group.
  ##   EndTime: JString
  ##          : The date and time for the recurring schedule to end. Amazon EC2 Auto Scaling does not perform the action after this time.
  ##   Version: JString (required)
  ##   Time: JString
  ##       : This parameter is no longer used.
  section = newJObject()
  var valid_614956 = query.getOrDefault("Recurrence")
  valid_614956 = validateParameter(valid_614956, JString, required = false,
                                 default = nil)
  if valid_614956 != nil:
    section.add "Recurrence", valid_614956
  var valid_614957 = query.getOrDefault("MaxSize")
  valid_614957 = validateParameter(valid_614957, JInt, required = false, default = nil)
  if valid_614957 != nil:
    section.add "MaxSize", valid_614957
  assert query != nil, "query argument is necessary due to required `ScheduledActionName` field"
  var valid_614958 = query.getOrDefault("ScheduledActionName")
  valid_614958 = validateParameter(valid_614958, JString, required = true,
                                 default = nil)
  if valid_614958 != nil:
    section.add "ScheduledActionName", valid_614958
  var valid_614959 = query.getOrDefault("DesiredCapacity")
  valid_614959 = validateParameter(valid_614959, JInt, required = false, default = nil)
  if valid_614959 != nil:
    section.add "DesiredCapacity", valid_614959
  var valid_614960 = query.getOrDefault("AutoScalingGroupName")
  valid_614960 = validateParameter(valid_614960, JString, required = true,
                                 default = nil)
  if valid_614960 != nil:
    section.add "AutoScalingGroupName", valid_614960
  var valid_614961 = query.getOrDefault("Action")
  valid_614961 = validateParameter(valid_614961, JString, required = true, default = newJString(
      "PutScheduledUpdateGroupAction"))
  if valid_614961 != nil:
    section.add "Action", valid_614961
  var valid_614962 = query.getOrDefault("StartTime")
  valid_614962 = validateParameter(valid_614962, JString, required = false,
                                 default = nil)
  if valid_614962 != nil:
    section.add "StartTime", valid_614962
  var valid_614963 = query.getOrDefault("MinSize")
  valid_614963 = validateParameter(valid_614963, JInt, required = false, default = nil)
  if valid_614963 != nil:
    section.add "MinSize", valid_614963
  var valid_614964 = query.getOrDefault("EndTime")
  valid_614964 = validateParameter(valid_614964, JString, required = false,
                                 default = nil)
  if valid_614964 != nil:
    section.add "EndTime", valid_614964
  var valid_614965 = query.getOrDefault("Version")
  valid_614965 = validateParameter(valid_614965, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_614965 != nil:
    section.add "Version", valid_614965
  var valid_614966 = query.getOrDefault("Time")
  valid_614966 = validateParameter(valid_614966, JString, required = false,
                                 default = nil)
  if valid_614966 != nil:
    section.add "Time", valid_614966
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614967 = header.getOrDefault("X-Amz-Signature")
  valid_614967 = validateParameter(valid_614967, JString, required = false,
                                 default = nil)
  if valid_614967 != nil:
    section.add "X-Amz-Signature", valid_614967
  var valid_614968 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614968 = validateParameter(valid_614968, JString, required = false,
                                 default = nil)
  if valid_614968 != nil:
    section.add "X-Amz-Content-Sha256", valid_614968
  var valid_614969 = header.getOrDefault("X-Amz-Date")
  valid_614969 = validateParameter(valid_614969, JString, required = false,
                                 default = nil)
  if valid_614969 != nil:
    section.add "X-Amz-Date", valid_614969
  var valid_614970 = header.getOrDefault("X-Amz-Credential")
  valid_614970 = validateParameter(valid_614970, JString, required = false,
                                 default = nil)
  if valid_614970 != nil:
    section.add "X-Amz-Credential", valid_614970
  var valid_614971 = header.getOrDefault("X-Amz-Security-Token")
  valid_614971 = validateParameter(valid_614971, JString, required = false,
                                 default = nil)
  if valid_614971 != nil:
    section.add "X-Amz-Security-Token", valid_614971
  var valid_614972 = header.getOrDefault("X-Amz-Algorithm")
  valid_614972 = validateParameter(valid_614972, JString, required = false,
                                 default = nil)
  if valid_614972 != nil:
    section.add "X-Amz-Algorithm", valid_614972
  var valid_614973 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614973 = validateParameter(valid_614973, JString, required = false,
                                 default = nil)
  if valid_614973 != nil:
    section.add "X-Amz-SignedHeaders", valid_614973
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614974: Call_GetPutScheduledUpdateGroupAction_614953;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates or updates a scheduled scaling action for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html">Scheduled Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_614974.validator(path, query, header, formData, body)
  let scheme = call_614974.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614974.url(scheme.get, call_614974.host, call_614974.base,
                         call_614974.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614974, url, valid)

proc call*(call_614975: Call_GetPutScheduledUpdateGroupAction_614953;
          ScheduledActionName: string; AutoScalingGroupName: string;
          Recurrence: string = ""; MaxSize: int = 0; DesiredCapacity: int = 0;
          Action: string = "PutScheduledUpdateGroupAction"; StartTime: string = "";
          MinSize: int = 0; EndTime: string = ""; Version: string = "2011-01-01";
          Time: string = ""): Recallable =
  ## getPutScheduledUpdateGroupAction
  ## <p>Creates or updates a scheduled scaling action for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html">Scheduled Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Recurrence: string
  ##             : <p>The recurring schedule for this action, in Unix cron syntax format. This format consists of five fields separated by white spaces: [Minute] [Hour] [Day_of_Month] [Month_of_Year] [Day_of_Week]. The value must be in quotes (for example, <code>"30 0 1 1,6,12 *"</code>). For more information about this format, see <a href="http://crontab.org">Crontab</a>.</p> <p>When <code>StartTime</code> and <code>EndTime</code> are specified with <code>Recurrence</code>, they form the boundaries of when the recurring action starts and stops.</p>
  ##   MaxSize: int
  ##          : The maximum number of instances in the Auto Scaling group.
  ##   ScheduledActionName: string (required)
  ##                      : The name of this scaling action.
  ##   DesiredCapacity: int
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   StartTime: string
  ##            : <p>The date and time for this action to start, in YYYY-MM-DDThh:mm:ssZ format in UTC/GMT only and in quotes (for example, <code>"2019-06-01T00:00:00Z"</code>).</p> <p>If you specify <code>Recurrence</code> and <code>StartTime</code>, Amazon EC2 Auto Scaling performs the action at this time, and then performs the action based on the specified recurrence.</p> <p>If you try to schedule your action in the past, Amazon EC2 Auto Scaling returns an error message.</p>
  ##   MinSize: int
  ##          : The minimum number of instances in the Auto Scaling group.
  ##   EndTime: string
  ##          : The date and time for the recurring schedule to end. Amazon EC2 Auto Scaling does not perform the action after this time.
  ##   Version: string (required)
  ##   Time: string
  ##       : This parameter is no longer used.
  var query_614976 = newJObject()
  add(query_614976, "Recurrence", newJString(Recurrence))
  add(query_614976, "MaxSize", newJInt(MaxSize))
  add(query_614976, "ScheduledActionName", newJString(ScheduledActionName))
  add(query_614976, "DesiredCapacity", newJInt(DesiredCapacity))
  add(query_614976, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_614976, "Action", newJString(Action))
  add(query_614976, "StartTime", newJString(StartTime))
  add(query_614976, "MinSize", newJInt(MinSize))
  add(query_614976, "EndTime", newJString(EndTime))
  add(query_614976, "Version", newJString(Version))
  add(query_614976, "Time", newJString(Time))
  result = call_614975.call(nil, query_614976, nil, nil, nil)

var getPutScheduledUpdateGroupAction* = Call_GetPutScheduledUpdateGroupAction_614953(
    name: "getPutScheduledUpdateGroupAction", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=PutScheduledUpdateGroupAction",
    validator: validate_GetPutScheduledUpdateGroupAction_614954, base: "/",
    url: url_GetPutScheduledUpdateGroupAction_614955,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRecordLifecycleActionHeartbeat_615021 = ref object of OpenApiRestCall_612658
proc url_PostRecordLifecycleActionHeartbeat_615023(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRecordLifecycleActionHeartbeat_615022(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using <a>PutLifecycleHook</a>.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p> <b>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</b> </p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html">Auto Scaling Lifecycle</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615024 = query.getOrDefault("Action")
  valid_615024 = validateParameter(valid_615024, JString, required = true, default = newJString(
      "RecordLifecycleActionHeartbeat"))
  if valid_615024 != nil:
    section.add "Action", valid_615024
  var valid_615025 = query.getOrDefault("Version")
  valid_615025 = validateParameter(valid_615025, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_615025 != nil:
    section.add "Version", valid_615025
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615026 = header.getOrDefault("X-Amz-Signature")
  valid_615026 = validateParameter(valid_615026, JString, required = false,
                                 default = nil)
  if valid_615026 != nil:
    section.add "X-Amz-Signature", valid_615026
  var valid_615027 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615027 = validateParameter(valid_615027, JString, required = false,
                                 default = nil)
  if valid_615027 != nil:
    section.add "X-Amz-Content-Sha256", valid_615027
  var valid_615028 = header.getOrDefault("X-Amz-Date")
  valid_615028 = validateParameter(valid_615028, JString, required = false,
                                 default = nil)
  if valid_615028 != nil:
    section.add "X-Amz-Date", valid_615028
  var valid_615029 = header.getOrDefault("X-Amz-Credential")
  valid_615029 = validateParameter(valid_615029, JString, required = false,
                                 default = nil)
  if valid_615029 != nil:
    section.add "X-Amz-Credential", valid_615029
  var valid_615030 = header.getOrDefault("X-Amz-Security-Token")
  valid_615030 = validateParameter(valid_615030, JString, required = false,
                                 default = nil)
  if valid_615030 != nil:
    section.add "X-Amz-Security-Token", valid_615030
  var valid_615031 = header.getOrDefault("X-Amz-Algorithm")
  valid_615031 = validateParameter(valid_615031, JString, required = false,
                                 default = nil)
  if valid_615031 != nil:
    section.add "X-Amz-Algorithm", valid_615031
  var valid_615032 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615032 = validateParameter(valid_615032, JString, required = false,
                                 default = nil)
  if valid_615032 != nil:
    section.add "X-Amz-SignedHeaders", valid_615032
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   LifecycleActionToken: JString
  ##                       : A token that uniquely identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target that you specified when you created the lifecycle hook.
  ##   InstanceId: JString
  ##             : The ID of the instance.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_615033 = formData.getOrDefault("AutoScalingGroupName")
  valid_615033 = validateParameter(valid_615033, JString, required = true,
                                 default = nil)
  if valid_615033 != nil:
    section.add "AutoScalingGroupName", valid_615033
  var valid_615034 = formData.getOrDefault("LifecycleHookName")
  valid_615034 = validateParameter(valid_615034, JString, required = true,
                                 default = nil)
  if valid_615034 != nil:
    section.add "LifecycleHookName", valid_615034
  var valid_615035 = formData.getOrDefault("LifecycleActionToken")
  valid_615035 = validateParameter(valid_615035, JString, required = false,
                                 default = nil)
  if valid_615035 != nil:
    section.add "LifecycleActionToken", valid_615035
  var valid_615036 = formData.getOrDefault("InstanceId")
  valid_615036 = validateParameter(valid_615036, JString, required = false,
                                 default = nil)
  if valid_615036 != nil:
    section.add "InstanceId", valid_615036
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615037: Call_PostRecordLifecycleActionHeartbeat_615021;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using <a>PutLifecycleHook</a>.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p> <b>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</b> </p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html">Auto Scaling Lifecycle</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_615037.validator(path, query, header, formData, body)
  let scheme = call_615037.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615037.url(scheme.get, call_615037.host, call_615037.base,
                         call_615037.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615037, url, valid)

proc call*(call_615038: Call_PostRecordLifecycleActionHeartbeat_615021;
          AutoScalingGroupName: string; LifecycleHookName: string;
          LifecycleActionToken: string = ""; InstanceId: string = "";
          Action: string = "RecordLifecycleActionHeartbeat";
          Version: string = "2011-01-01"): Recallable =
  ## postRecordLifecycleActionHeartbeat
  ## <p>Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using <a>PutLifecycleHook</a>.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p> <b>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</b> </p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html">Auto Scaling Lifecycle</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   LifecycleActionToken: string
  ##                       : A token that uniquely identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target that you specified when you created the lifecycle hook.
  ##   InstanceId: string
  ##             : The ID of the instance.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615039 = newJObject()
  var formData_615040 = newJObject()
  add(formData_615040, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_615040, "LifecycleHookName", newJString(LifecycleHookName))
  add(formData_615040, "LifecycleActionToken", newJString(LifecycleActionToken))
  add(formData_615040, "InstanceId", newJString(InstanceId))
  add(query_615039, "Action", newJString(Action))
  add(query_615039, "Version", newJString(Version))
  result = call_615038.call(nil, query_615039, nil, formData_615040, nil)

var postRecordLifecycleActionHeartbeat* = Call_PostRecordLifecycleActionHeartbeat_615021(
    name: "postRecordLifecycleActionHeartbeat", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=RecordLifecycleActionHeartbeat",
    validator: validate_PostRecordLifecycleActionHeartbeat_615022, base: "/",
    url: url_PostRecordLifecycleActionHeartbeat_615023,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRecordLifecycleActionHeartbeat_615002 = ref object of OpenApiRestCall_612658
proc url_GetRecordLifecycleActionHeartbeat_615004(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRecordLifecycleActionHeartbeat_615003(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using <a>PutLifecycleHook</a>.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p> <b>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</b> </p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html">Auto Scaling Lifecycle</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   InstanceId: JString
  ##             : The ID of the instance.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   Action: JString (required)
  ##   LifecycleActionToken: JString
  ##                       : A token that uniquely identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target that you specified when you created the lifecycle hook.
  ##   Version: JString (required)
  section = newJObject()
  var valid_615005 = query.getOrDefault("InstanceId")
  valid_615005 = validateParameter(valid_615005, JString, required = false,
                                 default = nil)
  if valid_615005 != nil:
    section.add "InstanceId", valid_615005
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_615006 = query.getOrDefault("AutoScalingGroupName")
  valid_615006 = validateParameter(valid_615006, JString, required = true,
                                 default = nil)
  if valid_615006 != nil:
    section.add "AutoScalingGroupName", valid_615006
  var valid_615007 = query.getOrDefault("LifecycleHookName")
  valid_615007 = validateParameter(valid_615007, JString, required = true,
                                 default = nil)
  if valid_615007 != nil:
    section.add "LifecycleHookName", valid_615007
  var valid_615008 = query.getOrDefault("Action")
  valid_615008 = validateParameter(valid_615008, JString, required = true, default = newJString(
      "RecordLifecycleActionHeartbeat"))
  if valid_615008 != nil:
    section.add "Action", valid_615008
  var valid_615009 = query.getOrDefault("LifecycleActionToken")
  valid_615009 = validateParameter(valid_615009, JString, required = false,
                                 default = nil)
  if valid_615009 != nil:
    section.add "LifecycleActionToken", valid_615009
  var valid_615010 = query.getOrDefault("Version")
  valid_615010 = validateParameter(valid_615010, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_615010 != nil:
    section.add "Version", valid_615010
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615011 = header.getOrDefault("X-Amz-Signature")
  valid_615011 = validateParameter(valid_615011, JString, required = false,
                                 default = nil)
  if valid_615011 != nil:
    section.add "X-Amz-Signature", valid_615011
  var valid_615012 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615012 = validateParameter(valid_615012, JString, required = false,
                                 default = nil)
  if valid_615012 != nil:
    section.add "X-Amz-Content-Sha256", valid_615012
  var valid_615013 = header.getOrDefault("X-Amz-Date")
  valid_615013 = validateParameter(valid_615013, JString, required = false,
                                 default = nil)
  if valid_615013 != nil:
    section.add "X-Amz-Date", valid_615013
  var valid_615014 = header.getOrDefault("X-Amz-Credential")
  valid_615014 = validateParameter(valid_615014, JString, required = false,
                                 default = nil)
  if valid_615014 != nil:
    section.add "X-Amz-Credential", valid_615014
  var valid_615015 = header.getOrDefault("X-Amz-Security-Token")
  valid_615015 = validateParameter(valid_615015, JString, required = false,
                                 default = nil)
  if valid_615015 != nil:
    section.add "X-Amz-Security-Token", valid_615015
  var valid_615016 = header.getOrDefault("X-Amz-Algorithm")
  valid_615016 = validateParameter(valid_615016, JString, required = false,
                                 default = nil)
  if valid_615016 != nil:
    section.add "X-Amz-Algorithm", valid_615016
  var valid_615017 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615017 = validateParameter(valid_615017, JString, required = false,
                                 default = nil)
  if valid_615017 != nil:
    section.add "X-Amz-SignedHeaders", valid_615017
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615018: Call_GetRecordLifecycleActionHeartbeat_615002;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using <a>PutLifecycleHook</a>.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p> <b>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</b> </p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html">Auto Scaling Lifecycle</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_615018.validator(path, query, header, formData, body)
  let scheme = call_615018.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615018.url(scheme.get, call_615018.host, call_615018.base,
                         call_615018.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615018, url, valid)

proc call*(call_615019: Call_GetRecordLifecycleActionHeartbeat_615002;
          AutoScalingGroupName: string; LifecycleHookName: string;
          InstanceId: string = "";
          Action: string = "RecordLifecycleActionHeartbeat";
          LifecycleActionToken: string = ""; Version: string = "2011-01-01"): Recallable =
  ## getRecordLifecycleActionHeartbeat
  ## <p>Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using <a>PutLifecycleHook</a>.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p> <b>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</b> </p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html">Auto Scaling Lifecycle</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   InstanceId: string
  ##             : The ID of the instance.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   Action: string (required)
  ##   LifecycleActionToken: string
  ##                       : A token that uniquely identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target that you specified when you created the lifecycle hook.
  ##   Version: string (required)
  var query_615020 = newJObject()
  add(query_615020, "InstanceId", newJString(InstanceId))
  add(query_615020, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_615020, "LifecycleHookName", newJString(LifecycleHookName))
  add(query_615020, "Action", newJString(Action))
  add(query_615020, "LifecycleActionToken", newJString(LifecycleActionToken))
  add(query_615020, "Version", newJString(Version))
  result = call_615019.call(nil, query_615020, nil, nil, nil)

var getRecordLifecycleActionHeartbeat* = Call_GetRecordLifecycleActionHeartbeat_615002(
    name: "getRecordLifecycleActionHeartbeat", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=RecordLifecycleActionHeartbeat",
    validator: validate_GetRecordLifecycleActionHeartbeat_615003, base: "/",
    url: url_GetRecordLifecycleActionHeartbeat_615004,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResumeProcesses_615058 = ref object of OpenApiRestCall_612658
proc url_PostResumeProcesses_615060(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostResumeProcesses_615059(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Resumes the specified suspended automatic scaling processes, or all suspended process, for the specified Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615061 = query.getOrDefault("Action")
  valid_615061 = validateParameter(valid_615061, JString, required = true,
                                 default = newJString("ResumeProcesses"))
  if valid_615061 != nil:
    section.add "Action", valid_615061
  var valid_615062 = query.getOrDefault("Version")
  valid_615062 = validateParameter(valid_615062, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_615062 != nil:
    section.add "Version", valid_615062
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615063 = header.getOrDefault("X-Amz-Signature")
  valid_615063 = validateParameter(valid_615063, JString, required = false,
                                 default = nil)
  if valid_615063 != nil:
    section.add "X-Amz-Signature", valid_615063
  var valid_615064 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615064 = validateParameter(valid_615064, JString, required = false,
                                 default = nil)
  if valid_615064 != nil:
    section.add "X-Amz-Content-Sha256", valid_615064
  var valid_615065 = header.getOrDefault("X-Amz-Date")
  valid_615065 = validateParameter(valid_615065, JString, required = false,
                                 default = nil)
  if valid_615065 != nil:
    section.add "X-Amz-Date", valid_615065
  var valid_615066 = header.getOrDefault("X-Amz-Credential")
  valid_615066 = validateParameter(valid_615066, JString, required = false,
                                 default = nil)
  if valid_615066 != nil:
    section.add "X-Amz-Credential", valid_615066
  var valid_615067 = header.getOrDefault("X-Amz-Security-Token")
  valid_615067 = validateParameter(valid_615067, JString, required = false,
                                 default = nil)
  if valid_615067 != nil:
    section.add "X-Amz-Security-Token", valid_615067
  var valid_615068 = header.getOrDefault("X-Amz-Algorithm")
  valid_615068 = validateParameter(valid_615068, JString, required = false,
                                 default = nil)
  if valid_615068 != nil:
    section.add "X-Amz-Algorithm", valid_615068
  var valid_615069 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615069 = validateParameter(valid_615069, JString, required = false,
                                 default = nil)
  if valid_615069 != nil:
    section.add "X-Amz-SignedHeaders", valid_615069
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_615070 = formData.getOrDefault("AutoScalingGroupName")
  valid_615070 = validateParameter(valid_615070, JString, required = true,
                                 default = nil)
  if valid_615070 != nil:
    section.add "AutoScalingGroupName", valid_615070
  var valid_615071 = formData.getOrDefault("ScalingProcesses")
  valid_615071 = validateParameter(valid_615071, JArray, required = false,
                                 default = nil)
  if valid_615071 != nil:
    section.add "ScalingProcesses", valid_615071
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615072: Call_PostResumeProcesses_615058; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Resumes the specified suspended automatic scaling processes, or all suspended process, for the specified Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_615072.validator(path, query, header, formData, body)
  let scheme = call_615072.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615072.url(scheme.get, call_615072.host, call_615072.base,
                         call_615072.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615072, url, valid)

proc call*(call_615073: Call_PostResumeProcesses_615058;
          AutoScalingGroupName: string; Action: string = "ResumeProcesses";
          ScalingProcesses: JsonNode = nil; Version: string = "2011-01-01"): Recallable =
  ## postResumeProcesses
  ## <p>Resumes the specified suspended automatic scaling processes, or all suspended process, for the specified Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  ##   Version: string (required)
  var query_615074 = newJObject()
  var formData_615075 = newJObject()
  add(formData_615075, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_615074, "Action", newJString(Action))
  if ScalingProcesses != nil:
    formData_615075.add "ScalingProcesses", ScalingProcesses
  add(query_615074, "Version", newJString(Version))
  result = call_615073.call(nil, query_615074, nil, formData_615075, nil)

var postResumeProcesses* = Call_PostResumeProcesses_615058(
    name: "postResumeProcesses", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=ResumeProcesses",
    validator: validate_PostResumeProcesses_615059, base: "/",
    url: url_PostResumeProcesses_615060, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResumeProcesses_615041 = ref object of OpenApiRestCall_612658
proc url_GetResumeProcesses_615043(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetResumeProcesses_615042(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Resumes the specified suspended automatic scaling processes, or all suspended process, for the specified Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615044 = query.getOrDefault("ScalingProcesses")
  valid_615044 = validateParameter(valid_615044, JArray, required = false,
                                 default = nil)
  if valid_615044 != nil:
    section.add "ScalingProcesses", valid_615044
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_615045 = query.getOrDefault("AutoScalingGroupName")
  valid_615045 = validateParameter(valid_615045, JString, required = true,
                                 default = nil)
  if valid_615045 != nil:
    section.add "AutoScalingGroupName", valid_615045
  var valid_615046 = query.getOrDefault("Action")
  valid_615046 = validateParameter(valid_615046, JString, required = true,
                                 default = newJString("ResumeProcesses"))
  if valid_615046 != nil:
    section.add "Action", valid_615046
  var valid_615047 = query.getOrDefault("Version")
  valid_615047 = validateParameter(valid_615047, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_615047 != nil:
    section.add "Version", valid_615047
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615048 = header.getOrDefault("X-Amz-Signature")
  valid_615048 = validateParameter(valid_615048, JString, required = false,
                                 default = nil)
  if valid_615048 != nil:
    section.add "X-Amz-Signature", valid_615048
  var valid_615049 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615049 = validateParameter(valid_615049, JString, required = false,
                                 default = nil)
  if valid_615049 != nil:
    section.add "X-Amz-Content-Sha256", valid_615049
  var valid_615050 = header.getOrDefault("X-Amz-Date")
  valid_615050 = validateParameter(valid_615050, JString, required = false,
                                 default = nil)
  if valid_615050 != nil:
    section.add "X-Amz-Date", valid_615050
  var valid_615051 = header.getOrDefault("X-Amz-Credential")
  valid_615051 = validateParameter(valid_615051, JString, required = false,
                                 default = nil)
  if valid_615051 != nil:
    section.add "X-Amz-Credential", valid_615051
  var valid_615052 = header.getOrDefault("X-Amz-Security-Token")
  valid_615052 = validateParameter(valid_615052, JString, required = false,
                                 default = nil)
  if valid_615052 != nil:
    section.add "X-Amz-Security-Token", valid_615052
  var valid_615053 = header.getOrDefault("X-Amz-Algorithm")
  valid_615053 = validateParameter(valid_615053, JString, required = false,
                                 default = nil)
  if valid_615053 != nil:
    section.add "X-Amz-Algorithm", valid_615053
  var valid_615054 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615054 = validateParameter(valid_615054, JString, required = false,
                                 default = nil)
  if valid_615054 != nil:
    section.add "X-Amz-SignedHeaders", valid_615054
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615055: Call_GetResumeProcesses_615041; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Resumes the specified suspended automatic scaling processes, or all suspended process, for the specified Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_615055.validator(path, query, header, formData, body)
  let scheme = call_615055.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615055.url(scheme.get, call_615055.host, call_615055.base,
                         call_615055.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615055, url, valid)

proc call*(call_615056: Call_GetResumeProcesses_615041;
          AutoScalingGroupName: string; ScalingProcesses: JsonNode = nil;
          Action: string = "ResumeProcesses"; Version: string = "2011-01-01"): Recallable =
  ## getResumeProcesses
  ## <p>Resumes the specified suspended automatic scaling processes, or all suspended process, for the specified Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615057 = newJObject()
  if ScalingProcesses != nil:
    query_615057.add "ScalingProcesses", ScalingProcesses
  add(query_615057, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_615057, "Action", newJString(Action))
  add(query_615057, "Version", newJString(Version))
  result = call_615056.call(nil, query_615057, nil, nil, nil)

var getResumeProcesses* = Call_GetResumeProcesses_615041(
    name: "getResumeProcesses", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=ResumeProcesses",
    validator: validate_GetResumeProcesses_615042, base: "/",
    url: url_GetResumeProcesses_615043, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetDesiredCapacity_615094 = ref object of OpenApiRestCall_612658
proc url_PostSetDesiredCapacity_615096(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSetDesiredCapacity_615095(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the size of the specified Auto Scaling group.</p> <p>For more information about desired capacity, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">What Is Amazon EC2 Auto Scaling?</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615097 = query.getOrDefault("Action")
  valid_615097 = validateParameter(valid_615097, JString, required = true,
                                 default = newJString("SetDesiredCapacity"))
  if valid_615097 != nil:
    section.add "Action", valid_615097
  var valid_615098 = query.getOrDefault("Version")
  valid_615098 = validateParameter(valid_615098, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_615098 != nil:
    section.add "Version", valid_615098
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615099 = header.getOrDefault("X-Amz-Signature")
  valid_615099 = validateParameter(valid_615099, JString, required = false,
                                 default = nil)
  if valid_615099 != nil:
    section.add "X-Amz-Signature", valid_615099
  var valid_615100 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615100 = validateParameter(valid_615100, JString, required = false,
                                 default = nil)
  if valid_615100 != nil:
    section.add "X-Amz-Content-Sha256", valid_615100
  var valid_615101 = header.getOrDefault("X-Amz-Date")
  valid_615101 = validateParameter(valid_615101, JString, required = false,
                                 default = nil)
  if valid_615101 != nil:
    section.add "X-Amz-Date", valid_615101
  var valid_615102 = header.getOrDefault("X-Amz-Credential")
  valid_615102 = validateParameter(valid_615102, JString, required = false,
                                 default = nil)
  if valid_615102 != nil:
    section.add "X-Amz-Credential", valid_615102
  var valid_615103 = header.getOrDefault("X-Amz-Security-Token")
  valid_615103 = validateParameter(valid_615103, JString, required = false,
                                 default = nil)
  if valid_615103 != nil:
    section.add "X-Amz-Security-Token", valid_615103
  var valid_615104 = header.getOrDefault("X-Amz-Algorithm")
  valid_615104 = validateParameter(valid_615104, JString, required = false,
                                 default = nil)
  if valid_615104 != nil:
    section.add "X-Amz-Algorithm", valid_615104
  var valid_615105 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615105 = validateParameter(valid_615105, JString, required = false,
                                 default = nil)
  if valid_615105 != nil:
    section.add "X-Amz-SignedHeaders", valid_615105
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   DesiredCapacity: JInt (required)
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   HonorCooldown: JBool
  ##                : Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before initiating a scaling activity to set your Auto Scaling group to its new capacity. By default, Amazon EC2 Auto Scaling does not honor the cooldown period during manual scaling activities.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_615106 = formData.getOrDefault("AutoScalingGroupName")
  valid_615106 = validateParameter(valid_615106, JString, required = true,
                                 default = nil)
  if valid_615106 != nil:
    section.add "AutoScalingGroupName", valid_615106
  var valid_615107 = formData.getOrDefault("DesiredCapacity")
  valid_615107 = validateParameter(valid_615107, JInt, required = true, default = nil)
  if valid_615107 != nil:
    section.add "DesiredCapacity", valid_615107
  var valid_615108 = formData.getOrDefault("HonorCooldown")
  valid_615108 = validateParameter(valid_615108, JBool, required = false, default = nil)
  if valid_615108 != nil:
    section.add "HonorCooldown", valid_615108
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615109: Call_PostSetDesiredCapacity_615094; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the size of the specified Auto Scaling group.</p> <p>For more information about desired capacity, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">What Is Amazon EC2 Auto Scaling?</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_615109.validator(path, query, header, formData, body)
  let scheme = call_615109.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615109.url(scheme.get, call_615109.host, call_615109.base,
                         call_615109.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615109, url, valid)

proc call*(call_615110: Call_PostSetDesiredCapacity_615094;
          AutoScalingGroupName: string; DesiredCapacity: int;
          HonorCooldown: bool = false; Action: string = "SetDesiredCapacity";
          Version: string = "2011-01-01"): Recallable =
  ## postSetDesiredCapacity
  ## <p>Sets the size of the specified Auto Scaling group.</p> <p>For more information about desired capacity, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">What Is Amazon EC2 Auto Scaling?</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   DesiredCapacity: int (required)
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   HonorCooldown: bool
  ##                : Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before initiating a scaling activity to set your Auto Scaling group to its new capacity. By default, Amazon EC2 Auto Scaling does not honor the cooldown period during manual scaling activities.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615111 = newJObject()
  var formData_615112 = newJObject()
  add(formData_615112, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_615112, "DesiredCapacity", newJInt(DesiredCapacity))
  add(formData_615112, "HonorCooldown", newJBool(HonorCooldown))
  add(query_615111, "Action", newJString(Action))
  add(query_615111, "Version", newJString(Version))
  result = call_615110.call(nil, query_615111, nil, formData_615112, nil)

var postSetDesiredCapacity* = Call_PostSetDesiredCapacity_615094(
    name: "postSetDesiredCapacity", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=SetDesiredCapacity",
    validator: validate_PostSetDesiredCapacity_615095, base: "/",
    url: url_PostSetDesiredCapacity_615096, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetDesiredCapacity_615076 = ref object of OpenApiRestCall_612658
proc url_GetSetDesiredCapacity_615078(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSetDesiredCapacity_615077(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the size of the specified Auto Scaling group.</p> <p>For more information about desired capacity, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">What Is Amazon EC2 Auto Scaling?</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DesiredCapacity: JInt (required)
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   HonorCooldown: JBool
  ##                : Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before initiating a scaling activity to set your Auto Scaling group to its new capacity. By default, Amazon EC2 Auto Scaling does not honor the cooldown period during manual scaling activities.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `DesiredCapacity` field"
  var valid_615079 = query.getOrDefault("DesiredCapacity")
  valid_615079 = validateParameter(valid_615079, JInt, required = true, default = nil)
  if valid_615079 != nil:
    section.add "DesiredCapacity", valid_615079
  var valid_615080 = query.getOrDefault("AutoScalingGroupName")
  valid_615080 = validateParameter(valid_615080, JString, required = true,
                                 default = nil)
  if valid_615080 != nil:
    section.add "AutoScalingGroupName", valid_615080
  var valid_615081 = query.getOrDefault("Action")
  valid_615081 = validateParameter(valid_615081, JString, required = true,
                                 default = newJString("SetDesiredCapacity"))
  if valid_615081 != nil:
    section.add "Action", valid_615081
  var valid_615082 = query.getOrDefault("HonorCooldown")
  valid_615082 = validateParameter(valid_615082, JBool, required = false, default = nil)
  if valid_615082 != nil:
    section.add "HonorCooldown", valid_615082
  var valid_615083 = query.getOrDefault("Version")
  valid_615083 = validateParameter(valid_615083, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_615083 != nil:
    section.add "Version", valid_615083
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615084 = header.getOrDefault("X-Amz-Signature")
  valid_615084 = validateParameter(valid_615084, JString, required = false,
                                 default = nil)
  if valid_615084 != nil:
    section.add "X-Amz-Signature", valid_615084
  var valid_615085 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615085 = validateParameter(valid_615085, JString, required = false,
                                 default = nil)
  if valid_615085 != nil:
    section.add "X-Amz-Content-Sha256", valid_615085
  var valid_615086 = header.getOrDefault("X-Amz-Date")
  valid_615086 = validateParameter(valid_615086, JString, required = false,
                                 default = nil)
  if valid_615086 != nil:
    section.add "X-Amz-Date", valid_615086
  var valid_615087 = header.getOrDefault("X-Amz-Credential")
  valid_615087 = validateParameter(valid_615087, JString, required = false,
                                 default = nil)
  if valid_615087 != nil:
    section.add "X-Amz-Credential", valid_615087
  var valid_615088 = header.getOrDefault("X-Amz-Security-Token")
  valid_615088 = validateParameter(valid_615088, JString, required = false,
                                 default = nil)
  if valid_615088 != nil:
    section.add "X-Amz-Security-Token", valid_615088
  var valid_615089 = header.getOrDefault("X-Amz-Algorithm")
  valid_615089 = validateParameter(valid_615089, JString, required = false,
                                 default = nil)
  if valid_615089 != nil:
    section.add "X-Amz-Algorithm", valid_615089
  var valid_615090 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615090 = validateParameter(valid_615090, JString, required = false,
                                 default = nil)
  if valid_615090 != nil:
    section.add "X-Amz-SignedHeaders", valid_615090
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615091: Call_GetSetDesiredCapacity_615076; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the size of the specified Auto Scaling group.</p> <p>For more information about desired capacity, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">What Is Amazon EC2 Auto Scaling?</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_615091.validator(path, query, header, formData, body)
  let scheme = call_615091.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615091.url(scheme.get, call_615091.host, call_615091.base,
                         call_615091.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615091, url, valid)

proc call*(call_615092: Call_GetSetDesiredCapacity_615076; DesiredCapacity: int;
          AutoScalingGroupName: string; Action: string = "SetDesiredCapacity";
          HonorCooldown: bool = false; Version: string = "2011-01-01"): Recallable =
  ## getSetDesiredCapacity
  ## <p>Sets the size of the specified Auto Scaling group.</p> <p>For more information about desired capacity, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">What Is Amazon EC2 Auto Scaling?</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   DesiredCapacity: int (required)
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   HonorCooldown: bool
  ##                : Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before initiating a scaling activity to set your Auto Scaling group to its new capacity. By default, Amazon EC2 Auto Scaling does not honor the cooldown period during manual scaling activities.
  ##   Version: string (required)
  var query_615093 = newJObject()
  add(query_615093, "DesiredCapacity", newJInt(DesiredCapacity))
  add(query_615093, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_615093, "Action", newJString(Action))
  add(query_615093, "HonorCooldown", newJBool(HonorCooldown))
  add(query_615093, "Version", newJString(Version))
  result = call_615092.call(nil, query_615093, nil, nil, nil)

var getSetDesiredCapacity* = Call_GetSetDesiredCapacity_615076(
    name: "getSetDesiredCapacity", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=SetDesiredCapacity",
    validator: validate_GetSetDesiredCapacity_615077, base: "/",
    url: url_GetSetDesiredCapacity_615078, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetInstanceHealth_615131 = ref object of OpenApiRestCall_612658
proc url_PostSetInstanceHealth_615133(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSetInstanceHealth_615132(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the health status of the specified instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615134 = query.getOrDefault("Action")
  valid_615134 = validateParameter(valid_615134, JString, required = true,
                                 default = newJString("SetInstanceHealth"))
  if valid_615134 != nil:
    section.add "Action", valid_615134
  var valid_615135 = query.getOrDefault("Version")
  valid_615135 = validateParameter(valid_615135, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_615135 != nil:
    section.add "Version", valid_615135
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615136 = header.getOrDefault("X-Amz-Signature")
  valid_615136 = validateParameter(valid_615136, JString, required = false,
                                 default = nil)
  if valid_615136 != nil:
    section.add "X-Amz-Signature", valid_615136
  var valid_615137 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615137 = validateParameter(valid_615137, JString, required = false,
                                 default = nil)
  if valid_615137 != nil:
    section.add "X-Amz-Content-Sha256", valid_615137
  var valid_615138 = header.getOrDefault("X-Amz-Date")
  valid_615138 = validateParameter(valid_615138, JString, required = false,
                                 default = nil)
  if valid_615138 != nil:
    section.add "X-Amz-Date", valid_615138
  var valid_615139 = header.getOrDefault("X-Amz-Credential")
  valid_615139 = validateParameter(valid_615139, JString, required = false,
                                 default = nil)
  if valid_615139 != nil:
    section.add "X-Amz-Credential", valid_615139
  var valid_615140 = header.getOrDefault("X-Amz-Security-Token")
  valid_615140 = validateParameter(valid_615140, JString, required = false,
                                 default = nil)
  if valid_615140 != nil:
    section.add "X-Amz-Security-Token", valid_615140
  var valid_615141 = header.getOrDefault("X-Amz-Algorithm")
  valid_615141 = validateParameter(valid_615141, JString, required = false,
                                 default = nil)
  if valid_615141 != nil:
    section.add "X-Amz-Algorithm", valid_615141
  var valid_615142 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615142 = validateParameter(valid_615142, JString, required = false,
                                 default = nil)
  if valid_615142 != nil:
    section.add "X-Amz-SignedHeaders", valid_615142
  result.add "header", section
  ## parameters in `formData` object:
  ##   ShouldRespectGracePeriod: JBool
  ##                           : <p>If the Auto Scaling group of the specified instance has a <code>HealthCheckGracePeriod</code> specified for the group, by default, this call respects the grace period. Set this to <code>False</code>, to have the call not respect the grace period associated with the group.</p> <p>For more information about the health check grace period, see <a>CreateAutoScalingGroup</a>.</p>
  ##   HealthStatus: JString (required)
  ##               : The health status of the instance. Set to <code>Healthy</code> to have the instance remain in service. Set to <code>Unhealthy</code> to have the instance be out of service. Amazon EC2 Auto Scaling terminates and replaces the unhealthy instance.
  ##   InstanceId: JString (required)
  ##             : The ID of the instance.
  section = newJObject()
  var valid_615143 = formData.getOrDefault("ShouldRespectGracePeriod")
  valid_615143 = validateParameter(valid_615143, JBool, required = false, default = nil)
  if valid_615143 != nil:
    section.add "ShouldRespectGracePeriod", valid_615143
  assert formData != nil,
        "formData argument is necessary due to required `HealthStatus` field"
  var valid_615144 = formData.getOrDefault("HealthStatus")
  valid_615144 = validateParameter(valid_615144, JString, required = true,
                                 default = nil)
  if valid_615144 != nil:
    section.add "HealthStatus", valid_615144
  var valid_615145 = formData.getOrDefault("InstanceId")
  valid_615145 = validateParameter(valid_615145, JString, required = true,
                                 default = nil)
  if valid_615145 != nil:
    section.add "InstanceId", valid_615145
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615146: Call_PostSetInstanceHealth_615131; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the health status of the specified instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_615146.validator(path, query, header, formData, body)
  let scheme = call_615146.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615146.url(scheme.get, call_615146.host, call_615146.base,
                         call_615146.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615146, url, valid)

proc call*(call_615147: Call_PostSetInstanceHealth_615131; HealthStatus: string;
          InstanceId: string; ShouldRespectGracePeriod: bool = false;
          Action: string = "SetInstanceHealth"; Version: string = "2011-01-01"): Recallable =
  ## postSetInstanceHealth
  ## <p>Sets the health status of the specified instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   ShouldRespectGracePeriod: bool
  ##                           : <p>If the Auto Scaling group of the specified instance has a <code>HealthCheckGracePeriod</code> specified for the group, by default, this call respects the grace period. Set this to <code>False</code>, to have the call not respect the grace period associated with the group.</p> <p>For more information about the health check grace period, see <a>CreateAutoScalingGroup</a>.</p>
  ##   HealthStatus: string (required)
  ##               : The health status of the instance. Set to <code>Healthy</code> to have the instance remain in service. Set to <code>Unhealthy</code> to have the instance be out of service. Amazon EC2 Auto Scaling terminates and replaces the unhealthy instance.
  ##   InstanceId: string (required)
  ##             : The ID of the instance.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615148 = newJObject()
  var formData_615149 = newJObject()
  add(formData_615149, "ShouldRespectGracePeriod",
      newJBool(ShouldRespectGracePeriod))
  add(formData_615149, "HealthStatus", newJString(HealthStatus))
  add(formData_615149, "InstanceId", newJString(InstanceId))
  add(query_615148, "Action", newJString(Action))
  add(query_615148, "Version", newJString(Version))
  result = call_615147.call(nil, query_615148, nil, formData_615149, nil)

var postSetInstanceHealth* = Call_PostSetInstanceHealth_615131(
    name: "postSetInstanceHealth", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=SetInstanceHealth",
    validator: validate_PostSetInstanceHealth_615132, base: "/",
    url: url_PostSetInstanceHealth_615133, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetInstanceHealth_615113 = ref object of OpenApiRestCall_612658
proc url_GetSetInstanceHealth_615115(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSetInstanceHealth_615114(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the health status of the specified instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ShouldRespectGracePeriod: JBool
  ##                           : <p>If the Auto Scaling group of the specified instance has a <code>HealthCheckGracePeriod</code> specified for the group, by default, this call respects the grace period. Set this to <code>False</code>, to have the call not respect the grace period associated with the group.</p> <p>For more information about the health check grace period, see <a>CreateAutoScalingGroup</a>.</p>
  ##   InstanceId: JString (required)
  ##             : The ID of the instance.
  ##   HealthStatus: JString (required)
  ##               : The health status of the instance. Set to <code>Healthy</code> to have the instance remain in service. Set to <code>Unhealthy</code> to have the instance be out of service. Amazon EC2 Auto Scaling terminates and replaces the unhealthy instance.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615116 = query.getOrDefault("ShouldRespectGracePeriod")
  valid_615116 = validateParameter(valid_615116, JBool, required = false, default = nil)
  if valid_615116 != nil:
    section.add "ShouldRespectGracePeriod", valid_615116
  assert query != nil,
        "query argument is necessary due to required `InstanceId` field"
  var valid_615117 = query.getOrDefault("InstanceId")
  valid_615117 = validateParameter(valid_615117, JString, required = true,
                                 default = nil)
  if valid_615117 != nil:
    section.add "InstanceId", valid_615117
  var valid_615118 = query.getOrDefault("HealthStatus")
  valid_615118 = validateParameter(valid_615118, JString, required = true,
                                 default = nil)
  if valid_615118 != nil:
    section.add "HealthStatus", valid_615118
  var valid_615119 = query.getOrDefault("Action")
  valid_615119 = validateParameter(valid_615119, JString, required = true,
                                 default = newJString("SetInstanceHealth"))
  if valid_615119 != nil:
    section.add "Action", valid_615119
  var valid_615120 = query.getOrDefault("Version")
  valid_615120 = validateParameter(valid_615120, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_615120 != nil:
    section.add "Version", valid_615120
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615121 = header.getOrDefault("X-Amz-Signature")
  valid_615121 = validateParameter(valid_615121, JString, required = false,
                                 default = nil)
  if valid_615121 != nil:
    section.add "X-Amz-Signature", valid_615121
  var valid_615122 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615122 = validateParameter(valid_615122, JString, required = false,
                                 default = nil)
  if valid_615122 != nil:
    section.add "X-Amz-Content-Sha256", valid_615122
  var valid_615123 = header.getOrDefault("X-Amz-Date")
  valid_615123 = validateParameter(valid_615123, JString, required = false,
                                 default = nil)
  if valid_615123 != nil:
    section.add "X-Amz-Date", valid_615123
  var valid_615124 = header.getOrDefault("X-Amz-Credential")
  valid_615124 = validateParameter(valid_615124, JString, required = false,
                                 default = nil)
  if valid_615124 != nil:
    section.add "X-Amz-Credential", valid_615124
  var valid_615125 = header.getOrDefault("X-Amz-Security-Token")
  valid_615125 = validateParameter(valid_615125, JString, required = false,
                                 default = nil)
  if valid_615125 != nil:
    section.add "X-Amz-Security-Token", valid_615125
  var valid_615126 = header.getOrDefault("X-Amz-Algorithm")
  valid_615126 = validateParameter(valid_615126, JString, required = false,
                                 default = nil)
  if valid_615126 != nil:
    section.add "X-Amz-Algorithm", valid_615126
  var valid_615127 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615127 = validateParameter(valid_615127, JString, required = false,
                                 default = nil)
  if valid_615127 != nil:
    section.add "X-Amz-SignedHeaders", valid_615127
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615128: Call_GetSetInstanceHealth_615113; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the health status of the specified instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_615128.validator(path, query, header, formData, body)
  let scheme = call_615128.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615128.url(scheme.get, call_615128.host, call_615128.base,
                         call_615128.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615128, url, valid)

proc call*(call_615129: Call_GetSetInstanceHealth_615113; InstanceId: string;
          HealthStatus: string; ShouldRespectGracePeriod: bool = false;
          Action: string = "SetInstanceHealth"; Version: string = "2011-01-01"): Recallable =
  ## getSetInstanceHealth
  ## <p>Sets the health status of the specified instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   ShouldRespectGracePeriod: bool
  ##                           : <p>If the Auto Scaling group of the specified instance has a <code>HealthCheckGracePeriod</code> specified for the group, by default, this call respects the grace period. Set this to <code>False</code>, to have the call not respect the grace period associated with the group.</p> <p>For more information about the health check grace period, see <a>CreateAutoScalingGroup</a>.</p>
  ##   InstanceId: string (required)
  ##             : The ID of the instance.
  ##   HealthStatus: string (required)
  ##               : The health status of the instance. Set to <code>Healthy</code> to have the instance remain in service. Set to <code>Unhealthy</code> to have the instance be out of service. Amazon EC2 Auto Scaling terminates and replaces the unhealthy instance.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615130 = newJObject()
  add(query_615130, "ShouldRespectGracePeriod", newJBool(ShouldRespectGracePeriod))
  add(query_615130, "InstanceId", newJString(InstanceId))
  add(query_615130, "HealthStatus", newJString(HealthStatus))
  add(query_615130, "Action", newJString(Action))
  add(query_615130, "Version", newJString(Version))
  result = call_615129.call(nil, query_615130, nil, nil, nil)

var getSetInstanceHealth* = Call_GetSetInstanceHealth_615113(
    name: "getSetInstanceHealth", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=SetInstanceHealth",
    validator: validate_GetSetInstanceHealth_615114, base: "/",
    url: url_GetSetInstanceHealth_615115, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetInstanceProtection_615168 = ref object of OpenApiRestCall_612658
proc url_PostSetInstanceProtection_615170(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSetInstanceProtection_615169(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the instance protection settings of the specified instances.</p> <p>For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615171 = query.getOrDefault("Action")
  valid_615171 = validateParameter(valid_615171, JString, required = true,
                                 default = newJString("SetInstanceProtection"))
  if valid_615171 != nil:
    section.add "Action", valid_615171
  var valid_615172 = query.getOrDefault("Version")
  valid_615172 = validateParameter(valid_615172, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_615172 != nil:
    section.add "Version", valid_615172
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615173 = header.getOrDefault("X-Amz-Signature")
  valid_615173 = validateParameter(valid_615173, JString, required = false,
                                 default = nil)
  if valid_615173 != nil:
    section.add "X-Amz-Signature", valid_615173
  var valid_615174 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615174 = validateParameter(valid_615174, JString, required = false,
                                 default = nil)
  if valid_615174 != nil:
    section.add "X-Amz-Content-Sha256", valid_615174
  var valid_615175 = header.getOrDefault("X-Amz-Date")
  valid_615175 = validateParameter(valid_615175, JString, required = false,
                                 default = nil)
  if valid_615175 != nil:
    section.add "X-Amz-Date", valid_615175
  var valid_615176 = header.getOrDefault("X-Amz-Credential")
  valid_615176 = validateParameter(valid_615176, JString, required = false,
                                 default = nil)
  if valid_615176 != nil:
    section.add "X-Amz-Credential", valid_615176
  var valid_615177 = header.getOrDefault("X-Amz-Security-Token")
  valid_615177 = validateParameter(valid_615177, JString, required = false,
                                 default = nil)
  if valid_615177 != nil:
    section.add "X-Amz-Security-Token", valid_615177
  var valid_615178 = header.getOrDefault("X-Amz-Algorithm")
  valid_615178 = validateParameter(valid_615178, JString, required = false,
                                 default = nil)
  if valid_615178 != nil:
    section.add "X-Amz-Algorithm", valid_615178
  var valid_615179 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615179 = validateParameter(valid_615179, JString, required = false,
                                 default = nil)
  if valid_615179 != nil:
    section.add "X-Amz-SignedHeaders", valid_615179
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   ProtectedFromScaleIn: JBool (required)
  ##                       : Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling in.
  ##   InstanceIds: JArray (required)
  ##              : One or more instance IDs.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_615180 = formData.getOrDefault("AutoScalingGroupName")
  valid_615180 = validateParameter(valid_615180, JString, required = true,
                                 default = nil)
  if valid_615180 != nil:
    section.add "AutoScalingGroupName", valid_615180
  var valid_615181 = formData.getOrDefault("ProtectedFromScaleIn")
  valid_615181 = validateParameter(valid_615181, JBool, required = true, default = nil)
  if valid_615181 != nil:
    section.add "ProtectedFromScaleIn", valid_615181
  var valid_615182 = formData.getOrDefault("InstanceIds")
  valid_615182 = validateParameter(valid_615182, JArray, required = true, default = nil)
  if valid_615182 != nil:
    section.add "InstanceIds", valid_615182
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615183: Call_PostSetInstanceProtection_615168; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the instance protection settings of the specified instances.</p> <p>For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_615183.validator(path, query, header, formData, body)
  let scheme = call_615183.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615183.url(scheme.get, call_615183.host, call_615183.base,
                         call_615183.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615183, url, valid)

proc call*(call_615184: Call_PostSetInstanceProtection_615168;
          AutoScalingGroupName: string; ProtectedFromScaleIn: bool;
          InstanceIds: JsonNode; Action: string = "SetInstanceProtection";
          Version: string = "2011-01-01"): Recallable =
  ## postSetInstanceProtection
  ## <p>Updates the instance protection settings of the specified instances.</p> <p>For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   ProtectedFromScaleIn: bool (required)
  ##                       : Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling in.
  ##   InstanceIds: JArray (required)
  ##              : One or more instance IDs.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615185 = newJObject()
  var formData_615186 = newJObject()
  add(formData_615186, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_615186, "ProtectedFromScaleIn", newJBool(ProtectedFromScaleIn))
  if InstanceIds != nil:
    formData_615186.add "InstanceIds", InstanceIds
  add(query_615185, "Action", newJString(Action))
  add(query_615185, "Version", newJString(Version))
  result = call_615184.call(nil, query_615185, nil, formData_615186, nil)

var postSetInstanceProtection* = Call_PostSetInstanceProtection_615168(
    name: "postSetInstanceProtection", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=SetInstanceProtection",
    validator: validate_PostSetInstanceProtection_615169, base: "/",
    url: url_PostSetInstanceProtection_615170,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetInstanceProtection_615150 = ref object of OpenApiRestCall_612658
proc url_GetSetInstanceProtection_615152(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSetInstanceProtection_615151(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the instance protection settings of the specified instances.</p> <p>For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   InstanceIds: JArray (required)
  ##              : One or more instance IDs.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   ProtectedFromScaleIn: JBool (required)
  ##                       : Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling in.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `InstanceIds` field"
  var valid_615153 = query.getOrDefault("InstanceIds")
  valid_615153 = validateParameter(valid_615153, JArray, required = true, default = nil)
  if valid_615153 != nil:
    section.add "InstanceIds", valid_615153
  var valid_615154 = query.getOrDefault("AutoScalingGroupName")
  valid_615154 = validateParameter(valid_615154, JString, required = true,
                                 default = nil)
  if valid_615154 != nil:
    section.add "AutoScalingGroupName", valid_615154
  var valid_615155 = query.getOrDefault("Action")
  valid_615155 = validateParameter(valid_615155, JString, required = true,
                                 default = newJString("SetInstanceProtection"))
  if valid_615155 != nil:
    section.add "Action", valid_615155
  var valid_615156 = query.getOrDefault("ProtectedFromScaleIn")
  valid_615156 = validateParameter(valid_615156, JBool, required = true, default = nil)
  if valid_615156 != nil:
    section.add "ProtectedFromScaleIn", valid_615156
  var valid_615157 = query.getOrDefault("Version")
  valid_615157 = validateParameter(valid_615157, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_615157 != nil:
    section.add "Version", valid_615157
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615158 = header.getOrDefault("X-Amz-Signature")
  valid_615158 = validateParameter(valid_615158, JString, required = false,
                                 default = nil)
  if valid_615158 != nil:
    section.add "X-Amz-Signature", valid_615158
  var valid_615159 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615159 = validateParameter(valid_615159, JString, required = false,
                                 default = nil)
  if valid_615159 != nil:
    section.add "X-Amz-Content-Sha256", valid_615159
  var valid_615160 = header.getOrDefault("X-Amz-Date")
  valid_615160 = validateParameter(valid_615160, JString, required = false,
                                 default = nil)
  if valid_615160 != nil:
    section.add "X-Amz-Date", valid_615160
  var valid_615161 = header.getOrDefault("X-Amz-Credential")
  valid_615161 = validateParameter(valid_615161, JString, required = false,
                                 default = nil)
  if valid_615161 != nil:
    section.add "X-Amz-Credential", valid_615161
  var valid_615162 = header.getOrDefault("X-Amz-Security-Token")
  valid_615162 = validateParameter(valid_615162, JString, required = false,
                                 default = nil)
  if valid_615162 != nil:
    section.add "X-Amz-Security-Token", valid_615162
  var valid_615163 = header.getOrDefault("X-Amz-Algorithm")
  valid_615163 = validateParameter(valid_615163, JString, required = false,
                                 default = nil)
  if valid_615163 != nil:
    section.add "X-Amz-Algorithm", valid_615163
  var valid_615164 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615164 = validateParameter(valid_615164, JString, required = false,
                                 default = nil)
  if valid_615164 != nil:
    section.add "X-Amz-SignedHeaders", valid_615164
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615165: Call_GetSetInstanceProtection_615150; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the instance protection settings of the specified instances.</p> <p>For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_615165.validator(path, query, header, formData, body)
  let scheme = call_615165.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615165.url(scheme.get, call_615165.host, call_615165.base,
                         call_615165.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615165, url, valid)

proc call*(call_615166: Call_GetSetInstanceProtection_615150;
          InstanceIds: JsonNode; AutoScalingGroupName: string;
          ProtectedFromScaleIn: bool; Action: string = "SetInstanceProtection";
          Version: string = "2011-01-01"): Recallable =
  ## getSetInstanceProtection
  ## <p>Updates the instance protection settings of the specified instances.</p> <p>For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   InstanceIds: JArray (required)
  ##              : One or more instance IDs.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   ProtectedFromScaleIn: bool (required)
  ##                       : Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling in.
  ##   Version: string (required)
  var query_615167 = newJObject()
  if InstanceIds != nil:
    query_615167.add "InstanceIds", InstanceIds
  add(query_615167, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_615167, "Action", newJString(Action))
  add(query_615167, "ProtectedFromScaleIn", newJBool(ProtectedFromScaleIn))
  add(query_615167, "Version", newJString(Version))
  result = call_615166.call(nil, query_615167, nil, nil, nil)

var getSetInstanceProtection* = Call_GetSetInstanceProtection_615150(
    name: "getSetInstanceProtection", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=SetInstanceProtection",
    validator: validate_GetSetInstanceProtection_615151, base: "/",
    url: url_GetSetInstanceProtection_615152, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSuspendProcesses_615204 = ref object of OpenApiRestCall_612658
proc url_PostSuspendProcesses_615206(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSuspendProcesses_615205(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Suspends the specified automatic scaling processes, or all processes, for the specified Auto Scaling group.</p> <p>If you suspend either the <code>Launch</code> or <code>Terminate</code> process types, it can prevent other process types from functioning properly.</p> <p>To resume processes that have been suspended, use <a>ResumeProcesses</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615207 = query.getOrDefault("Action")
  valid_615207 = validateParameter(valid_615207, JString, required = true,
                                 default = newJString("SuspendProcesses"))
  if valid_615207 != nil:
    section.add "Action", valid_615207
  var valid_615208 = query.getOrDefault("Version")
  valid_615208 = validateParameter(valid_615208, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_615208 != nil:
    section.add "Version", valid_615208
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615209 = header.getOrDefault("X-Amz-Signature")
  valid_615209 = validateParameter(valid_615209, JString, required = false,
                                 default = nil)
  if valid_615209 != nil:
    section.add "X-Amz-Signature", valid_615209
  var valid_615210 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615210 = validateParameter(valid_615210, JString, required = false,
                                 default = nil)
  if valid_615210 != nil:
    section.add "X-Amz-Content-Sha256", valid_615210
  var valid_615211 = header.getOrDefault("X-Amz-Date")
  valid_615211 = validateParameter(valid_615211, JString, required = false,
                                 default = nil)
  if valid_615211 != nil:
    section.add "X-Amz-Date", valid_615211
  var valid_615212 = header.getOrDefault("X-Amz-Credential")
  valid_615212 = validateParameter(valid_615212, JString, required = false,
                                 default = nil)
  if valid_615212 != nil:
    section.add "X-Amz-Credential", valid_615212
  var valid_615213 = header.getOrDefault("X-Amz-Security-Token")
  valid_615213 = validateParameter(valid_615213, JString, required = false,
                                 default = nil)
  if valid_615213 != nil:
    section.add "X-Amz-Security-Token", valid_615213
  var valid_615214 = header.getOrDefault("X-Amz-Algorithm")
  valid_615214 = validateParameter(valid_615214, JString, required = false,
                                 default = nil)
  if valid_615214 != nil:
    section.add "X-Amz-Algorithm", valid_615214
  var valid_615215 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615215 = validateParameter(valid_615215, JString, required = false,
                                 default = nil)
  if valid_615215 != nil:
    section.add "X-Amz-SignedHeaders", valid_615215
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_615216 = formData.getOrDefault("AutoScalingGroupName")
  valid_615216 = validateParameter(valid_615216, JString, required = true,
                                 default = nil)
  if valid_615216 != nil:
    section.add "AutoScalingGroupName", valid_615216
  var valid_615217 = formData.getOrDefault("ScalingProcesses")
  valid_615217 = validateParameter(valid_615217, JArray, required = false,
                                 default = nil)
  if valid_615217 != nil:
    section.add "ScalingProcesses", valid_615217
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615218: Call_PostSuspendProcesses_615204; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Suspends the specified automatic scaling processes, or all processes, for the specified Auto Scaling group.</p> <p>If you suspend either the <code>Launch</code> or <code>Terminate</code> process types, it can prevent other process types from functioning properly.</p> <p>To resume processes that have been suspended, use <a>ResumeProcesses</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_615218.validator(path, query, header, formData, body)
  let scheme = call_615218.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615218.url(scheme.get, call_615218.host, call_615218.base,
                         call_615218.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615218, url, valid)

proc call*(call_615219: Call_PostSuspendProcesses_615204;
          AutoScalingGroupName: string; Action: string = "SuspendProcesses";
          ScalingProcesses: JsonNode = nil; Version: string = "2011-01-01"): Recallable =
  ## postSuspendProcesses
  ## <p>Suspends the specified automatic scaling processes, or all processes, for the specified Auto Scaling group.</p> <p>If you suspend either the <code>Launch</code> or <code>Terminate</code> process types, it can prevent other process types from functioning properly.</p> <p>To resume processes that have been suspended, use <a>ResumeProcesses</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  ##   Version: string (required)
  var query_615220 = newJObject()
  var formData_615221 = newJObject()
  add(formData_615221, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_615220, "Action", newJString(Action))
  if ScalingProcesses != nil:
    formData_615221.add "ScalingProcesses", ScalingProcesses
  add(query_615220, "Version", newJString(Version))
  result = call_615219.call(nil, query_615220, nil, formData_615221, nil)

var postSuspendProcesses* = Call_PostSuspendProcesses_615204(
    name: "postSuspendProcesses", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=SuspendProcesses",
    validator: validate_PostSuspendProcesses_615205, base: "/",
    url: url_PostSuspendProcesses_615206, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSuspendProcesses_615187 = ref object of OpenApiRestCall_612658
proc url_GetSuspendProcesses_615189(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSuspendProcesses_615188(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Suspends the specified automatic scaling processes, or all processes, for the specified Auto Scaling group.</p> <p>If you suspend either the <code>Launch</code> or <code>Terminate</code> process types, it can prevent other process types from functioning properly.</p> <p>To resume processes that have been suspended, use <a>ResumeProcesses</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615190 = query.getOrDefault("ScalingProcesses")
  valid_615190 = validateParameter(valid_615190, JArray, required = false,
                                 default = nil)
  if valid_615190 != nil:
    section.add "ScalingProcesses", valid_615190
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_615191 = query.getOrDefault("AutoScalingGroupName")
  valid_615191 = validateParameter(valid_615191, JString, required = true,
                                 default = nil)
  if valid_615191 != nil:
    section.add "AutoScalingGroupName", valid_615191
  var valid_615192 = query.getOrDefault("Action")
  valid_615192 = validateParameter(valid_615192, JString, required = true,
                                 default = newJString("SuspendProcesses"))
  if valid_615192 != nil:
    section.add "Action", valid_615192
  var valid_615193 = query.getOrDefault("Version")
  valid_615193 = validateParameter(valid_615193, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_615193 != nil:
    section.add "Version", valid_615193
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615194 = header.getOrDefault("X-Amz-Signature")
  valid_615194 = validateParameter(valid_615194, JString, required = false,
                                 default = nil)
  if valid_615194 != nil:
    section.add "X-Amz-Signature", valid_615194
  var valid_615195 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615195 = validateParameter(valid_615195, JString, required = false,
                                 default = nil)
  if valid_615195 != nil:
    section.add "X-Amz-Content-Sha256", valid_615195
  var valid_615196 = header.getOrDefault("X-Amz-Date")
  valid_615196 = validateParameter(valid_615196, JString, required = false,
                                 default = nil)
  if valid_615196 != nil:
    section.add "X-Amz-Date", valid_615196
  var valid_615197 = header.getOrDefault("X-Amz-Credential")
  valid_615197 = validateParameter(valid_615197, JString, required = false,
                                 default = nil)
  if valid_615197 != nil:
    section.add "X-Amz-Credential", valid_615197
  var valid_615198 = header.getOrDefault("X-Amz-Security-Token")
  valid_615198 = validateParameter(valid_615198, JString, required = false,
                                 default = nil)
  if valid_615198 != nil:
    section.add "X-Amz-Security-Token", valid_615198
  var valid_615199 = header.getOrDefault("X-Amz-Algorithm")
  valid_615199 = validateParameter(valid_615199, JString, required = false,
                                 default = nil)
  if valid_615199 != nil:
    section.add "X-Amz-Algorithm", valid_615199
  var valid_615200 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615200 = validateParameter(valid_615200, JString, required = false,
                                 default = nil)
  if valid_615200 != nil:
    section.add "X-Amz-SignedHeaders", valid_615200
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615201: Call_GetSuspendProcesses_615187; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Suspends the specified automatic scaling processes, or all processes, for the specified Auto Scaling group.</p> <p>If you suspend either the <code>Launch</code> or <code>Terminate</code> process types, it can prevent other process types from functioning properly.</p> <p>To resume processes that have been suspended, use <a>ResumeProcesses</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_615201.validator(path, query, header, formData, body)
  let scheme = call_615201.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615201.url(scheme.get, call_615201.host, call_615201.base,
                         call_615201.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615201, url, valid)

proc call*(call_615202: Call_GetSuspendProcesses_615187;
          AutoScalingGroupName: string; ScalingProcesses: JsonNode = nil;
          Action: string = "SuspendProcesses"; Version: string = "2011-01-01"): Recallable =
  ## getSuspendProcesses
  ## <p>Suspends the specified automatic scaling processes, or all processes, for the specified Auto Scaling group.</p> <p>If you suspend either the <code>Launch</code> or <code>Terminate</code> process types, it can prevent other process types from functioning properly.</p> <p>To resume processes that have been suspended, use <a>ResumeProcesses</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615203 = newJObject()
  if ScalingProcesses != nil:
    query_615203.add "ScalingProcesses", ScalingProcesses
  add(query_615203, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_615203, "Action", newJString(Action))
  add(query_615203, "Version", newJString(Version))
  result = call_615202.call(nil, query_615203, nil, nil, nil)

var getSuspendProcesses* = Call_GetSuspendProcesses_615187(
    name: "getSuspendProcesses", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=SuspendProcesses",
    validator: validate_GetSuspendProcesses_615188, base: "/",
    url: url_GetSuspendProcesses_615189, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostTerminateInstanceInAutoScalingGroup_615239 = ref object of OpenApiRestCall_612658
proc url_PostTerminateInstanceInAutoScalingGroup_615241(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostTerminateInstanceInAutoScalingGroup_615240(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Terminates the specified instance and optionally adjusts the desired group size.</p> <p>This call simply makes a termination request. The instance is not terminated immediately.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615242 = query.getOrDefault("Action")
  valid_615242 = validateParameter(valid_615242, JString, required = true, default = newJString(
      "TerminateInstanceInAutoScalingGroup"))
  if valid_615242 != nil:
    section.add "Action", valid_615242
  var valid_615243 = query.getOrDefault("Version")
  valid_615243 = validateParameter(valid_615243, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_615243 != nil:
    section.add "Version", valid_615243
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615244 = header.getOrDefault("X-Amz-Signature")
  valid_615244 = validateParameter(valid_615244, JString, required = false,
                                 default = nil)
  if valid_615244 != nil:
    section.add "X-Amz-Signature", valid_615244
  var valid_615245 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615245 = validateParameter(valid_615245, JString, required = false,
                                 default = nil)
  if valid_615245 != nil:
    section.add "X-Amz-Content-Sha256", valid_615245
  var valid_615246 = header.getOrDefault("X-Amz-Date")
  valid_615246 = validateParameter(valid_615246, JString, required = false,
                                 default = nil)
  if valid_615246 != nil:
    section.add "X-Amz-Date", valid_615246
  var valid_615247 = header.getOrDefault("X-Amz-Credential")
  valid_615247 = validateParameter(valid_615247, JString, required = false,
                                 default = nil)
  if valid_615247 != nil:
    section.add "X-Amz-Credential", valid_615247
  var valid_615248 = header.getOrDefault("X-Amz-Security-Token")
  valid_615248 = validateParameter(valid_615248, JString, required = false,
                                 default = nil)
  if valid_615248 != nil:
    section.add "X-Amz-Security-Token", valid_615248
  var valid_615249 = header.getOrDefault("X-Amz-Algorithm")
  valid_615249 = validateParameter(valid_615249, JString, required = false,
                                 default = nil)
  if valid_615249 != nil:
    section.add "X-Amz-Algorithm", valid_615249
  var valid_615250 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615250 = validateParameter(valid_615250, JString, required = false,
                                 default = nil)
  if valid_615250 != nil:
    section.add "X-Amz-SignedHeaders", valid_615250
  result.add "header", section
  ## parameters in `formData` object:
  ##   ShouldDecrementDesiredCapacity: JBool (required)
  ##                                 : Indicates whether terminating the instance also decrements the size of the Auto Scaling group.
  ##   InstanceId: JString (required)
  ##             : The ID of the instance.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ShouldDecrementDesiredCapacity` field"
  var valid_615251 = formData.getOrDefault("ShouldDecrementDesiredCapacity")
  valid_615251 = validateParameter(valid_615251, JBool, required = true, default = nil)
  if valid_615251 != nil:
    section.add "ShouldDecrementDesiredCapacity", valid_615251
  var valid_615252 = formData.getOrDefault("InstanceId")
  valid_615252 = validateParameter(valid_615252, JString, required = true,
                                 default = nil)
  if valid_615252 != nil:
    section.add "InstanceId", valid_615252
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615253: Call_PostTerminateInstanceInAutoScalingGroup_615239;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Terminates the specified instance and optionally adjusts the desired group size.</p> <p>This call simply makes a termination request. The instance is not terminated immediately.</p>
  ## 
  let valid = call_615253.validator(path, query, header, formData, body)
  let scheme = call_615253.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615253.url(scheme.get, call_615253.host, call_615253.base,
                         call_615253.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615253, url, valid)

proc call*(call_615254: Call_PostTerminateInstanceInAutoScalingGroup_615239;
          ShouldDecrementDesiredCapacity: bool; InstanceId: string;
          Action: string = "TerminateInstanceInAutoScalingGroup";
          Version: string = "2011-01-01"): Recallable =
  ## postTerminateInstanceInAutoScalingGroup
  ## <p>Terminates the specified instance and optionally adjusts the desired group size.</p> <p>This call simply makes a termination request. The instance is not terminated immediately.</p>
  ##   ShouldDecrementDesiredCapacity: bool (required)
  ##                                 : Indicates whether terminating the instance also decrements the size of the Auto Scaling group.
  ##   InstanceId: string (required)
  ##             : The ID of the instance.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615255 = newJObject()
  var formData_615256 = newJObject()
  add(formData_615256, "ShouldDecrementDesiredCapacity",
      newJBool(ShouldDecrementDesiredCapacity))
  add(formData_615256, "InstanceId", newJString(InstanceId))
  add(query_615255, "Action", newJString(Action))
  add(query_615255, "Version", newJString(Version))
  result = call_615254.call(nil, query_615255, nil, formData_615256, nil)

var postTerminateInstanceInAutoScalingGroup* = Call_PostTerminateInstanceInAutoScalingGroup_615239(
    name: "postTerminateInstanceInAutoScalingGroup", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=TerminateInstanceInAutoScalingGroup",
    validator: validate_PostTerminateInstanceInAutoScalingGroup_615240, base: "/",
    url: url_PostTerminateInstanceInAutoScalingGroup_615241,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetTerminateInstanceInAutoScalingGroup_615222 = ref object of OpenApiRestCall_612658
proc url_GetTerminateInstanceInAutoScalingGroup_615224(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetTerminateInstanceInAutoScalingGroup_615223(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Terminates the specified instance and optionally adjusts the desired group size.</p> <p>This call simply makes a termination request. The instance is not terminated immediately.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ShouldDecrementDesiredCapacity: JBool (required)
  ##                                 : Indicates whether terminating the instance also decrements the size of the Auto Scaling group.
  ##   InstanceId: JString (required)
  ##             : The ID of the instance.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ShouldDecrementDesiredCapacity` field"
  var valid_615225 = query.getOrDefault("ShouldDecrementDesiredCapacity")
  valid_615225 = validateParameter(valid_615225, JBool, required = true, default = nil)
  if valid_615225 != nil:
    section.add "ShouldDecrementDesiredCapacity", valid_615225
  var valid_615226 = query.getOrDefault("InstanceId")
  valid_615226 = validateParameter(valid_615226, JString, required = true,
                                 default = nil)
  if valid_615226 != nil:
    section.add "InstanceId", valid_615226
  var valid_615227 = query.getOrDefault("Action")
  valid_615227 = validateParameter(valid_615227, JString, required = true, default = newJString(
      "TerminateInstanceInAutoScalingGroup"))
  if valid_615227 != nil:
    section.add "Action", valid_615227
  var valid_615228 = query.getOrDefault("Version")
  valid_615228 = validateParameter(valid_615228, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_615228 != nil:
    section.add "Version", valid_615228
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615229 = header.getOrDefault("X-Amz-Signature")
  valid_615229 = validateParameter(valid_615229, JString, required = false,
                                 default = nil)
  if valid_615229 != nil:
    section.add "X-Amz-Signature", valid_615229
  var valid_615230 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615230 = validateParameter(valid_615230, JString, required = false,
                                 default = nil)
  if valid_615230 != nil:
    section.add "X-Amz-Content-Sha256", valid_615230
  var valid_615231 = header.getOrDefault("X-Amz-Date")
  valid_615231 = validateParameter(valid_615231, JString, required = false,
                                 default = nil)
  if valid_615231 != nil:
    section.add "X-Amz-Date", valid_615231
  var valid_615232 = header.getOrDefault("X-Amz-Credential")
  valid_615232 = validateParameter(valid_615232, JString, required = false,
                                 default = nil)
  if valid_615232 != nil:
    section.add "X-Amz-Credential", valid_615232
  var valid_615233 = header.getOrDefault("X-Amz-Security-Token")
  valid_615233 = validateParameter(valid_615233, JString, required = false,
                                 default = nil)
  if valid_615233 != nil:
    section.add "X-Amz-Security-Token", valid_615233
  var valid_615234 = header.getOrDefault("X-Amz-Algorithm")
  valid_615234 = validateParameter(valid_615234, JString, required = false,
                                 default = nil)
  if valid_615234 != nil:
    section.add "X-Amz-Algorithm", valid_615234
  var valid_615235 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615235 = validateParameter(valid_615235, JString, required = false,
                                 default = nil)
  if valid_615235 != nil:
    section.add "X-Amz-SignedHeaders", valid_615235
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615236: Call_GetTerminateInstanceInAutoScalingGroup_615222;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Terminates the specified instance and optionally adjusts the desired group size.</p> <p>This call simply makes a termination request. The instance is not terminated immediately.</p>
  ## 
  let valid = call_615236.validator(path, query, header, formData, body)
  let scheme = call_615236.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615236.url(scheme.get, call_615236.host, call_615236.base,
                         call_615236.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615236, url, valid)

proc call*(call_615237: Call_GetTerminateInstanceInAutoScalingGroup_615222;
          ShouldDecrementDesiredCapacity: bool; InstanceId: string;
          Action: string = "TerminateInstanceInAutoScalingGroup";
          Version: string = "2011-01-01"): Recallable =
  ## getTerminateInstanceInAutoScalingGroup
  ## <p>Terminates the specified instance and optionally adjusts the desired group size.</p> <p>This call simply makes a termination request. The instance is not terminated immediately.</p>
  ##   ShouldDecrementDesiredCapacity: bool (required)
  ##                                 : Indicates whether terminating the instance also decrements the size of the Auto Scaling group.
  ##   InstanceId: string (required)
  ##             : The ID of the instance.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615238 = newJObject()
  add(query_615238, "ShouldDecrementDesiredCapacity",
      newJBool(ShouldDecrementDesiredCapacity))
  add(query_615238, "InstanceId", newJString(InstanceId))
  add(query_615238, "Action", newJString(Action))
  add(query_615238, "Version", newJString(Version))
  result = call_615237.call(nil, query_615238, nil, nil, nil)

var getTerminateInstanceInAutoScalingGroup* = Call_GetTerminateInstanceInAutoScalingGroup_615222(
    name: "getTerminateInstanceInAutoScalingGroup", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=TerminateInstanceInAutoScalingGroup",
    validator: validate_GetTerminateInstanceInAutoScalingGroup_615223, base: "/",
    url: url_GetTerminateInstanceInAutoScalingGroup_615224,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateAutoScalingGroup_615292 = ref object of OpenApiRestCall_612658
proc url_PostUpdateAutoScalingGroup_615294(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateAutoScalingGroup_615293(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the configuration for the specified Auto Scaling group.</p> <p>To update an Auto Scaling group, specify the name of the group and the parameter that you want to change. Any parameters that you don't specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. </p> <p>If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.</p> <p>Note the following about changing <code>DesiredCapacity</code>, <code>MaxSize</code>, or <code>MinSize</code>:</p> <ul> <li> <p>If a scale-in event occurs as a result of a new <code>DesiredCapacity</code> value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.</p> </li> <li> <p>If you specify a new value for <code>MinSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MinSize</code> is larger than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MinSize</code> value.</p> </li> <li> <p>If you specify a new value for <code>MaxSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MaxSize</code> is smaller than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MaxSize</code> value.</p> </li> </ul> <p>To see which parameters have been set, use <a>DescribeAutoScalingGroups</a>. You can also view the scaling policies for an Auto Scaling group using <a>DescribePolicies</a>. If the group has scaling policies, you can update them using <a>PutScalingPolicy</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615295 = query.getOrDefault("Action")
  valid_615295 = validateParameter(valid_615295, JString, required = true,
                                 default = newJString("UpdateAutoScalingGroup"))
  if valid_615295 != nil:
    section.add "Action", valid_615295
  var valid_615296 = query.getOrDefault("Version")
  valid_615296 = validateParameter(valid_615296, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_615296 != nil:
    section.add "Version", valid_615296
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615297 = header.getOrDefault("X-Amz-Signature")
  valid_615297 = validateParameter(valid_615297, JString, required = false,
                                 default = nil)
  if valid_615297 != nil:
    section.add "X-Amz-Signature", valid_615297
  var valid_615298 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615298 = validateParameter(valid_615298, JString, required = false,
                                 default = nil)
  if valid_615298 != nil:
    section.add "X-Amz-Content-Sha256", valid_615298
  var valid_615299 = header.getOrDefault("X-Amz-Date")
  valid_615299 = validateParameter(valid_615299, JString, required = false,
                                 default = nil)
  if valid_615299 != nil:
    section.add "X-Amz-Date", valid_615299
  var valid_615300 = header.getOrDefault("X-Amz-Credential")
  valid_615300 = validateParameter(valid_615300, JString, required = false,
                                 default = nil)
  if valid_615300 != nil:
    section.add "X-Amz-Credential", valid_615300
  var valid_615301 = header.getOrDefault("X-Amz-Security-Token")
  valid_615301 = validateParameter(valid_615301, JString, required = false,
                                 default = nil)
  if valid_615301 != nil:
    section.add "X-Amz-Security-Token", valid_615301
  var valid_615302 = header.getOrDefault("X-Amz-Algorithm")
  valid_615302 = validateParameter(valid_615302, JString, required = false,
                                 default = nil)
  if valid_615302 != nil:
    section.add "X-Amz-Algorithm", valid_615302
  var valid_615303 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615303 = validateParameter(valid_615303, JString, required = false,
                                 default = nil)
  if valid_615303 != nil:
    section.add "X-Amz-SignedHeaders", valid_615303
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   MinSize: JInt
  ##          : The minimum size of the Auto Scaling group.
  ##   MixedInstancesPolicy.InstancesDistribution: JString
  ##                                             : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified, the value for each parameter in <code>InstancesDistribution</code> uses a default value.</p>
  ##   DesiredCapacity: JInt
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group.
  ##   DefaultCooldown: JInt
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>. This cooldown period is not used when a scaling-specific cooldown is specified.</p> <p>Cooldown periods are not supported for target tracking scaling policies, step scaling policies, or scheduled scaling. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   NewInstancesProtectedFromScaleIn: JBool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MaxInstanceLifetime: JInt
  ##                      : <p>The maximum amount of time, in seconds, that an instance can be in service.</p> <p>Valid Range: Minimum value of 604800.</p>
  ##   TerminationPolicies: JArray
  ##                      : <p>A standalone termination policy or a list of termination policies used to select the instance to terminate. The policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AvailabilityZones: JArray
  ##                    : One or more Availability Zones for the group.
  ##   LaunchTemplate.Version: JString
  ##                         : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   HealthCheckType: JString
  ##                  : The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.
  ##   PlacementGroup: JString
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   LaunchTemplate.LaunchTemplateName: JString
  ##                                    : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   LaunchTemplate.LaunchTemplateId: JString
  ##                                  : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  ##   MaxSize: JInt
  ##          : The maximum size of the Auto Scaling group.
  ##   HealthCheckGracePeriod: JInt
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   ServiceLinkedRoleARN: JString
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   LaunchConfigurationName: JString
  ##                          : The name of the launch configuration. If you specify <code>LaunchConfigurationName</code> in your update request, you can't specify <code>LaunchTemplate</code> or <code>MixedInstancesPolicy</code>.
  ##   MixedInstancesPolicy.LaunchTemplate: JString
  ##                                      : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   VPCZoneIdentifier: JString
  ##                    : <p>A comma-separated list of subnet IDs for virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_615304 = formData.getOrDefault("AutoScalingGroupName")
  valid_615304 = validateParameter(valid_615304, JString, required = true,
                                 default = nil)
  if valid_615304 != nil:
    section.add "AutoScalingGroupName", valid_615304
  var valid_615305 = formData.getOrDefault("MinSize")
  valid_615305 = validateParameter(valid_615305, JInt, required = false, default = nil)
  if valid_615305 != nil:
    section.add "MinSize", valid_615305
  var valid_615306 = formData.getOrDefault("MixedInstancesPolicy.InstancesDistribution")
  valid_615306 = validateParameter(valid_615306, JString, required = false,
                                 default = nil)
  if valid_615306 != nil:
    section.add "MixedInstancesPolicy.InstancesDistribution", valid_615306
  var valid_615307 = formData.getOrDefault("DesiredCapacity")
  valid_615307 = validateParameter(valid_615307, JInt, required = false, default = nil)
  if valid_615307 != nil:
    section.add "DesiredCapacity", valid_615307
  var valid_615308 = formData.getOrDefault("DefaultCooldown")
  valid_615308 = validateParameter(valid_615308, JInt, required = false, default = nil)
  if valid_615308 != nil:
    section.add "DefaultCooldown", valid_615308
  var valid_615309 = formData.getOrDefault("NewInstancesProtectedFromScaleIn")
  valid_615309 = validateParameter(valid_615309, JBool, required = false, default = nil)
  if valid_615309 != nil:
    section.add "NewInstancesProtectedFromScaleIn", valid_615309
  var valid_615310 = formData.getOrDefault("MaxInstanceLifetime")
  valid_615310 = validateParameter(valid_615310, JInt, required = false, default = nil)
  if valid_615310 != nil:
    section.add "MaxInstanceLifetime", valid_615310
  var valid_615311 = formData.getOrDefault("TerminationPolicies")
  valid_615311 = validateParameter(valid_615311, JArray, required = false,
                                 default = nil)
  if valid_615311 != nil:
    section.add "TerminationPolicies", valid_615311
  var valid_615312 = formData.getOrDefault("AvailabilityZones")
  valid_615312 = validateParameter(valid_615312, JArray, required = false,
                                 default = nil)
  if valid_615312 != nil:
    section.add "AvailabilityZones", valid_615312
  var valid_615313 = formData.getOrDefault("LaunchTemplate.Version")
  valid_615313 = validateParameter(valid_615313, JString, required = false,
                                 default = nil)
  if valid_615313 != nil:
    section.add "LaunchTemplate.Version", valid_615313
  var valid_615314 = formData.getOrDefault("HealthCheckType")
  valid_615314 = validateParameter(valid_615314, JString, required = false,
                                 default = nil)
  if valid_615314 != nil:
    section.add "HealthCheckType", valid_615314
  var valid_615315 = formData.getOrDefault("PlacementGroup")
  valid_615315 = validateParameter(valid_615315, JString, required = false,
                                 default = nil)
  if valid_615315 != nil:
    section.add "PlacementGroup", valid_615315
  var valid_615316 = formData.getOrDefault("LaunchTemplate.LaunchTemplateName")
  valid_615316 = validateParameter(valid_615316, JString, required = false,
                                 default = nil)
  if valid_615316 != nil:
    section.add "LaunchTemplate.LaunchTemplateName", valid_615316
  var valid_615317 = formData.getOrDefault("LaunchTemplate.LaunchTemplateId")
  valid_615317 = validateParameter(valid_615317, JString, required = false,
                                 default = nil)
  if valid_615317 != nil:
    section.add "LaunchTemplate.LaunchTemplateId", valid_615317
  var valid_615318 = formData.getOrDefault("MaxSize")
  valid_615318 = validateParameter(valid_615318, JInt, required = false, default = nil)
  if valid_615318 != nil:
    section.add "MaxSize", valid_615318
  var valid_615319 = formData.getOrDefault("HealthCheckGracePeriod")
  valid_615319 = validateParameter(valid_615319, JInt, required = false, default = nil)
  if valid_615319 != nil:
    section.add "HealthCheckGracePeriod", valid_615319
  var valid_615320 = formData.getOrDefault("ServiceLinkedRoleARN")
  valid_615320 = validateParameter(valid_615320, JString, required = false,
                                 default = nil)
  if valid_615320 != nil:
    section.add "ServiceLinkedRoleARN", valid_615320
  var valid_615321 = formData.getOrDefault("LaunchConfigurationName")
  valid_615321 = validateParameter(valid_615321, JString, required = false,
                                 default = nil)
  if valid_615321 != nil:
    section.add "LaunchConfigurationName", valid_615321
  var valid_615322 = formData.getOrDefault("MixedInstancesPolicy.LaunchTemplate")
  valid_615322 = validateParameter(valid_615322, JString, required = false,
                                 default = nil)
  if valid_615322 != nil:
    section.add "MixedInstancesPolicy.LaunchTemplate", valid_615322
  var valid_615323 = formData.getOrDefault("VPCZoneIdentifier")
  valid_615323 = validateParameter(valid_615323, JString, required = false,
                                 default = nil)
  if valid_615323 != nil:
    section.add "VPCZoneIdentifier", valid_615323
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615324: Call_PostUpdateAutoScalingGroup_615292; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the configuration for the specified Auto Scaling group.</p> <p>To update an Auto Scaling group, specify the name of the group and the parameter that you want to change. Any parameters that you don't specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. </p> <p>If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.</p> <p>Note the following about changing <code>DesiredCapacity</code>, <code>MaxSize</code>, or <code>MinSize</code>:</p> <ul> <li> <p>If a scale-in event occurs as a result of a new <code>DesiredCapacity</code> value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.</p> </li> <li> <p>If you specify a new value for <code>MinSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MinSize</code> is larger than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MinSize</code> value.</p> </li> <li> <p>If you specify a new value for <code>MaxSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MaxSize</code> is smaller than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MaxSize</code> value.</p> </li> </ul> <p>To see which parameters have been set, use <a>DescribeAutoScalingGroups</a>. You can also view the scaling policies for an Auto Scaling group using <a>DescribePolicies</a>. If the group has scaling policies, you can update them using <a>PutScalingPolicy</a>.</p>
  ## 
  let valid = call_615324.validator(path, query, header, formData, body)
  let scheme = call_615324.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615324.url(scheme.get, call_615324.host, call_615324.base,
                         call_615324.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615324, url, valid)

proc call*(call_615325: Call_PostUpdateAutoScalingGroup_615292;
          AutoScalingGroupName: string; MinSize: int = 0;
          MixedInstancesPolicyInstancesDistribution: string = "";
          DesiredCapacity: int = 0; DefaultCooldown: int = 0;
          NewInstancesProtectedFromScaleIn: bool = false;
          MaxInstanceLifetime: int = 0; TerminationPolicies: JsonNode = nil;
          AvailabilityZones: JsonNode = nil; LaunchTemplateVersion: string = "";
          HealthCheckType: string = ""; PlacementGroup: string = "";
          LaunchTemplateLaunchTemplateName: string = "";
          Action: string = "UpdateAutoScalingGroup";
          LaunchTemplateLaunchTemplateId: string = ""; MaxSize: int = 0;
          HealthCheckGracePeriod: int = 0; ServiceLinkedRoleARN: string = "";
          LaunchConfigurationName: string = ""; Version: string = "2011-01-01";
          MixedInstancesPolicyLaunchTemplate: string = "";
          VPCZoneIdentifier: string = ""): Recallable =
  ## postUpdateAutoScalingGroup
  ## <p>Updates the configuration for the specified Auto Scaling group.</p> <p>To update an Auto Scaling group, specify the name of the group and the parameter that you want to change. Any parameters that you don't specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. </p> <p>If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.</p> <p>Note the following about changing <code>DesiredCapacity</code>, <code>MaxSize</code>, or <code>MinSize</code>:</p> <ul> <li> <p>If a scale-in event occurs as a result of a new <code>DesiredCapacity</code> value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.</p> </li> <li> <p>If you specify a new value for <code>MinSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MinSize</code> is larger than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MinSize</code> value.</p> </li> <li> <p>If you specify a new value for <code>MaxSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MaxSize</code> is smaller than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MaxSize</code> value.</p> </li> </ul> <p>To see which parameters have been set, use <a>DescribeAutoScalingGroups</a>. You can also view the scaling policies for an Auto Scaling group using <a>DescribePolicies</a>. If the group has scaling policies, you can update them using <a>PutScalingPolicy</a>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   MinSize: int
  ##          : The minimum size of the Auto Scaling group.
  ##   MixedInstancesPolicyInstancesDistribution: string
  ##                                            : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified, the value for each parameter in <code>InstancesDistribution</code> uses a default value.</p>
  ##   DesiredCapacity: int
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group.
  ##   DefaultCooldown: int
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>. This cooldown period is not used when a scaling-specific cooldown is specified.</p> <p>Cooldown periods are not supported for target tracking scaling policies, step scaling policies, or scheduled scaling. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   NewInstancesProtectedFromScaleIn: bool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MaxInstanceLifetime: int
  ##                      : <p>The maximum amount of time, in seconds, that an instance can be in service.</p> <p>Valid Range: Minimum value of 604800.</p>
  ##   TerminationPolicies: JArray
  ##                      : <p>A standalone termination policy or a list of termination policies used to select the instance to terminate. The policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AvailabilityZones: JArray
  ##                    : One or more Availability Zones for the group.
  ##   LaunchTemplateVersion: string
  ##                        : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   HealthCheckType: string
  ##                  : The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.
  ##   PlacementGroup: string
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   LaunchTemplateLaunchTemplateName: string
  ##                                   : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   Action: string (required)
  ##   LaunchTemplateLaunchTemplateId: string
  ##                                 : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  ##   MaxSize: int
  ##          : The maximum size of the Auto Scaling group.
  ##   HealthCheckGracePeriod: int
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   ServiceLinkedRoleARN: string
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   LaunchConfigurationName: string
  ##                          : The name of the launch configuration. If you specify <code>LaunchConfigurationName</code> in your update request, you can't specify <code>LaunchTemplate</code> or <code>MixedInstancesPolicy</code>.
  ##   Version: string (required)
  ##   MixedInstancesPolicyLaunchTemplate: string
  ##                                     : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   VPCZoneIdentifier: string
  ##                    : <p>A comma-separated list of subnet IDs for virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p>
  var query_615326 = newJObject()
  var formData_615327 = newJObject()
  add(formData_615327, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_615327, "MinSize", newJInt(MinSize))
  add(formData_615327, "MixedInstancesPolicy.InstancesDistribution",
      newJString(MixedInstancesPolicyInstancesDistribution))
  add(formData_615327, "DesiredCapacity", newJInt(DesiredCapacity))
  add(formData_615327, "DefaultCooldown", newJInt(DefaultCooldown))
  add(formData_615327, "NewInstancesProtectedFromScaleIn",
      newJBool(NewInstancesProtectedFromScaleIn))
  add(formData_615327, "MaxInstanceLifetime", newJInt(MaxInstanceLifetime))
  if TerminationPolicies != nil:
    formData_615327.add "TerminationPolicies", TerminationPolicies
  if AvailabilityZones != nil:
    formData_615327.add "AvailabilityZones", AvailabilityZones
  add(formData_615327, "LaunchTemplate.Version", newJString(LaunchTemplateVersion))
  add(formData_615327, "HealthCheckType", newJString(HealthCheckType))
  add(formData_615327, "PlacementGroup", newJString(PlacementGroup))
  add(formData_615327, "LaunchTemplate.LaunchTemplateName",
      newJString(LaunchTemplateLaunchTemplateName))
  add(query_615326, "Action", newJString(Action))
  add(formData_615327, "LaunchTemplate.LaunchTemplateId",
      newJString(LaunchTemplateLaunchTemplateId))
  add(formData_615327, "MaxSize", newJInt(MaxSize))
  add(formData_615327, "HealthCheckGracePeriod", newJInt(HealthCheckGracePeriod))
  add(formData_615327, "ServiceLinkedRoleARN", newJString(ServiceLinkedRoleARN))
  add(formData_615327, "LaunchConfigurationName",
      newJString(LaunchConfigurationName))
  add(query_615326, "Version", newJString(Version))
  add(formData_615327, "MixedInstancesPolicy.LaunchTemplate",
      newJString(MixedInstancesPolicyLaunchTemplate))
  add(formData_615327, "VPCZoneIdentifier", newJString(VPCZoneIdentifier))
  result = call_615325.call(nil, query_615326, nil, formData_615327, nil)

var postUpdateAutoScalingGroup* = Call_PostUpdateAutoScalingGroup_615292(
    name: "postUpdateAutoScalingGroup", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=UpdateAutoScalingGroup",
    validator: validate_PostUpdateAutoScalingGroup_615293, base: "/",
    url: url_PostUpdateAutoScalingGroup_615294,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateAutoScalingGroup_615257 = ref object of OpenApiRestCall_612658
proc url_GetUpdateAutoScalingGroup_615259(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateAutoScalingGroup_615258(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the configuration for the specified Auto Scaling group.</p> <p>To update an Auto Scaling group, specify the name of the group and the parameter that you want to change. Any parameters that you don't specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. </p> <p>If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.</p> <p>Note the following about changing <code>DesiredCapacity</code>, <code>MaxSize</code>, or <code>MinSize</code>:</p> <ul> <li> <p>If a scale-in event occurs as a result of a new <code>DesiredCapacity</code> value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.</p> </li> <li> <p>If you specify a new value for <code>MinSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MinSize</code> is larger than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MinSize</code> value.</p> </li> <li> <p>If you specify a new value for <code>MaxSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MaxSize</code> is smaller than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MaxSize</code> value.</p> </li> </ul> <p>To see which parameters have been set, use <a>DescribeAutoScalingGroups</a>. You can also view the scaling policies for an Auto Scaling group using <a>DescribePolicies</a>. If the group has scaling policies, you can update them using <a>PutScalingPolicy</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MixedInstancesPolicy.InstancesDistribution: JString
  ##                                             : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified, the value for each parameter in <code>InstancesDistribution</code> uses a default value.</p>
  ##   LaunchTemplate.LaunchTemplateName: JString
  ##                                    : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   MaxSize: JInt
  ##          : The maximum size of the Auto Scaling group.
  ##   LaunchConfigurationName: JString
  ##                          : The name of the launch configuration. If you specify <code>LaunchConfigurationName</code> in your update request, you can't specify <code>LaunchTemplate</code> or <code>MixedInstancesPolicy</code>.
  ##   HealthCheckGracePeriod: JInt
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   MixedInstancesPolicy.LaunchTemplate: JString
  ##                                      : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   NewInstancesProtectedFromScaleIn: JBool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AvailabilityZones: JArray
  ##                    : One or more Availability Zones for the group.
  ##   HealthCheckType: JString
  ##                  : The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.
  ##   TerminationPolicies: JArray
  ##                      : <p>A standalone termination policy or a list of termination policies used to select the instance to terminate. The policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   DesiredCapacity: JInt
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   DefaultCooldown: JInt
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>. This cooldown period is not used when a scaling-specific cooldown is specified.</p> <p>Cooldown periods are not supported for target tracking scaling policies, step scaling policies, or scheduled scaling. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: JString (required)
  ##   MinSize: JInt
  ##          : The minimum size of the Auto Scaling group.
  ##   PlacementGroup: JString
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   LaunchTemplate.Version: JString
  ##                         : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   MaxInstanceLifetime: JInt
  ##                      : <p>The maximum amount of time, in seconds, that an instance can be in service.</p> <p>Valid Range: Minimum value of 604800.</p>
  ##   Version: JString (required)
  ##   VPCZoneIdentifier: JString
  ##                    : <p>A comma-separated list of subnet IDs for virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p>
  ##   ServiceLinkedRoleARN: JString
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   LaunchTemplate.LaunchTemplateId: JString
  ##                                  : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  section = newJObject()
  var valid_615260 = query.getOrDefault("MixedInstancesPolicy.InstancesDistribution")
  valid_615260 = validateParameter(valid_615260, JString, required = false,
                                 default = nil)
  if valid_615260 != nil:
    section.add "MixedInstancesPolicy.InstancesDistribution", valid_615260
  var valid_615261 = query.getOrDefault("LaunchTemplate.LaunchTemplateName")
  valid_615261 = validateParameter(valid_615261, JString, required = false,
                                 default = nil)
  if valid_615261 != nil:
    section.add "LaunchTemplate.LaunchTemplateName", valid_615261
  var valid_615262 = query.getOrDefault("MaxSize")
  valid_615262 = validateParameter(valid_615262, JInt, required = false, default = nil)
  if valid_615262 != nil:
    section.add "MaxSize", valid_615262
  var valid_615263 = query.getOrDefault("LaunchConfigurationName")
  valid_615263 = validateParameter(valid_615263, JString, required = false,
                                 default = nil)
  if valid_615263 != nil:
    section.add "LaunchConfigurationName", valid_615263
  var valid_615264 = query.getOrDefault("HealthCheckGracePeriod")
  valid_615264 = validateParameter(valid_615264, JInt, required = false, default = nil)
  if valid_615264 != nil:
    section.add "HealthCheckGracePeriod", valid_615264
  var valid_615265 = query.getOrDefault("MixedInstancesPolicy.LaunchTemplate")
  valid_615265 = validateParameter(valid_615265, JString, required = false,
                                 default = nil)
  if valid_615265 != nil:
    section.add "MixedInstancesPolicy.LaunchTemplate", valid_615265
  var valid_615266 = query.getOrDefault("NewInstancesProtectedFromScaleIn")
  valid_615266 = validateParameter(valid_615266, JBool, required = false, default = nil)
  if valid_615266 != nil:
    section.add "NewInstancesProtectedFromScaleIn", valid_615266
  var valid_615267 = query.getOrDefault("AvailabilityZones")
  valid_615267 = validateParameter(valid_615267, JArray, required = false,
                                 default = nil)
  if valid_615267 != nil:
    section.add "AvailabilityZones", valid_615267
  var valid_615268 = query.getOrDefault("HealthCheckType")
  valid_615268 = validateParameter(valid_615268, JString, required = false,
                                 default = nil)
  if valid_615268 != nil:
    section.add "HealthCheckType", valid_615268
  var valid_615269 = query.getOrDefault("TerminationPolicies")
  valid_615269 = validateParameter(valid_615269, JArray, required = false,
                                 default = nil)
  if valid_615269 != nil:
    section.add "TerminationPolicies", valid_615269
  var valid_615270 = query.getOrDefault("DesiredCapacity")
  valid_615270 = validateParameter(valid_615270, JInt, required = false, default = nil)
  if valid_615270 != nil:
    section.add "DesiredCapacity", valid_615270
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_615271 = query.getOrDefault("AutoScalingGroupName")
  valid_615271 = validateParameter(valid_615271, JString, required = true,
                                 default = nil)
  if valid_615271 != nil:
    section.add "AutoScalingGroupName", valid_615271
  var valid_615272 = query.getOrDefault("DefaultCooldown")
  valid_615272 = validateParameter(valid_615272, JInt, required = false, default = nil)
  if valid_615272 != nil:
    section.add "DefaultCooldown", valid_615272
  var valid_615273 = query.getOrDefault("Action")
  valid_615273 = validateParameter(valid_615273, JString, required = true,
                                 default = newJString("UpdateAutoScalingGroup"))
  if valid_615273 != nil:
    section.add "Action", valid_615273
  var valid_615274 = query.getOrDefault("MinSize")
  valid_615274 = validateParameter(valid_615274, JInt, required = false, default = nil)
  if valid_615274 != nil:
    section.add "MinSize", valid_615274
  var valid_615275 = query.getOrDefault("PlacementGroup")
  valid_615275 = validateParameter(valid_615275, JString, required = false,
                                 default = nil)
  if valid_615275 != nil:
    section.add "PlacementGroup", valid_615275
  var valid_615276 = query.getOrDefault("LaunchTemplate.Version")
  valid_615276 = validateParameter(valid_615276, JString, required = false,
                                 default = nil)
  if valid_615276 != nil:
    section.add "LaunchTemplate.Version", valid_615276
  var valid_615277 = query.getOrDefault("MaxInstanceLifetime")
  valid_615277 = validateParameter(valid_615277, JInt, required = false, default = nil)
  if valid_615277 != nil:
    section.add "MaxInstanceLifetime", valid_615277
  var valid_615278 = query.getOrDefault("Version")
  valid_615278 = validateParameter(valid_615278, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_615278 != nil:
    section.add "Version", valid_615278
  var valid_615279 = query.getOrDefault("VPCZoneIdentifier")
  valid_615279 = validateParameter(valid_615279, JString, required = false,
                                 default = nil)
  if valid_615279 != nil:
    section.add "VPCZoneIdentifier", valid_615279
  var valid_615280 = query.getOrDefault("ServiceLinkedRoleARN")
  valid_615280 = validateParameter(valid_615280, JString, required = false,
                                 default = nil)
  if valid_615280 != nil:
    section.add "ServiceLinkedRoleARN", valid_615280
  var valid_615281 = query.getOrDefault("LaunchTemplate.LaunchTemplateId")
  valid_615281 = validateParameter(valid_615281, JString, required = false,
                                 default = nil)
  if valid_615281 != nil:
    section.add "LaunchTemplate.LaunchTemplateId", valid_615281
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615282 = header.getOrDefault("X-Amz-Signature")
  valid_615282 = validateParameter(valid_615282, JString, required = false,
                                 default = nil)
  if valid_615282 != nil:
    section.add "X-Amz-Signature", valid_615282
  var valid_615283 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615283 = validateParameter(valid_615283, JString, required = false,
                                 default = nil)
  if valid_615283 != nil:
    section.add "X-Amz-Content-Sha256", valid_615283
  var valid_615284 = header.getOrDefault("X-Amz-Date")
  valid_615284 = validateParameter(valid_615284, JString, required = false,
                                 default = nil)
  if valid_615284 != nil:
    section.add "X-Amz-Date", valid_615284
  var valid_615285 = header.getOrDefault("X-Amz-Credential")
  valid_615285 = validateParameter(valid_615285, JString, required = false,
                                 default = nil)
  if valid_615285 != nil:
    section.add "X-Amz-Credential", valid_615285
  var valid_615286 = header.getOrDefault("X-Amz-Security-Token")
  valid_615286 = validateParameter(valid_615286, JString, required = false,
                                 default = nil)
  if valid_615286 != nil:
    section.add "X-Amz-Security-Token", valid_615286
  var valid_615287 = header.getOrDefault("X-Amz-Algorithm")
  valid_615287 = validateParameter(valid_615287, JString, required = false,
                                 default = nil)
  if valid_615287 != nil:
    section.add "X-Amz-Algorithm", valid_615287
  var valid_615288 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615288 = validateParameter(valid_615288, JString, required = false,
                                 default = nil)
  if valid_615288 != nil:
    section.add "X-Amz-SignedHeaders", valid_615288
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615289: Call_GetUpdateAutoScalingGroup_615257; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the configuration for the specified Auto Scaling group.</p> <p>To update an Auto Scaling group, specify the name of the group and the parameter that you want to change. Any parameters that you don't specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. </p> <p>If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.</p> <p>Note the following about changing <code>DesiredCapacity</code>, <code>MaxSize</code>, or <code>MinSize</code>:</p> <ul> <li> <p>If a scale-in event occurs as a result of a new <code>DesiredCapacity</code> value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.</p> </li> <li> <p>If you specify a new value for <code>MinSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MinSize</code> is larger than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MinSize</code> value.</p> </li> <li> <p>If you specify a new value for <code>MaxSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MaxSize</code> is smaller than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MaxSize</code> value.</p> </li> </ul> <p>To see which parameters have been set, use <a>DescribeAutoScalingGroups</a>. You can also view the scaling policies for an Auto Scaling group using <a>DescribePolicies</a>. If the group has scaling policies, you can update them using <a>PutScalingPolicy</a>.</p>
  ## 
  let valid = call_615289.validator(path, query, header, formData, body)
  let scheme = call_615289.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615289.url(scheme.get, call_615289.host, call_615289.base,
                         call_615289.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615289, url, valid)

proc call*(call_615290: Call_GetUpdateAutoScalingGroup_615257;
          AutoScalingGroupName: string;
          MixedInstancesPolicyInstancesDistribution: string = "";
          LaunchTemplateLaunchTemplateName: string = ""; MaxSize: int = 0;
          LaunchConfigurationName: string = ""; HealthCheckGracePeriod: int = 0;
          MixedInstancesPolicyLaunchTemplate: string = "";
          NewInstancesProtectedFromScaleIn: bool = false;
          AvailabilityZones: JsonNode = nil; HealthCheckType: string = "";
          TerminationPolicies: JsonNode = nil; DesiredCapacity: int = 0;
          DefaultCooldown: int = 0; Action: string = "UpdateAutoScalingGroup";
          MinSize: int = 0; PlacementGroup: string = "";
          LaunchTemplateVersion: string = ""; MaxInstanceLifetime: int = 0;
          Version: string = "2011-01-01"; VPCZoneIdentifier: string = "";
          ServiceLinkedRoleARN: string = "";
          LaunchTemplateLaunchTemplateId: string = ""): Recallable =
  ## getUpdateAutoScalingGroup
  ## <p>Updates the configuration for the specified Auto Scaling group.</p> <p>To update an Auto Scaling group, specify the name of the group and the parameter that you want to change. Any parameters that you don't specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. </p> <p>If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.</p> <p>Note the following about changing <code>DesiredCapacity</code>, <code>MaxSize</code>, or <code>MinSize</code>:</p> <ul> <li> <p>If a scale-in event occurs as a result of a new <code>DesiredCapacity</code> value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.</p> </li> <li> <p>If you specify a new value for <code>MinSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MinSize</code> is larger than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MinSize</code> value.</p> </li> <li> <p>If you specify a new value for <code>MaxSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MaxSize</code> is smaller than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MaxSize</code> value.</p> </li> </ul> <p>To see which parameters have been set, use <a>DescribeAutoScalingGroups</a>. You can also view the scaling policies for an Auto Scaling group using <a>DescribePolicies</a>. If the group has scaling policies, you can update them using <a>PutScalingPolicy</a>.</p>
  ##   MixedInstancesPolicyInstancesDistribution: string
  ##                                            : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified, the value for each parameter in <code>InstancesDistribution</code> uses a default value.</p>
  ##   LaunchTemplateLaunchTemplateName: string
  ##                                   : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   MaxSize: int
  ##          : The maximum size of the Auto Scaling group.
  ##   LaunchConfigurationName: string
  ##                          : The name of the launch configuration. If you specify <code>LaunchConfigurationName</code> in your update request, you can't specify <code>LaunchTemplate</code> or <code>MixedInstancesPolicy</code>.
  ##   HealthCheckGracePeriod: int
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   MixedInstancesPolicyLaunchTemplate: string
  ##                                     : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   NewInstancesProtectedFromScaleIn: bool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AvailabilityZones: JArray
  ##                    : One or more Availability Zones for the group.
  ##   HealthCheckType: string
  ##                  : The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.
  ##   TerminationPolicies: JArray
  ##                      : <p>A standalone termination policy or a list of termination policies used to select the instance to terminate. The policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   DesiredCapacity: int
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   DefaultCooldown: int
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>. This cooldown period is not used when a scaling-specific cooldown is specified.</p> <p>Cooldown periods are not supported for target tracking scaling policies, step scaling policies, or scheduled scaling. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   MinSize: int
  ##          : The minimum size of the Auto Scaling group.
  ##   PlacementGroup: string
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   LaunchTemplateVersion: string
  ##                        : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   MaxInstanceLifetime: int
  ##                      : <p>The maximum amount of time, in seconds, that an instance can be in service.</p> <p>Valid Range: Minimum value of 604800.</p>
  ##   Version: string (required)
  ##   VPCZoneIdentifier: string
  ##                    : <p>A comma-separated list of subnet IDs for virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p>
  ##   ServiceLinkedRoleARN: string
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   LaunchTemplateLaunchTemplateId: string
  ##                                 : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  var query_615291 = newJObject()
  add(query_615291, "MixedInstancesPolicy.InstancesDistribution",
      newJString(MixedInstancesPolicyInstancesDistribution))
  add(query_615291, "LaunchTemplate.LaunchTemplateName",
      newJString(LaunchTemplateLaunchTemplateName))
  add(query_615291, "MaxSize", newJInt(MaxSize))
  add(query_615291, "LaunchConfigurationName", newJString(LaunchConfigurationName))
  add(query_615291, "HealthCheckGracePeriod", newJInt(HealthCheckGracePeriod))
  add(query_615291, "MixedInstancesPolicy.LaunchTemplate",
      newJString(MixedInstancesPolicyLaunchTemplate))
  add(query_615291, "NewInstancesProtectedFromScaleIn",
      newJBool(NewInstancesProtectedFromScaleIn))
  if AvailabilityZones != nil:
    query_615291.add "AvailabilityZones", AvailabilityZones
  add(query_615291, "HealthCheckType", newJString(HealthCheckType))
  if TerminationPolicies != nil:
    query_615291.add "TerminationPolicies", TerminationPolicies
  add(query_615291, "DesiredCapacity", newJInt(DesiredCapacity))
  add(query_615291, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_615291, "DefaultCooldown", newJInt(DefaultCooldown))
  add(query_615291, "Action", newJString(Action))
  add(query_615291, "MinSize", newJInt(MinSize))
  add(query_615291, "PlacementGroup", newJString(PlacementGroup))
  add(query_615291, "LaunchTemplate.Version", newJString(LaunchTemplateVersion))
  add(query_615291, "MaxInstanceLifetime", newJInt(MaxInstanceLifetime))
  add(query_615291, "Version", newJString(Version))
  add(query_615291, "VPCZoneIdentifier", newJString(VPCZoneIdentifier))
  add(query_615291, "ServiceLinkedRoleARN", newJString(ServiceLinkedRoleARN))
  add(query_615291, "LaunchTemplate.LaunchTemplateId",
      newJString(LaunchTemplateLaunchTemplateId))
  result = call_615290.call(nil, query_615291, nil, nil, nil)

var getUpdateAutoScalingGroup* = Call_GetUpdateAutoScalingGroup_615257(
    name: "getUpdateAutoScalingGroup", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=UpdateAutoScalingGroup",
    validator: validate_GetUpdateAutoScalingGroup_615258, base: "/",
    url: url_GetUpdateAutoScalingGroup_615259,
    schemes: {Scheme.Https, Scheme.Http})
export
  rest

type
  EnvKind = enum
    BakeIntoBinary = "Baking $1 into the binary",
    FetchFromEnv = "Fetch $1 from the environment"
template sloppyConst(via: EnvKind; name: untyped): untyped =
  import
    macros

  const
    name {.strdefine.}: string = case via
    of BakeIntoBinary:
      getEnv(astToStr(name), "")
    of FetchFromEnv:
      ""
  static :
    let msg = block:
      if name == "":
        "Missing $1 in the environment"
      else:
        $via
    warning msg % [astToStr(name)]

sloppyConst FetchFromEnv, AWS_ACCESS_KEY_ID
sloppyConst FetchFromEnv, AWS_SECRET_ACCESS_KEY
sloppyConst BakeIntoBinary, AWS_REGION
sloppyConst FetchFromEnv, AWS_ACCOUNT_ID
proc atozSign(recall: var Recallable; query: JsonNode; algo: SigningAlgo = SHA256) =
  let
    date = makeDateTime()
    access = os.getEnv("AWS_ACCESS_KEY_ID", AWS_ACCESS_KEY_ID)
    secret = os.getEnv("AWS_SECRET_ACCESS_KEY", AWS_SECRET_ACCESS_KEY)
    region = os.getEnv("AWS_REGION", AWS_REGION)
  assert secret != "", "need $AWS_SECRET_ACCESS_KEY in environment"
  assert access != "", "need $AWS_ACCESS_KEY_ID in environment"
  assert region != "", "need $AWS_REGION in environment"
  var
    normal: PathNormal
    url = normalizeUrl(recall.url, query, normalize = normal)
    scheme = parseEnum[Scheme](url.scheme)
  assert scheme in awsServers, "unknown scheme `" & $scheme & "`"
  assert region in awsServers[scheme], "unknown region `" & region & "`"
  url.hostname = awsServers[scheme][region]
  case awsServiceName.toLowerAscii
  of "s3":
    normal = PathNormal.S3
  else:
    normal = PathNormal.Default
  recall.headers["Host"] = url.hostname
  recall.headers["X-Amz-Date"] = date
  let
    algo = SHA256
    scope = credentialScope(region = region, service = awsServiceName, date = date)
    request = canonicalRequest(recall.meth, $url, query, recall.headers, recall.body,
                             normalize = normal, digest = algo)
    sts = stringToSign(request.hash(algo), scope, date = date, digest = algo)
    signature = calculateSignature(secret = secret, date = date, region = region,
                                 service = awsServiceName, sts, digest = algo)
  var auth = $algo & " "
  auth &= "Credential=" & access / scope & ", "
  auth &= "SignedHeaders=" & recall.headers.signedHeaders & ", "
  auth &= "Signature=" & signature
  recall.headers["Authorization"] = auth
  recall.headers.del "Host"
  recall.url = $url

method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  ## the hook is a terrible earworm
  var headers = newHttpHeaders(massageHeaders(input.getOrDefault("header")))
  let
    body = input.getOrDefault("body")
    text = if body == nil:
      "" elif body.kind == JString:
      body.getStr else:
      $body
  if body != nil and body.kind != JString:
    if not headers.hasKey("content-type"):
      headers["content-type"] = "application/x-amz-json-1.0"
  const
    XAmzSecurityToken = "X-Amz-Security-Token"
  if not headers.hasKey(XAmzSecurityToken):
    let session = getEnv("AWS_SESSION_TOKEN", "")
    if session != "":
      headers[XAmzSecurityToken] = session
  result = newRecallable(call, url, headers, text)
  result.atozSign(input.getOrDefault("query"), SHA256)
