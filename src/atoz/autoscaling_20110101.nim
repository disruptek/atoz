
import
  json, options, hashes, uri, tables, rest, os, uri, strutils, httpcore, sigv4

## auto-generated via openapi macro
## title: Auto Scaling
## version: 2011-01-01
## termsOfService: https://aws.amazon.com/service-terms/
## license:
##     name: Apache 2.0 License
##     url: http://www.apache.org/licenses/
## 
## <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch or terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks. Use this service with AWS Auto Scaling, Amazon CloudWatch, and Elastic Load Balancing.</p> <p>For more information, including information about granting IAM users required permissions for Amazon EC2 Auto Scaling actions, see the <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">Amazon EC2 Auto Scaling User Guide</a>.</p>
## 
## Amazon Web Services documentation
## https://docs.aws.amazon.com/autoscaling/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_602466 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_602466](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_602466): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    if js.kind notin {JString, JInt, JFloat, JNull, JBool}:
      return
    head = $js
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  awsServers = {Scheme.Http: {"ap-northeast-1": "autoscaling.ap-northeast-1.amazonaws.com", "ap-southeast-1": "autoscaling.ap-southeast-1.amazonaws.com",
                           "us-west-2": "autoscaling.us-west-2.amazonaws.com",
                           "eu-west-2": "autoscaling.eu-west-2.amazonaws.com", "ap-northeast-3": "autoscaling.ap-northeast-3.amazonaws.com", "eu-central-1": "autoscaling.eu-central-1.amazonaws.com",
                           "us-east-2": "autoscaling.us-east-2.amazonaws.com",
                           "us-east-1": "autoscaling.us-east-1.amazonaws.com", "cn-northwest-1": "autoscaling.cn-northwest-1.amazonaws.com.cn", "ap-south-1": "autoscaling.ap-south-1.amazonaws.com", "eu-north-1": "autoscaling.eu-north-1.amazonaws.com", "ap-northeast-2": "autoscaling.ap-northeast-2.amazonaws.com",
                           "us-west-1": "autoscaling.us-west-1.amazonaws.com", "us-gov-east-1": "autoscaling.us-gov-east-1.amazonaws.com",
                           "eu-west-3": "autoscaling.eu-west-3.amazonaws.com", "cn-north-1": "autoscaling.cn-north-1.amazonaws.com.cn",
                           "sa-east-1": "autoscaling.sa-east-1.amazonaws.com",
                           "eu-west-1": "autoscaling.eu-west-1.amazonaws.com", "us-gov-west-1": "autoscaling.us-gov-west-1.amazonaws.com", "ap-southeast-2": "autoscaling.ap-southeast-2.amazonaws.com", "ca-central-1": "autoscaling.ca-central-1.amazonaws.com"}.toTable, Scheme.Https: {
      "ap-northeast-1": "autoscaling.ap-northeast-1.amazonaws.com",
      "ap-southeast-1": "autoscaling.ap-southeast-1.amazonaws.com",
      "us-west-2": "autoscaling.us-west-2.amazonaws.com",
      "eu-west-2": "autoscaling.eu-west-2.amazonaws.com",
      "ap-northeast-3": "autoscaling.ap-northeast-3.amazonaws.com",
      "eu-central-1": "autoscaling.eu-central-1.amazonaws.com",
      "us-east-2": "autoscaling.us-east-2.amazonaws.com",
      "us-east-1": "autoscaling.us-east-1.amazonaws.com",
      "cn-northwest-1": "autoscaling.cn-northwest-1.amazonaws.com.cn",
      "ap-south-1": "autoscaling.ap-south-1.amazonaws.com",
      "eu-north-1": "autoscaling.eu-north-1.amazonaws.com",
      "ap-northeast-2": "autoscaling.ap-northeast-2.amazonaws.com",
      "us-west-1": "autoscaling.us-west-1.amazonaws.com",
      "us-gov-east-1": "autoscaling.us-gov-east-1.amazonaws.com",
      "eu-west-3": "autoscaling.eu-west-3.amazonaws.com",
      "cn-north-1": "autoscaling.cn-north-1.amazonaws.com.cn",
      "sa-east-1": "autoscaling.sa-east-1.amazonaws.com",
      "eu-west-1": "autoscaling.eu-west-1.amazonaws.com",
      "us-gov-west-1": "autoscaling.us-gov-west-1.amazonaws.com",
      "ap-southeast-2": "autoscaling.ap-southeast-2.amazonaws.com",
      "ca-central-1": "autoscaling.ca-central-1.amazonaws.com"}.toTable}.toTable
const
  awsServiceName = "autoscaling"
method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_PostAttachInstances_603075 = ref object of OpenApiRestCall_602466
proc url_PostAttachInstances_603077(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostAttachInstances_603076(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Attaches one or more EC2 instances to the specified Auto Scaling group.</p> <p>When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.</p> <p>If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html">Attach EC2 Instances to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603078 = query.getOrDefault("Action")
  valid_603078 = validateParameter(valid_603078, JString, required = true,
                                 default = newJString("AttachInstances"))
  if valid_603078 != nil:
    section.add "Action", valid_603078
  var valid_603079 = query.getOrDefault("Version")
  valid_603079 = validateParameter(valid_603079, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603079 != nil:
    section.add "Version", valid_603079
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603080 = header.getOrDefault("X-Amz-Date")
  valid_603080 = validateParameter(valid_603080, JString, required = false,
                                 default = nil)
  if valid_603080 != nil:
    section.add "X-Amz-Date", valid_603080
  var valid_603081 = header.getOrDefault("X-Amz-Security-Token")
  valid_603081 = validateParameter(valid_603081, JString, required = false,
                                 default = nil)
  if valid_603081 != nil:
    section.add "X-Amz-Security-Token", valid_603081
  var valid_603082 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603082 = validateParameter(valid_603082, JString, required = false,
                                 default = nil)
  if valid_603082 != nil:
    section.add "X-Amz-Content-Sha256", valid_603082
  var valid_603083 = header.getOrDefault("X-Amz-Algorithm")
  valid_603083 = validateParameter(valid_603083, JString, required = false,
                                 default = nil)
  if valid_603083 != nil:
    section.add "X-Amz-Algorithm", valid_603083
  var valid_603084 = header.getOrDefault("X-Amz-Signature")
  valid_603084 = validateParameter(valid_603084, JString, required = false,
                                 default = nil)
  if valid_603084 != nil:
    section.add "X-Amz-Signature", valid_603084
  var valid_603085 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603085 = validateParameter(valid_603085, JString, required = false,
                                 default = nil)
  if valid_603085 != nil:
    section.add "X-Amz-SignedHeaders", valid_603085
  var valid_603086 = header.getOrDefault("X-Amz-Credential")
  valid_603086 = validateParameter(valid_603086, JString, required = false,
                                 default = nil)
  if valid_603086 != nil:
    section.add "X-Amz-Credential", valid_603086
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_603087 = formData.getOrDefault("AutoScalingGroupName")
  valid_603087 = validateParameter(valid_603087, JString, required = true,
                                 default = nil)
  if valid_603087 != nil:
    section.add "AutoScalingGroupName", valid_603087
  var valid_603088 = formData.getOrDefault("InstanceIds")
  valid_603088 = validateParameter(valid_603088, JArray, required = false,
                                 default = nil)
  if valid_603088 != nil:
    section.add "InstanceIds", valid_603088
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603089: Call_PostAttachInstances_603075; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches one or more EC2 instances to the specified Auto Scaling group.</p> <p>When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.</p> <p>If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html">Attach EC2 Instances to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_603089.validator(path, query, header, formData, body)
  let scheme = call_603089.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603089.url(scheme.get, call_603089.host, call_603089.base,
                         call_603089.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603089, url, valid)

proc call*(call_603090: Call_PostAttachInstances_603075;
          AutoScalingGroupName: string; InstanceIds: JsonNode = nil;
          Action: string = "AttachInstances"; Version: string = "2011-01-01"): Recallable =
  ## postAttachInstances
  ## <p>Attaches one or more EC2 instances to the specified Auto Scaling group.</p> <p>When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.</p> <p>If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html">Attach EC2 Instances to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603091 = newJObject()
  var formData_603092 = newJObject()
  add(formData_603092, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if InstanceIds != nil:
    formData_603092.add "InstanceIds", InstanceIds
  add(query_603091, "Action", newJString(Action))
  add(query_603091, "Version", newJString(Version))
  result = call_603090.call(nil, query_603091, nil, formData_603092, nil)

var postAttachInstances* = Call_PostAttachInstances_603075(
    name: "postAttachInstances", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=AttachInstances",
    validator: validate_PostAttachInstances_603076, base: "/",
    url: url_PostAttachInstances_603077, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAttachInstances_602803 = ref object of OpenApiRestCall_602466
proc url_GetAttachInstances_602805(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetAttachInstances_602804(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Attaches one or more EC2 instances to the specified Auto Scaling group.</p> <p>When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.</p> <p>If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html">Attach EC2 Instances to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_602917 = query.getOrDefault("AutoScalingGroupName")
  valid_602917 = validateParameter(valid_602917, JString, required = true,
                                 default = nil)
  if valid_602917 != nil:
    section.add "AutoScalingGroupName", valid_602917
  var valid_602931 = query.getOrDefault("Action")
  valid_602931 = validateParameter(valid_602931, JString, required = true,
                                 default = newJString("AttachInstances"))
  if valid_602931 != nil:
    section.add "Action", valid_602931
  var valid_602932 = query.getOrDefault("InstanceIds")
  valid_602932 = validateParameter(valid_602932, JArray, required = false,
                                 default = nil)
  if valid_602932 != nil:
    section.add "InstanceIds", valid_602932
  var valid_602933 = query.getOrDefault("Version")
  valid_602933 = validateParameter(valid_602933, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602933 != nil:
    section.add "Version", valid_602933
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602934 = header.getOrDefault("X-Amz-Date")
  valid_602934 = validateParameter(valid_602934, JString, required = false,
                                 default = nil)
  if valid_602934 != nil:
    section.add "X-Amz-Date", valid_602934
  var valid_602935 = header.getOrDefault("X-Amz-Security-Token")
  valid_602935 = validateParameter(valid_602935, JString, required = false,
                                 default = nil)
  if valid_602935 != nil:
    section.add "X-Amz-Security-Token", valid_602935
  var valid_602936 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602936 = validateParameter(valid_602936, JString, required = false,
                                 default = nil)
  if valid_602936 != nil:
    section.add "X-Amz-Content-Sha256", valid_602936
  var valid_602937 = header.getOrDefault("X-Amz-Algorithm")
  valid_602937 = validateParameter(valid_602937, JString, required = false,
                                 default = nil)
  if valid_602937 != nil:
    section.add "X-Amz-Algorithm", valid_602937
  var valid_602938 = header.getOrDefault("X-Amz-Signature")
  valid_602938 = validateParameter(valid_602938, JString, required = false,
                                 default = nil)
  if valid_602938 != nil:
    section.add "X-Amz-Signature", valid_602938
  var valid_602939 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602939 = validateParameter(valid_602939, JString, required = false,
                                 default = nil)
  if valid_602939 != nil:
    section.add "X-Amz-SignedHeaders", valid_602939
  var valid_602940 = header.getOrDefault("X-Amz-Credential")
  valid_602940 = validateParameter(valid_602940, JString, required = false,
                                 default = nil)
  if valid_602940 != nil:
    section.add "X-Amz-Credential", valid_602940
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602963: Call_GetAttachInstances_602803; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches one or more EC2 instances to the specified Auto Scaling group.</p> <p>When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.</p> <p>If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html">Attach EC2 Instances to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_602963.validator(path, query, header, formData, body)
  let scheme = call_602963.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602963.url(scheme.get, call_602963.host, call_602963.base,
                         call_602963.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_602963, url, valid)

proc call*(call_603034: Call_GetAttachInstances_602803;
          AutoScalingGroupName: string; Action: string = "AttachInstances";
          InstanceIds: JsonNode = nil; Version: string = "2011-01-01"): Recallable =
  ## getAttachInstances
  ## <p>Attaches one or more EC2 instances to the specified Auto Scaling group.</p> <p>When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.</p> <p>If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html">Attach EC2 Instances to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Version: string (required)
  var query_603035 = newJObject()
  add(query_603035, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_603035, "Action", newJString(Action))
  if InstanceIds != nil:
    query_603035.add "InstanceIds", InstanceIds
  add(query_603035, "Version", newJString(Version))
  result = call_603034.call(nil, query_603035, nil, nil, nil)

var getAttachInstances* = Call_GetAttachInstances_602803(
    name: "getAttachInstances", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=AttachInstances",
    validator: validate_GetAttachInstances_602804, base: "/",
    url: url_GetAttachInstances_602805, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAttachLoadBalancerTargetGroups_603110 = ref object of OpenApiRestCall_602466
proc url_PostAttachLoadBalancerTargetGroups_603112(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostAttachLoadBalancerTargetGroups_603111(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches one or more target groups to the specified Auto Scaling group. </p> <p>To describe the target groups for an Auto Scaling group, use <a>DescribeLoadBalancerTargetGroups</a>. To detach the target group from the Auto Scaling group, use <a>DetachLoadBalancerTargetGroups</a>.</p> <p>With Application Load Balancers and Network Load Balancers, instances are registered as targets with a target group. With Classic Load Balancers, instances are registered with the load balancer. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603113 = query.getOrDefault("Action")
  valid_603113 = validateParameter(valid_603113, JString, required = true, default = newJString(
      "AttachLoadBalancerTargetGroups"))
  if valid_603113 != nil:
    section.add "Action", valid_603113
  var valid_603114 = query.getOrDefault("Version")
  valid_603114 = validateParameter(valid_603114, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603114 != nil:
    section.add "Version", valid_603114
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603115 = header.getOrDefault("X-Amz-Date")
  valid_603115 = validateParameter(valid_603115, JString, required = false,
                                 default = nil)
  if valid_603115 != nil:
    section.add "X-Amz-Date", valid_603115
  var valid_603116 = header.getOrDefault("X-Amz-Security-Token")
  valid_603116 = validateParameter(valid_603116, JString, required = false,
                                 default = nil)
  if valid_603116 != nil:
    section.add "X-Amz-Security-Token", valid_603116
  var valid_603117 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603117 = validateParameter(valid_603117, JString, required = false,
                                 default = nil)
  if valid_603117 != nil:
    section.add "X-Amz-Content-Sha256", valid_603117
  var valid_603118 = header.getOrDefault("X-Amz-Algorithm")
  valid_603118 = validateParameter(valid_603118, JString, required = false,
                                 default = nil)
  if valid_603118 != nil:
    section.add "X-Amz-Algorithm", valid_603118
  var valid_603119 = header.getOrDefault("X-Amz-Signature")
  valid_603119 = validateParameter(valid_603119, JString, required = false,
                                 default = nil)
  if valid_603119 != nil:
    section.add "X-Amz-Signature", valid_603119
  var valid_603120 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603120 = validateParameter(valid_603120, JString, required = false,
                                 default = nil)
  if valid_603120 != nil:
    section.add "X-Amz-SignedHeaders", valid_603120
  var valid_603121 = header.getOrDefault("X-Amz-Credential")
  valid_603121 = validateParameter(valid_603121, JString, required = false,
                                 default = nil)
  if valid_603121 != nil:
    section.add "X-Amz-Credential", valid_603121
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_603122 = formData.getOrDefault("AutoScalingGroupName")
  valid_603122 = validateParameter(valid_603122, JString, required = true,
                                 default = nil)
  if valid_603122 != nil:
    section.add "AutoScalingGroupName", valid_603122
  var valid_603123 = formData.getOrDefault("TargetGroupARNs")
  valid_603123 = validateParameter(valid_603123, JArray, required = true, default = nil)
  if valid_603123 != nil:
    section.add "TargetGroupARNs", valid_603123
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603124: Call_PostAttachLoadBalancerTargetGroups_603110;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Attaches one or more target groups to the specified Auto Scaling group. </p> <p>To describe the target groups for an Auto Scaling group, use <a>DescribeLoadBalancerTargetGroups</a>. To detach the target group from the Auto Scaling group, use <a>DetachLoadBalancerTargetGroups</a>.</p> <p>With Application Load Balancers and Network Load Balancers, instances are registered as targets with a target group. With Classic Load Balancers, instances are registered with the load balancer. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_603124.validator(path, query, header, formData, body)
  let scheme = call_603124.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603124.url(scheme.get, call_603124.host, call_603124.base,
                         call_603124.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603124, url, valid)

proc call*(call_603125: Call_PostAttachLoadBalancerTargetGroups_603110;
          AutoScalingGroupName: string; TargetGroupARNs: JsonNode;
          Action: string = "AttachLoadBalancerTargetGroups";
          Version: string = "2011-01-01"): Recallable =
  ## postAttachLoadBalancerTargetGroups
  ## <p>Attaches one or more target groups to the specified Auto Scaling group. </p> <p>To describe the target groups for an Auto Scaling group, use <a>DescribeLoadBalancerTargetGroups</a>. To detach the target group from the Auto Scaling group, use <a>DetachLoadBalancerTargetGroups</a>.</p> <p>With Application Load Balancers and Network Load Balancers, instances are registered as targets with a target group. With Classic Load Balancers, instances are registered with the load balancer. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603126 = newJObject()
  var formData_603127 = newJObject()
  add(formData_603127, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if TargetGroupARNs != nil:
    formData_603127.add "TargetGroupARNs", TargetGroupARNs
  add(query_603126, "Action", newJString(Action))
  add(query_603126, "Version", newJString(Version))
  result = call_603125.call(nil, query_603126, nil, formData_603127, nil)

var postAttachLoadBalancerTargetGroups* = Call_PostAttachLoadBalancerTargetGroups_603110(
    name: "postAttachLoadBalancerTargetGroups", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=AttachLoadBalancerTargetGroups",
    validator: validate_PostAttachLoadBalancerTargetGroups_603111, base: "/",
    url: url_PostAttachLoadBalancerTargetGroups_603112,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAttachLoadBalancerTargetGroups_603093 = ref object of OpenApiRestCall_602466
proc url_GetAttachLoadBalancerTargetGroups_603095(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetAttachLoadBalancerTargetGroups_603094(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches one or more target groups to the specified Auto Scaling group. </p> <p>To describe the target groups for an Auto Scaling group, use <a>DescribeLoadBalancerTargetGroups</a>. To detach the target group from the Auto Scaling group, use <a>DetachLoadBalancerTargetGroups</a>.</p> <p>With Application Load Balancers and Network Load Balancers, instances are registered as targets with a target group. With Classic Load Balancers, instances are registered with the load balancer. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_603096 = query.getOrDefault("AutoScalingGroupName")
  valid_603096 = validateParameter(valid_603096, JString, required = true,
                                 default = nil)
  if valid_603096 != nil:
    section.add "AutoScalingGroupName", valid_603096
  var valid_603097 = query.getOrDefault("Action")
  valid_603097 = validateParameter(valid_603097, JString, required = true, default = newJString(
      "AttachLoadBalancerTargetGroups"))
  if valid_603097 != nil:
    section.add "Action", valid_603097
  var valid_603098 = query.getOrDefault("TargetGroupARNs")
  valid_603098 = validateParameter(valid_603098, JArray, required = true, default = nil)
  if valid_603098 != nil:
    section.add "TargetGroupARNs", valid_603098
  var valid_603099 = query.getOrDefault("Version")
  valid_603099 = validateParameter(valid_603099, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603099 != nil:
    section.add "Version", valid_603099
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603100 = header.getOrDefault("X-Amz-Date")
  valid_603100 = validateParameter(valid_603100, JString, required = false,
                                 default = nil)
  if valid_603100 != nil:
    section.add "X-Amz-Date", valid_603100
  var valid_603101 = header.getOrDefault("X-Amz-Security-Token")
  valid_603101 = validateParameter(valid_603101, JString, required = false,
                                 default = nil)
  if valid_603101 != nil:
    section.add "X-Amz-Security-Token", valid_603101
  var valid_603102 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603102 = validateParameter(valid_603102, JString, required = false,
                                 default = nil)
  if valid_603102 != nil:
    section.add "X-Amz-Content-Sha256", valid_603102
  var valid_603103 = header.getOrDefault("X-Amz-Algorithm")
  valid_603103 = validateParameter(valid_603103, JString, required = false,
                                 default = nil)
  if valid_603103 != nil:
    section.add "X-Amz-Algorithm", valid_603103
  var valid_603104 = header.getOrDefault("X-Amz-Signature")
  valid_603104 = validateParameter(valid_603104, JString, required = false,
                                 default = nil)
  if valid_603104 != nil:
    section.add "X-Amz-Signature", valid_603104
  var valid_603105 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603105 = validateParameter(valid_603105, JString, required = false,
                                 default = nil)
  if valid_603105 != nil:
    section.add "X-Amz-SignedHeaders", valid_603105
  var valid_603106 = header.getOrDefault("X-Amz-Credential")
  valid_603106 = validateParameter(valid_603106, JString, required = false,
                                 default = nil)
  if valid_603106 != nil:
    section.add "X-Amz-Credential", valid_603106
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603107: Call_GetAttachLoadBalancerTargetGroups_603093;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Attaches one or more target groups to the specified Auto Scaling group. </p> <p>To describe the target groups for an Auto Scaling group, use <a>DescribeLoadBalancerTargetGroups</a>. To detach the target group from the Auto Scaling group, use <a>DetachLoadBalancerTargetGroups</a>.</p> <p>With Application Load Balancers and Network Load Balancers, instances are registered as targets with a target group. With Classic Load Balancers, instances are registered with the load balancer. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_603107.validator(path, query, header, formData, body)
  let scheme = call_603107.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603107.url(scheme.get, call_603107.host, call_603107.base,
                         call_603107.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603107, url, valid)

proc call*(call_603108: Call_GetAttachLoadBalancerTargetGroups_603093;
          AutoScalingGroupName: string; TargetGroupARNs: JsonNode;
          Action: string = "AttachLoadBalancerTargetGroups";
          Version: string = "2011-01-01"): Recallable =
  ## getAttachLoadBalancerTargetGroups
  ## <p>Attaches one or more target groups to the specified Auto Scaling group. </p> <p>To describe the target groups for an Auto Scaling group, use <a>DescribeLoadBalancerTargetGroups</a>. To detach the target group from the Auto Scaling group, use <a>DetachLoadBalancerTargetGroups</a>.</p> <p>With Application Load Balancers and Network Load Balancers, instances are registered as targets with a target group. With Classic Load Balancers, instances are registered with the load balancer. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  ##   Version: string (required)
  var query_603109 = newJObject()
  add(query_603109, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_603109, "Action", newJString(Action))
  if TargetGroupARNs != nil:
    query_603109.add "TargetGroupARNs", TargetGroupARNs
  add(query_603109, "Version", newJString(Version))
  result = call_603108.call(nil, query_603109, nil, nil, nil)

var getAttachLoadBalancerTargetGroups* = Call_GetAttachLoadBalancerTargetGroups_603093(
    name: "getAttachLoadBalancerTargetGroups", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=AttachLoadBalancerTargetGroups",
    validator: validate_GetAttachLoadBalancerTargetGroups_603094, base: "/",
    url: url_GetAttachLoadBalancerTargetGroups_603095,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAttachLoadBalancers_603145 = ref object of OpenApiRestCall_602466
proc url_PostAttachLoadBalancers_603147(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostAttachLoadBalancers_603146(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches one or more Classic Load Balancers to the specified Auto Scaling group.</p> <p>To attach an Application Load Balancer or a Network Load Balancer instead, see <a>AttachLoadBalancerTargetGroups</a>.</p> <p>To describe the load balancers for an Auto Scaling group, use <a>DescribeLoadBalancers</a>. To detach the load balancer from the Auto Scaling group, use <a>DetachLoadBalancers</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603148 = query.getOrDefault("Action")
  valid_603148 = validateParameter(valid_603148, JString, required = true,
                                 default = newJString("AttachLoadBalancers"))
  if valid_603148 != nil:
    section.add "Action", valid_603148
  var valid_603149 = query.getOrDefault("Version")
  valid_603149 = validateParameter(valid_603149, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603149 != nil:
    section.add "Version", valid_603149
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603150 = header.getOrDefault("X-Amz-Date")
  valid_603150 = validateParameter(valid_603150, JString, required = false,
                                 default = nil)
  if valid_603150 != nil:
    section.add "X-Amz-Date", valid_603150
  var valid_603151 = header.getOrDefault("X-Amz-Security-Token")
  valid_603151 = validateParameter(valid_603151, JString, required = false,
                                 default = nil)
  if valid_603151 != nil:
    section.add "X-Amz-Security-Token", valid_603151
  var valid_603152 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603152 = validateParameter(valid_603152, JString, required = false,
                                 default = nil)
  if valid_603152 != nil:
    section.add "X-Amz-Content-Sha256", valid_603152
  var valid_603153 = header.getOrDefault("X-Amz-Algorithm")
  valid_603153 = validateParameter(valid_603153, JString, required = false,
                                 default = nil)
  if valid_603153 != nil:
    section.add "X-Amz-Algorithm", valid_603153
  var valid_603154 = header.getOrDefault("X-Amz-Signature")
  valid_603154 = validateParameter(valid_603154, JString, required = false,
                                 default = nil)
  if valid_603154 != nil:
    section.add "X-Amz-Signature", valid_603154
  var valid_603155 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603155 = validateParameter(valid_603155, JString, required = false,
                                 default = nil)
  if valid_603155 != nil:
    section.add "X-Amz-SignedHeaders", valid_603155
  var valid_603156 = header.getOrDefault("X-Amz-Credential")
  valid_603156 = validateParameter(valid_603156, JString, required = false,
                                 default = nil)
  if valid_603156 != nil:
    section.add "X-Amz-Credential", valid_603156
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_603157 = formData.getOrDefault("AutoScalingGroupName")
  valid_603157 = validateParameter(valid_603157, JString, required = true,
                                 default = nil)
  if valid_603157 != nil:
    section.add "AutoScalingGroupName", valid_603157
  var valid_603158 = formData.getOrDefault("LoadBalancerNames")
  valid_603158 = validateParameter(valid_603158, JArray, required = true, default = nil)
  if valid_603158 != nil:
    section.add "LoadBalancerNames", valid_603158
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603159: Call_PostAttachLoadBalancers_603145; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches one or more Classic Load Balancers to the specified Auto Scaling group.</p> <p>To attach an Application Load Balancer or a Network Load Balancer instead, see <a>AttachLoadBalancerTargetGroups</a>.</p> <p>To describe the load balancers for an Auto Scaling group, use <a>DescribeLoadBalancers</a>. To detach the load balancer from the Auto Scaling group, use <a>DetachLoadBalancers</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_603159.validator(path, query, header, formData, body)
  let scheme = call_603159.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603159.url(scheme.get, call_603159.host, call_603159.base,
                         call_603159.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603159, url, valid)

proc call*(call_603160: Call_PostAttachLoadBalancers_603145;
          AutoScalingGroupName: string; LoadBalancerNames: JsonNode;
          Action: string = "AttachLoadBalancers"; Version: string = "2011-01-01"): Recallable =
  ## postAttachLoadBalancers
  ## <p>Attaches one or more Classic Load Balancers to the specified Auto Scaling group.</p> <p>To attach an Application Load Balancer or a Network Load Balancer instead, see <a>AttachLoadBalancerTargetGroups</a>.</p> <p>To describe the load balancers for an Auto Scaling group, use <a>DescribeLoadBalancers</a>. To detach the load balancer from the Auto Scaling group, use <a>DetachLoadBalancers</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  ##   Version: string (required)
  var query_603161 = newJObject()
  var formData_603162 = newJObject()
  add(formData_603162, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_603161, "Action", newJString(Action))
  if LoadBalancerNames != nil:
    formData_603162.add "LoadBalancerNames", LoadBalancerNames
  add(query_603161, "Version", newJString(Version))
  result = call_603160.call(nil, query_603161, nil, formData_603162, nil)

var postAttachLoadBalancers* = Call_PostAttachLoadBalancers_603145(
    name: "postAttachLoadBalancers", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=AttachLoadBalancers",
    validator: validate_PostAttachLoadBalancers_603146, base: "/",
    url: url_PostAttachLoadBalancers_603147, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAttachLoadBalancers_603128 = ref object of OpenApiRestCall_602466
proc url_GetAttachLoadBalancers_603130(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetAttachLoadBalancers_603129(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches one or more Classic Load Balancers to the specified Auto Scaling group.</p> <p>To attach an Application Load Balancer or a Network Load Balancer instead, see <a>AttachLoadBalancerTargetGroups</a>.</p> <p>To describe the load balancers for an Auto Scaling group, use <a>DescribeLoadBalancers</a>. To detach the load balancer from the Auto Scaling group, use <a>DetachLoadBalancers</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_603131 = query.getOrDefault("AutoScalingGroupName")
  valid_603131 = validateParameter(valid_603131, JString, required = true,
                                 default = nil)
  if valid_603131 != nil:
    section.add "AutoScalingGroupName", valid_603131
  var valid_603132 = query.getOrDefault("Action")
  valid_603132 = validateParameter(valid_603132, JString, required = true,
                                 default = newJString("AttachLoadBalancers"))
  if valid_603132 != nil:
    section.add "Action", valid_603132
  var valid_603133 = query.getOrDefault("LoadBalancerNames")
  valid_603133 = validateParameter(valid_603133, JArray, required = true, default = nil)
  if valid_603133 != nil:
    section.add "LoadBalancerNames", valid_603133
  var valid_603134 = query.getOrDefault("Version")
  valid_603134 = validateParameter(valid_603134, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603134 != nil:
    section.add "Version", valid_603134
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603135 = header.getOrDefault("X-Amz-Date")
  valid_603135 = validateParameter(valid_603135, JString, required = false,
                                 default = nil)
  if valid_603135 != nil:
    section.add "X-Amz-Date", valid_603135
  var valid_603136 = header.getOrDefault("X-Amz-Security-Token")
  valid_603136 = validateParameter(valid_603136, JString, required = false,
                                 default = nil)
  if valid_603136 != nil:
    section.add "X-Amz-Security-Token", valid_603136
  var valid_603137 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603137 = validateParameter(valid_603137, JString, required = false,
                                 default = nil)
  if valid_603137 != nil:
    section.add "X-Amz-Content-Sha256", valid_603137
  var valid_603138 = header.getOrDefault("X-Amz-Algorithm")
  valid_603138 = validateParameter(valid_603138, JString, required = false,
                                 default = nil)
  if valid_603138 != nil:
    section.add "X-Amz-Algorithm", valid_603138
  var valid_603139 = header.getOrDefault("X-Amz-Signature")
  valid_603139 = validateParameter(valid_603139, JString, required = false,
                                 default = nil)
  if valid_603139 != nil:
    section.add "X-Amz-Signature", valid_603139
  var valid_603140 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603140 = validateParameter(valid_603140, JString, required = false,
                                 default = nil)
  if valid_603140 != nil:
    section.add "X-Amz-SignedHeaders", valid_603140
  var valid_603141 = header.getOrDefault("X-Amz-Credential")
  valid_603141 = validateParameter(valid_603141, JString, required = false,
                                 default = nil)
  if valid_603141 != nil:
    section.add "X-Amz-Credential", valid_603141
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603142: Call_GetAttachLoadBalancers_603128; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches one or more Classic Load Balancers to the specified Auto Scaling group.</p> <p>To attach an Application Load Balancer or a Network Load Balancer instead, see <a>AttachLoadBalancerTargetGroups</a>.</p> <p>To describe the load balancers for an Auto Scaling group, use <a>DescribeLoadBalancers</a>. To detach the load balancer from the Auto Scaling group, use <a>DetachLoadBalancers</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_603142.validator(path, query, header, formData, body)
  let scheme = call_603142.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603142.url(scheme.get, call_603142.host, call_603142.base,
                         call_603142.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603142, url, valid)

proc call*(call_603143: Call_GetAttachLoadBalancers_603128;
          AutoScalingGroupName: string; LoadBalancerNames: JsonNode;
          Action: string = "AttachLoadBalancers"; Version: string = "2011-01-01"): Recallable =
  ## getAttachLoadBalancers
  ## <p>Attaches one or more Classic Load Balancers to the specified Auto Scaling group.</p> <p>To attach an Application Load Balancer or a Network Load Balancer instead, see <a>AttachLoadBalancerTargetGroups</a>.</p> <p>To describe the load balancers for an Auto Scaling group, use <a>DescribeLoadBalancers</a>. To detach the load balancer from the Auto Scaling group, use <a>DetachLoadBalancers</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  ##   Version: string (required)
  var query_603144 = newJObject()
  add(query_603144, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_603144, "Action", newJString(Action))
  if LoadBalancerNames != nil:
    query_603144.add "LoadBalancerNames", LoadBalancerNames
  add(query_603144, "Version", newJString(Version))
  result = call_603143.call(nil, query_603144, nil, nil, nil)

var getAttachLoadBalancers* = Call_GetAttachLoadBalancers_603128(
    name: "getAttachLoadBalancers", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=AttachLoadBalancers",
    validator: validate_GetAttachLoadBalancers_603129, base: "/",
    url: url_GetAttachLoadBalancers_603130, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostBatchDeleteScheduledAction_603180 = ref object of OpenApiRestCall_602466
proc url_PostBatchDeleteScheduledAction_603182(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostBatchDeleteScheduledAction_603181(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes one or more scheduled actions for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603183 = query.getOrDefault("Action")
  valid_603183 = validateParameter(valid_603183, JString, required = true, default = newJString(
      "BatchDeleteScheduledAction"))
  if valid_603183 != nil:
    section.add "Action", valid_603183
  var valid_603184 = query.getOrDefault("Version")
  valid_603184 = validateParameter(valid_603184, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603184 != nil:
    section.add "Version", valid_603184
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603185 = header.getOrDefault("X-Amz-Date")
  valid_603185 = validateParameter(valid_603185, JString, required = false,
                                 default = nil)
  if valid_603185 != nil:
    section.add "X-Amz-Date", valid_603185
  var valid_603186 = header.getOrDefault("X-Amz-Security-Token")
  valid_603186 = validateParameter(valid_603186, JString, required = false,
                                 default = nil)
  if valid_603186 != nil:
    section.add "X-Amz-Security-Token", valid_603186
  var valid_603187 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603187 = validateParameter(valid_603187, JString, required = false,
                                 default = nil)
  if valid_603187 != nil:
    section.add "X-Amz-Content-Sha256", valid_603187
  var valid_603188 = header.getOrDefault("X-Amz-Algorithm")
  valid_603188 = validateParameter(valid_603188, JString, required = false,
                                 default = nil)
  if valid_603188 != nil:
    section.add "X-Amz-Algorithm", valid_603188
  var valid_603189 = header.getOrDefault("X-Amz-Signature")
  valid_603189 = validateParameter(valid_603189, JString, required = false,
                                 default = nil)
  if valid_603189 != nil:
    section.add "X-Amz-Signature", valid_603189
  var valid_603190 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603190 = validateParameter(valid_603190, JString, required = false,
                                 default = nil)
  if valid_603190 != nil:
    section.add "X-Amz-SignedHeaders", valid_603190
  var valid_603191 = header.getOrDefault("X-Amz-Credential")
  valid_603191 = validateParameter(valid_603191, JString, required = false,
                                 default = nil)
  if valid_603191 != nil:
    section.add "X-Amz-Credential", valid_603191
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScheduledActionNames: JArray (required)
  ##                       : The names of the scheduled actions to delete. The maximum number allowed is 50. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_603192 = formData.getOrDefault("AutoScalingGroupName")
  valid_603192 = validateParameter(valid_603192, JString, required = true,
                                 default = nil)
  if valid_603192 != nil:
    section.add "AutoScalingGroupName", valid_603192
  var valid_603193 = formData.getOrDefault("ScheduledActionNames")
  valid_603193 = validateParameter(valid_603193, JArray, required = true, default = nil)
  if valid_603193 != nil:
    section.add "ScheduledActionNames", valid_603193
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603194: Call_PostBatchDeleteScheduledAction_603180; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes one or more scheduled actions for the specified Auto Scaling group.
  ## 
  let valid = call_603194.validator(path, query, header, formData, body)
  let scheme = call_603194.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603194.url(scheme.get, call_603194.host, call_603194.base,
                         call_603194.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603194, url, valid)

proc call*(call_603195: Call_PostBatchDeleteScheduledAction_603180;
          AutoScalingGroupName: string; ScheduledActionNames: JsonNode;
          Action: string = "BatchDeleteScheduledAction";
          Version: string = "2011-01-01"): Recallable =
  ## postBatchDeleteScheduledAction
  ## Deletes one or more scheduled actions for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ScheduledActionNames: JArray (required)
  ##                       : The names of the scheduled actions to delete. The maximum number allowed is 50. 
  var query_603196 = newJObject()
  var formData_603197 = newJObject()
  add(formData_603197, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_603196, "Action", newJString(Action))
  add(query_603196, "Version", newJString(Version))
  if ScheduledActionNames != nil:
    formData_603197.add "ScheduledActionNames", ScheduledActionNames
  result = call_603195.call(nil, query_603196, nil, formData_603197, nil)

var postBatchDeleteScheduledAction* = Call_PostBatchDeleteScheduledAction_603180(
    name: "postBatchDeleteScheduledAction", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=BatchDeleteScheduledAction",
    validator: validate_PostBatchDeleteScheduledAction_603181, base: "/",
    url: url_PostBatchDeleteScheduledAction_603182,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBatchDeleteScheduledAction_603163 = ref object of OpenApiRestCall_602466
proc url_GetBatchDeleteScheduledAction_603165(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetBatchDeleteScheduledAction_603164(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes one or more scheduled actions for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   ScheduledActionNames: JArray (required)
  ##                       : The names of the scheduled actions to delete. The maximum number allowed is 50. 
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_603166 = query.getOrDefault("AutoScalingGroupName")
  valid_603166 = validateParameter(valid_603166, JString, required = true,
                                 default = nil)
  if valid_603166 != nil:
    section.add "AutoScalingGroupName", valid_603166
  var valid_603167 = query.getOrDefault("Action")
  valid_603167 = validateParameter(valid_603167, JString, required = true, default = newJString(
      "BatchDeleteScheduledAction"))
  if valid_603167 != nil:
    section.add "Action", valid_603167
  var valid_603168 = query.getOrDefault("ScheduledActionNames")
  valid_603168 = validateParameter(valid_603168, JArray, required = true, default = nil)
  if valid_603168 != nil:
    section.add "ScheduledActionNames", valid_603168
  var valid_603169 = query.getOrDefault("Version")
  valid_603169 = validateParameter(valid_603169, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603169 != nil:
    section.add "Version", valid_603169
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603170 = header.getOrDefault("X-Amz-Date")
  valid_603170 = validateParameter(valid_603170, JString, required = false,
                                 default = nil)
  if valid_603170 != nil:
    section.add "X-Amz-Date", valid_603170
  var valid_603171 = header.getOrDefault("X-Amz-Security-Token")
  valid_603171 = validateParameter(valid_603171, JString, required = false,
                                 default = nil)
  if valid_603171 != nil:
    section.add "X-Amz-Security-Token", valid_603171
  var valid_603172 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603172 = validateParameter(valid_603172, JString, required = false,
                                 default = nil)
  if valid_603172 != nil:
    section.add "X-Amz-Content-Sha256", valid_603172
  var valid_603173 = header.getOrDefault("X-Amz-Algorithm")
  valid_603173 = validateParameter(valid_603173, JString, required = false,
                                 default = nil)
  if valid_603173 != nil:
    section.add "X-Amz-Algorithm", valid_603173
  var valid_603174 = header.getOrDefault("X-Amz-Signature")
  valid_603174 = validateParameter(valid_603174, JString, required = false,
                                 default = nil)
  if valid_603174 != nil:
    section.add "X-Amz-Signature", valid_603174
  var valid_603175 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603175 = validateParameter(valid_603175, JString, required = false,
                                 default = nil)
  if valid_603175 != nil:
    section.add "X-Amz-SignedHeaders", valid_603175
  var valid_603176 = header.getOrDefault("X-Amz-Credential")
  valid_603176 = validateParameter(valid_603176, JString, required = false,
                                 default = nil)
  if valid_603176 != nil:
    section.add "X-Amz-Credential", valid_603176
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603177: Call_GetBatchDeleteScheduledAction_603163; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes one or more scheduled actions for the specified Auto Scaling group.
  ## 
  let valid = call_603177.validator(path, query, header, formData, body)
  let scheme = call_603177.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603177.url(scheme.get, call_603177.host, call_603177.base,
                         call_603177.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603177, url, valid)

proc call*(call_603178: Call_GetBatchDeleteScheduledAction_603163;
          AutoScalingGroupName: string; ScheduledActionNames: JsonNode;
          Action: string = "BatchDeleteScheduledAction";
          Version: string = "2011-01-01"): Recallable =
  ## getBatchDeleteScheduledAction
  ## Deletes one or more scheduled actions for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   ScheduledActionNames: JArray (required)
  ##                       : The names of the scheduled actions to delete. The maximum number allowed is 50. 
  ##   Version: string (required)
  var query_603179 = newJObject()
  add(query_603179, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_603179, "Action", newJString(Action))
  if ScheduledActionNames != nil:
    query_603179.add "ScheduledActionNames", ScheduledActionNames
  add(query_603179, "Version", newJString(Version))
  result = call_603178.call(nil, query_603179, nil, nil, nil)

var getBatchDeleteScheduledAction* = Call_GetBatchDeleteScheduledAction_603163(
    name: "getBatchDeleteScheduledAction", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=BatchDeleteScheduledAction",
    validator: validate_GetBatchDeleteScheduledAction_603164, base: "/",
    url: url_GetBatchDeleteScheduledAction_603165,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostBatchPutScheduledUpdateGroupAction_603215 = ref object of OpenApiRestCall_602466
proc url_PostBatchPutScheduledUpdateGroupAction_603217(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostBatchPutScheduledUpdateGroupAction_603216(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates or updates one or more scheduled scaling actions for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603218 = query.getOrDefault("Action")
  valid_603218 = validateParameter(valid_603218, JString, required = true, default = newJString(
      "BatchPutScheduledUpdateGroupAction"))
  if valid_603218 != nil:
    section.add "Action", valid_603218
  var valid_603219 = query.getOrDefault("Version")
  valid_603219 = validateParameter(valid_603219, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603219 != nil:
    section.add "Version", valid_603219
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603220 = header.getOrDefault("X-Amz-Date")
  valid_603220 = validateParameter(valid_603220, JString, required = false,
                                 default = nil)
  if valid_603220 != nil:
    section.add "X-Amz-Date", valid_603220
  var valid_603221 = header.getOrDefault("X-Amz-Security-Token")
  valid_603221 = validateParameter(valid_603221, JString, required = false,
                                 default = nil)
  if valid_603221 != nil:
    section.add "X-Amz-Security-Token", valid_603221
  var valid_603222 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603222 = validateParameter(valid_603222, JString, required = false,
                                 default = nil)
  if valid_603222 != nil:
    section.add "X-Amz-Content-Sha256", valid_603222
  var valid_603223 = header.getOrDefault("X-Amz-Algorithm")
  valid_603223 = validateParameter(valid_603223, JString, required = false,
                                 default = nil)
  if valid_603223 != nil:
    section.add "X-Amz-Algorithm", valid_603223
  var valid_603224 = header.getOrDefault("X-Amz-Signature")
  valid_603224 = validateParameter(valid_603224, JString, required = false,
                                 default = nil)
  if valid_603224 != nil:
    section.add "X-Amz-Signature", valid_603224
  var valid_603225 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603225 = validateParameter(valid_603225, JString, required = false,
                                 default = nil)
  if valid_603225 != nil:
    section.add "X-Amz-SignedHeaders", valid_603225
  var valid_603226 = header.getOrDefault("X-Amz-Credential")
  valid_603226 = validateParameter(valid_603226, JString, required = false,
                                 default = nil)
  if valid_603226 != nil:
    section.add "X-Amz-Credential", valid_603226
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScheduledUpdateGroupActions: JArray (required)
  ##                              : One or more scheduled actions. The maximum number allowed is 50. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_603227 = formData.getOrDefault("AutoScalingGroupName")
  valid_603227 = validateParameter(valid_603227, JString, required = true,
                                 default = nil)
  if valid_603227 != nil:
    section.add "AutoScalingGroupName", valid_603227
  var valid_603228 = formData.getOrDefault("ScheduledUpdateGroupActions")
  valid_603228 = validateParameter(valid_603228, JArray, required = true, default = nil)
  if valid_603228 != nil:
    section.add "ScheduledUpdateGroupActions", valid_603228
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603229: Call_PostBatchPutScheduledUpdateGroupAction_603215;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates or updates one or more scheduled scaling actions for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.
  ## 
  let valid = call_603229.validator(path, query, header, formData, body)
  let scheme = call_603229.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603229.url(scheme.get, call_603229.host, call_603229.base,
                         call_603229.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603229, url, valid)

proc call*(call_603230: Call_PostBatchPutScheduledUpdateGroupAction_603215;
          AutoScalingGroupName: string; ScheduledUpdateGroupActions: JsonNode;
          Action: string = "BatchPutScheduledUpdateGroupAction";
          Version: string = "2011-01-01"): Recallable =
  ## postBatchPutScheduledUpdateGroupAction
  ## Creates or updates one or more scheduled scaling actions for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScheduledUpdateGroupActions: JArray (required)
  ##                              : One or more scheduled actions. The maximum number allowed is 50. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603231 = newJObject()
  var formData_603232 = newJObject()
  add(formData_603232, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if ScheduledUpdateGroupActions != nil:
    formData_603232.add "ScheduledUpdateGroupActions", ScheduledUpdateGroupActions
  add(query_603231, "Action", newJString(Action))
  add(query_603231, "Version", newJString(Version))
  result = call_603230.call(nil, query_603231, nil, formData_603232, nil)

var postBatchPutScheduledUpdateGroupAction* = Call_PostBatchPutScheduledUpdateGroupAction_603215(
    name: "postBatchPutScheduledUpdateGroupAction", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=BatchPutScheduledUpdateGroupAction",
    validator: validate_PostBatchPutScheduledUpdateGroupAction_603216, base: "/",
    url: url_PostBatchPutScheduledUpdateGroupAction_603217,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBatchPutScheduledUpdateGroupAction_603198 = ref object of OpenApiRestCall_602466
proc url_GetBatchPutScheduledUpdateGroupAction_603200(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetBatchPutScheduledUpdateGroupAction_603199(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates or updates one or more scheduled scaling actions for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   ScheduledUpdateGroupActions: JArray (required)
  ##                              : One or more scheduled actions. The maximum number allowed is 50. 
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_603201 = query.getOrDefault("AutoScalingGroupName")
  valid_603201 = validateParameter(valid_603201, JString, required = true,
                                 default = nil)
  if valid_603201 != nil:
    section.add "AutoScalingGroupName", valid_603201
  var valid_603202 = query.getOrDefault("Action")
  valid_603202 = validateParameter(valid_603202, JString, required = true, default = newJString(
      "BatchPutScheduledUpdateGroupAction"))
  if valid_603202 != nil:
    section.add "Action", valid_603202
  var valid_603203 = query.getOrDefault("ScheduledUpdateGroupActions")
  valid_603203 = validateParameter(valid_603203, JArray, required = true, default = nil)
  if valid_603203 != nil:
    section.add "ScheduledUpdateGroupActions", valid_603203
  var valid_603204 = query.getOrDefault("Version")
  valid_603204 = validateParameter(valid_603204, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603204 != nil:
    section.add "Version", valid_603204
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603205 = header.getOrDefault("X-Amz-Date")
  valid_603205 = validateParameter(valid_603205, JString, required = false,
                                 default = nil)
  if valid_603205 != nil:
    section.add "X-Amz-Date", valid_603205
  var valid_603206 = header.getOrDefault("X-Amz-Security-Token")
  valid_603206 = validateParameter(valid_603206, JString, required = false,
                                 default = nil)
  if valid_603206 != nil:
    section.add "X-Amz-Security-Token", valid_603206
  var valid_603207 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603207 = validateParameter(valid_603207, JString, required = false,
                                 default = nil)
  if valid_603207 != nil:
    section.add "X-Amz-Content-Sha256", valid_603207
  var valid_603208 = header.getOrDefault("X-Amz-Algorithm")
  valid_603208 = validateParameter(valid_603208, JString, required = false,
                                 default = nil)
  if valid_603208 != nil:
    section.add "X-Amz-Algorithm", valid_603208
  var valid_603209 = header.getOrDefault("X-Amz-Signature")
  valid_603209 = validateParameter(valid_603209, JString, required = false,
                                 default = nil)
  if valid_603209 != nil:
    section.add "X-Amz-Signature", valid_603209
  var valid_603210 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603210 = validateParameter(valid_603210, JString, required = false,
                                 default = nil)
  if valid_603210 != nil:
    section.add "X-Amz-SignedHeaders", valid_603210
  var valid_603211 = header.getOrDefault("X-Amz-Credential")
  valid_603211 = validateParameter(valid_603211, JString, required = false,
                                 default = nil)
  if valid_603211 != nil:
    section.add "X-Amz-Credential", valid_603211
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603212: Call_GetBatchPutScheduledUpdateGroupAction_603198;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates or updates one or more scheduled scaling actions for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.
  ## 
  let valid = call_603212.validator(path, query, header, formData, body)
  let scheme = call_603212.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603212.url(scheme.get, call_603212.host, call_603212.base,
                         call_603212.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603212, url, valid)

proc call*(call_603213: Call_GetBatchPutScheduledUpdateGroupAction_603198;
          AutoScalingGroupName: string; ScheduledUpdateGroupActions: JsonNode;
          Action: string = "BatchPutScheduledUpdateGroupAction";
          Version: string = "2011-01-01"): Recallable =
  ## getBatchPutScheduledUpdateGroupAction
  ## Creates or updates one or more scheduled scaling actions for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   ScheduledUpdateGroupActions: JArray (required)
  ##                              : One or more scheduled actions. The maximum number allowed is 50. 
  ##   Version: string (required)
  var query_603214 = newJObject()
  add(query_603214, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_603214, "Action", newJString(Action))
  if ScheduledUpdateGroupActions != nil:
    query_603214.add "ScheduledUpdateGroupActions", ScheduledUpdateGroupActions
  add(query_603214, "Version", newJString(Version))
  result = call_603213.call(nil, query_603214, nil, nil, nil)

var getBatchPutScheduledUpdateGroupAction* = Call_GetBatchPutScheduledUpdateGroupAction_603198(
    name: "getBatchPutScheduledUpdateGroupAction", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=BatchPutScheduledUpdateGroupAction",
    validator: validate_GetBatchPutScheduledUpdateGroupAction_603199, base: "/",
    url: url_GetBatchPutScheduledUpdateGroupAction_603200,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCompleteLifecycleAction_603253 = ref object of OpenApiRestCall_602466
proc url_PostCompleteLifecycleAction_603255(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCompleteLifecycleAction_603254(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Completes the lifecycle action for the specified token or instance with the specified result.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</p> </li> <li> <p> <b>If you finish before the timeout period ends, complete the lifecycle action.</b> </p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603256 = query.getOrDefault("Action")
  valid_603256 = validateParameter(valid_603256, JString, required = true, default = newJString(
      "CompleteLifecycleAction"))
  if valid_603256 != nil:
    section.add "Action", valid_603256
  var valid_603257 = query.getOrDefault("Version")
  valid_603257 = validateParameter(valid_603257, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603257 != nil:
    section.add "Version", valid_603257
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603258 = header.getOrDefault("X-Amz-Date")
  valid_603258 = validateParameter(valid_603258, JString, required = false,
                                 default = nil)
  if valid_603258 != nil:
    section.add "X-Amz-Date", valid_603258
  var valid_603259 = header.getOrDefault("X-Amz-Security-Token")
  valid_603259 = validateParameter(valid_603259, JString, required = false,
                                 default = nil)
  if valid_603259 != nil:
    section.add "X-Amz-Security-Token", valid_603259
  var valid_603260 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603260 = validateParameter(valid_603260, JString, required = false,
                                 default = nil)
  if valid_603260 != nil:
    section.add "X-Amz-Content-Sha256", valid_603260
  var valid_603261 = header.getOrDefault("X-Amz-Algorithm")
  valid_603261 = validateParameter(valid_603261, JString, required = false,
                                 default = nil)
  if valid_603261 != nil:
    section.add "X-Amz-Algorithm", valid_603261
  var valid_603262 = header.getOrDefault("X-Amz-Signature")
  valid_603262 = validateParameter(valid_603262, JString, required = false,
                                 default = nil)
  if valid_603262 != nil:
    section.add "X-Amz-Signature", valid_603262
  var valid_603263 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603263 = validateParameter(valid_603263, JString, required = false,
                                 default = nil)
  if valid_603263 != nil:
    section.add "X-Amz-SignedHeaders", valid_603263
  var valid_603264 = header.getOrDefault("X-Amz-Credential")
  valid_603264 = validateParameter(valid_603264, JString, required = false,
                                 default = nil)
  if valid_603264 != nil:
    section.add "X-Amz-Credential", valid_603264
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceId: JString
  ##             : The ID of the instance.
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   LifecycleActionResult: JString (required)
  ##                        : The action for the group to take. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>.
  ##   LifecycleActionToken: JString
  ##                       : A universally unique identifier (UUID) that identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target you specified when you created the lifecycle hook.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_603265 = formData.getOrDefault("AutoScalingGroupName")
  valid_603265 = validateParameter(valid_603265, JString, required = true,
                                 default = nil)
  if valid_603265 != nil:
    section.add "AutoScalingGroupName", valid_603265
  var valid_603266 = formData.getOrDefault("InstanceId")
  valid_603266 = validateParameter(valid_603266, JString, required = false,
                                 default = nil)
  if valid_603266 != nil:
    section.add "InstanceId", valid_603266
  var valid_603267 = formData.getOrDefault("LifecycleHookName")
  valid_603267 = validateParameter(valid_603267, JString, required = true,
                                 default = nil)
  if valid_603267 != nil:
    section.add "LifecycleHookName", valid_603267
  var valid_603268 = formData.getOrDefault("LifecycleActionResult")
  valid_603268 = validateParameter(valid_603268, JString, required = true,
                                 default = nil)
  if valid_603268 != nil:
    section.add "LifecycleActionResult", valid_603268
  var valid_603269 = formData.getOrDefault("LifecycleActionToken")
  valid_603269 = validateParameter(valid_603269, JString, required = false,
                                 default = nil)
  if valid_603269 != nil:
    section.add "LifecycleActionToken", valid_603269
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603270: Call_PostCompleteLifecycleAction_603253; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Completes the lifecycle action for the specified token or instance with the specified result.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</p> </li> <li> <p> <b>If you finish before the timeout period ends, complete the lifecycle action.</b> </p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_603270.validator(path, query, header, formData, body)
  let scheme = call_603270.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603270.url(scheme.get, call_603270.host, call_603270.base,
                         call_603270.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603270, url, valid)

proc call*(call_603271: Call_PostCompleteLifecycleAction_603253;
          AutoScalingGroupName: string; LifecycleHookName: string;
          LifecycleActionResult: string;
          Action: string = "CompleteLifecycleAction"; InstanceId: string = "";
          Version: string = "2011-01-01"; LifecycleActionToken: string = ""): Recallable =
  ## postCompleteLifecycleAction
  ## <p>Completes the lifecycle action for the specified token or instance with the specified result.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</p> </li> <li> <p> <b>If you finish before the timeout period ends, complete the lifecycle action.</b> </p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   InstanceId: string
  ##             : The ID of the instance.
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   LifecycleActionResult: string (required)
  ##                        : The action for the group to take. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>.
  ##   Version: string (required)
  ##   LifecycleActionToken: string
  ##                       : A universally unique identifier (UUID) that identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target you specified when you created the lifecycle hook.
  var query_603272 = newJObject()
  var formData_603273 = newJObject()
  add(formData_603273, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_603272, "Action", newJString(Action))
  add(formData_603273, "InstanceId", newJString(InstanceId))
  add(formData_603273, "LifecycleHookName", newJString(LifecycleHookName))
  add(formData_603273, "LifecycleActionResult", newJString(LifecycleActionResult))
  add(query_603272, "Version", newJString(Version))
  add(formData_603273, "LifecycleActionToken", newJString(LifecycleActionToken))
  result = call_603271.call(nil, query_603272, nil, formData_603273, nil)

var postCompleteLifecycleAction* = Call_PostCompleteLifecycleAction_603253(
    name: "postCompleteLifecycleAction", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=CompleteLifecycleAction",
    validator: validate_PostCompleteLifecycleAction_603254, base: "/",
    url: url_PostCompleteLifecycleAction_603255,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCompleteLifecycleAction_603233 = ref object of OpenApiRestCall_602466
proc url_GetCompleteLifecycleAction_603235(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCompleteLifecycleAction_603234(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Completes the lifecycle action for the specified token or instance with the specified result.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</p> </li> <li> <p> <b>If you finish before the timeout period ends, complete the lifecycle action.</b> </p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleActionResult: JString (required)
  ##                        : The action for the group to take. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>.
  ##   Action: JString (required)
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   InstanceId: JString
  ##             : The ID of the instance.
  ##   Version: JString (required)
  ##   LifecycleActionToken: JString
  ##                       : A universally unique identifier (UUID) that identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target you specified when you created the lifecycle hook.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_603236 = query.getOrDefault("AutoScalingGroupName")
  valid_603236 = validateParameter(valid_603236, JString, required = true,
                                 default = nil)
  if valid_603236 != nil:
    section.add "AutoScalingGroupName", valid_603236
  var valid_603237 = query.getOrDefault("LifecycleActionResult")
  valid_603237 = validateParameter(valid_603237, JString, required = true,
                                 default = nil)
  if valid_603237 != nil:
    section.add "LifecycleActionResult", valid_603237
  var valid_603238 = query.getOrDefault("Action")
  valid_603238 = validateParameter(valid_603238, JString, required = true, default = newJString(
      "CompleteLifecycleAction"))
  if valid_603238 != nil:
    section.add "Action", valid_603238
  var valid_603239 = query.getOrDefault("LifecycleHookName")
  valid_603239 = validateParameter(valid_603239, JString, required = true,
                                 default = nil)
  if valid_603239 != nil:
    section.add "LifecycleHookName", valid_603239
  var valid_603240 = query.getOrDefault("InstanceId")
  valid_603240 = validateParameter(valid_603240, JString, required = false,
                                 default = nil)
  if valid_603240 != nil:
    section.add "InstanceId", valid_603240
  var valid_603241 = query.getOrDefault("Version")
  valid_603241 = validateParameter(valid_603241, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603241 != nil:
    section.add "Version", valid_603241
  var valid_603242 = query.getOrDefault("LifecycleActionToken")
  valid_603242 = validateParameter(valid_603242, JString, required = false,
                                 default = nil)
  if valid_603242 != nil:
    section.add "LifecycleActionToken", valid_603242
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603243 = header.getOrDefault("X-Amz-Date")
  valid_603243 = validateParameter(valid_603243, JString, required = false,
                                 default = nil)
  if valid_603243 != nil:
    section.add "X-Amz-Date", valid_603243
  var valid_603244 = header.getOrDefault("X-Amz-Security-Token")
  valid_603244 = validateParameter(valid_603244, JString, required = false,
                                 default = nil)
  if valid_603244 != nil:
    section.add "X-Amz-Security-Token", valid_603244
  var valid_603245 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603245 = validateParameter(valid_603245, JString, required = false,
                                 default = nil)
  if valid_603245 != nil:
    section.add "X-Amz-Content-Sha256", valid_603245
  var valid_603246 = header.getOrDefault("X-Amz-Algorithm")
  valid_603246 = validateParameter(valid_603246, JString, required = false,
                                 default = nil)
  if valid_603246 != nil:
    section.add "X-Amz-Algorithm", valid_603246
  var valid_603247 = header.getOrDefault("X-Amz-Signature")
  valid_603247 = validateParameter(valid_603247, JString, required = false,
                                 default = nil)
  if valid_603247 != nil:
    section.add "X-Amz-Signature", valid_603247
  var valid_603248 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603248 = validateParameter(valid_603248, JString, required = false,
                                 default = nil)
  if valid_603248 != nil:
    section.add "X-Amz-SignedHeaders", valid_603248
  var valid_603249 = header.getOrDefault("X-Amz-Credential")
  valid_603249 = validateParameter(valid_603249, JString, required = false,
                                 default = nil)
  if valid_603249 != nil:
    section.add "X-Amz-Credential", valid_603249
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603250: Call_GetCompleteLifecycleAction_603233; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Completes the lifecycle action for the specified token or instance with the specified result.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</p> </li> <li> <p> <b>If you finish before the timeout period ends, complete the lifecycle action.</b> </p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_603250.validator(path, query, header, formData, body)
  let scheme = call_603250.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603250.url(scheme.get, call_603250.host, call_603250.base,
                         call_603250.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603250, url, valid)

proc call*(call_603251: Call_GetCompleteLifecycleAction_603233;
          AutoScalingGroupName: string; LifecycleActionResult: string;
          LifecycleHookName: string; Action: string = "CompleteLifecycleAction";
          InstanceId: string = ""; Version: string = "2011-01-01";
          LifecycleActionToken: string = ""): Recallable =
  ## getCompleteLifecycleAction
  ## <p>Completes the lifecycle action for the specified token or instance with the specified result.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</p> </li> <li> <p> <b>If you finish before the timeout period ends, complete the lifecycle action.</b> </p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleActionResult: string (required)
  ##                        : The action for the group to take. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>.
  ##   Action: string (required)
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   InstanceId: string
  ##             : The ID of the instance.
  ##   Version: string (required)
  ##   LifecycleActionToken: string
  ##                       : A universally unique identifier (UUID) that identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target you specified when you created the lifecycle hook.
  var query_603252 = newJObject()
  add(query_603252, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_603252, "LifecycleActionResult", newJString(LifecycleActionResult))
  add(query_603252, "Action", newJString(Action))
  add(query_603252, "LifecycleHookName", newJString(LifecycleHookName))
  add(query_603252, "InstanceId", newJString(InstanceId))
  add(query_603252, "Version", newJString(Version))
  add(query_603252, "LifecycleActionToken", newJString(LifecycleActionToken))
  result = call_603251.call(nil, query_603252, nil, nil, nil)

var getCompleteLifecycleAction* = Call_GetCompleteLifecycleAction_603233(
    name: "getCompleteLifecycleAction", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=CompleteLifecycleAction",
    validator: validate_GetCompleteLifecycleAction_603234, base: "/",
    url: url_GetCompleteLifecycleAction_603235,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateAutoScalingGroup_603313 = ref object of OpenApiRestCall_602466
proc url_PostCreateAutoScalingGroup_603315(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateAutoScalingGroup_603314(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an Auto Scaling group with the specified name and attributes.</p> <p>If you exceed your maximum limit of Auto Scaling groups, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603316 = query.getOrDefault("Action")
  valid_603316 = validateParameter(valid_603316, JString, required = true,
                                 default = newJString("CreateAutoScalingGroup"))
  if valid_603316 != nil:
    section.add "Action", valid_603316
  var valid_603317 = query.getOrDefault("Version")
  valid_603317 = validateParameter(valid_603317, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603317 != nil:
    section.add "Version", valid_603317
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603318 = header.getOrDefault("X-Amz-Date")
  valid_603318 = validateParameter(valid_603318, JString, required = false,
                                 default = nil)
  if valid_603318 != nil:
    section.add "X-Amz-Date", valid_603318
  var valid_603319 = header.getOrDefault("X-Amz-Security-Token")
  valid_603319 = validateParameter(valid_603319, JString, required = false,
                                 default = nil)
  if valid_603319 != nil:
    section.add "X-Amz-Security-Token", valid_603319
  var valid_603320 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603320 = validateParameter(valid_603320, JString, required = false,
                                 default = nil)
  if valid_603320 != nil:
    section.add "X-Amz-Content-Sha256", valid_603320
  var valid_603321 = header.getOrDefault("X-Amz-Algorithm")
  valid_603321 = validateParameter(valid_603321, JString, required = false,
                                 default = nil)
  if valid_603321 != nil:
    section.add "X-Amz-Algorithm", valid_603321
  var valid_603322 = header.getOrDefault("X-Amz-Signature")
  valid_603322 = validateParameter(valid_603322, JString, required = false,
                                 default = nil)
  if valid_603322 != nil:
    section.add "X-Amz-Signature", valid_603322
  var valid_603323 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603323 = validateParameter(valid_603323, JString, required = false,
                                 default = nil)
  if valid_603323 != nil:
    section.add "X-Amz-SignedHeaders", valid_603323
  var valid_603324 = header.getOrDefault("X-Amz-Credential")
  valid_603324 = validateParameter(valid_603324, JString, required = false,
                                 default = nil)
  if valid_603324 != nil:
    section.add "X-Amz-Credential", valid_603324
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group. This name must be unique per Region per account.
  ##   LaunchTemplate.LaunchTemplateId: JString
  ##                                  : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  ##   LaunchConfigurationName: JString
  ##                          : <p>The name of the launch configuration.</p> <p>If you do not specify <code>LaunchConfigurationName</code>, you must specify one of the following parameters: <code>InstanceId</code>, <code>LaunchTemplate</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   HealthCheckType: JString
  ##                  : <p>The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. The default value is <code>EC2</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   ServiceLinkedRoleARN: JString
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. By default, Amazon EC2 Auto Scaling uses a service-linked role named AWSServiceRoleForAutoScaling, which it creates if it does not exist. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   DesiredCapacity: JInt
  ##                  : The number of Amazon EC2 instances that the Auto Scaling group attempts to maintain. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group. If you do not specify a desired capacity, the default is the minimum size of the group.
  ##   HealthCheckGracePeriod: JInt
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. During this time, any health check failures for the instance are ignored. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   VPCZoneIdentifier: JString
  ##                    : <p>A comma-separated list of subnet IDs for your virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into a VPC.</p>
  ##   Tags: JArray
  ##       : <p>One or more tags.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   TargetGroupARNs: JArray
  ##                  : <p>The Amazon Resource Names (ARN) of the target groups to associate with the Auto Scaling group. Instances are registered as targets in a target group, and traffic is routed to the target group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AvailabilityZones: JArray
  ##                    : <p>One or more Availability Zones for the group. This parameter is optional if you specify one or more subnets for <code>VPCZoneIdentifier</code>.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into EC2-Classic.</p>
  ##   InstanceId: JString
  ##             : <p>The ID of the instance used to create a launch configuration for the group.</p> <p>When you specify an ID of an instance, Amazon EC2 Auto Scaling creates a new launch configuration and associates it with the group. This launch configuration derives its attributes from the specified instance, except for the block device mapping.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-from-instance.html">Create an Auto Scaling Group Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You must specify one of the following parameters in your request: <code>LaunchConfigurationName</code>, <code>LaunchTemplate</code>, <code>InstanceId</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   MinSize: JInt (required)
  ##          : The minimum size of the group.
  ##   DefaultCooldown: JInt
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MixedInstancesPolicy.LaunchTemplate: JString
  ##                                      : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   LoadBalancerNames: JArray
  ##                    : <p>A list of Classic Load Balancers associated with this Auto Scaling group. For Application Load Balancers and Network Load Balancers, specify a list of target groups using the <code>TargetGroupARNs</code> property instead.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MaxSize: JInt (required)
  ##          : The maximum size of the group.
  ##   MixedInstancesPolicy.InstancesDistribution: JString
  ##                                             : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified when creating a mixed instances policy, the default values are used.</p>
  ##   PlacementGroup: JString
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   NewInstancesProtectedFromScaleIn: JBool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LaunchTemplate.Version: JString
  ##                         : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   TerminationPolicies: JArray
  ##                      : <p>One or more termination policies used to select the instance to terminate. These policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LaunchTemplate.LaunchTemplateName: JString
  ##                                    : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   LifecycleHookSpecificationList: JArray
  ##                                 : One or more lifecycle hooks.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_603325 = formData.getOrDefault("AutoScalingGroupName")
  valid_603325 = validateParameter(valid_603325, JString, required = true,
                                 default = nil)
  if valid_603325 != nil:
    section.add "AutoScalingGroupName", valid_603325
  var valid_603326 = formData.getOrDefault("LaunchTemplate.LaunchTemplateId")
  valid_603326 = validateParameter(valid_603326, JString, required = false,
                                 default = nil)
  if valid_603326 != nil:
    section.add "LaunchTemplate.LaunchTemplateId", valid_603326
  var valid_603327 = formData.getOrDefault("LaunchConfigurationName")
  valid_603327 = validateParameter(valid_603327, JString, required = false,
                                 default = nil)
  if valid_603327 != nil:
    section.add "LaunchConfigurationName", valid_603327
  var valid_603328 = formData.getOrDefault("HealthCheckType")
  valid_603328 = validateParameter(valid_603328, JString, required = false,
                                 default = nil)
  if valid_603328 != nil:
    section.add "HealthCheckType", valid_603328
  var valid_603329 = formData.getOrDefault("ServiceLinkedRoleARN")
  valid_603329 = validateParameter(valid_603329, JString, required = false,
                                 default = nil)
  if valid_603329 != nil:
    section.add "ServiceLinkedRoleARN", valid_603329
  var valid_603330 = formData.getOrDefault("DesiredCapacity")
  valid_603330 = validateParameter(valid_603330, JInt, required = false, default = nil)
  if valid_603330 != nil:
    section.add "DesiredCapacity", valid_603330
  var valid_603331 = formData.getOrDefault("HealthCheckGracePeriod")
  valid_603331 = validateParameter(valid_603331, JInt, required = false, default = nil)
  if valid_603331 != nil:
    section.add "HealthCheckGracePeriod", valid_603331
  var valid_603332 = formData.getOrDefault("VPCZoneIdentifier")
  valid_603332 = validateParameter(valid_603332, JString, required = false,
                                 default = nil)
  if valid_603332 != nil:
    section.add "VPCZoneIdentifier", valid_603332
  var valid_603333 = formData.getOrDefault("Tags")
  valid_603333 = validateParameter(valid_603333, JArray, required = false,
                                 default = nil)
  if valid_603333 != nil:
    section.add "Tags", valid_603333
  var valid_603334 = formData.getOrDefault("TargetGroupARNs")
  valid_603334 = validateParameter(valid_603334, JArray, required = false,
                                 default = nil)
  if valid_603334 != nil:
    section.add "TargetGroupARNs", valid_603334
  var valid_603335 = formData.getOrDefault("AvailabilityZones")
  valid_603335 = validateParameter(valid_603335, JArray, required = false,
                                 default = nil)
  if valid_603335 != nil:
    section.add "AvailabilityZones", valid_603335
  var valid_603336 = formData.getOrDefault("InstanceId")
  valid_603336 = validateParameter(valid_603336, JString, required = false,
                                 default = nil)
  if valid_603336 != nil:
    section.add "InstanceId", valid_603336
  var valid_603337 = formData.getOrDefault("MinSize")
  valid_603337 = validateParameter(valid_603337, JInt, required = true, default = nil)
  if valid_603337 != nil:
    section.add "MinSize", valid_603337
  var valid_603338 = formData.getOrDefault("DefaultCooldown")
  valid_603338 = validateParameter(valid_603338, JInt, required = false, default = nil)
  if valid_603338 != nil:
    section.add "DefaultCooldown", valid_603338
  var valid_603339 = formData.getOrDefault("MixedInstancesPolicy.LaunchTemplate")
  valid_603339 = validateParameter(valid_603339, JString, required = false,
                                 default = nil)
  if valid_603339 != nil:
    section.add "MixedInstancesPolicy.LaunchTemplate", valid_603339
  var valid_603340 = formData.getOrDefault("LoadBalancerNames")
  valid_603340 = validateParameter(valid_603340, JArray, required = false,
                                 default = nil)
  if valid_603340 != nil:
    section.add "LoadBalancerNames", valid_603340
  var valid_603341 = formData.getOrDefault("MaxSize")
  valid_603341 = validateParameter(valid_603341, JInt, required = true, default = nil)
  if valid_603341 != nil:
    section.add "MaxSize", valid_603341
  var valid_603342 = formData.getOrDefault("MixedInstancesPolicy.InstancesDistribution")
  valid_603342 = validateParameter(valid_603342, JString, required = false,
                                 default = nil)
  if valid_603342 != nil:
    section.add "MixedInstancesPolicy.InstancesDistribution", valid_603342
  var valid_603343 = formData.getOrDefault("PlacementGroup")
  valid_603343 = validateParameter(valid_603343, JString, required = false,
                                 default = nil)
  if valid_603343 != nil:
    section.add "PlacementGroup", valid_603343
  var valid_603344 = formData.getOrDefault("NewInstancesProtectedFromScaleIn")
  valid_603344 = validateParameter(valid_603344, JBool, required = false, default = nil)
  if valid_603344 != nil:
    section.add "NewInstancesProtectedFromScaleIn", valid_603344
  var valid_603345 = formData.getOrDefault("LaunchTemplate.Version")
  valid_603345 = validateParameter(valid_603345, JString, required = false,
                                 default = nil)
  if valid_603345 != nil:
    section.add "LaunchTemplate.Version", valid_603345
  var valid_603346 = formData.getOrDefault("TerminationPolicies")
  valid_603346 = validateParameter(valid_603346, JArray, required = false,
                                 default = nil)
  if valid_603346 != nil:
    section.add "TerminationPolicies", valid_603346
  var valid_603347 = formData.getOrDefault("LaunchTemplate.LaunchTemplateName")
  valid_603347 = validateParameter(valid_603347, JString, required = false,
                                 default = nil)
  if valid_603347 != nil:
    section.add "LaunchTemplate.LaunchTemplateName", valid_603347
  var valid_603348 = formData.getOrDefault("LifecycleHookSpecificationList")
  valid_603348 = validateParameter(valid_603348, JArray, required = false,
                                 default = nil)
  if valid_603348 != nil:
    section.add "LifecycleHookSpecificationList", valid_603348
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603349: Call_PostCreateAutoScalingGroup_603313; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an Auto Scaling group with the specified name and attributes.</p> <p>If you exceed your maximum limit of Auto Scaling groups, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_603349.validator(path, query, header, formData, body)
  let scheme = call_603349.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603349.url(scheme.get, call_603349.host, call_603349.base,
                         call_603349.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603349, url, valid)

proc call*(call_603350: Call_PostCreateAutoScalingGroup_603313;
          AutoScalingGroupName: string; MinSize: int; MaxSize: int;
          LaunchTemplateLaunchTemplateId: string = "";
          LaunchConfigurationName: string = ""; HealthCheckType: string = "";
          ServiceLinkedRoleARN: string = ""; DesiredCapacity: int = 0;
          HealthCheckGracePeriod: int = 0; VPCZoneIdentifier: string = "";
          Tags: JsonNode = nil; TargetGroupARNs: JsonNode = nil;
          Action: string = "CreateAutoScalingGroup";
          AvailabilityZones: JsonNode = nil; InstanceId: string = "";
          DefaultCooldown: int = 0; MixedInstancesPolicyLaunchTemplate: string = "";
          LoadBalancerNames: JsonNode = nil;
          MixedInstancesPolicyInstancesDistribution: string = "";
          PlacementGroup: string = "";
          NewInstancesProtectedFromScaleIn: bool = false;
          LaunchTemplateVersion: string = ""; TerminationPolicies: JsonNode = nil;
          Version: string = "2011-01-01";
          LaunchTemplateLaunchTemplateName: string = "";
          LifecycleHookSpecificationList: JsonNode = nil): Recallable =
  ## postCreateAutoScalingGroup
  ## <p>Creates an Auto Scaling group with the specified name and attributes.</p> <p>If you exceed your maximum limit of Auto Scaling groups, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group. This name must be unique per Region per account.
  ##   LaunchTemplateLaunchTemplateId: string
  ##                                 : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  ##   LaunchConfigurationName: string
  ##                          : <p>The name of the launch configuration.</p> <p>If you do not specify <code>LaunchConfigurationName</code>, you must specify one of the following parameters: <code>InstanceId</code>, <code>LaunchTemplate</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   HealthCheckType: string
  ##                  : <p>The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. The default value is <code>EC2</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   ServiceLinkedRoleARN: string
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. By default, Amazon EC2 Auto Scaling uses a service-linked role named AWSServiceRoleForAutoScaling, which it creates if it does not exist. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   DesiredCapacity: int
  ##                  : The number of Amazon EC2 instances that the Auto Scaling group attempts to maintain. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group. If you do not specify a desired capacity, the default is the minimum size of the group.
  ##   HealthCheckGracePeriod: int
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. During this time, any health check failures for the instance are ignored. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   VPCZoneIdentifier: string
  ##                    : <p>A comma-separated list of subnet IDs for your virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into a VPC.</p>
  ##   Tags: JArray
  ##       : <p>One or more tags.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   TargetGroupARNs: JArray
  ##                  : <p>The Amazon Resource Names (ARN) of the target groups to associate with the Auto Scaling group. Instances are registered as targets in a target group, and traffic is routed to the target group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   AvailabilityZones: JArray
  ##                    : <p>One or more Availability Zones for the group. This parameter is optional if you specify one or more subnets for <code>VPCZoneIdentifier</code>.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into EC2-Classic.</p>
  ##   InstanceId: string
  ##             : <p>The ID of the instance used to create a launch configuration for the group.</p> <p>When you specify an ID of an instance, Amazon EC2 Auto Scaling creates a new launch configuration and associates it with the group. This launch configuration derives its attributes from the specified instance, except for the block device mapping.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-from-instance.html">Create an Auto Scaling Group Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You must specify one of the following parameters in your request: <code>LaunchConfigurationName</code>, <code>LaunchTemplate</code>, <code>InstanceId</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   MinSize: int (required)
  ##          : The minimum size of the group.
  ##   DefaultCooldown: int
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MixedInstancesPolicyLaunchTemplate: string
  ##                                     : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   LoadBalancerNames: JArray
  ##                    : <p>A list of Classic Load Balancers associated with this Auto Scaling group. For Application Load Balancers and Network Load Balancers, specify a list of target groups using the <code>TargetGroupARNs</code> property instead.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MaxSize: int (required)
  ##          : The maximum size of the group.
  ##   MixedInstancesPolicyInstancesDistribution: string
  ##                                            : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified when creating a mixed instances policy, the default values are used.</p>
  ##   PlacementGroup: string
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   NewInstancesProtectedFromScaleIn: bool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LaunchTemplateVersion: string
  ##                        : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   TerminationPolicies: JArray
  ##                      : <p>One or more termination policies used to select the instance to terminate. These policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Version: string (required)
  ##   LaunchTemplateLaunchTemplateName: string
  ##                                   : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   LifecycleHookSpecificationList: JArray
  ##                                 : One or more lifecycle hooks.
  var query_603351 = newJObject()
  var formData_603352 = newJObject()
  add(formData_603352, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_603352, "LaunchTemplate.LaunchTemplateId",
      newJString(LaunchTemplateLaunchTemplateId))
  add(formData_603352, "LaunchConfigurationName",
      newJString(LaunchConfigurationName))
  add(formData_603352, "HealthCheckType", newJString(HealthCheckType))
  add(formData_603352, "ServiceLinkedRoleARN", newJString(ServiceLinkedRoleARN))
  add(formData_603352, "DesiredCapacity", newJInt(DesiredCapacity))
  add(formData_603352, "HealthCheckGracePeriod", newJInt(HealthCheckGracePeriod))
  add(formData_603352, "VPCZoneIdentifier", newJString(VPCZoneIdentifier))
  if Tags != nil:
    formData_603352.add "Tags", Tags
  if TargetGroupARNs != nil:
    formData_603352.add "TargetGroupARNs", TargetGroupARNs
  add(query_603351, "Action", newJString(Action))
  if AvailabilityZones != nil:
    formData_603352.add "AvailabilityZones", AvailabilityZones
  add(formData_603352, "InstanceId", newJString(InstanceId))
  add(formData_603352, "MinSize", newJInt(MinSize))
  add(formData_603352, "DefaultCooldown", newJInt(DefaultCooldown))
  add(formData_603352, "MixedInstancesPolicy.LaunchTemplate",
      newJString(MixedInstancesPolicyLaunchTemplate))
  if LoadBalancerNames != nil:
    formData_603352.add "LoadBalancerNames", LoadBalancerNames
  add(formData_603352, "MaxSize", newJInt(MaxSize))
  add(formData_603352, "MixedInstancesPolicy.InstancesDistribution",
      newJString(MixedInstancesPolicyInstancesDistribution))
  add(formData_603352, "PlacementGroup", newJString(PlacementGroup))
  add(formData_603352, "NewInstancesProtectedFromScaleIn",
      newJBool(NewInstancesProtectedFromScaleIn))
  add(formData_603352, "LaunchTemplate.Version", newJString(LaunchTemplateVersion))
  if TerminationPolicies != nil:
    formData_603352.add "TerminationPolicies", TerminationPolicies
  add(query_603351, "Version", newJString(Version))
  add(formData_603352, "LaunchTemplate.LaunchTemplateName",
      newJString(LaunchTemplateLaunchTemplateName))
  if LifecycleHookSpecificationList != nil:
    formData_603352.add "LifecycleHookSpecificationList",
                       LifecycleHookSpecificationList
  result = call_603350.call(nil, query_603351, nil, formData_603352, nil)

var postCreateAutoScalingGroup* = Call_PostCreateAutoScalingGroup_603313(
    name: "postCreateAutoScalingGroup", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=CreateAutoScalingGroup",
    validator: validate_PostCreateAutoScalingGroup_603314, base: "/",
    url: url_PostCreateAutoScalingGroup_603315,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateAutoScalingGroup_603274 = ref object of OpenApiRestCall_602466
proc url_GetCreateAutoScalingGroup_603276(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateAutoScalingGroup_603275(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an Auto Scaling group with the specified name and attributes.</p> <p>If you exceed your maximum limit of Auto Scaling groups, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   HealthCheckGracePeriod: JInt
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. During this time, any health check failures for the instance are ignored. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   TerminationPolicies: JArray
  ##                      : <p>One or more termination policies used to select the instance to terminate. These policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   HealthCheckType: JString
  ##                  : <p>The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. The default value is <code>EC2</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   DesiredCapacity: JInt
  ##                  : The number of Amazon EC2 instances that the Auto Scaling group attempts to maintain. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group. If you do not specify a desired capacity, the default is the minimum size of the group.
  ##   DefaultCooldown: JInt
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LaunchTemplate.LaunchTemplateId: JString
  ##                                  : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  ##   LaunchTemplate.LaunchTemplateName: JString
  ##                                    : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   LifecycleHookSpecificationList: JArray
  ##                                 : One or more lifecycle hooks.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group. This name must be unique per Region per account.
  ##   AvailabilityZones: JArray
  ##                    : <p>One or more Availability Zones for the group. This parameter is optional if you specify one or more subnets for <code>VPCZoneIdentifier</code>.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into EC2-Classic.</p>
  ##   VPCZoneIdentifier: JString
  ##                    : <p>A comma-separated list of subnet IDs for your virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into a VPC.</p>
  ##   NewInstancesProtectedFromScaleIn: JBool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MixedInstancesPolicy.LaunchTemplate: JString
  ##                                      : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   LaunchConfigurationName: JString
  ##                          : <p>The name of the launch configuration.</p> <p>If you do not specify <code>LaunchConfigurationName</code>, you must specify one of the following parameters: <code>InstanceId</code>, <code>LaunchTemplate</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   Tags: JArray
  ##       : <p>One or more tags.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: JString (required)
  ##   PlacementGroup: JString
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   MixedInstancesPolicy.InstancesDistribution: JString
  ##                                             : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified when creating a mixed instances policy, the default values are used.</p>
  ##   LaunchTemplate.Version: JString
  ##                         : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   TargetGroupARNs: JArray
  ##                  : <p>The Amazon Resource Names (ARN) of the target groups to associate with the Auto Scaling group. Instances are registered as targets in a target group, and traffic is routed to the target group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LoadBalancerNames: JArray
  ##                    : <p>A list of Classic Load Balancers associated with this Auto Scaling group. For Application Load Balancers and Network Load Balancers, specify a list of target groups using the <code>TargetGroupARNs</code> property instead.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   InstanceId: JString
  ##             : <p>The ID of the instance used to create a launch configuration for the group.</p> <p>When you specify an ID of an instance, Amazon EC2 Auto Scaling creates a new launch configuration and associates it with the group. This launch configuration derives its attributes from the specified instance, except for the block device mapping.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-from-instance.html">Create an Auto Scaling Group Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You must specify one of the following parameters in your request: <code>LaunchConfigurationName</code>, <code>LaunchTemplate</code>, <code>InstanceId</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   MaxSize: JInt (required)
  ##          : The maximum size of the group.
  ##   MinSize: JInt (required)
  ##          : The minimum size of the group.
  ##   Version: JString (required)
  ##   ServiceLinkedRoleARN: JString
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. By default, Amazon EC2 Auto Scaling uses a service-linked role named AWSServiceRoleForAutoScaling, which it creates if it does not exist. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  section = newJObject()
  var valid_603277 = query.getOrDefault("HealthCheckGracePeriod")
  valid_603277 = validateParameter(valid_603277, JInt, required = false, default = nil)
  if valid_603277 != nil:
    section.add "HealthCheckGracePeriod", valid_603277
  var valid_603278 = query.getOrDefault("TerminationPolicies")
  valid_603278 = validateParameter(valid_603278, JArray, required = false,
                                 default = nil)
  if valid_603278 != nil:
    section.add "TerminationPolicies", valid_603278
  var valid_603279 = query.getOrDefault("HealthCheckType")
  valid_603279 = validateParameter(valid_603279, JString, required = false,
                                 default = nil)
  if valid_603279 != nil:
    section.add "HealthCheckType", valid_603279
  var valid_603280 = query.getOrDefault("DesiredCapacity")
  valid_603280 = validateParameter(valid_603280, JInt, required = false, default = nil)
  if valid_603280 != nil:
    section.add "DesiredCapacity", valid_603280
  var valid_603281 = query.getOrDefault("DefaultCooldown")
  valid_603281 = validateParameter(valid_603281, JInt, required = false, default = nil)
  if valid_603281 != nil:
    section.add "DefaultCooldown", valid_603281
  var valid_603282 = query.getOrDefault("LaunchTemplate.LaunchTemplateId")
  valid_603282 = validateParameter(valid_603282, JString, required = false,
                                 default = nil)
  if valid_603282 != nil:
    section.add "LaunchTemplate.LaunchTemplateId", valid_603282
  var valid_603283 = query.getOrDefault("LaunchTemplate.LaunchTemplateName")
  valid_603283 = validateParameter(valid_603283, JString, required = false,
                                 default = nil)
  if valid_603283 != nil:
    section.add "LaunchTemplate.LaunchTemplateName", valid_603283
  var valid_603284 = query.getOrDefault("LifecycleHookSpecificationList")
  valid_603284 = validateParameter(valid_603284, JArray, required = false,
                                 default = nil)
  if valid_603284 != nil:
    section.add "LifecycleHookSpecificationList", valid_603284
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_603285 = query.getOrDefault("AutoScalingGroupName")
  valid_603285 = validateParameter(valid_603285, JString, required = true,
                                 default = nil)
  if valid_603285 != nil:
    section.add "AutoScalingGroupName", valid_603285
  var valid_603286 = query.getOrDefault("AvailabilityZones")
  valid_603286 = validateParameter(valid_603286, JArray, required = false,
                                 default = nil)
  if valid_603286 != nil:
    section.add "AvailabilityZones", valid_603286
  var valid_603287 = query.getOrDefault("VPCZoneIdentifier")
  valid_603287 = validateParameter(valid_603287, JString, required = false,
                                 default = nil)
  if valid_603287 != nil:
    section.add "VPCZoneIdentifier", valid_603287
  var valid_603288 = query.getOrDefault("NewInstancesProtectedFromScaleIn")
  valid_603288 = validateParameter(valid_603288, JBool, required = false, default = nil)
  if valid_603288 != nil:
    section.add "NewInstancesProtectedFromScaleIn", valid_603288
  var valid_603289 = query.getOrDefault("MixedInstancesPolicy.LaunchTemplate")
  valid_603289 = validateParameter(valid_603289, JString, required = false,
                                 default = nil)
  if valid_603289 != nil:
    section.add "MixedInstancesPolicy.LaunchTemplate", valid_603289
  var valid_603290 = query.getOrDefault("LaunchConfigurationName")
  valid_603290 = validateParameter(valid_603290, JString, required = false,
                                 default = nil)
  if valid_603290 != nil:
    section.add "LaunchConfigurationName", valid_603290
  var valid_603291 = query.getOrDefault("Tags")
  valid_603291 = validateParameter(valid_603291, JArray, required = false,
                                 default = nil)
  if valid_603291 != nil:
    section.add "Tags", valid_603291
  var valid_603292 = query.getOrDefault("Action")
  valid_603292 = validateParameter(valid_603292, JString, required = true,
                                 default = newJString("CreateAutoScalingGroup"))
  if valid_603292 != nil:
    section.add "Action", valid_603292
  var valid_603293 = query.getOrDefault("PlacementGroup")
  valid_603293 = validateParameter(valid_603293, JString, required = false,
                                 default = nil)
  if valid_603293 != nil:
    section.add "PlacementGroup", valid_603293
  var valid_603294 = query.getOrDefault("MixedInstancesPolicy.InstancesDistribution")
  valid_603294 = validateParameter(valid_603294, JString, required = false,
                                 default = nil)
  if valid_603294 != nil:
    section.add "MixedInstancesPolicy.InstancesDistribution", valid_603294
  var valid_603295 = query.getOrDefault("LaunchTemplate.Version")
  valid_603295 = validateParameter(valid_603295, JString, required = false,
                                 default = nil)
  if valid_603295 != nil:
    section.add "LaunchTemplate.Version", valid_603295
  var valid_603296 = query.getOrDefault("TargetGroupARNs")
  valid_603296 = validateParameter(valid_603296, JArray, required = false,
                                 default = nil)
  if valid_603296 != nil:
    section.add "TargetGroupARNs", valid_603296
  var valid_603297 = query.getOrDefault("LoadBalancerNames")
  valid_603297 = validateParameter(valid_603297, JArray, required = false,
                                 default = nil)
  if valid_603297 != nil:
    section.add "LoadBalancerNames", valid_603297
  var valid_603298 = query.getOrDefault("InstanceId")
  valid_603298 = validateParameter(valid_603298, JString, required = false,
                                 default = nil)
  if valid_603298 != nil:
    section.add "InstanceId", valid_603298
  var valid_603299 = query.getOrDefault("MaxSize")
  valid_603299 = validateParameter(valid_603299, JInt, required = true, default = nil)
  if valid_603299 != nil:
    section.add "MaxSize", valid_603299
  var valid_603300 = query.getOrDefault("MinSize")
  valid_603300 = validateParameter(valid_603300, JInt, required = true, default = nil)
  if valid_603300 != nil:
    section.add "MinSize", valid_603300
  var valid_603301 = query.getOrDefault("Version")
  valid_603301 = validateParameter(valid_603301, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603301 != nil:
    section.add "Version", valid_603301
  var valid_603302 = query.getOrDefault("ServiceLinkedRoleARN")
  valid_603302 = validateParameter(valid_603302, JString, required = false,
                                 default = nil)
  if valid_603302 != nil:
    section.add "ServiceLinkedRoleARN", valid_603302
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603303 = header.getOrDefault("X-Amz-Date")
  valid_603303 = validateParameter(valid_603303, JString, required = false,
                                 default = nil)
  if valid_603303 != nil:
    section.add "X-Amz-Date", valid_603303
  var valid_603304 = header.getOrDefault("X-Amz-Security-Token")
  valid_603304 = validateParameter(valid_603304, JString, required = false,
                                 default = nil)
  if valid_603304 != nil:
    section.add "X-Amz-Security-Token", valid_603304
  var valid_603305 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603305 = validateParameter(valid_603305, JString, required = false,
                                 default = nil)
  if valid_603305 != nil:
    section.add "X-Amz-Content-Sha256", valid_603305
  var valid_603306 = header.getOrDefault("X-Amz-Algorithm")
  valid_603306 = validateParameter(valid_603306, JString, required = false,
                                 default = nil)
  if valid_603306 != nil:
    section.add "X-Amz-Algorithm", valid_603306
  var valid_603307 = header.getOrDefault("X-Amz-Signature")
  valid_603307 = validateParameter(valid_603307, JString, required = false,
                                 default = nil)
  if valid_603307 != nil:
    section.add "X-Amz-Signature", valid_603307
  var valid_603308 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603308 = validateParameter(valid_603308, JString, required = false,
                                 default = nil)
  if valid_603308 != nil:
    section.add "X-Amz-SignedHeaders", valid_603308
  var valid_603309 = header.getOrDefault("X-Amz-Credential")
  valid_603309 = validateParameter(valid_603309, JString, required = false,
                                 default = nil)
  if valid_603309 != nil:
    section.add "X-Amz-Credential", valid_603309
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603310: Call_GetCreateAutoScalingGroup_603274; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an Auto Scaling group with the specified name and attributes.</p> <p>If you exceed your maximum limit of Auto Scaling groups, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_603310.validator(path, query, header, formData, body)
  let scheme = call_603310.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603310.url(scheme.get, call_603310.host, call_603310.base,
                         call_603310.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603310, url, valid)

proc call*(call_603311: Call_GetCreateAutoScalingGroup_603274;
          AutoScalingGroupName: string; MaxSize: int; MinSize: int;
          HealthCheckGracePeriod: int = 0; TerminationPolicies: JsonNode = nil;
          HealthCheckType: string = ""; DesiredCapacity: int = 0;
          DefaultCooldown: int = 0; LaunchTemplateLaunchTemplateId: string = "";
          LaunchTemplateLaunchTemplateName: string = "";
          LifecycleHookSpecificationList: JsonNode = nil;
          AvailabilityZones: JsonNode = nil; VPCZoneIdentifier: string = "";
          NewInstancesProtectedFromScaleIn: bool = false;
          MixedInstancesPolicyLaunchTemplate: string = "";
          LaunchConfigurationName: string = ""; Tags: JsonNode = nil;
          Action: string = "CreateAutoScalingGroup"; PlacementGroup: string = "";
          MixedInstancesPolicyInstancesDistribution: string = "";
          LaunchTemplateVersion: string = ""; TargetGroupARNs: JsonNode = nil;
          LoadBalancerNames: JsonNode = nil; InstanceId: string = "";
          Version: string = "2011-01-01"; ServiceLinkedRoleARN: string = ""): Recallable =
  ## getCreateAutoScalingGroup
  ## <p>Creates an Auto Scaling group with the specified name and attributes.</p> <p>If you exceed your maximum limit of Auto Scaling groups, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   HealthCheckGracePeriod: int
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. During this time, any health check failures for the instance are ignored. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   TerminationPolicies: JArray
  ##                      : <p>One or more termination policies used to select the instance to terminate. These policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   HealthCheckType: string
  ##                  : <p>The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. The default value is <code>EC2</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   DesiredCapacity: int
  ##                  : The number of Amazon EC2 instances that the Auto Scaling group attempts to maintain. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group. If you do not specify a desired capacity, the default is the minimum size of the group.
  ##   DefaultCooldown: int
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LaunchTemplateLaunchTemplateId: string
  ##                                 : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  ##   LaunchTemplateLaunchTemplateName: string
  ##                                   : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   LifecycleHookSpecificationList: JArray
  ##                                 : One or more lifecycle hooks.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group. This name must be unique per Region per account.
  ##   AvailabilityZones: JArray
  ##                    : <p>One or more Availability Zones for the group. This parameter is optional if you specify one or more subnets for <code>VPCZoneIdentifier</code>.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into EC2-Classic.</p>
  ##   VPCZoneIdentifier: string
  ##                    : <p>A comma-separated list of subnet IDs for your virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into a VPC.</p>
  ##   NewInstancesProtectedFromScaleIn: bool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MixedInstancesPolicyLaunchTemplate: string
  ##                                     : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   LaunchConfigurationName: string
  ##                          : <p>The name of the launch configuration.</p> <p>If you do not specify <code>LaunchConfigurationName</code>, you must specify one of the following parameters: <code>InstanceId</code>, <code>LaunchTemplate</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   Tags: JArray
  ##       : <p>One or more tags.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   PlacementGroup: string
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   MixedInstancesPolicyInstancesDistribution: string
  ##                                            : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified when creating a mixed instances policy, the default values are used.</p>
  ##   LaunchTemplateVersion: string
  ##                        : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   TargetGroupARNs: JArray
  ##                  : <p>The Amazon Resource Names (ARN) of the target groups to associate with the Auto Scaling group. Instances are registered as targets in a target group, and traffic is routed to the target group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LoadBalancerNames: JArray
  ##                    : <p>A list of Classic Load Balancers associated with this Auto Scaling group. For Application Load Balancers and Network Load Balancers, specify a list of target groups using the <code>TargetGroupARNs</code> property instead.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   InstanceId: string
  ##             : <p>The ID of the instance used to create a launch configuration for the group.</p> <p>When you specify an ID of an instance, Amazon EC2 Auto Scaling creates a new launch configuration and associates it with the group. This launch configuration derives its attributes from the specified instance, except for the block device mapping.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-from-instance.html">Create an Auto Scaling Group Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You must specify one of the following parameters in your request: <code>LaunchConfigurationName</code>, <code>LaunchTemplate</code>, <code>InstanceId</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   MaxSize: int (required)
  ##          : The maximum size of the group.
  ##   MinSize: int (required)
  ##          : The minimum size of the group.
  ##   Version: string (required)
  ##   ServiceLinkedRoleARN: string
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. By default, Amazon EC2 Auto Scaling uses a service-linked role named AWSServiceRoleForAutoScaling, which it creates if it does not exist. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  var query_603312 = newJObject()
  add(query_603312, "HealthCheckGracePeriod", newJInt(HealthCheckGracePeriod))
  if TerminationPolicies != nil:
    query_603312.add "TerminationPolicies", TerminationPolicies
  add(query_603312, "HealthCheckType", newJString(HealthCheckType))
  add(query_603312, "DesiredCapacity", newJInt(DesiredCapacity))
  add(query_603312, "DefaultCooldown", newJInt(DefaultCooldown))
  add(query_603312, "LaunchTemplate.LaunchTemplateId",
      newJString(LaunchTemplateLaunchTemplateId))
  add(query_603312, "LaunchTemplate.LaunchTemplateName",
      newJString(LaunchTemplateLaunchTemplateName))
  if LifecycleHookSpecificationList != nil:
    query_603312.add "LifecycleHookSpecificationList",
                    LifecycleHookSpecificationList
  add(query_603312, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if AvailabilityZones != nil:
    query_603312.add "AvailabilityZones", AvailabilityZones
  add(query_603312, "VPCZoneIdentifier", newJString(VPCZoneIdentifier))
  add(query_603312, "NewInstancesProtectedFromScaleIn",
      newJBool(NewInstancesProtectedFromScaleIn))
  add(query_603312, "MixedInstancesPolicy.LaunchTemplate",
      newJString(MixedInstancesPolicyLaunchTemplate))
  add(query_603312, "LaunchConfigurationName", newJString(LaunchConfigurationName))
  if Tags != nil:
    query_603312.add "Tags", Tags
  add(query_603312, "Action", newJString(Action))
  add(query_603312, "PlacementGroup", newJString(PlacementGroup))
  add(query_603312, "MixedInstancesPolicy.InstancesDistribution",
      newJString(MixedInstancesPolicyInstancesDistribution))
  add(query_603312, "LaunchTemplate.Version", newJString(LaunchTemplateVersion))
  if TargetGroupARNs != nil:
    query_603312.add "TargetGroupARNs", TargetGroupARNs
  if LoadBalancerNames != nil:
    query_603312.add "LoadBalancerNames", LoadBalancerNames
  add(query_603312, "InstanceId", newJString(InstanceId))
  add(query_603312, "MaxSize", newJInt(MaxSize))
  add(query_603312, "MinSize", newJInt(MinSize))
  add(query_603312, "Version", newJString(Version))
  add(query_603312, "ServiceLinkedRoleARN", newJString(ServiceLinkedRoleARN))
  result = call_603311.call(nil, query_603312, nil, nil, nil)

var getCreateAutoScalingGroup* = Call_GetCreateAutoScalingGroup_603274(
    name: "getCreateAutoScalingGroup", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=CreateAutoScalingGroup",
    validator: validate_GetCreateAutoScalingGroup_603275, base: "/",
    url: url_GetCreateAutoScalingGroup_603276,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateLaunchConfiguration_603386 = ref object of OpenApiRestCall_602466
proc url_PostCreateLaunchConfiguration_603388(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateLaunchConfiguration_603387(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a launch configuration.</p> <p>If you exceed your maximum limit of launch configurations, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html">Launch Configurations</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603389 = query.getOrDefault("Action")
  valid_603389 = validateParameter(valid_603389, JString, required = true, default = newJString(
      "CreateLaunchConfiguration"))
  if valid_603389 != nil:
    section.add "Action", valid_603389
  var valid_603390 = query.getOrDefault("Version")
  valid_603390 = validateParameter(valid_603390, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603390 != nil:
    section.add "Version", valid_603390
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603391 = header.getOrDefault("X-Amz-Date")
  valid_603391 = validateParameter(valid_603391, JString, required = false,
                                 default = nil)
  if valid_603391 != nil:
    section.add "X-Amz-Date", valid_603391
  var valid_603392 = header.getOrDefault("X-Amz-Security-Token")
  valid_603392 = validateParameter(valid_603392, JString, required = false,
                                 default = nil)
  if valid_603392 != nil:
    section.add "X-Amz-Security-Token", valid_603392
  var valid_603393 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603393 = validateParameter(valid_603393, JString, required = false,
                                 default = nil)
  if valid_603393 != nil:
    section.add "X-Amz-Content-Sha256", valid_603393
  var valid_603394 = header.getOrDefault("X-Amz-Algorithm")
  valid_603394 = validateParameter(valid_603394, JString, required = false,
                                 default = nil)
  if valid_603394 != nil:
    section.add "X-Amz-Algorithm", valid_603394
  var valid_603395 = header.getOrDefault("X-Amz-Signature")
  valid_603395 = validateParameter(valid_603395, JString, required = false,
                                 default = nil)
  if valid_603395 != nil:
    section.add "X-Amz-Signature", valid_603395
  var valid_603396 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603396 = validateParameter(valid_603396, JString, required = false,
                                 default = nil)
  if valid_603396 != nil:
    section.add "X-Amz-SignedHeaders", valid_603396
  var valid_603397 = header.getOrDefault("X-Amz-Credential")
  valid_603397 = validateParameter(valid_603397, JString, required = false,
                                 default = nil)
  if valid_603397 != nil:
    section.add "X-Amz-Credential", valid_603397
  result.add "header", section
  ## parameters in `formData` object:
  ##   PlacementTenancy: JString
  ##                   : <p>The tenancy of the instance. An instance with <code>dedicated</code> tenancy runs on isolated, single-tenant hardware and can only be launched into a VPC.</p> <p>To launch dedicated instances into a shared tenancy VPC (a VPC with the instance placement tenancy attribute set to <code>default</code>), you must set the value of this parameter to <code>dedicated</code>.</p> <p>If you specify <code>PlacementTenancy</code>, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-vpc-tenancy">Instance Placement Tenancy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Valid values: <code>default</code> | <code>dedicated</code> </p>
  ##   BlockDeviceMappings: JArray
  ##                      : A block device mapping, which specifies the block devices for the instance. You can specify virtual devices and EBS volumes. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html">Block Device Mapping</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   AssociatePublicIpAddress: JBool
  ##                           : <p>For Auto Scaling groups that are running in a virtual private cloud (VPC), specifies whether to assign a public IP address to the group's instances. If you specify <code>true</code>, each instance in the Auto Scaling group receives a unique public IP address. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html">Launching Auto Scaling Instances in a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify this parameter, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <note> <p>If the instance is launched into a default subnet, the default is to assign a public IP address, unless you disabled the option to assign a public IP address on the subnet. If the instance is launched into a nondefault subnet, the default is not to assign a public IP address, unless you enabled the option to assign a public IP address on the subnet.</p> </note>
  ##   ClassicLinkVPCSecurityGroups: JArray
  ##                               : <p>The IDs of one or more security groups for the specified ClassicLink-enabled VPC. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify the <code>ClassicLinkVPCId</code> parameter, you must specify this parameter. </p>
  ##   KernelId: JString
  ##           : The ID of the kernel associated with the AMI.
  ##   KeyName: JString
  ##          : The name of the key pair. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Amazon EC2 Key Pairs</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   ImageId: JString
  ##          : <p>The ID of the Amazon Machine Image (AMI) that was assigned during registration. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html">Finding an AMI</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>ImageId</code>.</p>
  ##   LaunchConfigurationName: JString (required)
  ##                          : The name of the launch configuration. This name must be unique per Region per account.
  ##   ClassicLinkVPCId: JString
  ##                   : <p>The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>This parameter can only be used if you are launching EC2-Classic instances. </p>
  ##   InstanceMonitoring.Enabled: JString
  ##                             : Describes whether detailed monitoring is enabled for the Auto Scaling instances.
  ## If <code>true</code>, detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
  ##   IamInstanceProfile: JString
  ##                     : <p>The name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/us-iam-role.html">IAM Role for Applications That Run on Amazon EC2 Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   InstanceId: JString
  ##             : <p>The ID of the instance to use to create the launch configuration. The new launch configuration derives attributes from the instance, except for the block device mapping.</p> <p>To create a launch configuration with a block device mapping or override any other instance attributes, specify them as part of the same request.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-lc-with-instanceID.html">Create a Launch Configuration Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify both <code>ImageId</code> and <code>InstanceType</code>.</p>
  ##   UserData: JString
  ##           : The Base64-encoded user data to make available to the launched EC2 instances. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance Metadata and User Data</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   SecurityGroups: JArray
  ##                 : <p>A list that contains the security groups to assign to the instances in the Auto Scaling group.</p> <p>[EC2-VPC] Specify the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security Groups for Your VPC</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>[EC2-Classic] Specify either the security group names or the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon EC2 Security Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
  ##   RamdiskId: JString
  ##            : The ID of the RAM disk to select.
  ##   EbsOptimized: JBool
  ##               : <p>Specifies whether the launch configuration is optimized for EBS I/O (<code>true</code>) or not (<code>false</code>). The optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization is not available with all instance types. Additional fees are incurred when you enable EBS optimization for an instance type that is not EBS-optimized by default. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html">Amazon EBS-Optimized Instances</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>The default value is <code>false</code>. </p>
  ##   InstanceType: JString
  ##               : <p>Specifies the instance type of the EC2 instance.</p> <p>For information about available instance types, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes">Available Instance Types</a> in the <i>Amazon EC2 User Guide for Linux Instances.</i> </p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>InstanceType</code>.</p>
  ##   SpotPrice: JString
  ##            : <p>The maximum hourly price to be paid for any Spot Instance launched to fulfill the request. Spot Instances are launched when the price you specify exceeds the current Spot market price. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-launch-spot-instances.html">Launching Spot Instances in Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If a Spot price is set, then the Auto Scaling group will only launch instances when the Spot price has been met, regardless of the setting in the Auto Scaling group's <code>DesiredCapacity</code>. </p> <note> <p>When you change your Spot price by creating a new launch configuration, running instances will continue to run as long as the Spot price for those running instances is higher than the current Spot market price. </p> </note>
  section = newJObject()
  var valid_603398 = formData.getOrDefault("PlacementTenancy")
  valid_603398 = validateParameter(valid_603398, JString, required = false,
                                 default = nil)
  if valid_603398 != nil:
    section.add "PlacementTenancy", valid_603398
  var valid_603399 = formData.getOrDefault("BlockDeviceMappings")
  valid_603399 = validateParameter(valid_603399, JArray, required = false,
                                 default = nil)
  if valid_603399 != nil:
    section.add "BlockDeviceMappings", valid_603399
  var valid_603400 = formData.getOrDefault("AssociatePublicIpAddress")
  valid_603400 = validateParameter(valid_603400, JBool, required = false, default = nil)
  if valid_603400 != nil:
    section.add "AssociatePublicIpAddress", valid_603400
  var valid_603401 = formData.getOrDefault("ClassicLinkVPCSecurityGroups")
  valid_603401 = validateParameter(valid_603401, JArray, required = false,
                                 default = nil)
  if valid_603401 != nil:
    section.add "ClassicLinkVPCSecurityGroups", valid_603401
  var valid_603402 = formData.getOrDefault("KernelId")
  valid_603402 = validateParameter(valid_603402, JString, required = false,
                                 default = nil)
  if valid_603402 != nil:
    section.add "KernelId", valid_603402
  var valid_603403 = formData.getOrDefault("KeyName")
  valid_603403 = validateParameter(valid_603403, JString, required = false,
                                 default = nil)
  if valid_603403 != nil:
    section.add "KeyName", valid_603403
  var valid_603404 = formData.getOrDefault("ImageId")
  valid_603404 = validateParameter(valid_603404, JString, required = false,
                                 default = nil)
  if valid_603404 != nil:
    section.add "ImageId", valid_603404
  assert formData != nil, "formData argument is necessary due to required `LaunchConfigurationName` field"
  var valid_603405 = formData.getOrDefault("LaunchConfigurationName")
  valid_603405 = validateParameter(valid_603405, JString, required = true,
                                 default = nil)
  if valid_603405 != nil:
    section.add "LaunchConfigurationName", valid_603405
  var valid_603406 = formData.getOrDefault("ClassicLinkVPCId")
  valid_603406 = validateParameter(valid_603406, JString, required = false,
                                 default = nil)
  if valid_603406 != nil:
    section.add "ClassicLinkVPCId", valid_603406
  var valid_603407 = formData.getOrDefault("InstanceMonitoring.Enabled")
  valid_603407 = validateParameter(valid_603407, JString, required = false,
                                 default = nil)
  if valid_603407 != nil:
    section.add "InstanceMonitoring.Enabled", valid_603407
  var valid_603408 = formData.getOrDefault("IamInstanceProfile")
  valid_603408 = validateParameter(valid_603408, JString, required = false,
                                 default = nil)
  if valid_603408 != nil:
    section.add "IamInstanceProfile", valid_603408
  var valid_603409 = formData.getOrDefault("InstanceId")
  valid_603409 = validateParameter(valid_603409, JString, required = false,
                                 default = nil)
  if valid_603409 != nil:
    section.add "InstanceId", valid_603409
  var valid_603410 = formData.getOrDefault("UserData")
  valid_603410 = validateParameter(valid_603410, JString, required = false,
                                 default = nil)
  if valid_603410 != nil:
    section.add "UserData", valid_603410
  var valid_603411 = formData.getOrDefault("SecurityGroups")
  valid_603411 = validateParameter(valid_603411, JArray, required = false,
                                 default = nil)
  if valid_603411 != nil:
    section.add "SecurityGroups", valid_603411
  var valid_603412 = formData.getOrDefault("RamdiskId")
  valid_603412 = validateParameter(valid_603412, JString, required = false,
                                 default = nil)
  if valid_603412 != nil:
    section.add "RamdiskId", valid_603412
  var valid_603413 = formData.getOrDefault("EbsOptimized")
  valid_603413 = validateParameter(valid_603413, JBool, required = false, default = nil)
  if valid_603413 != nil:
    section.add "EbsOptimized", valid_603413
  var valid_603414 = formData.getOrDefault("InstanceType")
  valid_603414 = validateParameter(valid_603414, JString, required = false,
                                 default = nil)
  if valid_603414 != nil:
    section.add "InstanceType", valid_603414
  var valid_603415 = formData.getOrDefault("SpotPrice")
  valid_603415 = validateParameter(valid_603415, JString, required = false,
                                 default = nil)
  if valid_603415 != nil:
    section.add "SpotPrice", valid_603415
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603416: Call_PostCreateLaunchConfiguration_603386; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a launch configuration.</p> <p>If you exceed your maximum limit of launch configurations, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html">Launch Configurations</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_603416.validator(path, query, header, formData, body)
  let scheme = call_603416.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603416.url(scheme.get, call_603416.host, call_603416.base,
                         call_603416.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603416, url, valid)

proc call*(call_603417: Call_PostCreateLaunchConfiguration_603386;
          LaunchConfigurationName: string; PlacementTenancy: string = "";
          BlockDeviceMappings: JsonNode = nil;
          AssociatePublicIpAddress: bool = false;
          ClassicLinkVPCSecurityGroups: JsonNode = nil; KernelId: string = "";
          KeyName: string = ""; ImageId: string = ""; ClassicLinkVPCId: string = "";
          InstanceMonitoringEnabled: string = ""; IamInstanceProfile: string = "";
          Action: string = "CreateLaunchConfiguration"; InstanceId: string = "";
          UserData: string = ""; SecurityGroups: JsonNode = nil; RamdiskId: string = "";
          EbsOptimized: bool = false; InstanceType: string = ""; SpotPrice: string = "";
          Version: string = "2011-01-01"): Recallable =
  ## postCreateLaunchConfiguration
  ## <p>Creates a launch configuration.</p> <p>If you exceed your maximum limit of launch configurations, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html">Launch Configurations</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   PlacementTenancy: string
  ##                   : <p>The tenancy of the instance. An instance with <code>dedicated</code> tenancy runs on isolated, single-tenant hardware and can only be launched into a VPC.</p> <p>To launch dedicated instances into a shared tenancy VPC (a VPC with the instance placement tenancy attribute set to <code>default</code>), you must set the value of this parameter to <code>dedicated</code>.</p> <p>If you specify <code>PlacementTenancy</code>, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-vpc-tenancy">Instance Placement Tenancy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Valid values: <code>default</code> | <code>dedicated</code> </p>
  ##   BlockDeviceMappings: JArray
  ##                      : A block device mapping, which specifies the block devices for the instance. You can specify virtual devices and EBS volumes. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html">Block Device Mapping</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   AssociatePublicIpAddress: bool
  ##                           : <p>For Auto Scaling groups that are running in a virtual private cloud (VPC), specifies whether to assign a public IP address to the group's instances. If you specify <code>true</code>, each instance in the Auto Scaling group receives a unique public IP address. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html">Launching Auto Scaling Instances in a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify this parameter, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <note> <p>If the instance is launched into a default subnet, the default is to assign a public IP address, unless you disabled the option to assign a public IP address on the subnet. If the instance is launched into a nondefault subnet, the default is not to assign a public IP address, unless you enabled the option to assign a public IP address on the subnet.</p> </note>
  ##   ClassicLinkVPCSecurityGroups: JArray
  ##                               : <p>The IDs of one or more security groups for the specified ClassicLink-enabled VPC. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify the <code>ClassicLinkVPCId</code> parameter, you must specify this parameter. </p>
  ##   KernelId: string
  ##           : The ID of the kernel associated with the AMI.
  ##   KeyName: string
  ##          : The name of the key pair. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Amazon EC2 Key Pairs</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   ImageId: string
  ##          : <p>The ID of the Amazon Machine Image (AMI) that was assigned during registration. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html">Finding an AMI</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>ImageId</code>.</p>
  ##   LaunchConfigurationName: string (required)
  ##                          : The name of the launch configuration. This name must be unique per Region per account.
  ##   ClassicLinkVPCId: string
  ##                   : <p>The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>This parameter can only be used if you are launching EC2-Classic instances. </p>
  ##   InstanceMonitoringEnabled: string
  ##                            : Describes whether detailed monitoring is enabled for the Auto Scaling instances.
  ## If <code>true</code>, detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
  ##   IamInstanceProfile: string
  ##                     : <p>The name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/us-iam-role.html">IAM Role for Applications That Run on Amazon EC2 Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   InstanceId: string
  ##             : <p>The ID of the instance to use to create the launch configuration. The new launch configuration derives attributes from the instance, except for the block device mapping.</p> <p>To create a launch configuration with a block device mapping or override any other instance attributes, specify them as part of the same request.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-lc-with-instanceID.html">Create a Launch Configuration Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify both <code>ImageId</code> and <code>InstanceType</code>.</p>
  ##   UserData: string
  ##           : The Base64-encoded user data to make available to the launched EC2 instances. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance Metadata and User Data</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   SecurityGroups: JArray
  ##                 : <p>A list that contains the security groups to assign to the instances in the Auto Scaling group.</p> <p>[EC2-VPC] Specify the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security Groups for Your VPC</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>[EC2-Classic] Specify either the security group names or the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon EC2 Security Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
  ##   RamdiskId: string
  ##            : The ID of the RAM disk to select.
  ##   EbsOptimized: bool
  ##               : <p>Specifies whether the launch configuration is optimized for EBS I/O (<code>true</code>) or not (<code>false</code>). The optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization is not available with all instance types. Additional fees are incurred when you enable EBS optimization for an instance type that is not EBS-optimized by default. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html">Amazon EBS-Optimized Instances</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>The default value is <code>false</code>. </p>
  ##   InstanceType: string
  ##               : <p>Specifies the instance type of the EC2 instance.</p> <p>For information about available instance types, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes">Available Instance Types</a> in the <i>Amazon EC2 User Guide for Linux Instances.</i> </p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>InstanceType</code>.</p>
  ##   SpotPrice: string
  ##            : <p>The maximum hourly price to be paid for any Spot Instance launched to fulfill the request. Spot Instances are launched when the price you specify exceeds the current Spot market price. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-launch-spot-instances.html">Launching Spot Instances in Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If a Spot price is set, then the Auto Scaling group will only launch instances when the Spot price has been met, regardless of the setting in the Auto Scaling group's <code>DesiredCapacity</code>. </p> <note> <p>When you change your Spot price by creating a new launch configuration, running instances will continue to run as long as the Spot price for those running instances is higher than the current Spot market price. </p> </note>
  ##   Version: string (required)
  var query_603418 = newJObject()
  var formData_603419 = newJObject()
  add(formData_603419, "PlacementTenancy", newJString(PlacementTenancy))
  if BlockDeviceMappings != nil:
    formData_603419.add "BlockDeviceMappings", BlockDeviceMappings
  add(formData_603419, "AssociatePublicIpAddress",
      newJBool(AssociatePublicIpAddress))
  if ClassicLinkVPCSecurityGroups != nil:
    formData_603419.add "ClassicLinkVPCSecurityGroups",
                       ClassicLinkVPCSecurityGroups
  add(formData_603419, "KernelId", newJString(KernelId))
  add(formData_603419, "KeyName", newJString(KeyName))
  add(formData_603419, "ImageId", newJString(ImageId))
  add(formData_603419, "LaunchConfigurationName",
      newJString(LaunchConfigurationName))
  add(formData_603419, "ClassicLinkVPCId", newJString(ClassicLinkVPCId))
  add(formData_603419, "InstanceMonitoring.Enabled",
      newJString(InstanceMonitoringEnabled))
  add(formData_603419, "IamInstanceProfile", newJString(IamInstanceProfile))
  add(query_603418, "Action", newJString(Action))
  add(formData_603419, "InstanceId", newJString(InstanceId))
  add(formData_603419, "UserData", newJString(UserData))
  if SecurityGroups != nil:
    formData_603419.add "SecurityGroups", SecurityGroups
  add(formData_603419, "RamdiskId", newJString(RamdiskId))
  add(formData_603419, "EbsOptimized", newJBool(EbsOptimized))
  add(formData_603419, "InstanceType", newJString(InstanceType))
  add(formData_603419, "SpotPrice", newJString(SpotPrice))
  add(query_603418, "Version", newJString(Version))
  result = call_603417.call(nil, query_603418, nil, formData_603419, nil)

var postCreateLaunchConfiguration* = Call_PostCreateLaunchConfiguration_603386(
    name: "postCreateLaunchConfiguration", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=CreateLaunchConfiguration",
    validator: validate_PostCreateLaunchConfiguration_603387, base: "/",
    url: url_PostCreateLaunchConfiguration_603388,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateLaunchConfiguration_603353 = ref object of OpenApiRestCall_602466
proc url_GetCreateLaunchConfiguration_603355(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateLaunchConfiguration_603354(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a launch configuration.</p> <p>If you exceed your maximum limit of launch configurations, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html">Launch Configurations</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PlacementTenancy: JString
  ##                   : <p>The tenancy of the instance. An instance with <code>dedicated</code> tenancy runs on isolated, single-tenant hardware and can only be launched into a VPC.</p> <p>To launch dedicated instances into a shared tenancy VPC (a VPC with the instance placement tenancy attribute set to <code>default</code>), you must set the value of this parameter to <code>dedicated</code>.</p> <p>If you specify <code>PlacementTenancy</code>, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-vpc-tenancy">Instance Placement Tenancy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Valid values: <code>default</code> | <code>dedicated</code> </p>
  ##   KeyName: JString
  ##          : The name of the key pair. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Amazon EC2 Key Pairs</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   KernelId: JString
  ##           : The ID of the kernel associated with the AMI.
  ##   UserData: JString
  ##           : The Base64-encoded user data to make available to the launched EC2 instances. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance Metadata and User Data</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   LaunchConfigurationName: JString (required)
  ##                          : The name of the launch configuration. This name must be unique per Region per account.
  ##   AssociatePublicIpAddress: JBool
  ##                           : <p>For Auto Scaling groups that are running in a virtual private cloud (VPC), specifies whether to assign a public IP address to the group's instances. If you specify <code>true</code>, each instance in the Auto Scaling group receives a unique public IP address. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html">Launching Auto Scaling Instances in a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify this parameter, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <note> <p>If the instance is launched into a default subnet, the default is to assign a public IP address, unless you disabled the option to assign a public IP address on the subnet. If the instance is launched into a nondefault subnet, the default is not to assign a public IP address, unless you enabled the option to assign a public IP address on the subnet.</p> </note>
  ##   EbsOptimized: JBool
  ##               : <p>Specifies whether the launch configuration is optimized for EBS I/O (<code>true</code>) or not (<code>false</code>). The optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization is not available with all instance types. Additional fees are incurred when you enable EBS optimization for an instance type that is not EBS-optimized by default. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html">Amazon EBS-Optimized Instances</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>The default value is <code>false</code>. </p>
  ##   ImageId: JString
  ##          : <p>The ID of the Amazon Machine Image (AMI) that was assigned during registration. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html">Finding an AMI</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>ImageId</code>.</p>
  ##   Action: JString (required)
  ##   InstanceMonitoring.Enabled: JString
  ##                             : Describes whether detailed monitoring is enabled for the Auto Scaling instances.
  ## If <code>true</code>, detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
  ##   BlockDeviceMappings: JArray
  ##                      : A block device mapping, which specifies the block devices for the instance. You can specify virtual devices and EBS volumes. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html">Block Device Mapping</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   RamdiskId: JString
  ##            : The ID of the RAM disk to select.
  ##   ClassicLinkVPCSecurityGroups: JArray
  ##                               : <p>The IDs of one or more security groups for the specified ClassicLink-enabled VPC. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify the <code>ClassicLinkVPCId</code> parameter, you must specify this parameter. </p>
  ##   InstanceType: JString
  ##               : <p>Specifies the instance type of the EC2 instance.</p> <p>For information about available instance types, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes">Available Instance Types</a> in the <i>Amazon EC2 User Guide for Linux Instances.</i> </p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>InstanceType</code>.</p>
  ##   ClassicLinkVPCId: JString
  ##                   : <p>The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>This parameter can only be used if you are launching EC2-Classic instances. </p>
  ##   InstanceId: JString
  ##             : <p>The ID of the instance to use to create the launch configuration. The new launch configuration derives attributes from the instance, except for the block device mapping.</p> <p>To create a launch configuration with a block device mapping or override any other instance attributes, specify them as part of the same request.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-lc-with-instanceID.html">Create a Launch Configuration Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify both <code>ImageId</code> and <code>InstanceType</code>.</p>
  ##   IamInstanceProfile: JString
  ##                     : <p>The name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/us-iam-role.html">IAM Role for Applications That Run on Amazon EC2 Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Version: JString (required)
  ##   SecurityGroups: JArray
  ##                 : <p>A list that contains the security groups to assign to the instances in the Auto Scaling group.</p> <p>[EC2-VPC] Specify the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security Groups for Your VPC</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>[EC2-Classic] Specify either the security group names or the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon EC2 Security Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
  ##   SpotPrice: JString
  ##            : <p>The maximum hourly price to be paid for any Spot Instance launched to fulfill the request. Spot Instances are launched when the price you specify exceeds the current Spot market price. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-launch-spot-instances.html">Launching Spot Instances in Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If a Spot price is set, then the Auto Scaling group will only launch instances when the Spot price has been met, regardless of the setting in the Auto Scaling group's <code>DesiredCapacity</code>. </p> <note> <p>When you change your Spot price by creating a new launch configuration, running instances will continue to run as long as the Spot price for those running instances is higher than the current Spot market price. </p> </note>
  section = newJObject()
  var valid_603356 = query.getOrDefault("PlacementTenancy")
  valid_603356 = validateParameter(valid_603356, JString, required = false,
                                 default = nil)
  if valid_603356 != nil:
    section.add "PlacementTenancy", valid_603356
  var valid_603357 = query.getOrDefault("KeyName")
  valid_603357 = validateParameter(valid_603357, JString, required = false,
                                 default = nil)
  if valid_603357 != nil:
    section.add "KeyName", valid_603357
  var valid_603358 = query.getOrDefault("KernelId")
  valid_603358 = validateParameter(valid_603358, JString, required = false,
                                 default = nil)
  if valid_603358 != nil:
    section.add "KernelId", valid_603358
  var valid_603359 = query.getOrDefault("UserData")
  valid_603359 = validateParameter(valid_603359, JString, required = false,
                                 default = nil)
  if valid_603359 != nil:
    section.add "UserData", valid_603359
  assert query != nil, "query argument is necessary due to required `LaunchConfigurationName` field"
  var valid_603360 = query.getOrDefault("LaunchConfigurationName")
  valid_603360 = validateParameter(valid_603360, JString, required = true,
                                 default = nil)
  if valid_603360 != nil:
    section.add "LaunchConfigurationName", valid_603360
  var valid_603361 = query.getOrDefault("AssociatePublicIpAddress")
  valid_603361 = validateParameter(valid_603361, JBool, required = false, default = nil)
  if valid_603361 != nil:
    section.add "AssociatePublicIpAddress", valid_603361
  var valid_603362 = query.getOrDefault("EbsOptimized")
  valid_603362 = validateParameter(valid_603362, JBool, required = false, default = nil)
  if valid_603362 != nil:
    section.add "EbsOptimized", valid_603362
  var valid_603363 = query.getOrDefault("ImageId")
  valid_603363 = validateParameter(valid_603363, JString, required = false,
                                 default = nil)
  if valid_603363 != nil:
    section.add "ImageId", valid_603363
  var valid_603364 = query.getOrDefault("Action")
  valid_603364 = validateParameter(valid_603364, JString, required = true, default = newJString(
      "CreateLaunchConfiguration"))
  if valid_603364 != nil:
    section.add "Action", valid_603364
  var valid_603365 = query.getOrDefault("InstanceMonitoring.Enabled")
  valid_603365 = validateParameter(valid_603365, JString, required = false,
                                 default = nil)
  if valid_603365 != nil:
    section.add "InstanceMonitoring.Enabled", valid_603365
  var valid_603366 = query.getOrDefault("BlockDeviceMappings")
  valid_603366 = validateParameter(valid_603366, JArray, required = false,
                                 default = nil)
  if valid_603366 != nil:
    section.add "BlockDeviceMappings", valid_603366
  var valid_603367 = query.getOrDefault("RamdiskId")
  valid_603367 = validateParameter(valid_603367, JString, required = false,
                                 default = nil)
  if valid_603367 != nil:
    section.add "RamdiskId", valid_603367
  var valid_603368 = query.getOrDefault("ClassicLinkVPCSecurityGroups")
  valid_603368 = validateParameter(valid_603368, JArray, required = false,
                                 default = nil)
  if valid_603368 != nil:
    section.add "ClassicLinkVPCSecurityGroups", valid_603368
  var valid_603369 = query.getOrDefault("InstanceType")
  valid_603369 = validateParameter(valid_603369, JString, required = false,
                                 default = nil)
  if valid_603369 != nil:
    section.add "InstanceType", valid_603369
  var valid_603370 = query.getOrDefault("ClassicLinkVPCId")
  valid_603370 = validateParameter(valid_603370, JString, required = false,
                                 default = nil)
  if valid_603370 != nil:
    section.add "ClassicLinkVPCId", valid_603370
  var valid_603371 = query.getOrDefault("InstanceId")
  valid_603371 = validateParameter(valid_603371, JString, required = false,
                                 default = nil)
  if valid_603371 != nil:
    section.add "InstanceId", valid_603371
  var valid_603372 = query.getOrDefault("IamInstanceProfile")
  valid_603372 = validateParameter(valid_603372, JString, required = false,
                                 default = nil)
  if valid_603372 != nil:
    section.add "IamInstanceProfile", valid_603372
  var valid_603373 = query.getOrDefault("Version")
  valid_603373 = validateParameter(valid_603373, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603373 != nil:
    section.add "Version", valid_603373
  var valid_603374 = query.getOrDefault("SecurityGroups")
  valid_603374 = validateParameter(valid_603374, JArray, required = false,
                                 default = nil)
  if valid_603374 != nil:
    section.add "SecurityGroups", valid_603374
  var valid_603375 = query.getOrDefault("SpotPrice")
  valid_603375 = validateParameter(valid_603375, JString, required = false,
                                 default = nil)
  if valid_603375 != nil:
    section.add "SpotPrice", valid_603375
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603376 = header.getOrDefault("X-Amz-Date")
  valid_603376 = validateParameter(valid_603376, JString, required = false,
                                 default = nil)
  if valid_603376 != nil:
    section.add "X-Amz-Date", valid_603376
  var valid_603377 = header.getOrDefault("X-Amz-Security-Token")
  valid_603377 = validateParameter(valid_603377, JString, required = false,
                                 default = nil)
  if valid_603377 != nil:
    section.add "X-Amz-Security-Token", valid_603377
  var valid_603378 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603378 = validateParameter(valid_603378, JString, required = false,
                                 default = nil)
  if valid_603378 != nil:
    section.add "X-Amz-Content-Sha256", valid_603378
  var valid_603379 = header.getOrDefault("X-Amz-Algorithm")
  valid_603379 = validateParameter(valid_603379, JString, required = false,
                                 default = nil)
  if valid_603379 != nil:
    section.add "X-Amz-Algorithm", valid_603379
  var valid_603380 = header.getOrDefault("X-Amz-Signature")
  valid_603380 = validateParameter(valid_603380, JString, required = false,
                                 default = nil)
  if valid_603380 != nil:
    section.add "X-Amz-Signature", valid_603380
  var valid_603381 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603381 = validateParameter(valid_603381, JString, required = false,
                                 default = nil)
  if valid_603381 != nil:
    section.add "X-Amz-SignedHeaders", valid_603381
  var valid_603382 = header.getOrDefault("X-Amz-Credential")
  valid_603382 = validateParameter(valid_603382, JString, required = false,
                                 default = nil)
  if valid_603382 != nil:
    section.add "X-Amz-Credential", valid_603382
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603383: Call_GetCreateLaunchConfiguration_603353; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a launch configuration.</p> <p>If you exceed your maximum limit of launch configurations, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html">Launch Configurations</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_603383.validator(path, query, header, formData, body)
  let scheme = call_603383.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603383.url(scheme.get, call_603383.host, call_603383.base,
                         call_603383.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603383, url, valid)

proc call*(call_603384: Call_GetCreateLaunchConfiguration_603353;
          LaunchConfigurationName: string; PlacementTenancy: string = "";
          KeyName: string = ""; KernelId: string = ""; UserData: string = "";
          AssociatePublicIpAddress: bool = false; EbsOptimized: bool = false;
          ImageId: string = ""; Action: string = "CreateLaunchConfiguration";
          InstanceMonitoringEnabled: string = "";
          BlockDeviceMappings: JsonNode = nil; RamdiskId: string = "";
          ClassicLinkVPCSecurityGroups: JsonNode = nil; InstanceType: string = "";
          ClassicLinkVPCId: string = ""; InstanceId: string = "";
          IamInstanceProfile: string = ""; Version: string = "2011-01-01";
          SecurityGroups: JsonNode = nil; SpotPrice: string = ""): Recallable =
  ## getCreateLaunchConfiguration
  ## <p>Creates a launch configuration.</p> <p>If you exceed your maximum limit of launch configurations, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html">Launch Configurations</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   PlacementTenancy: string
  ##                   : <p>The tenancy of the instance. An instance with <code>dedicated</code> tenancy runs on isolated, single-tenant hardware and can only be launched into a VPC.</p> <p>To launch dedicated instances into a shared tenancy VPC (a VPC with the instance placement tenancy attribute set to <code>default</code>), you must set the value of this parameter to <code>dedicated</code>.</p> <p>If you specify <code>PlacementTenancy</code>, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-vpc-tenancy">Instance Placement Tenancy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Valid values: <code>default</code> | <code>dedicated</code> </p>
  ##   KeyName: string
  ##          : The name of the key pair. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Amazon EC2 Key Pairs</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   KernelId: string
  ##           : The ID of the kernel associated with the AMI.
  ##   UserData: string
  ##           : The Base64-encoded user data to make available to the launched EC2 instances. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance Metadata and User Data</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   LaunchConfigurationName: string (required)
  ##                          : The name of the launch configuration. This name must be unique per Region per account.
  ##   AssociatePublicIpAddress: bool
  ##                           : <p>For Auto Scaling groups that are running in a virtual private cloud (VPC), specifies whether to assign a public IP address to the group's instances. If you specify <code>true</code>, each instance in the Auto Scaling group receives a unique public IP address. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html">Launching Auto Scaling Instances in a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify this parameter, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <note> <p>If the instance is launched into a default subnet, the default is to assign a public IP address, unless you disabled the option to assign a public IP address on the subnet. If the instance is launched into a nondefault subnet, the default is not to assign a public IP address, unless you enabled the option to assign a public IP address on the subnet.</p> </note>
  ##   EbsOptimized: bool
  ##               : <p>Specifies whether the launch configuration is optimized for EBS I/O (<code>true</code>) or not (<code>false</code>). The optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization is not available with all instance types. Additional fees are incurred when you enable EBS optimization for an instance type that is not EBS-optimized by default. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html">Amazon EBS-Optimized Instances</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>The default value is <code>false</code>. </p>
  ##   ImageId: string
  ##          : <p>The ID of the Amazon Machine Image (AMI) that was assigned during registration. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html">Finding an AMI</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>ImageId</code>.</p>
  ##   Action: string (required)
  ##   InstanceMonitoringEnabled: string
  ##                            : Describes whether detailed monitoring is enabled for the Auto Scaling instances.
  ## If <code>true</code>, detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
  ##   BlockDeviceMappings: JArray
  ##                      : A block device mapping, which specifies the block devices for the instance. You can specify virtual devices and EBS volumes. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html">Block Device Mapping</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   RamdiskId: string
  ##            : The ID of the RAM disk to select.
  ##   ClassicLinkVPCSecurityGroups: JArray
  ##                               : <p>The IDs of one or more security groups for the specified ClassicLink-enabled VPC. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify the <code>ClassicLinkVPCId</code> parameter, you must specify this parameter. </p>
  ##   InstanceType: string
  ##               : <p>Specifies the instance type of the EC2 instance.</p> <p>For information about available instance types, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes">Available Instance Types</a> in the <i>Amazon EC2 User Guide for Linux Instances.</i> </p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>InstanceType</code>.</p>
  ##   ClassicLinkVPCId: string
  ##                   : <p>The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>This parameter can only be used if you are launching EC2-Classic instances. </p>
  ##   InstanceId: string
  ##             : <p>The ID of the instance to use to create the launch configuration. The new launch configuration derives attributes from the instance, except for the block device mapping.</p> <p>To create a launch configuration with a block device mapping or override any other instance attributes, specify them as part of the same request.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-lc-with-instanceID.html">Create a Launch Configuration Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify both <code>ImageId</code> and <code>InstanceType</code>.</p>
  ##   IamInstanceProfile: string
  ##                     : <p>The name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/us-iam-role.html">IAM Role for Applications That Run on Amazon EC2 Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Version: string (required)
  ##   SecurityGroups: JArray
  ##                 : <p>A list that contains the security groups to assign to the instances in the Auto Scaling group.</p> <p>[EC2-VPC] Specify the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security Groups for Your VPC</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>[EC2-Classic] Specify either the security group names or the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon EC2 Security Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
  ##   SpotPrice: string
  ##            : <p>The maximum hourly price to be paid for any Spot Instance launched to fulfill the request. Spot Instances are launched when the price you specify exceeds the current Spot market price. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-launch-spot-instances.html">Launching Spot Instances in Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If a Spot price is set, then the Auto Scaling group will only launch instances when the Spot price has been met, regardless of the setting in the Auto Scaling group's <code>DesiredCapacity</code>. </p> <note> <p>When you change your Spot price by creating a new launch configuration, running instances will continue to run as long as the Spot price for those running instances is higher than the current Spot market price. </p> </note>
  var query_603385 = newJObject()
  add(query_603385, "PlacementTenancy", newJString(PlacementTenancy))
  add(query_603385, "KeyName", newJString(KeyName))
  add(query_603385, "KernelId", newJString(KernelId))
  add(query_603385, "UserData", newJString(UserData))
  add(query_603385, "LaunchConfigurationName", newJString(LaunchConfigurationName))
  add(query_603385, "AssociatePublicIpAddress", newJBool(AssociatePublicIpAddress))
  add(query_603385, "EbsOptimized", newJBool(EbsOptimized))
  add(query_603385, "ImageId", newJString(ImageId))
  add(query_603385, "Action", newJString(Action))
  add(query_603385, "InstanceMonitoring.Enabled",
      newJString(InstanceMonitoringEnabled))
  if BlockDeviceMappings != nil:
    query_603385.add "BlockDeviceMappings", BlockDeviceMappings
  add(query_603385, "RamdiskId", newJString(RamdiskId))
  if ClassicLinkVPCSecurityGroups != nil:
    query_603385.add "ClassicLinkVPCSecurityGroups", ClassicLinkVPCSecurityGroups
  add(query_603385, "InstanceType", newJString(InstanceType))
  add(query_603385, "ClassicLinkVPCId", newJString(ClassicLinkVPCId))
  add(query_603385, "InstanceId", newJString(InstanceId))
  add(query_603385, "IamInstanceProfile", newJString(IamInstanceProfile))
  add(query_603385, "Version", newJString(Version))
  if SecurityGroups != nil:
    query_603385.add "SecurityGroups", SecurityGroups
  add(query_603385, "SpotPrice", newJString(SpotPrice))
  result = call_603384.call(nil, query_603385, nil, nil, nil)

var getCreateLaunchConfiguration* = Call_GetCreateLaunchConfiguration_603353(
    name: "getCreateLaunchConfiguration", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=CreateLaunchConfiguration",
    validator: validate_GetCreateLaunchConfiguration_603354, base: "/",
    url: url_GetCreateLaunchConfiguration_603355,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateOrUpdateTags_603436 = ref object of OpenApiRestCall_602466
proc url_PostCreateOrUpdateTags_603438(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateOrUpdateTags_603437(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates or updates tags for the specified Auto Scaling group.</p> <p>When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603439 = query.getOrDefault("Action")
  valid_603439 = validateParameter(valid_603439, JString, required = true,
                                 default = newJString("CreateOrUpdateTags"))
  if valid_603439 != nil:
    section.add "Action", valid_603439
  var valid_603440 = query.getOrDefault("Version")
  valid_603440 = validateParameter(valid_603440, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603440 != nil:
    section.add "Version", valid_603440
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603441 = header.getOrDefault("X-Amz-Date")
  valid_603441 = validateParameter(valid_603441, JString, required = false,
                                 default = nil)
  if valid_603441 != nil:
    section.add "X-Amz-Date", valid_603441
  var valid_603442 = header.getOrDefault("X-Amz-Security-Token")
  valid_603442 = validateParameter(valid_603442, JString, required = false,
                                 default = nil)
  if valid_603442 != nil:
    section.add "X-Amz-Security-Token", valid_603442
  var valid_603443 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603443 = validateParameter(valid_603443, JString, required = false,
                                 default = nil)
  if valid_603443 != nil:
    section.add "X-Amz-Content-Sha256", valid_603443
  var valid_603444 = header.getOrDefault("X-Amz-Algorithm")
  valid_603444 = validateParameter(valid_603444, JString, required = false,
                                 default = nil)
  if valid_603444 != nil:
    section.add "X-Amz-Algorithm", valid_603444
  var valid_603445 = header.getOrDefault("X-Amz-Signature")
  valid_603445 = validateParameter(valid_603445, JString, required = false,
                                 default = nil)
  if valid_603445 != nil:
    section.add "X-Amz-Signature", valid_603445
  var valid_603446 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603446 = validateParameter(valid_603446, JString, required = false,
                                 default = nil)
  if valid_603446 != nil:
    section.add "X-Amz-SignedHeaders", valid_603446
  var valid_603447 = header.getOrDefault("X-Amz-Credential")
  valid_603447 = validateParameter(valid_603447, JString, required = false,
                                 default = nil)
  if valid_603447 != nil:
    section.add "X-Amz-Credential", valid_603447
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray (required)
  ##       : One or more tags.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Tags` field"
  var valid_603448 = formData.getOrDefault("Tags")
  valid_603448 = validateParameter(valid_603448, JArray, required = true, default = nil)
  if valid_603448 != nil:
    section.add "Tags", valid_603448
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603449: Call_PostCreateOrUpdateTags_603436; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates or updates tags for the specified Auto Scaling group.</p> <p>When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_603449.validator(path, query, header, formData, body)
  let scheme = call_603449.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603449.url(scheme.get, call_603449.host, call_603449.base,
                         call_603449.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603449, url, valid)

proc call*(call_603450: Call_PostCreateOrUpdateTags_603436; Tags: JsonNode;
          Action: string = "CreateOrUpdateTags"; Version: string = "2011-01-01"): Recallable =
  ## postCreateOrUpdateTags
  ## <p>Creates or updates tags for the specified Auto Scaling group.</p> <p>When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Tags: JArray (required)
  ##       : One or more tags.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603451 = newJObject()
  var formData_603452 = newJObject()
  if Tags != nil:
    formData_603452.add "Tags", Tags
  add(query_603451, "Action", newJString(Action))
  add(query_603451, "Version", newJString(Version))
  result = call_603450.call(nil, query_603451, nil, formData_603452, nil)

var postCreateOrUpdateTags* = Call_PostCreateOrUpdateTags_603436(
    name: "postCreateOrUpdateTags", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=CreateOrUpdateTags",
    validator: validate_PostCreateOrUpdateTags_603437, base: "/",
    url: url_PostCreateOrUpdateTags_603438, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateOrUpdateTags_603420 = ref object of OpenApiRestCall_602466
proc url_GetCreateOrUpdateTags_603422(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateOrUpdateTags_603421(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates or updates tags for the specified Auto Scaling group.</p> <p>When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : One or more tags.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_603423 = query.getOrDefault("Tags")
  valid_603423 = validateParameter(valid_603423, JArray, required = true, default = nil)
  if valid_603423 != nil:
    section.add "Tags", valid_603423
  var valid_603424 = query.getOrDefault("Action")
  valid_603424 = validateParameter(valid_603424, JString, required = true,
                                 default = newJString("CreateOrUpdateTags"))
  if valid_603424 != nil:
    section.add "Action", valid_603424
  var valid_603425 = query.getOrDefault("Version")
  valid_603425 = validateParameter(valid_603425, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603425 != nil:
    section.add "Version", valid_603425
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603426 = header.getOrDefault("X-Amz-Date")
  valid_603426 = validateParameter(valid_603426, JString, required = false,
                                 default = nil)
  if valid_603426 != nil:
    section.add "X-Amz-Date", valid_603426
  var valid_603427 = header.getOrDefault("X-Amz-Security-Token")
  valid_603427 = validateParameter(valid_603427, JString, required = false,
                                 default = nil)
  if valid_603427 != nil:
    section.add "X-Amz-Security-Token", valid_603427
  var valid_603428 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603428 = validateParameter(valid_603428, JString, required = false,
                                 default = nil)
  if valid_603428 != nil:
    section.add "X-Amz-Content-Sha256", valid_603428
  var valid_603429 = header.getOrDefault("X-Amz-Algorithm")
  valid_603429 = validateParameter(valid_603429, JString, required = false,
                                 default = nil)
  if valid_603429 != nil:
    section.add "X-Amz-Algorithm", valid_603429
  var valid_603430 = header.getOrDefault("X-Amz-Signature")
  valid_603430 = validateParameter(valid_603430, JString, required = false,
                                 default = nil)
  if valid_603430 != nil:
    section.add "X-Amz-Signature", valid_603430
  var valid_603431 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603431 = validateParameter(valid_603431, JString, required = false,
                                 default = nil)
  if valid_603431 != nil:
    section.add "X-Amz-SignedHeaders", valid_603431
  var valid_603432 = header.getOrDefault("X-Amz-Credential")
  valid_603432 = validateParameter(valid_603432, JString, required = false,
                                 default = nil)
  if valid_603432 != nil:
    section.add "X-Amz-Credential", valid_603432
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603433: Call_GetCreateOrUpdateTags_603420; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates or updates tags for the specified Auto Scaling group.</p> <p>When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_603433.validator(path, query, header, formData, body)
  let scheme = call_603433.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603433.url(scheme.get, call_603433.host, call_603433.base,
                         call_603433.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603433, url, valid)

proc call*(call_603434: Call_GetCreateOrUpdateTags_603420; Tags: JsonNode;
          Action: string = "CreateOrUpdateTags"; Version: string = "2011-01-01"): Recallable =
  ## getCreateOrUpdateTags
  ## <p>Creates or updates tags for the specified Auto Scaling group.</p> <p>When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Tags: JArray (required)
  ##       : One or more tags.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603435 = newJObject()
  if Tags != nil:
    query_603435.add "Tags", Tags
  add(query_603435, "Action", newJString(Action))
  add(query_603435, "Version", newJString(Version))
  result = call_603434.call(nil, query_603435, nil, nil, nil)

var getCreateOrUpdateTags* = Call_GetCreateOrUpdateTags_603420(
    name: "getCreateOrUpdateTags", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=CreateOrUpdateTags",
    validator: validate_GetCreateOrUpdateTags_603421, base: "/",
    url: url_GetCreateOrUpdateTags_603422, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteAutoScalingGroup_603470 = ref object of OpenApiRestCall_602466
proc url_PostDeleteAutoScalingGroup_603472(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteAutoScalingGroup_603471(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified Auto Scaling group.</p> <p>If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed.</p> <p>If the group has policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.</p> <p>To remove instances from the Auto Scaling group before deleting it, call <a>DetachInstances</a> with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.</p> <p>To terminate all instances before deleting the Auto Scaling group, call <a>UpdateAutoScalingGroup</a> and set the minimum size and desired capacity of the Auto Scaling group to zero.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603473 = query.getOrDefault("Action")
  valid_603473 = validateParameter(valid_603473, JString, required = true,
                                 default = newJString("DeleteAutoScalingGroup"))
  if valid_603473 != nil:
    section.add "Action", valid_603473
  var valid_603474 = query.getOrDefault("Version")
  valid_603474 = validateParameter(valid_603474, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603474 != nil:
    section.add "Version", valid_603474
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603475 = header.getOrDefault("X-Amz-Date")
  valid_603475 = validateParameter(valid_603475, JString, required = false,
                                 default = nil)
  if valid_603475 != nil:
    section.add "X-Amz-Date", valid_603475
  var valid_603476 = header.getOrDefault("X-Amz-Security-Token")
  valid_603476 = validateParameter(valid_603476, JString, required = false,
                                 default = nil)
  if valid_603476 != nil:
    section.add "X-Amz-Security-Token", valid_603476
  var valid_603477 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603477 = validateParameter(valid_603477, JString, required = false,
                                 default = nil)
  if valid_603477 != nil:
    section.add "X-Amz-Content-Sha256", valid_603477
  var valid_603478 = header.getOrDefault("X-Amz-Algorithm")
  valid_603478 = validateParameter(valid_603478, JString, required = false,
                                 default = nil)
  if valid_603478 != nil:
    section.add "X-Amz-Algorithm", valid_603478
  var valid_603479 = header.getOrDefault("X-Amz-Signature")
  valid_603479 = validateParameter(valid_603479, JString, required = false,
                                 default = nil)
  if valid_603479 != nil:
    section.add "X-Amz-Signature", valid_603479
  var valid_603480 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603480 = validateParameter(valid_603480, JString, required = false,
                                 default = nil)
  if valid_603480 != nil:
    section.add "X-Amz-SignedHeaders", valid_603480
  var valid_603481 = header.getOrDefault("X-Amz-Credential")
  valid_603481 = validateParameter(valid_603481, JString, required = false,
                                 default = nil)
  if valid_603481 != nil:
    section.add "X-Amz-Credential", valid_603481
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   ForceDelete: JBool
  ##              : Specifies that the group is to be deleted along with all instances associated with the group, without waiting for all instances to be terminated. This parameter also deletes any lifecycle actions associated with the group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_603482 = formData.getOrDefault("AutoScalingGroupName")
  valid_603482 = validateParameter(valid_603482, JString, required = true,
                                 default = nil)
  if valid_603482 != nil:
    section.add "AutoScalingGroupName", valid_603482
  var valid_603483 = formData.getOrDefault("ForceDelete")
  valid_603483 = validateParameter(valid_603483, JBool, required = false, default = nil)
  if valid_603483 != nil:
    section.add "ForceDelete", valid_603483
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603484: Call_PostDeleteAutoScalingGroup_603470; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified Auto Scaling group.</p> <p>If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed.</p> <p>If the group has policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.</p> <p>To remove instances from the Auto Scaling group before deleting it, call <a>DetachInstances</a> with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.</p> <p>To terminate all instances before deleting the Auto Scaling group, call <a>UpdateAutoScalingGroup</a> and set the minimum size and desired capacity of the Auto Scaling group to zero.</p>
  ## 
  let valid = call_603484.validator(path, query, header, formData, body)
  let scheme = call_603484.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603484.url(scheme.get, call_603484.host, call_603484.base,
                         call_603484.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603484, url, valid)

proc call*(call_603485: Call_PostDeleteAutoScalingGroup_603470;
          AutoScalingGroupName: string; ForceDelete: bool = false;
          Action: string = "DeleteAutoScalingGroup"; Version: string = "2011-01-01"): Recallable =
  ## postDeleteAutoScalingGroup
  ## <p>Deletes the specified Auto Scaling group.</p> <p>If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed.</p> <p>If the group has policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.</p> <p>To remove instances from the Auto Scaling group before deleting it, call <a>DetachInstances</a> with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.</p> <p>To terminate all instances before deleting the Auto Scaling group, call <a>UpdateAutoScalingGroup</a> and set the minimum size and desired capacity of the Auto Scaling group to zero.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   ForceDelete: bool
  ##              : Specifies that the group is to be deleted along with all instances associated with the group, without waiting for all instances to be terminated. This parameter also deletes any lifecycle actions associated with the group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603486 = newJObject()
  var formData_603487 = newJObject()
  add(formData_603487, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_603487, "ForceDelete", newJBool(ForceDelete))
  add(query_603486, "Action", newJString(Action))
  add(query_603486, "Version", newJString(Version))
  result = call_603485.call(nil, query_603486, nil, formData_603487, nil)

var postDeleteAutoScalingGroup* = Call_PostDeleteAutoScalingGroup_603470(
    name: "postDeleteAutoScalingGroup", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DeleteAutoScalingGroup",
    validator: validate_PostDeleteAutoScalingGroup_603471, base: "/",
    url: url_PostDeleteAutoScalingGroup_603472,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteAutoScalingGroup_603453 = ref object of OpenApiRestCall_602466
proc url_GetDeleteAutoScalingGroup_603455(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteAutoScalingGroup_603454(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified Auto Scaling group.</p> <p>If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed.</p> <p>If the group has policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.</p> <p>To remove instances from the Auto Scaling group before deleting it, call <a>DetachInstances</a> with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.</p> <p>To terminate all instances before deleting the Auto Scaling group, call <a>UpdateAutoScalingGroup</a> and set the minimum size and desired capacity of the Auto Scaling group to zero.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   ForceDelete: JBool
  ##              : Specifies that the group is to be deleted along with all instances associated with the group, without waiting for all instances to be terminated. This parameter also deletes any lifecycle actions associated with the group.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_603456 = query.getOrDefault("AutoScalingGroupName")
  valid_603456 = validateParameter(valid_603456, JString, required = true,
                                 default = nil)
  if valid_603456 != nil:
    section.add "AutoScalingGroupName", valid_603456
  var valid_603457 = query.getOrDefault("Action")
  valid_603457 = validateParameter(valid_603457, JString, required = true,
                                 default = newJString("DeleteAutoScalingGroup"))
  if valid_603457 != nil:
    section.add "Action", valid_603457
  var valid_603458 = query.getOrDefault("ForceDelete")
  valid_603458 = validateParameter(valid_603458, JBool, required = false, default = nil)
  if valid_603458 != nil:
    section.add "ForceDelete", valid_603458
  var valid_603459 = query.getOrDefault("Version")
  valid_603459 = validateParameter(valid_603459, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603459 != nil:
    section.add "Version", valid_603459
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603460 = header.getOrDefault("X-Amz-Date")
  valid_603460 = validateParameter(valid_603460, JString, required = false,
                                 default = nil)
  if valid_603460 != nil:
    section.add "X-Amz-Date", valid_603460
  var valid_603461 = header.getOrDefault("X-Amz-Security-Token")
  valid_603461 = validateParameter(valid_603461, JString, required = false,
                                 default = nil)
  if valid_603461 != nil:
    section.add "X-Amz-Security-Token", valid_603461
  var valid_603462 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603462 = validateParameter(valid_603462, JString, required = false,
                                 default = nil)
  if valid_603462 != nil:
    section.add "X-Amz-Content-Sha256", valid_603462
  var valid_603463 = header.getOrDefault("X-Amz-Algorithm")
  valid_603463 = validateParameter(valid_603463, JString, required = false,
                                 default = nil)
  if valid_603463 != nil:
    section.add "X-Amz-Algorithm", valid_603463
  var valid_603464 = header.getOrDefault("X-Amz-Signature")
  valid_603464 = validateParameter(valid_603464, JString, required = false,
                                 default = nil)
  if valid_603464 != nil:
    section.add "X-Amz-Signature", valid_603464
  var valid_603465 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603465 = validateParameter(valid_603465, JString, required = false,
                                 default = nil)
  if valid_603465 != nil:
    section.add "X-Amz-SignedHeaders", valid_603465
  var valid_603466 = header.getOrDefault("X-Amz-Credential")
  valid_603466 = validateParameter(valid_603466, JString, required = false,
                                 default = nil)
  if valid_603466 != nil:
    section.add "X-Amz-Credential", valid_603466
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603467: Call_GetDeleteAutoScalingGroup_603453; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified Auto Scaling group.</p> <p>If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed.</p> <p>If the group has policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.</p> <p>To remove instances from the Auto Scaling group before deleting it, call <a>DetachInstances</a> with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.</p> <p>To terminate all instances before deleting the Auto Scaling group, call <a>UpdateAutoScalingGroup</a> and set the minimum size and desired capacity of the Auto Scaling group to zero.</p>
  ## 
  let valid = call_603467.validator(path, query, header, formData, body)
  let scheme = call_603467.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603467.url(scheme.get, call_603467.host, call_603467.base,
                         call_603467.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603467, url, valid)

proc call*(call_603468: Call_GetDeleteAutoScalingGroup_603453;
          AutoScalingGroupName: string; Action: string = "DeleteAutoScalingGroup";
          ForceDelete: bool = false; Version: string = "2011-01-01"): Recallable =
  ## getDeleteAutoScalingGroup
  ## <p>Deletes the specified Auto Scaling group.</p> <p>If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed.</p> <p>If the group has policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.</p> <p>To remove instances from the Auto Scaling group before deleting it, call <a>DetachInstances</a> with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.</p> <p>To terminate all instances before deleting the Auto Scaling group, call <a>UpdateAutoScalingGroup</a> and set the minimum size and desired capacity of the Auto Scaling group to zero.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   ForceDelete: bool
  ##              : Specifies that the group is to be deleted along with all instances associated with the group, without waiting for all instances to be terminated. This parameter also deletes any lifecycle actions associated with the group.
  ##   Version: string (required)
  var query_603469 = newJObject()
  add(query_603469, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_603469, "Action", newJString(Action))
  add(query_603469, "ForceDelete", newJBool(ForceDelete))
  add(query_603469, "Version", newJString(Version))
  result = call_603468.call(nil, query_603469, nil, nil, nil)

var getDeleteAutoScalingGroup* = Call_GetDeleteAutoScalingGroup_603453(
    name: "getDeleteAutoScalingGroup", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DeleteAutoScalingGroup",
    validator: validate_GetDeleteAutoScalingGroup_603454, base: "/",
    url: url_GetDeleteAutoScalingGroup_603455,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteLaunchConfiguration_603504 = ref object of OpenApiRestCall_602466
proc url_PostDeleteLaunchConfiguration_603506(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteLaunchConfiguration_603505(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified launch configuration.</p> <p>The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603507 = query.getOrDefault("Action")
  valid_603507 = validateParameter(valid_603507, JString, required = true, default = newJString(
      "DeleteLaunchConfiguration"))
  if valid_603507 != nil:
    section.add "Action", valid_603507
  var valid_603508 = query.getOrDefault("Version")
  valid_603508 = validateParameter(valid_603508, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603508 != nil:
    section.add "Version", valid_603508
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603509 = header.getOrDefault("X-Amz-Date")
  valid_603509 = validateParameter(valid_603509, JString, required = false,
                                 default = nil)
  if valid_603509 != nil:
    section.add "X-Amz-Date", valid_603509
  var valid_603510 = header.getOrDefault("X-Amz-Security-Token")
  valid_603510 = validateParameter(valid_603510, JString, required = false,
                                 default = nil)
  if valid_603510 != nil:
    section.add "X-Amz-Security-Token", valid_603510
  var valid_603511 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603511 = validateParameter(valid_603511, JString, required = false,
                                 default = nil)
  if valid_603511 != nil:
    section.add "X-Amz-Content-Sha256", valid_603511
  var valid_603512 = header.getOrDefault("X-Amz-Algorithm")
  valid_603512 = validateParameter(valid_603512, JString, required = false,
                                 default = nil)
  if valid_603512 != nil:
    section.add "X-Amz-Algorithm", valid_603512
  var valid_603513 = header.getOrDefault("X-Amz-Signature")
  valid_603513 = validateParameter(valid_603513, JString, required = false,
                                 default = nil)
  if valid_603513 != nil:
    section.add "X-Amz-Signature", valid_603513
  var valid_603514 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603514 = validateParameter(valid_603514, JString, required = false,
                                 default = nil)
  if valid_603514 != nil:
    section.add "X-Amz-SignedHeaders", valid_603514
  var valid_603515 = header.getOrDefault("X-Amz-Credential")
  valid_603515 = validateParameter(valid_603515, JString, required = false,
                                 default = nil)
  if valid_603515 != nil:
    section.add "X-Amz-Credential", valid_603515
  result.add "header", section
  ## parameters in `formData` object:
  ##   LaunchConfigurationName: JString (required)
  ##                          : The name of the launch configuration.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `LaunchConfigurationName` field"
  var valid_603516 = formData.getOrDefault("LaunchConfigurationName")
  valid_603516 = validateParameter(valid_603516, JString, required = true,
                                 default = nil)
  if valid_603516 != nil:
    section.add "LaunchConfigurationName", valid_603516
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603517: Call_PostDeleteLaunchConfiguration_603504; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified launch configuration.</p> <p>The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.</p>
  ## 
  let valid = call_603517.validator(path, query, header, formData, body)
  let scheme = call_603517.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603517.url(scheme.get, call_603517.host, call_603517.base,
                         call_603517.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603517, url, valid)

proc call*(call_603518: Call_PostDeleteLaunchConfiguration_603504;
          LaunchConfigurationName: string;
          Action: string = "DeleteLaunchConfiguration";
          Version: string = "2011-01-01"): Recallable =
  ## postDeleteLaunchConfiguration
  ## <p>Deletes the specified launch configuration.</p> <p>The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.</p>
  ##   LaunchConfigurationName: string (required)
  ##                          : The name of the launch configuration.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603519 = newJObject()
  var formData_603520 = newJObject()
  add(formData_603520, "LaunchConfigurationName",
      newJString(LaunchConfigurationName))
  add(query_603519, "Action", newJString(Action))
  add(query_603519, "Version", newJString(Version))
  result = call_603518.call(nil, query_603519, nil, formData_603520, nil)

var postDeleteLaunchConfiguration* = Call_PostDeleteLaunchConfiguration_603504(
    name: "postDeleteLaunchConfiguration", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DeleteLaunchConfiguration",
    validator: validate_PostDeleteLaunchConfiguration_603505, base: "/",
    url: url_PostDeleteLaunchConfiguration_603506,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteLaunchConfiguration_603488 = ref object of OpenApiRestCall_602466
proc url_GetDeleteLaunchConfiguration_603490(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteLaunchConfiguration_603489(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified launch configuration.</p> <p>The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   LaunchConfigurationName: JString (required)
  ##                          : The name of the launch configuration.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `LaunchConfigurationName` field"
  var valid_603491 = query.getOrDefault("LaunchConfigurationName")
  valid_603491 = validateParameter(valid_603491, JString, required = true,
                                 default = nil)
  if valid_603491 != nil:
    section.add "LaunchConfigurationName", valid_603491
  var valid_603492 = query.getOrDefault("Action")
  valid_603492 = validateParameter(valid_603492, JString, required = true, default = newJString(
      "DeleteLaunchConfiguration"))
  if valid_603492 != nil:
    section.add "Action", valid_603492
  var valid_603493 = query.getOrDefault("Version")
  valid_603493 = validateParameter(valid_603493, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603493 != nil:
    section.add "Version", valid_603493
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603494 = header.getOrDefault("X-Amz-Date")
  valid_603494 = validateParameter(valid_603494, JString, required = false,
                                 default = nil)
  if valid_603494 != nil:
    section.add "X-Amz-Date", valid_603494
  var valid_603495 = header.getOrDefault("X-Amz-Security-Token")
  valid_603495 = validateParameter(valid_603495, JString, required = false,
                                 default = nil)
  if valid_603495 != nil:
    section.add "X-Amz-Security-Token", valid_603495
  var valid_603496 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603496 = validateParameter(valid_603496, JString, required = false,
                                 default = nil)
  if valid_603496 != nil:
    section.add "X-Amz-Content-Sha256", valid_603496
  var valid_603497 = header.getOrDefault("X-Amz-Algorithm")
  valid_603497 = validateParameter(valid_603497, JString, required = false,
                                 default = nil)
  if valid_603497 != nil:
    section.add "X-Amz-Algorithm", valid_603497
  var valid_603498 = header.getOrDefault("X-Amz-Signature")
  valid_603498 = validateParameter(valid_603498, JString, required = false,
                                 default = nil)
  if valid_603498 != nil:
    section.add "X-Amz-Signature", valid_603498
  var valid_603499 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603499 = validateParameter(valid_603499, JString, required = false,
                                 default = nil)
  if valid_603499 != nil:
    section.add "X-Amz-SignedHeaders", valid_603499
  var valid_603500 = header.getOrDefault("X-Amz-Credential")
  valid_603500 = validateParameter(valid_603500, JString, required = false,
                                 default = nil)
  if valid_603500 != nil:
    section.add "X-Amz-Credential", valid_603500
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603501: Call_GetDeleteLaunchConfiguration_603488; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified launch configuration.</p> <p>The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.</p>
  ## 
  let valid = call_603501.validator(path, query, header, formData, body)
  let scheme = call_603501.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603501.url(scheme.get, call_603501.host, call_603501.base,
                         call_603501.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603501, url, valid)

proc call*(call_603502: Call_GetDeleteLaunchConfiguration_603488;
          LaunchConfigurationName: string;
          Action: string = "DeleteLaunchConfiguration";
          Version: string = "2011-01-01"): Recallable =
  ## getDeleteLaunchConfiguration
  ## <p>Deletes the specified launch configuration.</p> <p>The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.</p>
  ##   LaunchConfigurationName: string (required)
  ##                          : The name of the launch configuration.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603503 = newJObject()
  add(query_603503, "LaunchConfigurationName", newJString(LaunchConfigurationName))
  add(query_603503, "Action", newJString(Action))
  add(query_603503, "Version", newJString(Version))
  result = call_603502.call(nil, query_603503, nil, nil, nil)

var getDeleteLaunchConfiguration* = Call_GetDeleteLaunchConfiguration_603488(
    name: "getDeleteLaunchConfiguration", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DeleteLaunchConfiguration",
    validator: validate_GetDeleteLaunchConfiguration_603489, base: "/",
    url: url_GetDeleteLaunchConfiguration_603490,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteLifecycleHook_603538 = ref object of OpenApiRestCall_602466
proc url_PostDeleteLifecycleHook_603540(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteLifecycleHook_603539(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified lifecycle hook.</p> <p>If there are any outstanding lifecycle actions, they are completed first (<code>ABANDON</code> for launching instances, <code>CONTINUE</code> for terminating instances).</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603541 = query.getOrDefault("Action")
  valid_603541 = validateParameter(valid_603541, JString, required = true,
                                 default = newJString("DeleteLifecycleHook"))
  if valid_603541 != nil:
    section.add "Action", valid_603541
  var valid_603542 = query.getOrDefault("Version")
  valid_603542 = validateParameter(valid_603542, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603542 != nil:
    section.add "Version", valid_603542
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603543 = header.getOrDefault("X-Amz-Date")
  valid_603543 = validateParameter(valid_603543, JString, required = false,
                                 default = nil)
  if valid_603543 != nil:
    section.add "X-Amz-Date", valid_603543
  var valid_603544 = header.getOrDefault("X-Amz-Security-Token")
  valid_603544 = validateParameter(valid_603544, JString, required = false,
                                 default = nil)
  if valid_603544 != nil:
    section.add "X-Amz-Security-Token", valid_603544
  var valid_603545 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603545 = validateParameter(valid_603545, JString, required = false,
                                 default = nil)
  if valid_603545 != nil:
    section.add "X-Amz-Content-Sha256", valid_603545
  var valid_603546 = header.getOrDefault("X-Amz-Algorithm")
  valid_603546 = validateParameter(valid_603546, JString, required = false,
                                 default = nil)
  if valid_603546 != nil:
    section.add "X-Amz-Algorithm", valid_603546
  var valid_603547 = header.getOrDefault("X-Amz-Signature")
  valid_603547 = validateParameter(valid_603547, JString, required = false,
                                 default = nil)
  if valid_603547 != nil:
    section.add "X-Amz-Signature", valid_603547
  var valid_603548 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603548 = validateParameter(valid_603548, JString, required = false,
                                 default = nil)
  if valid_603548 != nil:
    section.add "X-Amz-SignedHeaders", valid_603548
  var valid_603549 = header.getOrDefault("X-Amz-Credential")
  valid_603549 = validateParameter(valid_603549, JString, required = false,
                                 default = nil)
  if valid_603549 != nil:
    section.add "X-Amz-Credential", valid_603549
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_603550 = formData.getOrDefault("AutoScalingGroupName")
  valid_603550 = validateParameter(valid_603550, JString, required = true,
                                 default = nil)
  if valid_603550 != nil:
    section.add "AutoScalingGroupName", valid_603550
  var valid_603551 = formData.getOrDefault("LifecycleHookName")
  valid_603551 = validateParameter(valid_603551, JString, required = true,
                                 default = nil)
  if valid_603551 != nil:
    section.add "LifecycleHookName", valid_603551
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603552: Call_PostDeleteLifecycleHook_603538; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified lifecycle hook.</p> <p>If there are any outstanding lifecycle actions, they are completed first (<code>ABANDON</code> for launching instances, <code>CONTINUE</code> for terminating instances).</p>
  ## 
  let valid = call_603552.validator(path, query, header, formData, body)
  let scheme = call_603552.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603552.url(scheme.get, call_603552.host, call_603552.base,
                         call_603552.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603552, url, valid)

proc call*(call_603553: Call_PostDeleteLifecycleHook_603538;
          AutoScalingGroupName: string; LifecycleHookName: string;
          Action: string = "DeleteLifecycleHook"; Version: string = "2011-01-01"): Recallable =
  ## postDeleteLifecycleHook
  ## <p>Deletes the specified lifecycle hook.</p> <p>If there are any outstanding lifecycle actions, they are completed first (<code>ABANDON</code> for launching instances, <code>CONTINUE</code> for terminating instances).</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   Version: string (required)
  var query_603554 = newJObject()
  var formData_603555 = newJObject()
  add(formData_603555, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_603554, "Action", newJString(Action))
  add(formData_603555, "LifecycleHookName", newJString(LifecycleHookName))
  add(query_603554, "Version", newJString(Version))
  result = call_603553.call(nil, query_603554, nil, formData_603555, nil)

var postDeleteLifecycleHook* = Call_PostDeleteLifecycleHook_603538(
    name: "postDeleteLifecycleHook", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DeleteLifecycleHook",
    validator: validate_PostDeleteLifecycleHook_603539, base: "/",
    url: url_PostDeleteLifecycleHook_603540, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteLifecycleHook_603521 = ref object of OpenApiRestCall_602466
proc url_GetDeleteLifecycleHook_603523(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteLifecycleHook_603522(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified lifecycle hook.</p> <p>If there are any outstanding lifecycle actions, they are completed first (<code>ABANDON</code> for launching instances, <code>CONTINUE</code> for terminating instances).</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_603524 = query.getOrDefault("AutoScalingGroupName")
  valid_603524 = validateParameter(valid_603524, JString, required = true,
                                 default = nil)
  if valid_603524 != nil:
    section.add "AutoScalingGroupName", valid_603524
  var valid_603525 = query.getOrDefault("Action")
  valid_603525 = validateParameter(valid_603525, JString, required = true,
                                 default = newJString("DeleteLifecycleHook"))
  if valid_603525 != nil:
    section.add "Action", valid_603525
  var valid_603526 = query.getOrDefault("LifecycleHookName")
  valid_603526 = validateParameter(valid_603526, JString, required = true,
                                 default = nil)
  if valid_603526 != nil:
    section.add "LifecycleHookName", valid_603526
  var valid_603527 = query.getOrDefault("Version")
  valid_603527 = validateParameter(valid_603527, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603527 != nil:
    section.add "Version", valid_603527
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603528 = header.getOrDefault("X-Amz-Date")
  valid_603528 = validateParameter(valid_603528, JString, required = false,
                                 default = nil)
  if valid_603528 != nil:
    section.add "X-Amz-Date", valid_603528
  var valid_603529 = header.getOrDefault("X-Amz-Security-Token")
  valid_603529 = validateParameter(valid_603529, JString, required = false,
                                 default = nil)
  if valid_603529 != nil:
    section.add "X-Amz-Security-Token", valid_603529
  var valid_603530 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603530 = validateParameter(valid_603530, JString, required = false,
                                 default = nil)
  if valid_603530 != nil:
    section.add "X-Amz-Content-Sha256", valid_603530
  var valid_603531 = header.getOrDefault("X-Amz-Algorithm")
  valid_603531 = validateParameter(valid_603531, JString, required = false,
                                 default = nil)
  if valid_603531 != nil:
    section.add "X-Amz-Algorithm", valid_603531
  var valid_603532 = header.getOrDefault("X-Amz-Signature")
  valid_603532 = validateParameter(valid_603532, JString, required = false,
                                 default = nil)
  if valid_603532 != nil:
    section.add "X-Amz-Signature", valid_603532
  var valid_603533 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603533 = validateParameter(valid_603533, JString, required = false,
                                 default = nil)
  if valid_603533 != nil:
    section.add "X-Amz-SignedHeaders", valid_603533
  var valid_603534 = header.getOrDefault("X-Amz-Credential")
  valid_603534 = validateParameter(valid_603534, JString, required = false,
                                 default = nil)
  if valid_603534 != nil:
    section.add "X-Amz-Credential", valid_603534
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603535: Call_GetDeleteLifecycleHook_603521; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified lifecycle hook.</p> <p>If there are any outstanding lifecycle actions, they are completed first (<code>ABANDON</code> for launching instances, <code>CONTINUE</code> for terminating instances).</p>
  ## 
  let valid = call_603535.validator(path, query, header, formData, body)
  let scheme = call_603535.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603535.url(scheme.get, call_603535.host, call_603535.base,
                         call_603535.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603535, url, valid)

proc call*(call_603536: Call_GetDeleteLifecycleHook_603521;
          AutoScalingGroupName: string; LifecycleHookName: string;
          Action: string = "DeleteLifecycleHook"; Version: string = "2011-01-01"): Recallable =
  ## getDeleteLifecycleHook
  ## <p>Deletes the specified lifecycle hook.</p> <p>If there are any outstanding lifecycle actions, they are completed first (<code>ABANDON</code> for launching instances, <code>CONTINUE</code> for terminating instances).</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   Version: string (required)
  var query_603537 = newJObject()
  add(query_603537, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_603537, "Action", newJString(Action))
  add(query_603537, "LifecycleHookName", newJString(LifecycleHookName))
  add(query_603537, "Version", newJString(Version))
  result = call_603536.call(nil, query_603537, nil, nil, nil)

var getDeleteLifecycleHook* = Call_GetDeleteLifecycleHook_603521(
    name: "getDeleteLifecycleHook", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DeleteLifecycleHook",
    validator: validate_GetDeleteLifecycleHook_603522, base: "/",
    url: url_GetDeleteLifecycleHook_603523, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteNotificationConfiguration_603573 = ref object of OpenApiRestCall_602466
proc url_PostDeleteNotificationConfiguration_603575(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteNotificationConfiguration_603574(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified notification.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603576 = query.getOrDefault("Action")
  valid_603576 = validateParameter(valid_603576, JString, required = true, default = newJString(
      "DeleteNotificationConfiguration"))
  if valid_603576 != nil:
    section.add "Action", valid_603576
  var valid_603577 = query.getOrDefault("Version")
  valid_603577 = validateParameter(valid_603577, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603577 != nil:
    section.add "Version", valid_603577
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603578 = header.getOrDefault("X-Amz-Date")
  valid_603578 = validateParameter(valid_603578, JString, required = false,
                                 default = nil)
  if valid_603578 != nil:
    section.add "X-Amz-Date", valid_603578
  var valid_603579 = header.getOrDefault("X-Amz-Security-Token")
  valid_603579 = validateParameter(valid_603579, JString, required = false,
                                 default = nil)
  if valid_603579 != nil:
    section.add "X-Amz-Security-Token", valid_603579
  var valid_603580 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603580 = validateParameter(valid_603580, JString, required = false,
                                 default = nil)
  if valid_603580 != nil:
    section.add "X-Amz-Content-Sha256", valid_603580
  var valid_603581 = header.getOrDefault("X-Amz-Algorithm")
  valid_603581 = validateParameter(valid_603581, JString, required = false,
                                 default = nil)
  if valid_603581 != nil:
    section.add "X-Amz-Algorithm", valid_603581
  var valid_603582 = header.getOrDefault("X-Amz-Signature")
  valid_603582 = validateParameter(valid_603582, JString, required = false,
                                 default = nil)
  if valid_603582 != nil:
    section.add "X-Amz-Signature", valid_603582
  var valid_603583 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603583 = validateParameter(valid_603583, JString, required = false,
                                 default = nil)
  if valid_603583 != nil:
    section.add "X-Amz-SignedHeaders", valid_603583
  var valid_603584 = header.getOrDefault("X-Amz-Credential")
  valid_603584 = validateParameter(valid_603584, JString, required = false,
                                 default = nil)
  if valid_603584 != nil:
    section.add "X-Amz-Credential", valid_603584
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   TopicARN: JString (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_603585 = formData.getOrDefault("AutoScalingGroupName")
  valid_603585 = validateParameter(valid_603585, JString, required = true,
                                 default = nil)
  if valid_603585 != nil:
    section.add "AutoScalingGroupName", valid_603585
  var valid_603586 = formData.getOrDefault("TopicARN")
  valid_603586 = validateParameter(valid_603586, JString, required = true,
                                 default = nil)
  if valid_603586 != nil:
    section.add "TopicARN", valid_603586
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603587: Call_PostDeleteNotificationConfiguration_603573;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes the specified notification.
  ## 
  let valid = call_603587.validator(path, query, header, formData, body)
  let scheme = call_603587.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603587.url(scheme.get, call_603587.host, call_603587.base,
                         call_603587.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603587, url, valid)

proc call*(call_603588: Call_PostDeleteNotificationConfiguration_603573;
          AutoScalingGroupName: string; TopicARN: string;
          Action: string = "DeleteNotificationConfiguration";
          Version: string = "2011-01-01"): Recallable =
  ## postDeleteNotificationConfiguration
  ## Deletes the specified notification.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   TopicARN: string (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603589 = newJObject()
  var formData_603590 = newJObject()
  add(formData_603590, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_603590, "TopicARN", newJString(TopicARN))
  add(query_603589, "Action", newJString(Action))
  add(query_603589, "Version", newJString(Version))
  result = call_603588.call(nil, query_603589, nil, formData_603590, nil)

var postDeleteNotificationConfiguration* = Call_PostDeleteNotificationConfiguration_603573(
    name: "postDeleteNotificationConfiguration", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DeleteNotificationConfiguration",
    validator: validate_PostDeleteNotificationConfiguration_603574, base: "/",
    url: url_PostDeleteNotificationConfiguration_603575,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteNotificationConfiguration_603556 = ref object of OpenApiRestCall_602466
proc url_GetDeleteNotificationConfiguration_603558(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteNotificationConfiguration_603557(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified notification.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   TopicARN: JString (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_603559 = query.getOrDefault("AutoScalingGroupName")
  valid_603559 = validateParameter(valid_603559, JString, required = true,
                                 default = nil)
  if valid_603559 != nil:
    section.add "AutoScalingGroupName", valid_603559
  var valid_603560 = query.getOrDefault("Action")
  valid_603560 = validateParameter(valid_603560, JString, required = true, default = newJString(
      "DeleteNotificationConfiguration"))
  if valid_603560 != nil:
    section.add "Action", valid_603560
  var valid_603561 = query.getOrDefault("TopicARN")
  valid_603561 = validateParameter(valid_603561, JString, required = true,
                                 default = nil)
  if valid_603561 != nil:
    section.add "TopicARN", valid_603561
  var valid_603562 = query.getOrDefault("Version")
  valid_603562 = validateParameter(valid_603562, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603562 != nil:
    section.add "Version", valid_603562
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603563 = header.getOrDefault("X-Amz-Date")
  valid_603563 = validateParameter(valid_603563, JString, required = false,
                                 default = nil)
  if valid_603563 != nil:
    section.add "X-Amz-Date", valid_603563
  var valid_603564 = header.getOrDefault("X-Amz-Security-Token")
  valid_603564 = validateParameter(valid_603564, JString, required = false,
                                 default = nil)
  if valid_603564 != nil:
    section.add "X-Amz-Security-Token", valid_603564
  var valid_603565 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603565 = validateParameter(valid_603565, JString, required = false,
                                 default = nil)
  if valid_603565 != nil:
    section.add "X-Amz-Content-Sha256", valid_603565
  var valid_603566 = header.getOrDefault("X-Amz-Algorithm")
  valid_603566 = validateParameter(valid_603566, JString, required = false,
                                 default = nil)
  if valid_603566 != nil:
    section.add "X-Amz-Algorithm", valid_603566
  var valid_603567 = header.getOrDefault("X-Amz-Signature")
  valid_603567 = validateParameter(valid_603567, JString, required = false,
                                 default = nil)
  if valid_603567 != nil:
    section.add "X-Amz-Signature", valid_603567
  var valid_603568 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603568 = validateParameter(valid_603568, JString, required = false,
                                 default = nil)
  if valid_603568 != nil:
    section.add "X-Amz-SignedHeaders", valid_603568
  var valid_603569 = header.getOrDefault("X-Amz-Credential")
  valid_603569 = validateParameter(valid_603569, JString, required = false,
                                 default = nil)
  if valid_603569 != nil:
    section.add "X-Amz-Credential", valid_603569
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603570: Call_GetDeleteNotificationConfiguration_603556;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes the specified notification.
  ## 
  let valid = call_603570.validator(path, query, header, formData, body)
  let scheme = call_603570.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603570.url(scheme.get, call_603570.host, call_603570.base,
                         call_603570.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603570, url, valid)

proc call*(call_603571: Call_GetDeleteNotificationConfiguration_603556;
          AutoScalingGroupName: string; TopicARN: string;
          Action: string = "DeleteNotificationConfiguration";
          Version: string = "2011-01-01"): Recallable =
  ## getDeleteNotificationConfiguration
  ## Deletes the specified notification.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   TopicARN: string (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   Version: string (required)
  var query_603572 = newJObject()
  add(query_603572, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_603572, "Action", newJString(Action))
  add(query_603572, "TopicARN", newJString(TopicARN))
  add(query_603572, "Version", newJString(Version))
  result = call_603571.call(nil, query_603572, nil, nil, nil)

var getDeleteNotificationConfiguration* = Call_GetDeleteNotificationConfiguration_603556(
    name: "getDeleteNotificationConfiguration", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DeleteNotificationConfiguration",
    validator: validate_GetDeleteNotificationConfiguration_603557, base: "/",
    url: url_GetDeleteNotificationConfiguration_603558,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeletePolicy_603608 = ref object of OpenApiRestCall_602466
proc url_PostDeletePolicy_603610(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeletePolicy_603609(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Deletes the specified scaling policy.</p> <p>Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html">Deleting a Scaling Policy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603611 = query.getOrDefault("Action")
  valid_603611 = validateParameter(valid_603611, JString, required = true,
                                 default = newJString("DeletePolicy"))
  if valid_603611 != nil:
    section.add "Action", valid_603611
  var valid_603612 = query.getOrDefault("Version")
  valid_603612 = validateParameter(valid_603612, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603612 != nil:
    section.add "Version", valid_603612
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603613 = header.getOrDefault("X-Amz-Date")
  valid_603613 = validateParameter(valid_603613, JString, required = false,
                                 default = nil)
  if valid_603613 != nil:
    section.add "X-Amz-Date", valid_603613
  var valid_603614 = header.getOrDefault("X-Amz-Security-Token")
  valid_603614 = validateParameter(valid_603614, JString, required = false,
                                 default = nil)
  if valid_603614 != nil:
    section.add "X-Amz-Security-Token", valid_603614
  var valid_603615 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603615 = validateParameter(valid_603615, JString, required = false,
                                 default = nil)
  if valid_603615 != nil:
    section.add "X-Amz-Content-Sha256", valid_603615
  var valid_603616 = header.getOrDefault("X-Amz-Algorithm")
  valid_603616 = validateParameter(valid_603616, JString, required = false,
                                 default = nil)
  if valid_603616 != nil:
    section.add "X-Amz-Algorithm", valid_603616
  var valid_603617 = header.getOrDefault("X-Amz-Signature")
  valid_603617 = validateParameter(valid_603617, JString, required = false,
                                 default = nil)
  if valid_603617 != nil:
    section.add "X-Amz-Signature", valid_603617
  var valid_603618 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603618 = validateParameter(valid_603618, JString, required = false,
                                 default = nil)
  if valid_603618 != nil:
    section.add "X-Amz-SignedHeaders", valid_603618
  var valid_603619 = header.getOrDefault("X-Amz-Credential")
  valid_603619 = validateParameter(valid_603619, JString, required = false,
                                 default = nil)
  if valid_603619 != nil:
    section.add "X-Amz-Credential", valid_603619
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   PolicyName: JString (required)
  ##             : The name or Amazon Resource Name (ARN) of the policy.
  section = newJObject()
  var valid_603620 = formData.getOrDefault("AutoScalingGroupName")
  valid_603620 = validateParameter(valid_603620, JString, required = false,
                                 default = nil)
  if valid_603620 != nil:
    section.add "AutoScalingGroupName", valid_603620
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_603621 = formData.getOrDefault("PolicyName")
  valid_603621 = validateParameter(valid_603621, JString, required = true,
                                 default = nil)
  if valid_603621 != nil:
    section.add "PolicyName", valid_603621
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603622: Call_PostDeletePolicy_603608; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified scaling policy.</p> <p>Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html">Deleting a Scaling Policy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_603622.validator(path, query, header, formData, body)
  let scheme = call_603622.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603622.url(scheme.get, call_603622.host, call_603622.base,
                         call_603622.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603622, url, valid)

proc call*(call_603623: Call_PostDeletePolicy_603608; PolicyName: string;
          AutoScalingGroupName: string = ""; Action: string = "DeletePolicy";
          Version: string = "2011-01-01"): Recallable =
  ## postDeletePolicy
  ## <p>Deletes the specified scaling policy.</p> <p>Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html">Deleting a Scaling Policy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   PolicyName: string (required)
  ##             : The name or Amazon Resource Name (ARN) of the policy.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603624 = newJObject()
  var formData_603625 = newJObject()
  add(formData_603625, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_603625, "PolicyName", newJString(PolicyName))
  add(query_603624, "Action", newJString(Action))
  add(query_603624, "Version", newJString(Version))
  result = call_603623.call(nil, query_603624, nil, formData_603625, nil)

var postDeletePolicy* = Call_PostDeletePolicy_603608(name: "postDeletePolicy",
    meth: HttpMethod.HttpPost, host: "autoscaling.amazonaws.com",
    route: "/#Action=DeletePolicy", validator: validate_PostDeletePolicy_603609,
    base: "/", url: url_PostDeletePolicy_603610,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeletePolicy_603591 = ref object of OpenApiRestCall_602466
proc url_GetDeletePolicy_603593(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeletePolicy_603592(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Deletes the specified scaling policy.</p> <p>Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html">Deleting a Scaling Policy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : The name or Amazon Resource Name (ARN) of the policy.
  section = newJObject()
  var valid_603594 = query.getOrDefault("AutoScalingGroupName")
  valid_603594 = validateParameter(valid_603594, JString, required = false,
                                 default = nil)
  if valid_603594 != nil:
    section.add "AutoScalingGroupName", valid_603594
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603595 = query.getOrDefault("Action")
  valid_603595 = validateParameter(valid_603595, JString, required = true,
                                 default = newJString("DeletePolicy"))
  if valid_603595 != nil:
    section.add "Action", valid_603595
  var valid_603596 = query.getOrDefault("Version")
  valid_603596 = validateParameter(valid_603596, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603596 != nil:
    section.add "Version", valid_603596
  var valid_603597 = query.getOrDefault("PolicyName")
  valid_603597 = validateParameter(valid_603597, JString, required = true,
                                 default = nil)
  if valid_603597 != nil:
    section.add "PolicyName", valid_603597
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603598 = header.getOrDefault("X-Amz-Date")
  valid_603598 = validateParameter(valid_603598, JString, required = false,
                                 default = nil)
  if valid_603598 != nil:
    section.add "X-Amz-Date", valid_603598
  var valid_603599 = header.getOrDefault("X-Amz-Security-Token")
  valid_603599 = validateParameter(valid_603599, JString, required = false,
                                 default = nil)
  if valid_603599 != nil:
    section.add "X-Amz-Security-Token", valid_603599
  var valid_603600 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603600 = validateParameter(valid_603600, JString, required = false,
                                 default = nil)
  if valid_603600 != nil:
    section.add "X-Amz-Content-Sha256", valid_603600
  var valid_603601 = header.getOrDefault("X-Amz-Algorithm")
  valid_603601 = validateParameter(valid_603601, JString, required = false,
                                 default = nil)
  if valid_603601 != nil:
    section.add "X-Amz-Algorithm", valid_603601
  var valid_603602 = header.getOrDefault("X-Amz-Signature")
  valid_603602 = validateParameter(valid_603602, JString, required = false,
                                 default = nil)
  if valid_603602 != nil:
    section.add "X-Amz-Signature", valid_603602
  var valid_603603 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603603 = validateParameter(valid_603603, JString, required = false,
                                 default = nil)
  if valid_603603 != nil:
    section.add "X-Amz-SignedHeaders", valid_603603
  var valid_603604 = header.getOrDefault("X-Amz-Credential")
  valid_603604 = validateParameter(valid_603604, JString, required = false,
                                 default = nil)
  if valid_603604 != nil:
    section.add "X-Amz-Credential", valid_603604
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603605: Call_GetDeletePolicy_603591; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified scaling policy.</p> <p>Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html">Deleting a Scaling Policy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_603605.validator(path, query, header, formData, body)
  let scheme = call_603605.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603605.url(scheme.get, call_603605.host, call_603605.base,
                         call_603605.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603605, url, valid)

proc call*(call_603606: Call_GetDeletePolicy_603591; PolicyName: string;
          AutoScalingGroupName: string = ""; Action: string = "DeletePolicy";
          Version: string = "2011-01-01"): Recallable =
  ## getDeletePolicy
  ## <p>Deletes the specified scaling policy.</p> <p>Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html">Deleting a Scaling Policy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : The name or Amazon Resource Name (ARN) of the policy.
  var query_603607 = newJObject()
  add(query_603607, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_603607, "Action", newJString(Action))
  add(query_603607, "Version", newJString(Version))
  add(query_603607, "PolicyName", newJString(PolicyName))
  result = call_603606.call(nil, query_603607, nil, nil, nil)

var getDeletePolicy* = Call_GetDeletePolicy_603591(name: "getDeletePolicy",
    meth: HttpMethod.HttpGet, host: "autoscaling.amazonaws.com",
    route: "/#Action=DeletePolicy", validator: validate_GetDeletePolicy_603592,
    base: "/", url: url_GetDeletePolicy_603593, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteScheduledAction_603643 = ref object of OpenApiRestCall_602466
proc url_PostDeleteScheduledAction_603645(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteScheduledAction_603644(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified scheduled action.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603646 = query.getOrDefault("Action")
  valid_603646 = validateParameter(valid_603646, JString, required = true,
                                 default = newJString("DeleteScheduledAction"))
  if valid_603646 != nil:
    section.add "Action", valid_603646
  var valid_603647 = query.getOrDefault("Version")
  valid_603647 = validateParameter(valid_603647, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603647 != nil:
    section.add "Version", valid_603647
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603648 = header.getOrDefault("X-Amz-Date")
  valid_603648 = validateParameter(valid_603648, JString, required = false,
                                 default = nil)
  if valid_603648 != nil:
    section.add "X-Amz-Date", valid_603648
  var valid_603649 = header.getOrDefault("X-Amz-Security-Token")
  valid_603649 = validateParameter(valid_603649, JString, required = false,
                                 default = nil)
  if valid_603649 != nil:
    section.add "X-Amz-Security-Token", valid_603649
  var valid_603650 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603650 = validateParameter(valid_603650, JString, required = false,
                                 default = nil)
  if valid_603650 != nil:
    section.add "X-Amz-Content-Sha256", valid_603650
  var valid_603651 = header.getOrDefault("X-Amz-Algorithm")
  valid_603651 = validateParameter(valid_603651, JString, required = false,
                                 default = nil)
  if valid_603651 != nil:
    section.add "X-Amz-Algorithm", valid_603651
  var valid_603652 = header.getOrDefault("X-Amz-Signature")
  valid_603652 = validateParameter(valid_603652, JString, required = false,
                                 default = nil)
  if valid_603652 != nil:
    section.add "X-Amz-Signature", valid_603652
  var valid_603653 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603653 = validateParameter(valid_603653, JString, required = false,
                                 default = nil)
  if valid_603653 != nil:
    section.add "X-Amz-SignedHeaders", valid_603653
  var valid_603654 = header.getOrDefault("X-Amz-Credential")
  valid_603654 = validateParameter(valid_603654, JString, required = false,
                                 default = nil)
  if valid_603654 != nil:
    section.add "X-Amz-Credential", valid_603654
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScheduledActionName: JString (required)
  ##                      : The name of the action to delete.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_603655 = formData.getOrDefault("AutoScalingGroupName")
  valid_603655 = validateParameter(valid_603655, JString, required = true,
                                 default = nil)
  if valid_603655 != nil:
    section.add "AutoScalingGroupName", valid_603655
  var valid_603656 = formData.getOrDefault("ScheduledActionName")
  valid_603656 = validateParameter(valid_603656, JString, required = true,
                                 default = nil)
  if valid_603656 != nil:
    section.add "ScheduledActionName", valid_603656
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603657: Call_PostDeleteScheduledAction_603643; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified scheduled action.
  ## 
  let valid = call_603657.validator(path, query, header, formData, body)
  let scheme = call_603657.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603657.url(scheme.get, call_603657.host, call_603657.base,
                         call_603657.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603657, url, valid)

proc call*(call_603658: Call_PostDeleteScheduledAction_603643;
          AutoScalingGroupName: string; ScheduledActionName: string;
          Action: string = "DeleteScheduledAction"; Version: string = "2011-01-01"): Recallable =
  ## postDeleteScheduledAction
  ## Deletes the specified scheduled action.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   ScheduledActionName: string (required)
  ##                      : The name of the action to delete.
  ##   Version: string (required)
  var query_603659 = newJObject()
  var formData_603660 = newJObject()
  add(formData_603660, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_603659, "Action", newJString(Action))
  add(formData_603660, "ScheduledActionName", newJString(ScheduledActionName))
  add(query_603659, "Version", newJString(Version))
  result = call_603658.call(nil, query_603659, nil, formData_603660, nil)

var postDeleteScheduledAction* = Call_PostDeleteScheduledAction_603643(
    name: "postDeleteScheduledAction", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DeleteScheduledAction",
    validator: validate_PostDeleteScheduledAction_603644, base: "/",
    url: url_PostDeleteScheduledAction_603645,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteScheduledAction_603626 = ref object of OpenApiRestCall_602466
proc url_GetDeleteScheduledAction_603628(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteScheduledAction_603627(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified scheduled action.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ScheduledActionName: JString (required)
  ##                      : The name of the action to delete.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ScheduledActionName` field"
  var valid_603629 = query.getOrDefault("ScheduledActionName")
  valid_603629 = validateParameter(valid_603629, JString, required = true,
                                 default = nil)
  if valid_603629 != nil:
    section.add "ScheduledActionName", valid_603629
  var valid_603630 = query.getOrDefault("AutoScalingGroupName")
  valid_603630 = validateParameter(valid_603630, JString, required = true,
                                 default = nil)
  if valid_603630 != nil:
    section.add "AutoScalingGroupName", valid_603630
  var valid_603631 = query.getOrDefault("Action")
  valid_603631 = validateParameter(valid_603631, JString, required = true,
                                 default = newJString("DeleteScheduledAction"))
  if valid_603631 != nil:
    section.add "Action", valid_603631
  var valid_603632 = query.getOrDefault("Version")
  valid_603632 = validateParameter(valid_603632, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603632 != nil:
    section.add "Version", valid_603632
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603633 = header.getOrDefault("X-Amz-Date")
  valid_603633 = validateParameter(valid_603633, JString, required = false,
                                 default = nil)
  if valid_603633 != nil:
    section.add "X-Amz-Date", valid_603633
  var valid_603634 = header.getOrDefault("X-Amz-Security-Token")
  valid_603634 = validateParameter(valid_603634, JString, required = false,
                                 default = nil)
  if valid_603634 != nil:
    section.add "X-Amz-Security-Token", valid_603634
  var valid_603635 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603635 = validateParameter(valid_603635, JString, required = false,
                                 default = nil)
  if valid_603635 != nil:
    section.add "X-Amz-Content-Sha256", valid_603635
  var valid_603636 = header.getOrDefault("X-Amz-Algorithm")
  valid_603636 = validateParameter(valid_603636, JString, required = false,
                                 default = nil)
  if valid_603636 != nil:
    section.add "X-Amz-Algorithm", valid_603636
  var valid_603637 = header.getOrDefault("X-Amz-Signature")
  valid_603637 = validateParameter(valid_603637, JString, required = false,
                                 default = nil)
  if valid_603637 != nil:
    section.add "X-Amz-Signature", valid_603637
  var valid_603638 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603638 = validateParameter(valid_603638, JString, required = false,
                                 default = nil)
  if valid_603638 != nil:
    section.add "X-Amz-SignedHeaders", valid_603638
  var valid_603639 = header.getOrDefault("X-Amz-Credential")
  valid_603639 = validateParameter(valid_603639, JString, required = false,
                                 default = nil)
  if valid_603639 != nil:
    section.add "X-Amz-Credential", valid_603639
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603640: Call_GetDeleteScheduledAction_603626; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified scheduled action.
  ## 
  let valid = call_603640.validator(path, query, header, formData, body)
  let scheme = call_603640.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603640.url(scheme.get, call_603640.host, call_603640.base,
                         call_603640.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603640, url, valid)

proc call*(call_603641: Call_GetDeleteScheduledAction_603626;
          ScheduledActionName: string; AutoScalingGroupName: string;
          Action: string = "DeleteScheduledAction"; Version: string = "2011-01-01"): Recallable =
  ## getDeleteScheduledAction
  ## Deletes the specified scheduled action.
  ##   ScheduledActionName: string (required)
  ##                      : The name of the action to delete.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603642 = newJObject()
  add(query_603642, "ScheduledActionName", newJString(ScheduledActionName))
  add(query_603642, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_603642, "Action", newJString(Action))
  add(query_603642, "Version", newJString(Version))
  result = call_603641.call(nil, query_603642, nil, nil, nil)

var getDeleteScheduledAction* = Call_GetDeleteScheduledAction_603626(
    name: "getDeleteScheduledAction", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DeleteScheduledAction",
    validator: validate_GetDeleteScheduledAction_603627, base: "/",
    url: url_GetDeleteScheduledAction_603628, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteTags_603677 = ref object of OpenApiRestCall_602466
proc url_PostDeleteTags_603679(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteTags_603678(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Deletes the specified tags.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603680 = query.getOrDefault("Action")
  valid_603680 = validateParameter(valid_603680, JString, required = true,
                                 default = newJString("DeleteTags"))
  if valid_603680 != nil:
    section.add "Action", valid_603680
  var valid_603681 = query.getOrDefault("Version")
  valid_603681 = validateParameter(valid_603681, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603681 != nil:
    section.add "Version", valid_603681
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603682 = header.getOrDefault("X-Amz-Date")
  valid_603682 = validateParameter(valid_603682, JString, required = false,
                                 default = nil)
  if valid_603682 != nil:
    section.add "X-Amz-Date", valid_603682
  var valid_603683 = header.getOrDefault("X-Amz-Security-Token")
  valid_603683 = validateParameter(valid_603683, JString, required = false,
                                 default = nil)
  if valid_603683 != nil:
    section.add "X-Amz-Security-Token", valid_603683
  var valid_603684 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603684 = validateParameter(valid_603684, JString, required = false,
                                 default = nil)
  if valid_603684 != nil:
    section.add "X-Amz-Content-Sha256", valid_603684
  var valid_603685 = header.getOrDefault("X-Amz-Algorithm")
  valid_603685 = validateParameter(valid_603685, JString, required = false,
                                 default = nil)
  if valid_603685 != nil:
    section.add "X-Amz-Algorithm", valid_603685
  var valid_603686 = header.getOrDefault("X-Amz-Signature")
  valid_603686 = validateParameter(valid_603686, JString, required = false,
                                 default = nil)
  if valid_603686 != nil:
    section.add "X-Amz-Signature", valid_603686
  var valid_603687 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603687 = validateParameter(valid_603687, JString, required = false,
                                 default = nil)
  if valid_603687 != nil:
    section.add "X-Amz-SignedHeaders", valid_603687
  var valid_603688 = header.getOrDefault("X-Amz-Credential")
  valid_603688 = validateParameter(valid_603688, JString, required = false,
                                 default = nil)
  if valid_603688 != nil:
    section.add "X-Amz-Credential", valid_603688
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray (required)
  ##       : One or more tags.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Tags` field"
  var valid_603689 = formData.getOrDefault("Tags")
  valid_603689 = validateParameter(valid_603689, JArray, required = true, default = nil)
  if valid_603689 != nil:
    section.add "Tags", valid_603689
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603690: Call_PostDeleteTags_603677; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified tags.
  ## 
  let valid = call_603690.validator(path, query, header, formData, body)
  let scheme = call_603690.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603690.url(scheme.get, call_603690.host, call_603690.base,
                         call_603690.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603690, url, valid)

proc call*(call_603691: Call_PostDeleteTags_603677; Tags: JsonNode;
          Action: string = "DeleteTags"; Version: string = "2011-01-01"): Recallable =
  ## postDeleteTags
  ## Deletes the specified tags.
  ##   Tags: JArray (required)
  ##       : One or more tags.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603692 = newJObject()
  var formData_603693 = newJObject()
  if Tags != nil:
    formData_603693.add "Tags", Tags
  add(query_603692, "Action", newJString(Action))
  add(query_603692, "Version", newJString(Version))
  result = call_603691.call(nil, query_603692, nil, formData_603693, nil)

var postDeleteTags* = Call_PostDeleteTags_603677(name: "postDeleteTags",
    meth: HttpMethod.HttpPost, host: "autoscaling.amazonaws.com",
    route: "/#Action=DeleteTags", validator: validate_PostDeleteTags_603678,
    base: "/", url: url_PostDeleteTags_603679, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteTags_603661 = ref object of OpenApiRestCall_602466
proc url_GetDeleteTags_603663(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteTags_603662(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified tags.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : One or more tags.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_603664 = query.getOrDefault("Tags")
  valid_603664 = validateParameter(valid_603664, JArray, required = true, default = nil)
  if valid_603664 != nil:
    section.add "Tags", valid_603664
  var valid_603665 = query.getOrDefault("Action")
  valid_603665 = validateParameter(valid_603665, JString, required = true,
                                 default = newJString("DeleteTags"))
  if valid_603665 != nil:
    section.add "Action", valid_603665
  var valid_603666 = query.getOrDefault("Version")
  valid_603666 = validateParameter(valid_603666, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603666 != nil:
    section.add "Version", valid_603666
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603667 = header.getOrDefault("X-Amz-Date")
  valid_603667 = validateParameter(valid_603667, JString, required = false,
                                 default = nil)
  if valid_603667 != nil:
    section.add "X-Amz-Date", valid_603667
  var valid_603668 = header.getOrDefault("X-Amz-Security-Token")
  valid_603668 = validateParameter(valid_603668, JString, required = false,
                                 default = nil)
  if valid_603668 != nil:
    section.add "X-Amz-Security-Token", valid_603668
  var valid_603669 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603669 = validateParameter(valid_603669, JString, required = false,
                                 default = nil)
  if valid_603669 != nil:
    section.add "X-Amz-Content-Sha256", valid_603669
  var valid_603670 = header.getOrDefault("X-Amz-Algorithm")
  valid_603670 = validateParameter(valid_603670, JString, required = false,
                                 default = nil)
  if valid_603670 != nil:
    section.add "X-Amz-Algorithm", valid_603670
  var valid_603671 = header.getOrDefault("X-Amz-Signature")
  valid_603671 = validateParameter(valid_603671, JString, required = false,
                                 default = nil)
  if valid_603671 != nil:
    section.add "X-Amz-Signature", valid_603671
  var valid_603672 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603672 = validateParameter(valid_603672, JString, required = false,
                                 default = nil)
  if valid_603672 != nil:
    section.add "X-Amz-SignedHeaders", valid_603672
  var valid_603673 = header.getOrDefault("X-Amz-Credential")
  valid_603673 = validateParameter(valid_603673, JString, required = false,
                                 default = nil)
  if valid_603673 != nil:
    section.add "X-Amz-Credential", valid_603673
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603674: Call_GetDeleteTags_603661; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified tags.
  ## 
  let valid = call_603674.validator(path, query, header, formData, body)
  let scheme = call_603674.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603674.url(scheme.get, call_603674.host, call_603674.base,
                         call_603674.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603674, url, valid)

proc call*(call_603675: Call_GetDeleteTags_603661; Tags: JsonNode;
          Action: string = "DeleteTags"; Version: string = "2011-01-01"): Recallable =
  ## getDeleteTags
  ## Deletes the specified tags.
  ##   Tags: JArray (required)
  ##       : One or more tags.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603676 = newJObject()
  if Tags != nil:
    query_603676.add "Tags", Tags
  add(query_603676, "Action", newJString(Action))
  add(query_603676, "Version", newJString(Version))
  result = call_603675.call(nil, query_603676, nil, nil, nil)

var getDeleteTags* = Call_GetDeleteTags_603661(name: "getDeleteTags",
    meth: HttpMethod.HttpGet, host: "autoscaling.amazonaws.com",
    route: "/#Action=DeleteTags", validator: validate_GetDeleteTags_603662,
    base: "/", url: url_GetDeleteTags_603663, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeAccountLimits_603709 = ref object of OpenApiRestCall_602466
proc url_PostDescribeAccountLimits_603711(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeAccountLimits_603710(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the current Amazon EC2 Auto Scaling resource limits for your AWS account.</p> <p>For information about requesting an increase in these limits, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603712 = query.getOrDefault("Action")
  valid_603712 = validateParameter(valid_603712, JString, required = true,
                                 default = newJString("DescribeAccountLimits"))
  if valid_603712 != nil:
    section.add "Action", valid_603712
  var valid_603713 = query.getOrDefault("Version")
  valid_603713 = validateParameter(valid_603713, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603713 != nil:
    section.add "Version", valid_603713
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603714 = header.getOrDefault("X-Amz-Date")
  valid_603714 = validateParameter(valid_603714, JString, required = false,
                                 default = nil)
  if valid_603714 != nil:
    section.add "X-Amz-Date", valid_603714
  var valid_603715 = header.getOrDefault("X-Amz-Security-Token")
  valid_603715 = validateParameter(valid_603715, JString, required = false,
                                 default = nil)
  if valid_603715 != nil:
    section.add "X-Amz-Security-Token", valid_603715
  var valid_603716 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603716 = validateParameter(valid_603716, JString, required = false,
                                 default = nil)
  if valid_603716 != nil:
    section.add "X-Amz-Content-Sha256", valid_603716
  var valid_603717 = header.getOrDefault("X-Amz-Algorithm")
  valid_603717 = validateParameter(valid_603717, JString, required = false,
                                 default = nil)
  if valid_603717 != nil:
    section.add "X-Amz-Algorithm", valid_603717
  var valid_603718 = header.getOrDefault("X-Amz-Signature")
  valid_603718 = validateParameter(valid_603718, JString, required = false,
                                 default = nil)
  if valid_603718 != nil:
    section.add "X-Amz-Signature", valid_603718
  var valid_603719 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603719 = validateParameter(valid_603719, JString, required = false,
                                 default = nil)
  if valid_603719 != nil:
    section.add "X-Amz-SignedHeaders", valid_603719
  var valid_603720 = header.getOrDefault("X-Amz-Credential")
  valid_603720 = validateParameter(valid_603720, JString, required = false,
                                 default = nil)
  if valid_603720 != nil:
    section.add "X-Amz-Credential", valid_603720
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603721: Call_PostDescribeAccountLimits_603709; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the current Amazon EC2 Auto Scaling resource limits for your AWS account.</p> <p>For information about requesting an increase in these limits, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_603721.validator(path, query, header, formData, body)
  let scheme = call_603721.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603721.url(scheme.get, call_603721.host, call_603721.base,
                         call_603721.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603721, url, valid)

proc call*(call_603722: Call_PostDescribeAccountLimits_603709;
          Action: string = "DescribeAccountLimits"; Version: string = "2011-01-01"): Recallable =
  ## postDescribeAccountLimits
  ## <p>Describes the current Amazon EC2 Auto Scaling resource limits for your AWS account.</p> <p>For information about requesting an increase in these limits, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603723 = newJObject()
  add(query_603723, "Action", newJString(Action))
  add(query_603723, "Version", newJString(Version))
  result = call_603722.call(nil, query_603723, nil, nil, nil)

var postDescribeAccountLimits* = Call_PostDescribeAccountLimits_603709(
    name: "postDescribeAccountLimits", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeAccountLimits",
    validator: validate_PostDescribeAccountLimits_603710, base: "/",
    url: url_PostDescribeAccountLimits_603711,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeAccountLimits_603694 = ref object of OpenApiRestCall_602466
proc url_GetDescribeAccountLimits_603696(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeAccountLimits_603695(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the current Amazon EC2 Auto Scaling resource limits for your AWS account.</p> <p>For information about requesting an increase in these limits, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603697 = query.getOrDefault("Action")
  valid_603697 = validateParameter(valid_603697, JString, required = true,
                                 default = newJString("DescribeAccountLimits"))
  if valid_603697 != nil:
    section.add "Action", valid_603697
  var valid_603698 = query.getOrDefault("Version")
  valid_603698 = validateParameter(valid_603698, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603698 != nil:
    section.add "Version", valid_603698
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603699 = header.getOrDefault("X-Amz-Date")
  valid_603699 = validateParameter(valid_603699, JString, required = false,
                                 default = nil)
  if valid_603699 != nil:
    section.add "X-Amz-Date", valid_603699
  var valid_603700 = header.getOrDefault("X-Amz-Security-Token")
  valid_603700 = validateParameter(valid_603700, JString, required = false,
                                 default = nil)
  if valid_603700 != nil:
    section.add "X-Amz-Security-Token", valid_603700
  var valid_603701 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603701 = validateParameter(valid_603701, JString, required = false,
                                 default = nil)
  if valid_603701 != nil:
    section.add "X-Amz-Content-Sha256", valid_603701
  var valid_603702 = header.getOrDefault("X-Amz-Algorithm")
  valid_603702 = validateParameter(valid_603702, JString, required = false,
                                 default = nil)
  if valid_603702 != nil:
    section.add "X-Amz-Algorithm", valid_603702
  var valid_603703 = header.getOrDefault("X-Amz-Signature")
  valid_603703 = validateParameter(valid_603703, JString, required = false,
                                 default = nil)
  if valid_603703 != nil:
    section.add "X-Amz-Signature", valid_603703
  var valid_603704 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603704 = validateParameter(valid_603704, JString, required = false,
                                 default = nil)
  if valid_603704 != nil:
    section.add "X-Amz-SignedHeaders", valid_603704
  var valid_603705 = header.getOrDefault("X-Amz-Credential")
  valid_603705 = validateParameter(valid_603705, JString, required = false,
                                 default = nil)
  if valid_603705 != nil:
    section.add "X-Amz-Credential", valid_603705
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603706: Call_GetDescribeAccountLimits_603694; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the current Amazon EC2 Auto Scaling resource limits for your AWS account.</p> <p>For information about requesting an increase in these limits, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_603706.validator(path, query, header, formData, body)
  let scheme = call_603706.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603706.url(scheme.get, call_603706.host, call_603706.base,
                         call_603706.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603706, url, valid)

proc call*(call_603707: Call_GetDescribeAccountLimits_603694;
          Action: string = "DescribeAccountLimits"; Version: string = "2011-01-01"): Recallable =
  ## getDescribeAccountLimits
  ## <p>Describes the current Amazon EC2 Auto Scaling resource limits for your AWS account.</p> <p>For information about requesting an increase in these limits, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603708 = newJObject()
  add(query_603708, "Action", newJString(Action))
  add(query_603708, "Version", newJString(Version))
  result = call_603707.call(nil, query_603708, nil, nil, nil)

var getDescribeAccountLimits* = Call_GetDescribeAccountLimits_603694(
    name: "getDescribeAccountLimits", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeAccountLimits",
    validator: validate_GetDescribeAccountLimits_603695, base: "/",
    url: url_GetDescribeAccountLimits_603696, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeAdjustmentTypes_603739 = ref object of OpenApiRestCall_602466
proc url_PostDescribeAdjustmentTypes_603741(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeAdjustmentTypes_603740(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the policy adjustment types for use with <a>PutScalingPolicy</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603742 = query.getOrDefault("Action")
  valid_603742 = validateParameter(valid_603742, JString, required = true, default = newJString(
      "DescribeAdjustmentTypes"))
  if valid_603742 != nil:
    section.add "Action", valid_603742
  var valid_603743 = query.getOrDefault("Version")
  valid_603743 = validateParameter(valid_603743, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603743 != nil:
    section.add "Version", valid_603743
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603744 = header.getOrDefault("X-Amz-Date")
  valid_603744 = validateParameter(valid_603744, JString, required = false,
                                 default = nil)
  if valid_603744 != nil:
    section.add "X-Amz-Date", valid_603744
  var valid_603745 = header.getOrDefault("X-Amz-Security-Token")
  valid_603745 = validateParameter(valid_603745, JString, required = false,
                                 default = nil)
  if valid_603745 != nil:
    section.add "X-Amz-Security-Token", valid_603745
  var valid_603746 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603746 = validateParameter(valid_603746, JString, required = false,
                                 default = nil)
  if valid_603746 != nil:
    section.add "X-Amz-Content-Sha256", valid_603746
  var valid_603747 = header.getOrDefault("X-Amz-Algorithm")
  valid_603747 = validateParameter(valid_603747, JString, required = false,
                                 default = nil)
  if valid_603747 != nil:
    section.add "X-Amz-Algorithm", valid_603747
  var valid_603748 = header.getOrDefault("X-Amz-Signature")
  valid_603748 = validateParameter(valid_603748, JString, required = false,
                                 default = nil)
  if valid_603748 != nil:
    section.add "X-Amz-Signature", valid_603748
  var valid_603749 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603749 = validateParameter(valid_603749, JString, required = false,
                                 default = nil)
  if valid_603749 != nil:
    section.add "X-Amz-SignedHeaders", valid_603749
  var valid_603750 = header.getOrDefault("X-Amz-Credential")
  valid_603750 = validateParameter(valid_603750, JString, required = false,
                                 default = nil)
  if valid_603750 != nil:
    section.add "X-Amz-Credential", valid_603750
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603751: Call_PostDescribeAdjustmentTypes_603739; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the policy adjustment types for use with <a>PutScalingPolicy</a>.
  ## 
  let valid = call_603751.validator(path, query, header, formData, body)
  let scheme = call_603751.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603751.url(scheme.get, call_603751.host, call_603751.base,
                         call_603751.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603751, url, valid)

proc call*(call_603752: Call_PostDescribeAdjustmentTypes_603739;
          Action: string = "DescribeAdjustmentTypes"; Version: string = "2011-01-01"): Recallable =
  ## postDescribeAdjustmentTypes
  ## Describes the policy adjustment types for use with <a>PutScalingPolicy</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603753 = newJObject()
  add(query_603753, "Action", newJString(Action))
  add(query_603753, "Version", newJString(Version))
  result = call_603752.call(nil, query_603753, nil, nil, nil)

var postDescribeAdjustmentTypes* = Call_PostDescribeAdjustmentTypes_603739(
    name: "postDescribeAdjustmentTypes", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeAdjustmentTypes",
    validator: validate_PostDescribeAdjustmentTypes_603740, base: "/",
    url: url_PostDescribeAdjustmentTypes_603741,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeAdjustmentTypes_603724 = ref object of OpenApiRestCall_602466
proc url_GetDescribeAdjustmentTypes_603726(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeAdjustmentTypes_603725(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the policy adjustment types for use with <a>PutScalingPolicy</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603727 = query.getOrDefault("Action")
  valid_603727 = validateParameter(valid_603727, JString, required = true, default = newJString(
      "DescribeAdjustmentTypes"))
  if valid_603727 != nil:
    section.add "Action", valid_603727
  var valid_603728 = query.getOrDefault("Version")
  valid_603728 = validateParameter(valid_603728, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603728 != nil:
    section.add "Version", valid_603728
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603729 = header.getOrDefault("X-Amz-Date")
  valid_603729 = validateParameter(valid_603729, JString, required = false,
                                 default = nil)
  if valid_603729 != nil:
    section.add "X-Amz-Date", valid_603729
  var valid_603730 = header.getOrDefault("X-Amz-Security-Token")
  valid_603730 = validateParameter(valid_603730, JString, required = false,
                                 default = nil)
  if valid_603730 != nil:
    section.add "X-Amz-Security-Token", valid_603730
  var valid_603731 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603731 = validateParameter(valid_603731, JString, required = false,
                                 default = nil)
  if valid_603731 != nil:
    section.add "X-Amz-Content-Sha256", valid_603731
  var valid_603732 = header.getOrDefault("X-Amz-Algorithm")
  valid_603732 = validateParameter(valid_603732, JString, required = false,
                                 default = nil)
  if valid_603732 != nil:
    section.add "X-Amz-Algorithm", valid_603732
  var valid_603733 = header.getOrDefault("X-Amz-Signature")
  valid_603733 = validateParameter(valid_603733, JString, required = false,
                                 default = nil)
  if valid_603733 != nil:
    section.add "X-Amz-Signature", valid_603733
  var valid_603734 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603734 = validateParameter(valid_603734, JString, required = false,
                                 default = nil)
  if valid_603734 != nil:
    section.add "X-Amz-SignedHeaders", valid_603734
  var valid_603735 = header.getOrDefault("X-Amz-Credential")
  valid_603735 = validateParameter(valid_603735, JString, required = false,
                                 default = nil)
  if valid_603735 != nil:
    section.add "X-Amz-Credential", valid_603735
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603736: Call_GetDescribeAdjustmentTypes_603724; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the policy adjustment types for use with <a>PutScalingPolicy</a>.
  ## 
  let valid = call_603736.validator(path, query, header, formData, body)
  let scheme = call_603736.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603736.url(scheme.get, call_603736.host, call_603736.base,
                         call_603736.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603736, url, valid)

proc call*(call_603737: Call_GetDescribeAdjustmentTypes_603724;
          Action: string = "DescribeAdjustmentTypes"; Version: string = "2011-01-01"): Recallable =
  ## getDescribeAdjustmentTypes
  ## Describes the policy adjustment types for use with <a>PutScalingPolicy</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603738 = newJObject()
  add(query_603738, "Action", newJString(Action))
  add(query_603738, "Version", newJString(Version))
  result = call_603737.call(nil, query_603738, nil, nil, nil)

var getDescribeAdjustmentTypes* = Call_GetDescribeAdjustmentTypes_603724(
    name: "getDescribeAdjustmentTypes", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeAdjustmentTypes",
    validator: validate_GetDescribeAdjustmentTypes_603725, base: "/",
    url: url_GetDescribeAdjustmentTypes_603726,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeAutoScalingGroups_603772 = ref object of OpenApiRestCall_602466
proc url_PostDescribeAutoScalingGroups_603774(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeAutoScalingGroups_603773(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more Auto Scaling groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603775 = query.getOrDefault("Action")
  valid_603775 = validateParameter(valid_603775, JString, required = true, default = newJString(
      "DescribeAutoScalingGroups"))
  if valid_603775 != nil:
    section.add "Action", valid_603775
  var valid_603776 = query.getOrDefault("Version")
  valid_603776 = validateParameter(valid_603776, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603776 != nil:
    section.add "Version", valid_603776
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603777 = header.getOrDefault("X-Amz-Date")
  valid_603777 = validateParameter(valid_603777, JString, required = false,
                                 default = nil)
  if valid_603777 != nil:
    section.add "X-Amz-Date", valid_603777
  var valid_603778 = header.getOrDefault("X-Amz-Security-Token")
  valid_603778 = validateParameter(valid_603778, JString, required = false,
                                 default = nil)
  if valid_603778 != nil:
    section.add "X-Amz-Security-Token", valid_603778
  var valid_603779 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603779 = validateParameter(valid_603779, JString, required = false,
                                 default = nil)
  if valid_603779 != nil:
    section.add "X-Amz-Content-Sha256", valid_603779
  var valid_603780 = header.getOrDefault("X-Amz-Algorithm")
  valid_603780 = validateParameter(valid_603780, JString, required = false,
                                 default = nil)
  if valid_603780 != nil:
    section.add "X-Amz-Algorithm", valid_603780
  var valid_603781 = header.getOrDefault("X-Amz-Signature")
  valid_603781 = validateParameter(valid_603781, JString, required = false,
                                 default = nil)
  if valid_603781 != nil:
    section.add "X-Amz-Signature", valid_603781
  var valid_603782 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603782 = validateParameter(valid_603782, JString, required = false,
                                 default = nil)
  if valid_603782 != nil:
    section.add "X-Amz-SignedHeaders", valid_603782
  var valid_603783 = header.getOrDefault("X-Amz-Credential")
  valid_603783 = validateParameter(valid_603783, JString, required = false,
                                 default = nil)
  if valid_603783 != nil:
    section.add "X-Amz-Credential", valid_603783
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>. 
  ##   AutoScalingGroupNames: JArray
  ##                        : <p>The names of the Auto Scaling groups. Each name can be a maximum of 1600 characters. By default, you can only specify up to 50 names. You can optionally increase this limit using the <code>MaxRecords</code> parameter. </p> <p>If you omit this parameter, all Auto Scaling groups are described.</p>
  section = newJObject()
  var valid_603784 = formData.getOrDefault("NextToken")
  valid_603784 = validateParameter(valid_603784, JString, required = false,
                                 default = nil)
  if valid_603784 != nil:
    section.add "NextToken", valid_603784
  var valid_603785 = formData.getOrDefault("MaxRecords")
  valid_603785 = validateParameter(valid_603785, JInt, required = false, default = nil)
  if valid_603785 != nil:
    section.add "MaxRecords", valid_603785
  var valid_603786 = formData.getOrDefault("AutoScalingGroupNames")
  valid_603786 = validateParameter(valid_603786, JArray, required = false,
                                 default = nil)
  if valid_603786 != nil:
    section.add "AutoScalingGroupNames", valid_603786
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603787: Call_PostDescribeAutoScalingGroups_603772; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes one or more Auto Scaling groups.
  ## 
  let valid = call_603787.validator(path, query, header, formData, body)
  let scheme = call_603787.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603787.url(scheme.get, call_603787.host, call_603787.base,
                         call_603787.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603787, url, valid)

proc call*(call_603788: Call_PostDescribeAutoScalingGroups_603772;
          NextToken: string = ""; Action: string = "DescribeAutoScalingGroups";
          MaxRecords: int = 0; Version: string = "2011-01-01";
          AutoScalingGroupNames: JsonNode = nil): Recallable =
  ## postDescribeAutoScalingGroups
  ## Describes one or more Auto Scaling groups.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>. 
  ##   Version: string (required)
  ##   AutoScalingGroupNames: JArray
  ##                        : <p>The names of the Auto Scaling groups. Each name can be a maximum of 1600 characters. By default, you can only specify up to 50 names. You can optionally increase this limit using the <code>MaxRecords</code> parameter. </p> <p>If you omit this parameter, all Auto Scaling groups are described.</p>
  var query_603789 = newJObject()
  var formData_603790 = newJObject()
  add(formData_603790, "NextToken", newJString(NextToken))
  add(query_603789, "Action", newJString(Action))
  add(formData_603790, "MaxRecords", newJInt(MaxRecords))
  add(query_603789, "Version", newJString(Version))
  if AutoScalingGroupNames != nil:
    formData_603790.add "AutoScalingGroupNames", AutoScalingGroupNames
  result = call_603788.call(nil, query_603789, nil, formData_603790, nil)

var postDescribeAutoScalingGroups* = Call_PostDescribeAutoScalingGroups_603772(
    name: "postDescribeAutoScalingGroups", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeAutoScalingGroups",
    validator: validate_PostDescribeAutoScalingGroups_603773, base: "/",
    url: url_PostDescribeAutoScalingGroups_603774,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeAutoScalingGroups_603754 = ref object of OpenApiRestCall_602466
proc url_GetDescribeAutoScalingGroups_603756(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeAutoScalingGroups_603755(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more Auto Scaling groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>. 
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: JString (required)
  ##   AutoScalingGroupNames: JArray
  ##                        : <p>The names of the Auto Scaling groups. Each name can be a maximum of 1600 characters. By default, you can only specify up to 50 names. You can optionally increase this limit using the <code>MaxRecords</code> parameter. </p> <p>If you omit this parameter, all Auto Scaling groups are described.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_603757 = query.getOrDefault("MaxRecords")
  valid_603757 = validateParameter(valid_603757, JInt, required = false, default = nil)
  if valid_603757 != nil:
    section.add "MaxRecords", valid_603757
  var valid_603758 = query.getOrDefault("NextToken")
  valid_603758 = validateParameter(valid_603758, JString, required = false,
                                 default = nil)
  if valid_603758 != nil:
    section.add "NextToken", valid_603758
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603759 = query.getOrDefault("Action")
  valid_603759 = validateParameter(valid_603759, JString, required = true, default = newJString(
      "DescribeAutoScalingGroups"))
  if valid_603759 != nil:
    section.add "Action", valid_603759
  var valid_603760 = query.getOrDefault("AutoScalingGroupNames")
  valid_603760 = validateParameter(valid_603760, JArray, required = false,
                                 default = nil)
  if valid_603760 != nil:
    section.add "AutoScalingGroupNames", valid_603760
  var valid_603761 = query.getOrDefault("Version")
  valid_603761 = validateParameter(valid_603761, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603761 != nil:
    section.add "Version", valid_603761
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603762 = header.getOrDefault("X-Amz-Date")
  valid_603762 = validateParameter(valid_603762, JString, required = false,
                                 default = nil)
  if valid_603762 != nil:
    section.add "X-Amz-Date", valid_603762
  var valid_603763 = header.getOrDefault("X-Amz-Security-Token")
  valid_603763 = validateParameter(valid_603763, JString, required = false,
                                 default = nil)
  if valid_603763 != nil:
    section.add "X-Amz-Security-Token", valid_603763
  var valid_603764 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603764 = validateParameter(valid_603764, JString, required = false,
                                 default = nil)
  if valid_603764 != nil:
    section.add "X-Amz-Content-Sha256", valid_603764
  var valid_603765 = header.getOrDefault("X-Amz-Algorithm")
  valid_603765 = validateParameter(valid_603765, JString, required = false,
                                 default = nil)
  if valid_603765 != nil:
    section.add "X-Amz-Algorithm", valid_603765
  var valid_603766 = header.getOrDefault("X-Amz-Signature")
  valid_603766 = validateParameter(valid_603766, JString, required = false,
                                 default = nil)
  if valid_603766 != nil:
    section.add "X-Amz-Signature", valid_603766
  var valid_603767 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603767 = validateParameter(valid_603767, JString, required = false,
                                 default = nil)
  if valid_603767 != nil:
    section.add "X-Amz-SignedHeaders", valid_603767
  var valid_603768 = header.getOrDefault("X-Amz-Credential")
  valid_603768 = validateParameter(valid_603768, JString, required = false,
                                 default = nil)
  if valid_603768 != nil:
    section.add "X-Amz-Credential", valid_603768
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603769: Call_GetDescribeAutoScalingGroups_603754; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes one or more Auto Scaling groups.
  ## 
  let valid = call_603769.validator(path, query, header, formData, body)
  let scheme = call_603769.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603769.url(scheme.get, call_603769.host, call_603769.base,
                         call_603769.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603769, url, valid)

proc call*(call_603770: Call_GetDescribeAutoScalingGroups_603754;
          MaxRecords: int = 0; NextToken: string = "";
          Action: string = "DescribeAutoScalingGroups";
          AutoScalingGroupNames: JsonNode = nil; Version: string = "2011-01-01"): Recallable =
  ## getDescribeAutoScalingGroups
  ## Describes one or more Auto Scaling groups.
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>. 
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   AutoScalingGroupNames: JArray
  ##                        : <p>The names of the Auto Scaling groups. Each name can be a maximum of 1600 characters. By default, you can only specify up to 50 names. You can optionally increase this limit using the <code>MaxRecords</code> parameter. </p> <p>If you omit this parameter, all Auto Scaling groups are described.</p>
  ##   Version: string (required)
  var query_603771 = newJObject()
  add(query_603771, "MaxRecords", newJInt(MaxRecords))
  add(query_603771, "NextToken", newJString(NextToken))
  add(query_603771, "Action", newJString(Action))
  if AutoScalingGroupNames != nil:
    query_603771.add "AutoScalingGroupNames", AutoScalingGroupNames
  add(query_603771, "Version", newJString(Version))
  result = call_603770.call(nil, query_603771, nil, nil, nil)

var getDescribeAutoScalingGroups* = Call_GetDescribeAutoScalingGroups_603754(
    name: "getDescribeAutoScalingGroups", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeAutoScalingGroups",
    validator: validate_GetDescribeAutoScalingGroups_603755, base: "/",
    url: url_GetDescribeAutoScalingGroups_603756,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeAutoScalingInstances_603809 = ref object of OpenApiRestCall_602466
proc url_PostDescribeAutoScalingInstances_603811(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeAutoScalingInstances_603810(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more Auto Scaling instances.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603812 = query.getOrDefault("Action")
  valid_603812 = validateParameter(valid_603812, JString, required = true, default = newJString(
      "DescribeAutoScalingInstances"))
  if valid_603812 != nil:
    section.add "Action", valid_603812
  var valid_603813 = query.getOrDefault("Version")
  valid_603813 = validateParameter(valid_603813, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603813 != nil:
    section.add "Version", valid_603813
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603814 = header.getOrDefault("X-Amz-Date")
  valid_603814 = validateParameter(valid_603814, JString, required = false,
                                 default = nil)
  if valid_603814 != nil:
    section.add "X-Amz-Date", valid_603814
  var valid_603815 = header.getOrDefault("X-Amz-Security-Token")
  valid_603815 = validateParameter(valid_603815, JString, required = false,
                                 default = nil)
  if valid_603815 != nil:
    section.add "X-Amz-Security-Token", valid_603815
  var valid_603816 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603816 = validateParameter(valid_603816, JString, required = false,
                                 default = nil)
  if valid_603816 != nil:
    section.add "X-Amz-Content-Sha256", valid_603816
  var valid_603817 = header.getOrDefault("X-Amz-Algorithm")
  valid_603817 = validateParameter(valid_603817, JString, required = false,
                                 default = nil)
  if valid_603817 != nil:
    section.add "X-Amz-Algorithm", valid_603817
  var valid_603818 = header.getOrDefault("X-Amz-Signature")
  valid_603818 = validateParameter(valid_603818, JString, required = false,
                                 default = nil)
  if valid_603818 != nil:
    section.add "X-Amz-Signature", valid_603818
  var valid_603819 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603819 = validateParameter(valid_603819, JString, required = false,
                                 default = nil)
  if valid_603819 != nil:
    section.add "X-Amz-SignedHeaders", valid_603819
  var valid_603820 = header.getOrDefault("X-Amz-Credential")
  valid_603820 = validateParameter(valid_603820, JString, required = false,
                                 default = nil)
  if valid_603820 != nil:
    section.add "X-Amz-Credential", valid_603820
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to <code>MaxRecords</code> IDs. If you omit this parameter, all Auto Scaling instances are described. If you specify an ID that does not exist, it is ignored with no error.
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>50</code>.
  section = newJObject()
  var valid_603821 = formData.getOrDefault("NextToken")
  valid_603821 = validateParameter(valid_603821, JString, required = false,
                                 default = nil)
  if valid_603821 != nil:
    section.add "NextToken", valid_603821
  var valid_603822 = formData.getOrDefault("InstanceIds")
  valid_603822 = validateParameter(valid_603822, JArray, required = false,
                                 default = nil)
  if valid_603822 != nil:
    section.add "InstanceIds", valid_603822
  var valid_603823 = formData.getOrDefault("MaxRecords")
  valid_603823 = validateParameter(valid_603823, JInt, required = false, default = nil)
  if valid_603823 != nil:
    section.add "MaxRecords", valid_603823
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603824: Call_PostDescribeAutoScalingInstances_603809;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes one or more Auto Scaling instances.
  ## 
  let valid = call_603824.validator(path, query, header, formData, body)
  let scheme = call_603824.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603824.url(scheme.get, call_603824.host, call_603824.base,
                         call_603824.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603824, url, valid)

proc call*(call_603825: Call_PostDescribeAutoScalingInstances_603809;
          NextToken: string = ""; InstanceIds: JsonNode = nil;
          Action: string = "DescribeAutoScalingInstances"; MaxRecords: int = 0;
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeAutoScalingInstances
  ## Describes one or more Auto Scaling instances.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to <code>MaxRecords</code> IDs. If you omit this parameter, all Auto Scaling instances are described. If you specify an ID that does not exist, it is ignored with no error.
  ##   Action: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>50</code>.
  ##   Version: string (required)
  var query_603826 = newJObject()
  var formData_603827 = newJObject()
  add(formData_603827, "NextToken", newJString(NextToken))
  if InstanceIds != nil:
    formData_603827.add "InstanceIds", InstanceIds
  add(query_603826, "Action", newJString(Action))
  add(formData_603827, "MaxRecords", newJInt(MaxRecords))
  add(query_603826, "Version", newJString(Version))
  result = call_603825.call(nil, query_603826, nil, formData_603827, nil)

var postDescribeAutoScalingInstances* = Call_PostDescribeAutoScalingInstances_603809(
    name: "postDescribeAutoScalingInstances", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeAutoScalingInstances",
    validator: validate_PostDescribeAutoScalingInstances_603810, base: "/",
    url: url_PostDescribeAutoScalingInstances_603811,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeAutoScalingInstances_603791 = ref object of OpenApiRestCall_602466
proc url_GetDescribeAutoScalingInstances_603793(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeAutoScalingInstances_603792(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more Auto Scaling instances.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>50</code>.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: JString (required)
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to <code>MaxRecords</code> IDs. If you omit this parameter, all Auto Scaling instances are described. If you specify an ID that does not exist, it is ignored with no error.
  ##   Version: JString (required)
  section = newJObject()
  var valid_603794 = query.getOrDefault("MaxRecords")
  valid_603794 = validateParameter(valid_603794, JInt, required = false, default = nil)
  if valid_603794 != nil:
    section.add "MaxRecords", valid_603794
  var valid_603795 = query.getOrDefault("NextToken")
  valid_603795 = validateParameter(valid_603795, JString, required = false,
                                 default = nil)
  if valid_603795 != nil:
    section.add "NextToken", valid_603795
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603796 = query.getOrDefault("Action")
  valid_603796 = validateParameter(valid_603796, JString, required = true, default = newJString(
      "DescribeAutoScalingInstances"))
  if valid_603796 != nil:
    section.add "Action", valid_603796
  var valid_603797 = query.getOrDefault("InstanceIds")
  valid_603797 = validateParameter(valid_603797, JArray, required = false,
                                 default = nil)
  if valid_603797 != nil:
    section.add "InstanceIds", valid_603797
  var valid_603798 = query.getOrDefault("Version")
  valid_603798 = validateParameter(valid_603798, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603798 != nil:
    section.add "Version", valid_603798
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603799 = header.getOrDefault("X-Amz-Date")
  valid_603799 = validateParameter(valid_603799, JString, required = false,
                                 default = nil)
  if valid_603799 != nil:
    section.add "X-Amz-Date", valid_603799
  var valid_603800 = header.getOrDefault("X-Amz-Security-Token")
  valid_603800 = validateParameter(valid_603800, JString, required = false,
                                 default = nil)
  if valid_603800 != nil:
    section.add "X-Amz-Security-Token", valid_603800
  var valid_603801 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603801 = validateParameter(valid_603801, JString, required = false,
                                 default = nil)
  if valid_603801 != nil:
    section.add "X-Amz-Content-Sha256", valid_603801
  var valid_603802 = header.getOrDefault("X-Amz-Algorithm")
  valid_603802 = validateParameter(valid_603802, JString, required = false,
                                 default = nil)
  if valid_603802 != nil:
    section.add "X-Amz-Algorithm", valid_603802
  var valid_603803 = header.getOrDefault("X-Amz-Signature")
  valid_603803 = validateParameter(valid_603803, JString, required = false,
                                 default = nil)
  if valid_603803 != nil:
    section.add "X-Amz-Signature", valid_603803
  var valid_603804 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603804 = validateParameter(valid_603804, JString, required = false,
                                 default = nil)
  if valid_603804 != nil:
    section.add "X-Amz-SignedHeaders", valid_603804
  var valid_603805 = header.getOrDefault("X-Amz-Credential")
  valid_603805 = validateParameter(valid_603805, JString, required = false,
                                 default = nil)
  if valid_603805 != nil:
    section.add "X-Amz-Credential", valid_603805
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603806: Call_GetDescribeAutoScalingInstances_603791;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes one or more Auto Scaling instances.
  ## 
  let valid = call_603806.validator(path, query, header, formData, body)
  let scheme = call_603806.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603806.url(scheme.get, call_603806.host, call_603806.base,
                         call_603806.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603806, url, valid)

proc call*(call_603807: Call_GetDescribeAutoScalingInstances_603791;
          MaxRecords: int = 0; NextToken: string = "";
          Action: string = "DescribeAutoScalingInstances";
          InstanceIds: JsonNode = nil; Version: string = "2011-01-01"): Recallable =
  ## getDescribeAutoScalingInstances
  ## Describes one or more Auto Scaling instances.
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>50</code>.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to <code>MaxRecords</code> IDs. If you omit this parameter, all Auto Scaling instances are described. If you specify an ID that does not exist, it is ignored with no error.
  ##   Version: string (required)
  var query_603808 = newJObject()
  add(query_603808, "MaxRecords", newJInt(MaxRecords))
  add(query_603808, "NextToken", newJString(NextToken))
  add(query_603808, "Action", newJString(Action))
  if InstanceIds != nil:
    query_603808.add "InstanceIds", InstanceIds
  add(query_603808, "Version", newJString(Version))
  result = call_603807.call(nil, query_603808, nil, nil, nil)

var getDescribeAutoScalingInstances* = Call_GetDescribeAutoScalingInstances_603791(
    name: "getDescribeAutoScalingInstances", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeAutoScalingInstances",
    validator: validate_GetDescribeAutoScalingInstances_603792, base: "/",
    url: url_GetDescribeAutoScalingInstances_603793,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeAutoScalingNotificationTypes_603843 = ref object of OpenApiRestCall_602466
proc url_PostDescribeAutoScalingNotificationTypes_603845(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeAutoScalingNotificationTypes_603844(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the notification types that are supported by Amazon EC2 Auto Scaling.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603846 = query.getOrDefault("Action")
  valid_603846 = validateParameter(valid_603846, JString, required = true, default = newJString(
      "DescribeAutoScalingNotificationTypes"))
  if valid_603846 != nil:
    section.add "Action", valid_603846
  var valid_603847 = query.getOrDefault("Version")
  valid_603847 = validateParameter(valid_603847, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603847 != nil:
    section.add "Version", valid_603847
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603848 = header.getOrDefault("X-Amz-Date")
  valid_603848 = validateParameter(valid_603848, JString, required = false,
                                 default = nil)
  if valid_603848 != nil:
    section.add "X-Amz-Date", valid_603848
  var valid_603849 = header.getOrDefault("X-Amz-Security-Token")
  valid_603849 = validateParameter(valid_603849, JString, required = false,
                                 default = nil)
  if valid_603849 != nil:
    section.add "X-Amz-Security-Token", valid_603849
  var valid_603850 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603850 = validateParameter(valid_603850, JString, required = false,
                                 default = nil)
  if valid_603850 != nil:
    section.add "X-Amz-Content-Sha256", valid_603850
  var valid_603851 = header.getOrDefault("X-Amz-Algorithm")
  valid_603851 = validateParameter(valid_603851, JString, required = false,
                                 default = nil)
  if valid_603851 != nil:
    section.add "X-Amz-Algorithm", valid_603851
  var valid_603852 = header.getOrDefault("X-Amz-Signature")
  valid_603852 = validateParameter(valid_603852, JString, required = false,
                                 default = nil)
  if valid_603852 != nil:
    section.add "X-Amz-Signature", valid_603852
  var valid_603853 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603853 = validateParameter(valid_603853, JString, required = false,
                                 default = nil)
  if valid_603853 != nil:
    section.add "X-Amz-SignedHeaders", valid_603853
  var valid_603854 = header.getOrDefault("X-Amz-Credential")
  valid_603854 = validateParameter(valid_603854, JString, required = false,
                                 default = nil)
  if valid_603854 != nil:
    section.add "X-Amz-Credential", valid_603854
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603855: Call_PostDescribeAutoScalingNotificationTypes_603843;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the notification types that are supported by Amazon EC2 Auto Scaling.
  ## 
  let valid = call_603855.validator(path, query, header, formData, body)
  let scheme = call_603855.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603855.url(scheme.get, call_603855.host, call_603855.base,
                         call_603855.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603855, url, valid)

proc call*(call_603856: Call_PostDescribeAutoScalingNotificationTypes_603843;
          Action: string = "DescribeAutoScalingNotificationTypes";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeAutoScalingNotificationTypes
  ## Describes the notification types that are supported by Amazon EC2 Auto Scaling.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603857 = newJObject()
  add(query_603857, "Action", newJString(Action))
  add(query_603857, "Version", newJString(Version))
  result = call_603856.call(nil, query_603857, nil, nil, nil)

var postDescribeAutoScalingNotificationTypes* = Call_PostDescribeAutoScalingNotificationTypes_603843(
    name: "postDescribeAutoScalingNotificationTypes", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeAutoScalingNotificationTypes",
    validator: validate_PostDescribeAutoScalingNotificationTypes_603844,
    base: "/", url: url_PostDescribeAutoScalingNotificationTypes_603845,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeAutoScalingNotificationTypes_603828 = ref object of OpenApiRestCall_602466
proc url_GetDescribeAutoScalingNotificationTypes_603830(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeAutoScalingNotificationTypes_603829(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the notification types that are supported by Amazon EC2 Auto Scaling.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603831 = query.getOrDefault("Action")
  valid_603831 = validateParameter(valid_603831, JString, required = true, default = newJString(
      "DescribeAutoScalingNotificationTypes"))
  if valid_603831 != nil:
    section.add "Action", valid_603831
  var valid_603832 = query.getOrDefault("Version")
  valid_603832 = validateParameter(valid_603832, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603832 != nil:
    section.add "Version", valid_603832
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603833 = header.getOrDefault("X-Amz-Date")
  valid_603833 = validateParameter(valid_603833, JString, required = false,
                                 default = nil)
  if valid_603833 != nil:
    section.add "X-Amz-Date", valid_603833
  var valid_603834 = header.getOrDefault("X-Amz-Security-Token")
  valid_603834 = validateParameter(valid_603834, JString, required = false,
                                 default = nil)
  if valid_603834 != nil:
    section.add "X-Amz-Security-Token", valid_603834
  var valid_603835 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603835 = validateParameter(valid_603835, JString, required = false,
                                 default = nil)
  if valid_603835 != nil:
    section.add "X-Amz-Content-Sha256", valid_603835
  var valid_603836 = header.getOrDefault("X-Amz-Algorithm")
  valid_603836 = validateParameter(valid_603836, JString, required = false,
                                 default = nil)
  if valid_603836 != nil:
    section.add "X-Amz-Algorithm", valid_603836
  var valid_603837 = header.getOrDefault("X-Amz-Signature")
  valid_603837 = validateParameter(valid_603837, JString, required = false,
                                 default = nil)
  if valid_603837 != nil:
    section.add "X-Amz-Signature", valid_603837
  var valid_603838 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603838 = validateParameter(valid_603838, JString, required = false,
                                 default = nil)
  if valid_603838 != nil:
    section.add "X-Amz-SignedHeaders", valid_603838
  var valid_603839 = header.getOrDefault("X-Amz-Credential")
  valid_603839 = validateParameter(valid_603839, JString, required = false,
                                 default = nil)
  if valid_603839 != nil:
    section.add "X-Amz-Credential", valid_603839
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603840: Call_GetDescribeAutoScalingNotificationTypes_603828;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the notification types that are supported by Amazon EC2 Auto Scaling.
  ## 
  let valid = call_603840.validator(path, query, header, formData, body)
  let scheme = call_603840.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603840.url(scheme.get, call_603840.host, call_603840.base,
                         call_603840.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603840, url, valid)

proc call*(call_603841: Call_GetDescribeAutoScalingNotificationTypes_603828;
          Action: string = "DescribeAutoScalingNotificationTypes";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeAutoScalingNotificationTypes
  ## Describes the notification types that are supported by Amazon EC2 Auto Scaling.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603842 = newJObject()
  add(query_603842, "Action", newJString(Action))
  add(query_603842, "Version", newJString(Version))
  result = call_603841.call(nil, query_603842, nil, nil, nil)

var getDescribeAutoScalingNotificationTypes* = Call_GetDescribeAutoScalingNotificationTypes_603828(
    name: "getDescribeAutoScalingNotificationTypes", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeAutoScalingNotificationTypes",
    validator: validate_GetDescribeAutoScalingNotificationTypes_603829, base: "/",
    url: url_GetDescribeAutoScalingNotificationTypes_603830,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeLaunchConfigurations_603876 = ref object of OpenApiRestCall_602466
proc url_PostDescribeLaunchConfigurations_603878(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeLaunchConfigurations_603877(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more launch configurations.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603879 = query.getOrDefault("Action")
  valid_603879 = validateParameter(valid_603879, JString, required = true, default = newJString(
      "DescribeLaunchConfigurations"))
  if valid_603879 != nil:
    section.add "Action", valid_603879
  var valid_603880 = query.getOrDefault("Version")
  valid_603880 = validateParameter(valid_603880, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603880 != nil:
    section.add "Version", valid_603880
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603881 = header.getOrDefault("X-Amz-Date")
  valid_603881 = validateParameter(valid_603881, JString, required = false,
                                 default = nil)
  if valid_603881 != nil:
    section.add "X-Amz-Date", valid_603881
  var valid_603882 = header.getOrDefault("X-Amz-Security-Token")
  valid_603882 = validateParameter(valid_603882, JString, required = false,
                                 default = nil)
  if valid_603882 != nil:
    section.add "X-Amz-Security-Token", valid_603882
  var valid_603883 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603883 = validateParameter(valid_603883, JString, required = false,
                                 default = nil)
  if valid_603883 != nil:
    section.add "X-Amz-Content-Sha256", valid_603883
  var valid_603884 = header.getOrDefault("X-Amz-Algorithm")
  valid_603884 = validateParameter(valid_603884, JString, required = false,
                                 default = nil)
  if valid_603884 != nil:
    section.add "X-Amz-Algorithm", valid_603884
  var valid_603885 = header.getOrDefault("X-Amz-Signature")
  valid_603885 = validateParameter(valid_603885, JString, required = false,
                                 default = nil)
  if valid_603885 != nil:
    section.add "X-Amz-Signature", valid_603885
  var valid_603886 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603886 = validateParameter(valid_603886, JString, required = false,
                                 default = nil)
  if valid_603886 != nil:
    section.add "X-Amz-SignedHeaders", valid_603886
  var valid_603887 = header.getOrDefault("X-Amz-Credential")
  valid_603887 = validateParameter(valid_603887, JString, required = false,
                                 default = nil)
  if valid_603887 != nil:
    section.add "X-Amz-Credential", valid_603887
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   LaunchConfigurationNames: JArray
  ##                           : The launch configuration names. If you omit this parameter, all launch configurations are described.
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  section = newJObject()
  var valid_603888 = formData.getOrDefault("NextToken")
  valid_603888 = validateParameter(valid_603888, JString, required = false,
                                 default = nil)
  if valid_603888 != nil:
    section.add "NextToken", valid_603888
  var valid_603889 = formData.getOrDefault("LaunchConfigurationNames")
  valid_603889 = validateParameter(valid_603889, JArray, required = false,
                                 default = nil)
  if valid_603889 != nil:
    section.add "LaunchConfigurationNames", valid_603889
  var valid_603890 = formData.getOrDefault("MaxRecords")
  valid_603890 = validateParameter(valid_603890, JInt, required = false, default = nil)
  if valid_603890 != nil:
    section.add "MaxRecords", valid_603890
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603891: Call_PostDescribeLaunchConfigurations_603876;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes one or more launch configurations.
  ## 
  let valid = call_603891.validator(path, query, header, formData, body)
  let scheme = call_603891.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603891.url(scheme.get, call_603891.host, call_603891.base,
                         call_603891.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603891, url, valid)

proc call*(call_603892: Call_PostDescribeLaunchConfigurations_603876;
          NextToken: string = ""; LaunchConfigurationNames: JsonNode = nil;
          Action: string = "DescribeLaunchConfigurations"; MaxRecords: int = 0;
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeLaunchConfigurations
  ## Describes one or more launch configurations.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   LaunchConfigurationNames: JArray
  ##                           : The launch configuration names. If you omit this parameter, all launch configurations are described.
  ##   Action: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   Version: string (required)
  var query_603893 = newJObject()
  var formData_603894 = newJObject()
  add(formData_603894, "NextToken", newJString(NextToken))
  if LaunchConfigurationNames != nil:
    formData_603894.add "LaunchConfigurationNames", LaunchConfigurationNames
  add(query_603893, "Action", newJString(Action))
  add(formData_603894, "MaxRecords", newJInt(MaxRecords))
  add(query_603893, "Version", newJString(Version))
  result = call_603892.call(nil, query_603893, nil, formData_603894, nil)

var postDescribeLaunchConfigurations* = Call_PostDescribeLaunchConfigurations_603876(
    name: "postDescribeLaunchConfigurations", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeLaunchConfigurations",
    validator: validate_PostDescribeLaunchConfigurations_603877, base: "/",
    url: url_PostDescribeLaunchConfigurations_603878,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeLaunchConfigurations_603858 = ref object of OpenApiRestCall_602466
proc url_GetDescribeLaunchConfigurations_603860(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeLaunchConfigurations_603859(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more launch configurations.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   LaunchConfigurationNames: JArray
  ##                           : The launch configuration names. If you omit this parameter, all launch configurations are described.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_603861 = query.getOrDefault("MaxRecords")
  valid_603861 = validateParameter(valid_603861, JInt, required = false, default = nil)
  if valid_603861 != nil:
    section.add "MaxRecords", valid_603861
  var valid_603862 = query.getOrDefault("NextToken")
  valid_603862 = validateParameter(valid_603862, JString, required = false,
                                 default = nil)
  if valid_603862 != nil:
    section.add "NextToken", valid_603862
  var valid_603863 = query.getOrDefault("LaunchConfigurationNames")
  valid_603863 = validateParameter(valid_603863, JArray, required = false,
                                 default = nil)
  if valid_603863 != nil:
    section.add "LaunchConfigurationNames", valid_603863
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603864 = query.getOrDefault("Action")
  valid_603864 = validateParameter(valid_603864, JString, required = true, default = newJString(
      "DescribeLaunchConfigurations"))
  if valid_603864 != nil:
    section.add "Action", valid_603864
  var valid_603865 = query.getOrDefault("Version")
  valid_603865 = validateParameter(valid_603865, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603865 != nil:
    section.add "Version", valid_603865
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603866 = header.getOrDefault("X-Amz-Date")
  valid_603866 = validateParameter(valid_603866, JString, required = false,
                                 default = nil)
  if valid_603866 != nil:
    section.add "X-Amz-Date", valid_603866
  var valid_603867 = header.getOrDefault("X-Amz-Security-Token")
  valid_603867 = validateParameter(valid_603867, JString, required = false,
                                 default = nil)
  if valid_603867 != nil:
    section.add "X-Amz-Security-Token", valid_603867
  var valid_603868 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603868 = validateParameter(valid_603868, JString, required = false,
                                 default = nil)
  if valid_603868 != nil:
    section.add "X-Amz-Content-Sha256", valid_603868
  var valid_603869 = header.getOrDefault("X-Amz-Algorithm")
  valid_603869 = validateParameter(valid_603869, JString, required = false,
                                 default = nil)
  if valid_603869 != nil:
    section.add "X-Amz-Algorithm", valid_603869
  var valid_603870 = header.getOrDefault("X-Amz-Signature")
  valid_603870 = validateParameter(valid_603870, JString, required = false,
                                 default = nil)
  if valid_603870 != nil:
    section.add "X-Amz-Signature", valid_603870
  var valid_603871 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603871 = validateParameter(valid_603871, JString, required = false,
                                 default = nil)
  if valid_603871 != nil:
    section.add "X-Amz-SignedHeaders", valid_603871
  var valid_603872 = header.getOrDefault("X-Amz-Credential")
  valid_603872 = validateParameter(valid_603872, JString, required = false,
                                 default = nil)
  if valid_603872 != nil:
    section.add "X-Amz-Credential", valid_603872
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603873: Call_GetDescribeLaunchConfigurations_603858;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes one or more launch configurations.
  ## 
  let valid = call_603873.validator(path, query, header, formData, body)
  let scheme = call_603873.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603873.url(scheme.get, call_603873.host, call_603873.base,
                         call_603873.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603873, url, valid)

proc call*(call_603874: Call_GetDescribeLaunchConfigurations_603858;
          MaxRecords: int = 0; NextToken: string = "";
          LaunchConfigurationNames: JsonNode = nil;
          Action: string = "DescribeLaunchConfigurations";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeLaunchConfigurations
  ## Describes one or more launch configurations.
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   LaunchConfigurationNames: JArray
  ##                           : The launch configuration names. If you omit this parameter, all launch configurations are described.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603875 = newJObject()
  add(query_603875, "MaxRecords", newJInt(MaxRecords))
  add(query_603875, "NextToken", newJString(NextToken))
  if LaunchConfigurationNames != nil:
    query_603875.add "LaunchConfigurationNames", LaunchConfigurationNames
  add(query_603875, "Action", newJString(Action))
  add(query_603875, "Version", newJString(Version))
  result = call_603874.call(nil, query_603875, nil, nil, nil)

var getDescribeLaunchConfigurations* = Call_GetDescribeLaunchConfigurations_603858(
    name: "getDescribeLaunchConfigurations", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeLaunchConfigurations",
    validator: validate_GetDescribeLaunchConfigurations_603859, base: "/",
    url: url_GetDescribeLaunchConfigurations_603860,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeLifecycleHookTypes_603910 = ref object of OpenApiRestCall_602466
proc url_PostDescribeLifecycleHookTypes_603912(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeLifecycleHookTypes_603911(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the available types of lifecycle hooks.</p> <p>The following hook types are supported:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603913 = query.getOrDefault("Action")
  valid_603913 = validateParameter(valid_603913, JString, required = true, default = newJString(
      "DescribeLifecycleHookTypes"))
  if valid_603913 != nil:
    section.add "Action", valid_603913
  var valid_603914 = query.getOrDefault("Version")
  valid_603914 = validateParameter(valid_603914, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603914 != nil:
    section.add "Version", valid_603914
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603915 = header.getOrDefault("X-Amz-Date")
  valid_603915 = validateParameter(valid_603915, JString, required = false,
                                 default = nil)
  if valid_603915 != nil:
    section.add "X-Amz-Date", valid_603915
  var valid_603916 = header.getOrDefault("X-Amz-Security-Token")
  valid_603916 = validateParameter(valid_603916, JString, required = false,
                                 default = nil)
  if valid_603916 != nil:
    section.add "X-Amz-Security-Token", valid_603916
  var valid_603917 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603917 = validateParameter(valid_603917, JString, required = false,
                                 default = nil)
  if valid_603917 != nil:
    section.add "X-Amz-Content-Sha256", valid_603917
  var valid_603918 = header.getOrDefault("X-Amz-Algorithm")
  valid_603918 = validateParameter(valid_603918, JString, required = false,
                                 default = nil)
  if valid_603918 != nil:
    section.add "X-Amz-Algorithm", valid_603918
  var valid_603919 = header.getOrDefault("X-Amz-Signature")
  valid_603919 = validateParameter(valid_603919, JString, required = false,
                                 default = nil)
  if valid_603919 != nil:
    section.add "X-Amz-Signature", valid_603919
  var valid_603920 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603920 = validateParameter(valid_603920, JString, required = false,
                                 default = nil)
  if valid_603920 != nil:
    section.add "X-Amz-SignedHeaders", valid_603920
  var valid_603921 = header.getOrDefault("X-Amz-Credential")
  valid_603921 = validateParameter(valid_603921, JString, required = false,
                                 default = nil)
  if valid_603921 != nil:
    section.add "X-Amz-Credential", valid_603921
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603922: Call_PostDescribeLifecycleHookTypes_603910; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the available types of lifecycle hooks.</p> <p>The following hook types are supported:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul>
  ## 
  let valid = call_603922.validator(path, query, header, formData, body)
  let scheme = call_603922.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603922.url(scheme.get, call_603922.host, call_603922.base,
                         call_603922.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603922, url, valid)

proc call*(call_603923: Call_PostDescribeLifecycleHookTypes_603910;
          Action: string = "DescribeLifecycleHookTypes";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeLifecycleHookTypes
  ## <p>Describes the available types of lifecycle hooks.</p> <p>The following hook types are supported:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603924 = newJObject()
  add(query_603924, "Action", newJString(Action))
  add(query_603924, "Version", newJString(Version))
  result = call_603923.call(nil, query_603924, nil, nil, nil)

var postDescribeLifecycleHookTypes* = Call_PostDescribeLifecycleHookTypes_603910(
    name: "postDescribeLifecycleHookTypes", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeLifecycleHookTypes",
    validator: validate_PostDescribeLifecycleHookTypes_603911, base: "/",
    url: url_PostDescribeLifecycleHookTypes_603912,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeLifecycleHookTypes_603895 = ref object of OpenApiRestCall_602466
proc url_GetDescribeLifecycleHookTypes_603897(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeLifecycleHookTypes_603896(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the available types of lifecycle hooks.</p> <p>The following hook types are supported:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603898 = query.getOrDefault("Action")
  valid_603898 = validateParameter(valid_603898, JString, required = true, default = newJString(
      "DescribeLifecycleHookTypes"))
  if valid_603898 != nil:
    section.add "Action", valid_603898
  var valid_603899 = query.getOrDefault("Version")
  valid_603899 = validateParameter(valid_603899, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603899 != nil:
    section.add "Version", valid_603899
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603900 = header.getOrDefault("X-Amz-Date")
  valid_603900 = validateParameter(valid_603900, JString, required = false,
                                 default = nil)
  if valid_603900 != nil:
    section.add "X-Amz-Date", valid_603900
  var valid_603901 = header.getOrDefault("X-Amz-Security-Token")
  valid_603901 = validateParameter(valid_603901, JString, required = false,
                                 default = nil)
  if valid_603901 != nil:
    section.add "X-Amz-Security-Token", valid_603901
  var valid_603902 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603902 = validateParameter(valid_603902, JString, required = false,
                                 default = nil)
  if valid_603902 != nil:
    section.add "X-Amz-Content-Sha256", valid_603902
  var valid_603903 = header.getOrDefault("X-Amz-Algorithm")
  valid_603903 = validateParameter(valid_603903, JString, required = false,
                                 default = nil)
  if valid_603903 != nil:
    section.add "X-Amz-Algorithm", valid_603903
  var valid_603904 = header.getOrDefault("X-Amz-Signature")
  valid_603904 = validateParameter(valid_603904, JString, required = false,
                                 default = nil)
  if valid_603904 != nil:
    section.add "X-Amz-Signature", valid_603904
  var valid_603905 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603905 = validateParameter(valid_603905, JString, required = false,
                                 default = nil)
  if valid_603905 != nil:
    section.add "X-Amz-SignedHeaders", valid_603905
  var valid_603906 = header.getOrDefault("X-Amz-Credential")
  valid_603906 = validateParameter(valid_603906, JString, required = false,
                                 default = nil)
  if valid_603906 != nil:
    section.add "X-Amz-Credential", valid_603906
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603907: Call_GetDescribeLifecycleHookTypes_603895; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the available types of lifecycle hooks.</p> <p>The following hook types are supported:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul>
  ## 
  let valid = call_603907.validator(path, query, header, formData, body)
  let scheme = call_603907.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603907.url(scheme.get, call_603907.host, call_603907.base,
                         call_603907.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603907, url, valid)

proc call*(call_603908: Call_GetDescribeLifecycleHookTypes_603895;
          Action: string = "DescribeLifecycleHookTypes";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeLifecycleHookTypes
  ## <p>Describes the available types of lifecycle hooks.</p> <p>The following hook types are supported:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603909 = newJObject()
  add(query_603909, "Action", newJString(Action))
  add(query_603909, "Version", newJString(Version))
  result = call_603908.call(nil, query_603909, nil, nil, nil)

var getDescribeLifecycleHookTypes* = Call_GetDescribeLifecycleHookTypes_603895(
    name: "getDescribeLifecycleHookTypes", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeLifecycleHookTypes",
    validator: validate_GetDescribeLifecycleHookTypes_603896, base: "/",
    url: url_GetDescribeLifecycleHookTypes_603897,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeLifecycleHooks_603942 = ref object of OpenApiRestCall_602466
proc url_PostDescribeLifecycleHooks_603944(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeLifecycleHooks_603943(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the lifecycle hooks for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603945 = query.getOrDefault("Action")
  valid_603945 = validateParameter(valid_603945, JString, required = true,
                                 default = newJString("DescribeLifecycleHooks"))
  if valid_603945 != nil:
    section.add "Action", valid_603945
  var valid_603946 = query.getOrDefault("Version")
  valid_603946 = validateParameter(valid_603946, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603946 != nil:
    section.add "Version", valid_603946
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603947 = header.getOrDefault("X-Amz-Date")
  valid_603947 = validateParameter(valid_603947, JString, required = false,
                                 default = nil)
  if valid_603947 != nil:
    section.add "X-Amz-Date", valid_603947
  var valid_603948 = header.getOrDefault("X-Amz-Security-Token")
  valid_603948 = validateParameter(valid_603948, JString, required = false,
                                 default = nil)
  if valid_603948 != nil:
    section.add "X-Amz-Security-Token", valid_603948
  var valid_603949 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603949 = validateParameter(valid_603949, JString, required = false,
                                 default = nil)
  if valid_603949 != nil:
    section.add "X-Amz-Content-Sha256", valid_603949
  var valid_603950 = header.getOrDefault("X-Amz-Algorithm")
  valid_603950 = validateParameter(valid_603950, JString, required = false,
                                 default = nil)
  if valid_603950 != nil:
    section.add "X-Amz-Algorithm", valid_603950
  var valid_603951 = header.getOrDefault("X-Amz-Signature")
  valid_603951 = validateParameter(valid_603951, JString, required = false,
                                 default = nil)
  if valid_603951 != nil:
    section.add "X-Amz-Signature", valid_603951
  var valid_603952 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603952 = validateParameter(valid_603952, JString, required = false,
                                 default = nil)
  if valid_603952 != nil:
    section.add "X-Amz-SignedHeaders", valid_603952
  var valid_603953 = header.getOrDefault("X-Amz-Credential")
  valid_603953 = validateParameter(valid_603953, JString, required = false,
                                 default = nil)
  if valid_603953 != nil:
    section.add "X-Amz-Credential", valid_603953
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookNames: JArray
  ##                     : The names of one or more lifecycle hooks. If you omit this parameter, all lifecycle hooks are described.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_603954 = formData.getOrDefault("AutoScalingGroupName")
  valid_603954 = validateParameter(valid_603954, JString, required = true,
                                 default = nil)
  if valid_603954 != nil:
    section.add "AutoScalingGroupName", valid_603954
  var valid_603955 = formData.getOrDefault("LifecycleHookNames")
  valid_603955 = validateParameter(valid_603955, JArray, required = false,
                                 default = nil)
  if valid_603955 != nil:
    section.add "LifecycleHookNames", valid_603955
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603956: Call_PostDescribeLifecycleHooks_603942; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the lifecycle hooks for the specified Auto Scaling group.
  ## 
  let valid = call_603956.validator(path, query, header, formData, body)
  let scheme = call_603956.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603956.url(scheme.get, call_603956.host, call_603956.base,
                         call_603956.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603956, url, valid)

proc call*(call_603957: Call_PostDescribeLifecycleHooks_603942;
          AutoScalingGroupName: string; LifecycleHookNames: JsonNode = nil;
          Action: string = "DescribeLifecycleHooks"; Version: string = "2011-01-01"): Recallable =
  ## postDescribeLifecycleHooks
  ## Describes the lifecycle hooks for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookNames: JArray
  ##                     : The names of one or more lifecycle hooks. If you omit this parameter, all lifecycle hooks are described.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603958 = newJObject()
  var formData_603959 = newJObject()
  add(formData_603959, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if LifecycleHookNames != nil:
    formData_603959.add "LifecycleHookNames", LifecycleHookNames
  add(query_603958, "Action", newJString(Action))
  add(query_603958, "Version", newJString(Version))
  result = call_603957.call(nil, query_603958, nil, formData_603959, nil)

var postDescribeLifecycleHooks* = Call_PostDescribeLifecycleHooks_603942(
    name: "postDescribeLifecycleHooks", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeLifecycleHooks",
    validator: validate_PostDescribeLifecycleHooks_603943, base: "/",
    url: url_PostDescribeLifecycleHooks_603944,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeLifecycleHooks_603925 = ref object of OpenApiRestCall_602466
proc url_GetDescribeLifecycleHooks_603927(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeLifecycleHooks_603926(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the lifecycle hooks for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookNames: JArray
  ##                     : The names of one or more lifecycle hooks. If you omit this parameter, all lifecycle hooks are described.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_603928 = query.getOrDefault("AutoScalingGroupName")
  valid_603928 = validateParameter(valid_603928, JString, required = true,
                                 default = nil)
  if valid_603928 != nil:
    section.add "AutoScalingGroupName", valid_603928
  var valid_603929 = query.getOrDefault("LifecycleHookNames")
  valid_603929 = validateParameter(valid_603929, JArray, required = false,
                                 default = nil)
  if valid_603929 != nil:
    section.add "LifecycleHookNames", valid_603929
  var valid_603930 = query.getOrDefault("Action")
  valid_603930 = validateParameter(valid_603930, JString, required = true,
                                 default = newJString("DescribeLifecycleHooks"))
  if valid_603930 != nil:
    section.add "Action", valid_603930
  var valid_603931 = query.getOrDefault("Version")
  valid_603931 = validateParameter(valid_603931, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603931 != nil:
    section.add "Version", valid_603931
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603932 = header.getOrDefault("X-Amz-Date")
  valid_603932 = validateParameter(valid_603932, JString, required = false,
                                 default = nil)
  if valid_603932 != nil:
    section.add "X-Amz-Date", valid_603932
  var valid_603933 = header.getOrDefault("X-Amz-Security-Token")
  valid_603933 = validateParameter(valid_603933, JString, required = false,
                                 default = nil)
  if valid_603933 != nil:
    section.add "X-Amz-Security-Token", valid_603933
  var valid_603934 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603934 = validateParameter(valid_603934, JString, required = false,
                                 default = nil)
  if valid_603934 != nil:
    section.add "X-Amz-Content-Sha256", valid_603934
  var valid_603935 = header.getOrDefault("X-Amz-Algorithm")
  valid_603935 = validateParameter(valid_603935, JString, required = false,
                                 default = nil)
  if valid_603935 != nil:
    section.add "X-Amz-Algorithm", valid_603935
  var valid_603936 = header.getOrDefault("X-Amz-Signature")
  valid_603936 = validateParameter(valid_603936, JString, required = false,
                                 default = nil)
  if valid_603936 != nil:
    section.add "X-Amz-Signature", valid_603936
  var valid_603937 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603937 = validateParameter(valid_603937, JString, required = false,
                                 default = nil)
  if valid_603937 != nil:
    section.add "X-Amz-SignedHeaders", valid_603937
  var valid_603938 = header.getOrDefault("X-Amz-Credential")
  valid_603938 = validateParameter(valid_603938, JString, required = false,
                                 default = nil)
  if valid_603938 != nil:
    section.add "X-Amz-Credential", valid_603938
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603939: Call_GetDescribeLifecycleHooks_603925; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the lifecycle hooks for the specified Auto Scaling group.
  ## 
  let valid = call_603939.validator(path, query, header, formData, body)
  let scheme = call_603939.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603939.url(scheme.get, call_603939.host, call_603939.base,
                         call_603939.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603939, url, valid)

proc call*(call_603940: Call_GetDescribeLifecycleHooks_603925;
          AutoScalingGroupName: string; LifecycleHookNames: JsonNode = nil;
          Action: string = "DescribeLifecycleHooks"; Version: string = "2011-01-01"): Recallable =
  ## getDescribeLifecycleHooks
  ## Describes the lifecycle hooks for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookNames: JArray
  ##                     : The names of one or more lifecycle hooks. If you omit this parameter, all lifecycle hooks are described.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603941 = newJObject()
  add(query_603941, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if LifecycleHookNames != nil:
    query_603941.add "LifecycleHookNames", LifecycleHookNames
  add(query_603941, "Action", newJString(Action))
  add(query_603941, "Version", newJString(Version))
  result = call_603940.call(nil, query_603941, nil, nil, nil)

var getDescribeLifecycleHooks* = Call_GetDescribeLifecycleHooks_603925(
    name: "getDescribeLifecycleHooks", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeLifecycleHooks",
    validator: validate_GetDescribeLifecycleHooks_603926, base: "/",
    url: url_GetDescribeLifecycleHooks_603927,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeLoadBalancerTargetGroups_603978 = ref object of OpenApiRestCall_602466
proc url_PostDescribeLoadBalancerTargetGroups_603980(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeLoadBalancerTargetGroups_603979(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the target groups for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603981 = query.getOrDefault("Action")
  valid_603981 = validateParameter(valid_603981, JString, required = true, default = newJString(
      "DescribeLoadBalancerTargetGroups"))
  if valid_603981 != nil:
    section.add "Action", valid_603981
  var valid_603982 = query.getOrDefault("Version")
  valid_603982 = validateParameter(valid_603982, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603982 != nil:
    section.add "Version", valid_603982
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603983 = header.getOrDefault("X-Amz-Date")
  valid_603983 = validateParameter(valid_603983, JString, required = false,
                                 default = nil)
  if valid_603983 != nil:
    section.add "X-Amz-Date", valid_603983
  var valid_603984 = header.getOrDefault("X-Amz-Security-Token")
  valid_603984 = validateParameter(valid_603984, JString, required = false,
                                 default = nil)
  if valid_603984 != nil:
    section.add "X-Amz-Security-Token", valid_603984
  var valid_603985 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603985 = validateParameter(valid_603985, JString, required = false,
                                 default = nil)
  if valid_603985 != nil:
    section.add "X-Amz-Content-Sha256", valid_603985
  var valid_603986 = header.getOrDefault("X-Amz-Algorithm")
  valid_603986 = validateParameter(valid_603986, JString, required = false,
                                 default = nil)
  if valid_603986 != nil:
    section.add "X-Amz-Algorithm", valid_603986
  var valid_603987 = header.getOrDefault("X-Amz-Signature")
  valid_603987 = validateParameter(valid_603987, JString, required = false,
                                 default = nil)
  if valid_603987 != nil:
    section.add "X-Amz-Signature", valid_603987
  var valid_603988 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603988 = validateParameter(valid_603988, JString, required = false,
                                 default = nil)
  if valid_603988 != nil:
    section.add "X-Amz-SignedHeaders", valid_603988
  var valid_603989 = header.getOrDefault("X-Amz-Credential")
  valid_603989 = validateParameter(valid_603989, JString, required = false,
                                 default = nil)
  if valid_603989 != nil:
    section.add "X-Amz-Credential", valid_603989
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_603990 = formData.getOrDefault("AutoScalingGroupName")
  valid_603990 = validateParameter(valid_603990, JString, required = true,
                                 default = nil)
  if valid_603990 != nil:
    section.add "AutoScalingGroupName", valid_603990
  var valid_603991 = formData.getOrDefault("NextToken")
  valid_603991 = validateParameter(valid_603991, JString, required = false,
                                 default = nil)
  if valid_603991 != nil:
    section.add "NextToken", valid_603991
  var valid_603992 = formData.getOrDefault("MaxRecords")
  valid_603992 = validateParameter(valid_603992, JInt, required = false, default = nil)
  if valid_603992 != nil:
    section.add "MaxRecords", valid_603992
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603993: Call_PostDescribeLoadBalancerTargetGroups_603978;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the target groups for the specified Auto Scaling group.
  ## 
  let valid = call_603993.validator(path, query, header, formData, body)
  let scheme = call_603993.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603993.url(scheme.get, call_603993.host, call_603993.base,
                         call_603993.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603993, url, valid)

proc call*(call_603994: Call_PostDescribeLoadBalancerTargetGroups_603978;
          AutoScalingGroupName: string; NextToken: string = "";
          Action: string = "DescribeLoadBalancerTargetGroups"; MaxRecords: int = 0;
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeLoadBalancerTargetGroups
  ## Describes the target groups for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   Version: string (required)
  var query_603995 = newJObject()
  var formData_603996 = newJObject()
  add(formData_603996, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_603996, "NextToken", newJString(NextToken))
  add(query_603995, "Action", newJString(Action))
  add(formData_603996, "MaxRecords", newJInt(MaxRecords))
  add(query_603995, "Version", newJString(Version))
  result = call_603994.call(nil, query_603995, nil, formData_603996, nil)

var postDescribeLoadBalancerTargetGroups* = Call_PostDescribeLoadBalancerTargetGroups_603978(
    name: "postDescribeLoadBalancerTargetGroups", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeLoadBalancerTargetGroups",
    validator: validate_PostDescribeLoadBalancerTargetGroups_603979, base: "/",
    url: url_PostDescribeLoadBalancerTargetGroups_603980,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeLoadBalancerTargetGroups_603960 = ref object of OpenApiRestCall_602466
proc url_GetDescribeLoadBalancerTargetGroups_603962(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeLoadBalancerTargetGroups_603961(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the target groups for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_603963 = query.getOrDefault("MaxRecords")
  valid_603963 = validateParameter(valid_603963, JInt, required = false, default = nil)
  if valid_603963 != nil:
    section.add "MaxRecords", valid_603963
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_603964 = query.getOrDefault("AutoScalingGroupName")
  valid_603964 = validateParameter(valid_603964, JString, required = true,
                                 default = nil)
  if valid_603964 != nil:
    section.add "AutoScalingGroupName", valid_603964
  var valid_603965 = query.getOrDefault("NextToken")
  valid_603965 = validateParameter(valid_603965, JString, required = false,
                                 default = nil)
  if valid_603965 != nil:
    section.add "NextToken", valid_603965
  var valid_603966 = query.getOrDefault("Action")
  valid_603966 = validateParameter(valid_603966, JString, required = true, default = newJString(
      "DescribeLoadBalancerTargetGroups"))
  if valid_603966 != nil:
    section.add "Action", valid_603966
  var valid_603967 = query.getOrDefault("Version")
  valid_603967 = validateParameter(valid_603967, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603967 != nil:
    section.add "Version", valid_603967
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603968 = header.getOrDefault("X-Amz-Date")
  valid_603968 = validateParameter(valid_603968, JString, required = false,
                                 default = nil)
  if valid_603968 != nil:
    section.add "X-Amz-Date", valid_603968
  var valid_603969 = header.getOrDefault("X-Amz-Security-Token")
  valid_603969 = validateParameter(valid_603969, JString, required = false,
                                 default = nil)
  if valid_603969 != nil:
    section.add "X-Amz-Security-Token", valid_603969
  var valid_603970 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603970 = validateParameter(valid_603970, JString, required = false,
                                 default = nil)
  if valid_603970 != nil:
    section.add "X-Amz-Content-Sha256", valid_603970
  var valid_603971 = header.getOrDefault("X-Amz-Algorithm")
  valid_603971 = validateParameter(valid_603971, JString, required = false,
                                 default = nil)
  if valid_603971 != nil:
    section.add "X-Amz-Algorithm", valid_603971
  var valid_603972 = header.getOrDefault("X-Amz-Signature")
  valid_603972 = validateParameter(valid_603972, JString, required = false,
                                 default = nil)
  if valid_603972 != nil:
    section.add "X-Amz-Signature", valid_603972
  var valid_603973 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603973 = validateParameter(valid_603973, JString, required = false,
                                 default = nil)
  if valid_603973 != nil:
    section.add "X-Amz-SignedHeaders", valid_603973
  var valid_603974 = header.getOrDefault("X-Amz-Credential")
  valid_603974 = validateParameter(valid_603974, JString, required = false,
                                 default = nil)
  if valid_603974 != nil:
    section.add "X-Amz-Credential", valid_603974
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603975: Call_GetDescribeLoadBalancerTargetGroups_603960;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the target groups for the specified Auto Scaling group.
  ## 
  let valid = call_603975.validator(path, query, header, formData, body)
  let scheme = call_603975.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603975.url(scheme.get, call_603975.host, call_603975.base,
                         call_603975.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603975, url, valid)

proc call*(call_603976: Call_GetDescribeLoadBalancerTargetGroups_603960;
          AutoScalingGroupName: string; MaxRecords: int = 0; NextToken: string = "";
          Action: string = "DescribeLoadBalancerTargetGroups";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeLoadBalancerTargetGroups
  ## Describes the target groups for the specified Auto Scaling group.
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603977 = newJObject()
  add(query_603977, "MaxRecords", newJInt(MaxRecords))
  add(query_603977, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_603977, "NextToken", newJString(NextToken))
  add(query_603977, "Action", newJString(Action))
  add(query_603977, "Version", newJString(Version))
  result = call_603976.call(nil, query_603977, nil, nil, nil)

var getDescribeLoadBalancerTargetGroups* = Call_GetDescribeLoadBalancerTargetGroups_603960(
    name: "getDescribeLoadBalancerTargetGroups", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeLoadBalancerTargetGroups",
    validator: validate_GetDescribeLoadBalancerTargetGroups_603961, base: "/",
    url: url_GetDescribeLoadBalancerTargetGroups_603962,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeLoadBalancers_604015 = ref object of OpenApiRestCall_602466
proc url_PostDescribeLoadBalancers_604017(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeLoadBalancers_604016(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the load balancers for the specified Auto Scaling group.</p> <p>This operation describes only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DescribeLoadBalancerTargetGroups</a> instead.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604018 = query.getOrDefault("Action")
  valid_604018 = validateParameter(valid_604018, JString, required = true,
                                 default = newJString("DescribeLoadBalancers"))
  if valid_604018 != nil:
    section.add "Action", valid_604018
  var valid_604019 = query.getOrDefault("Version")
  valid_604019 = validateParameter(valid_604019, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604019 != nil:
    section.add "Version", valid_604019
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604020 = header.getOrDefault("X-Amz-Date")
  valid_604020 = validateParameter(valid_604020, JString, required = false,
                                 default = nil)
  if valid_604020 != nil:
    section.add "X-Amz-Date", valid_604020
  var valid_604021 = header.getOrDefault("X-Amz-Security-Token")
  valid_604021 = validateParameter(valid_604021, JString, required = false,
                                 default = nil)
  if valid_604021 != nil:
    section.add "X-Amz-Security-Token", valid_604021
  var valid_604022 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604022 = validateParameter(valid_604022, JString, required = false,
                                 default = nil)
  if valid_604022 != nil:
    section.add "X-Amz-Content-Sha256", valid_604022
  var valid_604023 = header.getOrDefault("X-Amz-Algorithm")
  valid_604023 = validateParameter(valid_604023, JString, required = false,
                                 default = nil)
  if valid_604023 != nil:
    section.add "X-Amz-Algorithm", valid_604023
  var valid_604024 = header.getOrDefault("X-Amz-Signature")
  valid_604024 = validateParameter(valid_604024, JString, required = false,
                                 default = nil)
  if valid_604024 != nil:
    section.add "X-Amz-Signature", valid_604024
  var valid_604025 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604025 = validateParameter(valid_604025, JString, required = false,
                                 default = nil)
  if valid_604025 != nil:
    section.add "X-Amz-SignedHeaders", valid_604025
  var valid_604026 = header.getOrDefault("X-Amz-Credential")
  valid_604026 = validateParameter(valid_604026, JString, required = false,
                                 default = nil)
  if valid_604026 != nil:
    section.add "X-Amz-Credential", valid_604026
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_604027 = formData.getOrDefault("AutoScalingGroupName")
  valid_604027 = validateParameter(valid_604027, JString, required = true,
                                 default = nil)
  if valid_604027 != nil:
    section.add "AutoScalingGroupName", valid_604027
  var valid_604028 = formData.getOrDefault("NextToken")
  valid_604028 = validateParameter(valid_604028, JString, required = false,
                                 default = nil)
  if valid_604028 != nil:
    section.add "NextToken", valid_604028
  var valid_604029 = formData.getOrDefault("MaxRecords")
  valid_604029 = validateParameter(valid_604029, JInt, required = false, default = nil)
  if valid_604029 != nil:
    section.add "MaxRecords", valid_604029
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604030: Call_PostDescribeLoadBalancers_604015; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the load balancers for the specified Auto Scaling group.</p> <p>This operation describes only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DescribeLoadBalancerTargetGroups</a> instead.</p>
  ## 
  let valid = call_604030.validator(path, query, header, formData, body)
  let scheme = call_604030.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604030.url(scheme.get, call_604030.host, call_604030.base,
                         call_604030.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604030, url, valid)

proc call*(call_604031: Call_PostDescribeLoadBalancers_604015;
          AutoScalingGroupName: string; NextToken: string = "";
          Action: string = "DescribeLoadBalancers"; MaxRecords: int = 0;
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeLoadBalancers
  ## <p>Describes the load balancers for the specified Auto Scaling group.</p> <p>This operation describes only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DescribeLoadBalancerTargetGroups</a> instead.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   Version: string (required)
  var query_604032 = newJObject()
  var formData_604033 = newJObject()
  add(formData_604033, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_604033, "NextToken", newJString(NextToken))
  add(query_604032, "Action", newJString(Action))
  add(formData_604033, "MaxRecords", newJInt(MaxRecords))
  add(query_604032, "Version", newJString(Version))
  result = call_604031.call(nil, query_604032, nil, formData_604033, nil)

var postDescribeLoadBalancers* = Call_PostDescribeLoadBalancers_604015(
    name: "postDescribeLoadBalancers", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeLoadBalancers",
    validator: validate_PostDescribeLoadBalancers_604016, base: "/",
    url: url_PostDescribeLoadBalancers_604017,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeLoadBalancers_603997 = ref object of OpenApiRestCall_602466
proc url_GetDescribeLoadBalancers_603999(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeLoadBalancers_603998(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the load balancers for the specified Auto Scaling group.</p> <p>This operation describes only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DescribeLoadBalancerTargetGroups</a> instead.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_604000 = query.getOrDefault("MaxRecords")
  valid_604000 = validateParameter(valid_604000, JInt, required = false, default = nil)
  if valid_604000 != nil:
    section.add "MaxRecords", valid_604000
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_604001 = query.getOrDefault("AutoScalingGroupName")
  valid_604001 = validateParameter(valid_604001, JString, required = true,
                                 default = nil)
  if valid_604001 != nil:
    section.add "AutoScalingGroupName", valid_604001
  var valid_604002 = query.getOrDefault("NextToken")
  valid_604002 = validateParameter(valid_604002, JString, required = false,
                                 default = nil)
  if valid_604002 != nil:
    section.add "NextToken", valid_604002
  var valid_604003 = query.getOrDefault("Action")
  valid_604003 = validateParameter(valid_604003, JString, required = true,
                                 default = newJString("DescribeLoadBalancers"))
  if valid_604003 != nil:
    section.add "Action", valid_604003
  var valid_604004 = query.getOrDefault("Version")
  valid_604004 = validateParameter(valid_604004, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604004 != nil:
    section.add "Version", valid_604004
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604005 = header.getOrDefault("X-Amz-Date")
  valid_604005 = validateParameter(valid_604005, JString, required = false,
                                 default = nil)
  if valid_604005 != nil:
    section.add "X-Amz-Date", valid_604005
  var valid_604006 = header.getOrDefault("X-Amz-Security-Token")
  valid_604006 = validateParameter(valid_604006, JString, required = false,
                                 default = nil)
  if valid_604006 != nil:
    section.add "X-Amz-Security-Token", valid_604006
  var valid_604007 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604007 = validateParameter(valid_604007, JString, required = false,
                                 default = nil)
  if valid_604007 != nil:
    section.add "X-Amz-Content-Sha256", valid_604007
  var valid_604008 = header.getOrDefault("X-Amz-Algorithm")
  valid_604008 = validateParameter(valid_604008, JString, required = false,
                                 default = nil)
  if valid_604008 != nil:
    section.add "X-Amz-Algorithm", valid_604008
  var valid_604009 = header.getOrDefault("X-Amz-Signature")
  valid_604009 = validateParameter(valid_604009, JString, required = false,
                                 default = nil)
  if valid_604009 != nil:
    section.add "X-Amz-Signature", valid_604009
  var valid_604010 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604010 = validateParameter(valid_604010, JString, required = false,
                                 default = nil)
  if valid_604010 != nil:
    section.add "X-Amz-SignedHeaders", valid_604010
  var valid_604011 = header.getOrDefault("X-Amz-Credential")
  valid_604011 = validateParameter(valid_604011, JString, required = false,
                                 default = nil)
  if valid_604011 != nil:
    section.add "X-Amz-Credential", valid_604011
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604012: Call_GetDescribeLoadBalancers_603997; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the load balancers for the specified Auto Scaling group.</p> <p>This operation describes only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DescribeLoadBalancerTargetGroups</a> instead.</p>
  ## 
  let valid = call_604012.validator(path, query, header, formData, body)
  let scheme = call_604012.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604012.url(scheme.get, call_604012.host, call_604012.base,
                         call_604012.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604012, url, valid)

proc call*(call_604013: Call_GetDescribeLoadBalancers_603997;
          AutoScalingGroupName: string; MaxRecords: int = 0; NextToken: string = "";
          Action: string = "DescribeLoadBalancers"; Version: string = "2011-01-01"): Recallable =
  ## getDescribeLoadBalancers
  ## <p>Describes the load balancers for the specified Auto Scaling group.</p> <p>This operation describes only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DescribeLoadBalancerTargetGroups</a> instead.</p>
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604014 = newJObject()
  add(query_604014, "MaxRecords", newJInt(MaxRecords))
  add(query_604014, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_604014, "NextToken", newJString(NextToken))
  add(query_604014, "Action", newJString(Action))
  add(query_604014, "Version", newJString(Version))
  result = call_604013.call(nil, query_604014, nil, nil, nil)

var getDescribeLoadBalancers* = Call_GetDescribeLoadBalancers_603997(
    name: "getDescribeLoadBalancers", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeLoadBalancers",
    validator: validate_GetDescribeLoadBalancers_603998, base: "/",
    url: url_GetDescribeLoadBalancers_603999, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeMetricCollectionTypes_604049 = ref object of OpenApiRestCall_602466
proc url_PostDescribeMetricCollectionTypes_604051(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeMetricCollectionTypes_604050(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.</p> <p>The <code>GroupStandbyInstances</code> metric is not returned by default. You must explicitly request this metric when calling <a>EnableMetricsCollection</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604052 = query.getOrDefault("Action")
  valid_604052 = validateParameter(valid_604052, JString, required = true, default = newJString(
      "DescribeMetricCollectionTypes"))
  if valid_604052 != nil:
    section.add "Action", valid_604052
  var valid_604053 = query.getOrDefault("Version")
  valid_604053 = validateParameter(valid_604053, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604053 != nil:
    section.add "Version", valid_604053
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604054 = header.getOrDefault("X-Amz-Date")
  valid_604054 = validateParameter(valid_604054, JString, required = false,
                                 default = nil)
  if valid_604054 != nil:
    section.add "X-Amz-Date", valid_604054
  var valid_604055 = header.getOrDefault("X-Amz-Security-Token")
  valid_604055 = validateParameter(valid_604055, JString, required = false,
                                 default = nil)
  if valid_604055 != nil:
    section.add "X-Amz-Security-Token", valid_604055
  var valid_604056 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604056 = validateParameter(valid_604056, JString, required = false,
                                 default = nil)
  if valid_604056 != nil:
    section.add "X-Amz-Content-Sha256", valid_604056
  var valid_604057 = header.getOrDefault("X-Amz-Algorithm")
  valid_604057 = validateParameter(valid_604057, JString, required = false,
                                 default = nil)
  if valid_604057 != nil:
    section.add "X-Amz-Algorithm", valid_604057
  var valid_604058 = header.getOrDefault("X-Amz-Signature")
  valid_604058 = validateParameter(valid_604058, JString, required = false,
                                 default = nil)
  if valid_604058 != nil:
    section.add "X-Amz-Signature", valid_604058
  var valid_604059 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604059 = validateParameter(valid_604059, JString, required = false,
                                 default = nil)
  if valid_604059 != nil:
    section.add "X-Amz-SignedHeaders", valid_604059
  var valid_604060 = header.getOrDefault("X-Amz-Credential")
  valid_604060 = validateParameter(valid_604060, JString, required = false,
                                 default = nil)
  if valid_604060 != nil:
    section.add "X-Amz-Credential", valid_604060
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604061: Call_PostDescribeMetricCollectionTypes_604049;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.</p> <p>The <code>GroupStandbyInstances</code> metric is not returned by default. You must explicitly request this metric when calling <a>EnableMetricsCollection</a>.</p>
  ## 
  let valid = call_604061.validator(path, query, header, formData, body)
  let scheme = call_604061.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604061.url(scheme.get, call_604061.host, call_604061.base,
                         call_604061.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604061, url, valid)

proc call*(call_604062: Call_PostDescribeMetricCollectionTypes_604049;
          Action: string = "DescribeMetricCollectionTypes";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeMetricCollectionTypes
  ## <p>Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.</p> <p>The <code>GroupStandbyInstances</code> metric is not returned by default. You must explicitly request this metric when calling <a>EnableMetricsCollection</a>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604063 = newJObject()
  add(query_604063, "Action", newJString(Action))
  add(query_604063, "Version", newJString(Version))
  result = call_604062.call(nil, query_604063, nil, nil, nil)

var postDescribeMetricCollectionTypes* = Call_PostDescribeMetricCollectionTypes_604049(
    name: "postDescribeMetricCollectionTypes", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeMetricCollectionTypes",
    validator: validate_PostDescribeMetricCollectionTypes_604050, base: "/",
    url: url_PostDescribeMetricCollectionTypes_604051,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeMetricCollectionTypes_604034 = ref object of OpenApiRestCall_602466
proc url_GetDescribeMetricCollectionTypes_604036(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeMetricCollectionTypes_604035(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.</p> <p>The <code>GroupStandbyInstances</code> metric is not returned by default. You must explicitly request this metric when calling <a>EnableMetricsCollection</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604037 = query.getOrDefault("Action")
  valid_604037 = validateParameter(valid_604037, JString, required = true, default = newJString(
      "DescribeMetricCollectionTypes"))
  if valid_604037 != nil:
    section.add "Action", valid_604037
  var valid_604038 = query.getOrDefault("Version")
  valid_604038 = validateParameter(valid_604038, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604038 != nil:
    section.add "Version", valid_604038
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604039 = header.getOrDefault("X-Amz-Date")
  valid_604039 = validateParameter(valid_604039, JString, required = false,
                                 default = nil)
  if valid_604039 != nil:
    section.add "X-Amz-Date", valid_604039
  var valid_604040 = header.getOrDefault("X-Amz-Security-Token")
  valid_604040 = validateParameter(valid_604040, JString, required = false,
                                 default = nil)
  if valid_604040 != nil:
    section.add "X-Amz-Security-Token", valid_604040
  var valid_604041 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604041 = validateParameter(valid_604041, JString, required = false,
                                 default = nil)
  if valid_604041 != nil:
    section.add "X-Amz-Content-Sha256", valid_604041
  var valid_604042 = header.getOrDefault("X-Amz-Algorithm")
  valid_604042 = validateParameter(valid_604042, JString, required = false,
                                 default = nil)
  if valid_604042 != nil:
    section.add "X-Amz-Algorithm", valid_604042
  var valid_604043 = header.getOrDefault("X-Amz-Signature")
  valid_604043 = validateParameter(valid_604043, JString, required = false,
                                 default = nil)
  if valid_604043 != nil:
    section.add "X-Amz-Signature", valid_604043
  var valid_604044 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604044 = validateParameter(valid_604044, JString, required = false,
                                 default = nil)
  if valid_604044 != nil:
    section.add "X-Amz-SignedHeaders", valid_604044
  var valid_604045 = header.getOrDefault("X-Amz-Credential")
  valid_604045 = validateParameter(valid_604045, JString, required = false,
                                 default = nil)
  if valid_604045 != nil:
    section.add "X-Amz-Credential", valid_604045
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604046: Call_GetDescribeMetricCollectionTypes_604034;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.</p> <p>The <code>GroupStandbyInstances</code> metric is not returned by default. You must explicitly request this metric when calling <a>EnableMetricsCollection</a>.</p>
  ## 
  let valid = call_604046.validator(path, query, header, formData, body)
  let scheme = call_604046.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604046.url(scheme.get, call_604046.host, call_604046.base,
                         call_604046.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604046, url, valid)

proc call*(call_604047: Call_GetDescribeMetricCollectionTypes_604034;
          Action: string = "DescribeMetricCollectionTypes";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeMetricCollectionTypes
  ## <p>Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.</p> <p>The <code>GroupStandbyInstances</code> metric is not returned by default. You must explicitly request this metric when calling <a>EnableMetricsCollection</a>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604048 = newJObject()
  add(query_604048, "Action", newJString(Action))
  add(query_604048, "Version", newJString(Version))
  result = call_604047.call(nil, query_604048, nil, nil, nil)

var getDescribeMetricCollectionTypes* = Call_GetDescribeMetricCollectionTypes_604034(
    name: "getDescribeMetricCollectionTypes", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeMetricCollectionTypes",
    validator: validate_GetDescribeMetricCollectionTypes_604035, base: "/",
    url: url_GetDescribeMetricCollectionTypes_604036,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeNotificationConfigurations_604082 = ref object of OpenApiRestCall_602466
proc url_PostDescribeNotificationConfigurations_604084(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeNotificationConfigurations_604083(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the notification actions associated with the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604085 = query.getOrDefault("Action")
  valid_604085 = validateParameter(valid_604085, JString, required = true, default = newJString(
      "DescribeNotificationConfigurations"))
  if valid_604085 != nil:
    section.add "Action", valid_604085
  var valid_604086 = query.getOrDefault("Version")
  valid_604086 = validateParameter(valid_604086, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604086 != nil:
    section.add "Version", valid_604086
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604087 = header.getOrDefault("X-Amz-Date")
  valid_604087 = validateParameter(valid_604087, JString, required = false,
                                 default = nil)
  if valid_604087 != nil:
    section.add "X-Amz-Date", valid_604087
  var valid_604088 = header.getOrDefault("X-Amz-Security-Token")
  valid_604088 = validateParameter(valid_604088, JString, required = false,
                                 default = nil)
  if valid_604088 != nil:
    section.add "X-Amz-Security-Token", valid_604088
  var valid_604089 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604089 = validateParameter(valid_604089, JString, required = false,
                                 default = nil)
  if valid_604089 != nil:
    section.add "X-Amz-Content-Sha256", valid_604089
  var valid_604090 = header.getOrDefault("X-Amz-Algorithm")
  valid_604090 = validateParameter(valid_604090, JString, required = false,
                                 default = nil)
  if valid_604090 != nil:
    section.add "X-Amz-Algorithm", valid_604090
  var valid_604091 = header.getOrDefault("X-Amz-Signature")
  valid_604091 = validateParameter(valid_604091, JString, required = false,
                                 default = nil)
  if valid_604091 != nil:
    section.add "X-Amz-Signature", valid_604091
  var valid_604092 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604092 = validateParameter(valid_604092, JString, required = false,
                                 default = nil)
  if valid_604092 != nil:
    section.add "X-Amz-SignedHeaders", valid_604092
  var valid_604093 = header.getOrDefault("X-Amz-Credential")
  valid_604093 = validateParameter(valid_604093, JString, required = false,
                                 default = nil)
  if valid_604093 != nil:
    section.add "X-Amz-Credential", valid_604093
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupNames: JArray
  ##                        : The name of the Auto Scaling group.
  section = newJObject()
  var valid_604094 = formData.getOrDefault("NextToken")
  valid_604094 = validateParameter(valid_604094, JString, required = false,
                                 default = nil)
  if valid_604094 != nil:
    section.add "NextToken", valid_604094
  var valid_604095 = formData.getOrDefault("MaxRecords")
  valid_604095 = validateParameter(valid_604095, JInt, required = false, default = nil)
  if valid_604095 != nil:
    section.add "MaxRecords", valid_604095
  var valid_604096 = formData.getOrDefault("AutoScalingGroupNames")
  valid_604096 = validateParameter(valid_604096, JArray, required = false,
                                 default = nil)
  if valid_604096 != nil:
    section.add "AutoScalingGroupNames", valid_604096
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604097: Call_PostDescribeNotificationConfigurations_604082;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the notification actions associated with the specified Auto Scaling group.
  ## 
  let valid = call_604097.validator(path, query, header, formData, body)
  let scheme = call_604097.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604097.url(scheme.get, call_604097.host, call_604097.base,
                         call_604097.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604097, url, valid)

proc call*(call_604098: Call_PostDescribeNotificationConfigurations_604082;
          NextToken: string = "";
          Action: string = "DescribeNotificationConfigurations";
          MaxRecords: int = 0; Version: string = "2011-01-01";
          AutoScalingGroupNames: JsonNode = nil): Recallable =
  ## postDescribeNotificationConfigurations
  ## Describes the notification actions associated with the specified Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   Version: string (required)
  ##   AutoScalingGroupNames: JArray
  ##                        : The name of the Auto Scaling group.
  var query_604099 = newJObject()
  var formData_604100 = newJObject()
  add(formData_604100, "NextToken", newJString(NextToken))
  add(query_604099, "Action", newJString(Action))
  add(formData_604100, "MaxRecords", newJInt(MaxRecords))
  add(query_604099, "Version", newJString(Version))
  if AutoScalingGroupNames != nil:
    formData_604100.add "AutoScalingGroupNames", AutoScalingGroupNames
  result = call_604098.call(nil, query_604099, nil, formData_604100, nil)

var postDescribeNotificationConfigurations* = Call_PostDescribeNotificationConfigurations_604082(
    name: "postDescribeNotificationConfigurations", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeNotificationConfigurations",
    validator: validate_PostDescribeNotificationConfigurations_604083, base: "/",
    url: url_PostDescribeNotificationConfigurations_604084,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeNotificationConfigurations_604064 = ref object of OpenApiRestCall_602466
proc url_GetDescribeNotificationConfigurations_604066(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeNotificationConfigurations_604065(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the notification actions associated with the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: JString (required)
  ##   AutoScalingGroupNames: JArray
  ##                        : The name of the Auto Scaling group.
  ##   Version: JString (required)
  section = newJObject()
  var valid_604067 = query.getOrDefault("MaxRecords")
  valid_604067 = validateParameter(valid_604067, JInt, required = false, default = nil)
  if valid_604067 != nil:
    section.add "MaxRecords", valid_604067
  var valid_604068 = query.getOrDefault("NextToken")
  valid_604068 = validateParameter(valid_604068, JString, required = false,
                                 default = nil)
  if valid_604068 != nil:
    section.add "NextToken", valid_604068
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604069 = query.getOrDefault("Action")
  valid_604069 = validateParameter(valid_604069, JString, required = true, default = newJString(
      "DescribeNotificationConfigurations"))
  if valid_604069 != nil:
    section.add "Action", valid_604069
  var valid_604070 = query.getOrDefault("AutoScalingGroupNames")
  valid_604070 = validateParameter(valid_604070, JArray, required = false,
                                 default = nil)
  if valid_604070 != nil:
    section.add "AutoScalingGroupNames", valid_604070
  var valid_604071 = query.getOrDefault("Version")
  valid_604071 = validateParameter(valid_604071, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604071 != nil:
    section.add "Version", valid_604071
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604072 = header.getOrDefault("X-Amz-Date")
  valid_604072 = validateParameter(valid_604072, JString, required = false,
                                 default = nil)
  if valid_604072 != nil:
    section.add "X-Amz-Date", valid_604072
  var valid_604073 = header.getOrDefault("X-Amz-Security-Token")
  valid_604073 = validateParameter(valid_604073, JString, required = false,
                                 default = nil)
  if valid_604073 != nil:
    section.add "X-Amz-Security-Token", valid_604073
  var valid_604074 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604074 = validateParameter(valid_604074, JString, required = false,
                                 default = nil)
  if valid_604074 != nil:
    section.add "X-Amz-Content-Sha256", valid_604074
  var valid_604075 = header.getOrDefault("X-Amz-Algorithm")
  valid_604075 = validateParameter(valid_604075, JString, required = false,
                                 default = nil)
  if valid_604075 != nil:
    section.add "X-Amz-Algorithm", valid_604075
  var valid_604076 = header.getOrDefault("X-Amz-Signature")
  valid_604076 = validateParameter(valid_604076, JString, required = false,
                                 default = nil)
  if valid_604076 != nil:
    section.add "X-Amz-Signature", valid_604076
  var valid_604077 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604077 = validateParameter(valid_604077, JString, required = false,
                                 default = nil)
  if valid_604077 != nil:
    section.add "X-Amz-SignedHeaders", valid_604077
  var valid_604078 = header.getOrDefault("X-Amz-Credential")
  valid_604078 = validateParameter(valid_604078, JString, required = false,
                                 default = nil)
  if valid_604078 != nil:
    section.add "X-Amz-Credential", valid_604078
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604079: Call_GetDescribeNotificationConfigurations_604064;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the notification actions associated with the specified Auto Scaling group.
  ## 
  let valid = call_604079.validator(path, query, header, formData, body)
  let scheme = call_604079.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604079.url(scheme.get, call_604079.host, call_604079.base,
                         call_604079.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604079, url, valid)

proc call*(call_604080: Call_GetDescribeNotificationConfigurations_604064;
          MaxRecords: int = 0; NextToken: string = "";
          Action: string = "DescribeNotificationConfigurations";
          AutoScalingGroupNames: JsonNode = nil; Version: string = "2011-01-01"): Recallable =
  ## getDescribeNotificationConfigurations
  ## Describes the notification actions associated with the specified Auto Scaling group.
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   AutoScalingGroupNames: JArray
  ##                        : The name of the Auto Scaling group.
  ##   Version: string (required)
  var query_604081 = newJObject()
  add(query_604081, "MaxRecords", newJInt(MaxRecords))
  add(query_604081, "NextToken", newJString(NextToken))
  add(query_604081, "Action", newJString(Action))
  if AutoScalingGroupNames != nil:
    query_604081.add "AutoScalingGroupNames", AutoScalingGroupNames
  add(query_604081, "Version", newJString(Version))
  result = call_604080.call(nil, query_604081, nil, nil, nil)

var getDescribeNotificationConfigurations* = Call_GetDescribeNotificationConfigurations_604064(
    name: "getDescribeNotificationConfigurations", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeNotificationConfigurations",
    validator: validate_GetDescribeNotificationConfigurations_604065, base: "/",
    url: url_GetDescribeNotificationConfigurations_604066,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribePolicies_604121 = ref object of OpenApiRestCall_602466
proc url_PostDescribePolicies_604123(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribePolicies_604122(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the policies for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604124 = query.getOrDefault("Action")
  valid_604124 = validateParameter(valid_604124, JString, required = true,
                                 default = newJString("DescribePolicies"))
  if valid_604124 != nil:
    section.add "Action", valid_604124
  var valid_604125 = query.getOrDefault("Version")
  valid_604125 = validateParameter(valid_604125, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604125 != nil:
    section.add "Version", valid_604125
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604126 = header.getOrDefault("X-Amz-Date")
  valid_604126 = validateParameter(valid_604126, JString, required = false,
                                 default = nil)
  if valid_604126 != nil:
    section.add "X-Amz-Date", valid_604126
  var valid_604127 = header.getOrDefault("X-Amz-Security-Token")
  valid_604127 = validateParameter(valid_604127, JString, required = false,
                                 default = nil)
  if valid_604127 != nil:
    section.add "X-Amz-Security-Token", valid_604127
  var valid_604128 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604128 = validateParameter(valid_604128, JString, required = false,
                                 default = nil)
  if valid_604128 != nil:
    section.add "X-Amz-Content-Sha256", valid_604128
  var valid_604129 = header.getOrDefault("X-Amz-Algorithm")
  valid_604129 = validateParameter(valid_604129, JString, required = false,
                                 default = nil)
  if valid_604129 != nil:
    section.add "X-Amz-Algorithm", valid_604129
  var valid_604130 = header.getOrDefault("X-Amz-Signature")
  valid_604130 = validateParameter(valid_604130, JString, required = false,
                                 default = nil)
  if valid_604130 != nil:
    section.add "X-Amz-Signature", valid_604130
  var valid_604131 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604131 = validateParameter(valid_604131, JString, required = false,
                                 default = nil)
  if valid_604131 != nil:
    section.add "X-Amz-SignedHeaders", valid_604131
  var valid_604132 = header.getOrDefault("X-Amz-Credential")
  valid_604132 = validateParameter(valid_604132, JString, required = false,
                                 default = nil)
  if valid_604132 != nil:
    section.add "X-Amz-Credential", valid_604132
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   PolicyNames: JArray
  ##              : The names of one or more policies. If you omit this parameter, all policies are described. If a group name is provided, the results are limited to that group. This list is limited to 50 items. If you specify an unknown policy name, it is ignored with no error.
  ##   PolicyTypes: JArray
  ##              : One or more policy types. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>.
  ##   MaxRecords: JInt
  ##             : The maximum number of items to be returned with each call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  section = newJObject()
  var valid_604133 = formData.getOrDefault("AutoScalingGroupName")
  valid_604133 = validateParameter(valid_604133, JString, required = false,
                                 default = nil)
  if valid_604133 != nil:
    section.add "AutoScalingGroupName", valid_604133
  var valid_604134 = formData.getOrDefault("NextToken")
  valid_604134 = validateParameter(valid_604134, JString, required = false,
                                 default = nil)
  if valid_604134 != nil:
    section.add "NextToken", valid_604134
  var valid_604135 = formData.getOrDefault("PolicyNames")
  valid_604135 = validateParameter(valid_604135, JArray, required = false,
                                 default = nil)
  if valid_604135 != nil:
    section.add "PolicyNames", valid_604135
  var valid_604136 = formData.getOrDefault("PolicyTypes")
  valid_604136 = validateParameter(valid_604136, JArray, required = false,
                                 default = nil)
  if valid_604136 != nil:
    section.add "PolicyTypes", valid_604136
  var valid_604137 = formData.getOrDefault("MaxRecords")
  valid_604137 = validateParameter(valid_604137, JInt, required = false, default = nil)
  if valid_604137 != nil:
    section.add "MaxRecords", valid_604137
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604138: Call_PostDescribePolicies_604121; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the policies for the specified Auto Scaling group.
  ## 
  let valid = call_604138.validator(path, query, header, formData, body)
  let scheme = call_604138.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604138.url(scheme.get, call_604138.host, call_604138.base,
                         call_604138.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604138, url, valid)

proc call*(call_604139: Call_PostDescribePolicies_604121;
          AutoScalingGroupName: string = ""; NextToken: string = "";
          PolicyNames: JsonNode = nil; Action: string = "DescribePolicies";
          PolicyTypes: JsonNode = nil; MaxRecords: int = 0;
          Version: string = "2011-01-01"): Recallable =
  ## postDescribePolicies
  ## Describes the policies for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   PolicyNames: JArray
  ##              : The names of one or more policies. If you omit this parameter, all policies are described. If a group name is provided, the results are limited to that group. This list is limited to 50 items. If you specify an unknown policy name, it is ignored with no error.
  ##   Action: string (required)
  ##   PolicyTypes: JArray
  ##              : One or more policy types. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>.
  ##   MaxRecords: int
  ##             : The maximum number of items to be returned with each call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   Version: string (required)
  var query_604140 = newJObject()
  var formData_604141 = newJObject()
  add(formData_604141, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_604141, "NextToken", newJString(NextToken))
  if PolicyNames != nil:
    formData_604141.add "PolicyNames", PolicyNames
  add(query_604140, "Action", newJString(Action))
  if PolicyTypes != nil:
    formData_604141.add "PolicyTypes", PolicyTypes
  add(formData_604141, "MaxRecords", newJInt(MaxRecords))
  add(query_604140, "Version", newJString(Version))
  result = call_604139.call(nil, query_604140, nil, formData_604141, nil)

var postDescribePolicies* = Call_PostDescribePolicies_604121(
    name: "postDescribePolicies", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribePolicies",
    validator: validate_PostDescribePolicies_604122, base: "/",
    url: url_PostDescribePolicies_604123, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribePolicies_604101 = ref object of OpenApiRestCall_602466
proc url_GetDescribePolicies_604103(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribePolicies_604102(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Describes the policies for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of items to be returned with each call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: JString (required)
  ##   PolicyNames: JArray
  ##              : The names of one or more policies. If you omit this parameter, all policies are described. If a group name is provided, the results are limited to that group. This list is limited to 50 items. If you specify an unknown policy name, it is ignored with no error.
  ##   Version: JString (required)
  ##   PolicyTypes: JArray
  ##              : One or more policy types. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>.
  section = newJObject()
  var valid_604104 = query.getOrDefault("MaxRecords")
  valid_604104 = validateParameter(valid_604104, JInt, required = false, default = nil)
  if valid_604104 != nil:
    section.add "MaxRecords", valid_604104
  var valid_604105 = query.getOrDefault("AutoScalingGroupName")
  valid_604105 = validateParameter(valid_604105, JString, required = false,
                                 default = nil)
  if valid_604105 != nil:
    section.add "AutoScalingGroupName", valid_604105
  var valid_604106 = query.getOrDefault("NextToken")
  valid_604106 = validateParameter(valid_604106, JString, required = false,
                                 default = nil)
  if valid_604106 != nil:
    section.add "NextToken", valid_604106
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604107 = query.getOrDefault("Action")
  valid_604107 = validateParameter(valid_604107, JString, required = true,
                                 default = newJString("DescribePolicies"))
  if valid_604107 != nil:
    section.add "Action", valid_604107
  var valid_604108 = query.getOrDefault("PolicyNames")
  valid_604108 = validateParameter(valid_604108, JArray, required = false,
                                 default = nil)
  if valid_604108 != nil:
    section.add "PolicyNames", valid_604108
  var valid_604109 = query.getOrDefault("Version")
  valid_604109 = validateParameter(valid_604109, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604109 != nil:
    section.add "Version", valid_604109
  var valid_604110 = query.getOrDefault("PolicyTypes")
  valid_604110 = validateParameter(valid_604110, JArray, required = false,
                                 default = nil)
  if valid_604110 != nil:
    section.add "PolicyTypes", valid_604110
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604111 = header.getOrDefault("X-Amz-Date")
  valid_604111 = validateParameter(valid_604111, JString, required = false,
                                 default = nil)
  if valid_604111 != nil:
    section.add "X-Amz-Date", valid_604111
  var valid_604112 = header.getOrDefault("X-Amz-Security-Token")
  valid_604112 = validateParameter(valid_604112, JString, required = false,
                                 default = nil)
  if valid_604112 != nil:
    section.add "X-Amz-Security-Token", valid_604112
  var valid_604113 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604113 = validateParameter(valid_604113, JString, required = false,
                                 default = nil)
  if valid_604113 != nil:
    section.add "X-Amz-Content-Sha256", valid_604113
  var valid_604114 = header.getOrDefault("X-Amz-Algorithm")
  valid_604114 = validateParameter(valid_604114, JString, required = false,
                                 default = nil)
  if valid_604114 != nil:
    section.add "X-Amz-Algorithm", valid_604114
  var valid_604115 = header.getOrDefault("X-Amz-Signature")
  valid_604115 = validateParameter(valid_604115, JString, required = false,
                                 default = nil)
  if valid_604115 != nil:
    section.add "X-Amz-Signature", valid_604115
  var valid_604116 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604116 = validateParameter(valid_604116, JString, required = false,
                                 default = nil)
  if valid_604116 != nil:
    section.add "X-Amz-SignedHeaders", valid_604116
  var valid_604117 = header.getOrDefault("X-Amz-Credential")
  valid_604117 = validateParameter(valid_604117, JString, required = false,
                                 default = nil)
  if valid_604117 != nil:
    section.add "X-Amz-Credential", valid_604117
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604118: Call_GetDescribePolicies_604101; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the policies for the specified Auto Scaling group.
  ## 
  let valid = call_604118.validator(path, query, header, formData, body)
  let scheme = call_604118.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604118.url(scheme.get, call_604118.host, call_604118.base,
                         call_604118.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604118, url, valid)

proc call*(call_604119: Call_GetDescribePolicies_604101; MaxRecords: int = 0;
          AutoScalingGroupName: string = ""; NextToken: string = "";
          Action: string = "DescribePolicies"; PolicyNames: JsonNode = nil;
          Version: string = "2011-01-01"; PolicyTypes: JsonNode = nil): Recallable =
  ## getDescribePolicies
  ## Describes the policies for the specified Auto Scaling group.
  ##   MaxRecords: int
  ##             : The maximum number of items to be returned with each call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   PolicyNames: JArray
  ##              : The names of one or more policies. If you omit this parameter, all policies are described. If a group name is provided, the results are limited to that group. This list is limited to 50 items. If you specify an unknown policy name, it is ignored with no error.
  ##   Version: string (required)
  ##   PolicyTypes: JArray
  ##              : One or more policy types. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>.
  var query_604120 = newJObject()
  add(query_604120, "MaxRecords", newJInt(MaxRecords))
  add(query_604120, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_604120, "NextToken", newJString(NextToken))
  add(query_604120, "Action", newJString(Action))
  if PolicyNames != nil:
    query_604120.add "PolicyNames", PolicyNames
  add(query_604120, "Version", newJString(Version))
  if PolicyTypes != nil:
    query_604120.add "PolicyTypes", PolicyTypes
  result = call_604119.call(nil, query_604120, nil, nil, nil)

var getDescribePolicies* = Call_GetDescribePolicies_604101(
    name: "getDescribePolicies", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribePolicies",
    validator: validate_GetDescribePolicies_604102, base: "/",
    url: url_GetDescribePolicies_604103, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeScalingActivities_604161 = ref object of OpenApiRestCall_602466
proc url_PostDescribeScalingActivities_604163(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeScalingActivities_604162(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more scaling activities for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604164 = query.getOrDefault("Action")
  valid_604164 = validateParameter(valid_604164, JString, required = true, default = newJString(
      "DescribeScalingActivities"))
  if valid_604164 != nil:
    section.add "Action", valid_604164
  var valid_604165 = query.getOrDefault("Version")
  valid_604165 = validateParameter(valid_604165, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604165 != nil:
    section.add "Version", valid_604165
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604166 = header.getOrDefault("X-Amz-Date")
  valid_604166 = validateParameter(valid_604166, JString, required = false,
                                 default = nil)
  if valid_604166 != nil:
    section.add "X-Amz-Date", valid_604166
  var valid_604167 = header.getOrDefault("X-Amz-Security-Token")
  valid_604167 = validateParameter(valid_604167, JString, required = false,
                                 default = nil)
  if valid_604167 != nil:
    section.add "X-Amz-Security-Token", valid_604167
  var valid_604168 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604168 = validateParameter(valid_604168, JString, required = false,
                                 default = nil)
  if valid_604168 != nil:
    section.add "X-Amz-Content-Sha256", valid_604168
  var valid_604169 = header.getOrDefault("X-Amz-Algorithm")
  valid_604169 = validateParameter(valid_604169, JString, required = false,
                                 default = nil)
  if valid_604169 != nil:
    section.add "X-Amz-Algorithm", valid_604169
  var valid_604170 = header.getOrDefault("X-Amz-Signature")
  valid_604170 = validateParameter(valid_604170, JString, required = false,
                                 default = nil)
  if valid_604170 != nil:
    section.add "X-Amz-Signature", valid_604170
  var valid_604171 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604171 = validateParameter(valid_604171, JString, required = false,
                                 default = nil)
  if valid_604171 != nil:
    section.add "X-Amz-SignedHeaders", valid_604171
  var valid_604172 = header.getOrDefault("X-Amz-Credential")
  valid_604172 = validateParameter(valid_604172, JString, required = false,
                                 default = nil)
  if valid_604172 != nil:
    section.add "X-Amz-Credential", valid_604172
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   ActivityIds: JArray
  ##              : The activity IDs of the desired scaling activities. You can specify up to 50 IDs. If you omit this parameter, all activities for the past six weeks are described. If unknown activities are requested, they are ignored with no error. If you specify an Auto Scaling group, the results are limited to that group.
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  section = newJObject()
  var valid_604173 = formData.getOrDefault("AutoScalingGroupName")
  valid_604173 = validateParameter(valid_604173, JString, required = false,
                                 default = nil)
  if valid_604173 != nil:
    section.add "AutoScalingGroupName", valid_604173
  var valid_604174 = formData.getOrDefault("NextToken")
  valid_604174 = validateParameter(valid_604174, JString, required = false,
                                 default = nil)
  if valid_604174 != nil:
    section.add "NextToken", valid_604174
  var valid_604175 = formData.getOrDefault("ActivityIds")
  valid_604175 = validateParameter(valid_604175, JArray, required = false,
                                 default = nil)
  if valid_604175 != nil:
    section.add "ActivityIds", valid_604175
  var valid_604176 = formData.getOrDefault("MaxRecords")
  valid_604176 = validateParameter(valid_604176, JInt, required = false, default = nil)
  if valid_604176 != nil:
    section.add "MaxRecords", valid_604176
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604177: Call_PostDescribeScalingActivities_604161; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes one or more scaling activities for the specified Auto Scaling group.
  ## 
  let valid = call_604177.validator(path, query, header, formData, body)
  let scheme = call_604177.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604177.url(scheme.get, call_604177.host, call_604177.base,
                         call_604177.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604177, url, valid)

proc call*(call_604178: Call_PostDescribeScalingActivities_604161;
          AutoScalingGroupName: string = ""; NextToken: string = "";
          ActivityIds: JsonNode = nil; Action: string = "DescribeScalingActivities";
          MaxRecords: int = 0; Version: string = "2011-01-01"): Recallable =
  ## postDescribeScalingActivities
  ## Describes one or more scaling activities for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   ActivityIds: JArray
  ##              : The activity IDs of the desired scaling activities. You can specify up to 50 IDs. If you omit this parameter, all activities for the past six weeks are described. If unknown activities are requested, they are ignored with no error. If you specify an Auto Scaling group, the results are limited to that group.
  ##   Action: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   Version: string (required)
  var query_604179 = newJObject()
  var formData_604180 = newJObject()
  add(formData_604180, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_604180, "NextToken", newJString(NextToken))
  if ActivityIds != nil:
    formData_604180.add "ActivityIds", ActivityIds
  add(query_604179, "Action", newJString(Action))
  add(formData_604180, "MaxRecords", newJInt(MaxRecords))
  add(query_604179, "Version", newJString(Version))
  result = call_604178.call(nil, query_604179, nil, formData_604180, nil)

var postDescribeScalingActivities* = Call_PostDescribeScalingActivities_604161(
    name: "postDescribeScalingActivities", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeScalingActivities",
    validator: validate_PostDescribeScalingActivities_604162, base: "/",
    url: url_PostDescribeScalingActivities_604163,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeScalingActivities_604142 = ref object of OpenApiRestCall_602466
proc url_GetDescribeScalingActivities_604144(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeScalingActivities_604143(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more scaling activities for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: JString (required)
  ##   ActivityIds: JArray
  ##              : The activity IDs of the desired scaling activities. You can specify up to 50 IDs. If you omit this parameter, all activities for the past six weeks are described. If unknown activities are requested, they are ignored with no error. If you specify an Auto Scaling group, the results are limited to that group.
  ##   Version: JString (required)
  section = newJObject()
  var valid_604145 = query.getOrDefault("MaxRecords")
  valid_604145 = validateParameter(valid_604145, JInt, required = false, default = nil)
  if valid_604145 != nil:
    section.add "MaxRecords", valid_604145
  var valid_604146 = query.getOrDefault("AutoScalingGroupName")
  valid_604146 = validateParameter(valid_604146, JString, required = false,
                                 default = nil)
  if valid_604146 != nil:
    section.add "AutoScalingGroupName", valid_604146
  var valid_604147 = query.getOrDefault("NextToken")
  valid_604147 = validateParameter(valid_604147, JString, required = false,
                                 default = nil)
  if valid_604147 != nil:
    section.add "NextToken", valid_604147
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604148 = query.getOrDefault("Action")
  valid_604148 = validateParameter(valid_604148, JString, required = true, default = newJString(
      "DescribeScalingActivities"))
  if valid_604148 != nil:
    section.add "Action", valid_604148
  var valid_604149 = query.getOrDefault("ActivityIds")
  valid_604149 = validateParameter(valid_604149, JArray, required = false,
                                 default = nil)
  if valid_604149 != nil:
    section.add "ActivityIds", valid_604149
  var valid_604150 = query.getOrDefault("Version")
  valid_604150 = validateParameter(valid_604150, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604150 != nil:
    section.add "Version", valid_604150
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604151 = header.getOrDefault("X-Amz-Date")
  valid_604151 = validateParameter(valid_604151, JString, required = false,
                                 default = nil)
  if valid_604151 != nil:
    section.add "X-Amz-Date", valid_604151
  var valid_604152 = header.getOrDefault("X-Amz-Security-Token")
  valid_604152 = validateParameter(valid_604152, JString, required = false,
                                 default = nil)
  if valid_604152 != nil:
    section.add "X-Amz-Security-Token", valid_604152
  var valid_604153 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604153 = validateParameter(valid_604153, JString, required = false,
                                 default = nil)
  if valid_604153 != nil:
    section.add "X-Amz-Content-Sha256", valid_604153
  var valid_604154 = header.getOrDefault("X-Amz-Algorithm")
  valid_604154 = validateParameter(valid_604154, JString, required = false,
                                 default = nil)
  if valid_604154 != nil:
    section.add "X-Amz-Algorithm", valid_604154
  var valid_604155 = header.getOrDefault("X-Amz-Signature")
  valid_604155 = validateParameter(valid_604155, JString, required = false,
                                 default = nil)
  if valid_604155 != nil:
    section.add "X-Amz-Signature", valid_604155
  var valid_604156 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604156 = validateParameter(valid_604156, JString, required = false,
                                 default = nil)
  if valid_604156 != nil:
    section.add "X-Amz-SignedHeaders", valid_604156
  var valid_604157 = header.getOrDefault("X-Amz-Credential")
  valid_604157 = validateParameter(valid_604157, JString, required = false,
                                 default = nil)
  if valid_604157 != nil:
    section.add "X-Amz-Credential", valid_604157
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604158: Call_GetDescribeScalingActivities_604142; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes one or more scaling activities for the specified Auto Scaling group.
  ## 
  let valid = call_604158.validator(path, query, header, formData, body)
  let scheme = call_604158.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604158.url(scheme.get, call_604158.host, call_604158.base,
                         call_604158.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604158, url, valid)

proc call*(call_604159: Call_GetDescribeScalingActivities_604142;
          MaxRecords: int = 0; AutoScalingGroupName: string = "";
          NextToken: string = ""; Action: string = "DescribeScalingActivities";
          ActivityIds: JsonNode = nil; Version: string = "2011-01-01"): Recallable =
  ## getDescribeScalingActivities
  ## Describes one or more scaling activities for the specified Auto Scaling group.
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   ActivityIds: JArray
  ##              : The activity IDs of the desired scaling activities. You can specify up to 50 IDs. If you omit this parameter, all activities for the past six weeks are described. If unknown activities are requested, they are ignored with no error. If you specify an Auto Scaling group, the results are limited to that group.
  ##   Version: string (required)
  var query_604160 = newJObject()
  add(query_604160, "MaxRecords", newJInt(MaxRecords))
  add(query_604160, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_604160, "NextToken", newJString(NextToken))
  add(query_604160, "Action", newJString(Action))
  if ActivityIds != nil:
    query_604160.add "ActivityIds", ActivityIds
  add(query_604160, "Version", newJString(Version))
  result = call_604159.call(nil, query_604160, nil, nil, nil)

var getDescribeScalingActivities* = Call_GetDescribeScalingActivities_604142(
    name: "getDescribeScalingActivities", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeScalingActivities",
    validator: validate_GetDescribeScalingActivities_604143, base: "/",
    url: url_GetDescribeScalingActivities_604144,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeScalingProcessTypes_604196 = ref object of OpenApiRestCall_602466
proc url_PostDescribeScalingProcessTypes_604198(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeScalingProcessTypes_604197(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the scaling process types for use with <a>ResumeProcesses</a> and <a>SuspendProcesses</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604199 = query.getOrDefault("Action")
  valid_604199 = validateParameter(valid_604199, JString, required = true, default = newJString(
      "DescribeScalingProcessTypes"))
  if valid_604199 != nil:
    section.add "Action", valid_604199
  var valid_604200 = query.getOrDefault("Version")
  valid_604200 = validateParameter(valid_604200, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604200 != nil:
    section.add "Version", valid_604200
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604201 = header.getOrDefault("X-Amz-Date")
  valid_604201 = validateParameter(valid_604201, JString, required = false,
                                 default = nil)
  if valid_604201 != nil:
    section.add "X-Amz-Date", valid_604201
  var valid_604202 = header.getOrDefault("X-Amz-Security-Token")
  valid_604202 = validateParameter(valid_604202, JString, required = false,
                                 default = nil)
  if valid_604202 != nil:
    section.add "X-Amz-Security-Token", valid_604202
  var valid_604203 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604203 = validateParameter(valid_604203, JString, required = false,
                                 default = nil)
  if valid_604203 != nil:
    section.add "X-Amz-Content-Sha256", valid_604203
  var valid_604204 = header.getOrDefault("X-Amz-Algorithm")
  valid_604204 = validateParameter(valid_604204, JString, required = false,
                                 default = nil)
  if valid_604204 != nil:
    section.add "X-Amz-Algorithm", valid_604204
  var valid_604205 = header.getOrDefault("X-Amz-Signature")
  valid_604205 = validateParameter(valid_604205, JString, required = false,
                                 default = nil)
  if valid_604205 != nil:
    section.add "X-Amz-Signature", valid_604205
  var valid_604206 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604206 = validateParameter(valid_604206, JString, required = false,
                                 default = nil)
  if valid_604206 != nil:
    section.add "X-Amz-SignedHeaders", valid_604206
  var valid_604207 = header.getOrDefault("X-Amz-Credential")
  valid_604207 = validateParameter(valid_604207, JString, required = false,
                                 default = nil)
  if valid_604207 != nil:
    section.add "X-Amz-Credential", valid_604207
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604208: Call_PostDescribeScalingProcessTypes_604196;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the scaling process types for use with <a>ResumeProcesses</a> and <a>SuspendProcesses</a>.
  ## 
  let valid = call_604208.validator(path, query, header, formData, body)
  let scheme = call_604208.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604208.url(scheme.get, call_604208.host, call_604208.base,
                         call_604208.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604208, url, valid)

proc call*(call_604209: Call_PostDescribeScalingProcessTypes_604196;
          Action: string = "DescribeScalingProcessTypes";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeScalingProcessTypes
  ## Describes the scaling process types for use with <a>ResumeProcesses</a> and <a>SuspendProcesses</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604210 = newJObject()
  add(query_604210, "Action", newJString(Action))
  add(query_604210, "Version", newJString(Version))
  result = call_604209.call(nil, query_604210, nil, nil, nil)

var postDescribeScalingProcessTypes* = Call_PostDescribeScalingProcessTypes_604196(
    name: "postDescribeScalingProcessTypes", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeScalingProcessTypes",
    validator: validate_PostDescribeScalingProcessTypes_604197, base: "/",
    url: url_PostDescribeScalingProcessTypes_604198,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeScalingProcessTypes_604181 = ref object of OpenApiRestCall_602466
proc url_GetDescribeScalingProcessTypes_604183(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeScalingProcessTypes_604182(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the scaling process types for use with <a>ResumeProcesses</a> and <a>SuspendProcesses</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604184 = query.getOrDefault("Action")
  valid_604184 = validateParameter(valid_604184, JString, required = true, default = newJString(
      "DescribeScalingProcessTypes"))
  if valid_604184 != nil:
    section.add "Action", valid_604184
  var valid_604185 = query.getOrDefault("Version")
  valid_604185 = validateParameter(valid_604185, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604185 != nil:
    section.add "Version", valid_604185
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604186 = header.getOrDefault("X-Amz-Date")
  valid_604186 = validateParameter(valid_604186, JString, required = false,
                                 default = nil)
  if valid_604186 != nil:
    section.add "X-Amz-Date", valid_604186
  var valid_604187 = header.getOrDefault("X-Amz-Security-Token")
  valid_604187 = validateParameter(valid_604187, JString, required = false,
                                 default = nil)
  if valid_604187 != nil:
    section.add "X-Amz-Security-Token", valid_604187
  var valid_604188 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604188 = validateParameter(valid_604188, JString, required = false,
                                 default = nil)
  if valid_604188 != nil:
    section.add "X-Amz-Content-Sha256", valid_604188
  var valid_604189 = header.getOrDefault("X-Amz-Algorithm")
  valid_604189 = validateParameter(valid_604189, JString, required = false,
                                 default = nil)
  if valid_604189 != nil:
    section.add "X-Amz-Algorithm", valid_604189
  var valid_604190 = header.getOrDefault("X-Amz-Signature")
  valid_604190 = validateParameter(valid_604190, JString, required = false,
                                 default = nil)
  if valid_604190 != nil:
    section.add "X-Amz-Signature", valid_604190
  var valid_604191 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604191 = validateParameter(valid_604191, JString, required = false,
                                 default = nil)
  if valid_604191 != nil:
    section.add "X-Amz-SignedHeaders", valid_604191
  var valid_604192 = header.getOrDefault("X-Amz-Credential")
  valid_604192 = validateParameter(valid_604192, JString, required = false,
                                 default = nil)
  if valid_604192 != nil:
    section.add "X-Amz-Credential", valid_604192
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604193: Call_GetDescribeScalingProcessTypes_604181; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the scaling process types for use with <a>ResumeProcesses</a> and <a>SuspendProcesses</a>.
  ## 
  let valid = call_604193.validator(path, query, header, formData, body)
  let scheme = call_604193.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604193.url(scheme.get, call_604193.host, call_604193.base,
                         call_604193.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604193, url, valid)

proc call*(call_604194: Call_GetDescribeScalingProcessTypes_604181;
          Action: string = "DescribeScalingProcessTypes";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeScalingProcessTypes
  ## Describes the scaling process types for use with <a>ResumeProcesses</a> and <a>SuspendProcesses</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604195 = newJObject()
  add(query_604195, "Action", newJString(Action))
  add(query_604195, "Version", newJString(Version))
  result = call_604194.call(nil, query_604195, nil, nil, nil)

var getDescribeScalingProcessTypes* = Call_GetDescribeScalingProcessTypes_604181(
    name: "getDescribeScalingProcessTypes", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeScalingProcessTypes",
    validator: validate_GetDescribeScalingProcessTypes_604182, base: "/",
    url: url_GetDescribeScalingProcessTypes_604183,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeScheduledActions_604232 = ref object of OpenApiRestCall_602466
proc url_PostDescribeScheduledActions_604234(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeScheduledActions_604233(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the actions scheduled for your Auto Scaling group that haven't run or that have not reached their end time. To describe the actions that have already run, use <a>DescribeScalingActivities</a>. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604235 = query.getOrDefault("Action")
  valid_604235 = validateParameter(valid_604235, JString, required = true, default = newJString(
      "DescribeScheduledActions"))
  if valid_604235 != nil:
    section.add "Action", valid_604235
  var valid_604236 = query.getOrDefault("Version")
  valid_604236 = validateParameter(valid_604236, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604236 != nil:
    section.add "Version", valid_604236
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604237 = header.getOrDefault("X-Amz-Date")
  valid_604237 = validateParameter(valid_604237, JString, required = false,
                                 default = nil)
  if valid_604237 != nil:
    section.add "X-Amz-Date", valid_604237
  var valid_604238 = header.getOrDefault("X-Amz-Security-Token")
  valid_604238 = validateParameter(valid_604238, JString, required = false,
                                 default = nil)
  if valid_604238 != nil:
    section.add "X-Amz-Security-Token", valid_604238
  var valid_604239 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604239 = validateParameter(valid_604239, JString, required = false,
                                 default = nil)
  if valid_604239 != nil:
    section.add "X-Amz-Content-Sha256", valid_604239
  var valid_604240 = header.getOrDefault("X-Amz-Algorithm")
  valid_604240 = validateParameter(valid_604240, JString, required = false,
                                 default = nil)
  if valid_604240 != nil:
    section.add "X-Amz-Algorithm", valid_604240
  var valid_604241 = header.getOrDefault("X-Amz-Signature")
  valid_604241 = validateParameter(valid_604241, JString, required = false,
                                 default = nil)
  if valid_604241 != nil:
    section.add "X-Amz-Signature", valid_604241
  var valid_604242 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604242 = validateParameter(valid_604242, JString, required = false,
                                 default = nil)
  if valid_604242 != nil:
    section.add "X-Amz-SignedHeaders", valid_604242
  var valid_604243 = header.getOrDefault("X-Amz-Credential")
  valid_604243 = validateParameter(valid_604243, JString, required = false,
                                 default = nil)
  if valid_604243 != nil:
    section.add "X-Amz-Credential", valid_604243
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   StartTime: JString
  ##            : The earliest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   EndTime: JString
  ##          : The latest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   ScheduledActionNames: JArray
  ##                       : The names of one or more scheduled actions. You can specify up to 50 actions. If you omit this parameter, all scheduled actions are described. If you specify an unknown scheduled action, it is ignored with no error.
  section = newJObject()
  var valid_604244 = formData.getOrDefault("AutoScalingGroupName")
  valid_604244 = validateParameter(valid_604244, JString, required = false,
                                 default = nil)
  if valid_604244 != nil:
    section.add "AutoScalingGroupName", valid_604244
  var valid_604245 = formData.getOrDefault("NextToken")
  valid_604245 = validateParameter(valid_604245, JString, required = false,
                                 default = nil)
  if valid_604245 != nil:
    section.add "NextToken", valid_604245
  var valid_604246 = formData.getOrDefault("StartTime")
  valid_604246 = validateParameter(valid_604246, JString, required = false,
                                 default = nil)
  if valid_604246 != nil:
    section.add "StartTime", valid_604246
  var valid_604247 = formData.getOrDefault("EndTime")
  valid_604247 = validateParameter(valid_604247, JString, required = false,
                                 default = nil)
  if valid_604247 != nil:
    section.add "EndTime", valid_604247
  var valid_604248 = formData.getOrDefault("MaxRecords")
  valid_604248 = validateParameter(valid_604248, JInt, required = false, default = nil)
  if valid_604248 != nil:
    section.add "MaxRecords", valid_604248
  var valid_604249 = formData.getOrDefault("ScheduledActionNames")
  valid_604249 = validateParameter(valid_604249, JArray, required = false,
                                 default = nil)
  if valid_604249 != nil:
    section.add "ScheduledActionNames", valid_604249
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604250: Call_PostDescribeScheduledActions_604232; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the actions scheduled for your Auto Scaling group that haven't run or that have not reached their end time. To describe the actions that have already run, use <a>DescribeScalingActivities</a>. 
  ## 
  let valid = call_604250.validator(path, query, header, formData, body)
  let scheme = call_604250.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604250.url(scheme.get, call_604250.host, call_604250.base,
                         call_604250.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604250, url, valid)

proc call*(call_604251: Call_PostDescribeScheduledActions_604232;
          AutoScalingGroupName: string = ""; NextToken: string = "";
          StartTime: string = ""; Action: string = "DescribeScheduledActions";
          EndTime: string = ""; MaxRecords: int = 0; Version: string = "2011-01-01";
          ScheduledActionNames: JsonNode = nil): Recallable =
  ## postDescribeScheduledActions
  ## Describes the actions scheduled for your Auto Scaling group that haven't run or that have not reached their end time. To describe the actions that have already run, use <a>DescribeScalingActivities</a>. 
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   StartTime: string
  ##            : The earliest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   Action: string (required)
  ##   EndTime: string
  ##          : The latest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   Version: string (required)
  ##   ScheduledActionNames: JArray
  ##                       : The names of one or more scheduled actions. You can specify up to 50 actions. If you omit this parameter, all scheduled actions are described. If you specify an unknown scheduled action, it is ignored with no error.
  var query_604252 = newJObject()
  var formData_604253 = newJObject()
  add(formData_604253, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_604253, "NextToken", newJString(NextToken))
  add(formData_604253, "StartTime", newJString(StartTime))
  add(query_604252, "Action", newJString(Action))
  add(formData_604253, "EndTime", newJString(EndTime))
  add(formData_604253, "MaxRecords", newJInt(MaxRecords))
  add(query_604252, "Version", newJString(Version))
  if ScheduledActionNames != nil:
    formData_604253.add "ScheduledActionNames", ScheduledActionNames
  result = call_604251.call(nil, query_604252, nil, formData_604253, nil)

var postDescribeScheduledActions* = Call_PostDescribeScheduledActions_604232(
    name: "postDescribeScheduledActions", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeScheduledActions",
    validator: validate_PostDescribeScheduledActions_604233, base: "/",
    url: url_PostDescribeScheduledActions_604234,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeScheduledActions_604211 = ref object of OpenApiRestCall_602466
proc url_GetDescribeScheduledActions_604213(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeScheduledActions_604212(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the actions scheduled for your Auto Scaling group that haven't run or that have not reached their end time. To describe the actions that have already run, use <a>DescribeScalingActivities</a>. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   StartTime: JString
  ##            : The earliest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: JString (required)
  ##   ScheduledActionNames: JArray
  ##                       : The names of one or more scheduled actions. You can specify up to 50 actions. If you omit this parameter, all scheduled actions are described. If you specify an unknown scheduled action, it is ignored with no error.
  ##   EndTime: JString
  ##          : The latest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   Version: JString (required)
  section = newJObject()
  var valid_604214 = query.getOrDefault("MaxRecords")
  valid_604214 = validateParameter(valid_604214, JInt, required = false, default = nil)
  if valid_604214 != nil:
    section.add "MaxRecords", valid_604214
  var valid_604215 = query.getOrDefault("AutoScalingGroupName")
  valid_604215 = validateParameter(valid_604215, JString, required = false,
                                 default = nil)
  if valid_604215 != nil:
    section.add "AutoScalingGroupName", valid_604215
  var valid_604216 = query.getOrDefault("StartTime")
  valid_604216 = validateParameter(valid_604216, JString, required = false,
                                 default = nil)
  if valid_604216 != nil:
    section.add "StartTime", valid_604216
  var valid_604217 = query.getOrDefault("NextToken")
  valid_604217 = validateParameter(valid_604217, JString, required = false,
                                 default = nil)
  if valid_604217 != nil:
    section.add "NextToken", valid_604217
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604218 = query.getOrDefault("Action")
  valid_604218 = validateParameter(valid_604218, JString, required = true, default = newJString(
      "DescribeScheduledActions"))
  if valid_604218 != nil:
    section.add "Action", valid_604218
  var valid_604219 = query.getOrDefault("ScheduledActionNames")
  valid_604219 = validateParameter(valid_604219, JArray, required = false,
                                 default = nil)
  if valid_604219 != nil:
    section.add "ScheduledActionNames", valid_604219
  var valid_604220 = query.getOrDefault("EndTime")
  valid_604220 = validateParameter(valid_604220, JString, required = false,
                                 default = nil)
  if valid_604220 != nil:
    section.add "EndTime", valid_604220
  var valid_604221 = query.getOrDefault("Version")
  valid_604221 = validateParameter(valid_604221, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604221 != nil:
    section.add "Version", valid_604221
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604222 = header.getOrDefault("X-Amz-Date")
  valid_604222 = validateParameter(valid_604222, JString, required = false,
                                 default = nil)
  if valid_604222 != nil:
    section.add "X-Amz-Date", valid_604222
  var valid_604223 = header.getOrDefault("X-Amz-Security-Token")
  valid_604223 = validateParameter(valid_604223, JString, required = false,
                                 default = nil)
  if valid_604223 != nil:
    section.add "X-Amz-Security-Token", valid_604223
  var valid_604224 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604224 = validateParameter(valid_604224, JString, required = false,
                                 default = nil)
  if valid_604224 != nil:
    section.add "X-Amz-Content-Sha256", valid_604224
  var valid_604225 = header.getOrDefault("X-Amz-Algorithm")
  valid_604225 = validateParameter(valid_604225, JString, required = false,
                                 default = nil)
  if valid_604225 != nil:
    section.add "X-Amz-Algorithm", valid_604225
  var valid_604226 = header.getOrDefault("X-Amz-Signature")
  valid_604226 = validateParameter(valid_604226, JString, required = false,
                                 default = nil)
  if valid_604226 != nil:
    section.add "X-Amz-Signature", valid_604226
  var valid_604227 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604227 = validateParameter(valid_604227, JString, required = false,
                                 default = nil)
  if valid_604227 != nil:
    section.add "X-Amz-SignedHeaders", valid_604227
  var valid_604228 = header.getOrDefault("X-Amz-Credential")
  valid_604228 = validateParameter(valid_604228, JString, required = false,
                                 default = nil)
  if valid_604228 != nil:
    section.add "X-Amz-Credential", valid_604228
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604229: Call_GetDescribeScheduledActions_604211; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the actions scheduled for your Auto Scaling group that haven't run or that have not reached their end time. To describe the actions that have already run, use <a>DescribeScalingActivities</a>. 
  ## 
  let valid = call_604229.validator(path, query, header, formData, body)
  let scheme = call_604229.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604229.url(scheme.get, call_604229.host, call_604229.base,
                         call_604229.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604229, url, valid)

proc call*(call_604230: Call_GetDescribeScheduledActions_604211;
          MaxRecords: int = 0; AutoScalingGroupName: string = "";
          StartTime: string = ""; NextToken: string = "";
          Action: string = "DescribeScheduledActions";
          ScheduledActionNames: JsonNode = nil; EndTime: string = "";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeScheduledActions
  ## Describes the actions scheduled for your Auto Scaling group that haven't run or that have not reached their end time. To describe the actions that have already run, use <a>DescribeScalingActivities</a>. 
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   StartTime: string
  ##            : The earliest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   ScheduledActionNames: JArray
  ##                       : The names of one or more scheduled actions. You can specify up to 50 actions. If you omit this parameter, all scheduled actions are described. If you specify an unknown scheduled action, it is ignored with no error.
  ##   EndTime: string
  ##          : The latest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   Version: string (required)
  var query_604231 = newJObject()
  add(query_604231, "MaxRecords", newJInt(MaxRecords))
  add(query_604231, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_604231, "StartTime", newJString(StartTime))
  add(query_604231, "NextToken", newJString(NextToken))
  add(query_604231, "Action", newJString(Action))
  if ScheduledActionNames != nil:
    query_604231.add "ScheduledActionNames", ScheduledActionNames
  add(query_604231, "EndTime", newJString(EndTime))
  add(query_604231, "Version", newJString(Version))
  result = call_604230.call(nil, query_604231, nil, nil, nil)

var getDescribeScheduledActions* = Call_GetDescribeScheduledActions_604211(
    name: "getDescribeScheduledActions", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeScheduledActions",
    validator: validate_GetDescribeScheduledActions_604212, base: "/",
    url: url_GetDescribeScheduledActions_604213,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeTags_604272 = ref object of OpenApiRestCall_602466
proc url_PostDescribeTags_604274(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeTags_604273(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Describes the specified tags.</p> <p>You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.</p> <p>You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there's no match, no special message is returned.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604275 = query.getOrDefault("Action")
  valid_604275 = validateParameter(valid_604275, JString, required = true,
                                 default = newJString("DescribeTags"))
  if valid_604275 != nil:
    section.add "Action", valid_604275
  var valid_604276 = query.getOrDefault("Version")
  valid_604276 = validateParameter(valid_604276, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604276 != nil:
    section.add "Version", valid_604276
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604277 = header.getOrDefault("X-Amz-Date")
  valid_604277 = validateParameter(valid_604277, JString, required = false,
                                 default = nil)
  if valid_604277 != nil:
    section.add "X-Amz-Date", valid_604277
  var valid_604278 = header.getOrDefault("X-Amz-Security-Token")
  valid_604278 = validateParameter(valid_604278, JString, required = false,
                                 default = nil)
  if valid_604278 != nil:
    section.add "X-Amz-Security-Token", valid_604278
  var valid_604279 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604279 = validateParameter(valid_604279, JString, required = false,
                                 default = nil)
  if valid_604279 != nil:
    section.add "X-Amz-Content-Sha256", valid_604279
  var valid_604280 = header.getOrDefault("X-Amz-Algorithm")
  valid_604280 = validateParameter(valid_604280, JString, required = false,
                                 default = nil)
  if valid_604280 != nil:
    section.add "X-Amz-Algorithm", valid_604280
  var valid_604281 = header.getOrDefault("X-Amz-Signature")
  valid_604281 = validateParameter(valid_604281, JString, required = false,
                                 default = nil)
  if valid_604281 != nil:
    section.add "X-Amz-Signature", valid_604281
  var valid_604282 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604282 = validateParameter(valid_604282, JString, required = false,
                                 default = nil)
  if valid_604282 != nil:
    section.add "X-Amz-SignedHeaders", valid_604282
  var valid_604283 = header.getOrDefault("X-Amz-Credential")
  valid_604283 = validateParameter(valid_604283, JString, required = false,
                                 default = nil)
  if valid_604283 != nil:
    section.add "X-Amz-Credential", valid_604283
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Filters: JArray
  ##          : One or more filters to scope the tags to return. The maximum number of filters per filter type (for example, <code>auto-scaling-group</code>) is 1000.
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  section = newJObject()
  var valid_604284 = formData.getOrDefault("NextToken")
  valid_604284 = validateParameter(valid_604284, JString, required = false,
                                 default = nil)
  if valid_604284 != nil:
    section.add "NextToken", valid_604284
  var valid_604285 = formData.getOrDefault("Filters")
  valid_604285 = validateParameter(valid_604285, JArray, required = false,
                                 default = nil)
  if valid_604285 != nil:
    section.add "Filters", valid_604285
  var valid_604286 = formData.getOrDefault("MaxRecords")
  valid_604286 = validateParameter(valid_604286, JInt, required = false, default = nil)
  if valid_604286 != nil:
    section.add "MaxRecords", valid_604286
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604287: Call_PostDescribeTags_604272; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the specified tags.</p> <p>You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.</p> <p>You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there's no match, no special message is returned.</p>
  ## 
  let valid = call_604287.validator(path, query, header, formData, body)
  let scheme = call_604287.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604287.url(scheme.get, call_604287.host, call_604287.base,
                         call_604287.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604287, url, valid)

proc call*(call_604288: Call_PostDescribeTags_604272; NextToken: string = "";
          Action: string = "DescribeTags"; Filters: JsonNode = nil; MaxRecords: int = 0;
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeTags
  ## <p>Describes the specified tags.</p> <p>You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.</p> <p>You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there's no match, no special message is returned.</p>
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : One or more filters to scope the tags to return. The maximum number of filters per filter type (for example, <code>auto-scaling-group</code>) is 1000.
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   Version: string (required)
  var query_604289 = newJObject()
  var formData_604290 = newJObject()
  add(formData_604290, "NextToken", newJString(NextToken))
  add(query_604289, "Action", newJString(Action))
  if Filters != nil:
    formData_604290.add "Filters", Filters
  add(formData_604290, "MaxRecords", newJInt(MaxRecords))
  add(query_604289, "Version", newJString(Version))
  result = call_604288.call(nil, query_604289, nil, formData_604290, nil)

var postDescribeTags* = Call_PostDescribeTags_604272(name: "postDescribeTags",
    meth: HttpMethod.HttpPost, host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeTags", validator: validate_PostDescribeTags_604273,
    base: "/", url: url_PostDescribeTags_604274,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeTags_604254 = ref object of OpenApiRestCall_602466
proc url_GetDescribeTags_604256(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeTags_604255(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Describes the specified tags.</p> <p>You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.</p> <p>You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there's no match, no special message is returned.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   Filters: JArray
  ##          : One or more filters to scope the tags to return. The maximum number of filters per filter type (for example, <code>auto-scaling-group</code>) is 1000.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_604257 = query.getOrDefault("MaxRecords")
  valid_604257 = validateParameter(valid_604257, JInt, required = false, default = nil)
  if valid_604257 != nil:
    section.add "MaxRecords", valid_604257
  var valid_604258 = query.getOrDefault("Filters")
  valid_604258 = validateParameter(valid_604258, JArray, required = false,
                                 default = nil)
  if valid_604258 != nil:
    section.add "Filters", valid_604258
  var valid_604259 = query.getOrDefault("NextToken")
  valid_604259 = validateParameter(valid_604259, JString, required = false,
                                 default = nil)
  if valid_604259 != nil:
    section.add "NextToken", valid_604259
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604260 = query.getOrDefault("Action")
  valid_604260 = validateParameter(valid_604260, JString, required = true,
                                 default = newJString("DescribeTags"))
  if valid_604260 != nil:
    section.add "Action", valid_604260
  var valid_604261 = query.getOrDefault("Version")
  valid_604261 = validateParameter(valid_604261, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604261 != nil:
    section.add "Version", valid_604261
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604262 = header.getOrDefault("X-Amz-Date")
  valid_604262 = validateParameter(valid_604262, JString, required = false,
                                 default = nil)
  if valid_604262 != nil:
    section.add "X-Amz-Date", valid_604262
  var valid_604263 = header.getOrDefault("X-Amz-Security-Token")
  valid_604263 = validateParameter(valid_604263, JString, required = false,
                                 default = nil)
  if valid_604263 != nil:
    section.add "X-Amz-Security-Token", valid_604263
  var valid_604264 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604264 = validateParameter(valid_604264, JString, required = false,
                                 default = nil)
  if valid_604264 != nil:
    section.add "X-Amz-Content-Sha256", valid_604264
  var valid_604265 = header.getOrDefault("X-Amz-Algorithm")
  valid_604265 = validateParameter(valid_604265, JString, required = false,
                                 default = nil)
  if valid_604265 != nil:
    section.add "X-Amz-Algorithm", valid_604265
  var valid_604266 = header.getOrDefault("X-Amz-Signature")
  valid_604266 = validateParameter(valid_604266, JString, required = false,
                                 default = nil)
  if valid_604266 != nil:
    section.add "X-Amz-Signature", valid_604266
  var valid_604267 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604267 = validateParameter(valid_604267, JString, required = false,
                                 default = nil)
  if valid_604267 != nil:
    section.add "X-Amz-SignedHeaders", valid_604267
  var valid_604268 = header.getOrDefault("X-Amz-Credential")
  valid_604268 = validateParameter(valid_604268, JString, required = false,
                                 default = nil)
  if valid_604268 != nil:
    section.add "X-Amz-Credential", valid_604268
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604269: Call_GetDescribeTags_604254; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the specified tags.</p> <p>You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.</p> <p>You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there's no match, no special message is returned.</p>
  ## 
  let valid = call_604269.validator(path, query, header, formData, body)
  let scheme = call_604269.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604269.url(scheme.get, call_604269.host, call_604269.base,
                         call_604269.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604269, url, valid)

proc call*(call_604270: Call_GetDescribeTags_604254; MaxRecords: int = 0;
          Filters: JsonNode = nil; NextToken: string = "";
          Action: string = "DescribeTags"; Version: string = "2011-01-01"): Recallable =
  ## getDescribeTags
  ## <p>Describes the specified tags.</p> <p>You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.</p> <p>You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there's no match, no special message is returned.</p>
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   Filters: JArray
  ##          : One or more filters to scope the tags to return. The maximum number of filters per filter type (for example, <code>auto-scaling-group</code>) is 1000.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604271 = newJObject()
  add(query_604271, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_604271.add "Filters", Filters
  add(query_604271, "NextToken", newJString(NextToken))
  add(query_604271, "Action", newJString(Action))
  add(query_604271, "Version", newJString(Version))
  result = call_604270.call(nil, query_604271, nil, nil, nil)

var getDescribeTags* = Call_GetDescribeTags_604254(name: "getDescribeTags",
    meth: HttpMethod.HttpGet, host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeTags", validator: validate_GetDescribeTags_604255,
    base: "/", url: url_GetDescribeTags_604256, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeTerminationPolicyTypes_604306 = ref object of OpenApiRestCall_602466
proc url_PostDescribeTerminationPolicyTypes_604308(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeTerminationPolicyTypes_604307(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the termination policies supported by Amazon EC2 Auto Scaling.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Auto Scaling Instances Terminate During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604309 = query.getOrDefault("Action")
  valid_604309 = validateParameter(valid_604309, JString, required = true, default = newJString(
      "DescribeTerminationPolicyTypes"))
  if valid_604309 != nil:
    section.add "Action", valid_604309
  var valid_604310 = query.getOrDefault("Version")
  valid_604310 = validateParameter(valid_604310, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604310 != nil:
    section.add "Version", valid_604310
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604311 = header.getOrDefault("X-Amz-Date")
  valid_604311 = validateParameter(valid_604311, JString, required = false,
                                 default = nil)
  if valid_604311 != nil:
    section.add "X-Amz-Date", valid_604311
  var valid_604312 = header.getOrDefault("X-Amz-Security-Token")
  valid_604312 = validateParameter(valid_604312, JString, required = false,
                                 default = nil)
  if valid_604312 != nil:
    section.add "X-Amz-Security-Token", valid_604312
  var valid_604313 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604313 = validateParameter(valid_604313, JString, required = false,
                                 default = nil)
  if valid_604313 != nil:
    section.add "X-Amz-Content-Sha256", valid_604313
  var valid_604314 = header.getOrDefault("X-Amz-Algorithm")
  valid_604314 = validateParameter(valid_604314, JString, required = false,
                                 default = nil)
  if valid_604314 != nil:
    section.add "X-Amz-Algorithm", valid_604314
  var valid_604315 = header.getOrDefault("X-Amz-Signature")
  valid_604315 = validateParameter(valid_604315, JString, required = false,
                                 default = nil)
  if valid_604315 != nil:
    section.add "X-Amz-Signature", valid_604315
  var valid_604316 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604316 = validateParameter(valid_604316, JString, required = false,
                                 default = nil)
  if valid_604316 != nil:
    section.add "X-Amz-SignedHeaders", valid_604316
  var valid_604317 = header.getOrDefault("X-Amz-Credential")
  valid_604317 = validateParameter(valid_604317, JString, required = false,
                                 default = nil)
  if valid_604317 != nil:
    section.add "X-Amz-Credential", valid_604317
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604318: Call_PostDescribeTerminationPolicyTypes_604306;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Describes the termination policies supported by Amazon EC2 Auto Scaling.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Auto Scaling Instances Terminate During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_604318.validator(path, query, header, formData, body)
  let scheme = call_604318.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604318.url(scheme.get, call_604318.host, call_604318.base,
                         call_604318.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604318, url, valid)

proc call*(call_604319: Call_PostDescribeTerminationPolicyTypes_604306;
          Action: string = "DescribeTerminationPolicyTypes";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeTerminationPolicyTypes
  ## <p>Describes the termination policies supported by Amazon EC2 Auto Scaling.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Auto Scaling Instances Terminate During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604320 = newJObject()
  add(query_604320, "Action", newJString(Action))
  add(query_604320, "Version", newJString(Version))
  result = call_604319.call(nil, query_604320, nil, nil, nil)

var postDescribeTerminationPolicyTypes* = Call_PostDescribeTerminationPolicyTypes_604306(
    name: "postDescribeTerminationPolicyTypes", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeTerminationPolicyTypes",
    validator: validate_PostDescribeTerminationPolicyTypes_604307, base: "/",
    url: url_PostDescribeTerminationPolicyTypes_604308,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeTerminationPolicyTypes_604291 = ref object of OpenApiRestCall_602466
proc url_GetDescribeTerminationPolicyTypes_604293(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeTerminationPolicyTypes_604292(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the termination policies supported by Amazon EC2 Auto Scaling.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Auto Scaling Instances Terminate During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604294 = query.getOrDefault("Action")
  valid_604294 = validateParameter(valid_604294, JString, required = true, default = newJString(
      "DescribeTerminationPolicyTypes"))
  if valid_604294 != nil:
    section.add "Action", valid_604294
  var valid_604295 = query.getOrDefault("Version")
  valid_604295 = validateParameter(valid_604295, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604295 != nil:
    section.add "Version", valid_604295
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604296 = header.getOrDefault("X-Amz-Date")
  valid_604296 = validateParameter(valid_604296, JString, required = false,
                                 default = nil)
  if valid_604296 != nil:
    section.add "X-Amz-Date", valid_604296
  var valid_604297 = header.getOrDefault("X-Amz-Security-Token")
  valid_604297 = validateParameter(valid_604297, JString, required = false,
                                 default = nil)
  if valid_604297 != nil:
    section.add "X-Amz-Security-Token", valid_604297
  var valid_604298 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604298 = validateParameter(valid_604298, JString, required = false,
                                 default = nil)
  if valid_604298 != nil:
    section.add "X-Amz-Content-Sha256", valid_604298
  var valid_604299 = header.getOrDefault("X-Amz-Algorithm")
  valid_604299 = validateParameter(valid_604299, JString, required = false,
                                 default = nil)
  if valid_604299 != nil:
    section.add "X-Amz-Algorithm", valid_604299
  var valid_604300 = header.getOrDefault("X-Amz-Signature")
  valid_604300 = validateParameter(valid_604300, JString, required = false,
                                 default = nil)
  if valid_604300 != nil:
    section.add "X-Amz-Signature", valid_604300
  var valid_604301 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604301 = validateParameter(valid_604301, JString, required = false,
                                 default = nil)
  if valid_604301 != nil:
    section.add "X-Amz-SignedHeaders", valid_604301
  var valid_604302 = header.getOrDefault("X-Amz-Credential")
  valid_604302 = validateParameter(valid_604302, JString, required = false,
                                 default = nil)
  if valid_604302 != nil:
    section.add "X-Amz-Credential", valid_604302
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604303: Call_GetDescribeTerminationPolicyTypes_604291;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Describes the termination policies supported by Amazon EC2 Auto Scaling.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Auto Scaling Instances Terminate During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_604303.validator(path, query, header, formData, body)
  let scheme = call_604303.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604303.url(scheme.get, call_604303.host, call_604303.base,
                         call_604303.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604303, url, valid)

proc call*(call_604304: Call_GetDescribeTerminationPolicyTypes_604291;
          Action: string = "DescribeTerminationPolicyTypes";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeTerminationPolicyTypes
  ## <p>Describes the termination policies supported by Amazon EC2 Auto Scaling.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Auto Scaling Instances Terminate During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604305 = newJObject()
  add(query_604305, "Action", newJString(Action))
  add(query_604305, "Version", newJString(Version))
  result = call_604304.call(nil, query_604305, nil, nil, nil)

var getDescribeTerminationPolicyTypes* = Call_GetDescribeTerminationPolicyTypes_604291(
    name: "getDescribeTerminationPolicyTypes", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeTerminationPolicyTypes",
    validator: validate_GetDescribeTerminationPolicyTypes_604292, base: "/",
    url: url_GetDescribeTerminationPolicyTypes_604293,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDetachInstances_604339 = ref object of OpenApiRestCall_602466
proc url_PostDetachInstances_604341(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDetachInstances_604340(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Removes one or more instances from the specified Auto Scaling group.</p> <p>After the instances are detached, you can manage them independent of the Auto Scaling group.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.</p> <p>If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html">Detach EC2 Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604342 = query.getOrDefault("Action")
  valid_604342 = validateParameter(valid_604342, JString, required = true,
                                 default = newJString("DetachInstances"))
  if valid_604342 != nil:
    section.add "Action", valid_604342
  var valid_604343 = query.getOrDefault("Version")
  valid_604343 = validateParameter(valid_604343, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604343 != nil:
    section.add "Version", valid_604343
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604344 = header.getOrDefault("X-Amz-Date")
  valid_604344 = validateParameter(valid_604344, JString, required = false,
                                 default = nil)
  if valid_604344 != nil:
    section.add "X-Amz-Date", valid_604344
  var valid_604345 = header.getOrDefault("X-Amz-Security-Token")
  valid_604345 = validateParameter(valid_604345, JString, required = false,
                                 default = nil)
  if valid_604345 != nil:
    section.add "X-Amz-Security-Token", valid_604345
  var valid_604346 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604346 = validateParameter(valid_604346, JString, required = false,
                                 default = nil)
  if valid_604346 != nil:
    section.add "X-Amz-Content-Sha256", valid_604346
  var valid_604347 = header.getOrDefault("X-Amz-Algorithm")
  valid_604347 = validateParameter(valid_604347, JString, required = false,
                                 default = nil)
  if valid_604347 != nil:
    section.add "X-Amz-Algorithm", valid_604347
  var valid_604348 = header.getOrDefault("X-Amz-Signature")
  valid_604348 = validateParameter(valid_604348, JString, required = false,
                                 default = nil)
  if valid_604348 != nil:
    section.add "X-Amz-Signature", valid_604348
  var valid_604349 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604349 = validateParameter(valid_604349, JString, required = false,
                                 default = nil)
  if valid_604349 != nil:
    section.add "X-Amz-SignedHeaders", valid_604349
  var valid_604350 = header.getOrDefault("X-Amz-Credential")
  valid_604350 = validateParameter(valid_604350, JString, required = false,
                                 default = nil)
  if valid_604350 != nil:
    section.add "X-Amz-Credential", valid_604350
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   ShouldDecrementDesiredCapacity: JBool (required)
  ##                                 : Indicates whether the Auto Scaling group decrements the desired capacity value by the number of instances detached.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_604351 = formData.getOrDefault("AutoScalingGroupName")
  valid_604351 = validateParameter(valid_604351, JString, required = true,
                                 default = nil)
  if valid_604351 != nil:
    section.add "AutoScalingGroupName", valid_604351
  var valid_604352 = formData.getOrDefault("InstanceIds")
  valid_604352 = validateParameter(valid_604352, JArray, required = false,
                                 default = nil)
  if valid_604352 != nil:
    section.add "InstanceIds", valid_604352
  var valid_604353 = formData.getOrDefault("ShouldDecrementDesiredCapacity")
  valid_604353 = validateParameter(valid_604353, JBool, required = true, default = nil)
  if valid_604353 != nil:
    section.add "ShouldDecrementDesiredCapacity", valid_604353
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604354: Call_PostDetachInstances_604339; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes one or more instances from the specified Auto Scaling group.</p> <p>After the instances are detached, you can manage them independent of the Auto Scaling group.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.</p> <p>If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html">Detach EC2 Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_604354.validator(path, query, header, formData, body)
  let scheme = call_604354.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604354.url(scheme.get, call_604354.host, call_604354.base,
                         call_604354.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604354, url, valid)

proc call*(call_604355: Call_PostDetachInstances_604339;
          AutoScalingGroupName: string; ShouldDecrementDesiredCapacity: bool;
          InstanceIds: JsonNode = nil; Action: string = "DetachInstances";
          Version: string = "2011-01-01"): Recallable =
  ## postDetachInstances
  ## <p>Removes one or more instances from the specified Auto Scaling group.</p> <p>After the instances are detached, you can manage them independent of the Auto Scaling group.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.</p> <p>If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html">Detach EC2 Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   ShouldDecrementDesiredCapacity: bool (required)
  ##                                 : Indicates whether the Auto Scaling group decrements the desired capacity value by the number of instances detached.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604356 = newJObject()
  var formData_604357 = newJObject()
  add(formData_604357, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if InstanceIds != nil:
    formData_604357.add "InstanceIds", InstanceIds
  add(formData_604357, "ShouldDecrementDesiredCapacity",
      newJBool(ShouldDecrementDesiredCapacity))
  add(query_604356, "Action", newJString(Action))
  add(query_604356, "Version", newJString(Version))
  result = call_604355.call(nil, query_604356, nil, formData_604357, nil)

var postDetachInstances* = Call_PostDetachInstances_604339(
    name: "postDetachInstances", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DetachInstances",
    validator: validate_PostDetachInstances_604340, base: "/",
    url: url_PostDetachInstances_604341, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDetachInstances_604321 = ref object of OpenApiRestCall_602466
proc url_GetDetachInstances_604323(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDetachInstances_604322(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Removes one or more instances from the specified Auto Scaling group.</p> <p>After the instances are detached, you can manage them independent of the Auto Scaling group.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.</p> <p>If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html">Detach EC2 Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   ShouldDecrementDesiredCapacity: JBool (required)
  ##                                 : Indicates whether the Auto Scaling group decrements the desired capacity value by the number of instances detached.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_604324 = query.getOrDefault("AutoScalingGroupName")
  valid_604324 = validateParameter(valid_604324, JString, required = true,
                                 default = nil)
  if valid_604324 != nil:
    section.add "AutoScalingGroupName", valid_604324
  var valid_604325 = query.getOrDefault("Action")
  valid_604325 = validateParameter(valid_604325, JString, required = true,
                                 default = newJString("DetachInstances"))
  if valid_604325 != nil:
    section.add "Action", valid_604325
  var valid_604326 = query.getOrDefault("ShouldDecrementDesiredCapacity")
  valid_604326 = validateParameter(valid_604326, JBool, required = true, default = nil)
  if valid_604326 != nil:
    section.add "ShouldDecrementDesiredCapacity", valid_604326
  var valid_604327 = query.getOrDefault("InstanceIds")
  valid_604327 = validateParameter(valid_604327, JArray, required = false,
                                 default = nil)
  if valid_604327 != nil:
    section.add "InstanceIds", valid_604327
  var valid_604328 = query.getOrDefault("Version")
  valid_604328 = validateParameter(valid_604328, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604328 != nil:
    section.add "Version", valid_604328
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604329 = header.getOrDefault("X-Amz-Date")
  valid_604329 = validateParameter(valid_604329, JString, required = false,
                                 default = nil)
  if valid_604329 != nil:
    section.add "X-Amz-Date", valid_604329
  var valid_604330 = header.getOrDefault("X-Amz-Security-Token")
  valid_604330 = validateParameter(valid_604330, JString, required = false,
                                 default = nil)
  if valid_604330 != nil:
    section.add "X-Amz-Security-Token", valid_604330
  var valid_604331 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604331 = validateParameter(valid_604331, JString, required = false,
                                 default = nil)
  if valid_604331 != nil:
    section.add "X-Amz-Content-Sha256", valid_604331
  var valid_604332 = header.getOrDefault("X-Amz-Algorithm")
  valid_604332 = validateParameter(valid_604332, JString, required = false,
                                 default = nil)
  if valid_604332 != nil:
    section.add "X-Amz-Algorithm", valid_604332
  var valid_604333 = header.getOrDefault("X-Amz-Signature")
  valid_604333 = validateParameter(valid_604333, JString, required = false,
                                 default = nil)
  if valid_604333 != nil:
    section.add "X-Amz-Signature", valid_604333
  var valid_604334 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604334 = validateParameter(valid_604334, JString, required = false,
                                 default = nil)
  if valid_604334 != nil:
    section.add "X-Amz-SignedHeaders", valid_604334
  var valid_604335 = header.getOrDefault("X-Amz-Credential")
  valid_604335 = validateParameter(valid_604335, JString, required = false,
                                 default = nil)
  if valid_604335 != nil:
    section.add "X-Amz-Credential", valid_604335
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604336: Call_GetDetachInstances_604321; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes one or more instances from the specified Auto Scaling group.</p> <p>After the instances are detached, you can manage them independent of the Auto Scaling group.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.</p> <p>If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html">Detach EC2 Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_604336.validator(path, query, header, formData, body)
  let scheme = call_604336.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604336.url(scheme.get, call_604336.host, call_604336.base,
                         call_604336.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604336, url, valid)

proc call*(call_604337: Call_GetDetachInstances_604321;
          AutoScalingGroupName: string; ShouldDecrementDesiredCapacity: bool;
          Action: string = "DetachInstances"; InstanceIds: JsonNode = nil;
          Version: string = "2011-01-01"): Recallable =
  ## getDetachInstances
  ## <p>Removes one or more instances from the specified Auto Scaling group.</p> <p>After the instances are detached, you can manage them independent of the Auto Scaling group.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.</p> <p>If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html">Detach EC2 Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   ShouldDecrementDesiredCapacity: bool (required)
  ##                                 : Indicates whether the Auto Scaling group decrements the desired capacity value by the number of instances detached.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Version: string (required)
  var query_604338 = newJObject()
  add(query_604338, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_604338, "Action", newJString(Action))
  add(query_604338, "ShouldDecrementDesiredCapacity",
      newJBool(ShouldDecrementDesiredCapacity))
  if InstanceIds != nil:
    query_604338.add "InstanceIds", InstanceIds
  add(query_604338, "Version", newJString(Version))
  result = call_604337.call(nil, query_604338, nil, nil, nil)

var getDetachInstances* = Call_GetDetachInstances_604321(
    name: "getDetachInstances", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DetachInstances",
    validator: validate_GetDetachInstances_604322, base: "/",
    url: url_GetDetachInstances_604323, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDetachLoadBalancerTargetGroups_604375 = ref object of OpenApiRestCall_602466
proc url_PostDetachLoadBalancerTargetGroups_604377(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDetachLoadBalancerTargetGroups_604376(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Detaches one or more target groups from the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604378 = query.getOrDefault("Action")
  valid_604378 = validateParameter(valid_604378, JString, required = true, default = newJString(
      "DetachLoadBalancerTargetGroups"))
  if valid_604378 != nil:
    section.add "Action", valid_604378
  var valid_604379 = query.getOrDefault("Version")
  valid_604379 = validateParameter(valid_604379, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604379 != nil:
    section.add "Version", valid_604379
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604380 = header.getOrDefault("X-Amz-Date")
  valid_604380 = validateParameter(valid_604380, JString, required = false,
                                 default = nil)
  if valid_604380 != nil:
    section.add "X-Amz-Date", valid_604380
  var valid_604381 = header.getOrDefault("X-Amz-Security-Token")
  valid_604381 = validateParameter(valid_604381, JString, required = false,
                                 default = nil)
  if valid_604381 != nil:
    section.add "X-Amz-Security-Token", valid_604381
  var valid_604382 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604382 = validateParameter(valid_604382, JString, required = false,
                                 default = nil)
  if valid_604382 != nil:
    section.add "X-Amz-Content-Sha256", valid_604382
  var valid_604383 = header.getOrDefault("X-Amz-Algorithm")
  valid_604383 = validateParameter(valid_604383, JString, required = false,
                                 default = nil)
  if valid_604383 != nil:
    section.add "X-Amz-Algorithm", valid_604383
  var valid_604384 = header.getOrDefault("X-Amz-Signature")
  valid_604384 = validateParameter(valid_604384, JString, required = false,
                                 default = nil)
  if valid_604384 != nil:
    section.add "X-Amz-Signature", valid_604384
  var valid_604385 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604385 = validateParameter(valid_604385, JString, required = false,
                                 default = nil)
  if valid_604385 != nil:
    section.add "X-Amz-SignedHeaders", valid_604385
  var valid_604386 = header.getOrDefault("X-Amz-Credential")
  valid_604386 = validateParameter(valid_604386, JString, required = false,
                                 default = nil)
  if valid_604386 != nil:
    section.add "X-Amz-Credential", valid_604386
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_604387 = formData.getOrDefault("AutoScalingGroupName")
  valid_604387 = validateParameter(valid_604387, JString, required = true,
                                 default = nil)
  if valid_604387 != nil:
    section.add "AutoScalingGroupName", valid_604387
  var valid_604388 = formData.getOrDefault("TargetGroupARNs")
  valid_604388 = validateParameter(valid_604388, JArray, required = true, default = nil)
  if valid_604388 != nil:
    section.add "TargetGroupARNs", valid_604388
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604389: Call_PostDetachLoadBalancerTargetGroups_604375;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Detaches one or more target groups from the specified Auto Scaling group.
  ## 
  let valid = call_604389.validator(path, query, header, formData, body)
  let scheme = call_604389.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604389.url(scheme.get, call_604389.host, call_604389.base,
                         call_604389.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604389, url, valid)

proc call*(call_604390: Call_PostDetachLoadBalancerTargetGroups_604375;
          AutoScalingGroupName: string; TargetGroupARNs: JsonNode;
          Action: string = "DetachLoadBalancerTargetGroups";
          Version: string = "2011-01-01"): Recallable =
  ## postDetachLoadBalancerTargetGroups
  ## Detaches one or more target groups from the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604391 = newJObject()
  var formData_604392 = newJObject()
  add(formData_604392, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if TargetGroupARNs != nil:
    formData_604392.add "TargetGroupARNs", TargetGroupARNs
  add(query_604391, "Action", newJString(Action))
  add(query_604391, "Version", newJString(Version))
  result = call_604390.call(nil, query_604391, nil, formData_604392, nil)

var postDetachLoadBalancerTargetGroups* = Call_PostDetachLoadBalancerTargetGroups_604375(
    name: "postDetachLoadBalancerTargetGroups", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DetachLoadBalancerTargetGroups",
    validator: validate_PostDetachLoadBalancerTargetGroups_604376, base: "/",
    url: url_PostDetachLoadBalancerTargetGroups_604377,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDetachLoadBalancerTargetGroups_604358 = ref object of OpenApiRestCall_602466
proc url_GetDetachLoadBalancerTargetGroups_604360(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDetachLoadBalancerTargetGroups_604359(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Detaches one or more target groups from the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_604361 = query.getOrDefault("AutoScalingGroupName")
  valid_604361 = validateParameter(valid_604361, JString, required = true,
                                 default = nil)
  if valid_604361 != nil:
    section.add "AutoScalingGroupName", valid_604361
  var valid_604362 = query.getOrDefault("Action")
  valid_604362 = validateParameter(valid_604362, JString, required = true, default = newJString(
      "DetachLoadBalancerTargetGroups"))
  if valid_604362 != nil:
    section.add "Action", valid_604362
  var valid_604363 = query.getOrDefault("TargetGroupARNs")
  valid_604363 = validateParameter(valid_604363, JArray, required = true, default = nil)
  if valid_604363 != nil:
    section.add "TargetGroupARNs", valid_604363
  var valid_604364 = query.getOrDefault("Version")
  valid_604364 = validateParameter(valid_604364, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604364 != nil:
    section.add "Version", valid_604364
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604365 = header.getOrDefault("X-Amz-Date")
  valid_604365 = validateParameter(valid_604365, JString, required = false,
                                 default = nil)
  if valid_604365 != nil:
    section.add "X-Amz-Date", valid_604365
  var valid_604366 = header.getOrDefault("X-Amz-Security-Token")
  valid_604366 = validateParameter(valid_604366, JString, required = false,
                                 default = nil)
  if valid_604366 != nil:
    section.add "X-Amz-Security-Token", valid_604366
  var valid_604367 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604367 = validateParameter(valid_604367, JString, required = false,
                                 default = nil)
  if valid_604367 != nil:
    section.add "X-Amz-Content-Sha256", valid_604367
  var valid_604368 = header.getOrDefault("X-Amz-Algorithm")
  valid_604368 = validateParameter(valid_604368, JString, required = false,
                                 default = nil)
  if valid_604368 != nil:
    section.add "X-Amz-Algorithm", valid_604368
  var valid_604369 = header.getOrDefault("X-Amz-Signature")
  valid_604369 = validateParameter(valid_604369, JString, required = false,
                                 default = nil)
  if valid_604369 != nil:
    section.add "X-Amz-Signature", valid_604369
  var valid_604370 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604370 = validateParameter(valid_604370, JString, required = false,
                                 default = nil)
  if valid_604370 != nil:
    section.add "X-Amz-SignedHeaders", valid_604370
  var valid_604371 = header.getOrDefault("X-Amz-Credential")
  valid_604371 = validateParameter(valid_604371, JString, required = false,
                                 default = nil)
  if valid_604371 != nil:
    section.add "X-Amz-Credential", valid_604371
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604372: Call_GetDetachLoadBalancerTargetGroups_604358;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Detaches one or more target groups from the specified Auto Scaling group.
  ## 
  let valid = call_604372.validator(path, query, header, formData, body)
  let scheme = call_604372.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604372.url(scheme.get, call_604372.host, call_604372.base,
                         call_604372.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604372, url, valid)

proc call*(call_604373: Call_GetDetachLoadBalancerTargetGroups_604358;
          AutoScalingGroupName: string; TargetGroupARNs: JsonNode;
          Action: string = "DetachLoadBalancerTargetGroups";
          Version: string = "2011-01-01"): Recallable =
  ## getDetachLoadBalancerTargetGroups
  ## Detaches one or more target groups from the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  ##   Version: string (required)
  var query_604374 = newJObject()
  add(query_604374, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_604374, "Action", newJString(Action))
  if TargetGroupARNs != nil:
    query_604374.add "TargetGroupARNs", TargetGroupARNs
  add(query_604374, "Version", newJString(Version))
  result = call_604373.call(nil, query_604374, nil, nil, nil)

var getDetachLoadBalancerTargetGroups* = Call_GetDetachLoadBalancerTargetGroups_604358(
    name: "getDetachLoadBalancerTargetGroups", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DetachLoadBalancerTargetGroups",
    validator: validate_GetDetachLoadBalancerTargetGroups_604359, base: "/",
    url: url_GetDetachLoadBalancerTargetGroups_604360,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDetachLoadBalancers_604410 = ref object of OpenApiRestCall_602466
proc url_PostDetachLoadBalancers_604412(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDetachLoadBalancers_604411(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Detaches one or more Classic Load Balancers from the specified Auto Scaling group.</p> <p>This operation detaches only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DetachLoadBalancerTargetGroups</a> instead.</p> <p>When you detach a load balancer, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using <a>DescribeLoadBalancers</a>. The instances remain running.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604413 = query.getOrDefault("Action")
  valid_604413 = validateParameter(valid_604413, JString, required = true,
                                 default = newJString("DetachLoadBalancers"))
  if valid_604413 != nil:
    section.add "Action", valid_604413
  var valid_604414 = query.getOrDefault("Version")
  valid_604414 = validateParameter(valid_604414, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604414 != nil:
    section.add "Version", valid_604414
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604415 = header.getOrDefault("X-Amz-Date")
  valid_604415 = validateParameter(valid_604415, JString, required = false,
                                 default = nil)
  if valid_604415 != nil:
    section.add "X-Amz-Date", valid_604415
  var valid_604416 = header.getOrDefault("X-Amz-Security-Token")
  valid_604416 = validateParameter(valid_604416, JString, required = false,
                                 default = nil)
  if valid_604416 != nil:
    section.add "X-Amz-Security-Token", valid_604416
  var valid_604417 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604417 = validateParameter(valid_604417, JString, required = false,
                                 default = nil)
  if valid_604417 != nil:
    section.add "X-Amz-Content-Sha256", valid_604417
  var valid_604418 = header.getOrDefault("X-Amz-Algorithm")
  valid_604418 = validateParameter(valid_604418, JString, required = false,
                                 default = nil)
  if valid_604418 != nil:
    section.add "X-Amz-Algorithm", valid_604418
  var valid_604419 = header.getOrDefault("X-Amz-Signature")
  valid_604419 = validateParameter(valid_604419, JString, required = false,
                                 default = nil)
  if valid_604419 != nil:
    section.add "X-Amz-Signature", valid_604419
  var valid_604420 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604420 = validateParameter(valid_604420, JString, required = false,
                                 default = nil)
  if valid_604420 != nil:
    section.add "X-Amz-SignedHeaders", valid_604420
  var valid_604421 = header.getOrDefault("X-Amz-Credential")
  valid_604421 = validateParameter(valid_604421, JString, required = false,
                                 default = nil)
  if valid_604421 != nil:
    section.add "X-Amz-Credential", valid_604421
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_604422 = formData.getOrDefault("AutoScalingGroupName")
  valid_604422 = validateParameter(valid_604422, JString, required = true,
                                 default = nil)
  if valid_604422 != nil:
    section.add "AutoScalingGroupName", valid_604422
  var valid_604423 = formData.getOrDefault("LoadBalancerNames")
  valid_604423 = validateParameter(valid_604423, JArray, required = true, default = nil)
  if valid_604423 != nil:
    section.add "LoadBalancerNames", valid_604423
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604424: Call_PostDetachLoadBalancers_604410; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Detaches one or more Classic Load Balancers from the specified Auto Scaling group.</p> <p>This operation detaches only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DetachLoadBalancerTargetGroups</a> instead.</p> <p>When you detach a load balancer, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using <a>DescribeLoadBalancers</a>. The instances remain running.</p>
  ## 
  let valid = call_604424.validator(path, query, header, formData, body)
  let scheme = call_604424.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604424.url(scheme.get, call_604424.host, call_604424.base,
                         call_604424.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604424, url, valid)

proc call*(call_604425: Call_PostDetachLoadBalancers_604410;
          AutoScalingGroupName: string; LoadBalancerNames: JsonNode;
          Action: string = "DetachLoadBalancers"; Version: string = "2011-01-01"): Recallable =
  ## postDetachLoadBalancers
  ## <p>Detaches one or more Classic Load Balancers from the specified Auto Scaling group.</p> <p>This operation detaches only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DetachLoadBalancerTargetGroups</a> instead.</p> <p>When you detach a load balancer, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using <a>DescribeLoadBalancers</a>. The instances remain running.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  ##   Version: string (required)
  var query_604426 = newJObject()
  var formData_604427 = newJObject()
  add(formData_604427, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_604426, "Action", newJString(Action))
  if LoadBalancerNames != nil:
    formData_604427.add "LoadBalancerNames", LoadBalancerNames
  add(query_604426, "Version", newJString(Version))
  result = call_604425.call(nil, query_604426, nil, formData_604427, nil)

var postDetachLoadBalancers* = Call_PostDetachLoadBalancers_604410(
    name: "postDetachLoadBalancers", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DetachLoadBalancers",
    validator: validate_PostDetachLoadBalancers_604411, base: "/",
    url: url_PostDetachLoadBalancers_604412, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDetachLoadBalancers_604393 = ref object of OpenApiRestCall_602466
proc url_GetDetachLoadBalancers_604395(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDetachLoadBalancers_604394(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Detaches one or more Classic Load Balancers from the specified Auto Scaling group.</p> <p>This operation detaches only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DetachLoadBalancerTargetGroups</a> instead.</p> <p>When you detach a load balancer, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using <a>DescribeLoadBalancers</a>. The instances remain running.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_604396 = query.getOrDefault("AutoScalingGroupName")
  valid_604396 = validateParameter(valid_604396, JString, required = true,
                                 default = nil)
  if valid_604396 != nil:
    section.add "AutoScalingGroupName", valid_604396
  var valid_604397 = query.getOrDefault("Action")
  valid_604397 = validateParameter(valid_604397, JString, required = true,
                                 default = newJString("DetachLoadBalancers"))
  if valid_604397 != nil:
    section.add "Action", valid_604397
  var valid_604398 = query.getOrDefault("LoadBalancerNames")
  valid_604398 = validateParameter(valid_604398, JArray, required = true, default = nil)
  if valid_604398 != nil:
    section.add "LoadBalancerNames", valid_604398
  var valid_604399 = query.getOrDefault("Version")
  valid_604399 = validateParameter(valid_604399, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604399 != nil:
    section.add "Version", valid_604399
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604400 = header.getOrDefault("X-Amz-Date")
  valid_604400 = validateParameter(valid_604400, JString, required = false,
                                 default = nil)
  if valid_604400 != nil:
    section.add "X-Amz-Date", valid_604400
  var valid_604401 = header.getOrDefault("X-Amz-Security-Token")
  valid_604401 = validateParameter(valid_604401, JString, required = false,
                                 default = nil)
  if valid_604401 != nil:
    section.add "X-Amz-Security-Token", valid_604401
  var valid_604402 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604402 = validateParameter(valid_604402, JString, required = false,
                                 default = nil)
  if valid_604402 != nil:
    section.add "X-Amz-Content-Sha256", valid_604402
  var valid_604403 = header.getOrDefault("X-Amz-Algorithm")
  valid_604403 = validateParameter(valid_604403, JString, required = false,
                                 default = nil)
  if valid_604403 != nil:
    section.add "X-Amz-Algorithm", valid_604403
  var valid_604404 = header.getOrDefault("X-Amz-Signature")
  valid_604404 = validateParameter(valid_604404, JString, required = false,
                                 default = nil)
  if valid_604404 != nil:
    section.add "X-Amz-Signature", valid_604404
  var valid_604405 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604405 = validateParameter(valid_604405, JString, required = false,
                                 default = nil)
  if valid_604405 != nil:
    section.add "X-Amz-SignedHeaders", valid_604405
  var valid_604406 = header.getOrDefault("X-Amz-Credential")
  valid_604406 = validateParameter(valid_604406, JString, required = false,
                                 default = nil)
  if valid_604406 != nil:
    section.add "X-Amz-Credential", valid_604406
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604407: Call_GetDetachLoadBalancers_604393; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Detaches one or more Classic Load Balancers from the specified Auto Scaling group.</p> <p>This operation detaches only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DetachLoadBalancerTargetGroups</a> instead.</p> <p>When you detach a load balancer, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using <a>DescribeLoadBalancers</a>. The instances remain running.</p>
  ## 
  let valid = call_604407.validator(path, query, header, formData, body)
  let scheme = call_604407.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604407.url(scheme.get, call_604407.host, call_604407.base,
                         call_604407.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604407, url, valid)

proc call*(call_604408: Call_GetDetachLoadBalancers_604393;
          AutoScalingGroupName: string; LoadBalancerNames: JsonNode;
          Action: string = "DetachLoadBalancers"; Version: string = "2011-01-01"): Recallable =
  ## getDetachLoadBalancers
  ## <p>Detaches one or more Classic Load Balancers from the specified Auto Scaling group.</p> <p>This operation detaches only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DetachLoadBalancerTargetGroups</a> instead.</p> <p>When you detach a load balancer, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using <a>DescribeLoadBalancers</a>. The instances remain running.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  ##   Version: string (required)
  var query_604409 = newJObject()
  add(query_604409, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_604409, "Action", newJString(Action))
  if LoadBalancerNames != nil:
    query_604409.add "LoadBalancerNames", LoadBalancerNames
  add(query_604409, "Version", newJString(Version))
  result = call_604408.call(nil, query_604409, nil, nil, nil)

var getDetachLoadBalancers* = Call_GetDetachLoadBalancers_604393(
    name: "getDetachLoadBalancers", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DetachLoadBalancers",
    validator: validate_GetDetachLoadBalancers_604394, base: "/",
    url: url_GetDetachLoadBalancers_604395, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDisableMetricsCollection_604445 = ref object of OpenApiRestCall_602466
proc url_PostDisableMetricsCollection_604447(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDisableMetricsCollection_604446(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disables group metrics for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604448 = query.getOrDefault("Action")
  valid_604448 = validateParameter(valid_604448, JString, required = true, default = newJString(
      "DisableMetricsCollection"))
  if valid_604448 != nil:
    section.add "Action", valid_604448
  var valid_604449 = query.getOrDefault("Version")
  valid_604449 = validateParameter(valid_604449, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604449 != nil:
    section.add "Version", valid_604449
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604450 = header.getOrDefault("X-Amz-Date")
  valid_604450 = validateParameter(valid_604450, JString, required = false,
                                 default = nil)
  if valid_604450 != nil:
    section.add "X-Amz-Date", valid_604450
  var valid_604451 = header.getOrDefault("X-Amz-Security-Token")
  valid_604451 = validateParameter(valid_604451, JString, required = false,
                                 default = nil)
  if valid_604451 != nil:
    section.add "X-Amz-Security-Token", valid_604451
  var valid_604452 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604452 = validateParameter(valid_604452, JString, required = false,
                                 default = nil)
  if valid_604452 != nil:
    section.add "X-Amz-Content-Sha256", valid_604452
  var valid_604453 = header.getOrDefault("X-Amz-Algorithm")
  valid_604453 = validateParameter(valid_604453, JString, required = false,
                                 default = nil)
  if valid_604453 != nil:
    section.add "X-Amz-Algorithm", valid_604453
  var valid_604454 = header.getOrDefault("X-Amz-Signature")
  valid_604454 = validateParameter(valid_604454, JString, required = false,
                                 default = nil)
  if valid_604454 != nil:
    section.add "X-Amz-Signature", valid_604454
  var valid_604455 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604455 = validateParameter(valid_604455, JString, required = false,
                                 default = nil)
  if valid_604455 != nil:
    section.add "X-Amz-SignedHeaders", valid_604455
  var valid_604456 = header.getOrDefault("X-Amz-Credential")
  valid_604456 = validateParameter(valid_604456, JString, required = false,
                                 default = nil)
  if valid_604456 != nil:
    section.add "X-Amz-Credential", valid_604456
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are disabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_604457 = formData.getOrDefault("AutoScalingGroupName")
  valid_604457 = validateParameter(valid_604457, JString, required = true,
                                 default = nil)
  if valid_604457 != nil:
    section.add "AutoScalingGroupName", valid_604457
  var valid_604458 = formData.getOrDefault("Metrics")
  valid_604458 = validateParameter(valid_604458, JArray, required = false,
                                 default = nil)
  if valid_604458 != nil:
    section.add "Metrics", valid_604458
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604459: Call_PostDisableMetricsCollection_604445; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disables group metrics for the specified Auto Scaling group.
  ## 
  let valid = call_604459.validator(path, query, header, formData, body)
  let scheme = call_604459.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604459.url(scheme.get, call_604459.host, call_604459.base,
                         call_604459.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604459, url, valid)

proc call*(call_604460: Call_PostDisableMetricsCollection_604445;
          AutoScalingGroupName: string; Metrics: JsonNode = nil;
          Action: string = "DisableMetricsCollection";
          Version: string = "2011-01-01"): Recallable =
  ## postDisableMetricsCollection
  ## Disables group metrics for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are disabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604461 = newJObject()
  var formData_604462 = newJObject()
  add(formData_604462, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if Metrics != nil:
    formData_604462.add "Metrics", Metrics
  add(query_604461, "Action", newJString(Action))
  add(query_604461, "Version", newJString(Version))
  result = call_604460.call(nil, query_604461, nil, formData_604462, nil)

var postDisableMetricsCollection* = Call_PostDisableMetricsCollection_604445(
    name: "postDisableMetricsCollection", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DisableMetricsCollection",
    validator: validate_PostDisableMetricsCollection_604446, base: "/",
    url: url_PostDisableMetricsCollection_604447,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDisableMetricsCollection_604428 = ref object of OpenApiRestCall_602466
proc url_GetDisableMetricsCollection_604430(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDisableMetricsCollection_604429(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disables group metrics for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are disabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_604431 = query.getOrDefault("AutoScalingGroupName")
  valid_604431 = validateParameter(valid_604431, JString, required = true,
                                 default = nil)
  if valid_604431 != nil:
    section.add "AutoScalingGroupName", valid_604431
  var valid_604432 = query.getOrDefault("Action")
  valid_604432 = validateParameter(valid_604432, JString, required = true, default = newJString(
      "DisableMetricsCollection"))
  if valid_604432 != nil:
    section.add "Action", valid_604432
  var valid_604433 = query.getOrDefault("Metrics")
  valid_604433 = validateParameter(valid_604433, JArray, required = false,
                                 default = nil)
  if valid_604433 != nil:
    section.add "Metrics", valid_604433
  var valid_604434 = query.getOrDefault("Version")
  valid_604434 = validateParameter(valid_604434, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604434 != nil:
    section.add "Version", valid_604434
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604435 = header.getOrDefault("X-Amz-Date")
  valid_604435 = validateParameter(valid_604435, JString, required = false,
                                 default = nil)
  if valid_604435 != nil:
    section.add "X-Amz-Date", valid_604435
  var valid_604436 = header.getOrDefault("X-Amz-Security-Token")
  valid_604436 = validateParameter(valid_604436, JString, required = false,
                                 default = nil)
  if valid_604436 != nil:
    section.add "X-Amz-Security-Token", valid_604436
  var valid_604437 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604437 = validateParameter(valid_604437, JString, required = false,
                                 default = nil)
  if valid_604437 != nil:
    section.add "X-Amz-Content-Sha256", valid_604437
  var valid_604438 = header.getOrDefault("X-Amz-Algorithm")
  valid_604438 = validateParameter(valid_604438, JString, required = false,
                                 default = nil)
  if valid_604438 != nil:
    section.add "X-Amz-Algorithm", valid_604438
  var valid_604439 = header.getOrDefault("X-Amz-Signature")
  valid_604439 = validateParameter(valid_604439, JString, required = false,
                                 default = nil)
  if valid_604439 != nil:
    section.add "X-Amz-Signature", valid_604439
  var valid_604440 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604440 = validateParameter(valid_604440, JString, required = false,
                                 default = nil)
  if valid_604440 != nil:
    section.add "X-Amz-SignedHeaders", valid_604440
  var valid_604441 = header.getOrDefault("X-Amz-Credential")
  valid_604441 = validateParameter(valid_604441, JString, required = false,
                                 default = nil)
  if valid_604441 != nil:
    section.add "X-Amz-Credential", valid_604441
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604442: Call_GetDisableMetricsCollection_604428; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disables group metrics for the specified Auto Scaling group.
  ## 
  let valid = call_604442.validator(path, query, header, formData, body)
  let scheme = call_604442.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604442.url(scheme.get, call_604442.host, call_604442.base,
                         call_604442.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604442, url, valid)

proc call*(call_604443: Call_GetDisableMetricsCollection_604428;
          AutoScalingGroupName: string;
          Action: string = "DisableMetricsCollection"; Metrics: JsonNode = nil;
          Version: string = "2011-01-01"): Recallable =
  ## getDisableMetricsCollection
  ## Disables group metrics for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are disabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  ##   Version: string (required)
  var query_604444 = newJObject()
  add(query_604444, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_604444, "Action", newJString(Action))
  if Metrics != nil:
    query_604444.add "Metrics", Metrics
  add(query_604444, "Version", newJString(Version))
  result = call_604443.call(nil, query_604444, nil, nil, nil)

var getDisableMetricsCollection* = Call_GetDisableMetricsCollection_604428(
    name: "getDisableMetricsCollection", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DisableMetricsCollection",
    validator: validate_GetDisableMetricsCollection_604429, base: "/",
    url: url_GetDisableMetricsCollection_604430,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostEnableMetricsCollection_604481 = ref object of OpenApiRestCall_602466
proc url_PostEnableMetricsCollection_604483(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostEnableMetricsCollection_604482(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Enables group metrics for the specified Auto Scaling group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html">Monitoring Your Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604484 = query.getOrDefault("Action")
  valid_604484 = validateParameter(valid_604484, JString, required = true, default = newJString(
      "EnableMetricsCollection"))
  if valid_604484 != nil:
    section.add "Action", valid_604484
  var valid_604485 = query.getOrDefault("Version")
  valid_604485 = validateParameter(valid_604485, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604485 != nil:
    section.add "Version", valid_604485
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604486 = header.getOrDefault("X-Amz-Date")
  valid_604486 = validateParameter(valid_604486, JString, required = false,
                                 default = nil)
  if valid_604486 != nil:
    section.add "X-Amz-Date", valid_604486
  var valid_604487 = header.getOrDefault("X-Amz-Security-Token")
  valid_604487 = validateParameter(valid_604487, JString, required = false,
                                 default = nil)
  if valid_604487 != nil:
    section.add "X-Amz-Security-Token", valid_604487
  var valid_604488 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604488 = validateParameter(valid_604488, JString, required = false,
                                 default = nil)
  if valid_604488 != nil:
    section.add "X-Amz-Content-Sha256", valid_604488
  var valid_604489 = header.getOrDefault("X-Amz-Algorithm")
  valid_604489 = validateParameter(valid_604489, JString, required = false,
                                 default = nil)
  if valid_604489 != nil:
    section.add "X-Amz-Algorithm", valid_604489
  var valid_604490 = header.getOrDefault("X-Amz-Signature")
  valid_604490 = validateParameter(valid_604490, JString, required = false,
                                 default = nil)
  if valid_604490 != nil:
    section.add "X-Amz-Signature", valid_604490
  var valid_604491 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604491 = validateParameter(valid_604491, JString, required = false,
                                 default = nil)
  if valid_604491 != nil:
    section.add "X-Amz-SignedHeaders", valid_604491
  var valid_604492 = header.getOrDefault("X-Amz-Credential")
  valid_604492 = validateParameter(valid_604492, JString, required = false,
                                 default = nil)
  if valid_604492 != nil:
    section.add "X-Amz-Credential", valid_604492
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are enabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  ##   Granularity: JString (required)
  ##              : The granularity to associate with the metrics to collect. The only valid value is <code>1Minute</code>.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_604493 = formData.getOrDefault("AutoScalingGroupName")
  valid_604493 = validateParameter(valid_604493, JString, required = true,
                                 default = nil)
  if valid_604493 != nil:
    section.add "AutoScalingGroupName", valid_604493
  var valid_604494 = formData.getOrDefault("Metrics")
  valid_604494 = validateParameter(valid_604494, JArray, required = false,
                                 default = nil)
  if valid_604494 != nil:
    section.add "Metrics", valid_604494
  var valid_604495 = formData.getOrDefault("Granularity")
  valid_604495 = validateParameter(valid_604495, JString, required = true,
                                 default = nil)
  if valid_604495 != nil:
    section.add "Granularity", valid_604495
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604496: Call_PostEnableMetricsCollection_604481; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Enables group metrics for the specified Auto Scaling group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html">Monitoring Your Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ## 
  let valid = call_604496.validator(path, query, header, formData, body)
  let scheme = call_604496.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604496.url(scheme.get, call_604496.host, call_604496.base,
                         call_604496.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604496, url, valid)

proc call*(call_604497: Call_PostEnableMetricsCollection_604481;
          AutoScalingGroupName: string; Granularity: string;
          Metrics: JsonNode = nil; Action: string = "EnableMetricsCollection";
          Version: string = "2011-01-01"): Recallable =
  ## postEnableMetricsCollection
  ## Enables group metrics for the specified Auto Scaling group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html">Monitoring Your Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are enabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  ##   Granularity: string (required)
  ##              : The granularity to associate with the metrics to collect. The only valid value is <code>1Minute</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604498 = newJObject()
  var formData_604499 = newJObject()
  add(formData_604499, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if Metrics != nil:
    formData_604499.add "Metrics", Metrics
  add(formData_604499, "Granularity", newJString(Granularity))
  add(query_604498, "Action", newJString(Action))
  add(query_604498, "Version", newJString(Version))
  result = call_604497.call(nil, query_604498, nil, formData_604499, nil)

var postEnableMetricsCollection* = Call_PostEnableMetricsCollection_604481(
    name: "postEnableMetricsCollection", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=EnableMetricsCollection",
    validator: validate_PostEnableMetricsCollection_604482, base: "/",
    url: url_PostEnableMetricsCollection_604483,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetEnableMetricsCollection_604463 = ref object of OpenApiRestCall_602466
proc url_GetEnableMetricsCollection_604465(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetEnableMetricsCollection_604464(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Enables group metrics for the specified Auto Scaling group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html">Monitoring Your Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Granularity: JString (required)
  ##              : The granularity to associate with the metrics to collect. The only valid value is <code>1Minute</code>.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are enabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Granularity` field"
  var valid_604466 = query.getOrDefault("Granularity")
  valid_604466 = validateParameter(valid_604466, JString, required = true,
                                 default = nil)
  if valid_604466 != nil:
    section.add "Granularity", valid_604466
  var valid_604467 = query.getOrDefault("AutoScalingGroupName")
  valid_604467 = validateParameter(valid_604467, JString, required = true,
                                 default = nil)
  if valid_604467 != nil:
    section.add "AutoScalingGroupName", valid_604467
  var valid_604468 = query.getOrDefault("Action")
  valid_604468 = validateParameter(valid_604468, JString, required = true, default = newJString(
      "EnableMetricsCollection"))
  if valid_604468 != nil:
    section.add "Action", valid_604468
  var valid_604469 = query.getOrDefault("Metrics")
  valid_604469 = validateParameter(valid_604469, JArray, required = false,
                                 default = nil)
  if valid_604469 != nil:
    section.add "Metrics", valid_604469
  var valid_604470 = query.getOrDefault("Version")
  valid_604470 = validateParameter(valid_604470, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604470 != nil:
    section.add "Version", valid_604470
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604471 = header.getOrDefault("X-Amz-Date")
  valid_604471 = validateParameter(valid_604471, JString, required = false,
                                 default = nil)
  if valid_604471 != nil:
    section.add "X-Amz-Date", valid_604471
  var valid_604472 = header.getOrDefault("X-Amz-Security-Token")
  valid_604472 = validateParameter(valid_604472, JString, required = false,
                                 default = nil)
  if valid_604472 != nil:
    section.add "X-Amz-Security-Token", valid_604472
  var valid_604473 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604473 = validateParameter(valid_604473, JString, required = false,
                                 default = nil)
  if valid_604473 != nil:
    section.add "X-Amz-Content-Sha256", valid_604473
  var valid_604474 = header.getOrDefault("X-Amz-Algorithm")
  valid_604474 = validateParameter(valid_604474, JString, required = false,
                                 default = nil)
  if valid_604474 != nil:
    section.add "X-Amz-Algorithm", valid_604474
  var valid_604475 = header.getOrDefault("X-Amz-Signature")
  valid_604475 = validateParameter(valid_604475, JString, required = false,
                                 default = nil)
  if valid_604475 != nil:
    section.add "X-Amz-Signature", valid_604475
  var valid_604476 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604476 = validateParameter(valid_604476, JString, required = false,
                                 default = nil)
  if valid_604476 != nil:
    section.add "X-Amz-SignedHeaders", valid_604476
  var valid_604477 = header.getOrDefault("X-Amz-Credential")
  valid_604477 = validateParameter(valid_604477, JString, required = false,
                                 default = nil)
  if valid_604477 != nil:
    section.add "X-Amz-Credential", valid_604477
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604478: Call_GetEnableMetricsCollection_604463; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Enables group metrics for the specified Auto Scaling group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html">Monitoring Your Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ## 
  let valid = call_604478.validator(path, query, header, formData, body)
  let scheme = call_604478.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604478.url(scheme.get, call_604478.host, call_604478.base,
                         call_604478.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604478, url, valid)

proc call*(call_604479: Call_GetEnableMetricsCollection_604463;
          Granularity: string; AutoScalingGroupName: string;
          Action: string = "EnableMetricsCollection"; Metrics: JsonNode = nil;
          Version: string = "2011-01-01"): Recallable =
  ## getEnableMetricsCollection
  ## Enables group metrics for the specified Auto Scaling group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html">Monitoring Your Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   Granularity: string (required)
  ##              : The granularity to associate with the metrics to collect. The only valid value is <code>1Minute</code>.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are enabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  ##   Version: string (required)
  var query_604480 = newJObject()
  add(query_604480, "Granularity", newJString(Granularity))
  add(query_604480, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_604480, "Action", newJString(Action))
  if Metrics != nil:
    query_604480.add "Metrics", Metrics
  add(query_604480, "Version", newJString(Version))
  result = call_604479.call(nil, query_604480, nil, nil, nil)

var getEnableMetricsCollection* = Call_GetEnableMetricsCollection_604463(
    name: "getEnableMetricsCollection", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=EnableMetricsCollection",
    validator: validate_GetEnableMetricsCollection_604464, base: "/",
    url: url_GetEnableMetricsCollection_604465,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostEnterStandby_604518 = ref object of OpenApiRestCall_602466
proc url_PostEnterStandby_604520(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostEnterStandby_604519(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Moves the specified instances into the standby state.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604521 = query.getOrDefault("Action")
  valid_604521 = validateParameter(valid_604521, JString, required = true,
                                 default = newJString("EnterStandby"))
  if valid_604521 != nil:
    section.add "Action", valid_604521
  var valid_604522 = query.getOrDefault("Version")
  valid_604522 = validateParameter(valid_604522, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604522 != nil:
    section.add "Version", valid_604522
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604523 = header.getOrDefault("X-Amz-Date")
  valid_604523 = validateParameter(valid_604523, JString, required = false,
                                 default = nil)
  if valid_604523 != nil:
    section.add "X-Amz-Date", valid_604523
  var valid_604524 = header.getOrDefault("X-Amz-Security-Token")
  valid_604524 = validateParameter(valid_604524, JString, required = false,
                                 default = nil)
  if valid_604524 != nil:
    section.add "X-Amz-Security-Token", valid_604524
  var valid_604525 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604525 = validateParameter(valid_604525, JString, required = false,
                                 default = nil)
  if valid_604525 != nil:
    section.add "X-Amz-Content-Sha256", valid_604525
  var valid_604526 = header.getOrDefault("X-Amz-Algorithm")
  valid_604526 = validateParameter(valid_604526, JString, required = false,
                                 default = nil)
  if valid_604526 != nil:
    section.add "X-Amz-Algorithm", valid_604526
  var valid_604527 = header.getOrDefault("X-Amz-Signature")
  valid_604527 = validateParameter(valid_604527, JString, required = false,
                                 default = nil)
  if valid_604527 != nil:
    section.add "X-Amz-Signature", valid_604527
  var valid_604528 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604528 = validateParameter(valid_604528, JString, required = false,
                                 default = nil)
  if valid_604528 != nil:
    section.add "X-Amz-SignedHeaders", valid_604528
  var valid_604529 = header.getOrDefault("X-Amz-Credential")
  valid_604529 = validateParameter(valid_604529, JString, required = false,
                                 default = nil)
  if valid_604529 != nil:
    section.add "X-Amz-Credential", valid_604529
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   ShouldDecrementDesiredCapacity: JBool (required)
  ##                                 : Indicates whether to decrement the desired capacity of the Auto Scaling group by the number of instances moved to <code>Standby</code> mode.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_604530 = formData.getOrDefault("AutoScalingGroupName")
  valid_604530 = validateParameter(valid_604530, JString, required = true,
                                 default = nil)
  if valid_604530 != nil:
    section.add "AutoScalingGroupName", valid_604530
  var valid_604531 = formData.getOrDefault("InstanceIds")
  valid_604531 = validateParameter(valid_604531, JArray, required = false,
                                 default = nil)
  if valid_604531 != nil:
    section.add "InstanceIds", valid_604531
  var valid_604532 = formData.getOrDefault("ShouldDecrementDesiredCapacity")
  valid_604532 = validateParameter(valid_604532, JBool, required = true, default = nil)
  if valid_604532 != nil:
    section.add "ShouldDecrementDesiredCapacity", valid_604532
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604533: Call_PostEnterStandby_604518; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Moves the specified instances into the standby state.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_604533.validator(path, query, header, formData, body)
  let scheme = call_604533.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604533.url(scheme.get, call_604533.host, call_604533.base,
                         call_604533.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604533, url, valid)

proc call*(call_604534: Call_PostEnterStandby_604518; AutoScalingGroupName: string;
          ShouldDecrementDesiredCapacity: bool; InstanceIds: JsonNode = nil;
          Action: string = "EnterStandby"; Version: string = "2011-01-01"): Recallable =
  ## postEnterStandby
  ## <p>Moves the specified instances into the standby state.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   ShouldDecrementDesiredCapacity: bool (required)
  ##                                 : Indicates whether to decrement the desired capacity of the Auto Scaling group by the number of instances moved to <code>Standby</code> mode.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604535 = newJObject()
  var formData_604536 = newJObject()
  add(formData_604536, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if InstanceIds != nil:
    formData_604536.add "InstanceIds", InstanceIds
  add(formData_604536, "ShouldDecrementDesiredCapacity",
      newJBool(ShouldDecrementDesiredCapacity))
  add(query_604535, "Action", newJString(Action))
  add(query_604535, "Version", newJString(Version))
  result = call_604534.call(nil, query_604535, nil, formData_604536, nil)

var postEnterStandby* = Call_PostEnterStandby_604518(name: "postEnterStandby",
    meth: HttpMethod.HttpPost, host: "autoscaling.amazonaws.com",
    route: "/#Action=EnterStandby", validator: validate_PostEnterStandby_604519,
    base: "/", url: url_PostEnterStandby_604520,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetEnterStandby_604500 = ref object of OpenApiRestCall_602466
proc url_GetEnterStandby_604502(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetEnterStandby_604501(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Moves the specified instances into the standby state.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   ShouldDecrementDesiredCapacity: JBool (required)
  ##                                 : Indicates whether to decrement the desired capacity of the Auto Scaling group by the number of instances moved to <code>Standby</code> mode.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_604503 = query.getOrDefault("AutoScalingGroupName")
  valid_604503 = validateParameter(valid_604503, JString, required = true,
                                 default = nil)
  if valid_604503 != nil:
    section.add "AutoScalingGroupName", valid_604503
  var valid_604504 = query.getOrDefault("Action")
  valid_604504 = validateParameter(valid_604504, JString, required = true,
                                 default = newJString("EnterStandby"))
  if valid_604504 != nil:
    section.add "Action", valid_604504
  var valid_604505 = query.getOrDefault("ShouldDecrementDesiredCapacity")
  valid_604505 = validateParameter(valid_604505, JBool, required = true, default = nil)
  if valid_604505 != nil:
    section.add "ShouldDecrementDesiredCapacity", valid_604505
  var valid_604506 = query.getOrDefault("InstanceIds")
  valid_604506 = validateParameter(valid_604506, JArray, required = false,
                                 default = nil)
  if valid_604506 != nil:
    section.add "InstanceIds", valid_604506
  var valid_604507 = query.getOrDefault("Version")
  valid_604507 = validateParameter(valid_604507, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604507 != nil:
    section.add "Version", valid_604507
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604508 = header.getOrDefault("X-Amz-Date")
  valid_604508 = validateParameter(valid_604508, JString, required = false,
                                 default = nil)
  if valid_604508 != nil:
    section.add "X-Amz-Date", valid_604508
  var valid_604509 = header.getOrDefault("X-Amz-Security-Token")
  valid_604509 = validateParameter(valid_604509, JString, required = false,
                                 default = nil)
  if valid_604509 != nil:
    section.add "X-Amz-Security-Token", valid_604509
  var valid_604510 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604510 = validateParameter(valid_604510, JString, required = false,
                                 default = nil)
  if valid_604510 != nil:
    section.add "X-Amz-Content-Sha256", valid_604510
  var valid_604511 = header.getOrDefault("X-Amz-Algorithm")
  valid_604511 = validateParameter(valid_604511, JString, required = false,
                                 default = nil)
  if valid_604511 != nil:
    section.add "X-Amz-Algorithm", valid_604511
  var valid_604512 = header.getOrDefault("X-Amz-Signature")
  valid_604512 = validateParameter(valid_604512, JString, required = false,
                                 default = nil)
  if valid_604512 != nil:
    section.add "X-Amz-Signature", valid_604512
  var valid_604513 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604513 = validateParameter(valid_604513, JString, required = false,
                                 default = nil)
  if valid_604513 != nil:
    section.add "X-Amz-SignedHeaders", valid_604513
  var valid_604514 = header.getOrDefault("X-Amz-Credential")
  valid_604514 = validateParameter(valid_604514, JString, required = false,
                                 default = nil)
  if valid_604514 != nil:
    section.add "X-Amz-Credential", valid_604514
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604515: Call_GetEnterStandby_604500; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Moves the specified instances into the standby state.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_604515.validator(path, query, header, formData, body)
  let scheme = call_604515.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604515.url(scheme.get, call_604515.host, call_604515.base,
                         call_604515.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604515, url, valid)

proc call*(call_604516: Call_GetEnterStandby_604500; AutoScalingGroupName: string;
          ShouldDecrementDesiredCapacity: bool; Action: string = "EnterStandby";
          InstanceIds: JsonNode = nil; Version: string = "2011-01-01"): Recallable =
  ## getEnterStandby
  ## <p>Moves the specified instances into the standby state.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   ShouldDecrementDesiredCapacity: bool (required)
  ##                                 : Indicates whether to decrement the desired capacity of the Auto Scaling group by the number of instances moved to <code>Standby</code> mode.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Version: string (required)
  var query_604517 = newJObject()
  add(query_604517, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_604517, "Action", newJString(Action))
  add(query_604517, "ShouldDecrementDesiredCapacity",
      newJBool(ShouldDecrementDesiredCapacity))
  if InstanceIds != nil:
    query_604517.add "InstanceIds", InstanceIds
  add(query_604517, "Version", newJString(Version))
  result = call_604516.call(nil, query_604517, nil, nil, nil)

var getEnterStandby* = Call_GetEnterStandby_604500(name: "getEnterStandby",
    meth: HttpMethod.HttpGet, host: "autoscaling.amazonaws.com",
    route: "/#Action=EnterStandby", validator: validate_GetEnterStandby_604501,
    base: "/", url: url_GetEnterStandby_604502, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostExecutePolicy_604557 = ref object of OpenApiRestCall_602466
proc url_PostExecutePolicy_604559(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostExecutePolicy_604558(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Executes the specified policy.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604560 = query.getOrDefault("Action")
  valid_604560 = validateParameter(valid_604560, JString, required = true,
                                 default = newJString("ExecutePolicy"))
  if valid_604560 != nil:
    section.add "Action", valid_604560
  var valid_604561 = query.getOrDefault("Version")
  valid_604561 = validateParameter(valid_604561, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604561 != nil:
    section.add "Version", valid_604561
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604562 = header.getOrDefault("X-Amz-Date")
  valid_604562 = validateParameter(valid_604562, JString, required = false,
                                 default = nil)
  if valid_604562 != nil:
    section.add "X-Amz-Date", valid_604562
  var valid_604563 = header.getOrDefault("X-Amz-Security-Token")
  valid_604563 = validateParameter(valid_604563, JString, required = false,
                                 default = nil)
  if valid_604563 != nil:
    section.add "X-Amz-Security-Token", valid_604563
  var valid_604564 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604564 = validateParameter(valid_604564, JString, required = false,
                                 default = nil)
  if valid_604564 != nil:
    section.add "X-Amz-Content-Sha256", valid_604564
  var valid_604565 = header.getOrDefault("X-Amz-Algorithm")
  valid_604565 = validateParameter(valid_604565, JString, required = false,
                                 default = nil)
  if valid_604565 != nil:
    section.add "X-Amz-Algorithm", valid_604565
  var valid_604566 = header.getOrDefault("X-Amz-Signature")
  valid_604566 = validateParameter(valid_604566, JString, required = false,
                                 default = nil)
  if valid_604566 != nil:
    section.add "X-Amz-Signature", valid_604566
  var valid_604567 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604567 = validateParameter(valid_604567, JString, required = false,
                                 default = nil)
  if valid_604567 != nil:
    section.add "X-Amz-SignedHeaders", valid_604567
  var valid_604568 = header.getOrDefault("X-Amz-Credential")
  valid_604568 = validateParameter(valid_604568, JString, required = false,
                                 default = nil)
  if valid_604568 != nil:
    section.add "X-Amz-Credential", valid_604568
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   PolicyName: JString (required)
  ##             : The name or ARN of the policy.
  ##   MetricValue: JFloat
  ##              : <p>The metric value to compare to <code>BreachThreshold</code>. This enables you to execute a policy of type <code>StepScaling</code> and determine which step adjustment to use. For example, if the breach threshold is 50 and you want to use a step adjustment with a lower bound of 0 and an upper bound of 10, you can set the metric value to 59.</p> <p>If you specify a metric value that doesn't correspond to a step adjustment for the policy, the call returns an error.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   HonorCooldown: JBool
  ##                : <p>Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before executing the policy.</p> <p>This parameter is not supported if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   BreachThreshold: JFloat
  ##                  : <p>The breach threshold for the alarm.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  section = newJObject()
  var valid_604569 = formData.getOrDefault("AutoScalingGroupName")
  valid_604569 = validateParameter(valid_604569, JString, required = false,
                                 default = nil)
  if valid_604569 != nil:
    section.add "AutoScalingGroupName", valid_604569
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_604570 = formData.getOrDefault("PolicyName")
  valid_604570 = validateParameter(valid_604570, JString, required = true,
                                 default = nil)
  if valid_604570 != nil:
    section.add "PolicyName", valid_604570
  var valid_604571 = formData.getOrDefault("MetricValue")
  valid_604571 = validateParameter(valid_604571, JFloat, required = false,
                                 default = nil)
  if valid_604571 != nil:
    section.add "MetricValue", valid_604571
  var valid_604572 = formData.getOrDefault("HonorCooldown")
  valid_604572 = validateParameter(valid_604572, JBool, required = false, default = nil)
  if valid_604572 != nil:
    section.add "HonorCooldown", valid_604572
  var valid_604573 = formData.getOrDefault("BreachThreshold")
  valid_604573 = validateParameter(valid_604573, JFloat, required = false,
                                 default = nil)
  if valid_604573 != nil:
    section.add "BreachThreshold", valid_604573
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604574: Call_PostExecutePolicy_604557; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Executes the specified policy.
  ## 
  let valid = call_604574.validator(path, query, header, formData, body)
  let scheme = call_604574.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604574.url(scheme.get, call_604574.host, call_604574.base,
                         call_604574.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604574, url, valid)

proc call*(call_604575: Call_PostExecutePolicy_604557; PolicyName: string;
          AutoScalingGroupName: string = ""; MetricValue: float = 0.0;
          HonorCooldown: bool = false; BreachThreshold: float = 0.0;
          Action: string = "ExecutePolicy"; Version: string = "2011-01-01"): Recallable =
  ## postExecutePolicy
  ## Executes the specified policy.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   PolicyName: string (required)
  ##             : The name or ARN of the policy.
  ##   MetricValue: float
  ##              : <p>The metric value to compare to <code>BreachThreshold</code>. This enables you to execute a policy of type <code>StepScaling</code> and determine which step adjustment to use. For example, if the breach threshold is 50 and you want to use a step adjustment with a lower bound of 0 and an upper bound of 10, you can set the metric value to 59.</p> <p>If you specify a metric value that doesn't correspond to a step adjustment for the policy, the call returns an error.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   HonorCooldown: bool
  ##                : <p>Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before executing the policy.</p> <p>This parameter is not supported if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   BreachThreshold: float
  ##                  : <p>The breach threshold for the alarm.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604576 = newJObject()
  var formData_604577 = newJObject()
  add(formData_604577, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_604577, "PolicyName", newJString(PolicyName))
  add(formData_604577, "MetricValue", newJFloat(MetricValue))
  add(formData_604577, "HonorCooldown", newJBool(HonorCooldown))
  add(formData_604577, "BreachThreshold", newJFloat(BreachThreshold))
  add(query_604576, "Action", newJString(Action))
  add(query_604576, "Version", newJString(Version))
  result = call_604575.call(nil, query_604576, nil, formData_604577, nil)

var postExecutePolicy* = Call_PostExecutePolicy_604557(name: "postExecutePolicy",
    meth: HttpMethod.HttpPost, host: "autoscaling.amazonaws.com",
    route: "/#Action=ExecutePolicy", validator: validate_PostExecutePolicy_604558,
    base: "/", url: url_PostExecutePolicy_604559,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetExecutePolicy_604537 = ref object of OpenApiRestCall_602466
proc url_GetExecutePolicy_604539(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetExecutePolicy_604538(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Executes the specified policy.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   MetricValue: JFloat
  ##              : <p>The metric value to compare to <code>BreachThreshold</code>. This enables you to execute a policy of type <code>StepScaling</code> and determine which step adjustment to use. For example, if the breach threshold is 50 and you want to use a step adjustment with a lower bound of 0 and an upper bound of 10, you can set the metric value to 59.</p> <p>If you specify a metric value that doesn't correspond to a step adjustment for the policy, the call returns an error.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   BreachThreshold: JFloat
  ##                  : <p>The breach threshold for the alarm.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   Action: JString (required)
  ##   HonorCooldown: JBool
  ##                : <p>Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before executing the policy.</p> <p>This parameter is not supported if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : The name or ARN of the policy.
  section = newJObject()
  var valid_604540 = query.getOrDefault("AutoScalingGroupName")
  valid_604540 = validateParameter(valid_604540, JString, required = false,
                                 default = nil)
  if valid_604540 != nil:
    section.add "AutoScalingGroupName", valid_604540
  var valid_604541 = query.getOrDefault("MetricValue")
  valid_604541 = validateParameter(valid_604541, JFloat, required = false,
                                 default = nil)
  if valid_604541 != nil:
    section.add "MetricValue", valid_604541
  var valid_604542 = query.getOrDefault("BreachThreshold")
  valid_604542 = validateParameter(valid_604542, JFloat, required = false,
                                 default = nil)
  if valid_604542 != nil:
    section.add "BreachThreshold", valid_604542
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604543 = query.getOrDefault("Action")
  valid_604543 = validateParameter(valid_604543, JString, required = true,
                                 default = newJString("ExecutePolicy"))
  if valid_604543 != nil:
    section.add "Action", valid_604543
  var valid_604544 = query.getOrDefault("HonorCooldown")
  valid_604544 = validateParameter(valid_604544, JBool, required = false, default = nil)
  if valid_604544 != nil:
    section.add "HonorCooldown", valid_604544
  var valid_604545 = query.getOrDefault("Version")
  valid_604545 = validateParameter(valid_604545, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604545 != nil:
    section.add "Version", valid_604545
  var valid_604546 = query.getOrDefault("PolicyName")
  valid_604546 = validateParameter(valid_604546, JString, required = true,
                                 default = nil)
  if valid_604546 != nil:
    section.add "PolicyName", valid_604546
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604547 = header.getOrDefault("X-Amz-Date")
  valid_604547 = validateParameter(valid_604547, JString, required = false,
                                 default = nil)
  if valid_604547 != nil:
    section.add "X-Amz-Date", valid_604547
  var valid_604548 = header.getOrDefault("X-Amz-Security-Token")
  valid_604548 = validateParameter(valid_604548, JString, required = false,
                                 default = nil)
  if valid_604548 != nil:
    section.add "X-Amz-Security-Token", valid_604548
  var valid_604549 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604549 = validateParameter(valid_604549, JString, required = false,
                                 default = nil)
  if valid_604549 != nil:
    section.add "X-Amz-Content-Sha256", valid_604549
  var valid_604550 = header.getOrDefault("X-Amz-Algorithm")
  valid_604550 = validateParameter(valid_604550, JString, required = false,
                                 default = nil)
  if valid_604550 != nil:
    section.add "X-Amz-Algorithm", valid_604550
  var valid_604551 = header.getOrDefault("X-Amz-Signature")
  valid_604551 = validateParameter(valid_604551, JString, required = false,
                                 default = nil)
  if valid_604551 != nil:
    section.add "X-Amz-Signature", valid_604551
  var valid_604552 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604552 = validateParameter(valid_604552, JString, required = false,
                                 default = nil)
  if valid_604552 != nil:
    section.add "X-Amz-SignedHeaders", valid_604552
  var valid_604553 = header.getOrDefault("X-Amz-Credential")
  valid_604553 = validateParameter(valid_604553, JString, required = false,
                                 default = nil)
  if valid_604553 != nil:
    section.add "X-Amz-Credential", valid_604553
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604554: Call_GetExecutePolicy_604537; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Executes the specified policy.
  ## 
  let valid = call_604554.validator(path, query, header, formData, body)
  let scheme = call_604554.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604554.url(scheme.get, call_604554.host, call_604554.base,
                         call_604554.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604554, url, valid)

proc call*(call_604555: Call_GetExecutePolicy_604537; PolicyName: string;
          AutoScalingGroupName: string = ""; MetricValue: float = 0.0;
          BreachThreshold: float = 0.0; Action: string = "ExecutePolicy";
          HonorCooldown: bool = false; Version: string = "2011-01-01"): Recallable =
  ## getExecutePolicy
  ## Executes the specified policy.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   MetricValue: float
  ##              : <p>The metric value to compare to <code>BreachThreshold</code>. This enables you to execute a policy of type <code>StepScaling</code> and determine which step adjustment to use. For example, if the breach threshold is 50 and you want to use a step adjustment with a lower bound of 0 and an upper bound of 10, you can set the metric value to 59.</p> <p>If you specify a metric value that doesn't correspond to a step adjustment for the policy, the call returns an error.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   BreachThreshold: float
  ##                  : <p>The breach threshold for the alarm.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   Action: string (required)
  ##   HonorCooldown: bool
  ##                : <p>Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before executing the policy.</p> <p>This parameter is not supported if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : The name or ARN of the policy.
  var query_604556 = newJObject()
  add(query_604556, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_604556, "MetricValue", newJFloat(MetricValue))
  add(query_604556, "BreachThreshold", newJFloat(BreachThreshold))
  add(query_604556, "Action", newJString(Action))
  add(query_604556, "HonorCooldown", newJBool(HonorCooldown))
  add(query_604556, "Version", newJString(Version))
  add(query_604556, "PolicyName", newJString(PolicyName))
  result = call_604555.call(nil, query_604556, nil, nil, nil)

var getExecutePolicy* = Call_GetExecutePolicy_604537(name: "getExecutePolicy",
    meth: HttpMethod.HttpGet, host: "autoscaling.amazonaws.com",
    route: "/#Action=ExecutePolicy", validator: validate_GetExecutePolicy_604538,
    base: "/", url: url_GetExecutePolicy_604539,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostExitStandby_604595 = ref object of OpenApiRestCall_602466
proc url_PostExitStandby_604597(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostExitStandby_604596(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Moves the specified instances out of the standby state.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604598 = query.getOrDefault("Action")
  valid_604598 = validateParameter(valid_604598, JString, required = true,
                                 default = newJString("ExitStandby"))
  if valid_604598 != nil:
    section.add "Action", valid_604598
  var valid_604599 = query.getOrDefault("Version")
  valid_604599 = validateParameter(valid_604599, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604599 != nil:
    section.add "Version", valid_604599
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604600 = header.getOrDefault("X-Amz-Date")
  valid_604600 = validateParameter(valid_604600, JString, required = false,
                                 default = nil)
  if valid_604600 != nil:
    section.add "X-Amz-Date", valid_604600
  var valid_604601 = header.getOrDefault("X-Amz-Security-Token")
  valid_604601 = validateParameter(valid_604601, JString, required = false,
                                 default = nil)
  if valid_604601 != nil:
    section.add "X-Amz-Security-Token", valid_604601
  var valid_604602 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604602 = validateParameter(valid_604602, JString, required = false,
                                 default = nil)
  if valid_604602 != nil:
    section.add "X-Amz-Content-Sha256", valid_604602
  var valid_604603 = header.getOrDefault("X-Amz-Algorithm")
  valid_604603 = validateParameter(valid_604603, JString, required = false,
                                 default = nil)
  if valid_604603 != nil:
    section.add "X-Amz-Algorithm", valid_604603
  var valid_604604 = header.getOrDefault("X-Amz-Signature")
  valid_604604 = validateParameter(valid_604604, JString, required = false,
                                 default = nil)
  if valid_604604 != nil:
    section.add "X-Amz-Signature", valid_604604
  var valid_604605 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604605 = validateParameter(valid_604605, JString, required = false,
                                 default = nil)
  if valid_604605 != nil:
    section.add "X-Amz-SignedHeaders", valid_604605
  var valid_604606 = header.getOrDefault("X-Amz-Credential")
  valid_604606 = validateParameter(valid_604606, JString, required = false,
                                 default = nil)
  if valid_604606 != nil:
    section.add "X-Amz-Credential", valid_604606
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_604607 = formData.getOrDefault("AutoScalingGroupName")
  valid_604607 = validateParameter(valid_604607, JString, required = true,
                                 default = nil)
  if valid_604607 != nil:
    section.add "AutoScalingGroupName", valid_604607
  var valid_604608 = formData.getOrDefault("InstanceIds")
  valid_604608 = validateParameter(valid_604608, JArray, required = false,
                                 default = nil)
  if valid_604608 != nil:
    section.add "InstanceIds", valid_604608
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604609: Call_PostExitStandby_604595; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Moves the specified instances out of the standby state.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_604609.validator(path, query, header, formData, body)
  let scheme = call_604609.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604609.url(scheme.get, call_604609.host, call_604609.base,
                         call_604609.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604609, url, valid)

proc call*(call_604610: Call_PostExitStandby_604595; AutoScalingGroupName: string;
          InstanceIds: JsonNode = nil; Action: string = "ExitStandby";
          Version: string = "2011-01-01"): Recallable =
  ## postExitStandby
  ## <p>Moves the specified instances out of the standby state.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604611 = newJObject()
  var formData_604612 = newJObject()
  add(formData_604612, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if InstanceIds != nil:
    formData_604612.add "InstanceIds", InstanceIds
  add(query_604611, "Action", newJString(Action))
  add(query_604611, "Version", newJString(Version))
  result = call_604610.call(nil, query_604611, nil, formData_604612, nil)

var postExitStandby* = Call_PostExitStandby_604595(name: "postExitStandby",
    meth: HttpMethod.HttpPost, host: "autoscaling.amazonaws.com",
    route: "/#Action=ExitStandby", validator: validate_PostExitStandby_604596,
    base: "/", url: url_PostExitStandby_604597, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetExitStandby_604578 = ref object of OpenApiRestCall_602466
proc url_GetExitStandby_604580(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetExitStandby_604579(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Moves the specified instances out of the standby state.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_604581 = query.getOrDefault("AutoScalingGroupName")
  valid_604581 = validateParameter(valid_604581, JString, required = true,
                                 default = nil)
  if valid_604581 != nil:
    section.add "AutoScalingGroupName", valid_604581
  var valid_604582 = query.getOrDefault("Action")
  valid_604582 = validateParameter(valid_604582, JString, required = true,
                                 default = newJString("ExitStandby"))
  if valid_604582 != nil:
    section.add "Action", valid_604582
  var valid_604583 = query.getOrDefault("InstanceIds")
  valid_604583 = validateParameter(valid_604583, JArray, required = false,
                                 default = nil)
  if valid_604583 != nil:
    section.add "InstanceIds", valid_604583
  var valid_604584 = query.getOrDefault("Version")
  valid_604584 = validateParameter(valid_604584, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604584 != nil:
    section.add "Version", valid_604584
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604585 = header.getOrDefault("X-Amz-Date")
  valid_604585 = validateParameter(valid_604585, JString, required = false,
                                 default = nil)
  if valid_604585 != nil:
    section.add "X-Amz-Date", valid_604585
  var valid_604586 = header.getOrDefault("X-Amz-Security-Token")
  valid_604586 = validateParameter(valid_604586, JString, required = false,
                                 default = nil)
  if valid_604586 != nil:
    section.add "X-Amz-Security-Token", valid_604586
  var valid_604587 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604587 = validateParameter(valid_604587, JString, required = false,
                                 default = nil)
  if valid_604587 != nil:
    section.add "X-Amz-Content-Sha256", valid_604587
  var valid_604588 = header.getOrDefault("X-Amz-Algorithm")
  valid_604588 = validateParameter(valid_604588, JString, required = false,
                                 default = nil)
  if valid_604588 != nil:
    section.add "X-Amz-Algorithm", valid_604588
  var valid_604589 = header.getOrDefault("X-Amz-Signature")
  valid_604589 = validateParameter(valid_604589, JString, required = false,
                                 default = nil)
  if valid_604589 != nil:
    section.add "X-Amz-Signature", valid_604589
  var valid_604590 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604590 = validateParameter(valid_604590, JString, required = false,
                                 default = nil)
  if valid_604590 != nil:
    section.add "X-Amz-SignedHeaders", valid_604590
  var valid_604591 = header.getOrDefault("X-Amz-Credential")
  valid_604591 = validateParameter(valid_604591, JString, required = false,
                                 default = nil)
  if valid_604591 != nil:
    section.add "X-Amz-Credential", valid_604591
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604592: Call_GetExitStandby_604578; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Moves the specified instances out of the standby state.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_604592.validator(path, query, header, formData, body)
  let scheme = call_604592.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604592.url(scheme.get, call_604592.host, call_604592.base,
                         call_604592.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604592, url, valid)

proc call*(call_604593: Call_GetExitStandby_604578; AutoScalingGroupName: string;
          Action: string = "ExitStandby"; InstanceIds: JsonNode = nil;
          Version: string = "2011-01-01"): Recallable =
  ## getExitStandby
  ## <p>Moves the specified instances out of the standby state.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Version: string (required)
  var query_604594 = newJObject()
  add(query_604594, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_604594, "Action", newJString(Action))
  if InstanceIds != nil:
    query_604594.add "InstanceIds", InstanceIds
  add(query_604594, "Version", newJString(Version))
  result = call_604593.call(nil, query_604594, nil, nil, nil)

var getExitStandby* = Call_GetExitStandby_604578(name: "getExitStandby",
    meth: HttpMethod.HttpGet, host: "autoscaling.amazonaws.com",
    route: "/#Action=ExitStandby", validator: validate_GetExitStandby_604579,
    base: "/", url: url_GetExitStandby_604580, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutLifecycleHook_604636 = ref object of OpenApiRestCall_602466
proc url_PostPutLifecycleHook_604638(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostPutLifecycleHook_604637(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates or updates a lifecycle hook for the specified Auto Scaling group.</p> <p>A lifecycle hook tells Amazon EC2 Auto Scaling to perform an action on an instance when the instance launches (before it is put into service) or as the instance terminates (before it is fully terminated).</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p> <b>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</b> </p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state using <a>RecordLifecycleActionHeartbeat</a>.</p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action using <a>CompleteLifecycleAction</a>.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.</p> <p>You can view the lifecycle hooks for an Auto Scaling group using <a>DescribeLifecycleHooks</a>. If you are no longer using a lifecycle hook, you can delete it using <a>DeleteLifecycleHook</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604639 = query.getOrDefault("Action")
  valid_604639 = validateParameter(valid_604639, JString, required = true,
                                 default = newJString("PutLifecycleHook"))
  if valid_604639 != nil:
    section.add "Action", valid_604639
  var valid_604640 = query.getOrDefault("Version")
  valid_604640 = validateParameter(valid_604640, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604640 != nil:
    section.add "Version", valid_604640
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604641 = header.getOrDefault("X-Amz-Date")
  valid_604641 = validateParameter(valid_604641, JString, required = false,
                                 default = nil)
  if valid_604641 != nil:
    section.add "X-Amz-Date", valid_604641
  var valid_604642 = header.getOrDefault("X-Amz-Security-Token")
  valid_604642 = validateParameter(valid_604642, JString, required = false,
                                 default = nil)
  if valid_604642 != nil:
    section.add "X-Amz-Security-Token", valid_604642
  var valid_604643 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604643 = validateParameter(valid_604643, JString, required = false,
                                 default = nil)
  if valid_604643 != nil:
    section.add "X-Amz-Content-Sha256", valid_604643
  var valid_604644 = header.getOrDefault("X-Amz-Algorithm")
  valid_604644 = validateParameter(valid_604644, JString, required = false,
                                 default = nil)
  if valid_604644 != nil:
    section.add "X-Amz-Algorithm", valid_604644
  var valid_604645 = header.getOrDefault("X-Amz-Signature")
  valid_604645 = validateParameter(valid_604645, JString, required = false,
                                 default = nil)
  if valid_604645 != nil:
    section.add "X-Amz-Signature", valid_604645
  var valid_604646 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604646 = validateParameter(valid_604646, JString, required = false,
                                 default = nil)
  if valid_604646 != nil:
    section.add "X-Amz-SignedHeaders", valid_604646
  var valid_604647 = header.getOrDefault("X-Amz-Credential")
  valid_604647 = validateParameter(valid_604647, JString, required = false,
                                 default = nil)
  if valid_604647 != nil:
    section.add "X-Amz-Credential", valid_604647
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleTransition: JString
  ##                      : <p>The instance state to which you want to attach the lifecycle hook. The valid values are:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  ##   DefaultResult: JString
  ##                : Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>. The default value is <code>ABANDON</code>.
  ##   NotificationTargetARN: JString
  ##                        : <p>The ARN of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in the transition state for the lifecycle hook. This target can be either an SQS queue or an SNS topic.</p> <p>If you specify an empty string, this overrides the current ARN.</p> <p>This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key-value pair format when sending notifications to an Amazon SNS topic.</p> <p>When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test messages contain the following additional key-value pair: <code>"Event": "autoscaling:TEST_NOTIFICATION"</code>.</p>
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   NotificationMetadata: JString
  ##                       : Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.
  ##   HeartbeatTimeout: JInt
  ##                   : <p>The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from <code>30</code> to <code>7200</code> seconds. The default value is <code>3600</code> seconds (1 hour).</p> <p>If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action that you specified in the <code>DefaultResult</code> parameter. You can prevent the lifecycle hook from timing out by calling <a>RecordLifecycleActionHeartbeat</a>.</p>
  ##   RoleARN: JString
  ##          : <p>The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target, for example, an Amazon SNS topic or an Amazon SQS queue.</p> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_604648 = formData.getOrDefault("AutoScalingGroupName")
  valid_604648 = validateParameter(valid_604648, JString, required = true,
                                 default = nil)
  if valid_604648 != nil:
    section.add "AutoScalingGroupName", valid_604648
  var valid_604649 = formData.getOrDefault("LifecycleTransition")
  valid_604649 = validateParameter(valid_604649, JString, required = false,
                                 default = nil)
  if valid_604649 != nil:
    section.add "LifecycleTransition", valid_604649
  var valid_604650 = formData.getOrDefault("DefaultResult")
  valid_604650 = validateParameter(valid_604650, JString, required = false,
                                 default = nil)
  if valid_604650 != nil:
    section.add "DefaultResult", valid_604650
  var valid_604651 = formData.getOrDefault("NotificationTargetARN")
  valid_604651 = validateParameter(valid_604651, JString, required = false,
                                 default = nil)
  if valid_604651 != nil:
    section.add "NotificationTargetARN", valid_604651
  var valid_604652 = formData.getOrDefault("LifecycleHookName")
  valid_604652 = validateParameter(valid_604652, JString, required = true,
                                 default = nil)
  if valid_604652 != nil:
    section.add "LifecycleHookName", valid_604652
  var valid_604653 = formData.getOrDefault("NotificationMetadata")
  valid_604653 = validateParameter(valid_604653, JString, required = false,
                                 default = nil)
  if valid_604653 != nil:
    section.add "NotificationMetadata", valid_604653
  var valid_604654 = formData.getOrDefault("HeartbeatTimeout")
  valid_604654 = validateParameter(valid_604654, JInt, required = false, default = nil)
  if valid_604654 != nil:
    section.add "HeartbeatTimeout", valid_604654
  var valid_604655 = formData.getOrDefault("RoleARN")
  valid_604655 = validateParameter(valid_604655, JString, required = false,
                                 default = nil)
  if valid_604655 != nil:
    section.add "RoleARN", valid_604655
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604656: Call_PostPutLifecycleHook_604636; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates or updates a lifecycle hook for the specified Auto Scaling group.</p> <p>A lifecycle hook tells Amazon EC2 Auto Scaling to perform an action on an instance when the instance launches (before it is put into service) or as the instance terminates (before it is fully terminated).</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p> <b>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</b> </p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state using <a>RecordLifecycleActionHeartbeat</a>.</p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action using <a>CompleteLifecycleAction</a>.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.</p> <p>You can view the lifecycle hooks for an Auto Scaling group using <a>DescribeLifecycleHooks</a>. If you are no longer using a lifecycle hook, you can delete it using <a>DeleteLifecycleHook</a>.</p>
  ## 
  let valid = call_604656.validator(path, query, header, formData, body)
  let scheme = call_604656.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604656.url(scheme.get, call_604656.host, call_604656.base,
                         call_604656.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604656, url, valid)

proc call*(call_604657: Call_PostPutLifecycleHook_604636;
          AutoScalingGroupName: string; LifecycleHookName: string;
          LifecycleTransition: string = ""; DefaultResult: string = "";
          Action: string = "PutLifecycleHook"; NotificationTargetARN: string = "";
          NotificationMetadata: string = ""; HeartbeatTimeout: int = 0;
          Version: string = "2011-01-01"; RoleARN: string = ""): Recallable =
  ## postPutLifecycleHook
  ## <p>Creates or updates a lifecycle hook for the specified Auto Scaling group.</p> <p>A lifecycle hook tells Amazon EC2 Auto Scaling to perform an action on an instance when the instance launches (before it is put into service) or as the instance terminates (before it is fully terminated).</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p> <b>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</b> </p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state using <a>RecordLifecycleActionHeartbeat</a>.</p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action using <a>CompleteLifecycleAction</a>.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.</p> <p>You can view the lifecycle hooks for an Auto Scaling group using <a>DescribeLifecycleHooks</a>. If you are no longer using a lifecycle hook, you can delete it using <a>DeleteLifecycleHook</a>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleTransition: string
  ##                      : <p>The instance state to which you want to attach the lifecycle hook. The valid values are:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  ##   DefaultResult: string
  ##                : Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>. The default value is <code>ABANDON</code>.
  ##   Action: string (required)
  ##   NotificationTargetARN: string
  ##                        : <p>The ARN of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in the transition state for the lifecycle hook. This target can be either an SQS queue or an SNS topic.</p> <p>If you specify an empty string, this overrides the current ARN.</p> <p>This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key-value pair format when sending notifications to an Amazon SNS topic.</p> <p>When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test messages contain the following additional key-value pair: <code>"Event": "autoscaling:TEST_NOTIFICATION"</code>.</p>
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   NotificationMetadata: string
  ##                       : Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.
  ##   HeartbeatTimeout: int
  ##                   : <p>The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from <code>30</code> to <code>7200</code> seconds. The default value is <code>3600</code> seconds (1 hour).</p> <p>If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action that you specified in the <code>DefaultResult</code> parameter. You can prevent the lifecycle hook from timing out by calling <a>RecordLifecycleActionHeartbeat</a>.</p>
  ##   Version: string (required)
  ##   RoleARN: string
  ##          : <p>The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target, for example, an Amazon SNS topic or an Amazon SQS queue.</p> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  var query_604658 = newJObject()
  var formData_604659 = newJObject()
  add(formData_604659, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_604659, "LifecycleTransition", newJString(LifecycleTransition))
  add(formData_604659, "DefaultResult", newJString(DefaultResult))
  add(query_604658, "Action", newJString(Action))
  add(formData_604659, "NotificationTargetARN", newJString(NotificationTargetARN))
  add(formData_604659, "LifecycleHookName", newJString(LifecycleHookName))
  add(formData_604659, "NotificationMetadata", newJString(NotificationMetadata))
  add(formData_604659, "HeartbeatTimeout", newJInt(HeartbeatTimeout))
  add(query_604658, "Version", newJString(Version))
  add(formData_604659, "RoleARN", newJString(RoleARN))
  result = call_604657.call(nil, query_604658, nil, formData_604659, nil)

var postPutLifecycleHook* = Call_PostPutLifecycleHook_604636(
    name: "postPutLifecycleHook", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=PutLifecycleHook",
    validator: validate_PostPutLifecycleHook_604637, base: "/",
    url: url_PostPutLifecycleHook_604638, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutLifecycleHook_604613 = ref object of OpenApiRestCall_602466
proc url_GetPutLifecycleHook_604615(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetPutLifecycleHook_604614(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Creates or updates a lifecycle hook for the specified Auto Scaling group.</p> <p>A lifecycle hook tells Amazon EC2 Auto Scaling to perform an action on an instance when the instance launches (before it is put into service) or as the instance terminates (before it is fully terminated).</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p> <b>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</b> </p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state using <a>RecordLifecycleActionHeartbeat</a>.</p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action using <a>CompleteLifecycleAction</a>.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.</p> <p>You can view the lifecycle hooks for an Auto Scaling group using <a>DescribeLifecycleHooks</a>. If you are no longer using a lifecycle hook, you can delete it using <a>DeleteLifecycleHook</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   NotificationTargetARN: JString
  ##                        : <p>The ARN of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in the transition state for the lifecycle hook. This target can be either an SQS queue or an SNS topic.</p> <p>If you specify an empty string, this overrides the current ARN.</p> <p>This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key-value pair format when sending notifications to an Amazon SNS topic.</p> <p>When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test messages contain the following additional key-value pair: <code>"Event": "autoscaling:TEST_NOTIFICATION"</code>.</p>
  ##   DefaultResult: JString
  ##                : Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>. The default value is <code>ABANDON</code>.
  ##   Action: JString (required)
  ##   RoleARN: JString
  ##          : <p>The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target, for example, an Amazon SNS topic or an Amazon SQS queue.</p> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  ##   LifecycleTransition: JString
  ##                      : <p>The instance state to which you want to attach the lifecycle hook. The valid values are:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  ##   NotificationMetadata: JString
  ##                       : Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.
  ##   HeartbeatTimeout: JInt
  ##                   : <p>The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from <code>30</code> to <code>7200</code> seconds. The default value is <code>3600</code> seconds (1 hour).</p> <p>If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action that you specified in the <code>DefaultResult</code> parameter. You can prevent the lifecycle hook from timing out by calling <a>RecordLifecycleActionHeartbeat</a>.</p>
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_604616 = query.getOrDefault("AutoScalingGroupName")
  valid_604616 = validateParameter(valid_604616, JString, required = true,
                                 default = nil)
  if valid_604616 != nil:
    section.add "AutoScalingGroupName", valid_604616
  var valid_604617 = query.getOrDefault("NotificationTargetARN")
  valid_604617 = validateParameter(valid_604617, JString, required = false,
                                 default = nil)
  if valid_604617 != nil:
    section.add "NotificationTargetARN", valid_604617
  var valid_604618 = query.getOrDefault("DefaultResult")
  valid_604618 = validateParameter(valid_604618, JString, required = false,
                                 default = nil)
  if valid_604618 != nil:
    section.add "DefaultResult", valid_604618
  var valid_604619 = query.getOrDefault("Action")
  valid_604619 = validateParameter(valid_604619, JString, required = true,
                                 default = newJString("PutLifecycleHook"))
  if valid_604619 != nil:
    section.add "Action", valid_604619
  var valid_604620 = query.getOrDefault("RoleARN")
  valid_604620 = validateParameter(valid_604620, JString, required = false,
                                 default = nil)
  if valid_604620 != nil:
    section.add "RoleARN", valid_604620
  var valid_604621 = query.getOrDefault("LifecycleTransition")
  valid_604621 = validateParameter(valid_604621, JString, required = false,
                                 default = nil)
  if valid_604621 != nil:
    section.add "LifecycleTransition", valid_604621
  var valid_604622 = query.getOrDefault("NotificationMetadata")
  valid_604622 = validateParameter(valid_604622, JString, required = false,
                                 default = nil)
  if valid_604622 != nil:
    section.add "NotificationMetadata", valid_604622
  var valid_604623 = query.getOrDefault("HeartbeatTimeout")
  valid_604623 = validateParameter(valid_604623, JInt, required = false, default = nil)
  if valid_604623 != nil:
    section.add "HeartbeatTimeout", valid_604623
  var valid_604624 = query.getOrDefault("LifecycleHookName")
  valid_604624 = validateParameter(valid_604624, JString, required = true,
                                 default = nil)
  if valid_604624 != nil:
    section.add "LifecycleHookName", valid_604624
  var valid_604625 = query.getOrDefault("Version")
  valid_604625 = validateParameter(valid_604625, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604625 != nil:
    section.add "Version", valid_604625
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604626 = header.getOrDefault("X-Amz-Date")
  valid_604626 = validateParameter(valid_604626, JString, required = false,
                                 default = nil)
  if valid_604626 != nil:
    section.add "X-Amz-Date", valid_604626
  var valid_604627 = header.getOrDefault("X-Amz-Security-Token")
  valid_604627 = validateParameter(valid_604627, JString, required = false,
                                 default = nil)
  if valid_604627 != nil:
    section.add "X-Amz-Security-Token", valid_604627
  var valid_604628 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604628 = validateParameter(valid_604628, JString, required = false,
                                 default = nil)
  if valid_604628 != nil:
    section.add "X-Amz-Content-Sha256", valid_604628
  var valid_604629 = header.getOrDefault("X-Amz-Algorithm")
  valid_604629 = validateParameter(valid_604629, JString, required = false,
                                 default = nil)
  if valid_604629 != nil:
    section.add "X-Amz-Algorithm", valid_604629
  var valid_604630 = header.getOrDefault("X-Amz-Signature")
  valid_604630 = validateParameter(valid_604630, JString, required = false,
                                 default = nil)
  if valid_604630 != nil:
    section.add "X-Amz-Signature", valid_604630
  var valid_604631 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604631 = validateParameter(valid_604631, JString, required = false,
                                 default = nil)
  if valid_604631 != nil:
    section.add "X-Amz-SignedHeaders", valid_604631
  var valid_604632 = header.getOrDefault("X-Amz-Credential")
  valid_604632 = validateParameter(valid_604632, JString, required = false,
                                 default = nil)
  if valid_604632 != nil:
    section.add "X-Amz-Credential", valid_604632
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604633: Call_GetPutLifecycleHook_604613; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates or updates a lifecycle hook for the specified Auto Scaling group.</p> <p>A lifecycle hook tells Amazon EC2 Auto Scaling to perform an action on an instance when the instance launches (before it is put into service) or as the instance terminates (before it is fully terminated).</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p> <b>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</b> </p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state using <a>RecordLifecycleActionHeartbeat</a>.</p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action using <a>CompleteLifecycleAction</a>.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.</p> <p>You can view the lifecycle hooks for an Auto Scaling group using <a>DescribeLifecycleHooks</a>. If you are no longer using a lifecycle hook, you can delete it using <a>DeleteLifecycleHook</a>.</p>
  ## 
  let valid = call_604633.validator(path, query, header, formData, body)
  let scheme = call_604633.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604633.url(scheme.get, call_604633.host, call_604633.base,
                         call_604633.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604633, url, valid)

proc call*(call_604634: Call_GetPutLifecycleHook_604613;
          AutoScalingGroupName: string; LifecycleHookName: string;
          NotificationTargetARN: string = ""; DefaultResult: string = "";
          Action: string = "PutLifecycleHook"; RoleARN: string = "";
          LifecycleTransition: string = ""; NotificationMetadata: string = "";
          HeartbeatTimeout: int = 0; Version: string = "2011-01-01"): Recallable =
  ## getPutLifecycleHook
  ## <p>Creates or updates a lifecycle hook for the specified Auto Scaling group.</p> <p>A lifecycle hook tells Amazon EC2 Auto Scaling to perform an action on an instance when the instance launches (before it is put into service) or as the instance terminates (before it is fully terminated).</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p> <b>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</b> </p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state using <a>RecordLifecycleActionHeartbeat</a>.</p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action using <a>CompleteLifecycleAction</a>.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.</p> <p>You can view the lifecycle hooks for an Auto Scaling group using <a>DescribeLifecycleHooks</a>. If you are no longer using a lifecycle hook, you can delete it using <a>DeleteLifecycleHook</a>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   NotificationTargetARN: string
  ##                        : <p>The ARN of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in the transition state for the lifecycle hook. This target can be either an SQS queue or an SNS topic.</p> <p>If you specify an empty string, this overrides the current ARN.</p> <p>This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key-value pair format when sending notifications to an Amazon SNS topic.</p> <p>When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test messages contain the following additional key-value pair: <code>"Event": "autoscaling:TEST_NOTIFICATION"</code>.</p>
  ##   DefaultResult: string
  ##                : Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>. The default value is <code>ABANDON</code>.
  ##   Action: string (required)
  ##   RoleARN: string
  ##          : <p>The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target, for example, an Amazon SNS topic or an Amazon SQS queue.</p> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  ##   LifecycleTransition: string
  ##                      : <p>The instance state to which you want to attach the lifecycle hook. The valid values are:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  ##   NotificationMetadata: string
  ##                       : Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.
  ##   HeartbeatTimeout: int
  ##                   : <p>The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from <code>30</code> to <code>7200</code> seconds. The default value is <code>3600</code> seconds (1 hour).</p> <p>If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action that you specified in the <code>DefaultResult</code> parameter. You can prevent the lifecycle hook from timing out by calling <a>RecordLifecycleActionHeartbeat</a>.</p>
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   Version: string (required)
  var query_604635 = newJObject()
  add(query_604635, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_604635, "NotificationTargetARN", newJString(NotificationTargetARN))
  add(query_604635, "DefaultResult", newJString(DefaultResult))
  add(query_604635, "Action", newJString(Action))
  add(query_604635, "RoleARN", newJString(RoleARN))
  add(query_604635, "LifecycleTransition", newJString(LifecycleTransition))
  add(query_604635, "NotificationMetadata", newJString(NotificationMetadata))
  add(query_604635, "HeartbeatTimeout", newJInt(HeartbeatTimeout))
  add(query_604635, "LifecycleHookName", newJString(LifecycleHookName))
  add(query_604635, "Version", newJString(Version))
  result = call_604634.call(nil, query_604635, nil, nil, nil)

var getPutLifecycleHook* = Call_GetPutLifecycleHook_604613(
    name: "getPutLifecycleHook", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=PutLifecycleHook",
    validator: validate_GetPutLifecycleHook_604614, base: "/",
    url: url_GetPutLifecycleHook_604615, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutNotificationConfiguration_604678 = ref object of OpenApiRestCall_602466
proc url_PostPutNotificationConfiguration_604680(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostPutNotificationConfiguration_604679(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.</p> <p>This configuration overwrites any existing configuration.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html">Getting Amazon SNS Notifications When Your Auto Scaling Group Scales</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604681 = query.getOrDefault("Action")
  valid_604681 = validateParameter(valid_604681, JString, required = true, default = newJString(
      "PutNotificationConfiguration"))
  if valid_604681 != nil:
    section.add "Action", valid_604681
  var valid_604682 = query.getOrDefault("Version")
  valid_604682 = validateParameter(valid_604682, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604682 != nil:
    section.add "Version", valid_604682
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604683 = header.getOrDefault("X-Amz-Date")
  valid_604683 = validateParameter(valid_604683, JString, required = false,
                                 default = nil)
  if valid_604683 != nil:
    section.add "X-Amz-Date", valid_604683
  var valid_604684 = header.getOrDefault("X-Amz-Security-Token")
  valid_604684 = validateParameter(valid_604684, JString, required = false,
                                 default = nil)
  if valid_604684 != nil:
    section.add "X-Amz-Security-Token", valid_604684
  var valid_604685 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604685 = validateParameter(valid_604685, JString, required = false,
                                 default = nil)
  if valid_604685 != nil:
    section.add "X-Amz-Content-Sha256", valid_604685
  var valid_604686 = header.getOrDefault("X-Amz-Algorithm")
  valid_604686 = validateParameter(valid_604686, JString, required = false,
                                 default = nil)
  if valid_604686 != nil:
    section.add "X-Amz-Algorithm", valid_604686
  var valid_604687 = header.getOrDefault("X-Amz-Signature")
  valid_604687 = validateParameter(valid_604687, JString, required = false,
                                 default = nil)
  if valid_604687 != nil:
    section.add "X-Amz-Signature", valid_604687
  var valid_604688 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604688 = validateParameter(valid_604688, JString, required = false,
                                 default = nil)
  if valid_604688 != nil:
    section.add "X-Amz-SignedHeaders", valid_604688
  var valid_604689 = header.getOrDefault("X-Amz-Credential")
  valid_604689 = validateParameter(valid_604689, JString, required = false,
                                 default = nil)
  if valid_604689 != nil:
    section.add "X-Amz-Credential", valid_604689
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   TopicARN: JString (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   NotificationTypes: JArray (required)
  ##                    : The type of event that causes the notification to be sent. For more information about notification types supported by Amazon EC2 Auto Scaling, see <a>DescribeAutoScalingNotificationTypes</a>.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_604690 = formData.getOrDefault("AutoScalingGroupName")
  valid_604690 = validateParameter(valid_604690, JString, required = true,
                                 default = nil)
  if valid_604690 != nil:
    section.add "AutoScalingGroupName", valid_604690
  var valid_604691 = formData.getOrDefault("TopicARN")
  valid_604691 = validateParameter(valid_604691, JString, required = true,
                                 default = nil)
  if valid_604691 != nil:
    section.add "TopicARN", valid_604691
  var valid_604692 = formData.getOrDefault("NotificationTypes")
  valid_604692 = validateParameter(valid_604692, JArray, required = true, default = nil)
  if valid_604692 != nil:
    section.add "NotificationTypes", valid_604692
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604693: Call_PostPutNotificationConfiguration_604678;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.</p> <p>This configuration overwrites any existing configuration.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html">Getting Amazon SNS Notifications When Your Auto Scaling Group Scales</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_604693.validator(path, query, header, formData, body)
  let scheme = call_604693.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604693.url(scheme.get, call_604693.host, call_604693.base,
                         call_604693.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604693, url, valid)

proc call*(call_604694: Call_PostPutNotificationConfiguration_604678;
          AutoScalingGroupName: string; TopicARN: string;
          NotificationTypes: JsonNode;
          Action: string = "PutNotificationConfiguration";
          Version: string = "2011-01-01"): Recallable =
  ## postPutNotificationConfiguration
  ## <p>Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.</p> <p>This configuration overwrites any existing configuration.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html">Getting Amazon SNS Notifications When Your Auto Scaling Group Scales</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   TopicARN: string (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   Action: string (required)
  ##   NotificationTypes: JArray (required)
  ##                    : The type of event that causes the notification to be sent. For more information about notification types supported by Amazon EC2 Auto Scaling, see <a>DescribeAutoScalingNotificationTypes</a>.
  ##   Version: string (required)
  var query_604695 = newJObject()
  var formData_604696 = newJObject()
  add(formData_604696, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_604696, "TopicARN", newJString(TopicARN))
  add(query_604695, "Action", newJString(Action))
  if NotificationTypes != nil:
    formData_604696.add "NotificationTypes", NotificationTypes
  add(query_604695, "Version", newJString(Version))
  result = call_604694.call(nil, query_604695, nil, formData_604696, nil)

var postPutNotificationConfiguration* = Call_PostPutNotificationConfiguration_604678(
    name: "postPutNotificationConfiguration", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=PutNotificationConfiguration",
    validator: validate_PostPutNotificationConfiguration_604679, base: "/",
    url: url_PostPutNotificationConfiguration_604680,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutNotificationConfiguration_604660 = ref object of OpenApiRestCall_602466
proc url_GetPutNotificationConfiguration_604662(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetPutNotificationConfiguration_604661(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.</p> <p>This configuration overwrites any existing configuration.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html">Getting Amazon SNS Notifications When Your Auto Scaling Group Scales</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   NotificationTypes: JArray (required)
  ##                    : The type of event that causes the notification to be sent. For more information about notification types supported by Amazon EC2 Auto Scaling, see <a>DescribeAutoScalingNotificationTypes</a>.
  ##   TopicARN: JString (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_604663 = query.getOrDefault("AutoScalingGroupName")
  valid_604663 = validateParameter(valid_604663, JString, required = true,
                                 default = nil)
  if valid_604663 != nil:
    section.add "AutoScalingGroupName", valid_604663
  var valid_604664 = query.getOrDefault("Action")
  valid_604664 = validateParameter(valid_604664, JString, required = true, default = newJString(
      "PutNotificationConfiguration"))
  if valid_604664 != nil:
    section.add "Action", valid_604664
  var valid_604665 = query.getOrDefault("NotificationTypes")
  valid_604665 = validateParameter(valid_604665, JArray, required = true, default = nil)
  if valid_604665 != nil:
    section.add "NotificationTypes", valid_604665
  var valid_604666 = query.getOrDefault("TopicARN")
  valid_604666 = validateParameter(valid_604666, JString, required = true,
                                 default = nil)
  if valid_604666 != nil:
    section.add "TopicARN", valid_604666
  var valid_604667 = query.getOrDefault("Version")
  valid_604667 = validateParameter(valid_604667, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604667 != nil:
    section.add "Version", valid_604667
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604668 = header.getOrDefault("X-Amz-Date")
  valid_604668 = validateParameter(valid_604668, JString, required = false,
                                 default = nil)
  if valid_604668 != nil:
    section.add "X-Amz-Date", valid_604668
  var valid_604669 = header.getOrDefault("X-Amz-Security-Token")
  valid_604669 = validateParameter(valid_604669, JString, required = false,
                                 default = nil)
  if valid_604669 != nil:
    section.add "X-Amz-Security-Token", valid_604669
  var valid_604670 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604670 = validateParameter(valid_604670, JString, required = false,
                                 default = nil)
  if valid_604670 != nil:
    section.add "X-Amz-Content-Sha256", valid_604670
  var valid_604671 = header.getOrDefault("X-Amz-Algorithm")
  valid_604671 = validateParameter(valid_604671, JString, required = false,
                                 default = nil)
  if valid_604671 != nil:
    section.add "X-Amz-Algorithm", valid_604671
  var valid_604672 = header.getOrDefault("X-Amz-Signature")
  valid_604672 = validateParameter(valid_604672, JString, required = false,
                                 default = nil)
  if valid_604672 != nil:
    section.add "X-Amz-Signature", valid_604672
  var valid_604673 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604673 = validateParameter(valid_604673, JString, required = false,
                                 default = nil)
  if valid_604673 != nil:
    section.add "X-Amz-SignedHeaders", valid_604673
  var valid_604674 = header.getOrDefault("X-Amz-Credential")
  valid_604674 = validateParameter(valid_604674, JString, required = false,
                                 default = nil)
  if valid_604674 != nil:
    section.add "X-Amz-Credential", valid_604674
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604675: Call_GetPutNotificationConfiguration_604660;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.</p> <p>This configuration overwrites any existing configuration.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html">Getting Amazon SNS Notifications When Your Auto Scaling Group Scales</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_604675.validator(path, query, header, formData, body)
  let scheme = call_604675.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604675.url(scheme.get, call_604675.host, call_604675.base,
                         call_604675.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604675, url, valid)

proc call*(call_604676: Call_GetPutNotificationConfiguration_604660;
          AutoScalingGroupName: string; NotificationTypes: JsonNode;
          TopicARN: string; Action: string = "PutNotificationConfiguration";
          Version: string = "2011-01-01"): Recallable =
  ## getPutNotificationConfiguration
  ## <p>Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.</p> <p>This configuration overwrites any existing configuration.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html">Getting Amazon SNS Notifications When Your Auto Scaling Group Scales</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   NotificationTypes: JArray (required)
  ##                    : The type of event that causes the notification to be sent. For more information about notification types supported by Amazon EC2 Auto Scaling, see <a>DescribeAutoScalingNotificationTypes</a>.
  ##   TopicARN: string (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   Version: string (required)
  var query_604677 = newJObject()
  add(query_604677, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_604677, "Action", newJString(Action))
  if NotificationTypes != nil:
    query_604677.add "NotificationTypes", NotificationTypes
  add(query_604677, "TopicARN", newJString(TopicARN))
  add(query_604677, "Version", newJString(Version))
  result = call_604676.call(nil, query_604677, nil, nil, nil)

var getPutNotificationConfiguration* = Call_GetPutNotificationConfiguration_604660(
    name: "getPutNotificationConfiguration", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=PutNotificationConfiguration",
    validator: validate_GetPutNotificationConfiguration_604661, base: "/",
    url: url_GetPutNotificationConfiguration_604662,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutScalingPolicy_604727 = ref object of OpenApiRestCall_602466
proc url_PostPutScalingPolicy_604729(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostPutScalingPolicy_604728(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates or updates a scaling policy for an Auto Scaling group. To update an existing scaling policy, use the existing policy name and set the parameters to change. Any existing parameter not changed in an update to an existing policy is not changed in this update request.</p> <p>For more information about using scaling policies to scale your Auto Scaling group automatically, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scale-based-on-demand.html">Dynamic Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604730 = query.getOrDefault("Action")
  valid_604730 = validateParameter(valid_604730, JString, required = true,
                                 default = newJString("PutScalingPolicy"))
  if valid_604730 != nil:
    section.add "Action", valid_604730
  var valid_604731 = query.getOrDefault("Version")
  valid_604731 = validateParameter(valid_604731, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604731 != nil:
    section.add "Version", valid_604731
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604732 = header.getOrDefault("X-Amz-Date")
  valid_604732 = validateParameter(valid_604732, JString, required = false,
                                 default = nil)
  if valid_604732 != nil:
    section.add "X-Amz-Date", valid_604732
  var valid_604733 = header.getOrDefault("X-Amz-Security-Token")
  valid_604733 = validateParameter(valid_604733, JString, required = false,
                                 default = nil)
  if valid_604733 != nil:
    section.add "X-Amz-Security-Token", valid_604733
  var valid_604734 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604734 = validateParameter(valid_604734, JString, required = false,
                                 default = nil)
  if valid_604734 != nil:
    section.add "X-Amz-Content-Sha256", valid_604734
  var valid_604735 = header.getOrDefault("X-Amz-Algorithm")
  valid_604735 = validateParameter(valid_604735, JString, required = false,
                                 default = nil)
  if valid_604735 != nil:
    section.add "X-Amz-Algorithm", valid_604735
  var valid_604736 = header.getOrDefault("X-Amz-Signature")
  valid_604736 = validateParameter(valid_604736, JString, required = false,
                                 default = nil)
  if valid_604736 != nil:
    section.add "X-Amz-Signature", valid_604736
  var valid_604737 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604737 = validateParameter(valid_604737, JString, required = false,
                                 default = nil)
  if valid_604737 != nil:
    section.add "X-Amz-SignedHeaders", valid_604737
  var valid_604738 = header.getOrDefault("X-Amz-Credential")
  valid_604738 = validateParameter(valid_604738, JString, required = false,
                                 default = nil)
  if valid_604738 != nil:
    section.add "X-Amz-Credential", valid_604738
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetTrackingConfiguration.CustomizedMetricSpecification: JString
  ##                                                            : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A customized metric. You must specify either a predefined metric or a customized metric.
  ##   PolicyName: JString (required)
  ##             : The name of the policy.
  ##   StepAdjustments: JArray
  ##                  : <p>A set of adjustments that enable you to scale based on the size of the alarm breach.</p> <p>Conditional: If you specify <code>StepScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   TargetTrackingConfiguration.PredefinedMetricSpecification: JString
  ##                                                            : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A predefined metric. You must specify either a predefined metric or a customized metric.
  ##   TargetTrackingConfiguration.DisableScaleIn: JString
  ##                                             : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## Indicates whether scaling in by the target tracking scaling policy is disabled. If scaling in is disabled, the target tracking scaling policy doesn't remove instances from the Auto Scaling group. Otherwise, the target tracking scaling policy can remove instances from the Auto Scaling group. The default is <code>false</code>.
  ##   ScalingAdjustment: JInt
  ##                    : <p>The amount by which a simple scaling policy scales the Auto Scaling group in response to an alarm breach. The adjustment is based on the value that you specified in the <code>AdjustmentType</code> parameter (either an absolute number or a percentage). A positive value adds to the current capacity and a negative value subtracts from the current capacity. For exact capacity, you must specify a positive value. </p> <p>Conditional: If you specify <code>SimpleScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   MinAdjustmentStep: JInt
  ##                    : Available for backward compatibility. Use <code>MinAdjustmentMagnitude</code> instead.
  ##   Cooldown: JInt
  ##           : <p>The amount of time, in seconds, after a scaling activity completes before any further dynamic scaling activities can start. If this parameter is not specified, the default cooldown period for the group applies.</p> <p>Valid only if the policy type is <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MetricAggregationType: JString
  ##                        : <p>The aggregation type for the CloudWatch metrics. The valid values are <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code>. If the aggregation type is null, the value is treated as <code>Average</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code>.</p>
  ##   AdjustmentType: JString
  ##                 : <p>Specifies whether the <code>ScalingAdjustment</code> parameter is an absolute number or a percentage of the current capacity. The valid values are <code>ChangeInCapacity</code>, <code>ExactCapacity</code>, and <code>PercentChangeInCapacity</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment">Scaling Adjustment Types</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   EstimatedInstanceWarmup: JInt
  ##                          : <p>The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. The default is to use the value specified for the default cooldown period for the group.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p>
  ##   MinAdjustmentMagnitude: JInt
  ##                         : <p>The minimum number of instances to scale. If the value of <code>AdjustmentType</code> is <code>PercentChangeInCapacity</code>, the scaling policy changes the <code>DesiredCapacity</code> of the Auto Scaling group by at least this many instances. Otherwise, the error is <code>ValidationError</code>.</p> <p>This property replaces the <code>MinAdjustmentStep</code> property. For example, suppose that you create a step scaling policy to scale out an Auto Scaling group by 25 percent and you specify a <code>MinAdjustmentMagnitude</code> of 2. If the group has 4 instances and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a <code>MinAdjustmentMagnitude</code> of 2, Amazon EC2 Auto Scaling scales out the group by 2 instances.</p> <p>Valid only if the policy type is <code>SimpleScaling</code> or <code>StepScaling</code>.</p>
  ##   TargetTrackingConfiguration.TargetValue: JString
  ##                                          : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## The target value for the metric.
  ##   PolicyType: JString
  ##             : The policy type. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>. If the policy type is null, the value is treated as <code>SimpleScaling</code>.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_604739 = formData.getOrDefault("AutoScalingGroupName")
  valid_604739 = validateParameter(valid_604739, JString, required = true,
                                 default = nil)
  if valid_604739 != nil:
    section.add "AutoScalingGroupName", valid_604739
  var valid_604740 = formData.getOrDefault("TargetTrackingConfiguration.CustomizedMetricSpecification")
  valid_604740 = validateParameter(valid_604740, JString, required = false,
                                 default = nil)
  if valid_604740 != nil:
    section.add "TargetTrackingConfiguration.CustomizedMetricSpecification", valid_604740
  var valid_604741 = formData.getOrDefault("PolicyName")
  valid_604741 = validateParameter(valid_604741, JString, required = true,
                                 default = nil)
  if valid_604741 != nil:
    section.add "PolicyName", valid_604741
  var valid_604742 = formData.getOrDefault("StepAdjustments")
  valid_604742 = validateParameter(valid_604742, JArray, required = false,
                                 default = nil)
  if valid_604742 != nil:
    section.add "StepAdjustments", valid_604742
  var valid_604743 = formData.getOrDefault("TargetTrackingConfiguration.PredefinedMetricSpecification")
  valid_604743 = validateParameter(valid_604743, JString, required = false,
                                 default = nil)
  if valid_604743 != nil:
    section.add "TargetTrackingConfiguration.PredefinedMetricSpecification", valid_604743
  var valid_604744 = formData.getOrDefault("TargetTrackingConfiguration.DisableScaleIn")
  valid_604744 = validateParameter(valid_604744, JString, required = false,
                                 default = nil)
  if valid_604744 != nil:
    section.add "TargetTrackingConfiguration.DisableScaleIn", valid_604744
  var valid_604745 = formData.getOrDefault("ScalingAdjustment")
  valid_604745 = validateParameter(valid_604745, JInt, required = false, default = nil)
  if valid_604745 != nil:
    section.add "ScalingAdjustment", valid_604745
  var valid_604746 = formData.getOrDefault("MinAdjustmentStep")
  valid_604746 = validateParameter(valid_604746, JInt, required = false, default = nil)
  if valid_604746 != nil:
    section.add "MinAdjustmentStep", valid_604746
  var valid_604747 = formData.getOrDefault("Cooldown")
  valid_604747 = validateParameter(valid_604747, JInt, required = false, default = nil)
  if valid_604747 != nil:
    section.add "Cooldown", valid_604747
  var valid_604748 = formData.getOrDefault("MetricAggregationType")
  valid_604748 = validateParameter(valid_604748, JString, required = false,
                                 default = nil)
  if valid_604748 != nil:
    section.add "MetricAggregationType", valid_604748
  var valid_604749 = formData.getOrDefault("AdjustmentType")
  valid_604749 = validateParameter(valid_604749, JString, required = false,
                                 default = nil)
  if valid_604749 != nil:
    section.add "AdjustmentType", valid_604749
  var valid_604750 = formData.getOrDefault("EstimatedInstanceWarmup")
  valid_604750 = validateParameter(valid_604750, JInt, required = false, default = nil)
  if valid_604750 != nil:
    section.add "EstimatedInstanceWarmup", valid_604750
  var valid_604751 = formData.getOrDefault("MinAdjustmentMagnitude")
  valid_604751 = validateParameter(valid_604751, JInt, required = false, default = nil)
  if valid_604751 != nil:
    section.add "MinAdjustmentMagnitude", valid_604751
  var valid_604752 = formData.getOrDefault("TargetTrackingConfiguration.TargetValue")
  valid_604752 = validateParameter(valid_604752, JString, required = false,
                                 default = nil)
  if valid_604752 != nil:
    section.add "TargetTrackingConfiguration.TargetValue", valid_604752
  var valid_604753 = formData.getOrDefault("PolicyType")
  valid_604753 = validateParameter(valid_604753, JString, required = false,
                                 default = nil)
  if valid_604753 != nil:
    section.add "PolicyType", valid_604753
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604754: Call_PostPutScalingPolicy_604727; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates or updates a scaling policy for an Auto Scaling group. To update an existing scaling policy, use the existing policy name and set the parameters to change. Any existing parameter not changed in an update to an existing policy is not changed in this update request.</p> <p>For more information about using scaling policies to scale your Auto Scaling group automatically, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scale-based-on-demand.html">Dynamic Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_604754.validator(path, query, header, formData, body)
  let scheme = call_604754.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604754.url(scheme.get, call_604754.host, call_604754.base,
                         call_604754.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604754, url, valid)

proc call*(call_604755: Call_PostPutScalingPolicy_604727;
          AutoScalingGroupName: string; PolicyName: string;
    TargetTrackingConfigurationCustomizedMetricSpecification: string = "";
          StepAdjustments: JsonNode = nil; TargetTrackingConfigurationPredefinedMetricSpecification: string = "";
          TargetTrackingConfigurationDisableScaleIn: string = "";
          ScalingAdjustment: int = 0; MinAdjustmentStep: int = 0; Cooldown: int = 0;
          Action: string = "PutScalingPolicy"; MetricAggregationType: string = "";
          AdjustmentType: string = ""; EstimatedInstanceWarmup: int = 0;
          MinAdjustmentMagnitude: int = 0;
          TargetTrackingConfigurationTargetValue: string = "";
          Version: string = "2011-01-01"; PolicyType: string = ""): Recallable =
  ## postPutScalingPolicy
  ## <p>Creates or updates a scaling policy for an Auto Scaling group. To update an existing scaling policy, use the existing policy name and set the parameters to change. Any existing parameter not changed in an update to an existing policy is not changed in this update request.</p> <p>For more information about using scaling policies to scale your Auto Scaling group automatically, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scale-based-on-demand.html">Dynamic Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetTrackingConfigurationCustomizedMetricSpecification: string
  ##                                                           : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A customized metric. You must specify either a predefined metric or a customized metric.
  ##   PolicyName: string (required)
  ##             : The name of the policy.
  ##   StepAdjustments: JArray
  ##                  : <p>A set of adjustments that enable you to scale based on the size of the alarm breach.</p> <p>Conditional: If you specify <code>StepScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   TargetTrackingConfigurationPredefinedMetricSpecification: string
  ##                                                           : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A predefined metric. You must specify either a predefined metric or a customized metric.
  ##   TargetTrackingConfigurationDisableScaleIn: string
  ##                                            : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## Indicates whether scaling in by the target tracking scaling policy is disabled. If scaling in is disabled, the target tracking scaling policy doesn't remove instances from the Auto Scaling group. Otherwise, the target tracking scaling policy can remove instances from the Auto Scaling group. The default is <code>false</code>.
  ##   ScalingAdjustment: int
  ##                    : <p>The amount by which a simple scaling policy scales the Auto Scaling group in response to an alarm breach. The adjustment is based on the value that you specified in the <code>AdjustmentType</code> parameter (either an absolute number or a percentage). A positive value adds to the current capacity and a negative value subtracts from the current capacity. For exact capacity, you must specify a positive value. </p> <p>Conditional: If you specify <code>SimpleScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   MinAdjustmentStep: int
  ##                    : Available for backward compatibility. Use <code>MinAdjustmentMagnitude</code> instead.
  ##   Cooldown: int
  ##           : <p>The amount of time, in seconds, after a scaling activity completes before any further dynamic scaling activities can start. If this parameter is not specified, the default cooldown period for the group applies.</p> <p>Valid only if the policy type is <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   MetricAggregationType: string
  ##                        : <p>The aggregation type for the CloudWatch metrics. The valid values are <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code>. If the aggregation type is null, the value is treated as <code>Average</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code>.</p>
  ##   AdjustmentType: string
  ##                 : <p>Specifies whether the <code>ScalingAdjustment</code> parameter is an absolute number or a percentage of the current capacity. The valid values are <code>ChangeInCapacity</code>, <code>ExactCapacity</code>, and <code>PercentChangeInCapacity</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment">Scaling Adjustment Types</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   EstimatedInstanceWarmup: int
  ##                          : <p>The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. The default is to use the value specified for the default cooldown period for the group.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p>
  ##   MinAdjustmentMagnitude: int
  ##                         : <p>The minimum number of instances to scale. If the value of <code>AdjustmentType</code> is <code>PercentChangeInCapacity</code>, the scaling policy changes the <code>DesiredCapacity</code> of the Auto Scaling group by at least this many instances. Otherwise, the error is <code>ValidationError</code>.</p> <p>This property replaces the <code>MinAdjustmentStep</code> property. For example, suppose that you create a step scaling policy to scale out an Auto Scaling group by 25 percent and you specify a <code>MinAdjustmentMagnitude</code> of 2. If the group has 4 instances and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a <code>MinAdjustmentMagnitude</code> of 2, Amazon EC2 Auto Scaling scales out the group by 2 instances.</p> <p>Valid only if the policy type is <code>SimpleScaling</code> or <code>StepScaling</code>.</p>
  ##   TargetTrackingConfigurationTargetValue: string
  ##                                         : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## The target value for the metric.
  ##   Version: string (required)
  ##   PolicyType: string
  ##             : The policy type. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>. If the policy type is null, the value is treated as <code>SimpleScaling</code>.
  var query_604756 = newJObject()
  var formData_604757 = newJObject()
  add(formData_604757, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_604757,
      "TargetTrackingConfiguration.CustomizedMetricSpecification",
      newJString(TargetTrackingConfigurationCustomizedMetricSpecification))
  add(formData_604757, "PolicyName", newJString(PolicyName))
  if StepAdjustments != nil:
    formData_604757.add "StepAdjustments", StepAdjustments
  add(formData_604757,
      "TargetTrackingConfiguration.PredefinedMetricSpecification",
      newJString(TargetTrackingConfigurationPredefinedMetricSpecification))
  add(formData_604757, "TargetTrackingConfiguration.DisableScaleIn",
      newJString(TargetTrackingConfigurationDisableScaleIn))
  add(formData_604757, "ScalingAdjustment", newJInt(ScalingAdjustment))
  add(formData_604757, "MinAdjustmentStep", newJInt(MinAdjustmentStep))
  add(formData_604757, "Cooldown", newJInt(Cooldown))
  add(query_604756, "Action", newJString(Action))
  add(formData_604757, "MetricAggregationType", newJString(MetricAggregationType))
  add(formData_604757, "AdjustmentType", newJString(AdjustmentType))
  add(formData_604757, "EstimatedInstanceWarmup", newJInt(EstimatedInstanceWarmup))
  add(formData_604757, "MinAdjustmentMagnitude", newJInt(MinAdjustmentMagnitude))
  add(formData_604757, "TargetTrackingConfiguration.TargetValue",
      newJString(TargetTrackingConfigurationTargetValue))
  add(query_604756, "Version", newJString(Version))
  add(formData_604757, "PolicyType", newJString(PolicyType))
  result = call_604755.call(nil, query_604756, nil, formData_604757, nil)

var postPutScalingPolicy* = Call_PostPutScalingPolicy_604727(
    name: "postPutScalingPolicy", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=PutScalingPolicy",
    validator: validate_PostPutScalingPolicy_604728, base: "/",
    url: url_PostPutScalingPolicy_604729, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutScalingPolicy_604697 = ref object of OpenApiRestCall_602466
proc url_GetPutScalingPolicy_604699(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetPutScalingPolicy_604698(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Creates or updates a scaling policy for an Auto Scaling group. To update an existing scaling policy, use the existing policy name and set the parameters to change. Any existing parameter not changed in an update to an existing policy is not changed in this update request.</p> <p>For more information about using scaling policies to scale your Auto Scaling group automatically, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scale-based-on-demand.html">Dynamic Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TargetTrackingConfiguration.DisableScaleIn: JString
  ##                                             : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## Indicates whether scaling in by the target tracking scaling policy is disabled. If scaling in is disabled, the target tracking scaling policy doesn't remove instances from the Auto Scaling group. Otherwise, the target tracking scaling policy can remove instances from the Auto Scaling group. The default is <code>false</code>.
  ##   AdjustmentType: JString
  ##                 : <p>Specifies whether the <code>ScalingAdjustment</code> parameter is an absolute number or a percentage of the current capacity. The valid values are <code>ChangeInCapacity</code>, <code>ExactCapacity</code>, and <code>PercentChangeInCapacity</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment">Scaling Adjustment Types</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   TargetTrackingConfiguration.PredefinedMetricSpecification: JString
  ##                                                            : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A predefined metric. You must specify either a predefined metric or a customized metric.
  ##   MetricAggregationType: JString
  ##                        : <p>The aggregation type for the CloudWatch metrics. The valid values are <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code>. If the aggregation type is null, the value is treated as <code>Average</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code>.</p>
  ##   MinAdjustmentStep: JInt
  ##                    : Available for backward compatibility. Use <code>MinAdjustmentMagnitude</code> instead.
  ##   Cooldown: JInt
  ##           : <p>The amount of time, in seconds, after a scaling activity completes before any further dynamic scaling activities can start. If this parameter is not specified, the default cooldown period for the group applies.</p> <p>Valid only if the policy type is <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetTrackingConfiguration.TargetValue: JString
  ##                                          : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## The target value for the metric.
  ##   TargetTrackingConfiguration.CustomizedMetricSpecification: JString
  ##                                                            : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A customized metric. You must specify either a predefined metric or a customized metric.
  ##   Action: JString (required)
  ##   EstimatedInstanceWarmup: JInt
  ##                          : <p>The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. The default is to use the value specified for the default cooldown period for the group.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p>
  ##   MinAdjustmentMagnitude: JInt
  ##                         : <p>The minimum number of instances to scale. If the value of <code>AdjustmentType</code> is <code>PercentChangeInCapacity</code>, the scaling policy changes the <code>DesiredCapacity</code> of the Auto Scaling group by at least this many instances. Otherwise, the error is <code>ValidationError</code>.</p> <p>This property replaces the <code>MinAdjustmentStep</code> property. For example, suppose that you create a step scaling policy to scale out an Auto Scaling group by 25 percent and you specify a <code>MinAdjustmentMagnitude</code> of 2. If the group has 4 instances and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a <code>MinAdjustmentMagnitude</code> of 2, Amazon EC2 Auto Scaling scales out the group by 2 instances.</p> <p>Valid only if the policy type is <code>SimpleScaling</code> or <code>StepScaling</code>.</p>
  ##   StepAdjustments: JArray
  ##                  : <p>A set of adjustments that enable you to scale based on the size of the alarm breach.</p> <p>Conditional: If you specify <code>StepScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   PolicyType: JString
  ##             : The policy type. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>. If the policy type is null, the value is treated as <code>SimpleScaling</code>.
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : The name of the policy.
  ##   ScalingAdjustment: JInt
  ##                    : <p>The amount by which a simple scaling policy scales the Auto Scaling group in response to an alarm breach. The adjustment is based on the value that you specified in the <code>AdjustmentType</code> parameter (either an absolute number or a percentage). A positive value adds to the current capacity and a negative value subtracts from the current capacity. For exact capacity, you must specify a positive value. </p> <p>Conditional: If you specify <code>SimpleScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  section = newJObject()
  var valid_604700 = query.getOrDefault("TargetTrackingConfiguration.DisableScaleIn")
  valid_604700 = validateParameter(valid_604700, JString, required = false,
                                 default = nil)
  if valid_604700 != nil:
    section.add "TargetTrackingConfiguration.DisableScaleIn", valid_604700
  var valid_604701 = query.getOrDefault("AdjustmentType")
  valid_604701 = validateParameter(valid_604701, JString, required = false,
                                 default = nil)
  if valid_604701 != nil:
    section.add "AdjustmentType", valid_604701
  var valid_604702 = query.getOrDefault("TargetTrackingConfiguration.PredefinedMetricSpecification")
  valid_604702 = validateParameter(valid_604702, JString, required = false,
                                 default = nil)
  if valid_604702 != nil:
    section.add "TargetTrackingConfiguration.PredefinedMetricSpecification", valid_604702
  var valid_604703 = query.getOrDefault("MetricAggregationType")
  valid_604703 = validateParameter(valid_604703, JString, required = false,
                                 default = nil)
  if valid_604703 != nil:
    section.add "MetricAggregationType", valid_604703
  var valid_604704 = query.getOrDefault("MinAdjustmentStep")
  valid_604704 = validateParameter(valid_604704, JInt, required = false, default = nil)
  if valid_604704 != nil:
    section.add "MinAdjustmentStep", valid_604704
  var valid_604705 = query.getOrDefault("Cooldown")
  valid_604705 = validateParameter(valid_604705, JInt, required = false, default = nil)
  if valid_604705 != nil:
    section.add "Cooldown", valid_604705
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_604706 = query.getOrDefault("AutoScalingGroupName")
  valid_604706 = validateParameter(valid_604706, JString, required = true,
                                 default = nil)
  if valid_604706 != nil:
    section.add "AutoScalingGroupName", valid_604706
  var valid_604707 = query.getOrDefault("TargetTrackingConfiguration.TargetValue")
  valid_604707 = validateParameter(valid_604707, JString, required = false,
                                 default = nil)
  if valid_604707 != nil:
    section.add "TargetTrackingConfiguration.TargetValue", valid_604707
  var valid_604708 = query.getOrDefault("TargetTrackingConfiguration.CustomizedMetricSpecification")
  valid_604708 = validateParameter(valid_604708, JString, required = false,
                                 default = nil)
  if valid_604708 != nil:
    section.add "TargetTrackingConfiguration.CustomizedMetricSpecification", valid_604708
  var valid_604709 = query.getOrDefault("Action")
  valid_604709 = validateParameter(valid_604709, JString, required = true,
                                 default = newJString("PutScalingPolicy"))
  if valid_604709 != nil:
    section.add "Action", valid_604709
  var valid_604710 = query.getOrDefault("EstimatedInstanceWarmup")
  valid_604710 = validateParameter(valid_604710, JInt, required = false, default = nil)
  if valid_604710 != nil:
    section.add "EstimatedInstanceWarmup", valid_604710
  var valid_604711 = query.getOrDefault("MinAdjustmentMagnitude")
  valid_604711 = validateParameter(valid_604711, JInt, required = false, default = nil)
  if valid_604711 != nil:
    section.add "MinAdjustmentMagnitude", valid_604711
  var valid_604712 = query.getOrDefault("StepAdjustments")
  valid_604712 = validateParameter(valid_604712, JArray, required = false,
                                 default = nil)
  if valid_604712 != nil:
    section.add "StepAdjustments", valid_604712
  var valid_604713 = query.getOrDefault("PolicyType")
  valid_604713 = validateParameter(valid_604713, JString, required = false,
                                 default = nil)
  if valid_604713 != nil:
    section.add "PolicyType", valid_604713
  var valid_604714 = query.getOrDefault("Version")
  valid_604714 = validateParameter(valid_604714, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604714 != nil:
    section.add "Version", valid_604714
  var valid_604715 = query.getOrDefault("PolicyName")
  valid_604715 = validateParameter(valid_604715, JString, required = true,
                                 default = nil)
  if valid_604715 != nil:
    section.add "PolicyName", valid_604715
  var valid_604716 = query.getOrDefault("ScalingAdjustment")
  valid_604716 = validateParameter(valid_604716, JInt, required = false, default = nil)
  if valid_604716 != nil:
    section.add "ScalingAdjustment", valid_604716
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604717 = header.getOrDefault("X-Amz-Date")
  valid_604717 = validateParameter(valid_604717, JString, required = false,
                                 default = nil)
  if valid_604717 != nil:
    section.add "X-Amz-Date", valid_604717
  var valid_604718 = header.getOrDefault("X-Amz-Security-Token")
  valid_604718 = validateParameter(valid_604718, JString, required = false,
                                 default = nil)
  if valid_604718 != nil:
    section.add "X-Amz-Security-Token", valid_604718
  var valid_604719 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604719 = validateParameter(valid_604719, JString, required = false,
                                 default = nil)
  if valid_604719 != nil:
    section.add "X-Amz-Content-Sha256", valid_604719
  var valid_604720 = header.getOrDefault("X-Amz-Algorithm")
  valid_604720 = validateParameter(valid_604720, JString, required = false,
                                 default = nil)
  if valid_604720 != nil:
    section.add "X-Amz-Algorithm", valid_604720
  var valid_604721 = header.getOrDefault("X-Amz-Signature")
  valid_604721 = validateParameter(valid_604721, JString, required = false,
                                 default = nil)
  if valid_604721 != nil:
    section.add "X-Amz-Signature", valid_604721
  var valid_604722 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604722 = validateParameter(valid_604722, JString, required = false,
                                 default = nil)
  if valid_604722 != nil:
    section.add "X-Amz-SignedHeaders", valid_604722
  var valid_604723 = header.getOrDefault("X-Amz-Credential")
  valid_604723 = validateParameter(valid_604723, JString, required = false,
                                 default = nil)
  if valid_604723 != nil:
    section.add "X-Amz-Credential", valid_604723
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604724: Call_GetPutScalingPolicy_604697; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates or updates a scaling policy for an Auto Scaling group. To update an existing scaling policy, use the existing policy name and set the parameters to change. Any existing parameter not changed in an update to an existing policy is not changed in this update request.</p> <p>For more information about using scaling policies to scale your Auto Scaling group automatically, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scale-based-on-demand.html">Dynamic Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_604724.validator(path, query, header, formData, body)
  let scheme = call_604724.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604724.url(scheme.get, call_604724.host, call_604724.base,
                         call_604724.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604724, url, valid)

proc call*(call_604725: Call_GetPutScalingPolicy_604697;
          AutoScalingGroupName: string; PolicyName: string;
          TargetTrackingConfigurationDisableScaleIn: string = "";
          AdjustmentType: string = ""; TargetTrackingConfigurationPredefinedMetricSpecification: string = "";
          MetricAggregationType: string = ""; MinAdjustmentStep: int = 0;
          Cooldown: int = 0; TargetTrackingConfigurationTargetValue: string = "";
    TargetTrackingConfigurationCustomizedMetricSpecification: string = "";
          Action: string = "PutScalingPolicy"; EstimatedInstanceWarmup: int = 0;
          MinAdjustmentMagnitude: int = 0; StepAdjustments: JsonNode = nil;
          PolicyType: string = ""; Version: string = "2011-01-01";
          ScalingAdjustment: int = 0): Recallable =
  ## getPutScalingPolicy
  ## <p>Creates or updates a scaling policy for an Auto Scaling group. To update an existing scaling policy, use the existing policy name and set the parameters to change. Any existing parameter not changed in an update to an existing policy is not changed in this update request.</p> <p>For more information about using scaling policies to scale your Auto Scaling group automatically, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scale-based-on-demand.html">Dynamic Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   TargetTrackingConfigurationDisableScaleIn: string
  ##                                            : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## Indicates whether scaling in by the target tracking scaling policy is disabled. If scaling in is disabled, the target tracking scaling policy doesn't remove instances from the Auto Scaling group. Otherwise, the target tracking scaling policy can remove instances from the Auto Scaling group. The default is <code>false</code>.
  ##   AdjustmentType: string
  ##                 : <p>Specifies whether the <code>ScalingAdjustment</code> parameter is an absolute number or a percentage of the current capacity. The valid values are <code>ChangeInCapacity</code>, <code>ExactCapacity</code>, and <code>PercentChangeInCapacity</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment">Scaling Adjustment Types</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   TargetTrackingConfigurationPredefinedMetricSpecification: string
  ##                                                           : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A predefined metric. You must specify either a predefined metric or a customized metric.
  ##   MetricAggregationType: string
  ##                        : <p>The aggregation type for the CloudWatch metrics. The valid values are <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code>. If the aggregation type is null, the value is treated as <code>Average</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code>.</p>
  ##   MinAdjustmentStep: int
  ##                    : Available for backward compatibility. Use <code>MinAdjustmentMagnitude</code> instead.
  ##   Cooldown: int
  ##           : <p>The amount of time, in seconds, after a scaling activity completes before any further dynamic scaling activities can start. If this parameter is not specified, the default cooldown period for the group applies.</p> <p>Valid only if the policy type is <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetTrackingConfigurationTargetValue: string
  ##                                         : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## The target value for the metric.
  ##   TargetTrackingConfigurationCustomizedMetricSpecification: string
  ##                                                           : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A customized metric. You must specify either a predefined metric or a customized metric.
  ##   Action: string (required)
  ##   EstimatedInstanceWarmup: int
  ##                          : <p>The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. The default is to use the value specified for the default cooldown period for the group.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p>
  ##   MinAdjustmentMagnitude: int
  ##                         : <p>The minimum number of instances to scale. If the value of <code>AdjustmentType</code> is <code>PercentChangeInCapacity</code>, the scaling policy changes the <code>DesiredCapacity</code> of the Auto Scaling group by at least this many instances. Otherwise, the error is <code>ValidationError</code>.</p> <p>This property replaces the <code>MinAdjustmentStep</code> property. For example, suppose that you create a step scaling policy to scale out an Auto Scaling group by 25 percent and you specify a <code>MinAdjustmentMagnitude</code> of 2. If the group has 4 instances and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a <code>MinAdjustmentMagnitude</code> of 2, Amazon EC2 Auto Scaling scales out the group by 2 instances.</p> <p>Valid only if the policy type is <code>SimpleScaling</code> or <code>StepScaling</code>.</p>
  ##   StepAdjustments: JArray
  ##                  : <p>A set of adjustments that enable you to scale based on the size of the alarm breach.</p> <p>Conditional: If you specify <code>StepScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   PolicyType: string
  ##             : The policy type. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>. If the policy type is null, the value is treated as <code>SimpleScaling</code>.
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : The name of the policy.
  ##   ScalingAdjustment: int
  ##                    : <p>The amount by which a simple scaling policy scales the Auto Scaling group in response to an alarm breach. The adjustment is based on the value that you specified in the <code>AdjustmentType</code> parameter (either an absolute number or a percentage). A positive value adds to the current capacity and a negative value subtracts from the current capacity. For exact capacity, you must specify a positive value. </p> <p>Conditional: If you specify <code>SimpleScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  var query_604726 = newJObject()
  add(query_604726, "TargetTrackingConfiguration.DisableScaleIn",
      newJString(TargetTrackingConfigurationDisableScaleIn))
  add(query_604726, "AdjustmentType", newJString(AdjustmentType))
  add(query_604726, "TargetTrackingConfiguration.PredefinedMetricSpecification",
      newJString(TargetTrackingConfigurationPredefinedMetricSpecification))
  add(query_604726, "MetricAggregationType", newJString(MetricAggregationType))
  add(query_604726, "MinAdjustmentStep", newJInt(MinAdjustmentStep))
  add(query_604726, "Cooldown", newJInt(Cooldown))
  add(query_604726, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_604726, "TargetTrackingConfiguration.TargetValue",
      newJString(TargetTrackingConfigurationTargetValue))
  add(query_604726, "TargetTrackingConfiguration.CustomizedMetricSpecification",
      newJString(TargetTrackingConfigurationCustomizedMetricSpecification))
  add(query_604726, "Action", newJString(Action))
  add(query_604726, "EstimatedInstanceWarmup", newJInt(EstimatedInstanceWarmup))
  add(query_604726, "MinAdjustmentMagnitude", newJInt(MinAdjustmentMagnitude))
  if StepAdjustments != nil:
    query_604726.add "StepAdjustments", StepAdjustments
  add(query_604726, "PolicyType", newJString(PolicyType))
  add(query_604726, "Version", newJString(Version))
  add(query_604726, "PolicyName", newJString(PolicyName))
  add(query_604726, "ScalingAdjustment", newJInt(ScalingAdjustment))
  result = call_604725.call(nil, query_604726, nil, nil, nil)

var getPutScalingPolicy* = Call_GetPutScalingPolicy_604697(
    name: "getPutScalingPolicy", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=PutScalingPolicy",
    validator: validate_GetPutScalingPolicy_604698, base: "/",
    url: url_GetPutScalingPolicy_604699, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutScheduledUpdateGroupAction_604782 = ref object of OpenApiRestCall_602466
proc url_PostPutScheduledUpdateGroupAction_604784(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostPutScheduledUpdateGroupAction_604783(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates or updates a scheduled scaling action for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html">Scheduled Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604785 = query.getOrDefault("Action")
  valid_604785 = validateParameter(valid_604785, JString, required = true, default = newJString(
      "PutScheduledUpdateGroupAction"))
  if valid_604785 != nil:
    section.add "Action", valid_604785
  var valid_604786 = query.getOrDefault("Version")
  valid_604786 = validateParameter(valid_604786, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604786 != nil:
    section.add "Version", valid_604786
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604787 = header.getOrDefault("X-Amz-Date")
  valid_604787 = validateParameter(valid_604787, JString, required = false,
                                 default = nil)
  if valid_604787 != nil:
    section.add "X-Amz-Date", valid_604787
  var valid_604788 = header.getOrDefault("X-Amz-Security-Token")
  valid_604788 = validateParameter(valid_604788, JString, required = false,
                                 default = nil)
  if valid_604788 != nil:
    section.add "X-Amz-Security-Token", valid_604788
  var valid_604789 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604789 = validateParameter(valid_604789, JString, required = false,
                                 default = nil)
  if valid_604789 != nil:
    section.add "X-Amz-Content-Sha256", valid_604789
  var valid_604790 = header.getOrDefault("X-Amz-Algorithm")
  valid_604790 = validateParameter(valid_604790, JString, required = false,
                                 default = nil)
  if valid_604790 != nil:
    section.add "X-Amz-Algorithm", valid_604790
  var valid_604791 = header.getOrDefault("X-Amz-Signature")
  valid_604791 = validateParameter(valid_604791, JString, required = false,
                                 default = nil)
  if valid_604791 != nil:
    section.add "X-Amz-Signature", valid_604791
  var valid_604792 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604792 = validateParameter(valid_604792, JString, required = false,
                                 default = nil)
  if valid_604792 != nil:
    section.add "X-Amz-SignedHeaders", valid_604792
  var valid_604793 = header.getOrDefault("X-Amz-Credential")
  valid_604793 = validateParameter(valid_604793, JString, required = false,
                                 default = nil)
  if valid_604793 != nil:
    section.add "X-Amz-Credential", valid_604793
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Recurrence: JString
  ##             : <p>The recurring schedule for this action, in Unix cron syntax format. This format consists of five fields separated by white spaces: [Minute] [Hour] [Day_of_Month] [Month_of_Year] [Day_of_Week]. The value must be in quotes (for example, <code>"30 0 1 1,6,12 *"</code>). For more information about this format, see <a href="http://crontab.org">Crontab</a>.</p> <p>When <code>StartTime</code> and <code>EndTime</code> are specified with <code>Recurrence</code>, they form the boundaries of when the recurring action starts and stops.</p>
  ##   DesiredCapacity: JInt
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   Time: JString
  ##       : This parameter is no longer used.
  ##   StartTime: JString
  ##            : <p>The date and time for this action to start, in YYYY-MM-DDThh:mm:ssZ format in UTC/GMT only and in quotes (for example, <code>"2019-06-01T00:00:00Z"</code>).</p> <p>If you specify <code>Recurrence</code> and <code>StartTime</code>, Amazon EC2 Auto Scaling performs the action at this time, and then performs the action based on the specified recurrence.</p> <p>If you try to schedule your action in the past, Amazon EC2 Auto Scaling returns an error message.</p>
  ##   ScheduledActionName: JString (required)
  ##                      : The name of this scaling action.
  ##   MinSize: JInt
  ##          : The minimum number of instances in the Auto Scaling group.
  ##   MaxSize: JInt
  ##          : The maximum number of instances in the Auto Scaling group.
  ##   EndTime: JString
  ##          : The date and time for the recurring schedule to end. Amazon EC2 Auto Scaling does not perform the action after this time. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_604794 = formData.getOrDefault("AutoScalingGroupName")
  valid_604794 = validateParameter(valid_604794, JString, required = true,
                                 default = nil)
  if valid_604794 != nil:
    section.add "AutoScalingGroupName", valid_604794
  var valid_604795 = formData.getOrDefault("Recurrence")
  valid_604795 = validateParameter(valid_604795, JString, required = false,
                                 default = nil)
  if valid_604795 != nil:
    section.add "Recurrence", valid_604795
  var valid_604796 = formData.getOrDefault("DesiredCapacity")
  valid_604796 = validateParameter(valid_604796, JInt, required = false, default = nil)
  if valid_604796 != nil:
    section.add "DesiredCapacity", valid_604796
  var valid_604797 = formData.getOrDefault("Time")
  valid_604797 = validateParameter(valid_604797, JString, required = false,
                                 default = nil)
  if valid_604797 != nil:
    section.add "Time", valid_604797
  var valid_604798 = formData.getOrDefault("StartTime")
  valid_604798 = validateParameter(valid_604798, JString, required = false,
                                 default = nil)
  if valid_604798 != nil:
    section.add "StartTime", valid_604798
  var valid_604799 = formData.getOrDefault("ScheduledActionName")
  valid_604799 = validateParameter(valid_604799, JString, required = true,
                                 default = nil)
  if valid_604799 != nil:
    section.add "ScheduledActionName", valid_604799
  var valid_604800 = formData.getOrDefault("MinSize")
  valid_604800 = validateParameter(valid_604800, JInt, required = false, default = nil)
  if valid_604800 != nil:
    section.add "MinSize", valid_604800
  var valid_604801 = formData.getOrDefault("MaxSize")
  valid_604801 = validateParameter(valid_604801, JInt, required = false, default = nil)
  if valid_604801 != nil:
    section.add "MaxSize", valid_604801
  var valid_604802 = formData.getOrDefault("EndTime")
  valid_604802 = validateParameter(valid_604802, JString, required = false,
                                 default = nil)
  if valid_604802 != nil:
    section.add "EndTime", valid_604802
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604803: Call_PostPutScheduledUpdateGroupAction_604782;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates or updates a scheduled scaling action for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html">Scheduled Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_604803.validator(path, query, header, formData, body)
  let scheme = call_604803.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604803.url(scheme.get, call_604803.host, call_604803.base,
                         call_604803.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604803, url, valid)

proc call*(call_604804: Call_PostPutScheduledUpdateGroupAction_604782;
          AutoScalingGroupName: string; ScheduledActionName: string;
          Recurrence: string = ""; DesiredCapacity: int = 0; Time: string = "";
          StartTime: string = ""; Action: string = "PutScheduledUpdateGroupAction";
          MinSize: int = 0; MaxSize: int = 0; EndTime: string = "";
          Version: string = "2011-01-01"): Recallable =
  ## postPutScheduledUpdateGroupAction
  ## <p>Creates or updates a scheduled scaling action for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html">Scheduled Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Recurrence: string
  ##             : <p>The recurring schedule for this action, in Unix cron syntax format. This format consists of five fields separated by white spaces: [Minute] [Hour] [Day_of_Month] [Month_of_Year] [Day_of_Week]. The value must be in quotes (for example, <code>"30 0 1 1,6,12 *"</code>). For more information about this format, see <a href="http://crontab.org">Crontab</a>.</p> <p>When <code>StartTime</code> and <code>EndTime</code> are specified with <code>Recurrence</code>, they form the boundaries of when the recurring action starts and stops.</p>
  ##   DesiredCapacity: int
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   Time: string
  ##       : This parameter is no longer used.
  ##   StartTime: string
  ##            : <p>The date and time for this action to start, in YYYY-MM-DDThh:mm:ssZ format in UTC/GMT only and in quotes (for example, <code>"2019-06-01T00:00:00Z"</code>).</p> <p>If you specify <code>Recurrence</code> and <code>StartTime</code>, Amazon EC2 Auto Scaling performs the action at this time, and then performs the action based on the specified recurrence.</p> <p>If you try to schedule your action in the past, Amazon EC2 Auto Scaling returns an error message.</p>
  ##   Action: string (required)
  ##   ScheduledActionName: string (required)
  ##                      : The name of this scaling action.
  ##   MinSize: int
  ##          : The minimum number of instances in the Auto Scaling group.
  ##   MaxSize: int
  ##          : The maximum number of instances in the Auto Scaling group.
  ##   EndTime: string
  ##          : The date and time for the recurring schedule to end. Amazon EC2 Auto Scaling does not perform the action after this time. 
  ##   Version: string (required)
  var query_604805 = newJObject()
  var formData_604806 = newJObject()
  add(formData_604806, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_604806, "Recurrence", newJString(Recurrence))
  add(formData_604806, "DesiredCapacity", newJInt(DesiredCapacity))
  add(formData_604806, "Time", newJString(Time))
  add(formData_604806, "StartTime", newJString(StartTime))
  add(query_604805, "Action", newJString(Action))
  add(formData_604806, "ScheduledActionName", newJString(ScheduledActionName))
  add(formData_604806, "MinSize", newJInt(MinSize))
  add(formData_604806, "MaxSize", newJInt(MaxSize))
  add(formData_604806, "EndTime", newJString(EndTime))
  add(query_604805, "Version", newJString(Version))
  result = call_604804.call(nil, query_604805, nil, formData_604806, nil)

var postPutScheduledUpdateGroupAction* = Call_PostPutScheduledUpdateGroupAction_604782(
    name: "postPutScheduledUpdateGroupAction", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=PutScheduledUpdateGroupAction",
    validator: validate_PostPutScheduledUpdateGroupAction_604783, base: "/",
    url: url_PostPutScheduledUpdateGroupAction_604784,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutScheduledUpdateGroupAction_604758 = ref object of OpenApiRestCall_602466
proc url_GetPutScheduledUpdateGroupAction_604760(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetPutScheduledUpdateGroupAction_604759(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates or updates a scheduled scaling action for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html">Scheduled Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DesiredCapacity: JInt
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   ScheduledActionName: JString (required)
  ##                      : The name of this scaling action.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Time: JString
  ##       : This parameter is no longer used.
  ##   StartTime: JString
  ##            : <p>The date and time for this action to start, in YYYY-MM-DDThh:mm:ssZ format in UTC/GMT only and in quotes (for example, <code>"2019-06-01T00:00:00Z"</code>).</p> <p>If you specify <code>Recurrence</code> and <code>StartTime</code>, Amazon EC2 Auto Scaling performs the action at this time, and then performs the action based on the specified recurrence.</p> <p>If you try to schedule your action in the past, Amazon EC2 Auto Scaling returns an error message.</p>
  ##   Recurrence: JString
  ##             : <p>The recurring schedule for this action, in Unix cron syntax format. This format consists of five fields separated by white spaces: [Minute] [Hour] [Day_of_Month] [Month_of_Year] [Day_of_Week]. The value must be in quotes (for example, <code>"30 0 1 1,6,12 *"</code>). For more information about this format, see <a href="http://crontab.org">Crontab</a>.</p> <p>When <code>StartTime</code> and <code>EndTime</code> are specified with <code>Recurrence</code>, they form the boundaries of when the recurring action starts and stops.</p>
  ##   Action: JString (required)
  ##   MaxSize: JInt
  ##          : The maximum number of instances in the Auto Scaling group.
  ##   EndTime: JString
  ##          : The date and time for the recurring schedule to end. Amazon EC2 Auto Scaling does not perform the action after this time. 
  ##   MinSize: JInt
  ##          : The minimum number of instances in the Auto Scaling group.
  ##   Version: JString (required)
  section = newJObject()
  var valid_604761 = query.getOrDefault("DesiredCapacity")
  valid_604761 = validateParameter(valid_604761, JInt, required = false, default = nil)
  if valid_604761 != nil:
    section.add "DesiredCapacity", valid_604761
  assert query != nil, "query argument is necessary due to required `ScheduledActionName` field"
  var valid_604762 = query.getOrDefault("ScheduledActionName")
  valid_604762 = validateParameter(valid_604762, JString, required = true,
                                 default = nil)
  if valid_604762 != nil:
    section.add "ScheduledActionName", valid_604762
  var valid_604763 = query.getOrDefault("AutoScalingGroupName")
  valid_604763 = validateParameter(valid_604763, JString, required = true,
                                 default = nil)
  if valid_604763 != nil:
    section.add "AutoScalingGroupName", valid_604763
  var valid_604764 = query.getOrDefault("Time")
  valid_604764 = validateParameter(valid_604764, JString, required = false,
                                 default = nil)
  if valid_604764 != nil:
    section.add "Time", valid_604764
  var valid_604765 = query.getOrDefault("StartTime")
  valid_604765 = validateParameter(valid_604765, JString, required = false,
                                 default = nil)
  if valid_604765 != nil:
    section.add "StartTime", valid_604765
  var valid_604766 = query.getOrDefault("Recurrence")
  valid_604766 = validateParameter(valid_604766, JString, required = false,
                                 default = nil)
  if valid_604766 != nil:
    section.add "Recurrence", valid_604766
  var valid_604767 = query.getOrDefault("Action")
  valid_604767 = validateParameter(valid_604767, JString, required = true, default = newJString(
      "PutScheduledUpdateGroupAction"))
  if valid_604767 != nil:
    section.add "Action", valid_604767
  var valid_604768 = query.getOrDefault("MaxSize")
  valid_604768 = validateParameter(valid_604768, JInt, required = false, default = nil)
  if valid_604768 != nil:
    section.add "MaxSize", valid_604768
  var valid_604769 = query.getOrDefault("EndTime")
  valid_604769 = validateParameter(valid_604769, JString, required = false,
                                 default = nil)
  if valid_604769 != nil:
    section.add "EndTime", valid_604769
  var valid_604770 = query.getOrDefault("MinSize")
  valid_604770 = validateParameter(valid_604770, JInt, required = false, default = nil)
  if valid_604770 != nil:
    section.add "MinSize", valid_604770
  var valid_604771 = query.getOrDefault("Version")
  valid_604771 = validateParameter(valid_604771, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604771 != nil:
    section.add "Version", valid_604771
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604772 = header.getOrDefault("X-Amz-Date")
  valid_604772 = validateParameter(valid_604772, JString, required = false,
                                 default = nil)
  if valid_604772 != nil:
    section.add "X-Amz-Date", valid_604772
  var valid_604773 = header.getOrDefault("X-Amz-Security-Token")
  valid_604773 = validateParameter(valid_604773, JString, required = false,
                                 default = nil)
  if valid_604773 != nil:
    section.add "X-Amz-Security-Token", valid_604773
  var valid_604774 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604774 = validateParameter(valid_604774, JString, required = false,
                                 default = nil)
  if valid_604774 != nil:
    section.add "X-Amz-Content-Sha256", valid_604774
  var valid_604775 = header.getOrDefault("X-Amz-Algorithm")
  valid_604775 = validateParameter(valid_604775, JString, required = false,
                                 default = nil)
  if valid_604775 != nil:
    section.add "X-Amz-Algorithm", valid_604775
  var valid_604776 = header.getOrDefault("X-Amz-Signature")
  valid_604776 = validateParameter(valid_604776, JString, required = false,
                                 default = nil)
  if valid_604776 != nil:
    section.add "X-Amz-Signature", valid_604776
  var valid_604777 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604777 = validateParameter(valid_604777, JString, required = false,
                                 default = nil)
  if valid_604777 != nil:
    section.add "X-Amz-SignedHeaders", valid_604777
  var valid_604778 = header.getOrDefault("X-Amz-Credential")
  valid_604778 = validateParameter(valid_604778, JString, required = false,
                                 default = nil)
  if valid_604778 != nil:
    section.add "X-Amz-Credential", valid_604778
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604779: Call_GetPutScheduledUpdateGroupAction_604758;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates or updates a scheduled scaling action for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html">Scheduled Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_604779.validator(path, query, header, formData, body)
  let scheme = call_604779.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604779.url(scheme.get, call_604779.host, call_604779.base,
                         call_604779.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604779, url, valid)

proc call*(call_604780: Call_GetPutScheduledUpdateGroupAction_604758;
          ScheduledActionName: string; AutoScalingGroupName: string;
          DesiredCapacity: int = 0; Time: string = ""; StartTime: string = "";
          Recurrence: string = ""; Action: string = "PutScheduledUpdateGroupAction";
          MaxSize: int = 0; EndTime: string = ""; MinSize: int = 0;
          Version: string = "2011-01-01"): Recallable =
  ## getPutScheduledUpdateGroupAction
  ## <p>Creates or updates a scheduled scaling action for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html">Scheduled Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   DesiredCapacity: int
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   ScheduledActionName: string (required)
  ##                      : The name of this scaling action.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Time: string
  ##       : This parameter is no longer used.
  ##   StartTime: string
  ##            : <p>The date and time for this action to start, in YYYY-MM-DDThh:mm:ssZ format in UTC/GMT only and in quotes (for example, <code>"2019-06-01T00:00:00Z"</code>).</p> <p>If you specify <code>Recurrence</code> and <code>StartTime</code>, Amazon EC2 Auto Scaling performs the action at this time, and then performs the action based on the specified recurrence.</p> <p>If you try to schedule your action in the past, Amazon EC2 Auto Scaling returns an error message.</p>
  ##   Recurrence: string
  ##             : <p>The recurring schedule for this action, in Unix cron syntax format. This format consists of five fields separated by white spaces: [Minute] [Hour] [Day_of_Month] [Month_of_Year] [Day_of_Week]. The value must be in quotes (for example, <code>"30 0 1 1,6,12 *"</code>). For more information about this format, see <a href="http://crontab.org">Crontab</a>.</p> <p>When <code>StartTime</code> and <code>EndTime</code> are specified with <code>Recurrence</code>, they form the boundaries of when the recurring action starts and stops.</p>
  ##   Action: string (required)
  ##   MaxSize: int
  ##          : The maximum number of instances in the Auto Scaling group.
  ##   EndTime: string
  ##          : The date and time for the recurring schedule to end. Amazon EC2 Auto Scaling does not perform the action after this time. 
  ##   MinSize: int
  ##          : The minimum number of instances in the Auto Scaling group.
  ##   Version: string (required)
  var query_604781 = newJObject()
  add(query_604781, "DesiredCapacity", newJInt(DesiredCapacity))
  add(query_604781, "ScheduledActionName", newJString(ScheduledActionName))
  add(query_604781, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_604781, "Time", newJString(Time))
  add(query_604781, "StartTime", newJString(StartTime))
  add(query_604781, "Recurrence", newJString(Recurrence))
  add(query_604781, "Action", newJString(Action))
  add(query_604781, "MaxSize", newJInt(MaxSize))
  add(query_604781, "EndTime", newJString(EndTime))
  add(query_604781, "MinSize", newJInt(MinSize))
  add(query_604781, "Version", newJString(Version))
  result = call_604780.call(nil, query_604781, nil, nil, nil)

var getPutScheduledUpdateGroupAction* = Call_GetPutScheduledUpdateGroupAction_604758(
    name: "getPutScheduledUpdateGroupAction", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=PutScheduledUpdateGroupAction",
    validator: validate_GetPutScheduledUpdateGroupAction_604759, base: "/",
    url: url_GetPutScheduledUpdateGroupAction_604760,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRecordLifecycleActionHeartbeat_604826 = ref object of OpenApiRestCall_602466
proc url_PostRecordLifecycleActionHeartbeat_604828(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRecordLifecycleActionHeartbeat_604827(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using <a>PutLifecycleHook</a>.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p> <b>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</b> </p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html">Auto Scaling Lifecycle</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604829 = query.getOrDefault("Action")
  valid_604829 = validateParameter(valid_604829, JString, required = true, default = newJString(
      "RecordLifecycleActionHeartbeat"))
  if valid_604829 != nil:
    section.add "Action", valid_604829
  var valid_604830 = query.getOrDefault("Version")
  valid_604830 = validateParameter(valid_604830, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604830 != nil:
    section.add "Version", valid_604830
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604831 = header.getOrDefault("X-Amz-Date")
  valid_604831 = validateParameter(valid_604831, JString, required = false,
                                 default = nil)
  if valid_604831 != nil:
    section.add "X-Amz-Date", valid_604831
  var valid_604832 = header.getOrDefault("X-Amz-Security-Token")
  valid_604832 = validateParameter(valid_604832, JString, required = false,
                                 default = nil)
  if valid_604832 != nil:
    section.add "X-Amz-Security-Token", valid_604832
  var valid_604833 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604833 = validateParameter(valid_604833, JString, required = false,
                                 default = nil)
  if valid_604833 != nil:
    section.add "X-Amz-Content-Sha256", valid_604833
  var valid_604834 = header.getOrDefault("X-Amz-Algorithm")
  valid_604834 = validateParameter(valid_604834, JString, required = false,
                                 default = nil)
  if valid_604834 != nil:
    section.add "X-Amz-Algorithm", valid_604834
  var valid_604835 = header.getOrDefault("X-Amz-Signature")
  valid_604835 = validateParameter(valid_604835, JString, required = false,
                                 default = nil)
  if valid_604835 != nil:
    section.add "X-Amz-Signature", valid_604835
  var valid_604836 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604836 = validateParameter(valid_604836, JString, required = false,
                                 default = nil)
  if valid_604836 != nil:
    section.add "X-Amz-SignedHeaders", valid_604836
  var valid_604837 = header.getOrDefault("X-Amz-Credential")
  valid_604837 = validateParameter(valid_604837, JString, required = false,
                                 default = nil)
  if valid_604837 != nil:
    section.add "X-Amz-Credential", valid_604837
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceId: JString
  ##             : The ID of the instance.
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   LifecycleActionToken: JString
  ##                       : A token that uniquely identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target that you specified when you created the lifecycle hook.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_604838 = formData.getOrDefault("AutoScalingGroupName")
  valid_604838 = validateParameter(valid_604838, JString, required = true,
                                 default = nil)
  if valid_604838 != nil:
    section.add "AutoScalingGroupName", valid_604838
  var valid_604839 = formData.getOrDefault("InstanceId")
  valid_604839 = validateParameter(valid_604839, JString, required = false,
                                 default = nil)
  if valid_604839 != nil:
    section.add "InstanceId", valid_604839
  var valid_604840 = formData.getOrDefault("LifecycleHookName")
  valid_604840 = validateParameter(valid_604840, JString, required = true,
                                 default = nil)
  if valid_604840 != nil:
    section.add "LifecycleHookName", valid_604840
  var valid_604841 = formData.getOrDefault("LifecycleActionToken")
  valid_604841 = validateParameter(valid_604841, JString, required = false,
                                 default = nil)
  if valid_604841 != nil:
    section.add "LifecycleActionToken", valid_604841
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604842: Call_PostRecordLifecycleActionHeartbeat_604826;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using <a>PutLifecycleHook</a>.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p> <b>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</b> </p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html">Auto Scaling Lifecycle</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_604842.validator(path, query, header, formData, body)
  let scheme = call_604842.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604842.url(scheme.get, call_604842.host, call_604842.base,
                         call_604842.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604842, url, valid)

proc call*(call_604843: Call_PostRecordLifecycleActionHeartbeat_604826;
          AutoScalingGroupName: string; LifecycleHookName: string;
          Action: string = "RecordLifecycleActionHeartbeat";
          InstanceId: string = ""; Version: string = "2011-01-01";
          LifecycleActionToken: string = ""): Recallable =
  ## postRecordLifecycleActionHeartbeat
  ## <p>Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using <a>PutLifecycleHook</a>.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p> <b>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</b> </p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html">Auto Scaling Lifecycle</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   InstanceId: string
  ##             : The ID of the instance.
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   Version: string (required)
  ##   LifecycleActionToken: string
  ##                       : A token that uniquely identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target that you specified when you created the lifecycle hook.
  var query_604844 = newJObject()
  var formData_604845 = newJObject()
  add(formData_604845, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_604844, "Action", newJString(Action))
  add(formData_604845, "InstanceId", newJString(InstanceId))
  add(formData_604845, "LifecycleHookName", newJString(LifecycleHookName))
  add(query_604844, "Version", newJString(Version))
  add(formData_604845, "LifecycleActionToken", newJString(LifecycleActionToken))
  result = call_604843.call(nil, query_604844, nil, formData_604845, nil)

var postRecordLifecycleActionHeartbeat* = Call_PostRecordLifecycleActionHeartbeat_604826(
    name: "postRecordLifecycleActionHeartbeat", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=RecordLifecycleActionHeartbeat",
    validator: validate_PostRecordLifecycleActionHeartbeat_604827, base: "/",
    url: url_PostRecordLifecycleActionHeartbeat_604828,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRecordLifecycleActionHeartbeat_604807 = ref object of OpenApiRestCall_602466
proc url_GetRecordLifecycleActionHeartbeat_604809(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRecordLifecycleActionHeartbeat_604808(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using <a>PutLifecycleHook</a>.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p> <b>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</b> </p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html">Auto Scaling Lifecycle</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   InstanceId: JString
  ##             : The ID of the instance.
  ##   Version: JString (required)
  ##   LifecycleActionToken: JString
  ##                       : A token that uniquely identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target that you specified when you created the lifecycle hook.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_604810 = query.getOrDefault("AutoScalingGroupName")
  valid_604810 = validateParameter(valid_604810, JString, required = true,
                                 default = nil)
  if valid_604810 != nil:
    section.add "AutoScalingGroupName", valid_604810
  var valid_604811 = query.getOrDefault("Action")
  valid_604811 = validateParameter(valid_604811, JString, required = true, default = newJString(
      "RecordLifecycleActionHeartbeat"))
  if valid_604811 != nil:
    section.add "Action", valid_604811
  var valid_604812 = query.getOrDefault("LifecycleHookName")
  valid_604812 = validateParameter(valid_604812, JString, required = true,
                                 default = nil)
  if valid_604812 != nil:
    section.add "LifecycleHookName", valid_604812
  var valid_604813 = query.getOrDefault("InstanceId")
  valid_604813 = validateParameter(valid_604813, JString, required = false,
                                 default = nil)
  if valid_604813 != nil:
    section.add "InstanceId", valid_604813
  var valid_604814 = query.getOrDefault("Version")
  valid_604814 = validateParameter(valid_604814, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604814 != nil:
    section.add "Version", valid_604814
  var valid_604815 = query.getOrDefault("LifecycleActionToken")
  valid_604815 = validateParameter(valid_604815, JString, required = false,
                                 default = nil)
  if valid_604815 != nil:
    section.add "LifecycleActionToken", valid_604815
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604816 = header.getOrDefault("X-Amz-Date")
  valid_604816 = validateParameter(valid_604816, JString, required = false,
                                 default = nil)
  if valid_604816 != nil:
    section.add "X-Amz-Date", valid_604816
  var valid_604817 = header.getOrDefault("X-Amz-Security-Token")
  valid_604817 = validateParameter(valid_604817, JString, required = false,
                                 default = nil)
  if valid_604817 != nil:
    section.add "X-Amz-Security-Token", valid_604817
  var valid_604818 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604818 = validateParameter(valid_604818, JString, required = false,
                                 default = nil)
  if valid_604818 != nil:
    section.add "X-Amz-Content-Sha256", valid_604818
  var valid_604819 = header.getOrDefault("X-Amz-Algorithm")
  valid_604819 = validateParameter(valid_604819, JString, required = false,
                                 default = nil)
  if valid_604819 != nil:
    section.add "X-Amz-Algorithm", valid_604819
  var valid_604820 = header.getOrDefault("X-Amz-Signature")
  valid_604820 = validateParameter(valid_604820, JString, required = false,
                                 default = nil)
  if valid_604820 != nil:
    section.add "X-Amz-Signature", valid_604820
  var valid_604821 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604821 = validateParameter(valid_604821, JString, required = false,
                                 default = nil)
  if valid_604821 != nil:
    section.add "X-Amz-SignedHeaders", valid_604821
  var valid_604822 = header.getOrDefault("X-Amz-Credential")
  valid_604822 = validateParameter(valid_604822, JString, required = false,
                                 default = nil)
  if valid_604822 != nil:
    section.add "X-Amz-Credential", valid_604822
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604823: Call_GetRecordLifecycleActionHeartbeat_604807;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using <a>PutLifecycleHook</a>.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p> <b>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</b> </p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html">Auto Scaling Lifecycle</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_604823.validator(path, query, header, formData, body)
  let scheme = call_604823.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604823.url(scheme.get, call_604823.host, call_604823.base,
                         call_604823.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604823, url, valid)

proc call*(call_604824: Call_GetRecordLifecycleActionHeartbeat_604807;
          AutoScalingGroupName: string; LifecycleHookName: string;
          Action: string = "RecordLifecycleActionHeartbeat";
          InstanceId: string = ""; Version: string = "2011-01-01";
          LifecycleActionToken: string = ""): Recallable =
  ## getRecordLifecycleActionHeartbeat
  ## <p>Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using <a>PutLifecycleHook</a>.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p> <b>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</b> </p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html">Auto Scaling Lifecycle</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   InstanceId: string
  ##             : The ID of the instance.
  ##   Version: string (required)
  ##   LifecycleActionToken: string
  ##                       : A token that uniquely identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target that you specified when you created the lifecycle hook.
  var query_604825 = newJObject()
  add(query_604825, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_604825, "Action", newJString(Action))
  add(query_604825, "LifecycleHookName", newJString(LifecycleHookName))
  add(query_604825, "InstanceId", newJString(InstanceId))
  add(query_604825, "Version", newJString(Version))
  add(query_604825, "LifecycleActionToken", newJString(LifecycleActionToken))
  result = call_604824.call(nil, query_604825, nil, nil, nil)

var getRecordLifecycleActionHeartbeat* = Call_GetRecordLifecycleActionHeartbeat_604807(
    name: "getRecordLifecycleActionHeartbeat", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=RecordLifecycleActionHeartbeat",
    validator: validate_GetRecordLifecycleActionHeartbeat_604808, base: "/",
    url: url_GetRecordLifecycleActionHeartbeat_604809,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResumeProcesses_604863 = ref object of OpenApiRestCall_602466
proc url_PostResumeProcesses_604865(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostResumeProcesses_604864(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Resumes the specified suspended automatic scaling processes, or all suspended process, for the specified Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604866 = query.getOrDefault("Action")
  valid_604866 = validateParameter(valid_604866, JString, required = true,
                                 default = newJString("ResumeProcesses"))
  if valid_604866 != nil:
    section.add "Action", valid_604866
  var valid_604867 = query.getOrDefault("Version")
  valid_604867 = validateParameter(valid_604867, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604867 != nil:
    section.add "Version", valid_604867
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604868 = header.getOrDefault("X-Amz-Date")
  valid_604868 = validateParameter(valid_604868, JString, required = false,
                                 default = nil)
  if valid_604868 != nil:
    section.add "X-Amz-Date", valid_604868
  var valid_604869 = header.getOrDefault("X-Amz-Security-Token")
  valid_604869 = validateParameter(valid_604869, JString, required = false,
                                 default = nil)
  if valid_604869 != nil:
    section.add "X-Amz-Security-Token", valid_604869
  var valid_604870 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604870 = validateParameter(valid_604870, JString, required = false,
                                 default = nil)
  if valid_604870 != nil:
    section.add "X-Amz-Content-Sha256", valid_604870
  var valid_604871 = header.getOrDefault("X-Amz-Algorithm")
  valid_604871 = validateParameter(valid_604871, JString, required = false,
                                 default = nil)
  if valid_604871 != nil:
    section.add "X-Amz-Algorithm", valid_604871
  var valid_604872 = header.getOrDefault("X-Amz-Signature")
  valid_604872 = validateParameter(valid_604872, JString, required = false,
                                 default = nil)
  if valid_604872 != nil:
    section.add "X-Amz-Signature", valid_604872
  var valid_604873 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604873 = validateParameter(valid_604873, JString, required = false,
                                 default = nil)
  if valid_604873 != nil:
    section.add "X-Amz-SignedHeaders", valid_604873
  var valid_604874 = header.getOrDefault("X-Amz-Credential")
  valid_604874 = validateParameter(valid_604874, JString, required = false,
                                 default = nil)
  if valid_604874 != nil:
    section.add "X-Amz-Credential", valid_604874
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_604875 = formData.getOrDefault("AutoScalingGroupName")
  valid_604875 = validateParameter(valid_604875, JString, required = true,
                                 default = nil)
  if valid_604875 != nil:
    section.add "AutoScalingGroupName", valid_604875
  var valid_604876 = formData.getOrDefault("ScalingProcesses")
  valid_604876 = validateParameter(valid_604876, JArray, required = false,
                                 default = nil)
  if valid_604876 != nil:
    section.add "ScalingProcesses", valid_604876
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604877: Call_PostResumeProcesses_604863; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Resumes the specified suspended automatic scaling processes, or all suspended process, for the specified Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_604877.validator(path, query, header, formData, body)
  let scheme = call_604877.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604877.url(scheme.get, call_604877.host, call_604877.base,
                         call_604877.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604877, url, valid)

proc call*(call_604878: Call_PostResumeProcesses_604863;
          AutoScalingGroupName: string; ScalingProcesses: JsonNode = nil;
          Action: string = "ResumeProcesses"; Version: string = "2011-01-01"): Recallable =
  ## postResumeProcesses
  ## <p>Resumes the specified suspended automatic scaling processes, or all suspended process, for the specified Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604879 = newJObject()
  var formData_604880 = newJObject()
  add(formData_604880, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if ScalingProcesses != nil:
    formData_604880.add "ScalingProcesses", ScalingProcesses
  add(query_604879, "Action", newJString(Action))
  add(query_604879, "Version", newJString(Version))
  result = call_604878.call(nil, query_604879, nil, formData_604880, nil)

var postResumeProcesses* = Call_PostResumeProcesses_604863(
    name: "postResumeProcesses", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=ResumeProcesses",
    validator: validate_PostResumeProcesses_604864, base: "/",
    url: url_PostResumeProcesses_604865, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResumeProcesses_604846 = ref object of OpenApiRestCall_602466
proc url_GetResumeProcesses_604848(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetResumeProcesses_604847(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Resumes the specified suspended automatic scaling processes, or all suspended process, for the specified Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_604849 = query.getOrDefault("ScalingProcesses")
  valid_604849 = validateParameter(valid_604849, JArray, required = false,
                                 default = nil)
  if valid_604849 != nil:
    section.add "ScalingProcesses", valid_604849
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_604850 = query.getOrDefault("AutoScalingGroupName")
  valid_604850 = validateParameter(valid_604850, JString, required = true,
                                 default = nil)
  if valid_604850 != nil:
    section.add "AutoScalingGroupName", valid_604850
  var valid_604851 = query.getOrDefault("Action")
  valid_604851 = validateParameter(valid_604851, JString, required = true,
                                 default = newJString("ResumeProcesses"))
  if valid_604851 != nil:
    section.add "Action", valid_604851
  var valid_604852 = query.getOrDefault("Version")
  valid_604852 = validateParameter(valid_604852, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604852 != nil:
    section.add "Version", valid_604852
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604853 = header.getOrDefault("X-Amz-Date")
  valid_604853 = validateParameter(valid_604853, JString, required = false,
                                 default = nil)
  if valid_604853 != nil:
    section.add "X-Amz-Date", valid_604853
  var valid_604854 = header.getOrDefault("X-Amz-Security-Token")
  valid_604854 = validateParameter(valid_604854, JString, required = false,
                                 default = nil)
  if valid_604854 != nil:
    section.add "X-Amz-Security-Token", valid_604854
  var valid_604855 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604855 = validateParameter(valid_604855, JString, required = false,
                                 default = nil)
  if valid_604855 != nil:
    section.add "X-Amz-Content-Sha256", valid_604855
  var valid_604856 = header.getOrDefault("X-Amz-Algorithm")
  valid_604856 = validateParameter(valid_604856, JString, required = false,
                                 default = nil)
  if valid_604856 != nil:
    section.add "X-Amz-Algorithm", valid_604856
  var valid_604857 = header.getOrDefault("X-Amz-Signature")
  valid_604857 = validateParameter(valid_604857, JString, required = false,
                                 default = nil)
  if valid_604857 != nil:
    section.add "X-Amz-Signature", valid_604857
  var valid_604858 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604858 = validateParameter(valid_604858, JString, required = false,
                                 default = nil)
  if valid_604858 != nil:
    section.add "X-Amz-SignedHeaders", valid_604858
  var valid_604859 = header.getOrDefault("X-Amz-Credential")
  valid_604859 = validateParameter(valid_604859, JString, required = false,
                                 default = nil)
  if valid_604859 != nil:
    section.add "X-Amz-Credential", valid_604859
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604860: Call_GetResumeProcesses_604846; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Resumes the specified suspended automatic scaling processes, or all suspended process, for the specified Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_604860.validator(path, query, header, formData, body)
  let scheme = call_604860.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604860.url(scheme.get, call_604860.host, call_604860.base,
                         call_604860.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604860, url, valid)

proc call*(call_604861: Call_GetResumeProcesses_604846;
          AutoScalingGroupName: string; ScalingProcesses: JsonNode = nil;
          Action: string = "ResumeProcesses"; Version: string = "2011-01-01"): Recallable =
  ## getResumeProcesses
  ## <p>Resumes the specified suspended automatic scaling processes, or all suspended process, for the specified Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604862 = newJObject()
  if ScalingProcesses != nil:
    query_604862.add "ScalingProcesses", ScalingProcesses
  add(query_604862, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_604862, "Action", newJString(Action))
  add(query_604862, "Version", newJString(Version))
  result = call_604861.call(nil, query_604862, nil, nil, nil)

var getResumeProcesses* = Call_GetResumeProcesses_604846(
    name: "getResumeProcesses", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=ResumeProcesses",
    validator: validate_GetResumeProcesses_604847, base: "/",
    url: url_GetResumeProcesses_604848, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetDesiredCapacity_604899 = ref object of OpenApiRestCall_602466
proc url_PostSetDesiredCapacity_604901(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostSetDesiredCapacity_604900(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the size of the specified Auto Scaling group.</p> <p>For more information about desired capacity, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">What Is Amazon EC2 Auto Scaling?</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604902 = query.getOrDefault("Action")
  valid_604902 = validateParameter(valid_604902, JString, required = true,
                                 default = newJString("SetDesiredCapacity"))
  if valid_604902 != nil:
    section.add "Action", valid_604902
  var valid_604903 = query.getOrDefault("Version")
  valid_604903 = validateParameter(valid_604903, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604903 != nil:
    section.add "Version", valid_604903
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604904 = header.getOrDefault("X-Amz-Date")
  valid_604904 = validateParameter(valid_604904, JString, required = false,
                                 default = nil)
  if valid_604904 != nil:
    section.add "X-Amz-Date", valid_604904
  var valid_604905 = header.getOrDefault("X-Amz-Security-Token")
  valid_604905 = validateParameter(valid_604905, JString, required = false,
                                 default = nil)
  if valid_604905 != nil:
    section.add "X-Amz-Security-Token", valid_604905
  var valid_604906 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604906 = validateParameter(valid_604906, JString, required = false,
                                 default = nil)
  if valid_604906 != nil:
    section.add "X-Amz-Content-Sha256", valid_604906
  var valid_604907 = header.getOrDefault("X-Amz-Algorithm")
  valid_604907 = validateParameter(valid_604907, JString, required = false,
                                 default = nil)
  if valid_604907 != nil:
    section.add "X-Amz-Algorithm", valid_604907
  var valid_604908 = header.getOrDefault("X-Amz-Signature")
  valid_604908 = validateParameter(valid_604908, JString, required = false,
                                 default = nil)
  if valid_604908 != nil:
    section.add "X-Amz-Signature", valid_604908
  var valid_604909 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604909 = validateParameter(valid_604909, JString, required = false,
                                 default = nil)
  if valid_604909 != nil:
    section.add "X-Amz-SignedHeaders", valid_604909
  var valid_604910 = header.getOrDefault("X-Amz-Credential")
  valid_604910 = validateParameter(valid_604910, JString, required = false,
                                 default = nil)
  if valid_604910 != nil:
    section.add "X-Amz-Credential", valid_604910
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   DesiredCapacity: JInt (required)
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   HonorCooldown: JBool
  ##                : Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before initiating a scaling activity to set your Auto Scaling group to its new capacity. By default, Amazon EC2 Auto Scaling does not honor the cooldown period during manual scaling activities.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_604911 = formData.getOrDefault("AutoScalingGroupName")
  valid_604911 = validateParameter(valid_604911, JString, required = true,
                                 default = nil)
  if valid_604911 != nil:
    section.add "AutoScalingGroupName", valid_604911
  var valid_604912 = formData.getOrDefault("DesiredCapacity")
  valid_604912 = validateParameter(valid_604912, JInt, required = true, default = nil)
  if valid_604912 != nil:
    section.add "DesiredCapacity", valid_604912
  var valid_604913 = formData.getOrDefault("HonorCooldown")
  valid_604913 = validateParameter(valid_604913, JBool, required = false, default = nil)
  if valid_604913 != nil:
    section.add "HonorCooldown", valid_604913
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604914: Call_PostSetDesiredCapacity_604899; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the size of the specified Auto Scaling group.</p> <p>For more information about desired capacity, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">What Is Amazon EC2 Auto Scaling?</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_604914.validator(path, query, header, formData, body)
  let scheme = call_604914.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604914.url(scheme.get, call_604914.host, call_604914.base,
                         call_604914.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604914, url, valid)

proc call*(call_604915: Call_PostSetDesiredCapacity_604899;
          AutoScalingGroupName: string; DesiredCapacity: int;
          HonorCooldown: bool = false; Action: string = "SetDesiredCapacity";
          Version: string = "2011-01-01"): Recallable =
  ## postSetDesiredCapacity
  ## <p>Sets the size of the specified Auto Scaling group.</p> <p>For more information about desired capacity, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">What Is Amazon EC2 Auto Scaling?</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   DesiredCapacity: int (required)
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   HonorCooldown: bool
  ##                : Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before initiating a scaling activity to set your Auto Scaling group to its new capacity. By default, Amazon EC2 Auto Scaling does not honor the cooldown period during manual scaling activities.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604916 = newJObject()
  var formData_604917 = newJObject()
  add(formData_604917, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_604917, "DesiredCapacity", newJInt(DesiredCapacity))
  add(formData_604917, "HonorCooldown", newJBool(HonorCooldown))
  add(query_604916, "Action", newJString(Action))
  add(query_604916, "Version", newJString(Version))
  result = call_604915.call(nil, query_604916, nil, formData_604917, nil)

var postSetDesiredCapacity* = Call_PostSetDesiredCapacity_604899(
    name: "postSetDesiredCapacity", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=SetDesiredCapacity",
    validator: validate_PostSetDesiredCapacity_604900, base: "/",
    url: url_PostSetDesiredCapacity_604901, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetDesiredCapacity_604881 = ref object of OpenApiRestCall_602466
proc url_GetSetDesiredCapacity_604883(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetSetDesiredCapacity_604882(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the size of the specified Auto Scaling group.</p> <p>For more information about desired capacity, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">What Is Amazon EC2 Auto Scaling?</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DesiredCapacity: JInt (required)
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   HonorCooldown: JBool
  ##                : Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before initiating a scaling activity to set your Auto Scaling group to its new capacity. By default, Amazon EC2 Auto Scaling does not honor the cooldown period during manual scaling activities.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `DesiredCapacity` field"
  var valid_604884 = query.getOrDefault("DesiredCapacity")
  valid_604884 = validateParameter(valid_604884, JInt, required = true, default = nil)
  if valid_604884 != nil:
    section.add "DesiredCapacity", valid_604884
  var valid_604885 = query.getOrDefault("AutoScalingGroupName")
  valid_604885 = validateParameter(valid_604885, JString, required = true,
                                 default = nil)
  if valid_604885 != nil:
    section.add "AutoScalingGroupName", valid_604885
  var valid_604886 = query.getOrDefault("Action")
  valid_604886 = validateParameter(valid_604886, JString, required = true,
                                 default = newJString("SetDesiredCapacity"))
  if valid_604886 != nil:
    section.add "Action", valid_604886
  var valid_604887 = query.getOrDefault("HonorCooldown")
  valid_604887 = validateParameter(valid_604887, JBool, required = false, default = nil)
  if valid_604887 != nil:
    section.add "HonorCooldown", valid_604887
  var valid_604888 = query.getOrDefault("Version")
  valid_604888 = validateParameter(valid_604888, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604888 != nil:
    section.add "Version", valid_604888
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604889 = header.getOrDefault("X-Amz-Date")
  valid_604889 = validateParameter(valid_604889, JString, required = false,
                                 default = nil)
  if valid_604889 != nil:
    section.add "X-Amz-Date", valid_604889
  var valid_604890 = header.getOrDefault("X-Amz-Security-Token")
  valid_604890 = validateParameter(valid_604890, JString, required = false,
                                 default = nil)
  if valid_604890 != nil:
    section.add "X-Amz-Security-Token", valid_604890
  var valid_604891 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604891 = validateParameter(valid_604891, JString, required = false,
                                 default = nil)
  if valid_604891 != nil:
    section.add "X-Amz-Content-Sha256", valid_604891
  var valid_604892 = header.getOrDefault("X-Amz-Algorithm")
  valid_604892 = validateParameter(valid_604892, JString, required = false,
                                 default = nil)
  if valid_604892 != nil:
    section.add "X-Amz-Algorithm", valid_604892
  var valid_604893 = header.getOrDefault("X-Amz-Signature")
  valid_604893 = validateParameter(valid_604893, JString, required = false,
                                 default = nil)
  if valid_604893 != nil:
    section.add "X-Amz-Signature", valid_604893
  var valid_604894 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604894 = validateParameter(valid_604894, JString, required = false,
                                 default = nil)
  if valid_604894 != nil:
    section.add "X-Amz-SignedHeaders", valid_604894
  var valid_604895 = header.getOrDefault("X-Amz-Credential")
  valid_604895 = validateParameter(valid_604895, JString, required = false,
                                 default = nil)
  if valid_604895 != nil:
    section.add "X-Amz-Credential", valid_604895
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604896: Call_GetSetDesiredCapacity_604881; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the size of the specified Auto Scaling group.</p> <p>For more information about desired capacity, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">What Is Amazon EC2 Auto Scaling?</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_604896.validator(path, query, header, formData, body)
  let scheme = call_604896.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604896.url(scheme.get, call_604896.host, call_604896.base,
                         call_604896.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604896, url, valid)

proc call*(call_604897: Call_GetSetDesiredCapacity_604881; DesiredCapacity: int;
          AutoScalingGroupName: string; Action: string = "SetDesiredCapacity";
          HonorCooldown: bool = false; Version: string = "2011-01-01"): Recallable =
  ## getSetDesiredCapacity
  ## <p>Sets the size of the specified Auto Scaling group.</p> <p>For more information about desired capacity, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">What Is Amazon EC2 Auto Scaling?</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   DesiredCapacity: int (required)
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   HonorCooldown: bool
  ##                : Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before initiating a scaling activity to set your Auto Scaling group to its new capacity. By default, Amazon EC2 Auto Scaling does not honor the cooldown period during manual scaling activities.
  ##   Version: string (required)
  var query_604898 = newJObject()
  add(query_604898, "DesiredCapacity", newJInt(DesiredCapacity))
  add(query_604898, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_604898, "Action", newJString(Action))
  add(query_604898, "HonorCooldown", newJBool(HonorCooldown))
  add(query_604898, "Version", newJString(Version))
  result = call_604897.call(nil, query_604898, nil, nil, nil)

var getSetDesiredCapacity* = Call_GetSetDesiredCapacity_604881(
    name: "getSetDesiredCapacity", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=SetDesiredCapacity",
    validator: validate_GetSetDesiredCapacity_604882, base: "/",
    url: url_GetSetDesiredCapacity_604883, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetInstanceHealth_604936 = ref object of OpenApiRestCall_602466
proc url_PostSetInstanceHealth_604938(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostSetInstanceHealth_604937(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the health status of the specified instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604939 = query.getOrDefault("Action")
  valid_604939 = validateParameter(valid_604939, JString, required = true,
                                 default = newJString("SetInstanceHealth"))
  if valid_604939 != nil:
    section.add "Action", valid_604939
  var valid_604940 = query.getOrDefault("Version")
  valid_604940 = validateParameter(valid_604940, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604940 != nil:
    section.add "Version", valid_604940
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604941 = header.getOrDefault("X-Amz-Date")
  valid_604941 = validateParameter(valid_604941, JString, required = false,
                                 default = nil)
  if valid_604941 != nil:
    section.add "X-Amz-Date", valid_604941
  var valid_604942 = header.getOrDefault("X-Amz-Security-Token")
  valid_604942 = validateParameter(valid_604942, JString, required = false,
                                 default = nil)
  if valid_604942 != nil:
    section.add "X-Amz-Security-Token", valid_604942
  var valid_604943 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604943 = validateParameter(valid_604943, JString, required = false,
                                 default = nil)
  if valid_604943 != nil:
    section.add "X-Amz-Content-Sha256", valid_604943
  var valid_604944 = header.getOrDefault("X-Amz-Algorithm")
  valid_604944 = validateParameter(valid_604944, JString, required = false,
                                 default = nil)
  if valid_604944 != nil:
    section.add "X-Amz-Algorithm", valid_604944
  var valid_604945 = header.getOrDefault("X-Amz-Signature")
  valid_604945 = validateParameter(valid_604945, JString, required = false,
                                 default = nil)
  if valid_604945 != nil:
    section.add "X-Amz-Signature", valid_604945
  var valid_604946 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604946 = validateParameter(valid_604946, JString, required = false,
                                 default = nil)
  if valid_604946 != nil:
    section.add "X-Amz-SignedHeaders", valid_604946
  var valid_604947 = header.getOrDefault("X-Amz-Credential")
  valid_604947 = validateParameter(valid_604947, JString, required = false,
                                 default = nil)
  if valid_604947 != nil:
    section.add "X-Amz-Credential", valid_604947
  result.add "header", section
  ## parameters in `formData` object:
  ##   ShouldRespectGracePeriod: JBool
  ##                           : <p>If the Auto Scaling group of the specified instance has a <code>HealthCheckGracePeriod</code> specified for the group, by default, this call respects the grace period. Set this to <code>False</code>, to have the call not respect the grace period associated with the group.</p> <p>For more information about the health check grace period, see <a>CreateAutoScalingGroup</a>.</p>
  ##   HealthStatus: JString (required)
  ##               : The health status of the instance. Set to <code>Healthy</code> to have the instance remain in service. Set to <code>Unhealthy</code> to have the instance be out of service. Amazon EC2 Auto Scaling terminates and replaces the unhealthy instance.
  ##   InstanceId: JString (required)
  ##             : The ID of the instance.
  section = newJObject()
  var valid_604948 = formData.getOrDefault("ShouldRespectGracePeriod")
  valid_604948 = validateParameter(valid_604948, JBool, required = false, default = nil)
  if valid_604948 != nil:
    section.add "ShouldRespectGracePeriod", valid_604948
  assert formData != nil,
        "formData argument is necessary due to required `HealthStatus` field"
  var valid_604949 = formData.getOrDefault("HealthStatus")
  valid_604949 = validateParameter(valid_604949, JString, required = true,
                                 default = nil)
  if valid_604949 != nil:
    section.add "HealthStatus", valid_604949
  var valid_604950 = formData.getOrDefault("InstanceId")
  valid_604950 = validateParameter(valid_604950, JString, required = true,
                                 default = nil)
  if valid_604950 != nil:
    section.add "InstanceId", valid_604950
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604951: Call_PostSetInstanceHealth_604936; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the health status of the specified instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_604951.validator(path, query, header, formData, body)
  let scheme = call_604951.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604951.url(scheme.get, call_604951.host, call_604951.base,
                         call_604951.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604951, url, valid)

proc call*(call_604952: Call_PostSetInstanceHealth_604936; HealthStatus: string;
          InstanceId: string; ShouldRespectGracePeriod: bool = false;
          Action: string = "SetInstanceHealth"; Version: string = "2011-01-01"): Recallable =
  ## postSetInstanceHealth
  ## <p>Sets the health status of the specified instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   ShouldRespectGracePeriod: bool
  ##                           : <p>If the Auto Scaling group of the specified instance has a <code>HealthCheckGracePeriod</code> specified for the group, by default, this call respects the grace period. Set this to <code>False</code>, to have the call not respect the grace period associated with the group.</p> <p>For more information about the health check grace period, see <a>CreateAutoScalingGroup</a>.</p>
  ##   Action: string (required)
  ##   HealthStatus: string (required)
  ##               : The health status of the instance. Set to <code>Healthy</code> to have the instance remain in service. Set to <code>Unhealthy</code> to have the instance be out of service. Amazon EC2 Auto Scaling terminates and replaces the unhealthy instance.
  ##   InstanceId: string (required)
  ##             : The ID of the instance.
  ##   Version: string (required)
  var query_604953 = newJObject()
  var formData_604954 = newJObject()
  add(formData_604954, "ShouldRespectGracePeriod",
      newJBool(ShouldRespectGracePeriod))
  add(query_604953, "Action", newJString(Action))
  add(formData_604954, "HealthStatus", newJString(HealthStatus))
  add(formData_604954, "InstanceId", newJString(InstanceId))
  add(query_604953, "Version", newJString(Version))
  result = call_604952.call(nil, query_604953, nil, formData_604954, nil)

var postSetInstanceHealth* = Call_PostSetInstanceHealth_604936(
    name: "postSetInstanceHealth", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=SetInstanceHealth",
    validator: validate_PostSetInstanceHealth_604937, base: "/",
    url: url_PostSetInstanceHealth_604938, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetInstanceHealth_604918 = ref object of OpenApiRestCall_602466
proc url_GetSetInstanceHealth_604920(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetSetInstanceHealth_604919(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the health status of the specified instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   HealthStatus: JString (required)
  ##               : The health status of the instance. Set to <code>Healthy</code> to have the instance remain in service. Set to <code>Unhealthy</code> to have the instance be out of service. Amazon EC2 Auto Scaling terminates and replaces the unhealthy instance.
  ##   ShouldRespectGracePeriod: JBool
  ##                           : <p>If the Auto Scaling group of the specified instance has a <code>HealthCheckGracePeriod</code> specified for the group, by default, this call respects the grace period. Set this to <code>False</code>, to have the call not respect the grace period associated with the group.</p> <p>For more information about the health check grace period, see <a>CreateAutoScalingGroup</a>.</p>
  ##   Action: JString (required)
  ##   InstanceId: JString (required)
  ##             : The ID of the instance.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `HealthStatus` field"
  var valid_604921 = query.getOrDefault("HealthStatus")
  valid_604921 = validateParameter(valid_604921, JString, required = true,
                                 default = nil)
  if valid_604921 != nil:
    section.add "HealthStatus", valid_604921
  var valid_604922 = query.getOrDefault("ShouldRespectGracePeriod")
  valid_604922 = validateParameter(valid_604922, JBool, required = false, default = nil)
  if valid_604922 != nil:
    section.add "ShouldRespectGracePeriod", valid_604922
  var valid_604923 = query.getOrDefault("Action")
  valid_604923 = validateParameter(valid_604923, JString, required = true,
                                 default = newJString("SetInstanceHealth"))
  if valid_604923 != nil:
    section.add "Action", valid_604923
  var valid_604924 = query.getOrDefault("InstanceId")
  valid_604924 = validateParameter(valid_604924, JString, required = true,
                                 default = nil)
  if valid_604924 != nil:
    section.add "InstanceId", valid_604924
  var valid_604925 = query.getOrDefault("Version")
  valid_604925 = validateParameter(valid_604925, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604925 != nil:
    section.add "Version", valid_604925
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604926 = header.getOrDefault("X-Amz-Date")
  valid_604926 = validateParameter(valid_604926, JString, required = false,
                                 default = nil)
  if valid_604926 != nil:
    section.add "X-Amz-Date", valid_604926
  var valid_604927 = header.getOrDefault("X-Amz-Security-Token")
  valid_604927 = validateParameter(valid_604927, JString, required = false,
                                 default = nil)
  if valid_604927 != nil:
    section.add "X-Amz-Security-Token", valid_604927
  var valid_604928 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604928 = validateParameter(valid_604928, JString, required = false,
                                 default = nil)
  if valid_604928 != nil:
    section.add "X-Amz-Content-Sha256", valid_604928
  var valid_604929 = header.getOrDefault("X-Amz-Algorithm")
  valid_604929 = validateParameter(valid_604929, JString, required = false,
                                 default = nil)
  if valid_604929 != nil:
    section.add "X-Amz-Algorithm", valid_604929
  var valid_604930 = header.getOrDefault("X-Amz-Signature")
  valid_604930 = validateParameter(valid_604930, JString, required = false,
                                 default = nil)
  if valid_604930 != nil:
    section.add "X-Amz-Signature", valid_604930
  var valid_604931 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604931 = validateParameter(valid_604931, JString, required = false,
                                 default = nil)
  if valid_604931 != nil:
    section.add "X-Amz-SignedHeaders", valid_604931
  var valid_604932 = header.getOrDefault("X-Amz-Credential")
  valid_604932 = validateParameter(valid_604932, JString, required = false,
                                 default = nil)
  if valid_604932 != nil:
    section.add "X-Amz-Credential", valid_604932
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604933: Call_GetSetInstanceHealth_604918; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the health status of the specified instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_604933.validator(path, query, header, formData, body)
  let scheme = call_604933.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604933.url(scheme.get, call_604933.host, call_604933.base,
                         call_604933.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604933, url, valid)

proc call*(call_604934: Call_GetSetInstanceHealth_604918; HealthStatus: string;
          InstanceId: string; ShouldRespectGracePeriod: bool = false;
          Action: string = "SetInstanceHealth"; Version: string = "2011-01-01"): Recallable =
  ## getSetInstanceHealth
  ## <p>Sets the health status of the specified instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   HealthStatus: string (required)
  ##               : The health status of the instance. Set to <code>Healthy</code> to have the instance remain in service. Set to <code>Unhealthy</code> to have the instance be out of service. Amazon EC2 Auto Scaling terminates and replaces the unhealthy instance.
  ##   ShouldRespectGracePeriod: bool
  ##                           : <p>If the Auto Scaling group of the specified instance has a <code>HealthCheckGracePeriod</code> specified for the group, by default, this call respects the grace period. Set this to <code>False</code>, to have the call not respect the grace period associated with the group.</p> <p>For more information about the health check grace period, see <a>CreateAutoScalingGroup</a>.</p>
  ##   Action: string (required)
  ##   InstanceId: string (required)
  ##             : The ID of the instance.
  ##   Version: string (required)
  var query_604935 = newJObject()
  add(query_604935, "HealthStatus", newJString(HealthStatus))
  add(query_604935, "ShouldRespectGracePeriod", newJBool(ShouldRespectGracePeriod))
  add(query_604935, "Action", newJString(Action))
  add(query_604935, "InstanceId", newJString(InstanceId))
  add(query_604935, "Version", newJString(Version))
  result = call_604934.call(nil, query_604935, nil, nil, nil)

var getSetInstanceHealth* = Call_GetSetInstanceHealth_604918(
    name: "getSetInstanceHealth", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=SetInstanceHealth",
    validator: validate_GetSetInstanceHealth_604919, base: "/",
    url: url_GetSetInstanceHealth_604920, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetInstanceProtection_604973 = ref object of OpenApiRestCall_602466
proc url_PostSetInstanceProtection_604975(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostSetInstanceProtection_604974(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the instance protection settings of the specified instances.</p> <p>For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604976 = query.getOrDefault("Action")
  valid_604976 = validateParameter(valid_604976, JString, required = true,
                                 default = newJString("SetInstanceProtection"))
  if valid_604976 != nil:
    section.add "Action", valid_604976
  var valid_604977 = query.getOrDefault("Version")
  valid_604977 = validateParameter(valid_604977, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604977 != nil:
    section.add "Version", valid_604977
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604978 = header.getOrDefault("X-Amz-Date")
  valid_604978 = validateParameter(valid_604978, JString, required = false,
                                 default = nil)
  if valid_604978 != nil:
    section.add "X-Amz-Date", valid_604978
  var valid_604979 = header.getOrDefault("X-Amz-Security-Token")
  valid_604979 = validateParameter(valid_604979, JString, required = false,
                                 default = nil)
  if valid_604979 != nil:
    section.add "X-Amz-Security-Token", valid_604979
  var valid_604980 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604980 = validateParameter(valid_604980, JString, required = false,
                                 default = nil)
  if valid_604980 != nil:
    section.add "X-Amz-Content-Sha256", valid_604980
  var valid_604981 = header.getOrDefault("X-Amz-Algorithm")
  valid_604981 = validateParameter(valid_604981, JString, required = false,
                                 default = nil)
  if valid_604981 != nil:
    section.add "X-Amz-Algorithm", valid_604981
  var valid_604982 = header.getOrDefault("X-Amz-Signature")
  valid_604982 = validateParameter(valid_604982, JString, required = false,
                                 default = nil)
  if valid_604982 != nil:
    section.add "X-Amz-Signature", valid_604982
  var valid_604983 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604983 = validateParameter(valid_604983, JString, required = false,
                                 default = nil)
  if valid_604983 != nil:
    section.add "X-Amz-SignedHeaders", valid_604983
  var valid_604984 = header.getOrDefault("X-Amz-Credential")
  valid_604984 = validateParameter(valid_604984, JString, required = false,
                                 default = nil)
  if valid_604984 != nil:
    section.add "X-Amz-Credential", valid_604984
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray (required)
  ##              : One or more instance IDs.
  ##   ProtectedFromScaleIn: JBool (required)
  ##                       : Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling in.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_604985 = formData.getOrDefault("AutoScalingGroupName")
  valid_604985 = validateParameter(valid_604985, JString, required = true,
                                 default = nil)
  if valid_604985 != nil:
    section.add "AutoScalingGroupName", valid_604985
  var valid_604986 = formData.getOrDefault("InstanceIds")
  valid_604986 = validateParameter(valid_604986, JArray, required = true, default = nil)
  if valid_604986 != nil:
    section.add "InstanceIds", valid_604986
  var valid_604987 = formData.getOrDefault("ProtectedFromScaleIn")
  valid_604987 = validateParameter(valid_604987, JBool, required = true, default = nil)
  if valid_604987 != nil:
    section.add "ProtectedFromScaleIn", valid_604987
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604988: Call_PostSetInstanceProtection_604973; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the instance protection settings of the specified instances.</p> <p>For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_604988.validator(path, query, header, formData, body)
  let scheme = call_604988.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604988.url(scheme.get, call_604988.host, call_604988.base,
                         call_604988.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604988, url, valid)

proc call*(call_604989: Call_PostSetInstanceProtection_604973;
          AutoScalingGroupName: string; InstanceIds: JsonNode;
          ProtectedFromScaleIn: bool; Action: string = "SetInstanceProtection";
          Version: string = "2011-01-01"): Recallable =
  ## postSetInstanceProtection
  ## <p>Updates the instance protection settings of the specified instances.</p> <p>For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray (required)
  ##              : One or more instance IDs.
  ##   Action: string (required)
  ##   ProtectedFromScaleIn: bool (required)
  ##                       : Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling in.
  ##   Version: string (required)
  var query_604990 = newJObject()
  var formData_604991 = newJObject()
  add(formData_604991, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if InstanceIds != nil:
    formData_604991.add "InstanceIds", InstanceIds
  add(query_604990, "Action", newJString(Action))
  add(formData_604991, "ProtectedFromScaleIn", newJBool(ProtectedFromScaleIn))
  add(query_604990, "Version", newJString(Version))
  result = call_604989.call(nil, query_604990, nil, formData_604991, nil)

var postSetInstanceProtection* = Call_PostSetInstanceProtection_604973(
    name: "postSetInstanceProtection", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=SetInstanceProtection",
    validator: validate_PostSetInstanceProtection_604974, base: "/",
    url: url_PostSetInstanceProtection_604975,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetInstanceProtection_604955 = ref object of OpenApiRestCall_602466
proc url_GetSetInstanceProtection_604957(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetSetInstanceProtection_604956(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the instance protection settings of the specified instances.</p> <p>For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   InstanceIds: JArray (required)
  ##              : One or more instance IDs.
  ##   ProtectedFromScaleIn: JBool (required)
  ##                       : Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling in.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_604958 = query.getOrDefault("AutoScalingGroupName")
  valid_604958 = validateParameter(valid_604958, JString, required = true,
                                 default = nil)
  if valid_604958 != nil:
    section.add "AutoScalingGroupName", valid_604958
  var valid_604959 = query.getOrDefault("Action")
  valid_604959 = validateParameter(valid_604959, JString, required = true,
                                 default = newJString("SetInstanceProtection"))
  if valid_604959 != nil:
    section.add "Action", valid_604959
  var valid_604960 = query.getOrDefault("InstanceIds")
  valid_604960 = validateParameter(valid_604960, JArray, required = true, default = nil)
  if valid_604960 != nil:
    section.add "InstanceIds", valid_604960
  var valid_604961 = query.getOrDefault("ProtectedFromScaleIn")
  valid_604961 = validateParameter(valid_604961, JBool, required = true, default = nil)
  if valid_604961 != nil:
    section.add "ProtectedFromScaleIn", valid_604961
  var valid_604962 = query.getOrDefault("Version")
  valid_604962 = validateParameter(valid_604962, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604962 != nil:
    section.add "Version", valid_604962
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604963 = header.getOrDefault("X-Amz-Date")
  valid_604963 = validateParameter(valid_604963, JString, required = false,
                                 default = nil)
  if valid_604963 != nil:
    section.add "X-Amz-Date", valid_604963
  var valid_604964 = header.getOrDefault("X-Amz-Security-Token")
  valid_604964 = validateParameter(valid_604964, JString, required = false,
                                 default = nil)
  if valid_604964 != nil:
    section.add "X-Amz-Security-Token", valid_604964
  var valid_604965 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604965 = validateParameter(valid_604965, JString, required = false,
                                 default = nil)
  if valid_604965 != nil:
    section.add "X-Amz-Content-Sha256", valid_604965
  var valid_604966 = header.getOrDefault("X-Amz-Algorithm")
  valid_604966 = validateParameter(valid_604966, JString, required = false,
                                 default = nil)
  if valid_604966 != nil:
    section.add "X-Amz-Algorithm", valid_604966
  var valid_604967 = header.getOrDefault("X-Amz-Signature")
  valid_604967 = validateParameter(valid_604967, JString, required = false,
                                 default = nil)
  if valid_604967 != nil:
    section.add "X-Amz-Signature", valid_604967
  var valid_604968 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604968 = validateParameter(valid_604968, JString, required = false,
                                 default = nil)
  if valid_604968 != nil:
    section.add "X-Amz-SignedHeaders", valid_604968
  var valid_604969 = header.getOrDefault("X-Amz-Credential")
  valid_604969 = validateParameter(valid_604969, JString, required = false,
                                 default = nil)
  if valid_604969 != nil:
    section.add "X-Amz-Credential", valid_604969
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604970: Call_GetSetInstanceProtection_604955; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the instance protection settings of the specified instances.</p> <p>For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_604970.validator(path, query, header, formData, body)
  let scheme = call_604970.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604970.url(scheme.get, call_604970.host, call_604970.base,
                         call_604970.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604970, url, valid)

proc call*(call_604971: Call_GetSetInstanceProtection_604955;
          AutoScalingGroupName: string; InstanceIds: JsonNode;
          ProtectedFromScaleIn: bool; Action: string = "SetInstanceProtection";
          Version: string = "2011-01-01"): Recallable =
  ## getSetInstanceProtection
  ## <p>Updates the instance protection settings of the specified instances.</p> <p>For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   InstanceIds: JArray (required)
  ##              : One or more instance IDs.
  ##   ProtectedFromScaleIn: bool (required)
  ##                       : Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling in.
  ##   Version: string (required)
  var query_604972 = newJObject()
  add(query_604972, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_604972, "Action", newJString(Action))
  if InstanceIds != nil:
    query_604972.add "InstanceIds", InstanceIds
  add(query_604972, "ProtectedFromScaleIn", newJBool(ProtectedFromScaleIn))
  add(query_604972, "Version", newJString(Version))
  result = call_604971.call(nil, query_604972, nil, nil, nil)

var getSetInstanceProtection* = Call_GetSetInstanceProtection_604955(
    name: "getSetInstanceProtection", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=SetInstanceProtection",
    validator: validate_GetSetInstanceProtection_604956, base: "/",
    url: url_GetSetInstanceProtection_604957, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSuspendProcesses_605009 = ref object of OpenApiRestCall_602466
proc url_PostSuspendProcesses_605011(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostSuspendProcesses_605010(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Suspends the specified automatic scaling processes, or all processes, for the specified Auto Scaling group.</p> <p>If you suspend either the <code>Launch</code> or <code>Terminate</code> process types, it can prevent other process types from functioning properly.</p> <p>To resume processes that have been suspended, use <a>ResumeProcesses</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605012 = query.getOrDefault("Action")
  valid_605012 = validateParameter(valid_605012, JString, required = true,
                                 default = newJString("SuspendProcesses"))
  if valid_605012 != nil:
    section.add "Action", valid_605012
  var valid_605013 = query.getOrDefault("Version")
  valid_605013 = validateParameter(valid_605013, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_605013 != nil:
    section.add "Version", valid_605013
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605014 = header.getOrDefault("X-Amz-Date")
  valid_605014 = validateParameter(valid_605014, JString, required = false,
                                 default = nil)
  if valid_605014 != nil:
    section.add "X-Amz-Date", valid_605014
  var valid_605015 = header.getOrDefault("X-Amz-Security-Token")
  valid_605015 = validateParameter(valid_605015, JString, required = false,
                                 default = nil)
  if valid_605015 != nil:
    section.add "X-Amz-Security-Token", valid_605015
  var valid_605016 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605016 = validateParameter(valid_605016, JString, required = false,
                                 default = nil)
  if valid_605016 != nil:
    section.add "X-Amz-Content-Sha256", valid_605016
  var valid_605017 = header.getOrDefault("X-Amz-Algorithm")
  valid_605017 = validateParameter(valid_605017, JString, required = false,
                                 default = nil)
  if valid_605017 != nil:
    section.add "X-Amz-Algorithm", valid_605017
  var valid_605018 = header.getOrDefault("X-Amz-Signature")
  valid_605018 = validateParameter(valid_605018, JString, required = false,
                                 default = nil)
  if valid_605018 != nil:
    section.add "X-Amz-Signature", valid_605018
  var valid_605019 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605019 = validateParameter(valid_605019, JString, required = false,
                                 default = nil)
  if valid_605019 != nil:
    section.add "X-Amz-SignedHeaders", valid_605019
  var valid_605020 = header.getOrDefault("X-Amz-Credential")
  valid_605020 = validateParameter(valid_605020, JString, required = false,
                                 default = nil)
  if valid_605020 != nil:
    section.add "X-Amz-Credential", valid_605020
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_605021 = formData.getOrDefault("AutoScalingGroupName")
  valid_605021 = validateParameter(valid_605021, JString, required = true,
                                 default = nil)
  if valid_605021 != nil:
    section.add "AutoScalingGroupName", valid_605021
  var valid_605022 = formData.getOrDefault("ScalingProcesses")
  valid_605022 = validateParameter(valid_605022, JArray, required = false,
                                 default = nil)
  if valid_605022 != nil:
    section.add "ScalingProcesses", valid_605022
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605023: Call_PostSuspendProcesses_605009; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Suspends the specified automatic scaling processes, or all processes, for the specified Auto Scaling group.</p> <p>If you suspend either the <code>Launch</code> or <code>Terminate</code> process types, it can prevent other process types from functioning properly.</p> <p>To resume processes that have been suspended, use <a>ResumeProcesses</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_605023.validator(path, query, header, formData, body)
  let scheme = call_605023.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605023.url(scheme.get, call_605023.host, call_605023.base,
                         call_605023.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605023, url, valid)

proc call*(call_605024: Call_PostSuspendProcesses_605009;
          AutoScalingGroupName: string; ScalingProcesses: JsonNode = nil;
          Action: string = "SuspendProcesses"; Version: string = "2011-01-01"): Recallable =
  ## postSuspendProcesses
  ## <p>Suspends the specified automatic scaling processes, or all processes, for the specified Auto Scaling group.</p> <p>If you suspend either the <code>Launch</code> or <code>Terminate</code> process types, it can prevent other process types from functioning properly.</p> <p>To resume processes that have been suspended, use <a>ResumeProcesses</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605025 = newJObject()
  var formData_605026 = newJObject()
  add(formData_605026, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if ScalingProcesses != nil:
    formData_605026.add "ScalingProcesses", ScalingProcesses
  add(query_605025, "Action", newJString(Action))
  add(query_605025, "Version", newJString(Version))
  result = call_605024.call(nil, query_605025, nil, formData_605026, nil)

var postSuspendProcesses* = Call_PostSuspendProcesses_605009(
    name: "postSuspendProcesses", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=SuspendProcesses",
    validator: validate_PostSuspendProcesses_605010, base: "/",
    url: url_PostSuspendProcesses_605011, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSuspendProcesses_604992 = ref object of OpenApiRestCall_602466
proc url_GetSuspendProcesses_604994(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetSuspendProcesses_604993(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Suspends the specified automatic scaling processes, or all processes, for the specified Auto Scaling group.</p> <p>If you suspend either the <code>Launch</code> or <code>Terminate</code> process types, it can prevent other process types from functioning properly.</p> <p>To resume processes that have been suspended, use <a>ResumeProcesses</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_604995 = query.getOrDefault("ScalingProcesses")
  valid_604995 = validateParameter(valid_604995, JArray, required = false,
                                 default = nil)
  if valid_604995 != nil:
    section.add "ScalingProcesses", valid_604995
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_604996 = query.getOrDefault("AutoScalingGroupName")
  valid_604996 = validateParameter(valid_604996, JString, required = true,
                                 default = nil)
  if valid_604996 != nil:
    section.add "AutoScalingGroupName", valid_604996
  var valid_604997 = query.getOrDefault("Action")
  valid_604997 = validateParameter(valid_604997, JString, required = true,
                                 default = newJString("SuspendProcesses"))
  if valid_604997 != nil:
    section.add "Action", valid_604997
  var valid_604998 = query.getOrDefault("Version")
  valid_604998 = validateParameter(valid_604998, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604998 != nil:
    section.add "Version", valid_604998
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604999 = header.getOrDefault("X-Amz-Date")
  valid_604999 = validateParameter(valid_604999, JString, required = false,
                                 default = nil)
  if valid_604999 != nil:
    section.add "X-Amz-Date", valid_604999
  var valid_605000 = header.getOrDefault("X-Amz-Security-Token")
  valid_605000 = validateParameter(valid_605000, JString, required = false,
                                 default = nil)
  if valid_605000 != nil:
    section.add "X-Amz-Security-Token", valid_605000
  var valid_605001 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605001 = validateParameter(valid_605001, JString, required = false,
                                 default = nil)
  if valid_605001 != nil:
    section.add "X-Amz-Content-Sha256", valid_605001
  var valid_605002 = header.getOrDefault("X-Amz-Algorithm")
  valid_605002 = validateParameter(valid_605002, JString, required = false,
                                 default = nil)
  if valid_605002 != nil:
    section.add "X-Amz-Algorithm", valid_605002
  var valid_605003 = header.getOrDefault("X-Amz-Signature")
  valid_605003 = validateParameter(valid_605003, JString, required = false,
                                 default = nil)
  if valid_605003 != nil:
    section.add "X-Amz-Signature", valid_605003
  var valid_605004 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605004 = validateParameter(valid_605004, JString, required = false,
                                 default = nil)
  if valid_605004 != nil:
    section.add "X-Amz-SignedHeaders", valid_605004
  var valid_605005 = header.getOrDefault("X-Amz-Credential")
  valid_605005 = validateParameter(valid_605005, JString, required = false,
                                 default = nil)
  if valid_605005 != nil:
    section.add "X-Amz-Credential", valid_605005
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605006: Call_GetSuspendProcesses_604992; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Suspends the specified automatic scaling processes, or all processes, for the specified Auto Scaling group.</p> <p>If you suspend either the <code>Launch</code> or <code>Terminate</code> process types, it can prevent other process types from functioning properly.</p> <p>To resume processes that have been suspended, use <a>ResumeProcesses</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_605006.validator(path, query, header, formData, body)
  let scheme = call_605006.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605006.url(scheme.get, call_605006.host, call_605006.base,
                         call_605006.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605006, url, valid)

proc call*(call_605007: Call_GetSuspendProcesses_604992;
          AutoScalingGroupName: string; ScalingProcesses: JsonNode = nil;
          Action: string = "SuspendProcesses"; Version: string = "2011-01-01"): Recallable =
  ## getSuspendProcesses
  ## <p>Suspends the specified automatic scaling processes, or all processes, for the specified Auto Scaling group.</p> <p>If you suspend either the <code>Launch</code> or <code>Terminate</code> process types, it can prevent other process types from functioning properly.</p> <p>To resume processes that have been suspended, use <a>ResumeProcesses</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605008 = newJObject()
  if ScalingProcesses != nil:
    query_605008.add "ScalingProcesses", ScalingProcesses
  add(query_605008, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_605008, "Action", newJString(Action))
  add(query_605008, "Version", newJString(Version))
  result = call_605007.call(nil, query_605008, nil, nil, nil)

var getSuspendProcesses* = Call_GetSuspendProcesses_604992(
    name: "getSuspendProcesses", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=SuspendProcesses",
    validator: validate_GetSuspendProcesses_604993, base: "/",
    url: url_GetSuspendProcesses_604994, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostTerminateInstanceInAutoScalingGroup_605044 = ref object of OpenApiRestCall_602466
proc url_PostTerminateInstanceInAutoScalingGroup_605046(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostTerminateInstanceInAutoScalingGroup_605045(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Terminates the specified instance and optionally adjusts the desired group size.</p> <p>This call simply makes a termination request. The instance is not terminated immediately.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605047 = query.getOrDefault("Action")
  valid_605047 = validateParameter(valid_605047, JString, required = true, default = newJString(
      "TerminateInstanceInAutoScalingGroup"))
  if valid_605047 != nil:
    section.add "Action", valid_605047
  var valid_605048 = query.getOrDefault("Version")
  valid_605048 = validateParameter(valid_605048, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_605048 != nil:
    section.add "Version", valid_605048
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605049 = header.getOrDefault("X-Amz-Date")
  valid_605049 = validateParameter(valid_605049, JString, required = false,
                                 default = nil)
  if valid_605049 != nil:
    section.add "X-Amz-Date", valid_605049
  var valid_605050 = header.getOrDefault("X-Amz-Security-Token")
  valid_605050 = validateParameter(valid_605050, JString, required = false,
                                 default = nil)
  if valid_605050 != nil:
    section.add "X-Amz-Security-Token", valid_605050
  var valid_605051 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605051 = validateParameter(valid_605051, JString, required = false,
                                 default = nil)
  if valid_605051 != nil:
    section.add "X-Amz-Content-Sha256", valid_605051
  var valid_605052 = header.getOrDefault("X-Amz-Algorithm")
  valid_605052 = validateParameter(valid_605052, JString, required = false,
                                 default = nil)
  if valid_605052 != nil:
    section.add "X-Amz-Algorithm", valid_605052
  var valid_605053 = header.getOrDefault("X-Amz-Signature")
  valid_605053 = validateParameter(valid_605053, JString, required = false,
                                 default = nil)
  if valid_605053 != nil:
    section.add "X-Amz-Signature", valid_605053
  var valid_605054 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605054 = validateParameter(valid_605054, JString, required = false,
                                 default = nil)
  if valid_605054 != nil:
    section.add "X-Amz-SignedHeaders", valid_605054
  var valid_605055 = header.getOrDefault("X-Amz-Credential")
  valid_605055 = validateParameter(valid_605055, JString, required = false,
                                 default = nil)
  if valid_605055 != nil:
    section.add "X-Amz-Credential", valid_605055
  result.add "header", section
  ## parameters in `formData` object:
  ##   ShouldDecrementDesiredCapacity: JBool (required)
  ##                                 : Indicates whether terminating the instance also decrements the size of the Auto Scaling group.
  ##   InstanceId: JString (required)
  ##             : The ID of the instance.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ShouldDecrementDesiredCapacity` field"
  var valid_605056 = formData.getOrDefault("ShouldDecrementDesiredCapacity")
  valid_605056 = validateParameter(valid_605056, JBool, required = true, default = nil)
  if valid_605056 != nil:
    section.add "ShouldDecrementDesiredCapacity", valid_605056
  var valid_605057 = formData.getOrDefault("InstanceId")
  valid_605057 = validateParameter(valid_605057, JString, required = true,
                                 default = nil)
  if valid_605057 != nil:
    section.add "InstanceId", valid_605057
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605058: Call_PostTerminateInstanceInAutoScalingGroup_605044;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Terminates the specified instance and optionally adjusts the desired group size.</p> <p>This call simply makes a termination request. The instance is not terminated immediately.</p>
  ## 
  let valid = call_605058.validator(path, query, header, formData, body)
  let scheme = call_605058.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605058.url(scheme.get, call_605058.host, call_605058.base,
                         call_605058.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605058, url, valid)

proc call*(call_605059: Call_PostTerminateInstanceInAutoScalingGroup_605044;
          ShouldDecrementDesiredCapacity: bool; InstanceId: string;
          Action: string = "TerminateInstanceInAutoScalingGroup";
          Version: string = "2011-01-01"): Recallable =
  ## postTerminateInstanceInAutoScalingGroup
  ## <p>Terminates the specified instance and optionally adjusts the desired group size.</p> <p>This call simply makes a termination request. The instance is not terminated immediately.</p>
  ##   ShouldDecrementDesiredCapacity: bool (required)
  ##                                 : Indicates whether terminating the instance also decrements the size of the Auto Scaling group.
  ##   Action: string (required)
  ##   InstanceId: string (required)
  ##             : The ID of the instance.
  ##   Version: string (required)
  var query_605060 = newJObject()
  var formData_605061 = newJObject()
  add(formData_605061, "ShouldDecrementDesiredCapacity",
      newJBool(ShouldDecrementDesiredCapacity))
  add(query_605060, "Action", newJString(Action))
  add(formData_605061, "InstanceId", newJString(InstanceId))
  add(query_605060, "Version", newJString(Version))
  result = call_605059.call(nil, query_605060, nil, formData_605061, nil)

var postTerminateInstanceInAutoScalingGroup* = Call_PostTerminateInstanceInAutoScalingGroup_605044(
    name: "postTerminateInstanceInAutoScalingGroup", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=TerminateInstanceInAutoScalingGroup",
    validator: validate_PostTerminateInstanceInAutoScalingGroup_605045, base: "/",
    url: url_PostTerminateInstanceInAutoScalingGroup_605046,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetTerminateInstanceInAutoScalingGroup_605027 = ref object of OpenApiRestCall_602466
proc url_GetTerminateInstanceInAutoScalingGroup_605029(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetTerminateInstanceInAutoScalingGroup_605028(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Terminates the specified instance and optionally adjusts the desired group size.</p> <p>This call simply makes a termination request. The instance is not terminated immediately.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   ShouldDecrementDesiredCapacity: JBool (required)
  ##                                 : Indicates whether terminating the instance also decrements the size of the Auto Scaling group.
  ##   InstanceId: JString (required)
  ##             : The ID of the instance.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605030 = query.getOrDefault("Action")
  valid_605030 = validateParameter(valid_605030, JString, required = true, default = newJString(
      "TerminateInstanceInAutoScalingGroup"))
  if valid_605030 != nil:
    section.add "Action", valid_605030
  var valid_605031 = query.getOrDefault("ShouldDecrementDesiredCapacity")
  valid_605031 = validateParameter(valid_605031, JBool, required = true, default = nil)
  if valid_605031 != nil:
    section.add "ShouldDecrementDesiredCapacity", valid_605031
  var valid_605032 = query.getOrDefault("InstanceId")
  valid_605032 = validateParameter(valid_605032, JString, required = true,
                                 default = nil)
  if valid_605032 != nil:
    section.add "InstanceId", valid_605032
  var valid_605033 = query.getOrDefault("Version")
  valid_605033 = validateParameter(valid_605033, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_605033 != nil:
    section.add "Version", valid_605033
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605034 = header.getOrDefault("X-Amz-Date")
  valid_605034 = validateParameter(valid_605034, JString, required = false,
                                 default = nil)
  if valid_605034 != nil:
    section.add "X-Amz-Date", valid_605034
  var valid_605035 = header.getOrDefault("X-Amz-Security-Token")
  valid_605035 = validateParameter(valid_605035, JString, required = false,
                                 default = nil)
  if valid_605035 != nil:
    section.add "X-Amz-Security-Token", valid_605035
  var valid_605036 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605036 = validateParameter(valid_605036, JString, required = false,
                                 default = nil)
  if valid_605036 != nil:
    section.add "X-Amz-Content-Sha256", valid_605036
  var valid_605037 = header.getOrDefault("X-Amz-Algorithm")
  valid_605037 = validateParameter(valid_605037, JString, required = false,
                                 default = nil)
  if valid_605037 != nil:
    section.add "X-Amz-Algorithm", valid_605037
  var valid_605038 = header.getOrDefault("X-Amz-Signature")
  valid_605038 = validateParameter(valid_605038, JString, required = false,
                                 default = nil)
  if valid_605038 != nil:
    section.add "X-Amz-Signature", valid_605038
  var valid_605039 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605039 = validateParameter(valid_605039, JString, required = false,
                                 default = nil)
  if valid_605039 != nil:
    section.add "X-Amz-SignedHeaders", valid_605039
  var valid_605040 = header.getOrDefault("X-Amz-Credential")
  valid_605040 = validateParameter(valid_605040, JString, required = false,
                                 default = nil)
  if valid_605040 != nil:
    section.add "X-Amz-Credential", valid_605040
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605041: Call_GetTerminateInstanceInAutoScalingGroup_605027;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Terminates the specified instance and optionally adjusts the desired group size.</p> <p>This call simply makes a termination request. The instance is not terminated immediately.</p>
  ## 
  let valid = call_605041.validator(path, query, header, formData, body)
  let scheme = call_605041.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605041.url(scheme.get, call_605041.host, call_605041.base,
                         call_605041.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605041, url, valid)

proc call*(call_605042: Call_GetTerminateInstanceInAutoScalingGroup_605027;
          ShouldDecrementDesiredCapacity: bool; InstanceId: string;
          Action: string = "TerminateInstanceInAutoScalingGroup";
          Version: string = "2011-01-01"): Recallable =
  ## getTerminateInstanceInAutoScalingGroup
  ## <p>Terminates the specified instance and optionally adjusts the desired group size.</p> <p>This call simply makes a termination request. The instance is not terminated immediately.</p>
  ##   Action: string (required)
  ##   ShouldDecrementDesiredCapacity: bool (required)
  ##                                 : Indicates whether terminating the instance also decrements the size of the Auto Scaling group.
  ##   InstanceId: string (required)
  ##             : The ID of the instance.
  ##   Version: string (required)
  var query_605043 = newJObject()
  add(query_605043, "Action", newJString(Action))
  add(query_605043, "ShouldDecrementDesiredCapacity",
      newJBool(ShouldDecrementDesiredCapacity))
  add(query_605043, "InstanceId", newJString(InstanceId))
  add(query_605043, "Version", newJString(Version))
  result = call_605042.call(nil, query_605043, nil, nil, nil)

var getTerminateInstanceInAutoScalingGroup* = Call_GetTerminateInstanceInAutoScalingGroup_605027(
    name: "getTerminateInstanceInAutoScalingGroup", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=TerminateInstanceInAutoScalingGroup",
    validator: validate_GetTerminateInstanceInAutoScalingGroup_605028, base: "/",
    url: url_GetTerminateInstanceInAutoScalingGroup_605029,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateAutoScalingGroup_605096 = ref object of OpenApiRestCall_602466
proc url_PostUpdateAutoScalingGroup_605098(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostUpdateAutoScalingGroup_605097(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the configuration for the specified Auto Scaling group.</p> <p>To update an Auto Scaling group, specify the name of the group and the parameter that you want to change. Any parameters that you don't specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. Scaling activities that are currently in progress aren't affected.</p> <p>If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.</p> <p>Note the following about changing <code>DesiredCapacity</code>, <code>MaxSize</code>, or <code>MinSize</code>:</p> <ul> <li> <p>If a scale-in event occurs as a result of a new <code>DesiredCapacity</code> value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.</p> </li> <li> <p>If you specify a new value for <code>MinSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MinSize</code> is larger than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MinSize</code> value.</p> </li> <li> <p>If you specify a new value for <code>MaxSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MaxSize</code> is smaller than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MaxSize</code> value.</p> </li> </ul> <p>To see which parameters have been set, use <a>DescribeAutoScalingGroups</a>. You can also view the scaling policies for an Auto Scaling group using <a>DescribePolicies</a>. If the group has scaling policies, you can update them using <a>PutScalingPolicy</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605099 = query.getOrDefault("Action")
  valid_605099 = validateParameter(valid_605099, JString, required = true,
                                 default = newJString("UpdateAutoScalingGroup"))
  if valid_605099 != nil:
    section.add "Action", valid_605099
  var valid_605100 = query.getOrDefault("Version")
  valid_605100 = validateParameter(valid_605100, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_605100 != nil:
    section.add "Version", valid_605100
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605101 = header.getOrDefault("X-Amz-Date")
  valid_605101 = validateParameter(valid_605101, JString, required = false,
                                 default = nil)
  if valid_605101 != nil:
    section.add "X-Amz-Date", valid_605101
  var valid_605102 = header.getOrDefault("X-Amz-Security-Token")
  valid_605102 = validateParameter(valid_605102, JString, required = false,
                                 default = nil)
  if valid_605102 != nil:
    section.add "X-Amz-Security-Token", valid_605102
  var valid_605103 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605103 = validateParameter(valid_605103, JString, required = false,
                                 default = nil)
  if valid_605103 != nil:
    section.add "X-Amz-Content-Sha256", valid_605103
  var valid_605104 = header.getOrDefault("X-Amz-Algorithm")
  valid_605104 = validateParameter(valid_605104, JString, required = false,
                                 default = nil)
  if valid_605104 != nil:
    section.add "X-Amz-Algorithm", valid_605104
  var valid_605105 = header.getOrDefault("X-Amz-Signature")
  valid_605105 = validateParameter(valid_605105, JString, required = false,
                                 default = nil)
  if valid_605105 != nil:
    section.add "X-Amz-Signature", valid_605105
  var valid_605106 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605106 = validateParameter(valid_605106, JString, required = false,
                                 default = nil)
  if valid_605106 != nil:
    section.add "X-Amz-SignedHeaders", valid_605106
  var valid_605107 = header.getOrDefault("X-Amz-Credential")
  valid_605107 = validateParameter(valid_605107, JString, required = false,
                                 default = nil)
  if valid_605107 != nil:
    section.add "X-Amz-Credential", valid_605107
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LaunchTemplate.LaunchTemplateId: JString
  ##                                  : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  ##   LaunchConfigurationName: JString
  ##                          : <p>The name of the launch configuration. If you specify <code>LaunchConfigurationName</code> in your update request, you can't specify <code>LaunchTemplate</code> or <code>MixedInstancesPolicy</code>.</p> <important> <p>To update an Auto Scaling group with a launch configuration with <code>InstanceMonitoring</code> set to <code>false</code>, you must first disable the collection of group metrics. Otherwise, you get an error. If you have previously enabled the collection of group metrics, you can disable it using <a>DisableMetricsCollection</a>.</p> </important>
  ##   HealthCheckType: JString
  ##                  : The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.
  ##   ServiceLinkedRoleARN: JString
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   DesiredCapacity: JInt
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group.
  ##   HealthCheckGracePeriod: JInt
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   VPCZoneIdentifier: JString
  ##                    : <p>A comma-separated list of subnet IDs for virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p>
  ##   AvailabilityZones: JArray
  ##                    : One or more Availability Zones for the group.
  ##   MinSize: JInt
  ##          : The minimum size of the Auto Scaling group.
  ##   DefaultCooldown: JInt
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>. This cooldown period is not used when a scaling-specific cooldown is specified.</p> <p>Cooldown periods are not supported for target tracking scaling policies, step scaling policies, or scheduled scaling. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MixedInstancesPolicy.LaunchTemplate: JString
  ##                                      : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   MaxSize: JInt
  ##          : The maximum size of the Auto Scaling group.
  ##   MixedInstancesPolicy.InstancesDistribution: JString
  ##                                             : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified when creating a mixed instances policy, the default values are used.</p>
  ##   PlacementGroup: JString
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   NewInstancesProtectedFromScaleIn: JBool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LaunchTemplate.Version: JString
  ##                         : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   TerminationPolicies: JArray
  ##                      : <p>A standalone termination policy or a list of termination policies used to select the instance to terminate. The policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LaunchTemplate.LaunchTemplateName: JString
  ##                                    : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_605108 = formData.getOrDefault("AutoScalingGroupName")
  valid_605108 = validateParameter(valid_605108, JString, required = true,
                                 default = nil)
  if valid_605108 != nil:
    section.add "AutoScalingGroupName", valid_605108
  var valid_605109 = formData.getOrDefault("LaunchTemplate.LaunchTemplateId")
  valid_605109 = validateParameter(valid_605109, JString, required = false,
                                 default = nil)
  if valid_605109 != nil:
    section.add "LaunchTemplate.LaunchTemplateId", valid_605109
  var valid_605110 = formData.getOrDefault("LaunchConfigurationName")
  valid_605110 = validateParameter(valid_605110, JString, required = false,
                                 default = nil)
  if valid_605110 != nil:
    section.add "LaunchConfigurationName", valid_605110
  var valid_605111 = formData.getOrDefault("HealthCheckType")
  valid_605111 = validateParameter(valid_605111, JString, required = false,
                                 default = nil)
  if valid_605111 != nil:
    section.add "HealthCheckType", valid_605111
  var valid_605112 = formData.getOrDefault("ServiceLinkedRoleARN")
  valid_605112 = validateParameter(valid_605112, JString, required = false,
                                 default = nil)
  if valid_605112 != nil:
    section.add "ServiceLinkedRoleARN", valid_605112
  var valid_605113 = formData.getOrDefault("DesiredCapacity")
  valid_605113 = validateParameter(valid_605113, JInt, required = false, default = nil)
  if valid_605113 != nil:
    section.add "DesiredCapacity", valid_605113
  var valid_605114 = formData.getOrDefault("HealthCheckGracePeriod")
  valid_605114 = validateParameter(valid_605114, JInt, required = false, default = nil)
  if valid_605114 != nil:
    section.add "HealthCheckGracePeriod", valid_605114
  var valid_605115 = formData.getOrDefault("VPCZoneIdentifier")
  valid_605115 = validateParameter(valid_605115, JString, required = false,
                                 default = nil)
  if valid_605115 != nil:
    section.add "VPCZoneIdentifier", valid_605115
  var valid_605116 = formData.getOrDefault("AvailabilityZones")
  valid_605116 = validateParameter(valid_605116, JArray, required = false,
                                 default = nil)
  if valid_605116 != nil:
    section.add "AvailabilityZones", valid_605116
  var valid_605117 = formData.getOrDefault("MinSize")
  valid_605117 = validateParameter(valid_605117, JInt, required = false, default = nil)
  if valid_605117 != nil:
    section.add "MinSize", valid_605117
  var valid_605118 = formData.getOrDefault("DefaultCooldown")
  valid_605118 = validateParameter(valid_605118, JInt, required = false, default = nil)
  if valid_605118 != nil:
    section.add "DefaultCooldown", valid_605118
  var valid_605119 = formData.getOrDefault("MixedInstancesPolicy.LaunchTemplate")
  valid_605119 = validateParameter(valid_605119, JString, required = false,
                                 default = nil)
  if valid_605119 != nil:
    section.add "MixedInstancesPolicy.LaunchTemplate", valid_605119
  var valid_605120 = formData.getOrDefault("MaxSize")
  valid_605120 = validateParameter(valid_605120, JInt, required = false, default = nil)
  if valid_605120 != nil:
    section.add "MaxSize", valid_605120
  var valid_605121 = formData.getOrDefault("MixedInstancesPolicy.InstancesDistribution")
  valid_605121 = validateParameter(valid_605121, JString, required = false,
                                 default = nil)
  if valid_605121 != nil:
    section.add "MixedInstancesPolicy.InstancesDistribution", valid_605121
  var valid_605122 = formData.getOrDefault("PlacementGroup")
  valid_605122 = validateParameter(valid_605122, JString, required = false,
                                 default = nil)
  if valid_605122 != nil:
    section.add "PlacementGroup", valid_605122
  var valid_605123 = formData.getOrDefault("NewInstancesProtectedFromScaleIn")
  valid_605123 = validateParameter(valid_605123, JBool, required = false, default = nil)
  if valid_605123 != nil:
    section.add "NewInstancesProtectedFromScaleIn", valid_605123
  var valid_605124 = formData.getOrDefault("LaunchTemplate.Version")
  valid_605124 = validateParameter(valid_605124, JString, required = false,
                                 default = nil)
  if valid_605124 != nil:
    section.add "LaunchTemplate.Version", valid_605124
  var valid_605125 = formData.getOrDefault("TerminationPolicies")
  valid_605125 = validateParameter(valid_605125, JArray, required = false,
                                 default = nil)
  if valid_605125 != nil:
    section.add "TerminationPolicies", valid_605125
  var valid_605126 = formData.getOrDefault("LaunchTemplate.LaunchTemplateName")
  valid_605126 = validateParameter(valid_605126, JString, required = false,
                                 default = nil)
  if valid_605126 != nil:
    section.add "LaunchTemplate.LaunchTemplateName", valid_605126
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605127: Call_PostUpdateAutoScalingGroup_605096; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the configuration for the specified Auto Scaling group.</p> <p>To update an Auto Scaling group, specify the name of the group and the parameter that you want to change. Any parameters that you don't specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. Scaling activities that are currently in progress aren't affected.</p> <p>If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.</p> <p>Note the following about changing <code>DesiredCapacity</code>, <code>MaxSize</code>, or <code>MinSize</code>:</p> <ul> <li> <p>If a scale-in event occurs as a result of a new <code>DesiredCapacity</code> value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.</p> </li> <li> <p>If you specify a new value for <code>MinSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MinSize</code> is larger than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MinSize</code> value.</p> </li> <li> <p>If you specify a new value for <code>MaxSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MaxSize</code> is smaller than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MaxSize</code> value.</p> </li> </ul> <p>To see which parameters have been set, use <a>DescribeAutoScalingGroups</a>. You can also view the scaling policies for an Auto Scaling group using <a>DescribePolicies</a>. If the group has scaling policies, you can update them using <a>PutScalingPolicy</a>.</p>
  ## 
  let valid = call_605127.validator(path, query, header, formData, body)
  let scheme = call_605127.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605127.url(scheme.get, call_605127.host, call_605127.base,
                         call_605127.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605127, url, valid)

proc call*(call_605128: Call_PostUpdateAutoScalingGroup_605096;
          AutoScalingGroupName: string;
          LaunchTemplateLaunchTemplateId: string = "";
          LaunchConfigurationName: string = ""; HealthCheckType: string = "";
          ServiceLinkedRoleARN: string = ""; DesiredCapacity: int = 0;
          HealthCheckGracePeriod: int = 0; VPCZoneIdentifier: string = "";
          Action: string = "UpdateAutoScalingGroup";
          AvailabilityZones: JsonNode = nil; MinSize: int = 0; DefaultCooldown: int = 0;
          MixedInstancesPolicyLaunchTemplate: string = ""; MaxSize: int = 0;
          MixedInstancesPolicyInstancesDistribution: string = "";
          PlacementGroup: string = "";
          NewInstancesProtectedFromScaleIn: bool = false;
          LaunchTemplateVersion: string = ""; TerminationPolicies: JsonNode = nil;
          Version: string = "2011-01-01";
          LaunchTemplateLaunchTemplateName: string = ""): Recallable =
  ## postUpdateAutoScalingGroup
  ## <p>Updates the configuration for the specified Auto Scaling group.</p> <p>To update an Auto Scaling group, specify the name of the group and the parameter that you want to change. Any parameters that you don't specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. Scaling activities that are currently in progress aren't affected.</p> <p>If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.</p> <p>Note the following about changing <code>DesiredCapacity</code>, <code>MaxSize</code>, or <code>MinSize</code>:</p> <ul> <li> <p>If a scale-in event occurs as a result of a new <code>DesiredCapacity</code> value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.</p> </li> <li> <p>If you specify a new value for <code>MinSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MinSize</code> is larger than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MinSize</code> value.</p> </li> <li> <p>If you specify a new value for <code>MaxSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MaxSize</code> is smaller than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MaxSize</code> value.</p> </li> </ul> <p>To see which parameters have been set, use <a>DescribeAutoScalingGroups</a>. You can also view the scaling policies for an Auto Scaling group using <a>DescribePolicies</a>. If the group has scaling policies, you can update them using <a>PutScalingPolicy</a>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   LaunchTemplateLaunchTemplateId: string
  ##                                 : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  ##   LaunchConfigurationName: string
  ##                          : <p>The name of the launch configuration. If you specify <code>LaunchConfigurationName</code> in your update request, you can't specify <code>LaunchTemplate</code> or <code>MixedInstancesPolicy</code>.</p> <important> <p>To update an Auto Scaling group with a launch configuration with <code>InstanceMonitoring</code> set to <code>false</code>, you must first disable the collection of group metrics. Otherwise, you get an error. If you have previously enabled the collection of group metrics, you can disable it using <a>DisableMetricsCollection</a>.</p> </important>
  ##   HealthCheckType: string
  ##                  : The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.
  ##   ServiceLinkedRoleARN: string
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   DesiredCapacity: int
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group.
  ##   HealthCheckGracePeriod: int
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   VPCZoneIdentifier: string
  ##                    : <p>A comma-separated list of subnet IDs for virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p>
  ##   Action: string (required)
  ##   AvailabilityZones: JArray
  ##                    : One or more Availability Zones for the group.
  ##   MinSize: int
  ##          : The minimum size of the Auto Scaling group.
  ##   DefaultCooldown: int
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>. This cooldown period is not used when a scaling-specific cooldown is specified.</p> <p>Cooldown periods are not supported for target tracking scaling policies, step scaling policies, or scheduled scaling. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MixedInstancesPolicyLaunchTemplate: string
  ##                                     : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   MaxSize: int
  ##          : The maximum size of the Auto Scaling group.
  ##   MixedInstancesPolicyInstancesDistribution: string
  ##                                            : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified when creating a mixed instances policy, the default values are used.</p>
  ##   PlacementGroup: string
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   NewInstancesProtectedFromScaleIn: bool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LaunchTemplateVersion: string
  ##                        : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   TerminationPolicies: JArray
  ##                      : <p>A standalone termination policy or a list of termination policies used to select the instance to terminate. The policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Version: string (required)
  ##   LaunchTemplateLaunchTemplateName: string
  ##                                   : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  var query_605129 = newJObject()
  var formData_605130 = newJObject()
  add(formData_605130, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_605130, "LaunchTemplate.LaunchTemplateId",
      newJString(LaunchTemplateLaunchTemplateId))
  add(formData_605130, "LaunchConfigurationName",
      newJString(LaunchConfigurationName))
  add(formData_605130, "HealthCheckType", newJString(HealthCheckType))
  add(formData_605130, "ServiceLinkedRoleARN", newJString(ServiceLinkedRoleARN))
  add(formData_605130, "DesiredCapacity", newJInt(DesiredCapacity))
  add(formData_605130, "HealthCheckGracePeriod", newJInt(HealthCheckGracePeriod))
  add(formData_605130, "VPCZoneIdentifier", newJString(VPCZoneIdentifier))
  add(query_605129, "Action", newJString(Action))
  if AvailabilityZones != nil:
    formData_605130.add "AvailabilityZones", AvailabilityZones
  add(formData_605130, "MinSize", newJInt(MinSize))
  add(formData_605130, "DefaultCooldown", newJInt(DefaultCooldown))
  add(formData_605130, "MixedInstancesPolicy.LaunchTemplate",
      newJString(MixedInstancesPolicyLaunchTemplate))
  add(formData_605130, "MaxSize", newJInt(MaxSize))
  add(formData_605130, "MixedInstancesPolicy.InstancesDistribution",
      newJString(MixedInstancesPolicyInstancesDistribution))
  add(formData_605130, "PlacementGroup", newJString(PlacementGroup))
  add(formData_605130, "NewInstancesProtectedFromScaleIn",
      newJBool(NewInstancesProtectedFromScaleIn))
  add(formData_605130, "LaunchTemplate.Version", newJString(LaunchTemplateVersion))
  if TerminationPolicies != nil:
    formData_605130.add "TerminationPolicies", TerminationPolicies
  add(query_605129, "Version", newJString(Version))
  add(formData_605130, "LaunchTemplate.LaunchTemplateName",
      newJString(LaunchTemplateLaunchTemplateName))
  result = call_605128.call(nil, query_605129, nil, formData_605130, nil)

var postUpdateAutoScalingGroup* = Call_PostUpdateAutoScalingGroup_605096(
    name: "postUpdateAutoScalingGroup", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=UpdateAutoScalingGroup",
    validator: validate_PostUpdateAutoScalingGroup_605097, base: "/",
    url: url_PostUpdateAutoScalingGroup_605098,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateAutoScalingGroup_605062 = ref object of OpenApiRestCall_602466
proc url_GetUpdateAutoScalingGroup_605064(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetUpdateAutoScalingGroup_605063(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the configuration for the specified Auto Scaling group.</p> <p>To update an Auto Scaling group, specify the name of the group and the parameter that you want to change. Any parameters that you don't specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. Scaling activities that are currently in progress aren't affected.</p> <p>If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.</p> <p>Note the following about changing <code>DesiredCapacity</code>, <code>MaxSize</code>, or <code>MinSize</code>:</p> <ul> <li> <p>If a scale-in event occurs as a result of a new <code>DesiredCapacity</code> value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.</p> </li> <li> <p>If you specify a new value for <code>MinSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MinSize</code> is larger than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MinSize</code> value.</p> </li> <li> <p>If you specify a new value for <code>MaxSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MaxSize</code> is smaller than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MaxSize</code> value.</p> </li> </ul> <p>To see which parameters have been set, use <a>DescribeAutoScalingGroups</a>. You can also view the scaling policies for an Auto Scaling group using <a>DescribePolicies</a>. If the group has scaling policies, you can update them using <a>PutScalingPolicy</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   HealthCheckGracePeriod: JInt
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   TerminationPolicies: JArray
  ##                      : <p>A standalone termination policy or a list of termination policies used to select the instance to terminate. The policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   HealthCheckType: JString
  ##                  : The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.
  ##   DesiredCapacity: JInt
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group.
  ##   DefaultCooldown: JInt
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>. This cooldown period is not used when a scaling-specific cooldown is specified.</p> <p>Cooldown periods are not supported for target tracking scaling policies, step scaling policies, or scheduled scaling. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LaunchTemplate.LaunchTemplateId: JString
  ##                                  : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  ##   LaunchTemplate.LaunchTemplateName: JString
  ##                                    : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   AvailabilityZones: JArray
  ##                    : One or more Availability Zones for the group.
  ##   VPCZoneIdentifier: JString
  ##                    : <p>A comma-separated list of subnet IDs for virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p>
  ##   NewInstancesProtectedFromScaleIn: JBool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MixedInstancesPolicy.LaunchTemplate: JString
  ##                                      : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   LaunchConfigurationName: JString
  ##                          : <p>The name of the launch configuration. If you specify <code>LaunchConfigurationName</code> in your update request, you can't specify <code>LaunchTemplate</code> or <code>MixedInstancesPolicy</code>.</p> <important> <p>To update an Auto Scaling group with a launch configuration with <code>InstanceMonitoring</code> set to <code>false</code>, you must first disable the collection of group metrics. Otherwise, you get an error. If you have previously enabled the collection of group metrics, you can disable it using <a>DisableMetricsCollection</a>.</p> </important>
  ##   Action: JString (required)
  ##   PlacementGroup: JString
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   MixedInstancesPolicy.InstancesDistribution: JString
  ##                                             : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified when creating a mixed instances policy, the default values are used.</p>
  ##   LaunchTemplate.Version: JString
  ##                         : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   MaxSize: JInt
  ##          : The maximum size of the Auto Scaling group.
  ##   MinSize: JInt
  ##          : The minimum size of the Auto Scaling group.
  ##   Version: JString (required)
  ##   ServiceLinkedRoleARN: JString
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  section = newJObject()
  var valid_605065 = query.getOrDefault("HealthCheckGracePeriod")
  valid_605065 = validateParameter(valid_605065, JInt, required = false, default = nil)
  if valid_605065 != nil:
    section.add "HealthCheckGracePeriod", valid_605065
  var valid_605066 = query.getOrDefault("TerminationPolicies")
  valid_605066 = validateParameter(valid_605066, JArray, required = false,
                                 default = nil)
  if valid_605066 != nil:
    section.add "TerminationPolicies", valid_605066
  var valid_605067 = query.getOrDefault("HealthCheckType")
  valid_605067 = validateParameter(valid_605067, JString, required = false,
                                 default = nil)
  if valid_605067 != nil:
    section.add "HealthCheckType", valid_605067
  var valid_605068 = query.getOrDefault("DesiredCapacity")
  valid_605068 = validateParameter(valid_605068, JInt, required = false, default = nil)
  if valid_605068 != nil:
    section.add "DesiredCapacity", valid_605068
  var valid_605069 = query.getOrDefault("DefaultCooldown")
  valid_605069 = validateParameter(valid_605069, JInt, required = false, default = nil)
  if valid_605069 != nil:
    section.add "DefaultCooldown", valid_605069
  var valid_605070 = query.getOrDefault("LaunchTemplate.LaunchTemplateId")
  valid_605070 = validateParameter(valid_605070, JString, required = false,
                                 default = nil)
  if valid_605070 != nil:
    section.add "LaunchTemplate.LaunchTemplateId", valid_605070
  var valid_605071 = query.getOrDefault("LaunchTemplate.LaunchTemplateName")
  valid_605071 = validateParameter(valid_605071, JString, required = false,
                                 default = nil)
  if valid_605071 != nil:
    section.add "LaunchTemplate.LaunchTemplateName", valid_605071
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_605072 = query.getOrDefault("AutoScalingGroupName")
  valid_605072 = validateParameter(valid_605072, JString, required = true,
                                 default = nil)
  if valid_605072 != nil:
    section.add "AutoScalingGroupName", valid_605072
  var valid_605073 = query.getOrDefault("AvailabilityZones")
  valid_605073 = validateParameter(valid_605073, JArray, required = false,
                                 default = nil)
  if valid_605073 != nil:
    section.add "AvailabilityZones", valid_605073
  var valid_605074 = query.getOrDefault("VPCZoneIdentifier")
  valid_605074 = validateParameter(valid_605074, JString, required = false,
                                 default = nil)
  if valid_605074 != nil:
    section.add "VPCZoneIdentifier", valid_605074
  var valid_605075 = query.getOrDefault("NewInstancesProtectedFromScaleIn")
  valid_605075 = validateParameter(valid_605075, JBool, required = false, default = nil)
  if valid_605075 != nil:
    section.add "NewInstancesProtectedFromScaleIn", valid_605075
  var valid_605076 = query.getOrDefault("MixedInstancesPolicy.LaunchTemplate")
  valid_605076 = validateParameter(valid_605076, JString, required = false,
                                 default = nil)
  if valid_605076 != nil:
    section.add "MixedInstancesPolicy.LaunchTemplate", valid_605076
  var valid_605077 = query.getOrDefault("LaunchConfigurationName")
  valid_605077 = validateParameter(valid_605077, JString, required = false,
                                 default = nil)
  if valid_605077 != nil:
    section.add "LaunchConfigurationName", valid_605077
  var valid_605078 = query.getOrDefault("Action")
  valid_605078 = validateParameter(valid_605078, JString, required = true,
                                 default = newJString("UpdateAutoScalingGroup"))
  if valid_605078 != nil:
    section.add "Action", valid_605078
  var valid_605079 = query.getOrDefault("PlacementGroup")
  valid_605079 = validateParameter(valid_605079, JString, required = false,
                                 default = nil)
  if valid_605079 != nil:
    section.add "PlacementGroup", valid_605079
  var valid_605080 = query.getOrDefault("MixedInstancesPolicy.InstancesDistribution")
  valid_605080 = validateParameter(valid_605080, JString, required = false,
                                 default = nil)
  if valid_605080 != nil:
    section.add "MixedInstancesPolicy.InstancesDistribution", valid_605080
  var valid_605081 = query.getOrDefault("LaunchTemplate.Version")
  valid_605081 = validateParameter(valid_605081, JString, required = false,
                                 default = nil)
  if valid_605081 != nil:
    section.add "LaunchTemplate.Version", valid_605081
  var valid_605082 = query.getOrDefault("MaxSize")
  valid_605082 = validateParameter(valid_605082, JInt, required = false, default = nil)
  if valid_605082 != nil:
    section.add "MaxSize", valid_605082
  var valid_605083 = query.getOrDefault("MinSize")
  valid_605083 = validateParameter(valid_605083, JInt, required = false, default = nil)
  if valid_605083 != nil:
    section.add "MinSize", valid_605083
  var valid_605084 = query.getOrDefault("Version")
  valid_605084 = validateParameter(valid_605084, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_605084 != nil:
    section.add "Version", valid_605084
  var valid_605085 = query.getOrDefault("ServiceLinkedRoleARN")
  valid_605085 = validateParameter(valid_605085, JString, required = false,
                                 default = nil)
  if valid_605085 != nil:
    section.add "ServiceLinkedRoleARN", valid_605085
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605086 = header.getOrDefault("X-Amz-Date")
  valid_605086 = validateParameter(valid_605086, JString, required = false,
                                 default = nil)
  if valid_605086 != nil:
    section.add "X-Amz-Date", valid_605086
  var valid_605087 = header.getOrDefault("X-Amz-Security-Token")
  valid_605087 = validateParameter(valid_605087, JString, required = false,
                                 default = nil)
  if valid_605087 != nil:
    section.add "X-Amz-Security-Token", valid_605087
  var valid_605088 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605088 = validateParameter(valid_605088, JString, required = false,
                                 default = nil)
  if valid_605088 != nil:
    section.add "X-Amz-Content-Sha256", valid_605088
  var valid_605089 = header.getOrDefault("X-Amz-Algorithm")
  valid_605089 = validateParameter(valid_605089, JString, required = false,
                                 default = nil)
  if valid_605089 != nil:
    section.add "X-Amz-Algorithm", valid_605089
  var valid_605090 = header.getOrDefault("X-Amz-Signature")
  valid_605090 = validateParameter(valid_605090, JString, required = false,
                                 default = nil)
  if valid_605090 != nil:
    section.add "X-Amz-Signature", valid_605090
  var valid_605091 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605091 = validateParameter(valid_605091, JString, required = false,
                                 default = nil)
  if valid_605091 != nil:
    section.add "X-Amz-SignedHeaders", valid_605091
  var valid_605092 = header.getOrDefault("X-Amz-Credential")
  valid_605092 = validateParameter(valid_605092, JString, required = false,
                                 default = nil)
  if valid_605092 != nil:
    section.add "X-Amz-Credential", valid_605092
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605093: Call_GetUpdateAutoScalingGroup_605062; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the configuration for the specified Auto Scaling group.</p> <p>To update an Auto Scaling group, specify the name of the group and the parameter that you want to change. Any parameters that you don't specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. Scaling activities that are currently in progress aren't affected.</p> <p>If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.</p> <p>Note the following about changing <code>DesiredCapacity</code>, <code>MaxSize</code>, or <code>MinSize</code>:</p> <ul> <li> <p>If a scale-in event occurs as a result of a new <code>DesiredCapacity</code> value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.</p> </li> <li> <p>If you specify a new value for <code>MinSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MinSize</code> is larger than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MinSize</code> value.</p> </li> <li> <p>If you specify a new value for <code>MaxSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MaxSize</code> is smaller than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MaxSize</code> value.</p> </li> </ul> <p>To see which parameters have been set, use <a>DescribeAutoScalingGroups</a>. You can also view the scaling policies for an Auto Scaling group using <a>DescribePolicies</a>. If the group has scaling policies, you can update them using <a>PutScalingPolicy</a>.</p>
  ## 
  let valid = call_605093.validator(path, query, header, formData, body)
  let scheme = call_605093.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605093.url(scheme.get, call_605093.host, call_605093.base,
                         call_605093.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605093, url, valid)

proc call*(call_605094: Call_GetUpdateAutoScalingGroup_605062;
          AutoScalingGroupName: string; HealthCheckGracePeriod: int = 0;
          TerminationPolicies: JsonNode = nil; HealthCheckType: string = "";
          DesiredCapacity: int = 0; DefaultCooldown: int = 0;
          LaunchTemplateLaunchTemplateId: string = "";
          LaunchTemplateLaunchTemplateName: string = "";
          AvailabilityZones: JsonNode = nil; VPCZoneIdentifier: string = "";
          NewInstancesProtectedFromScaleIn: bool = false;
          MixedInstancesPolicyLaunchTemplate: string = "";
          LaunchConfigurationName: string = "";
          Action: string = "UpdateAutoScalingGroup"; PlacementGroup: string = "";
          MixedInstancesPolicyInstancesDistribution: string = "";
          LaunchTemplateVersion: string = ""; MaxSize: int = 0; MinSize: int = 0;
          Version: string = "2011-01-01"; ServiceLinkedRoleARN: string = ""): Recallable =
  ## getUpdateAutoScalingGroup
  ## <p>Updates the configuration for the specified Auto Scaling group.</p> <p>To update an Auto Scaling group, specify the name of the group and the parameter that you want to change. Any parameters that you don't specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. Scaling activities that are currently in progress aren't affected.</p> <p>If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.</p> <p>Note the following about changing <code>DesiredCapacity</code>, <code>MaxSize</code>, or <code>MinSize</code>:</p> <ul> <li> <p>If a scale-in event occurs as a result of a new <code>DesiredCapacity</code> value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.</p> </li> <li> <p>If you specify a new value for <code>MinSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MinSize</code> is larger than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MinSize</code> value.</p> </li> <li> <p>If you specify a new value for <code>MaxSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MaxSize</code> is smaller than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MaxSize</code> value.</p> </li> </ul> <p>To see which parameters have been set, use <a>DescribeAutoScalingGroups</a>. You can also view the scaling policies for an Auto Scaling group using <a>DescribePolicies</a>. If the group has scaling policies, you can update them using <a>PutScalingPolicy</a>.</p>
  ##   HealthCheckGracePeriod: int
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   TerminationPolicies: JArray
  ##                      : <p>A standalone termination policy or a list of termination policies used to select the instance to terminate. The policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   HealthCheckType: string
  ##                  : The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.
  ##   DesiredCapacity: int
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group.
  ##   DefaultCooldown: int
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>. This cooldown period is not used when a scaling-specific cooldown is specified.</p> <p>Cooldown periods are not supported for target tracking scaling policies, step scaling policies, or scheduled scaling. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LaunchTemplateLaunchTemplateId: string
  ##                                 : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  ##   LaunchTemplateLaunchTemplateName: string
  ##                                   : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   AvailabilityZones: JArray
  ##                    : One or more Availability Zones for the group.
  ##   VPCZoneIdentifier: string
  ##                    : <p>A comma-separated list of subnet IDs for virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p>
  ##   NewInstancesProtectedFromScaleIn: bool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MixedInstancesPolicyLaunchTemplate: string
  ##                                     : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   LaunchConfigurationName: string
  ##                          : <p>The name of the launch configuration. If you specify <code>LaunchConfigurationName</code> in your update request, you can't specify <code>LaunchTemplate</code> or <code>MixedInstancesPolicy</code>.</p> <important> <p>To update an Auto Scaling group with a launch configuration with <code>InstanceMonitoring</code> set to <code>false</code>, you must first disable the collection of group metrics. Otherwise, you get an error. If you have previously enabled the collection of group metrics, you can disable it using <a>DisableMetricsCollection</a>.</p> </important>
  ##   Action: string (required)
  ##   PlacementGroup: string
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   MixedInstancesPolicyInstancesDistribution: string
  ##                                            : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified when creating a mixed instances policy, the default values are used.</p>
  ##   LaunchTemplateVersion: string
  ##                        : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   MaxSize: int
  ##          : The maximum size of the Auto Scaling group.
  ##   MinSize: int
  ##          : The minimum size of the Auto Scaling group.
  ##   Version: string (required)
  ##   ServiceLinkedRoleARN: string
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  var query_605095 = newJObject()
  add(query_605095, "HealthCheckGracePeriod", newJInt(HealthCheckGracePeriod))
  if TerminationPolicies != nil:
    query_605095.add "TerminationPolicies", TerminationPolicies
  add(query_605095, "HealthCheckType", newJString(HealthCheckType))
  add(query_605095, "DesiredCapacity", newJInt(DesiredCapacity))
  add(query_605095, "DefaultCooldown", newJInt(DefaultCooldown))
  add(query_605095, "LaunchTemplate.LaunchTemplateId",
      newJString(LaunchTemplateLaunchTemplateId))
  add(query_605095, "LaunchTemplate.LaunchTemplateName",
      newJString(LaunchTemplateLaunchTemplateName))
  add(query_605095, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if AvailabilityZones != nil:
    query_605095.add "AvailabilityZones", AvailabilityZones
  add(query_605095, "VPCZoneIdentifier", newJString(VPCZoneIdentifier))
  add(query_605095, "NewInstancesProtectedFromScaleIn",
      newJBool(NewInstancesProtectedFromScaleIn))
  add(query_605095, "MixedInstancesPolicy.LaunchTemplate",
      newJString(MixedInstancesPolicyLaunchTemplate))
  add(query_605095, "LaunchConfigurationName", newJString(LaunchConfigurationName))
  add(query_605095, "Action", newJString(Action))
  add(query_605095, "PlacementGroup", newJString(PlacementGroup))
  add(query_605095, "MixedInstancesPolicy.InstancesDistribution",
      newJString(MixedInstancesPolicyInstancesDistribution))
  add(query_605095, "LaunchTemplate.Version", newJString(LaunchTemplateVersion))
  add(query_605095, "MaxSize", newJInt(MaxSize))
  add(query_605095, "MinSize", newJInt(MinSize))
  add(query_605095, "Version", newJString(Version))
  add(query_605095, "ServiceLinkedRoleARN", newJString(ServiceLinkedRoleARN))
  result = call_605094.call(nil, query_605095, nil, nil, nil)

var getUpdateAutoScalingGroup* = Call_GetUpdateAutoScalingGroup_605062(
    name: "getUpdateAutoScalingGroup", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=UpdateAutoScalingGroup",
    validator: validate_GetUpdateAutoScalingGroup_605063, base: "/",
    url: url_GetUpdateAutoScalingGroup_605064,
    schemes: {Scheme.Https, Scheme.Http})
export
  rest

proc sign(recall: var Recallable; query: JsonNode; algo: SigningAlgo = SHA256) =
  let
    date = makeDateTime()
    access = os.getEnv("AWS_ACCESS_KEY_ID", "")
    secret = os.getEnv("AWS_SECRET_ACCESS_KEY", "")
    region = os.getEnv("AWS_REGION", "")
  assert secret != "", "need secret key in env"
  assert access != "", "need access key in env"
  assert region != "", "need region in env"
  var
    normal: PathNormal
    url = normalizeUrl(recall.url, query, normalize = normal)
    scheme = parseEnum[Scheme](url.scheme)
  assert scheme in awsServers, "unknown scheme `" & $scheme & "`"
  assert region in awsServers[scheme], "unknown region `" & region & "`"
  url.hostname = awsServers[scheme][region]
  case awsServiceName.toLowerAscii
  of "s3":
    normal = PathNormal.S3
  else:
    normal = PathNormal.Default
  recall.headers["Host"] = url.hostname
  recall.headers["X-Amz-Date"] = date
  let
    algo = SHA256
    scope = credentialScope(region = region, service = awsServiceName, date = date)
    request = canonicalRequest(recall.meth, $url, query, recall.headers, recall.body,
                             normalize = normal, digest = algo)
    sts = stringToSign(request.hash(algo), scope, date = date, digest = algo)
    signature = calculateSignature(secret = secret, date = date, region = region,
                                 service = awsServiceName, sts, digest = algo)
  var auth = $algo & " "
  auth &= "Credential=" & access / scope & ", "
  auth &= "SignedHeaders=" & recall.headers.signedHeaders & ", "
  auth &= "Signature=" & signature
  recall.headers["Authorization"] = auth
  recall.headers.del "Host"
  recall.url = $url

method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  let headers = massageHeaders(input.getOrDefault("header"))
  result = newRecallable(call, url, headers, input.getOrDefault("body").getStr)
  result.sign(input.getOrDefault("query"), SHA256)
