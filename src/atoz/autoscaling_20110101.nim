
import
  json, options, hashes, uri, strutils, tables, rest, os, uri, strutils, httpcore, sigv4

## auto-generated via openapi macro
## title: Auto Scaling
## version: 2011-01-01
## termsOfService: https://aws.amazon.com/service-terms/
## license:
##     name: Apache 2.0 License
##     url: http://www.apache.org/licenses/
## 
## <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch or terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks. Use this service with AWS Auto Scaling, Amazon CloudWatch, and Elastic Load Balancing.</p> <p>For more information, including information about granting IAM users required permissions for Amazon EC2 Auto Scaling actions, see the <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">Amazon EC2 Auto Scaling User Guide</a>.</p>
## 
## Amazon Web Services documentation
## https://docs.aws.amazon.com/autoscaling/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_615866 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_615866](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_615866): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low .. Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js == nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result == nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind == kind, $kind & " expected; received " & $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    case js.kind
    of JInt, JFloat, JNull, JBool:
      head = $js
    of JString:
      head = js.getStr
    else:
      return
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  awsServers = {Scheme.Http: {"ap-northeast-1": "autoscaling.ap-northeast-1.amazonaws.com", "ap-southeast-1": "autoscaling.ap-southeast-1.amazonaws.com",
                           "us-west-2": "autoscaling.us-west-2.amazonaws.com",
                           "eu-west-2": "autoscaling.eu-west-2.amazonaws.com", "ap-northeast-3": "autoscaling.ap-northeast-3.amazonaws.com", "eu-central-1": "autoscaling.eu-central-1.amazonaws.com",
                           "us-east-2": "autoscaling.us-east-2.amazonaws.com",
                           "us-east-1": "autoscaling.us-east-1.amazonaws.com", "cn-northwest-1": "autoscaling.cn-northwest-1.amazonaws.com.cn", "ap-northeast-2": "autoscaling.ap-northeast-2.amazonaws.com", "ap-south-1": "autoscaling.ap-south-1.amazonaws.com", "eu-north-1": "autoscaling.eu-north-1.amazonaws.com",
                           "us-west-1": "autoscaling.us-west-1.amazonaws.com", "us-gov-east-1": "autoscaling.us-gov-east-1.amazonaws.com",
                           "eu-west-3": "autoscaling.eu-west-3.amazonaws.com", "cn-north-1": "autoscaling.cn-north-1.amazonaws.com.cn",
                           "sa-east-1": "autoscaling.sa-east-1.amazonaws.com",
                           "eu-west-1": "autoscaling.eu-west-1.amazonaws.com", "us-gov-west-1": "autoscaling.us-gov-west-1.amazonaws.com", "ap-southeast-2": "autoscaling.ap-southeast-2.amazonaws.com", "ca-central-1": "autoscaling.ca-central-1.amazonaws.com"}.toTable, Scheme.Https: {
      "ap-northeast-1": "autoscaling.ap-northeast-1.amazonaws.com",
      "ap-southeast-1": "autoscaling.ap-southeast-1.amazonaws.com",
      "us-west-2": "autoscaling.us-west-2.amazonaws.com",
      "eu-west-2": "autoscaling.eu-west-2.amazonaws.com",
      "ap-northeast-3": "autoscaling.ap-northeast-3.amazonaws.com",
      "eu-central-1": "autoscaling.eu-central-1.amazonaws.com",
      "us-east-2": "autoscaling.us-east-2.amazonaws.com",
      "us-east-1": "autoscaling.us-east-1.amazonaws.com",
      "cn-northwest-1": "autoscaling.cn-northwest-1.amazonaws.com.cn",
      "ap-northeast-2": "autoscaling.ap-northeast-2.amazonaws.com",
      "ap-south-1": "autoscaling.ap-south-1.amazonaws.com",
      "eu-north-1": "autoscaling.eu-north-1.amazonaws.com",
      "us-west-1": "autoscaling.us-west-1.amazonaws.com",
      "us-gov-east-1": "autoscaling.us-gov-east-1.amazonaws.com",
      "eu-west-3": "autoscaling.eu-west-3.amazonaws.com",
      "cn-north-1": "autoscaling.cn-north-1.amazonaws.com.cn",
      "sa-east-1": "autoscaling.sa-east-1.amazonaws.com",
      "eu-west-1": "autoscaling.eu-west-1.amazonaws.com",
      "us-gov-west-1": "autoscaling.us-gov-west-1.amazonaws.com",
      "ap-southeast-2": "autoscaling.ap-southeast-2.amazonaws.com",
      "ca-central-1": "autoscaling.ca-central-1.amazonaws.com"}.toTable}.toTable
const
  awsServiceName = "autoscaling"
method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_PostAttachInstances_616479 = ref object of OpenApiRestCall_615866
proc url_PostAttachInstances_616481(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAttachInstances_616480(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Attaches one or more EC2 instances to the specified Auto Scaling group.</p> <p>When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.</p> <p>If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html">Attach EC2 Instances to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616482 = query.getOrDefault("Action")
  valid_616482 = validateParameter(valid_616482, JString, required = true,
                                 default = newJString("AttachInstances"))
  if valid_616482 != nil:
    section.add "Action", valid_616482
  var valid_616483 = query.getOrDefault("Version")
  valid_616483 = validateParameter(valid_616483, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_616483 != nil:
    section.add "Version", valid_616483
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_616484 = header.getOrDefault("X-Amz-Date")
  valid_616484 = validateParameter(valid_616484, JString, required = false,
                                 default = nil)
  if valid_616484 != nil:
    section.add "X-Amz-Date", valid_616484
  var valid_616485 = header.getOrDefault("X-Amz-Security-Token")
  valid_616485 = validateParameter(valid_616485, JString, required = false,
                                 default = nil)
  if valid_616485 != nil:
    section.add "X-Amz-Security-Token", valid_616485
  var valid_616486 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616486 = validateParameter(valid_616486, JString, required = false,
                                 default = nil)
  if valid_616486 != nil:
    section.add "X-Amz-Content-Sha256", valid_616486
  var valid_616487 = header.getOrDefault("X-Amz-Algorithm")
  valid_616487 = validateParameter(valid_616487, JString, required = false,
                                 default = nil)
  if valid_616487 != nil:
    section.add "X-Amz-Algorithm", valid_616487
  var valid_616488 = header.getOrDefault("X-Amz-Signature")
  valid_616488 = validateParameter(valid_616488, JString, required = false,
                                 default = nil)
  if valid_616488 != nil:
    section.add "X-Amz-Signature", valid_616488
  var valid_616489 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616489 = validateParameter(valid_616489, JString, required = false,
                                 default = nil)
  if valid_616489 != nil:
    section.add "X-Amz-SignedHeaders", valid_616489
  var valid_616490 = header.getOrDefault("X-Amz-Credential")
  valid_616490 = validateParameter(valid_616490, JString, required = false,
                                 default = nil)
  if valid_616490 != nil:
    section.add "X-Amz-Credential", valid_616490
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_616491 = formData.getOrDefault("AutoScalingGroupName")
  valid_616491 = validateParameter(valid_616491, JString, required = true,
                                 default = nil)
  if valid_616491 != nil:
    section.add "AutoScalingGroupName", valid_616491
  var valid_616492 = formData.getOrDefault("InstanceIds")
  valid_616492 = validateParameter(valid_616492, JArray, required = false,
                                 default = nil)
  if valid_616492 != nil:
    section.add "InstanceIds", valid_616492
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616493: Call_PostAttachInstances_616479; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches one or more EC2 instances to the specified Auto Scaling group.</p> <p>When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.</p> <p>If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html">Attach EC2 Instances to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_616493.validator(path, query, header, formData, body)
  let scheme = call_616493.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616493.url(scheme.get, call_616493.host, call_616493.base,
                         call_616493.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616493, url, valid)

proc call*(call_616494: Call_PostAttachInstances_616479;
          AutoScalingGroupName: string; InstanceIds: JsonNode = nil;
          Action: string = "AttachInstances"; Version: string = "2011-01-01"): Recallable =
  ## postAttachInstances
  ## <p>Attaches one or more EC2 instances to the specified Auto Scaling group.</p> <p>When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.</p> <p>If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html">Attach EC2 Instances to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616495 = newJObject()
  var formData_616496 = newJObject()
  add(formData_616496, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if InstanceIds != nil:
    formData_616496.add "InstanceIds", InstanceIds
  add(query_616495, "Action", newJString(Action))
  add(query_616495, "Version", newJString(Version))
  result = call_616494.call(nil, query_616495, nil, formData_616496, nil)

var postAttachInstances* = Call_PostAttachInstances_616479(
    name: "postAttachInstances", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=AttachInstances",
    validator: validate_PostAttachInstances_616480, base: "/",
    url: url_PostAttachInstances_616481, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAttachInstances_616205 = ref object of OpenApiRestCall_615866
proc url_GetAttachInstances_616207(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAttachInstances_616206(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Attaches one or more EC2 instances to the specified Auto Scaling group.</p> <p>When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.</p> <p>If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html">Attach EC2 Instances to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_616319 = query.getOrDefault("AutoScalingGroupName")
  valid_616319 = validateParameter(valid_616319, JString, required = true,
                                 default = nil)
  if valid_616319 != nil:
    section.add "AutoScalingGroupName", valid_616319
  var valid_616333 = query.getOrDefault("Action")
  valid_616333 = validateParameter(valid_616333, JString, required = true,
                                 default = newJString("AttachInstances"))
  if valid_616333 != nil:
    section.add "Action", valid_616333
  var valid_616334 = query.getOrDefault("InstanceIds")
  valid_616334 = validateParameter(valid_616334, JArray, required = false,
                                 default = nil)
  if valid_616334 != nil:
    section.add "InstanceIds", valid_616334
  var valid_616335 = query.getOrDefault("Version")
  valid_616335 = validateParameter(valid_616335, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_616335 != nil:
    section.add "Version", valid_616335
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_616336 = header.getOrDefault("X-Amz-Date")
  valid_616336 = validateParameter(valid_616336, JString, required = false,
                                 default = nil)
  if valid_616336 != nil:
    section.add "X-Amz-Date", valid_616336
  var valid_616337 = header.getOrDefault("X-Amz-Security-Token")
  valid_616337 = validateParameter(valid_616337, JString, required = false,
                                 default = nil)
  if valid_616337 != nil:
    section.add "X-Amz-Security-Token", valid_616337
  var valid_616338 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616338 = validateParameter(valid_616338, JString, required = false,
                                 default = nil)
  if valid_616338 != nil:
    section.add "X-Amz-Content-Sha256", valid_616338
  var valid_616339 = header.getOrDefault("X-Amz-Algorithm")
  valid_616339 = validateParameter(valid_616339, JString, required = false,
                                 default = nil)
  if valid_616339 != nil:
    section.add "X-Amz-Algorithm", valid_616339
  var valid_616340 = header.getOrDefault("X-Amz-Signature")
  valid_616340 = validateParameter(valid_616340, JString, required = false,
                                 default = nil)
  if valid_616340 != nil:
    section.add "X-Amz-Signature", valid_616340
  var valid_616341 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616341 = validateParameter(valid_616341, JString, required = false,
                                 default = nil)
  if valid_616341 != nil:
    section.add "X-Amz-SignedHeaders", valid_616341
  var valid_616342 = header.getOrDefault("X-Amz-Credential")
  valid_616342 = validateParameter(valid_616342, JString, required = false,
                                 default = nil)
  if valid_616342 != nil:
    section.add "X-Amz-Credential", valid_616342
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616365: Call_GetAttachInstances_616205; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches one or more EC2 instances to the specified Auto Scaling group.</p> <p>When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.</p> <p>If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html">Attach EC2 Instances to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_616365.validator(path, query, header, formData, body)
  let scheme = call_616365.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616365.url(scheme.get, call_616365.host, call_616365.base,
                         call_616365.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616365, url, valid)

proc call*(call_616436: Call_GetAttachInstances_616205;
          AutoScalingGroupName: string; Action: string = "AttachInstances";
          InstanceIds: JsonNode = nil; Version: string = "2011-01-01"): Recallable =
  ## getAttachInstances
  ## <p>Attaches one or more EC2 instances to the specified Auto Scaling group.</p> <p>When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.</p> <p>If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html">Attach EC2 Instances to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Version: string (required)
  var query_616437 = newJObject()
  add(query_616437, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_616437, "Action", newJString(Action))
  if InstanceIds != nil:
    query_616437.add "InstanceIds", InstanceIds
  add(query_616437, "Version", newJString(Version))
  result = call_616436.call(nil, query_616437, nil, nil, nil)

var getAttachInstances* = Call_GetAttachInstances_616205(
    name: "getAttachInstances", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=AttachInstances",
    validator: validate_GetAttachInstances_616206, base: "/",
    url: url_GetAttachInstances_616207, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAttachLoadBalancerTargetGroups_616514 = ref object of OpenApiRestCall_615866
proc url_PostAttachLoadBalancerTargetGroups_616516(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAttachLoadBalancerTargetGroups_616515(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches one or more target groups to the specified Auto Scaling group.</p> <p>To describe the target groups for an Auto Scaling group, use <a>DescribeLoadBalancerTargetGroups</a>. To detach the target group from the Auto Scaling group, use <a>DetachLoadBalancerTargetGroups</a>.</p> <p>With Application Load Balancers and Network Load Balancers, instances are registered as targets with a target group. With Classic Load Balancers, instances are registered with the load balancer. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616517 = query.getOrDefault("Action")
  valid_616517 = validateParameter(valid_616517, JString, required = true, default = newJString(
      "AttachLoadBalancerTargetGroups"))
  if valid_616517 != nil:
    section.add "Action", valid_616517
  var valid_616518 = query.getOrDefault("Version")
  valid_616518 = validateParameter(valid_616518, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_616518 != nil:
    section.add "Version", valid_616518
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_616519 = header.getOrDefault("X-Amz-Date")
  valid_616519 = validateParameter(valid_616519, JString, required = false,
                                 default = nil)
  if valid_616519 != nil:
    section.add "X-Amz-Date", valid_616519
  var valid_616520 = header.getOrDefault("X-Amz-Security-Token")
  valid_616520 = validateParameter(valid_616520, JString, required = false,
                                 default = nil)
  if valid_616520 != nil:
    section.add "X-Amz-Security-Token", valid_616520
  var valid_616521 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616521 = validateParameter(valid_616521, JString, required = false,
                                 default = nil)
  if valid_616521 != nil:
    section.add "X-Amz-Content-Sha256", valid_616521
  var valid_616522 = header.getOrDefault("X-Amz-Algorithm")
  valid_616522 = validateParameter(valid_616522, JString, required = false,
                                 default = nil)
  if valid_616522 != nil:
    section.add "X-Amz-Algorithm", valid_616522
  var valid_616523 = header.getOrDefault("X-Amz-Signature")
  valid_616523 = validateParameter(valid_616523, JString, required = false,
                                 default = nil)
  if valid_616523 != nil:
    section.add "X-Amz-Signature", valid_616523
  var valid_616524 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616524 = validateParameter(valid_616524, JString, required = false,
                                 default = nil)
  if valid_616524 != nil:
    section.add "X-Amz-SignedHeaders", valid_616524
  var valid_616525 = header.getOrDefault("X-Amz-Credential")
  valid_616525 = validateParameter(valid_616525, JString, required = false,
                                 default = nil)
  if valid_616525 != nil:
    section.add "X-Amz-Credential", valid_616525
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_616526 = formData.getOrDefault("AutoScalingGroupName")
  valid_616526 = validateParameter(valid_616526, JString, required = true,
                                 default = nil)
  if valid_616526 != nil:
    section.add "AutoScalingGroupName", valid_616526
  var valid_616527 = formData.getOrDefault("TargetGroupARNs")
  valid_616527 = validateParameter(valid_616527, JArray, required = true, default = nil)
  if valid_616527 != nil:
    section.add "TargetGroupARNs", valid_616527
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616528: Call_PostAttachLoadBalancerTargetGroups_616514;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Attaches one or more target groups to the specified Auto Scaling group.</p> <p>To describe the target groups for an Auto Scaling group, use <a>DescribeLoadBalancerTargetGroups</a>. To detach the target group from the Auto Scaling group, use <a>DetachLoadBalancerTargetGroups</a>.</p> <p>With Application Load Balancers and Network Load Balancers, instances are registered as targets with a target group. With Classic Load Balancers, instances are registered with the load balancer. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_616528.validator(path, query, header, formData, body)
  let scheme = call_616528.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616528.url(scheme.get, call_616528.host, call_616528.base,
                         call_616528.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616528, url, valid)

proc call*(call_616529: Call_PostAttachLoadBalancerTargetGroups_616514;
          AutoScalingGroupName: string; TargetGroupARNs: JsonNode;
          Action: string = "AttachLoadBalancerTargetGroups";
          Version: string = "2011-01-01"): Recallable =
  ## postAttachLoadBalancerTargetGroups
  ## <p>Attaches one or more target groups to the specified Auto Scaling group.</p> <p>To describe the target groups for an Auto Scaling group, use <a>DescribeLoadBalancerTargetGroups</a>. To detach the target group from the Auto Scaling group, use <a>DetachLoadBalancerTargetGroups</a>.</p> <p>With Application Load Balancers and Network Load Balancers, instances are registered as targets with a target group. With Classic Load Balancers, instances are registered with the load balancer. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616530 = newJObject()
  var formData_616531 = newJObject()
  add(formData_616531, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if TargetGroupARNs != nil:
    formData_616531.add "TargetGroupARNs", TargetGroupARNs
  add(query_616530, "Action", newJString(Action))
  add(query_616530, "Version", newJString(Version))
  result = call_616529.call(nil, query_616530, nil, formData_616531, nil)

var postAttachLoadBalancerTargetGroups* = Call_PostAttachLoadBalancerTargetGroups_616514(
    name: "postAttachLoadBalancerTargetGroups", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=AttachLoadBalancerTargetGroups",
    validator: validate_PostAttachLoadBalancerTargetGroups_616515, base: "/",
    url: url_PostAttachLoadBalancerTargetGroups_616516,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAttachLoadBalancerTargetGroups_616497 = ref object of OpenApiRestCall_615866
proc url_GetAttachLoadBalancerTargetGroups_616499(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAttachLoadBalancerTargetGroups_616498(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches one or more target groups to the specified Auto Scaling group.</p> <p>To describe the target groups for an Auto Scaling group, use <a>DescribeLoadBalancerTargetGroups</a>. To detach the target group from the Auto Scaling group, use <a>DetachLoadBalancerTargetGroups</a>.</p> <p>With Application Load Balancers and Network Load Balancers, instances are registered as targets with a target group. With Classic Load Balancers, instances are registered with the load balancer. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_616500 = query.getOrDefault("AutoScalingGroupName")
  valid_616500 = validateParameter(valid_616500, JString, required = true,
                                 default = nil)
  if valid_616500 != nil:
    section.add "AutoScalingGroupName", valid_616500
  var valid_616501 = query.getOrDefault("Action")
  valid_616501 = validateParameter(valid_616501, JString, required = true, default = newJString(
      "AttachLoadBalancerTargetGroups"))
  if valid_616501 != nil:
    section.add "Action", valid_616501
  var valid_616502 = query.getOrDefault("TargetGroupARNs")
  valid_616502 = validateParameter(valid_616502, JArray, required = true, default = nil)
  if valid_616502 != nil:
    section.add "TargetGroupARNs", valid_616502
  var valid_616503 = query.getOrDefault("Version")
  valid_616503 = validateParameter(valid_616503, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_616503 != nil:
    section.add "Version", valid_616503
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_616504 = header.getOrDefault("X-Amz-Date")
  valid_616504 = validateParameter(valid_616504, JString, required = false,
                                 default = nil)
  if valid_616504 != nil:
    section.add "X-Amz-Date", valid_616504
  var valid_616505 = header.getOrDefault("X-Amz-Security-Token")
  valid_616505 = validateParameter(valid_616505, JString, required = false,
                                 default = nil)
  if valid_616505 != nil:
    section.add "X-Amz-Security-Token", valid_616505
  var valid_616506 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616506 = validateParameter(valid_616506, JString, required = false,
                                 default = nil)
  if valid_616506 != nil:
    section.add "X-Amz-Content-Sha256", valid_616506
  var valid_616507 = header.getOrDefault("X-Amz-Algorithm")
  valid_616507 = validateParameter(valid_616507, JString, required = false,
                                 default = nil)
  if valid_616507 != nil:
    section.add "X-Amz-Algorithm", valid_616507
  var valid_616508 = header.getOrDefault("X-Amz-Signature")
  valid_616508 = validateParameter(valid_616508, JString, required = false,
                                 default = nil)
  if valid_616508 != nil:
    section.add "X-Amz-Signature", valid_616508
  var valid_616509 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616509 = validateParameter(valid_616509, JString, required = false,
                                 default = nil)
  if valid_616509 != nil:
    section.add "X-Amz-SignedHeaders", valid_616509
  var valid_616510 = header.getOrDefault("X-Amz-Credential")
  valid_616510 = validateParameter(valid_616510, JString, required = false,
                                 default = nil)
  if valid_616510 != nil:
    section.add "X-Amz-Credential", valid_616510
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616511: Call_GetAttachLoadBalancerTargetGroups_616497;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Attaches one or more target groups to the specified Auto Scaling group.</p> <p>To describe the target groups for an Auto Scaling group, use <a>DescribeLoadBalancerTargetGroups</a>. To detach the target group from the Auto Scaling group, use <a>DetachLoadBalancerTargetGroups</a>.</p> <p>With Application Load Balancers and Network Load Balancers, instances are registered as targets with a target group. With Classic Load Balancers, instances are registered with the load balancer. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_616511.validator(path, query, header, formData, body)
  let scheme = call_616511.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616511.url(scheme.get, call_616511.host, call_616511.base,
                         call_616511.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616511, url, valid)

proc call*(call_616512: Call_GetAttachLoadBalancerTargetGroups_616497;
          AutoScalingGroupName: string; TargetGroupARNs: JsonNode;
          Action: string = "AttachLoadBalancerTargetGroups";
          Version: string = "2011-01-01"): Recallable =
  ## getAttachLoadBalancerTargetGroups
  ## <p>Attaches one or more target groups to the specified Auto Scaling group.</p> <p>To describe the target groups for an Auto Scaling group, use <a>DescribeLoadBalancerTargetGroups</a>. To detach the target group from the Auto Scaling group, use <a>DetachLoadBalancerTargetGroups</a>.</p> <p>With Application Load Balancers and Network Load Balancers, instances are registered as targets with a target group. With Classic Load Balancers, instances are registered with the load balancer. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  ##   Version: string (required)
  var query_616513 = newJObject()
  add(query_616513, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_616513, "Action", newJString(Action))
  if TargetGroupARNs != nil:
    query_616513.add "TargetGroupARNs", TargetGroupARNs
  add(query_616513, "Version", newJString(Version))
  result = call_616512.call(nil, query_616513, nil, nil, nil)

var getAttachLoadBalancerTargetGroups* = Call_GetAttachLoadBalancerTargetGroups_616497(
    name: "getAttachLoadBalancerTargetGroups", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=AttachLoadBalancerTargetGroups",
    validator: validate_GetAttachLoadBalancerTargetGroups_616498, base: "/",
    url: url_GetAttachLoadBalancerTargetGroups_616499,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAttachLoadBalancers_616549 = ref object of OpenApiRestCall_615866
proc url_PostAttachLoadBalancers_616551(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAttachLoadBalancers_616550(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches one or more Classic Load Balancers to the specified Auto Scaling group.</p> <p>To attach an Application Load Balancer or a Network Load Balancer instead, see <a>AttachLoadBalancerTargetGroups</a>.</p> <p>To describe the load balancers for an Auto Scaling group, use <a>DescribeLoadBalancers</a>. To detach the load balancer from the Auto Scaling group, use <a>DetachLoadBalancers</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616552 = query.getOrDefault("Action")
  valid_616552 = validateParameter(valid_616552, JString, required = true,
                                 default = newJString("AttachLoadBalancers"))
  if valid_616552 != nil:
    section.add "Action", valid_616552
  var valid_616553 = query.getOrDefault("Version")
  valid_616553 = validateParameter(valid_616553, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_616553 != nil:
    section.add "Version", valid_616553
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_616554 = header.getOrDefault("X-Amz-Date")
  valid_616554 = validateParameter(valid_616554, JString, required = false,
                                 default = nil)
  if valid_616554 != nil:
    section.add "X-Amz-Date", valid_616554
  var valid_616555 = header.getOrDefault("X-Amz-Security-Token")
  valid_616555 = validateParameter(valid_616555, JString, required = false,
                                 default = nil)
  if valid_616555 != nil:
    section.add "X-Amz-Security-Token", valid_616555
  var valid_616556 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616556 = validateParameter(valid_616556, JString, required = false,
                                 default = nil)
  if valid_616556 != nil:
    section.add "X-Amz-Content-Sha256", valid_616556
  var valid_616557 = header.getOrDefault("X-Amz-Algorithm")
  valid_616557 = validateParameter(valid_616557, JString, required = false,
                                 default = nil)
  if valid_616557 != nil:
    section.add "X-Amz-Algorithm", valid_616557
  var valid_616558 = header.getOrDefault("X-Amz-Signature")
  valid_616558 = validateParameter(valid_616558, JString, required = false,
                                 default = nil)
  if valid_616558 != nil:
    section.add "X-Amz-Signature", valid_616558
  var valid_616559 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616559 = validateParameter(valid_616559, JString, required = false,
                                 default = nil)
  if valid_616559 != nil:
    section.add "X-Amz-SignedHeaders", valid_616559
  var valid_616560 = header.getOrDefault("X-Amz-Credential")
  valid_616560 = validateParameter(valid_616560, JString, required = false,
                                 default = nil)
  if valid_616560 != nil:
    section.add "X-Amz-Credential", valid_616560
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_616561 = formData.getOrDefault("AutoScalingGroupName")
  valid_616561 = validateParameter(valid_616561, JString, required = true,
                                 default = nil)
  if valid_616561 != nil:
    section.add "AutoScalingGroupName", valid_616561
  var valid_616562 = formData.getOrDefault("LoadBalancerNames")
  valid_616562 = validateParameter(valid_616562, JArray, required = true, default = nil)
  if valid_616562 != nil:
    section.add "LoadBalancerNames", valid_616562
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616563: Call_PostAttachLoadBalancers_616549; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches one or more Classic Load Balancers to the specified Auto Scaling group.</p> <p>To attach an Application Load Balancer or a Network Load Balancer instead, see <a>AttachLoadBalancerTargetGroups</a>.</p> <p>To describe the load balancers for an Auto Scaling group, use <a>DescribeLoadBalancers</a>. To detach the load balancer from the Auto Scaling group, use <a>DetachLoadBalancers</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_616563.validator(path, query, header, formData, body)
  let scheme = call_616563.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616563.url(scheme.get, call_616563.host, call_616563.base,
                         call_616563.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616563, url, valid)

proc call*(call_616564: Call_PostAttachLoadBalancers_616549;
          AutoScalingGroupName: string; LoadBalancerNames: JsonNode;
          Action: string = "AttachLoadBalancers"; Version: string = "2011-01-01"): Recallable =
  ## postAttachLoadBalancers
  ## <p>Attaches one or more Classic Load Balancers to the specified Auto Scaling group.</p> <p>To attach an Application Load Balancer or a Network Load Balancer instead, see <a>AttachLoadBalancerTargetGroups</a>.</p> <p>To describe the load balancers for an Auto Scaling group, use <a>DescribeLoadBalancers</a>. To detach the load balancer from the Auto Scaling group, use <a>DetachLoadBalancers</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  ##   Version: string (required)
  var query_616565 = newJObject()
  var formData_616566 = newJObject()
  add(formData_616566, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_616565, "Action", newJString(Action))
  if LoadBalancerNames != nil:
    formData_616566.add "LoadBalancerNames", LoadBalancerNames
  add(query_616565, "Version", newJString(Version))
  result = call_616564.call(nil, query_616565, nil, formData_616566, nil)

var postAttachLoadBalancers* = Call_PostAttachLoadBalancers_616549(
    name: "postAttachLoadBalancers", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=AttachLoadBalancers",
    validator: validate_PostAttachLoadBalancers_616550, base: "/",
    url: url_PostAttachLoadBalancers_616551, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAttachLoadBalancers_616532 = ref object of OpenApiRestCall_615866
proc url_GetAttachLoadBalancers_616534(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAttachLoadBalancers_616533(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches one or more Classic Load Balancers to the specified Auto Scaling group.</p> <p>To attach an Application Load Balancer or a Network Load Balancer instead, see <a>AttachLoadBalancerTargetGroups</a>.</p> <p>To describe the load balancers for an Auto Scaling group, use <a>DescribeLoadBalancers</a>. To detach the load balancer from the Auto Scaling group, use <a>DetachLoadBalancers</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_616535 = query.getOrDefault("AutoScalingGroupName")
  valid_616535 = validateParameter(valid_616535, JString, required = true,
                                 default = nil)
  if valid_616535 != nil:
    section.add "AutoScalingGroupName", valid_616535
  var valid_616536 = query.getOrDefault("Action")
  valid_616536 = validateParameter(valid_616536, JString, required = true,
                                 default = newJString("AttachLoadBalancers"))
  if valid_616536 != nil:
    section.add "Action", valid_616536
  var valid_616537 = query.getOrDefault("LoadBalancerNames")
  valid_616537 = validateParameter(valid_616537, JArray, required = true, default = nil)
  if valid_616537 != nil:
    section.add "LoadBalancerNames", valid_616537
  var valid_616538 = query.getOrDefault("Version")
  valid_616538 = validateParameter(valid_616538, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_616538 != nil:
    section.add "Version", valid_616538
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_616539 = header.getOrDefault("X-Amz-Date")
  valid_616539 = validateParameter(valid_616539, JString, required = false,
                                 default = nil)
  if valid_616539 != nil:
    section.add "X-Amz-Date", valid_616539
  var valid_616540 = header.getOrDefault("X-Amz-Security-Token")
  valid_616540 = validateParameter(valid_616540, JString, required = false,
                                 default = nil)
  if valid_616540 != nil:
    section.add "X-Amz-Security-Token", valid_616540
  var valid_616541 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616541 = validateParameter(valid_616541, JString, required = false,
                                 default = nil)
  if valid_616541 != nil:
    section.add "X-Amz-Content-Sha256", valid_616541
  var valid_616542 = header.getOrDefault("X-Amz-Algorithm")
  valid_616542 = validateParameter(valid_616542, JString, required = false,
                                 default = nil)
  if valid_616542 != nil:
    section.add "X-Amz-Algorithm", valid_616542
  var valid_616543 = header.getOrDefault("X-Amz-Signature")
  valid_616543 = validateParameter(valid_616543, JString, required = false,
                                 default = nil)
  if valid_616543 != nil:
    section.add "X-Amz-Signature", valid_616543
  var valid_616544 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616544 = validateParameter(valid_616544, JString, required = false,
                                 default = nil)
  if valid_616544 != nil:
    section.add "X-Amz-SignedHeaders", valid_616544
  var valid_616545 = header.getOrDefault("X-Amz-Credential")
  valid_616545 = validateParameter(valid_616545, JString, required = false,
                                 default = nil)
  if valid_616545 != nil:
    section.add "X-Amz-Credential", valid_616545
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616546: Call_GetAttachLoadBalancers_616532; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches one or more Classic Load Balancers to the specified Auto Scaling group.</p> <p>To attach an Application Load Balancer or a Network Load Balancer instead, see <a>AttachLoadBalancerTargetGroups</a>.</p> <p>To describe the load balancers for an Auto Scaling group, use <a>DescribeLoadBalancers</a>. To detach the load balancer from the Auto Scaling group, use <a>DetachLoadBalancers</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_616546.validator(path, query, header, formData, body)
  let scheme = call_616546.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616546.url(scheme.get, call_616546.host, call_616546.base,
                         call_616546.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616546, url, valid)

proc call*(call_616547: Call_GetAttachLoadBalancers_616532;
          AutoScalingGroupName: string; LoadBalancerNames: JsonNode;
          Action: string = "AttachLoadBalancers"; Version: string = "2011-01-01"): Recallable =
  ## getAttachLoadBalancers
  ## <p>Attaches one or more Classic Load Balancers to the specified Auto Scaling group.</p> <p>To attach an Application Load Balancer or a Network Load Balancer instead, see <a>AttachLoadBalancerTargetGroups</a>.</p> <p>To describe the load balancers for an Auto Scaling group, use <a>DescribeLoadBalancers</a>. To detach the load balancer from the Auto Scaling group, use <a>DetachLoadBalancers</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  ##   Version: string (required)
  var query_616548 = newJObject()
  add(query_616548, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_616548, "Action", newJString(Action))
  if LoadBalancerNames != nil:
    query_616548.add "LoadBalancerNames", LoadBalancerNames
  add(query_616548, "Version", newJString(Version))
  result = call_616547.call(nil, query_616548, nil, nil, nil)

var getAttachLoadBalancers* = Call_GetAttachLoadBalancers_616532(
    name: "getAttachLoadBalancers", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=AttachLoadBalancers",
    validator: validate_GetAttachLoadBalancers_616533, base: "/",
    url: url_GetAttachLoadBalancers_616534, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostBatchDeleteScheduledAction_616584 = ref object of OpenApiRestCall_615866
proc url_PostBatchDeleteScheduledAction_616586(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostBatchDeleteScheduledAction_616585(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes one or more scheduled actions for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616587 = query.getOrDefault("Action")
  valid_616587 = validateParameter(valid_616587, JString, required = true, default = newJString(
      "BatchDeleteScheduledAction"))
  if valid_616587 != nil:
    section.add "Action", valid_616587
  var valid_616588 = query.getOrDefault("Version")
  valid_616588 = validateParameter(valid_616588, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_616588 != nil:
    section.add "Version", valid_616588
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_616589 = header.getOrDefault("X-Amz-Date")
  valid_616589 = validateParameter(valid_616589, JString, required = false,
                                 default = nil)
  if valid_616589 != nil:
    section.add "X-Amz-Date", valid_616589
  var valid_616590 = header.getOrDefault("X-Amz-Security-Token")
  valid_616590 = validateParameter(valid_616590, JString, required = false,
                                 default = nil)
  if valid_616590 != nil:
    section.add "X-Amz-Security-Token", valid_616590
  var valid_616591 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616591 = validateParameter(valid_616591, JString, required = false,
                                 default = nil)
  if valid_616591 != nil:
    section.add "X-Amz-Content-Sha256", valid_616591
  var valid_616592 = header.getOrDefault("X-Amz-Algorithm")
  valid_616592 = validateParameter(valid_616592, JString, required = false,
                                 default = nil)
  if valid_616592 != nil:
    section.add "X-Amz-Algorithm", valid_616592
  var valid_616593 = header.getOrDefault("X-Amz-Signature")
  valid_616593 = validateParameter(valid_616593, JString, required = false,
                                 default = nil)
  if valid_616593 != nil:
    section.add "X-Amz-Signature", valid_616593
  var valid_616594 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616594 = validateParameter(valid_616594, JString, required = false,
                                 default = nil)
  if valid_616594 != nil:
    section.add "X-Amz-SignedHeaders", valid_616594
  var valid_616595 = header.getOrDefault("X-Amz-Credential")
  valid_616595 = validateParameter(valid_616595, JString, required = false,
                                 default = nil)
  if valid_616595 != nil:
    section.add "X-Amz-Credential", valid_616595
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScheduledActionNames: JArray (required)
  ##                       : The names of the scheduled actions to delete. The maximum number allowed is 50. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_616596 = formData.getOrDefault("AutoScalingGroupName")
  valid_616596 = validateParameter(valid_616596, JString, required = true,
                                 default = nil)
  if valid_616596 != nil:
    section.add "AutoScalingGroupName", valid_616596
  var valid_616597 = formData.getOrDefault("ScheduledActionNames")
  valid_616597 = validateParameter(valid_616597, JArray, required = true, default = nil)
  if valid_616597 != nil:
    section.add "ScheduledActionNames", valid_616597
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616598: Call_PostBatchDeleteScheduledAction_616584; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes one or more scheduled actions for the specified Auto Scaling group.
  ## 
  let valid = call_616598.validator(path, query, header, formData, body)
  let scheme = call_616598.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616598.url(scheme.get, call_616598.host, call_616598.base,
                         call_616598.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616598, url, valid)

proc call*(call_616599: Call_PostBatchDeleteScheduledAction_616584;
          AutoScalingGroupName: string; ScheduledActionNames: JsonNode;
          Action: string = "BatchDeleteScheduledAction";
          Version: string = "2011-01-01"): Recallable =
  ## postBatchDeleteScheduledAction
  ## Deletes one or more scheduled actions for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ScheduledActionNames: JArray (required)
  ##                       : The names of the scheduled actions to delete. The maximum number allowed is 50. 
  var query_616600 = newJObject()
  var formData_616601 = newJObject()
  add(formData_616601, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_616600, "Action", newJString(Action))
  add(query_616600, "Version", newJString(Version))
  if ScheduledActionNames != nil:
    formData_616601.add "ScheduledActionNames", ScheduledActionNames
  result = call_616599.call(nil, query_616600, nil, formData_616601, nil)

var postBatchDeleteScheduledAction* = Call_PostBatchDeleteScheduledAction_616584(
    name: "postBatchDeleteScheduledAction", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=BatchDeleteScheduledAction",
    validator: validate_PostBatchDeleteScheduledAction_616585, base: "/",
    url: url_PostBatchDeleteScheduledAction_616586,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBatchDeleteScheduledAction_616567 = ref object of OpenApiRestCall_615866
proc url_GetBatchDeleteScheduledAction_616569(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetBatchDeleteScheduledAction_616568(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes one or more scheduled actions for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   ScheduledActionNames: JArray (required)
  ##                       : The names of the scheduled actions to delete. The maximum number allowed is 50. 
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_616570 = query.getOrDefault("AutoScalingGroupName")
  valid_616570 = validateParameter(valid_616570, JString, required = true,
                                 default = nil)
  if valid_616570 != nil:
    section.add "AutoScalingGroupName", valid_616570
  var valid_616571 = query.getOrDefault("Action")
  valid_616571 = validateParameter(valid_616571, JString, required = true, default = newJString(
      "BatchDeleteScheduledAction"))
  if valid_616571 != nil:
    section.add "Action", valid_616571
  var valid_616572 = query.getOrDefault("ScheduledActionNames")
  valid_616572 = validateParameter(valid_616572, JArray, required = true, default = nil)
  if valid_616572 != nil:
    section.add "ScheduledActionNames", valid_616572
  var valid_616573 = query.getOrDefault("Version")
  valid_616573 = validateParameter(valid_616573, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_616573 != nil:
    section.add "Version", valid_616573
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_616574 = header.getOrDefault("X-Amz-Date")
  valid_616574 = validateParameter(valid_616574, JString, required = false,
                                 default = nil)
  if valid_616574 != nil:
    section.add "X-Amz-Date", valid_616574
  var valid_616575 = header.getOrDefault("X-Amz-Security-Token")
  valid_616575 = validateParameter(valid_616575, JString, required = false,
                                 default = nil)
  if valid_616575 != nil:
    section.add "X-Amz-Security-Token", valid_616575
  var valid_616576 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616576 = validateParameter(valid_616576, JString, required = false,
                                 default = nil)
  if valid_616576 != nil:
    section.add "X-Amz-Content-Sha256", valid_616576
  var valid_616577 = header.getOrDefault("X-Amz-Algorithm")
  valid_616577 = validateParameter(valid_616577, JString, required = false,
                                 default = nil)
  if valid_616577 != nil:
    section.add "X-Amz-Algorithm", valid_616577
  var valid_616578 = header.getOrDefault("X-Amz-Signature")
  valid_616578 = validateParameter(valid_616578, JString, required = false,
                                 default = nil)
  if valid_616578 != nil:
    section.add "X-Amz-Signature", valid_616578
  var valid_616579 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616579 = validateParameter(valid_616579, JString, required = false,
                                 default = nil)
  if valid_616579 != nil:
    section.add "X-Amz-SignedHeaders", valid_616579
  var valid_616580 = header.getOrDefault("X-Amz-Credential")
  valid_616580 = validateParameter(valid_616580, JString, required = false,
                                 default = nil)
  if valid_616580 != nil:
    section.add "X-Amz-Credential", valid_616580
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616581: Call_GetBatchDeleteScheduledAction_616567; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes one or more scheduled actions for the specified Auto Scaling group.
  ## 
  let valid = call_616581.validator(path, query, header, formData, body)
  let scheme = call_616581.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616581.url(scheme.get, call_616581.host, call_616581.base,
                         call_616581.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616581, url, valid)

proc call*(call_616582: Call_GetBatchDeleteScheduledAction_616567;
          AutoScalingGroupName: string; ScheduledActionNames: JsonNode;
          Action: string = "BatchDeleteScheduledAction";
          Version: string = "2011-01-01"): Recallable =
  ## getBatchDeleteScheduledAction
  ## Deletes one or more scheduled actions for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   ScheduledActionNames: JArray (required)
  ##                       : The names of the scheduled actions to delete. The maximum number allowed is 50. 
  ##   Version: string (required)
  var query_616583 = newJObject()
  add(query_616583, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_616583, "Action", newJString(Action))
  if ScheduledActionNames != nil:
    query_616583.add "ScheduledActionNames", ScheduledActionNames
  add(query_616583, "Version", newJString(Version))
  result = call_616582.call(nil, query_616583, nil, nil, nil)

var getBatchDeleteScheduledAction* = Call_GetBatchDeleteScheduledAction_616567(
    name: "getBatchDeleteScheduledAction", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=BatchDeleteScheduledAction",
    validator: validate_GetBatchDeleteScheduledAction_616568, base: "/",
    url: url_GetBatchDeleteScheduledAction_616569,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostBatchPutScheduledUpdateGroupAction_616619 = ref object of OpenApiRestCall_615866
proc url_PostBatchPutScheduledUpdateGroupAction_616621(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostBatchPutScheduledUpdateGroupAction_616620(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates or updates one or more scheduled scaling actions for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616622 = query.getOrDefault("Action")
  valid_616622 = validateParameter(valid_616622, JString, required = true, default = newJString(
      "BatchPutScheduledUpdateGroupAction"))
  if valid_616622 != nil:
    section.add "Action", valid_616622
  var valid_616623 = query.getOrDefault("Version")
  valid_616623 = validateParameter(valid_616623, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_616623 != nil:
    section.add "Version", valid_616623
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_616624 = header.getOrDefault("X-Amz-Date")
  valid_616624 = validateParameter(valid_616624, JString, required = false,
                                 default = nil)
  if valid_616624 != nil:
    section.add "X-Amz-Date", valid_616624
  var valid_616625 = header.getOrDefault("X-Amz-Security-Token")
  valid_616625 = validateParameter(valid_616625, JString, required = false,
                                 default = nil)
  if valid_616625 != nil:
    section.add "X-Amz-Security-Token", valid_616625
  var valid_616626 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616626 = validateParameter(valid_616626, JString, required = false,
                                 default = nil)
  if valid_616626 != nil:
    section.add "X-Amz-Content-Sha256", valid_616626
  var valid_616627 = header.getOrDefault("X-Amz-Algorithm")
  valid_616627 = validateParameter(valid_616627, JString, required = false,
                                 default = nil)
  if valid_616627 != nil:
    section.add "X-Amz-Algorithm", valid_616627
  var valid_616628 = header.getOrDefault("X-Amz-Signature")
  valid_616628 = validateParameter(valid_616628, JString, required = false,
                                 default = nil)
  if valid_616628 != nil:
    section.add "X-Amz-Signature", valid_616628
  var valid_616629 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616629 = validateParameter(valid_616629, JString, required = false,
                                 default = nil)
  if valid_616629 != nil:
    section.add "X-Amz-SignedHeaders", valid_616629
  var valid_616630 = header.getOrDefault("X-Amz-Credential")
  valid_616630 = validateParameter(valid_616630, JString, required = false,
                                 default = nil)
  if valid_616630 != nil:
    section.add "X-Amz-Credential", valid_616630
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScheduledUpdateGroupActions: JArray (required)
  ##                              : One or more scheduled actions. The maximum number allowed is 50.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_616631 = formData.getOrDefault("AutoScalingGroupName")
  valid_616631 = validateParameter(valid_616631, JString, required = true,
                                 default = nil)
  if valid_616631 != nil:
    section.add "AutoScalingGroupName", valid_616631
  var valid_616632 = formData.getOrDefault("ScheduledUpdateGroupActions")
  valid_616632 = validateParameter(valid_616632, JArray, required = true, default = nil)
  if valid_616632 != nil:
    section.add "ScheduledUpdateGroupActions", valid_616632
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616633: Call_PostBatchPutScheduledUpdateGroupAction_616619;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates or updates one or more scheduled scaling actions for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.
  ## 
  let valid = call_616633.validator(path, query, header, formData, body)
  let scheme = call_616633.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616633.url(scheme.get, call_616633.host, call_616633.base,
                         call_616633.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616633, url, valid)

proc call*(call_616634: Call_PostBatchPutScheduledUpdateGroupAction_616619;
          AutoScalingGroupName: string; ScheduledUpdateGroupActions: JsonNode;
          Action: string = "BatchPutScheduledUpdateGroupAction";
          Version: string = "2011-01-01"): Recallable =
  ## postBatchPutScheduledUpdateGroupAction
  ## Creates or updates one or more scheduled scaling actions for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScheduledUpdateGroupActions: JArray (required)
  ##                              : One or more scheduled actions. The maximum number allowed is 50.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616635 = newJObject()
  var formData_616636 = newJObject()
  add(formData_616636, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if ScheduledUpdateGroupActions != nil:
    formData_616636.add "ScheduledUpdateGroupActions", ScheduledUpdateGroupActions
  add(query_616635, "Action", newJString(Action))
  add(query_616635, "Version", newJString(Version))
  result = call_616634.call(nil, query_616635, nil, formData_616636, nil)

var postBatchPutScheduledUpdateGroupAction* = Call_PostBatchPutScheduledUpdateGroupAction_616619(
    name: "postBatchPutScheduledUpdateGroupAction", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=BatchPutScheduledUpdateGroupAction",
    validator: validate_PostBatchPutScheduledUpdateGroupAction_616620, base: "/",
    url: url_PostBatchPutScheduledUpdateGroupAction_616621,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBatchPutScheduledUpdateGroupAction_616602 = ref object of OpenApiRestCall_615866
proc url_GetBatchPutScheduledUpdateGroupAction_616604(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetBatchPutScheduledUpdateGroupAction_616603(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates or updates one or more scheduled scaling actions for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   ScheduledUpdateGroupActions: JArray (required)
  ##                              : One or more scheduled actions. The maximum number allowed is 50.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_616605 = query.getOrDefault("AutoScalingGroupName")
  valid_616605 = validateParameter(valid_616605, JString, required = true,
                                 default = nil)
  if valid_616605 != nil:
    section.add "AutoScalingGroupName", valid_616605
  var valid_616606 = query.getOrDefault("Action")
  valid_616606 = validateParameter(valid_616606, JString, required = true, default = newJString(
      "BatchPutScheduledUpdateGroupAction"))
  if valid_616606 != nil:
    section.add "Action", valid_616606
  var valid_616607 = query.getOrDefault("ScheduledUpdateGroupActions")
  valid_616607 = validateParameter(valid_616607, JArray, required = true, default = nil)
  if valid_616607 != nil:
    section.add "ScheduledUpdateGroupActions", valid_616607
  var valid_616608 = query.getOrDefault("Version")
  valid_616608 = validateParameter(valid_616608, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_616608 != nil:
    section.add "Version", valid_616608
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_616609 = header.getOrDefault("X-Amz-Date")
  valid_616609 = validateParameter(valid_616609, JString, required = false,
                                 default = nil)
  if valid_616609 != nil:
    section.add "X-Amz-Date", valid_616609
  var valid_616610 = header.getOrDefault("X-Amz-Security-Token")
  valid_616610 = validateParameter(valid_616610, JString, required = false,
                                 default = nil)
  if valid_616610 != nil:
    section.add "X-Amz-Security-Token", valid_616610
  var valid_616611 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616611 = validateParameter(valid_616611, JString, required = false,
                                 default = nil)
  if valid_616611 != nil:
    section.add "X-Amz-Content-Sha256", valid_616611
  var valid_616612 = header.getOrDefault("X-Amz-Algorithm")
  valid_616612 = validateParameter(valid_616612, JString, required = false,
                                 default = nil)
  if valid_616612 != nil:
    section.add "X-Amz-Algorithm", valid_616612
  var valid_616613 = header.getOrDefault("X-Amz-Signature")
  valid_616613 = validateParameter(valid_616613, JString, required = false,
                                 default = nil)
  if valid_616613 != nil:
    section.add "X-Amz-Signature", valid_616613
  var valid_616614 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616614 = validateParameter(valid_616614, JString, required = false,
                                 default = nil)
  if valid_616614 != nil:
    section.add "X-Amz-SignedHeaders", valid_616614
  var valid_616615 = header.getOrDefault("X-Amz-Credential")
  valid_616615 = validateParameter(valid_616615, JString, required = false,
                                 default = nil)
  if valid_616615 != nil:
    section.add "X-Amz-Credential", valid_616615
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616616: Call_GetBatchPutScheduledUpdateGroupAction_616602;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates or updates one or more scheduled scaling actions for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.
  ## 
  let valid = call_616616.validator(path, query, header, formData, body)
  let scheme = call_616616.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616616.url(scheme.get, call_616616.host, call_616616.base,
                         call_616616.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616616, url, valid)

proc call*(call_616617: Call_GetBatchPutScheduledUpdateGroupAction_616602;
          AutoScalingGroupName: string; ScheduledUpdateGroupActions: JsonNode;
          Action: string = "BatchPutScheduledUpdateGroupAction";
          Version: string = "2011-01-01"): Recallable =
  ## getBatchPutScheduledUpdateGroupAction
  ## Creates or updates one or more scheduled scaling actions for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   ScheduledUpdateGroupActions: JArray (required)
  ##                              : One or more scheduled actions. The maximum number allowed is 50.
  ##   Version: string (required)
  var query_616618 = newJObject()
  add(query_616618, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_616618, "Action", newJString(Action))
  if ScheduledUpdateGroupActions != nil:
    query_616618.add "ScheduledUpdateGroupActions", ScheduledUpdateGroupActions
  add(query_616618, "Version", newJString(Version))
  result = call_616617.call(nil, query_616618, nil, nil, nil)

var getBatchPutScheduledUpdateGroupAction* = Call_GetBatchPutScheduledUpdateGroupAction_616602(
    name: "getBatchPutScheduledUpdateGroupAction", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=BatchPutScheduledUpdateGroupAction",
    validator: validate_GetBatchPutScheduledUpdateGroupAction_616603, base: "/",
    url: url_GetBatchPutScheduledUpdateGroupAction_616604,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCompleteLifecycleAction_616657 = ref object of OpenApiRestCall_615866
proc url_PostCompleteLifecycleAction_616659(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCompleteLifecycleAction_616658(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Completes the lifecycle action for the specified token or instance with the specified result.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</p> </li> <li> <p> <b>If you finish before the timeout period ends, complete the lifecycle action.</b> </p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616660 = query.getOrDefault("Action")
  valid_616660 = validateParameter(valid_616660, JString, required = true, default = newJString(
      "CompleteLifecycleAction"))
  if valid_616660 != nil:
    section.add "Action", valid_616660
  var valid_616661 = query.getOrDefault("Version")
  valid_616661 = validateParameter(valid_616661, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_616661 != nil:
    section.add "Version", valid_616661
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_616662 = header.getOrDefault("X-Amz-Date")
  valid_616662 = validateParameter(valid_616662, JString, required = false,
                                 default = nil)
  if valid_616662 != nil:
    section.add "X-Amz-Date", valid_616662
  var valid_616663 = header.getOrDefault("X-Amz-Security-Token")
  valid_616663 = validateParameter(valid_616663, JString, required = false,
                                 default = nil)
  if valid_616663 != nil:
    section.add "X-Amz-Security-Token", valid_616663
  var valid_616664 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616664 = validateParameter(valid_616664, JString, required = false,
                                 default = nil)
  if valid_616664 != nil:
    section.add "X-Amz-Content-Sha256", valid_616664
  var valid_616665 = header.getOrDefault("X-Amz-Algorithm")
  valid_616665 = validateParameter(valid_616665, JString, required = false,
                                 default = nil)
  if valid_616665 != nil:
    section.add "X-Amz-Algorithm", valid_616665
  var valid_616666 = header.getOrDefault("X-Amz-Signature")
  valid_616666 = validateParameter(valid_616666, JString, required = false,
                                 default = nil)
  if valid_616666 != nil:
    section.add "X-Amz-Signature", valid_616666
  var valid_616667 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616667 = validateParameter(valid_616667, JString, required = false,
                                 default = nil)
  if valid_616667 != nil:
    section.add "X-Amz-SignedHeaders", valid_616667
  var valid_616668 = header.getOrDefault("X-Amz-Credential")
  valid_616668 = validateParameter(valid_616668, JString, required = false,
                                 default = nil)
  if valid_616668 != nil:
    section.add "X-Amz-Credential", valid_616668
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleActionResult: JString (required)
  ##                        : The action for the group to take. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>.
  ##   InstanceId: JString
  ##             : The ID of the instance.
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   LifecycleActionToken: JString
  ##                       : A universally unique identifier (UUID) that identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target you specified when you created the lifecycle hook.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_616669 = formData.getOrDefault("AutoScalingGroupName")
  valid_616669 = validateParameter(valid_616669, JString, required = true,
                                 default = nil)
  if valid_616669 != nil:
    section.add "AutoScalingGroupName", valid_616669
  var valid_616670 = formData.getOrDefault("LifecycleActionResult")
  valid_616670 = validateParameter(valid_616670, JString, required = true,
                                 default = nil)
  if valid_616670 != nil:
    section.add "LifecycleActionResult", valid_616670
  var valid_616671 = formData.getOrDefault("InstanceId")
  valid_616671 = validateParameter(valid_616671, JString, required = false,
                                 default = nil)
  if valid_616671 != nil:
    section.add "InstanceId", valid_616671
  var valid_616672 = formData.getOrDefault("LifecycleHookName")
  valid_616672 = validateParameter(valid_616672, JString, required = true,
                                 default = nil)
  if valid_616672 != nil:
    section.add "LifecycleHookName", valid_616672
  var valid_616673 = formData.getOrDefault("LifecycleActionToken")
  valid_616673 = validateParameter(valid_616673, JString, required = false,
                                 default = nil)
  if valid_616673 != nil:
    section.add "LifecycleActionToken", valid_616673
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616674: Call_PostCompleteLifecycleAction_616657; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Completes the lifecycle action for the specified token or instance with the specified result.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</p> </li> <li> <p> <b>If you finish before the timeout period ends, complete the lifecycle action.</b> </p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_616674.validator(path, query, header, formData, body)
  let scheme = call_616674.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616674.url(scheme.get, call_616674.host, call_616674.base,
                         call_616674.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616674, url, valid)

proc call*(call_616675: Call_PostCompleteLifecycleAction_616657;
          AutoScalingGroupName: string; LifecycleActionResult: string;
          LifecycleHookName: string; Action: string = "CompleteLifecycleAction";
          InstanceId: string = ""; Version: string = "2011-01-01";
          LifecycleActionToken: string = ""): Recallable =
  ## postCompleteLifecycleAction
  ## <p>Completes the lifecycle action for the specified token or instance with the specified result.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</p> </li> <li> <p> <b>If you finish before the timeout period ends, complete the lifecycle action.</b> </p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleActionResult: string (required)
  ##                        : The action for the group to take. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>.
  ##   Action: string (required)
  ##   InstanceId: string
  ##             : The ID of the instance.
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   Version: string (required)
  ##   LifecycleActionToken: string
  ##                       : A universally unique identifier (UUID) that identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target you specified when you created the lifecycle hook.
  var query_616676 = newJObject()
  var formData_616677 = newJObject()
  add(formData_616677, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_616677, "LifecycleActionResult", newJString(LifecycleActionResult))
  add(query_616676, "Action", newJString(Action))
  add(formData_616677, "InstanceId", newJString(InstanceId))
  add(formData_616677, "LifecycleHookName", newJString(LifecycleHookName))
  add(query_616676, "Version", newJString(Version))
  add(formData_616677, "LifecycleActionToken", newJString(LifecycleActionToken))
  result = call_616675.call(nil, query_616676, nil, formData_616677, nil)

var postCompleteLifecycleAction* = Call_PostCompleteLifecycleAction_616657(
    name: "postCompleteLifecycleAction", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=CompleteLifecycleAction",
    validator: validate_PostCompleteLifecycleAction_616658, base: "/",
    url: url_PostCompleteLifecycleAction_616659,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCompleteLifecycleAction_616637 = ref object of OpenApiRestCall_615866
proc url_GetCompleteLifecycleAction_616639(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCompleteLifecycleAction_616638(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Completes the lifecycle action for the specified token or instance with the specified result.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</p> </li> <li> <p> <b>If you finish before the timeout period ends, complete the lifecycle action.</b> </p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   LifecycleActionResult: JString (required)
  ##                        : The action for the group to take. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   InstanceId: JString
  ##             : The ID of the instance.
  ##   Version: JString (required)
  ##   LifecycleActionToken: JString
  ##                       : A universally unique identifier (UUID) that identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target you specified when you created the lifecycle hook.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `LifecycleActionResult` field"
  var valid_616640 = query.getOrDefault("LifecycleActionResult")
  valid_616640 = validateParameter(valid_616640, JString, required = true,
                                 default = nil)
  if valid_616640 != nil:
    section.add "LifecycleActionResult", valid_616640
  var valid_616641 = query.getOrDefault("AutoScalingGroupName")
  valid_616641 = validateParameter(valid_616641, JString, required = true,
                                 default = nil)
  if valid_616641 != nil:
    section.add "AutoScalingGroupName", valid_616641
  var valid_616642 = query.getOrDefault("Action")
  valid_616642 = validateParameter(valid_616642, JString, required = true, default = newJString(
      "CompleteLifecycleAction"))
  if valid_616642 != nil:
    section.add "Action", valid_616642
  var valid_616643 = query.getOrDefault("LifecycleHookName")
  valid_616643 = validateParameter(valid_616643, JString, required = true,
                                 default = nil)
  if valid_616643 != nil:
    section.add "LifecycleHookName", valid_616643
  var valid_616644 = query.getOrDefault("InstanceId")
  valid_616644 = validateParameter(valid_616644, JString, required = false,
                                 default = nil)
  if valid_616644 != nil:
    section.add "InstanceId", valid_616644
  var valid_616645 = query.getOrDefault("Version")
  valid_616645 = validateParameter(valid_616645, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_616645 != nil:
    section.add "Version", valid_616645
  var valid_616646 = query.getOrDefault("LifecycleActionToken")
  valid_616646 = validateParameter(valid_616646, JString, required = false,
                                 default = nil)
  if valid_616646 != nil:
    section.add "LifecycleActionToken", valid_616646
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_616647 = header.getOrDefault("X-Amz-Date")
  valid_616647 = validateParameter(valid_616647, JString, required = false,
                                 default = nil)
  if valid_616647 != nil:
    section.add "X-Amz-Date", valid_616647
  var valid_616648 = header.getOrDefault("X-Amz-Security-Token")
  valid_616648 = validateParameter(valid_616648, JString, required = false,
                                 default = nil)
  if valid_616648 != nil:
    section.add "X-Amz-Security-Token", valid_616648
  var valid_616649 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616649 = validateParameter(valid_616649, JString, required = false,
                                 default = nil)
  if valid_616649 != nil:
    section.add "X-Amz-Content-Sha256", valid_616649
  var valid_616650 = header.getOrDefault("X-Amz-Algorithm")
  valid_616650 = validateParameter(valid_616650, JString, required = false,
                                 default = nil)
  if valid_616650 != nil:
    section.add "X-Amz-Algorithm", valid_616650
  var valid_616651 = header.getOrDefault("X-Amz-Signature")
  valid_616651 = validateParameter(valid_616651, JString, required = false,
                                 default = nil)
  if valid_616651 != nil:
    section.add "X-Amz-Signature", valid_616651
  var valid_616652 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616652 = validateParameter(valid_616652, JString, required = false,
                                 default = nil)
  if valid_616652 != nil:
    section.add "X-Amz-SignedHeaders", valid_616652
  var valid_616653 = header.getOrDefault("X-Amz-Credential")
  valid_616653 = validateParameter(valid_616653, JString, required = false,
                                 default = nil)
  if valid_616653 != nil:
    section.add "X-Amz-Credential", valid_616653
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616654: Call_GetCompleteLifecycleAction_616637; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Completes the lifecycle action for the specified token or instance with the specified result.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</p> </li> <li> <p> <b>If you finish before the timeout period ends, complete the lifecycle action.</b> </p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_616654.validator(path, query, header, formData, body)
  let scheme = call_616654.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616654.url(scheme.get, call_616654.host, call_616654.base,
                         call_616654.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616654, url, valid)

proc call*(call_616655: Call_GetCompleteLifecycleAction_616637;
          LifecycleActionResult: string; AutoScalingGroupName: string;
          LifecycleHookName: string; Action: string = "CompleteLifecycleAction";
          InstanceId: string = ""; Version: string = "2011-01-01";
          LifecycleActionToken: string = ""): Recallable =
  ## getCompleteLifecycleAction
  ## <p>Completes the lifecycle action for the specified token or instance with the specified result.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</p> </li> <li> <p> <b>If you finish before the timeout period ends, complete the lifecycle action.</b> </p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LifecycleActionResult: string (required)
  ##                        : The action for the group to take. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   InstanceId: string
  ##             : The ID of the instance.
  ##   Version: string (required)
  ##   LifecycleActionToken: string
  ##                       : A universally unique identifier (UUID) that identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target you specified when you created the lifecycle hook.
  var query_616656 = newJObject()
  add(query_616656, "LifecycleActionResult", newJString(LifecycleActionResult))
  add(query_616656, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_616656, "Action", newJString(Action))
  add(query_616656, "LifecycleHookName", newJString(LifecycleHookName))
  add(query_616656, "InstanceId", newJString(InstanceId))
  add(query_616656, "Version", newJString(Version))
  add(query_616656, "LifecycleActionToken", newJString(LifecycleActionToken))
  result = call_616655.call(nil, query_616656, nil, nil, nil)

var getCompleteLifecycleAction* = Call_GetCompleteLifecycleAction_616637(
    name: "getCompleteLifecycleAction", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=CompleteLifecycleAction",
    validator: validate_GetCompleteLifecycleAction_616638, base: "/",
    url: url_GetCompleteLifecycleAction_616639,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateAutoScalingGroup_616718 = ref object of OpenApiRestCall_615866
proc url_PostCreateAutoScalingGroup_616720(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateAutoScalingGroup_616719(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an Auto Scaling group with the specified name and attributes.</p> <p>If you exceed your maximum limit of Auto Scaling groups, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Service Quotas</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616721 = query.getOrDefault("Action")
  valid_616721 = validateParameter(valid_616721, JString, required = true,
                                 default = newJString("CreateAutoScalingGroup"))
  if valid_616721 != nil:
    section.add "Action", valid_616721
  var valid_616722 = query.getOrDefault("Version")
  valid_616722 = validateParameter(valid_616722, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_616722 != nil:
    section.add "Version", valid_616722
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_616723 = header.getOrDefault("X-Amz-Date")
  valid_616723 = validateParameter(valid_616723, JString, required = false,
                                 default = nil)
  if valid_616723 != nil:
    section.add "X-Amz-Date", valid_616723
  var valid_616724 = header.getOrDefault("X-Amz-Security-Token")
  valid_616724 = validateParameter(valid_616724, JString, required = false,
                                 default = nil)
  if valid_616724 != nil:
    section.add "X-Amz-Security-Token", valid_616724
  var valid_616725 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616725 = validateParameter(valid_616725, JString, required = false,
                                 default = nil)
  if valid_616725 != nil:
    section.add "X-Amz-Content-Sha256", valid_616725
  var valid_616726 = header.getOrDefault("X-Amz-Algorithm")
  valid_616726 = validateParameter(valid_616726, JString, required = false,
                                 default = nil)
  if valid_616726 != nil:
    section.add "X-Amz-Algorithm", valid_616726
  var valid_616727 = header.getOrDefault("X-Amz-Signature")
  valid_616727 = validateParameter(valid_616727, JString, required = false,
                                 default = nil)
  if valid_616727 != nil:
    section.add "X-Amz-Signature", valid_616727
  var valid_616728 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616728 = validateParameter(valid_616728, JString, required = false,
                                 default = nil)
  if valid_616728 != nil:
    section.add "X-Amz-SignedHeaders", valid_616728
  var valid_616729 = header.getOrDefault("X-Amz-Credential")
  valid_616729 = validateParameter(valid_616729, JString, required = false,
                                 default = nil)
  if valid_616729 != nil:
    section.add "X-Amz-Credential", valid_616729
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group. This name must be unique per Region per account.
  ##   PlacementGroup: JString
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   LaunchConfigurationName: JString
  ##                          : <p>The name of the launch configuration.</p> <p>If you do not specify <code>LaunchConfigurationName</code>, you must specify one of the following parameters: <code>InstanceId</code>, <code>LaunchTemplate</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   HealthCheckType: JString
  ##                  : <p>The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. The default value is <code>EC2</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   HealthCheckGracePeriod: JInt
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. During this time, any health check failures for the instance are ignored. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   DesiredCapacity: JInt
  ##                  : The number of Amazon EC2 instances that the Auto Scaling group attempts to maintain. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group. If you do not specify a desired capacity, the default is the minimum size of the group.
  ##   Tags: JArray
  ##       : <p>One or more tags.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   VPCZoneIdentifier: JString
  ##                    : <p>A comma-separated list of subnet IDs for your virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into a VPC.</p>
  ##   TargetGroupARNs: JArray
  ##                  : <p>The Amazon Resource Names (ARN) of the target groups to associate with the Auto Scaling group. Instances are registered as targets in a target group, and traffic is routed to the target group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AvailabilityZones: JArray
  ##                    : <p>One or more Availability Zones for the group. This parameter is optional if you specify one or more subnets for <code>VPCZoneIdentifier</code>.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into EC2-Classic.</p>
  ##   InstanceId: JString
  ##             : <p>The ID of the instance used to create a launch configuration for the group.</p> <p>When you specify an ID of an instance, Amazon EC2 Auto Scaling creates a new launch configuration and associates it with the group. This launch configuration derives its attributes from the specified instance, except for the block device mapping.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-from-instance.html">Create an Auto Scaling Group Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You must specify one of the following parameters in your request: <code>LaunchConfigurationName</code>, <code>LaunchTemplate</code>, <code>InstanceId</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   DefaultCooldown: JInt
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MinSize: JInt (required)
  ##          : The minimum size of the group.
  ##   MaxInstanceLifetime: JInt
  ##                      : <p>The maximum amount of time, in seconds, that an instance can be in service.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-max-instance-lifetime.html">Replacing Auto Scaling Instances Based on Maximum Instance Lifetime</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Valid Range: Minimum value of 604800.</p>
  ##   MaxSize: JInt (required)
  ##          : The maximum size of the group.
  ##   ServiceLinkedRoleARN: JString
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. By default, Amazon EC2 Auto Scaling uses a service-linked role named AWSServiceRoleForAutoScaling, which it creates if it does not exist. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   MixedInstancesPolicy.InstancesDistribution: JString
  ##                                             : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified, the value for each parameter in <code>InstancesDistribution</code> uses a default value.</p>
  ##   NewInstancesProtectedFromScaleIn: JBool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LaunchTemplate.LaunchTemplateId: JString
  ##                                  : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  ##   LaunchTemplate.Version: JString
  ##                         : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   TerminationPolicies: JArray
  ##                      : <p>One or more termination policies used to select the instance to terminate. These policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MixedInstancesPolicy.LaunchTemplate: JString
  ##                                      : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   LoadBalancerNames: JArray
  ##                    : <p>A list of Classic Load Balancers associated with this Auto Scaling group. For Application Load Balancers and Network Load Balancers, specify a list of target groups using the <code>TargetGroupARNs</code> property instead.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LaunchTemplate.LaunchTemplateName: JString
  ##                                    : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   LifecycleHookSpecificationList: JArray
  ##                                 : One or more lifecycle hooks.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_616730 = formData.getOrDefault("AutoScalingGroupName")
  valid_616730 = validateParameter(valid_616730, JString, required = true,
                                 default = nil)
  if valid_616730 != nil:
    section.add "AutoScalingGroupName", valid_616730
  var valid_616731 = formData.getOrDefault("PlacementGroup")
  valid_616731 = validateParameter(valid_616731, JString, required = false,
                                 default = nil)
  if valid_616731 != nil:
    section.add "PlacementGroup", valid_616731
  var valid_616732 = formData.getOrDefault("LaunchConfigurationName")
  valid_616732 = validateParameter(valid_616732, JString, required = false,
                                 default = nil)
  if valid_616732 != nil:
    section.add "LaunchConfigurationName", valid_616732
  var valid_616733 = formData.getOrDefault("HealthCheckType")
  valid_616733 = validateParameter(valid_616733, JString, required = false,
                                 default = nil)
  if valid_616733 != nil:
    section.add "HealthCheckType", valid_616733
  var valid_616734 = formData.getOrDefault("HealthCheckGracePeriod")
  valid_616734 = validateParameter(valid_616734, JInt, required = false, default = nil)
  if valid_616734 != nil:
    section.add "HealthCheckGracePeriod", valid_616734
  var valid_616735 = formData.getOrDefault("DesiredCapacity")
  valid_616735 = validateParameter(valid_616735, JInt, required = false, default = nil)
  if valid_616735 != nil:
    section.add "DesiredCapacity", valid_616735
  var valid_616736 = formData.getOrDefault("Tags")
  valid_616736 = validateParameter(valid_616736, JArray, required = false,
                                 default = nil)
  if valid_616736 != nil:
    section.add "Tags", valid_616736
  var valid_616737 = formData.getOrDefault("VPCZoneIdentifier")
  valid_616737 = validateParameter(valid_616737, JString, required = false,
                                 default = nil)
  if valid_616737 != nil:
    section.add "VPCZoneIdentifier", valid_616737
  var valid_616738 = formData.getOrDefault("TargetGroupARNs")
  valid_616738 = validateParameter(valid_616738, JArray, required = false,
                                 default = nil)
  if valid_616738 != nil:
    section.add "TargetGroupARNs", valid_616738
  var valid_616739 = formData.getOrDefault("AvailabilityZones")
  valid_616739 = validateParameter(valid_616739, JArray, required = false,
                                 default = nil)
  if valid_616739 != nil:
    section.add "AvailabilityZones", valid_616739
  var valid_616740 = formData.getOrDefault("InstanceId")
  valid_616740 = validateParameter(valid_616740, JString, required = false,
                                 default = nil)
  if valid_616740 != nil:
    section.add "InstanceId", valid_616740
  var valid_616741 = formData.getOrDefault("DefaultCooldown")
  valid_616741 = validateParameter(valid_616741, JInt, required = false, default = nil)
  if valid_616741 != nil:
    section.add "DefaultCooldown", valid_616741
  var valid_616742 = formData.getOrDefault("MinSize")
  valid_616742 = validateParameter(valid_616742, JInt, required = true, default = nil)
  if valid_616742 != nil:
    section.add "MinSize", valid_616742
  var valid_616743 = formData.getOrDefault("MaxInstanceLifetime")
  valid_616743 = validateParameter(valid_616743, JInt, required = false, default = nil)
  if valid_616743 != nil:
    section.add "MaxInstanceLifetime", valid_616743
  var valid_616744 = formData.getOrDefault("MaxSize")
  valid_616744 = validateParameter(valid_616744, JInt, required = true, default = nil)
  if valid_616744 != nil:
    section.add "MaxSize", valid_616744
  var valid_616745 = formData.getOrDefault("ServiceLinkedRoleARN")
  valid_616745 = validateParameter(valid_616745, JString, required = false,
                                 default = nil)
  if valid_616745 != nil:
    section.add "ServiceLinkedRoleARN", valid_616745
  var valid_616746 = formData.getOrDefault("MixedInstancesPolicy.InstancesDistribution")
  valid_616746 = validateParameter(valid_616746, JString, required = false,
                                 default = nil)
  if valid_616746 != nil:
    section.add "MixedInstancesPolicy.InstancesDistribution", valid_616746
  var valid_616747 = formData.getOrDefault("NewInstancesProtectedFromScaleIn")
  valid_616747 = validateParameter(valid_616747, JBool, required = false, default = nil)
  if valid_616747 != nil:
    section.add "NewInstancesProtectedFromScaleIn", valid_616747
  var valid_616748 = formData.getOrDefault("LaunchTemplate.LaunchTemplateId")
  valid_616748 = validateParameter(valid_616748, JString, required = false,
                                 default = nil)
  if valid_616748 != nil:
    section.add "LaunchTemplate.LaunchTemplateId", valid_616748
  var valid_616749 = formData.getOrDefault("LaunchTemplate.Version")
  valid_616749 = validateParameter(valid_616749, JString, required = false,
                                 default = nil)
  if valid_616749 != nil:
    section.add "LaunchTemplate.Version", valid_616749
  var valid_616750 = formData.getOrDefault("TerminationPolicies")
  valid_616750 = validateParameter(valid_616750, JArray, required = false,
                                 default = nil)
  if valid_616750 != nil:
    section.add "TerminationPolicies", valid_616750
  var valid_616751 = formData.getOrDefault("MixedInstancesPolicy.LaunchTemplate")
  valid_616751 = validateParameter(valid_616751, JString, required = false,
                                 default = nil)
  if valid_616751 != nil:
    section.add "MixedInstancesPolicy.LaunchTemplate", valid_616751
  var valid_616752 = formData.getOrDefault("LoadBalancerNames")
  valid_616752 = validateParameter(valid_616752, JArray, required = false,
                                 default = nil)
  if valid_616752 != nil:
    section.add "LoadBalancerNames", valid_616752
  var valid_616753 = formData.getOrDefault("LaunchTemplate.LaunchTemplateName")
  valid_616753 = validateParameter(valid_616753, JString, required = false,
                                 default = nil)
  if valid_616753 != nil:
    section.add "LaunchTemplate.LaunchTemplateName", valid_616753
  var valid_616754 = formData.getOrDefault("LifecycleHookSpecificationList")
  valid_616754 = validateParameter(valid_616754, JArray, required = false,
                                 default = nil)
  if valid_616754 != nil:
    section.add "LifecycleHookSpecificationList", valid_616754
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616755: Call_PostCreateAutoScalingGroup_616718; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an Auto Scaling group with the specified name and attributes.</p> <p>If you exceed your maximum limit of Auto Scaling groups, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Service Quotas</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_616755.validator(path, query, header, formData, body)
  let scheme = call_616755.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616755.url(scheme.get, call_616755.host, call_616755.base,
                         call_616755.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616755, url, valid)

proc call*(call_616756: Call_PostCreateAutoScalingGroup_616718;
          AutoScalingGroupName: string; MinSize: int; MaxSize: int;
          PlacementGroup: string = ""; LaunchConfigurationName: string = "";
          HealthCheckType: string = ""; HealthCheckGracePeriod: int = 0;
          DesiredCapacity: int = 0; Tags: JsonNode = nil;
          VPCZoneIdentifier: string = ""; TargetGroupARNs: JsonNode = nil;
          Action: string = "CreateAutoScalingGroup";
          AvailabilityZones: JsonNode = nil; InstanceId: string = "";
          DefaultCooldown: int = 0; MaxInstanceLifetime: int = 0;
          ServiceLinkedRoleARN: string = "";
          MixedInstancesPolicyInstancesDistribution: string = "";
          NewInstancesProtectedFromScaleIn: bool = false;
          LaunchTemplateLaunchTemplateId: string = "";
          LaunchTemplateVersion: string = ""; TerminationPolicies: JsonNode = nil;
          Version: string = "2011-01-01";
          MixedInstancesPolicyLaunchTemplate: string = "";
          LoadBalancerNames: JsonNode = nil;
          LaunchTemplateLaunchTemplateName: string = "";
          LifecycleHookSpecificationList: JsonNode = nil): Recallable =
  ## postCreateAutoScalingGroup
  ## <p>Creates an Auto Scaling group with the specified name and attributes.</p> <p>If you exceed your maximum limit of Auto Scaling groups, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Service Quotas</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group. This name must be unique per Region per account.
  ##   PlacementGroup: string
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   LaunchConfigurationName: string
  ##                          : <p>The name of the launch configuration.</p> <p>If you do not specify <code>LaunchConfigurationName</code>, you must specify one of the following parameters: <code>InstanceId</code>, <code>LaunchTemplate</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   HealthCheckType: string
  ##                  : <p>The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. The default value is <code>EC2</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   HealthCheckGracePeriod: int
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. During this time, any health check failures for the instance are ignored. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   DesiredCapacity: int
  ##                  : The number of Amazon EC2 instances that the Auto Scaling group attempts to maintain. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group. If you do not specify a desired capacity, the default is the minimum size of the group.
  ##   Tags: JArray
  ##       : <p>One or more tags.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   VPCZoneIdentifier: string
  ##                    : <p>A comma-separated list of subnet IDs for your virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into a VPC.</p>
  ##   TargetGroupARNs: JArray
  ##                  : <p>The Amazon Resource Names (ARN) of the target groups to associate with the Auto Scaling group. Instances are registered as targets in a target group, and traffic is routed to the target group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   AvailabilityZones: JArray
  ##                    : <p>One or more Availability Zones for the group. This parameter is optional if you specify one or more subnets for <code>VPCZoneIdentifier</code>.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into EC2-Classic.</p>
  ##   InstanceId: string
  ##             : <p>The ID of the instance used to create a launch configuration for the group.</p> <p>When you specify an ID of an instance, Amazon EC2 Auto Scaling creates a new launch configuration and associates it with the group. This launch configuration derives its attributes from the specified instance, except for the block device mapping.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-from-instance.html">Create an Auto Scaling Group Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You must specify one of the following parameters in your request: <code>LaunchConfigurationName</code>, <code>LaunchTemplate</code>, <code>InstanceId</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   DefaultCooldown: int
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MinSize: int (required)
  ##          : The minimum size of the group.
  ##   MaxInstanceLifetime: int
  ##                      : <p>The maximum amount of time, in seconds, that an instance can be in service.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-max-instance-lifetime.html">Replacing Auto Scaling Instances Based on Maximum Instance Lifetime</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Valid Range: Minimum value of 604800.</p>
  ##   MaxSize: int (required)
  ##          : The maximum size of the group.
  ##   ServiceLinkedRoleARN: string
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. By default, Amazon EC2 Auto Scaling uses a service-linked role named AWSServiceRoleForAutoScaling, which it creates if it does not exist. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   MixedInstancesPolicyInstancesDistribution: string
  ##                                            : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified, the value for each parameter in <code>InstancesDistribution</code> uses a default value.</p>
  ##   NewInstancesProtectedFromScaleIn: bool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LaunchTemplateLaunchTemplateId: string
  ##                                 : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  ##   LaunchTemplateVersion: string
  ##                        : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   TerminationPolicies: JArray
  ##                      : <p>One or more termination policies used to select the instance to terminate. These policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Version: string (required)
  ##   MixedInstancesPolicyLaunchTemplate: string
  ##                                     : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   LoadBalancerNames: JArray
  ##                    : <p>A list of Classic Load Balancers associated with this Auto Scaling group. For Application Load Balancers and Network Load Balancers, specify a list of target groups using the <code>TargetGroupARNs</code> property instead.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LaunchTemplateLaunchTemplateName: string
  ##                                   : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   LifecycleHookSpecificationList: JArray
  ##                                 : One or more lifecycle hooks.
  var query_616757 = newJObject()
  var formData_616758 = newJObject()
  add(formData_616758, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_616758, "PlacementGroup", newJString(PlacementGroup))
  add(formData_616758, "LaunchConfigurationName",
      newJString(LaunchConfigurationName))
  add(formData_616758, "HealthCheckType", newJString(HealthCheckType))
  add(formData_616758, "HealthCheckGracePeriod", newJInt(HealthCheckGracePeriod))
  add(formData_616758, "DesiredCapacity", newJInt(DesiredCapacity))
  if Tags != nil:
    formData_616758.add "Tags", Tags
  add(formData_616758, "VPCZoneIdentifier", newJString(VPCZoneIdentifier))
  if TargetGroupARNs != nil:
    formData_616758.add "TargetGroupARNs", TargetGroupARNs
  add(query_616757, "Action", newJString(Action))
  if AvailabilityZones != nil:
    formData_616758.add "AvailabilityZones", AvailabilityZones
  add(formData_616758, "InstanceId", newJString(InstanceId))
  add(formData_616758, "DefaultCooldown", newJInt(DefaultCooldown))
  add(formData_616758, "MinSize", newJInt(MinSize))
  add(formData_616758, "MaxInstanceLifetime", newJInt(MaxInstanceLifetime))
  add(formData_616758, "MaxSize", newJInt(MaxSize))
  add(formData_616758, "ServiceLinkedRoleARN", newJString(ServiceLinkedRoleARN))
  add(formData_616758, "MixedInstancesPolicy.InstancesDistribution",
      newJString(MixedInstancesPolicyInstancesDistribution))
  add(formData_616758, "NewInstancesProtectedFromScaleIn",
      newJBool(NewInstancesProtectedFromScaleIn))
  add(formData_616758, "LaunchTemplate.LaunchTemplateId",
      newJString(LaunchTemplateLaunchTemplateId))
  add(formData_616758, "LaunchTemplate.Version", newJString(LaunchTemplateVersion))
  if TerminationPolicies != nil:
    formData_616758.add "TerminationPolicies", TerminationPolicies
  add(query_616757, "Version", newJString(Version))
  add(formData_616758, "MixedInstancesPolicy.LaunchTemplate",
      newJString(MixedInstancesPolicyLaunchTemplate))
  if LoadBalancerNames != nil:
    formData_616758.add "LoadBalancerNames", LoadBalancerNames
  add(formData_616758, "LaunchTemplate.LaunchTemplateName",
      newJString(LaunchTemplateLaunchTemplateName))
  if LifecycleHookSpecificationList != nil:
    formData_616758.add "LifecycleHookSpecificationList",
                       LifecycleHookSpecificationList
  result = call_616756.call(nil, query_616757, nil, formData_616758, nil)

var postCreateAutoScalingGroup* = Call_PostCreateAutoScalingGroup_616718(
    name: "postCreateAutoScalingGroup", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=CreateAutoScalingGroup",
    validator: validate_PostCreateAutoScalingGroup_616719, base: "/",
    url: url_PostCreateAutoScalingGroup_616720,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateAutoScalingGroup_616678 = ref object of OpenApiRestCall_615866
proc url_GetCreateAutoScalingGroup_616680(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateAutoScalingGroup_616679(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an Auto Scaling group with the specified name and attributes.</p> <p>If you exceed your maximum limit of Auto Scaling groups, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Service Quotas</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   HealthCheckType: JString
  ##                  : <p>The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. The default value is <code>EC2</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   TerminationPolicies: JArray
  ##                      : <p>One or more termination policies used to select the instance to terminate. These policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   InstanceId: JString
  ##             : <p>The ID of the instance used to create a launch configuration for the group.</p> <p>When you specify an ID of an instance, Amazon EC2 Auto Scaling creates a new launch configuration and associates it with the group. This launch configuration derives its attributes from the specified instance, except for the block device mapping.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-from-instance.html">Create an Auto Scaling Group Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You must specify one of the following parameters in your request: <code>LaunchConfigurationName</code>, <code>LaunchTemplate</code>, <code>InstanceId</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   DesiredCapacity: JInt
  ##                  : The number of Amazon EC2 instances that the Auto Scaling group attempts to maintain. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group. If you do not specify a desired capacity, the default is the minimum size of the group.
  ##   LaunchTemplate.LaunchTemplateId: JString
  ##                                  : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  ##   AvailabilityZones: JArray
  ##                    : <p>One or more Availability Zones for the group. This parameter is optional if you specify one or more subnets for <code>VPCZoneIdentifier</code>.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into EC2-Classic.</p>
  ##   LaunchTemplate.LaunchTemplateName: JString
  ##                                    : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   VPCZoneIdentifier: JString
  ##                    : <p>A comma-separated list of subnet IDs for your virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into a VPC.</p>
  ##   DefaultCooldown: JInt
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MinSize: JInt (required)
  ##          : The minimum size of the group.
  ##   NewInstancesProtectedFromScaleIn: JBool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MixedInstancesPolicy.LaunchTemplate: JString
  ##                                      : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   LaunchConfigurationName: JString
  ##                          : <p>The name of the launch configuration.</p> <p>If you do not specify <code>LaunchConfigurationName</code>, you must specify one of the following parameters: <code>InstanceId</code>, <code>LaunchTemplate</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   Tags: JArray
  ##       : <p>One or more tags.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MaxInstanceLifetime: JInt
  ##                      : <p>The maximum amount of time, in seconds, that an instance can be in service.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-max-instance-lifetime.html">Replacing Auto Scaling Instances Based on Maximum Instance Lifetime</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Valid Range: Minimum value of 604800.</p>
  ##   Action: JString (required)
  ##   PlacementGroup: JString
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   HealthCheckGracePeriod: JInt
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. During this time, any health check failures for the instance are ignored. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   MixedInstancesPolicy.InstancesDistribution: JString
  ##                                             : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified, the value for each parameter in <code>InstancesDistribution</code> uses a default value.</p>
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group. This name must be unique per Region per account.
  ##   LaunchTemplate.Version: JString
  ##                         : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   TargetGroupARNs: JArray
  ##                  : <p>The Amazon Resource Names (ARN) of the target groups to associate with the Auto Scaling group. Instances are registered as targets in a target group, and traffic is routed to the target group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LoadBalancerNames: JArray
  ##                    : <p>A list of Classic Load Balancers associated with this Auto Scaling group. For Application Load Balancers and Network Load Balancers, specify a list of target groups using the <code>TargetGroupARNs</code> property instead.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MaxSize: JInt (required)
  ##          : The maximum size of the group.
  ##   Version: JString (required)
  ##   ServiceLinkedRoleARN: JString
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. By default, Amazon EC2 Auto Scaling uses a service-linked role named AWSServiceRoleForAutoScaling, which it creates if it does not exist. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   LifecycleHookSpecificationList: JArray
  ##                                 : One or more lifecycle hooks.
  section = newJObject()
  var valid_616681 = query.getOrDefault("HealthCheckType")
  valid_616681 = validateParameter(valid_616681, JString, required = false,
                                 default = nil)
  if valid_616681 != nil:
    section.add "HealthCheckType", valid_616681
  var valid_616682 = query.getOrDefault("TerminationPolicies")
  valid_616682 = validateParameter(valid_616682, JArray, required = false,
                                 default = nil)
  if valid_616682 != nil:
    section.add "TerminationPolicies", valid_616682
  var valid_616683 = query.getOrDefault("InstanceId")
  valid_616683 = validateParameter(valid_616683, JString, required = false,
                                 default = nil)
  if valid_616683 != nil:
    section.add "InstanceId", valid_616683
  var valid_616684 = query.getOrDefault("DesiredCapacity")
  valid_616684 = validateParameter(valid_616684, JInt, required = false, default = nil)
  if valid_616684 != nil:
    section.add "DesiredCapacity", valid_616684
  var valid_616685 = query.getOrDefault("LaunchTemplate.LaunchTemplateId")
  valid_616685 = validateParameter(valid_616685, JString, required = false,
                                 default = nil)
  if valid_616685 != nil:
    section.add "LaunchTemplate.LaunchTemplateId", valid_616685
  var valid_616686 = query.getOrDefault("AvailabilityZones")
  valid_616686 = validateParameter(valid_616686, JArray, required = false,
                                 default = nil)
  if valid_616686 != nil:
    section.add "AvailabilityZones", valid_616686
  var valid_616687 = query.getOrDefault("LaunchTemplate.LaunchTemplateName")
  valid_616687 = validateParameter(valid_616687, JString, required = false,
                                 default = nil)
  if valid_616687 != nil:
    section.add "LaunchTemplate.LaunchTemplateName", valid_616687
  var valid_616688 = query.getOrDefault("VPCZoneIdentifier")
  valid_616688 = validateParameter(valid_616688, JString, required = false,
                                 default = nil)
  if valid_616688 != nil:
    section.add "VPCZoneIdentifier", valid_616688
  var valid_616689 = query.getOrDefault("DefaultCooldown")
  valid_616689 = validateParameter(valid_616689, JInt, required = false, default = nil)
  if valid_616689 != nil:
    section.add "DefaultCooldown", valid_616689
  assert query != nil, "query argument is necessary due to required `MinSize` field"
  var valid_616690 = query.getOrDefault("MinSize")
  valid_616690 = validateParameter(valid_616690, JInt, required = true, default = nil)
  if valid_616690 != nil:
    section.add "MinSize", valid_616690
  var valid_616691 = query.getOrDefault("NewInstancesProtectedFromScaleIn")
  valid_616691 = validateParameter(valid_616691, JBool, required = false, default = nil)
  if valid_616691 != nil:
    section.add "NewInstancesProtectedFromScaleIn", valid_616691
  var valid_616692 = query.getOrDefault("MixedInstancesPolicy.LaunchTemplate")
  valid_616692 = validateParameter(valid_616692, JString, required = false,
                                 default = nil)
  if valid_616692 != nil:
    section.add "MixedInstancesPolicy.LaunchTemplate", valid_616692
  var valid_616693 = query.getOrDefault("LaunchConfigurationName")
  valid_616693 = validateParameter(valid_616693, JString, required = false,
                                 default = nil)
  if valid_616693 != nil:
    section.add "LaunchConfigurationName", valid_616693
  var valid_616694 = query.getOrDefault("Tags")
  valid_616694 = validateParameter(valid_616694, JArray, required = false,
                                 default = nil)
  if valid_616694 != nil:
    section.add "Tags", valid_616694
  var valid_616695 = query.getOrDefault("MaxInstanceLifetime")
  valid_616695 = validateParameter(valid_616695, JInt, required = false, default = nil)
  if valid_616695 != nil:
    section.add "MaxInstanceLifetime", valid_616695
  var valid_616696 = query.getOrDefault("Action")
  valid_616696 = validateParameter(valid_616696, JString, required = true,
                                 default = newJString("CreateAutoScalingGroup"))
  if valid_616696 != nil:
    section.add "Action", valid_616696
  var valid_616697 = query.getOrDefault("PlacementGroup")
  valid_616697 = validateParameter(valid_616697, JString, required = false,
                                 default = nil)
  if valid_616697 != nil:
    section.add "PlacementGroup", valid_616697
  var valid_616698 = query.getOrDefault("HealthCheckGracePeriod")
  valid_616698 = validateParameter(valid_616698, JInt, required = false, default = nil)
  if valid_616698 != nil:
    section.add "HealthCheckGracePeriod", valid_616698
  var valid_616699 = query.getOrDefault("MixedInstancesPolicy.InstancesDistribution")
  valid_616699 = validateParameter(valid_616699, JString, required = false,
                                 default = nil)
  if valid_616699 != nil:
    section.add "MixedInstancesPolicy.InstancesDistribution", valid_616699
  var valid_616700 = query.getOrDefault("AutoScalingGroupName")
  valid_616700 = validateParameter(valid_616700, JString, required = true,
                                 default = nil)
  if valid_616700 != nil:
    section.add "AutoScalingGroupName", valid_616700
  var valid_616701 = query.getOrDefault("LaunchTemplate.Version")
  valid_616701 = validateParameter(valid_616701, JString, required = false,
                                 default = nil)
  if valid_616701 != nil:
    section.add "LaunchTemplate.Version", valid_616701
  var valid_616702 = query.getOrDefault("TargetGroupARNs")
  valid_616702 = validateParameter(valid_616702, JArray, required = false,
                                 default = nil)
  if valid_616702 != nil:
    section.add "TargetGroupARNs", valid_616702
  var valid_616703 = query.getOrDefault("LoadBalancerNames")
  valid_616703 = validateParameter(valid_616703, JArray, required = false,
                                 default = nil)
  if valid_616703 != nil:
    section.add "LoadBalancerNames", valid_616703
  var valid_616704 = query.getOrDefault("MaxSize")
  valid_616704 = validateParameter(valid_616704, JInt, required = true, default = nil)
  if valid_616704 != nil:
    section.add "MaxSize", valid_616704
  var valid_616705 = query.getOrDefault("Version")
  valid_616705 = validateParameter(valid_616705, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_616705 != nil:
    section.add "Version", valid_616705
  var valid_616706 = query.getOrDefault("ServiceLinkedRoleARN")
  valid_616706 = validateParameter(valid_616706, JString, required = false,
                                 default = nil)
  if valid_616706 != nil:
    section.add "ServiceLinkedRoleARN", valid_616706
  var valid_616707 = query.getOrDefault("LifecycleHookSpecificationList")
  valid_616707 = validateParameter(valid_616707, JArray, required = false,
                                 default = nil)
  if valid_616707 != nil:
    section.add "LifecycleHookSpecificationList", valid_616707
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_616708 = header.getOrDefault("X-Amz-Date")
  valid_616708 = validateParameter(valid_616708, JString, required = false,
                                 default = nil)
  if valid_616708 != nil:
    section.add "X-Amz-Date", valid_616708
  var valid_616709 = header.getOrDefault("X-Amz-Security-Token")
  valid_616709 = validateParameter(valid_616709, JString, required = false,
                                 default = nil)
  if valid_616709 != nil:
    section.add "X-Amz-Security-Token", valid_616709
  var valid_616710 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616710 = validateParameter(valid_616710, JString, required = false,
                                 default = nil)
  if valid_616710 != nil:
    section.add "X-Amz-Content-Sha256", valid_616710
  var valid_616711 = header.getOrDefault("X-Amz-Algorithm")
  valid_616711 = validateParameter(valid_616711, JString, required = false,
                                 default = nil)
  if valid_616711 != nil:
    section.add "X-Amz-Algorithm", valid_616711
  var valid_616712 = header.getOrDefault("X-Amz-Signature")
  valid_616712 = validateParameter(valid_616712, JString, required = false,
                                 default = nil)
  if valid_616712 != nil:
    section.add "X-Amz-Signature", valid_616712
  var valid_616713 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616713 = validateParameter(valid_616713, JString, required = false,
                                 default = nil)
  if valid_616713 != nil:
    section.add "X-Amz-SignedHeaders", valid_616713
  var valid_616714 = header.getOrDefault("X-Amz-Credential")
  valid_616714 = validateParameter(valid_616714, JString, required = false,
                                 default = nil)
  if valid_616714 != nil:
    section.add "X-Amz-Credential", valid_616714
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616715: Call_GetCreateAutoScalingGroup_616678; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an Auto Scaling group with the specified name and attributes.</p> <p>If you exceed your maximum limit of Auto Scaling groups, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Service Quotas</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_616715.validator(path, query, header, formData, body)
  let scheme = call_616715.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616715.url(scheme.get, call_616715.host, call_616715.base,
                         call_616715.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616715, url, valid)

proc call*(call_616716: Call_GetCreateAutoScalingGroup_616678; MinSize: int;
          AutoScalingGroupName: string; MaxSize: int; HealthCheckType: string = "";
          TerminationPolicies: JsonNode = nil; InstanceId: string = "";
          DesiredCapacity: int = 0; LaunchTemplateLaunchTemplateId: string = "";
          AvailabilityZones: JsonNode = nil;
          LaunchTemplateLaunchTemplateName: string = "";
          VPCZoneIdentifier: string = ""; DefaultCooldown: int = 0;
          NewInstancesProtectedFromScaleIn: bool = false;
          MixedInstancesPolicyLaunchTemplate: string = "";
          LaunchConfigurationName: string = ""; Tags: JsonNode = nil;
          MaxInstanceLifetime: int = 0; Action: string = "CreateAutoScalingGroup";
          PlacementGroup: string = ""; HealthCheckGracePeriod: int = 0;
          MixedInstancesPolicyInstancesDistribution: string = "";
          LaunchTemplateVersion: string = ""; TargetGroupARNs: JsonNode = nil;
          LoadBalancerNames: JsonNode = nil; Version: string = "2011-01-01";
          ServiceLinkedRoleARN: string = "";
          LifecycleHookSpecificationList: JsonNode = nil): Recallable =
  ## getCreateAutoScalingGroup
  ## <p>Creates an Auto Scaling group with the specified name and attributes.</p> <p>If you exceed your maximum limit of Auto Scaling groups, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Service Quotas</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   HealthCheckType: string
  ##                  : <p>The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. The default value is <code>EC2</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   TerminationPolicies: JArray
  ##                      : <p>One or more termination policies used to select the instance to terminate. These policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   InstanceId: string
  ##             : <p>The ID of the instance used to create a launch configuration for the group.</p> <p>When you specify an ID of an instance, Amazon EC2 Auto Scaling creates a new launch configuration and associates it with the group. This launch configuration derives its attributes from the specified instance, except for the block device mapping.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-from-instance.html">Create an Auto Scaling Group Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You must specify one of the following parameters in your request: <code>LaunchConfigurationName</code>, <code>LaunchTemplate</code>, <code>InstanceId</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   DesiredCapacity: int
  ##                  : The number of Amazon EC2 instances that the Auto Scaling group attempts to maintain. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group. If you do not specify a desired capacity, the default is the minimum size of the group.
  ##   LaunchTemplateLaunchTemplateId: string
  ##                                 : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  ##   AvailabilityZones: JArray
  ##                    : <p>One or more Availability Zones for the group. This parameter is optional if you specify one or more subnets for <code>VPCZoneIdentifier</code>.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into EC2-Classic.</p>
  ##   LaunchTemplateLaunchTemplateName: string
  ##                                   : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   VPCZoneIdentifier: string
  ##                    : <p>A comma-separated list of subnet IDs for your virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into a VPC.</p>
  ##   DefaultCooldown: int
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MinSize: int (required)
  ##          : The minimum size of the group.
  ##   NewInstancesProtectedFromScaleIn: bool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MixedInstancesPolicyLaunchTemplate: string
  ##                                     : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   LaunchConfigurationName: string
  ##                          : <p>The name of the launch configuration.</p> <p>If you do not specify <code>LaunchConfigurationName</code>, you must specify one of the following parameters: <code>InstanceId</code>, <code>LaunchTemplate</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   Tags: JArray
  ##       : <p>One or more tags.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MaxInstanceLifetime: int
  ##                      : <p>The maximum amount of time, in seconds, that an instance can be in service.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-max-instance-lifetime.html">Replacing Auto Scaling Instances Based on Maximum Instance Lifetime</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Valid Range: Minimum value of 604800.</p>
  ##   Action: string (required)
  ##   PlacementGroup: string
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   HealthCheckGracePeriod: int
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. During this time, any health check failures for the instance are ignored. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   MixedInstancesPolicyInstancesDistribution: string
  ##                                            : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified, the value for each parameter in <code>InstancesDistribution</code> uses a default value.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group. This name must be unique per Region per account.
  ##   LaunchTemplateVersion: string
  ##                        : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   TargetGroupARNs: JArray
  ##                  : <p>The Amazon Resource Names (ARN) of the target groups to associate with the Auto Scaling group. Instances are registered as targets in a target group, and traffic is routed to the target group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LoadBalancerNames: JArray
  ##                    : <p>A list of Classic Load Balancers associated with this Auto Scaling group. For Application Load Balancers and Network Load Balancers, specify a list of target groups using the <code>TargetGroupARNs</code> property instead.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MaxSize: int (required)
  ##          : The maximum size of the group.
  ##   Version: string (required)
  ##   ServiceLinkedRoleARN: string
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. By default, Amazon EC2 Auto Scaling uses a service-linked role named AWSServiceRoleForAutoScaling, which it creates if it does not exist. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   LifecycleHookSpecificationList: JArray
  ##                                 : One or more lifecycle hooks.
  var query_616717 = newJObject()
  add(query_616717, "HealthCheckType", newJString(HealthCheckType))
  if TerminationPolicies != nil:
    query_616717.add "TerminationPolicies", TerminationPolicies
  add(query_616717, "InstanceId", newJString(InstanceId))
  add(query_616717, "DesiredCapacity", newJInt(DesiredCapacity))
  add(query_616717, "LaunchTemplate.LaunchTemplateId",
      newJString(LaunchTemplateLaunchTemplateId))
  if AvailabilityZones != nil:
    query_616717.add "AvailabilityZones", AvailabilityZones
  add(query_616717, "LaunchTemplate.LaunchTemplateName",
      newJString(LaunchTemplateLaunchTemplateName))
  add(query_616717, "VPCZoneIdentifier", newJString(VPCZoneIdentifier))
  add(query_616717, "DefaultCooldown", newJInt(DefaultCooldown))
  add(query_616717, "MinSize", newJInt(MinSize))
  add(query_616717, "NewInstancesProtectedFromScaleIn",
      newJBool(NewInstancesProtectedFromScaleIn))
  add(query_616717, "MixedInstancesPolicy.LaunchTemplate",
      newJString(MixedInstancesPolicyLaunchTemplate))
  add(query_616717, "LaunchConfigurationName", newJString(LaunchConfigurationName))
  if Tags != nil:
    query_616717.add "Tags", Tags
  add(query_616717, "MaxInstanceLifetime", newJInt(MaxInstanceLifetime))
  add(query_616717, "Action", newJString(Action))
  add(query_616717, "PlacementGroup", newJString(PlacementGroup))
  add(query_616717, "HealthCheckGracePeriod", newJInt(HealthCheckGracePeriod))
  add(query_616717, "MixedInstancesPolicy.InstancesDistribution",
      newJString(MixedInstancesPolicyInstancesDistribution))
  add(query_616717, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_616717, "LaunchTemplate.Version", newJString(LaunchTemplateVersion))
  if TargetGroupARNs != nil:
    query_616717.add "TargetGroupARNs", TargetGroupARNs
  if LoadBalancerNames != nil:
    query_616717.add "LoadBalancerNames", LoadBalancerNames
  add(query_616717, "MaxSize", newJInt(MaxSize))
  add(query_616717, "Version", newJString(Version))
  add(query_616717, "ServiceLinkedRoleARN", newJString(ServiceLinkedRoleARN))
  if LifecycleHookSpecificationList != nil:
    query_616717.add "LifecycleHookSpecificationList",
                    LifecycleHookSpecificationList
  result = call_616716.call(nil, query_616717, nil, nil, nil)

var getCreateAutoScalingGroup* = Call_GetCreateAutoScalingGroup_616678(
    name: "getCreateAutoScalingGroup", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=CreateAutoScalingGroup",
    validator: validate_GetCreateAutoScalingGroup_616679, base: "/",
    url: url_GetCreateAutoScalingGroup_616680,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateLaunchConfiguration_616792 = ref object of OpenApiRestCall_615866
proc url_PostCreateLaunchConfiguration_616794(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateLaunchConfiguration_616793(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a launch configuration.</p> <p>If you exceed your maximum limit of launch configurations, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Service Quotas</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html">Launch Configurations</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616795 = query.getOrDefault("Action")
  valid_616795 = validateParameter(valid_616795, JString, required = true, default = newJString(
      "CreateLaunchConfiguration"))
  if valid_616795 != nil:
    section.add "Action", valid_616795
  var valid_616796 = query.getOrDefault("Version")
  valid_616796 = validateParameter(valid_616796, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_616796 != nil:
    section.add "Version", valid_616796
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_616797 = header.getOrDefault("X-Amz-Date")
  valid_616797 = validateParameter(valid_616797, JString, required = false,
                                 default = nil)
  if valid_616797 != nil:
    section.add "X-Amz-Date", valid_616797
  var valid_616798 = header.getOrDefault("X-Amz-Security-Token")
  valid_616798 = validateParameter(valid_616798, JString, required = false,
                                 default = nil)
  if valid_616798 != nil:
    section.add "X-Amz-Security-Token", valid_616798
  var valid_616799 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616799 = validateParameter(valid_616799, JString, required = false,
                                 default = nil)
  if valid_616799 != nil:
    section.add "X-Amz-Content-Sha256", valid_616799
  var valid_616800 = header.getOrDefault("X-Amz-Algorithm")
  valid_616800 = validateParameter(valid_616800, JString, required = false,
                                 default = nil)
  if valid_616800 != nil:
    section.add "X-Amz-Algorithm", valid_616800
  var valid_616801 = header.getOrDefault("X-Amz-Signature")
  valid_616801 = validateParameter(valid_616801, JString, required = false,
                                 default = nil)
  if valid_616801 != nil:
    section.add "X-Amz-Signature", valid_616801
  var valid_616802 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616802 = validateParameter(valid_616802, JString, required = false,
                                 default = nil)
  if valid_616802 != nil:
    section.add "X-Amz-SignedHeaders", valid_616802
  var valid_616803 = header.getOrDefault("X-Amz-Credential")
  valid_616803 = validateParameter(valid_616803, JString, required = false,
                                 default = nil)
  if valid_616803 != nil:
    section.add "X-Amz-Credential", valid_616803
  result.add "header", section
  ## parameters in `formData` object:
  ##   PlacementTenancy: JString
  ##                   : <p>The tenancy of the instance. An instance with <code>dedicated</code> tenancy runs on isolated, single-tenant hardware and can only be launched into a VPC.</p> <p>To launch dedicated instances into a shared tenancy VPC (a VPC with the instance placement tenancy attribute set to <code>default</code>), you must set the value of this parameter to <code>dedicated</code>.</p> <p>If you specify <code>PlacementTenancy</code>, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-vpc-tenancy">Instance Placement Tenancy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Valid Values: <code>default</code> | <code>dedicated</code> </p>
  ##   BlockDeviceMappings: JArray
  ##                      : A block device mapping, which specifies the block devices for the instance. You can specify virtual devices and EBS volumes. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html">Block Device Mapping</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   AssociatePublicIpAddress: JBool
  ##                           : <p>For Auto Scaling groups that are running in a virtual private cloud (VPC), specifies whether to assign a public IP address to the group's instances. If you specify <code>true</code>, each instance in the Auto Scaling group receives a unique public IP address. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html">Launching Auto Scaling Instances in a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify this parameter, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <note> <p>If the instance is launched into a default subnet, the default is to assign a public IP address, unless you disabled the option to assign a public IP address on the subnet. If the instance is launched into a nondefault subnet, the default is not to assign a public IP address, unless you enabled the option to assign a public IP address on the subnet.</p> </note>
  ##   ClassicLinkVPCSecurityGroups: JArray
  ##                               : <p>The IDs of one or more security groups for the specified ClassicLink-enabled VPC. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify the <code>ClassicLinkVPCId</code> parameter, you must specify this parameter.</p>
  ##   KernelId: JString
  ##           : The ID of the kernel associated with the AMI.
  ##   KeyName: JString
  ##          : The name of the key pair. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Amazon EC2 Key Pairs</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   ImageId: JString
  ##          : <p>The ID of the Amazon Machine Image (AMI) that was assigned during registration. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html">Finding an AMI</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>ImageId</code>.</p>
  ##   LaunchConfigurationName: JString (required)
  ##                          : The name of the launch configuration. This name must be unique per Region per account.
  ##   ClassicLinkVPCId: JString
  ##                   : <p>The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>This parameter can only be used if you are launching EC2-Classic instances.</p>
  ##   IamInstanceProfile: JString
  ##                     : <p>The name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/us-iam-role.html">IAM Role for Applications That Run on Amazon EC2 Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   UserData: JString
  ##           : The Base64-encoded user data to make available to the launched EC2 instances. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance Metadata and User Data</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   EbsOptimized: JBool
  ##               : <p>Specifies whether the launch configuration is optimized for EBS I/O (<code>true</code>) or not (<code>false</code>). The optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization is not available with all instance types. Additional fees are incurred when you enable EBS optimization for an instance type that is not EBS-optimized by default. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html">Amazon EBS-Optimized Instances</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>The default value is <code>false</code>.</p>
  ##   InstanceId: JString
  ##             : <p>The ID of the instance to use to create the launch configuration. The new launch configuration derives attributes from the instance, except for the block device mapping.</p> <p>To create a launch configuration with a block device mapping or override any other instance attributes, specify them as part of the same request.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-lc-with-instanceID.html">Create a Launch Configuration Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify both <code>ImageId</code> and <code>InstanceType</code>.</p>
  ##   InstanceMonitoring.Enabled: JString
  ##                             : Describes whether detailed monitoring is enabled for the Auto Scaling instances.
  ## If <code>true</code>, detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
  ##   SecurityGroups: JArray
  ##                 : <p>A list that contains the security groups to assign to the instances in the Auto Scaling group.</p> <p>[EC2-VPC] Specify the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security Groups for Your VPC</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>[EC2-Classic] Specify either the security group names or the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon EC2 Security Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
  ##   RamdiskId: JString
  ##            : The ID of the RAM disk to select.
  ##   InstanceType: JString
  ##               : <p>Specifies the instance type of the EC2 instance.</p> <p>For information about available instance types, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes">Available Instance Types</a> in the <i>Amazon EC2 User Guide for Linux Instances.</i> </p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>InstanceType</code>.</p>
  ##   SpotPrice: JString
  ##            : <p>The maximum hourly price to be paid for any Spot Instance launched to fulfill the request. Spot Instances are launched when the price you specify exceeds the current Spot price. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-launch-spot-instances.html">Launching Spot Instances in Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <note> <p>When you change your maximum price by creating a new launch configuration, running instances will continue to run as long as the maximum price for those running instances is higher than the current Spot price.</p> </note>
  section = newJObject()
  var valid_616804 = formData.getOrDefault("PlacementTenancy")
  valid_616804 = validateParameter(valid_616804, JString, required = false,
                                 default = nil)
  if valid_616804 != nil:
    section.add "PlacementTenancy", valid_616804
  var valid_616805 = formData.getOrDefault("BlockDeviceMappings")
  valid_616805 = validateParameter(valid_616805, JArray, required = false,
                                 default = nil)
  if valid_616805 != nil:
    section.add "BlockDeviceMappings", valid_616805
  var valid_616806 = formData.getOrDefault("AssociatePublicIpAddress")
  valid_616806 = validateParameter(valid_616806, JBool, required = false, default = nil)
  if valid_616806 != nil:
    section.add "AssociatePublicIpAddress", valid_616806
  var valid_616807 = formData.getOrDefault("ClassicLinkVPCSecurityGroups")
  valid_616807 = validateParameter(valid_616807, JArray, required = false,
                                 default = nil)
  if valid_616807 != nil:
    section.add "ClassicLinkVPCSecurityGroups", valid_616807
  var valid_616808 = formData.getOrDefault("KernelId")
  valid_616808 = validateParameter(valid_616808, JString, required = false,
                                 default = nil)
  if valid_616808 != nil:
    section.add "KernelId", valid_616808
  var valid_616809 = formData.getOrDefault("KeyName")
  valid_616809 = validateParameter(valid_616809, JString, required = false,
                                 default = nil)
  if valid_616809 != nil:
    section.add "KeyName", valid_616809
  var valid_616810 = formData.getOrDefault("ImageId")
  valid_616810 = validateParameter(valid_616810, JString, required = false,
                                 default = nil)
  if valid_616810 != nil:
    section.add "ImageId", valid_616810
  assert formData != nil, "formData argument is necessary due to required `LaunchConfigurationName` field"
  var valid_616811 = formData.getOrDefault("LaunchConfigurationName")
  valid_616811 = validateParameter(valid_616811, JString, required = true,
                                 default = nil)
  if valid_616811 != nil:
    section.add "LaunchConfigurationName", valid_616811
  var valid_616812 = formData.getOrDefault("ClassicLinkVPCId")
  valid_616812 = validateParameter(valid_616812, JString, required = false,
                                 default = nil)
  if valid_616812 != nil:
    section.add "ClassicLinkVPCId", valid_616812
  var valid_616813 = formData.getOrDefault("IamInstanceProfile")
  valid_616813 = validateParameter(valid_616813, JString, required = false,
                                 default = nil)
  if valid_616813 != nil:
    section.add "IamInstanceProfile", valid_616813
  var valid_616814 = formData.getOrDefault("UserData")
  valid_616814 = validateParameter(valid_616814, JString, required = false,
                                 default = nil)
  if valid_616814 != nil:
    section.add "UserData", valid_616814
  var valid_616815 = formData.getOrDefault("EbsOptimized")
  valid_616815 = validateParameter(valid_616815, JBool, required = false, default = nil)
  if valid_616815 != nil:
    section.add "EbsOptimized", valid_616815
  var valid_616816 = formData.getOrDefault("InstanceId")
  valid_616816 = validateParameter(valid_616816, JString, required = false,
                                 default = nil)
  if valid_616816 != nil:
    section.add "InstanceId", valid_616816
  var valid_616817 = formData.getOrDefault("InstanceMonitoring.Enabled")
  valid_616817 = validateParameter(valid_616817, JString, required = false,
                                 default = nil)
  if valid_616817 != nil:
    section.add "InstanceMonitoring.Enabled", valid_616817
  var valid_616818 = formData.getOrDefault("SecurityGroups")
  valid_616818 = validateParameter(valid_616818, JArray, required = false,
                                 default = nil)
  if valid_616818 != nil:
    section.add "SecurityGroups", valid_616818
  var valid_616819 = formData.getOrDefault("RamdiskId")
  valid_616819 = validateParameter(valid_616819, JString, required = false,
                                 default = nil)
  if valid_616819 != nil:
    section.add "RamdiskId", valid_616819
  var valid_616820 = formData.getOrDefault("InstanceType")
  valid_616820 = validateParameter(valid_616820, JString, required = false,
                                 default = nil)
  if valid_616820 != nil:
    section.add "InstanceType", valid_616820
  var valid_616821 = formData.getOrDefault("SpotPrice")
  valid_616821 = validateParameter(valid_616821, JString, required = false,
                                 default = nil)
  if valid_616821 != nil:
    section.add "SpotPrice", valid_616821
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616822: Call_PostCreateLaunchConfiguration_616792; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a launch configuration.</p> <p>If you exceed your maximum limit of launch configurations, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Service Quotas</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html">Launch Configurations</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_616822.validator(path, query, header, formData, body)
  let scheme = call_616822.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616822.url(scheme.get, call_616822.host, call_616822.base,
                         call_616822.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616822, url, valid)

proc call*(call_616823: Call_PostCreateLaunchConfiguration_616792;
          LaunchConfigurationName: string; PlacementTenancy: string = "";
          BlockDeviceMappings: JsonNode = nil;
          AssociatePublicIpAddress: bool = false;
          ClassicLinkVPCSecurityGroups: JsonNode = nil; KernelId: string = "";
          KeyName: string = ""; ImageId: string = ""; ClassicLinkVPCId: string = "";
          IamInstanceProfile: string = ""; UserData: string = "";
          EbsOptimized: bool = false; Action: string = "CreateLaunchConfiguration";
          InstanceId: string = ""; InstanceMonitoringEnabled: string = "";
          SecurityGroups: JsonNode = nil; RamdiskId: string = "";
          InstanceType: string = ""; Version: string = "2011-01-01";
          SpotPrice: string = ""): Recallable =
  ## postCreateLaunchConfiguration
  ## <p>Creates a launch configuration.</p> <p>If you exceed your maximum limit of launch configurations, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Service Quotas</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html">Launch Configurations</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   PlacementTenancy: string
  ##                   : <p>The tenancy of the instance. An instance with <code>dedicated</code> tenancy runs on isolated, single-tenant hardware and can only be launched into a VPC.</p> <p>To launch dedicated instances into a shared tenancy VPC (a VPC with the instance placement tenancy attribute set to <code>default</code>), you must set the value of this parameter to <code>dedicated</code>.</p> <p>If you specify <code>PlacementTenancy</code>, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-vpc-tenancy">Instance Placement Tenancy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Valid Values: <code>default</code> | <code>dedicated</code> </p>
  ##   BlockDeviceMappings: JArray
  ##                      : A block device mapping, which specifies the block devices for the instance. You can specify virtual devices and EBS volumes. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html">Block Device Mapping</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   AssociatePublicIpAddress: bool
  ##                           : <p>For Auto Scaling groups that are running in a virtual private cloud (VPC), specifies whether to assign a public IP address to the group's instances. If you specify <code>true</code>, each instance in the Auto Scaling group receives a unique public IP address. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html">Launching Auto Scaling Instances in a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify this parameter, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <note> <p>If the instance is launched into a default subnet, the default is to assign a public IP address, unless you disabled the option to assign a public IP address on the subnet. If the instance is launched into a nondefault subnet, the default is not to assign a public IP address, unless you enabled the option to assign a public IP address on the subnet.</p> </note>
  ##   ClassicLinkVPCSecurityGroups: JArray
  ##                               : <p>The IDs of one or more security groups for the specified ClassicLink-enabled VPC. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify the <code>ClassicLinkVPCId</code> parameter, you must specify this parameter.</p>
  ##   KernelId: string
  ##           : The ID of the kernel associated with the AMI.
  ##   KeyName: string
  ##          : The name of the key pair. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Amazon EC2 Key Pairs</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   ImageId: string
  ##          : <p>The ID of the Amazon Machine Image (AMI) that was assigned during registration. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html">Finding an AMI</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>ImageId</code>.</p>
  ##   LaunchConfigurationName: string (required)
  ##                          : The name of the launch configuration. This name must be unique per Region per account.
  ##   ClassicLinkVPCId: string
  ##                   : <p>The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>This parameter can only be used if you are launching EC2-Classic instances.</p>
  ##   IamInstanceProfile: string
  ##                     : <p>The name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/us-iam-role.html">IAM Role for Applications That Run on Amazon EC2 Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   UserData: string
  ##           : The Base64-encoded user data to make available to the launched EC2 instances. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance Metadata and User Data</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   EbsOptimized: bool
  ##               : <p>Specifies whether the launch configuration is optimized for EBS I/O (<code>true</code>) or not (<code>false</code>). The optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization is not available with all instance types. Additional fees are incurred when you enable EBS optimization for an instance type that is not EBS-optimized by default. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html">Amazon EBS-Optimized Instances</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>The default value is <code>false</code>.</p>
  ##   Action: string (required)
  ##   InstanceId: string
  ##             : <p>The ID of the instance to use to create the launch configuration. The new launch configuration derives attributes from the instance, except for the block device mapping.</p> <p>To create a launch configuration with a block device mapping or override any other instance attributes, specify them as part of the same request.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-lc-with-instanceID.html">Create a Launch Configuration Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify both <code>ImageId</code> and <code>InstanceType</code>.</p>
  ##   InstanceMonitoringEnabled: string
  ##                            : Describes whether detailed monitoring is enabled for the Auto Scaling instances.
  ## If <code>true</code>, detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
  ##   SecurityGroups: JArray
  ##                 : <p>A list that contains the security groups to assign to the instances in the Auto Scaling group.</p> <p>[EC2-VPC] Specify the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security Groups for Your VPC</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>[EC2-Classic] Specify either the security group names or the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon EC2 Security Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
  ##   RamdiskId: string
  ##            : The ID of the RAM disk to select.
  ##   InstanceType: string
  ##               : <p>Specifies the instance type of the EC2 instance.</p> <p>For information about available instance types, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes">Available Instance Types</a> in the <i>Amazon EC2 User Guide for Linux Instances.</i> </p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>InstanceType</code>.</p>
  ##   Version: string (required)
  ##   SpotPrice: string
  ##            : <p>The maximum hourly price to be paid for any Spot Instance launched to fulfill the request. Spot Instances are launched when the price you specify exceeds the current Spot price. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-launch-spot-instances.html">Launching Spot Instances in Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <note> <p>When you change your maximum price by creating a new launch configuration, running instances will continue to run as long as the maximum price for those running instances is higher than the current Spot price.</p> </note>
  var query_616824 = newJObject()
  var formData_616825 = newJObject()
  add(formData_616825, "PlacementTenancy", newJString(PlacementTenancy))
  if BlockDeviceMappings != nil:
    formData_616825.add "BlockDeviceMappings", BlockDeviceMappings
  add(formData_616825, "AssociatePublicIpAddress",
      newJBool(AssociatePublicIpAddress))
  if ClassicLinkVPCSecurityGroups != nil:
    formData_616825.add "ClassicLinkVPCSecurityGroups",
                       ClassicLinkVPCSecurityGroups
  add(formData_616825, "KernelId", newJString(KernelId))
  add(formData_616825, "KeyName", newJString(KeyName))
  add(formData_616825, "ImageId", newJString(ImageId))
  add(formData_616825, "LaunchConfigurationName",
      newJString(LaunchConfigurationName))
  add(formData_616825, "ClassicLinkVPCId", newJString(ClassicLinkVPCId))
  add(formData_616825, "IamInstanceProfile", newJString(IamInstanceProfile))
  add(formData_616825, "UserData", newJString(UserData))
  add(formData_616825, "EbsOptimized", newJBool(EbsOptimized))
  add(query_616824, "Action", newJString(Action))
  add(formData_616825, "InstanceId", newJString(InstanceId))
  add(formData_616825, "InstanceMonitoring.Enabled",
      newJString(InstanceMonitoringEnabled))
  if SecurityGroups != nil:
    formData_616825.add "SecurityGroups", SecurityGroups
  add(formData_616825, "RamdiskId", newJString(RamdiskId))
  add(formData_616825, "InstanceType", newJString(InstanceType))
  add(query_616824, "Version", newJString(Version))
  add(formData_616825, "SpotPrice", newJString(SpotPrice))
  result = call_616823.call(nil, query_616824, nil, formData_616825, nil)

var postCreateLaunchConfiguration* = Call_PostCreateLaunchConfiguration_616792(
    name: "postCreateLaunchConfiguration", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=CreateLaunchConfiguration",
    validator: validate_PostCreateLaunchConfiguration_616793, base: "/",
    url: url_PostCreateLaunchConfiguration_616794,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateLaunchConfiguration_616759 = ref object of OpenApiRestCall_615866
proc url_GetCreateLaunchConfiguration_616761(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateLaunchConfiguration_616760(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a launch configuration.</p> <p>If you exceed your maximum limit of launch configurations, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Service Quotas</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html">Launch Configurations</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PlacementTenancy: JString
  ##                   : <p>The tenancy of the instance. An instance with <code>dedicated</code> tenancy runs on isolated, single-tenant hardware and can only be launched into a VPC.</p> <p>To launch dedicated instances into a shared tenancy VPC (a VPC with the instance placement tenancy attribute set to <code>default</code>), you must set the value of this parameter to <code>dedicated</code>.</p> <p>If you specify <code>PlacementTenancy</code>, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-vpc-tenancy">Instance Placement Tenancy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Valid Values: <code>default</code> | <code>dedicated</code> </p>
  ##   KeyName: JString
  ##          : The name of the key pair. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Amazon EC2 Key Pairs</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   KernelId: JString
  ##           : The ID of the kernel associated with the AMI.
  ##   UserData: JString
  ##           : The Base64-encoded user data to make available to the launched EC2 instances. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance Metadata and User Data</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   LaunchConfigurationName: JString (required)
  ##                          : The name of the launch configuration. This name must be unique per Region per account.
  ##   AssociatePublicIpAddress: JBool
  ##                           : <p>For Auto Scaling groups that are running in a virtual private cloud (VPC), specifies whether to assign a public IP address to the group's instances. If you specify <code>true</code>, each instance in the Auto Scaling group receives a unique public IP address. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html">Launching Auto Scaling Instances in a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify this parameter, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <note> <p>If the instance is launched into a default subnet, the default is to assign a public IP address, unless you disabled the option to assign a public IP address on the subnet. If the instance is launched into a nondefault subnet, the default is not to assign a public IP address, unless you enabled the option to assign a public IP address on the subnet.</p> </note>
  ##   EbsOptimized: JBool
  ##               : <p>Specifies whether the launch configuration is optimized for EBS I/O (<code>true</code>) or not (<code>false</code>). The optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization is not available with all instance types. Additional fees are incurred when you enable EBS optimization for an instance type that is not EBS-optimized by default. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html">Amazon EBS-Optimized Instances</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>The default value is <code>false</code>.</p>
  ##   ImageId: JString
  ##          : <p>The ID of the Amazon Machine Image (AMI) that was assigned during registration. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html">Finding an AMI</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>ImageId</code>.</p>
  ##   InstanceMonitoring.Enabled: JString
  ##                             : Describes whether detailed monitoring is enabled for the Auto Scaling instances.
  ## If <code>true</code>, detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
  ##   InstanceType: JString
  ##               : <p>Specifies the instance type of the EC2 instance.</p> <p>For information about available instance types, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes">Available Instance Types</a> in the <i>Amazon EC2 User Guide for Linux Instances.</i> </p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>InstanceType</code>.</p>
  ##   SecurityGroups: JArray
  ##                 : <p>A list that contains the security groups to assign to the instances in the Auto Scaling group.</p> <p>[EC2-VPC] Specify the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security Groups for Your VPC</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>[EC2-Classic] Specify either the security group names or the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon EC2 Security Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
  ##   BlockDeviceMappings: JArray
  ##                      : A block device mapping, which specifies the block devices for the instance. You can specify virtual devices and EBS volumes. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html">Block Device Mapping</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   Action: JString (required)
  ##   RamdiskId: JString
  ##            : The ID of the RAM disk to select.
  ##   ClassicLinkVPCSecurityGroups: JArray
  ##                               : <p>The IDs of one or more security groups for the specified ClassicLink-enabled VPC. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify the <code>ClassicLinkVPCId</code> parameter, you must specify this parameter.</p>
  ##   IamInstanceProfile: JString
  ##                     : <p>The name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/us-iam-role.html">IAM Role for Applications That Run on Amazon EC2 Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   ClassicLinkVPCId: JString
  ##                   : <p>The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>This parameter can only be used if you are launching EC2-Classic instances.</p>
  ##   InstanceId: JString
  ##             : <p>The ID of the instance to use to create the launch configuration. The new launch configuration derives attributes from the instance, except for the block device mapping.</p> <p>To create a launch configuration with a block device mapping or override any other instance attributes, specify them as part of the same request.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-lc-with-instanceID.html">Create a Launch Configuration Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify both <code>ImageId</code> and <code>InstanceType</code>.</p>
  ##   Version: JString (required)
  ##   SpotPrice: JString
  ##            : <p>The maximum hourly price to be paid for any Spot Instance launched to fulfill the request. Spot Instances are launched when the price you specify exceeds the current Spot price. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-launch-spot-instances.html">Launching Spot Instances in Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <note> <p>When you change your maximum price by creating a new launch configuration, running instances will continue to run as long as the maximum price for those running instances is higher than the current Spot price.</p> </note>
  section = newJObject()
  var valid_616762 = query.getOrDefault("PlacementTenancy")
  valid_616762 = validateParameter(valid_616762, JString, required = false,
                                 default = nil)
  if valid_616762 != nil:
    section.add "PlacementTenancy", valid_616762
  var valid_616763 = query.getOrDefault("KeyName")
  valid_616763 = validateParameter(valid_616763, JString, required = false,
                                 default = nil)
  if valid_616763 != nil:
    section.add "KeyName", valid_616763
  var valid_616764 = query.getOrDefault("KernelId")
  valid_616764 = validateParameter(valid_616764, JString, required = false,
                                 default = nil)
  if valid_616764 != nil:
    section.add "KernelId", valid_616764
  var valid_616765 = query.getOrDefault("UserData")
  valid_616765 = validateParameter(valid_616765, JString, required = false,
                                 default = nil)
  if valid_616765 != nil:
    section.add "UserData", valid_616765
  assert query != nil, "query argument is necessary due to required `LaunchConfigurationName` field"
  var valid_616766 = query.getOrDefault("LaunchConfigurationName")
  valid_616766 = validateParameter(valid_616766, JString, required = true,
                                 default = nil)
  if valid_616766 != nil:
    section.add "LaunchConfigurationName", valid_616766
  var valid_616767 = query.getOrDefault("AssociatePublicIpAddress")
  valid_616767 = validateParameter(valid_616767, JBool, required = false, default = nil)
  if valid_616767 != nil:
    section.add "AssociatePublicIpAddress", valid_616767
  var valid_616768 = query.getOrDefault("EbsOptimized")
  valid_616768 = validateParameter(valid_616768, JBool, required = false, default = nil)
  if valid_616768 != nil:
    section.add "EbsOptimized", valid_616768
  var valid_616769 = query.getOrDefault("ImageId")
  valid_616769 = validateParameter(valid_616769, JString, required = false,
                                 default = nil)
  if valid_616769 != nil:
    section.add "ImageId", valid_616769
  var valid_616770 = query.getOrDefault("InstanceMonitoring.Enabled")
  valid_616770 = validateParameter(valid_616770, JString, required = false,
                                 default = nil)
  if valid_616770 != nil:
    section.add "InstanceMonitoring.Enabled", valid_616770
  var valid_616771 = query.getOrDefault("InstanceType")
  valid_616771 = validateParameter(valid_616771, JString, required = false,
                                 default = nil)
  if valid_616771 != nil:
    section.add "InstanceType", valid_616771
  var valid_616772 = query.getOrDefault("SecurityGroups")
  valid_616772 = validateParameter(valid_616772, JArray, required = false,
                                 default = nil)
  if valid_616772 != nil:
    section.add "SecurityGroups", valid_616772
  var valid_616773 = query.getOrDefault("BlockDeviceMappings")
  valid_616773 = validateParameter(valid_616773, JArray, required = false,
                                 default = nil)
  if valid_616773 != nil:
    section.add "BlockDeviceMappings", valid_616773
  var valid_616774 = query.getOrDefault("Action")
  valid_616774 = validateParameter(valid_616774, JString, required = true, default = newJString(
      "CreateLaunchConfiguration"))
  if valid_616774 != nil:
    section.add "Action", valid_616774
  var valid_616775 = query.getOrDefault("RamdiskId")
  valid_616775 = validateParameter(valid_616775, JString, required = false,
                                 default = nil)
  if valid_616775 != nil:
    section.add "RamdiskId", valid_616775
  var valid_616776 = query.getOrDefault("ClassicLinkVPCSecurityGroups")
  valid_616776 = validateParameter(valid_616776, JArray, required = false,
                                 default = nil)
  if valid_616776 != nil:
    section.add "ClassicLinkVPCSecurityGroups", valid_616776
  var valid_616777 = query.getOrDefault("IamInstanceProfile")
  valid_616777 = validateParameter(valid_616777, JString, required = false,
                                 default = nil)
  if valid_616777 != nil:
    section.add "IamInstanceProfile", valid_616777
  var valid_616778 = query.getOrDefault("ClassicLinkVPCId")
  valid_616778 = validateParameter(valid_616778, JString, required = false,
                                 default = nil)
  if valid_616778 != nil:
    section.add "ClassicLinkVPCId", valid_616778
  var valid_616779 = query.getOrDefault("InstanceId")
  valid_616779 = validateParameter(valid_616779, JString, required = false,
                                 default = nil)
  if valid_616779 != nil:
    section.add "InstanceId", valid_616779
  var valid_616780 = query.getOrDefault("Version")
  valid_616780 = validateParameter(valid_616780, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_616780 != nil:
    section.add "Version", valid_616780
  var valid_616781 = query.getOrDefault("SpotPrice")
  valid_616781 = validateParameter(valid_616781, JString, required = false,
                                 default = nil)
  if valid_616781 != nil:
    section.add "SpotPrice", valid_616781
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_616782 = header.getOrDefault("X-Amz-Date")
  valid_616782 = validateParameter(valid_616782, JString, required = false,
                                 default = nil)
  if valid_616782 != nil:
    section.add "X-Amz-Date", valid_616782
  var valid_616783 = header.getOrDefault("X-Amz-Security-Token")
  valid_616783 = validateParameter(valid_616783, JString, required = false,
                                 default = nil)
  if valid_616783 != nil:
    section.add "X-Amz-Security-Token", valid_616783
  var valid_616784 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616784 = validateParameter(valid_616784, JString, required = false,
                                 default = nil)
  if valid_616784 != nil:
    section.add "X-Amz-Content-Sha256", valid_616784
  var valid_616785 = header.getOrDefault("X-Amz-Algorithm")
  valid_616785 = validateParameter(valid_616785, JString, required = false,
                                 default = nil)
  if valid_616785 != nil:
    section.add "X-Amz-Algorithm", valid_616785
  var valid_616786 = header.getOrDefault("X-Amz-Signature")
  valid_616786 = validateParameter(valid_616786, JString, required = false,
                                 default = nil)
  if valid_616786 != nil:
    section.add "X-Amz-Signature", valid_616786
  var valid_616787 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616787 = validateParameter(valid_616787, JString, required = false,
                                 default = nil)
  if valid_616787 != nil:
    section.add "X-Amz-SignedHeaders", valid_616787
  var valid_616788 = header.getOrDefault("X-Amz-Credential")
  valid_616788 = validateParameter(valid_616788, JString, required = false,
                                 default = nil)
  if valid_616788 != nil:
    section.add "X-Amz-Credential", valid_616788
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616789: Call_GetCreateLaunchConfiguration_616759; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a launch configuration.</p> <p>If you exceed your maximum limit of launch configurations, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Service Quotas</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html">Launch Configurations</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_616789.validator(path, query, header, formData, body)
  let scheme = call_616789.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616789.url(scheme.get, call_616789.host, call_616789.base,
                         call_616789.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616789, url, valid)

proc call*(call_616790: Call_GetCreateLaunchConfiguration_616759;
          LaunchConfigurationName: string; PlacementTenancy: string = "";
          KeyName: string = ""; KernelId: string = ""; UserData: string = "";
          AssociatePublicIpAddress: bool = false; EbsOptimized: bool = false;
          ImageId: string = ""; InstanceMonitoringEnabled: string = "";
          InstanceType: string = ""; SecurityGroups: JsonNode = nil;
          BlockDeviceMappings: JsonNode = nil;
          Action: string = "CreateLaunchConfiguration"; RamdiskId: string = "";
          ClassicLinkVPCSecurityGroups: JsonNode = nil;
          IamInstanceProfile: string = ""; ClassicLinkVPCId: string = "";
          InstanceId: string = ""; Version: string = "2011-01-01";
          SpotPrice: string = ""): Recallable =
  ## getCreateLaunchConfiguration
  ## <p>Creates a launch configuration.</p> <p>If you exceed your maximum limit of launch configurations, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Service Quotas</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html">Launch Configurations</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   PlacementTenancy: string
  ##                   : <p>The tenancy of the instance. An instance with <code>dedicated</code> tenancy runs on isolated, single-tenant hardware and can only be launched into a VPC.</p> <p>To launch dedicated instances into a shared tenancy VPC (a VPC with the instance placement tenancy attribute set to <code>default</code>), you must set the value of this parameter to <code>dedicated</code>.</p> <p>If you specify <code>PlacementTenancy</code>, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-vpc-tenancy">Instance Placement Tenancy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Valid Values: <code>default</code> | <code>dedicated</code> </p>
  ##   KeyName: string
  ##          : The name of the key pair. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Amazon EC2 Key Pairs</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   KernelId: string
  ##           : The ID of the kernel associated with the AMI.
  ##   UserData: string
  ##           : The Base64-encoded user data to make available to the launched EC2 instances. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance Metadata and User Data</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   LaunchConfigurationName: string (required)
  ##                          : The name of the launch configuration. This name must be unique per Region per account.
  ##   AssociatePublicIpAddress: bool
  ##                           : <p>For Auto Scaling groups that are running in a virtual private cloud (VPC), specifies whether to assign a public IP address to the group's instances. If you specify <code>true</code>, each instance in the Auto Scaling group receives a unique public IP address. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html">Launching Auto Scaling Instances in a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify this parameter, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <note> <p>If the instance is launched into a default subnet, the default is to assign a public IP address, unless you disabled the option to assign a public IP address on the subnet. If the instance is launched into a nondefault subnet, the default is not to assign a public IP address, unless you enabled the option to assign a public IP address on the subnet.</p> </note>
  ##   EbsOptimized: bool
  ##               : <p>Specifies whether the launch configuration is optimized for EBS I/O (<code>true</code>) or not (<code>false</code>). The optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization is not available with all instance types. Additional fees are incurred when you enable EBS optimization for an instance type that is not EBS-optimized by default. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html">Amazon EBS-Optimized Instances</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>The default value is <code>false</code>.</p>
  ##   ImageId: string
  ##          : <p>The ID of the Amazon Machine Image (AMI) that was assigned during registration. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html">Finding an AMI</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>ImageId</code>.</p>
  ##   InstanceMonitoringEnabled: string
  ##                            : Describes whether detailed monitoring is enabled for the Auto Scaling instances.
  ## If <code>true</code>, detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
  ##   InstanceType: string
  ##               : <p>Specifies the instance type of the EC2 instance.</p> <p>For information about available instance types, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes">Available Instance Types</a> in the <i>Amazon EC2 User Guide for Linux Instances.</i> </p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>InstanceType</code>.</p>
  ##   SecurityGroups: JArray
  ##                 : <p>A list that contains the security groups to assign to the instances in the Auto Scaling group.</p> <p>[EC2-VPC] Specify the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security Groups for Your VPC</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>[EC2-Classic] Specify either the security group names or the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon EC2 Security Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
  ##   BlockDeviceMappings: JArray
  ##                      : A block device mapping, which specifies the block devices for the instance. You can specify virtual devices and EBS volumes. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html">Block Device Mapping</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   Action: string (required)
  ##   RamdiskId: string
  ##            : The ID of the RAM disk to select.
  ##   ClassicLinkVPCSecurityGroups: JArray
  ##                               : <p>The IDs of one or more security groups for the specified ClassicLink-enabled VPC. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify the <code>ClassicLinkVPCId</code> parameter, you must specify this parameter.</p>
  ##   IamInstanceProfile: string
  ##                     : <p>The name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/us-iam-role.html">IAM Role for Applications That Run on Amazon EC2 Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   ClassicLinkVPCId: string
  ##                   : <p>The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>This parameter can only be used if you are launching EC2-Classic instances.</p>
  ##   InstanceId: string
  ##             : <p>The ID of the instance to use to create the launch configuration. The new launch configuration derives attributes from the instance, except for the block device mapping.</p> <p>To create a launch configuration with a block device mapping or override any other instance attributes, specify them as part of the same request.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-lc-with-instanceID.html">Create a Launch Configuration Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify both <code>ImageId</code> and <code>InstanceType</code>.</p>
  ##   Version: string (required)
  ##   SpotPrice: string
  ##            : <p>The maximum hourly price to be paid for any Spot Instance launched to fulfill the request. Spot Instances are launched when the price you specify exceeds the current Spot price. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-launch-spot-instances.html">Launching Spot Instances in Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <note> <p>When you change your maximum price by creating a new launch configuration, running instances will continue to run as long as the maximum price for those running instances is higher than the current Spot price.</p> </note>
  var query_616791 = newJObject()
  add(query_616791, "PlacementTenancy", newJString(PlacementTenancy))
  add(query_616791, "KeyName", newJString(KeyName))
  add(query_616791, "KernelId", newJString(KernelId))
  add(query_616791, "UserData", newJString(UserData))
  add(query_616791, "LaunchConfigurationName", newJString(LaunchConfigurationName))
  add(query_616791, "AssociatePublicIpAddress", newJBool(AssociatePublicIpAddress))
  add(query_616791, "EbsOptimized", newJBool(EbsOptimized))
  add(query_616791, "ImageId", newJString(ImageId))
  add(query_616791, "InstanceMonitoring.Enabled",
      newJString(InstanceMonitoringEnabled))
  add(query_616791, "InstanceType", newJString(InstanceType))
  if SecurityGroups != nil:
    query_616791.add "SecurityGroups", SecurityGroups
  if BlockDeviceMappings != nil:
    query_616791.add "BlockDeviceMappings", BlockDeviceMappings
  add(query_616791, "Action", newJString(Action))
  add(query_616791, "RamdiskId", newJString(RamdiskId))
  if ClassicLinkVPCSecurityGroups != nil:
    query_616791.add "ClassicLinkVPCSecurityGroups", ClassicLinkVPCSecurityGroups
  add(query_616791, "IamInstanceProfile", newJString(IamInstanceProfile))
  add(query_616791, "ClassicLinkVPCId", newJString(ClassicLinkVPCId))
  add(query_616791, "InstanceId", newJString(InstanceId))
  add(query_616791, "Version", newJString(Version))
  add(query_616791, "SpotPrice", newJString(SpotPrice))
  result = call_616790.call(nil, query_616791, nil, nil, nil)

var getCreateLaunchConfiguration* = Call_GetCreateLaunchConfiguration_616759(
    name: "getCreateLaunchConfiguration", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=CreateLaunchConfiguration",
    validator: validate_GetCreateLaunchConfiguration_616760, base: "/",
    url: url_GetCreateLaunchConfiguration_616761,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateOrUpdateTags_616842 = ref object of OpenApiRestCall_615866
proc url_PostCreateOrUpdateTags_616844(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateOrUpdateTags_616843(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates or updates tags for the specified Auto Scaling group.</p> <p>When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616845 = query.getOrDefault("Action")
  valid_616845 = validateParameter(valid_616845, JString, required = true,
                                 default = newJString("CreateOrUpdateTags"))
  if valid_616845 != nil:
    section.add "Action", valid_616845
  var valid_616846 = query.getOrDefault("Version")
  valid_616846 = validateParameter(valid_616846, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_616846 != nil:
    section.add "Version", valid_616846
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_616847 = header.getOrDefault("X-Amz-Date")
  valid_616847 = validateParameter(valid_616847, JString, required = false,
                                 default = nil)
  if valid_616847 != nil:
    section.add "X-Amz-Date", valid_616847
  var valid_616848 = header.getOrDefault("X-Amz-Security-Token")
  valid_616848 = validateParameter(valid_616848, JString, required = false,
                                 default = nil)
  if valid_616848 != nil:
    section.add "X-Amz-Security-Token", valid_616848
  var valid_616849 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616849 = validateParameter(valid_616849, JString, required = false,
                                 default = nil)
  if valid_616849 != nil:
    section.add "X-Amz-Content-Sha256", valid_616849
  var valid_616850 = header.getOrDefault("X-Amz-Algorithm")
  valid_616850 = validateParameter(valid_616850, JString, required = false,
                                 default = nil)
  if valid_616850 != nil:
    section.add "X-Amz-Algorithm", valid_616850
  var valid_616851 = header.getOrDefault("X-Amz-Signature")
  valid_616851 = validateParameter(valid_616851, JString, required = false,
                                 default = nil)
  if valid_616851 != nil:
    section.add "X-Amz-Signature", valid_616851
  var valid_616852 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616852 = validateParameter(valid_616852, JString, required = false,
                                 default = nil)
  if valid_616852 != nil:
    section.add "X-Amz-SignedHeaders", valid_616852
  var valid_616853 = header.getOrDefault("X-Amz-Credential")
  valid_616853 = validateParameter(valid_616853, JString, required = false,
                                 default = nil)
  if valid_616853 != nil:
    section.add "X-Amz-Credential", valid_616853
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray (required)
  ##       : One or more tags.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Tags` field"
  var valid_616854 = formData.getOrDefault("Tags")
  valid_616854 = validateParameter(valid_616854, JArray, required = true, default = nil)
  if valid_616854 != nil:
    section.add "Tags", valid_616854
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616855: Call_PostCreateOrUpdateTags_616842; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates or updates tags for the specified Auto Scaling group.</p> <p>When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_616855.validator(path, query, header, formData, body)
  let scheme = call_616855.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616855.url(scheme.get, call_616855.host, call_616855.base,
                         call_616855.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616855, url, valid)

proc call*(call_616856: Call_PostCreateOrUpdateTags_616842; Tags: JsonNode;
          Action: string = "CreateOrUpdateTags"; Version: string = "2011-01-01"): Recallable =
  ## postCreateOrUpdateTags
  ## <p>Creates or updates tags for the specified Auto Scaling group.</p> <p>When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Tags: JArray (required)
  ##       : One or more tags.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616857 = newJObject()
  var formData_616858 = newJObject()
  if Tags != nil:
    formData_616858.add "Tags", Tags
  add(query_616857, "Action", newJString(Action))
  add(query_616857, "Version", newJString(Version))
  result = call_616856.call(nil, query_616857, nil, formData_616858, nil)

var postCreateOrUpdateTags* = Call_PostCreateOrUpdateTags_616842(
    name: "postCreateOrUpdateTags", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=CreateOrUpdateTags",
    validator: validate_PostCreateOrUpdateTags_616843, base: "/",
    url: url_PostCreateOrUpdateTags_616844, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateOrUpdateTags_616826 = ref object of OpenApiRestCall_615866
proc url_GetCreateOrUpdateTags_616828(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateOrUpdateTags_616827(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates or updates tags for the specified Auto Scaling group.</p> <p>When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : One or more tags.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_616829 = query.getOrDefault("Tags")
  valid_616829 = validateParameter(valid_616829, JArray, required = true, default = nil)
  if valid_616829 != nil:
    section.add "Tags", valid_616829
  var valid_616830 = query.getOrDefault("Action")
  valid_616830 = validateParameter(valid_616830, JString, required = true,
                                 default = newJString("CreateOrUpdateTags"))
  if valid_616830 != nil:
    section.add "Action", valid_616830
  var valid_616831 = query.getOrDefault("Version")
  valid_616831 = validateParameter(valid_616831, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_616831 != nil:
    section.add "Version", valid_616831
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_616832 = header.getOrDefault("X-Amz-Date")
  valid_616832 = validateParameter(valid_616832, JString, required = false,
                                 default = nil)
  if valid_616832 != nil:
    section.add "X-Amz-Date", valid_616832
  var valid_616833 = header.getOrDefault("X-Amz-Security-Token")
  valid_616833 = validateParameter(valid_616833, JString, required = false,
                                 default = nil)
  if valid_616833 != nil:
    section.add "X-Amz-Security-Token", valid_616833
  var valid_616834 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616834 = validateParameter(valid_616834, JString, required = false,
                                 default = nil)
  if valid_616834 != nil:
    section.add "X-Amz-Content-Sha256", valid_616834
  var valid_616835 = header.getOrDefault("X-Amz-Algorithm")
  valid_616835 = validateParameter(valid_616835, JString, required = false,
                                 default = nil)
  if valid_616835 != nil:
    section.add "X-Amz-Algorithm", valid_616835
  var valid_616836 = header.getOrDefault("X-Amz-Signature")
  valid_616836 = validateParameter(valid_616836, JString, required = false,
                                 default = nil)
  if valid_616836 != nil:
    section.add "X-Amz-Signature", valid_616836
  var valid_616837 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616837 = validateParameter(valid_616837, JString, required = false,
                                 default = nil)
  if valid_616837 != nil:
    section.add "X-Amz-SignedHeaders", valid_616837
  var valid_616838 = header.getOrDefault("X-Amz-Credential")
  valid_616838 = validateParameter(valid_616838, JString, required = false,
                                 default = nil)
  if valid_616838 != nil:
    section.add "X-Amz-Credential", valid_616838
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616839: Call_GetCreateOrUpdateTags_616826; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates or updates tags for the specified Auto Scaling group.</p> <p>When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_616839.validator(path, query, header, formData, body)
  let scheme = call_616839.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616839.url(scheme.get, call_616839.host, call_616839.base,
                         call_616839.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616839, url, valid)

proc call*(call_616840: Call_GetCreateOrUpdateTags_616826; Tags: JsonNode;
          Action: string = "CreateOrUpdateTags"; Version: string = "2011-01-01"): Recallable =
  ## getCreateOrUpdateTags
  ## <p>Creates or updates tags for the specified Auto Scaling group.</p> <p>When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Tags: JArray (required)
  ##       : One or more tags.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616841 = newJObject()
  if Tags != nil:
    query_616841.add "Tags", Tags
  add(query_616841, "Action", newJString(Action))
  add(query_616841, "Version", newJString(Version))
  result = call_616840.call(nil, query_616841, nil, nil, nil)

var getCreateOrUpdateTags* = Call_GetCreateOrUpdateTags_616826(
    name: "getCreateOrUpdateTags", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=CreateOrUpdateTags",
    validator: validate_GetCreateOrUpdateTags_616827, base: "/",
    url: url_GetCreateOrUpdateTags_616828, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteAutoScalingGroup_616876 = ref object of OpenApiRestCall_615866
proc url_PostDeleteAutoScalingGroup_616878(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteAutoScalingGroup_616877(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified Auto Scaling group.</p> <p>If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed.</p> <p>If the group has policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.</p> <p>To remove instances from the Auto Scaling group before deleting it, call <a>DetachInstances</a> with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.</p> <p>To terminate all instances before deleting the Auto Scaling group, call <a>UpdateAutoScalingGroup</a> and set the minimum size and desired capacity of the Auto Scaling group to zero.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616879 = query.getOrDefault("Action")
  valid_616879 = validateParameter(valid_616879, JString, required = true,
                                 default = newJString("DeleteAutoScalingGroup"))
  if valid_616879 != nil:
    section.add "Action", valid_616879
  var valid_616880 = query.getOrDefault("Version")
  valid_616880 = validateParameter(valid_616880, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_616880 != nil:
    section.add "Version", valid_616880
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_616881 = header.getOrDefault("X-Amz-Date")
  valid_616881 = validateParameter(valid_616881, JString, required = false,
                                 default = nil)
  if valid_616881 != nil:
    section.add "X-Amz-Date", valid_616881
  var valid_616882 = header.getOrDefault("X-Amz-Security-Token")
  valid_616882 = validateParameter(valid_616882, JString, required = false,
                                 default = nil)
  if valid_616882 != nil:
    section.add "X-Amz-Security-Token", valid_616882
  var valid_616883 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616883 = validateParameter(valid_616883, JString, required = false,
                                 default = nil)
  if valid_616883 != nil:
    section.add "X-Amz-Content-Sha256", valid_616883
  var valid_616884 = header.getOrDefault("X-Amz-Algorithm")
  valid_616884 = validateParameter(valid_616884, JString, required = false,
                                 default = nil)
  if valid_616884 != nil:
    section.add "X-Amz-Algorithm", valid_616884
  var valid_616885 = header.getOrDefault("X-Amz-Signature")
  valid_616885 = validateParameter(valid_616885, JString, required = false,
                                 default = nil)
  if valid_616885 != nil:
    section.add "X-Amz-Signature", valid_616885
  var valid_616886 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616886 = validateParameter(valid_616886, JString, required = false,
                                 default = nil)
  if valid_616886 != nil:
    section.add "X-Amz-SignedHeaders", valid_616886
  var valid_616887 = header.getOrDefault("X-Amz-Credential")
  valid_616887 = validateParameter(valid_616887, JString, required = false,
                                 default = nil)
  if valid_616887 != nil:
    section.add "X-Amz-Credential", valid_616887
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   ForceDelete: JBool
  ##              : Specifies that the group is to be deleted along with all instances associated with the group, without waiting for all instances to be terminated. This parameter also deletes any lifecycle actions associated with the group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_616888 = formData.getOrDefault("AutoScalingGroupName")
  valid_616888 = validateParameter(valid_616888, JString, required = true,
                                 default = nil)
  if valid_616888 != nil:
    section.add "AutoScalingGroupName", valid_616888
  var valid_616889 = formData.getOrDefault("ForceDelete")
  valid_616889 = validateParameter(valid_616889, JBool, required = false, default = nil)
  if valid_616889 != nil:
    section.add "ForceDelete", valid_616889
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616890: Call_PostDeleteAutoScalingGroup_616876; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified Auto Scaling group.</p> <p>If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed.</p> <p>If the group has policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.</p> <p>To remove instances from the Auto Scaling group before deleting it, call <a>DetachInstances</a> with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.</p> <p>To terminate all instances before deleting the Auto Scaling group, call <a>UpdateAutoScalingGroup</a> and set the minimum size and desired capacity of the Auto Scaling group to zero.</p>
  ## 
  let valid = call_616890.validator(path, query, header, formData, body)
  let scheme = call_616890.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616890.url(scheme.get, call_616890.host, call_616890.base,
                         call_616890.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616890, url, valid)

proc call*(call_616891: Call_PostDeleteAutoScalingGroup_616876;
          AutoScalingGroupName: string; ForceDelete: bool = false;
          Action: string = "DeleteAutoScalingGroup"; Version: string = "2011-01-01"): Recallable =
  ## postDeleteAutoScalingGroup
  ## <p>Deletes the specified Auto Scaling group.</p> <p>If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed.</p> <p>If the group has policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.</p> <p>To remove instances from the Auto Scaling group before deleting it, call <a>DetachInstances</a> with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.</p> <p>To terminate all instances before deleting the Auto Scaling group, call <a>UpdateAutoScalingGroup</a> and set the minimum size and desired capacity of the Auto Scaling group to zero.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   ForceDelete: bool
  ##              : Specifies that the group is to be deleted along with all instances associated with the group, without waiting for all instances to be terminated. This parameter also deletes any lifecycle actions associated with the group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616892 = newJObject()
  var formData_616893 = newJObject()
  add(formData_616893, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_616893, "ForceDelete", newJBool(ForceDelete))
  add(query_616892, "Action", newJString(Action))
  add(query_616892, "Version", newJString(Version))
  result = call_616891.call(nil, query_616892, nil, formData_616893, nil)

var postDeleteAutoScalingGroup* = Call_PostDeleteAutoScalingGroup_616876(
    name: "postDeleteAutoScalingGroup", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DeleteAutoScalingGroup",
    validator: validate_PostDeleteAutoScalingGroup_616877, base: "/",
    url: url_PostDeleteAutoScalingGroup_616878,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteAutoScalingGroup_616859 = ref object of OpenApiRestCall_615866
proc url_GetDeleteAutoScalingGroup_616861(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteAutoScalingGroup_616860(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified Auto Scaling group.</p> <p>If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed.</p> <p>If the group has policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.</p> <p>To remove instances from the Auto Scaling group before deleting it, call <a>DetachInstances</a> with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.</p> <p>To terminate all instances before deleting the Auto Scaling group, call <a>UpdateAutoScalingGroup</a> and set the minimum size and desired capacity of the Auto Scaling group to zero.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   ForceDelete: JBool
  ##              : Specifies that the group is to be deleted along with all instances associated with the group, without waiting for all instances to be terminated. This parameter also deletes any lifecycle actions associated with the group.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_616862 = query.getOrDefault("AutoScalingGroupName")
  valid_616862 = validateParameter(valid_616862, JString, required = true,
                                 default = nil)
  if valid_616862 != nil:
    section.add "AutoScalingGroupName", valid_616862
  var valid_616863 = query.getOrDefault("Action")
  valid_616863 = validateParameter(valid_616863, JString, required = true,
                                 default = newJString("DeleteAutoScalingGroup"))
  if valid_616863 != nil:
    section.add "Action", valid_616863
  var valid_616864 = query.getOrDefault("ForceDelete")
  valid_616864 = validateParameter(valid_616864, JBool, required = false, default = nil)
  if valid_616864 != nil:
    section.add "ForceDelete", valid_616864
  var valid_616865 = query.getOrDefault("Version")
  valid_616865 = validateParameter(valid_616865, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_616865 != nil:
    section.add "Version", valid_616865
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_616866 = header.getOrDefault("X-Amz-Date")
  valid_616866 = validateParameter(valid_616866, JString, required = false,
                                 default = nil)
  if valid_616866 != nil:
    section.add "X-Amz-Date", valid_616866
  var valid_616867 = header.getOrDefault("X-Amz-Security-Token")
  valid_616867 = validateParameter(valid_616867, JString, required = false,
                                 default = nil)
  if valid_616867 != nil:
    section.add "X-Amz-Security-Token", valid_616867
  var valid_616868 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616868 = validateParameter(valid_616868, JString, required = false,
                                 default = nil)
  if valid_616868 != nil:
    section.add "X-Amz-Content-Sha256", valid_616868
  var valid_616869 = header.getOrDefault("X-Amz-Algorithm")
  valid_616869 = validateParameter(valid_616869, JString, required = false,
                                 default = nil)
  if valid_616869 != nil:
    section.add "X-Amz-Algorithm", valid_616869
  var valid_616870 = header.getOrDefault("X-Amz-Signature")
  valid_616870 = validateParameter(valid_616870, JString, required = false,
                                 default = nil)
  if valid_616870 != nil:
    section.add "X-Amz-Signature", valid_616870
  var valid_616871 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616871 = validateParameter(valid_616871, JString, required = false,
                                 default = nil)
  if valid_616871 != nil:
    section.add "X-Amz-SignedHeaders", valid_616871
  var valid_616872 = header.getOrDefault("X-Amz-Credential")
  valid_616872 = validateParameter(valid_616872, JString, required = false,
                                 default = nil)
  if valid_616872 != nil:
    section.add "X-Amz-Credential", valid_616872
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616873: Call_GetDeleteAutoScalingGroup_616859; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified Auto Scaling group.</p> <p>If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed.</p> <p>If the group has policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.</p> <p>To remove instances from the Auto Scaling group before deleting it, call <a>DetachInstances</a> with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.</p> <p>To terminate all instances before deleting the Auto Scaling group, call <a>UpdateAutoScalingGroup</a> and set the minimum size and desired capacity of the Auto Scaling group to zero.</p>
  ## 
  let valid = call_616873.validator(path, query, header, formData, body)
  let scheme = call_616873.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616873.url(scheme.get, call_616873.host, call_616873.base,
                         call_616873.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616873, url, valid)

proc call*(call_616874: Call_GetDeleteAutoScalingGroup_616859;
          AutoScalingGroupName: string; Action: string = "DeleteAutoScalingGroup";
          ForceDelete: bool = false; Version: string = "2011-01-01"): Recallable =
  ## getDeleteAutoScalingGroup
  ## <p>Deletes the specified Auto Scaling group.</p> <p>If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed.</p> <p>If the group has policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.</p> <p>To remove instances from the Auto Scaling group before deleting it, call <a>DetachInstances</a> with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.</p> <p>To terminate all instances before deleting the Auto Scaling group, call <a>UpdateAutoScalingGroup</a> and set the minimum size and desired capacity of the Auto Scaling group to zero.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   ForceDelete: bool
  ##              : Specifies that the group is to be deleted along with all instances associated with the group, without waiting for all instances to be terminated. This parameter also deletes any lifecycle actions associated with the group.
  ##   Version: string (required)
  var query_616875 = newJObject()
  add(query_616875, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_616875, "Action", newJString(Action))
  add(query_616875, "ForceDelete", newJBool(ForceDelete))
  add(query_616875, "Version", newJString(Version))
  result = call_616874.call(nil, query_616875, nil, nil, nil)

var getDeleteAutoScalingGroup* = Call_GetDeleteAutoScalingGroup_616859(
    name: "getDeleteAutoScalingGroup", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DeleteAutoScalingGroup",
    validator: validate_GetDeleteAutoScalingGroup_616860, base: "/",
    url: url_GetDeleteAutoScalingGroup_616861,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteLaunchConfiguration_616910 = ref object of OpenApiRestCall_615866
proc url_PostDeleteLaunchConfiguration_616912(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteLaunchConfiguration_616911(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified launch configuration.</p> <p>The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616913 = query.getOrDefault("Action")
  valid_616913 = validateParameter(valid_616913, JString, required = true, default = newJString(
      "DeleteLaunchConfiguration"))
  if valid_616913 != nil:
    section.add "Action", valid_616913
  var valid_616914 = query.getOrDefault("Version")
  valid_616914 = validateParameter(valid_616914, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_616914 != nil:
    section.add "Version", valid_616914
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_616915 = header.getOrDefault("X-Amz-Date")
  valid_616915 = validateParameter(valid_616915, JString, required = false,
                                 default = nil)
  if valid_616915 != nil:
    section.add "X-Amz-Date", valid_616915
  var valid_616916 = header.getOrDefault("X-Amz-Security-Token")
  valid_616916 = validateParameter(valid_616916, JString, required = false,
                                 default = nil)
  if valid_616916 != nil:
    section.add "X-Amz-Security-Token", valid_616916
  var valid_616917 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616917 = validateParameter(valid_616917, JString, required = false,
                                 default = nil)
  if valid_616917 != nil:
    section.add "X-Amz-Content-Sha256", valid_616917
  var valid_616918 = header.getOrDefault("X-Amz-Algorithm")
  valid_616918 = validateParameter(valid_616918, JString, required = false,
                                 default = nil)
  if valid_616918 != nil:
    section.add "X-Amz-Algorithm", valid_616918
  var valid_616919 = header.getOrDefault("X-Amz-Signature")
  valid_616919 = validateParameter(valid_616919, JString, required = false,
                                 default = nil)
  if valid_616919 != nil:
    section.add "X-Amz-Signature", valid_616919
  var valid_616920 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616920 = validateParameter(valid_616920, JString, required = false,
                                 default = nil)
  if valid_616920 != nil:
    section.add "X-Amz-SignedHeaders", valid_616920
  var valid_616921 = header.getOrDefault("X-Amz-Credential")
  valid_616921 = validateParameter(valid_616921, JString, required = false,
                                 default = nil)
  if valid_616921 != nil:
    section.add "X-Amz-Credential", valid_616921
  result.add "header", section
  ## parameters in `formData` object:
  ##   LaunchConfigurationName: JString (required)
  ##                          : The name of the launch configuration.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `LaunchConfigurationName` field"
  var valid_616922 = formData.getOrDefault("LaunchConfigurationName")
  valid_616922 = validateParameter(valid_616922, JString, required = true,
                                 default = nil)
  if valid_616922 != nil:
    section.add "LaunchConfigurationName", valid_616922
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616923: Call_PostDeleteLaunchConfiguration_616910; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified launch configuration.</p> <p>The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.</p>
  ## 
  let valid = call_616923.validator(path, query, header, formData, body)
  let scheme = call_616923.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616923.url(scheme.get, call_616923.host, call_616923.base,
                         call_616923.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616923, url, valid)

proc call*(call_616924: Call_PostDeleteLaunchConfiguration_616910;
          LaunchConfigurationName: string;
          Action: string = "DeleteLaunchConfiguration";
          Version: string = "2011-01-01"): Recallable =
  ## postDeleteLaunchConfiguration
  ## <p>Deletes the specified launch configuration.</p> <p>The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.</p>
  ##   LaunchConfigurationName: string (required)
  ##                          : The name of the launch configuration.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616925 = newJObject()
  var formData_616926 = newJObject()
  add(formData_616926, "LaunchConfigurationName",
      newJString(LaunchConfigurationName))
  add(query_616925, "Action", newJString(Action))
  add(query_616925, "Version", newJString(Version))
  result = call_616924.call(nil, query_616925, nil, formData_616926, nil)

var postDeleteLaunchConfiguration* = Call_PostDeleteLaunchConfiguration_616910(
    name: "postDeleteLaunchConfiguration", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DeleteLaunchConfiguration",
    validator: validate_PostDeleteLaunchConfiguration_616911, base: "/",
    url: url_PostDeleteLaunchConfiguration_616912,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteLaunchConfiguration_616894 = ref object of OpenApiRestCall_615866
proc url_GetDeleteLaunchConfiguration_616896(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteLaunchConfiguration_616895(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified launch configuration.</p> <p>The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   LaunchConfigurationName: JString (required)
  ##                          : The name of the launch configuration.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `LaunchConfigurationName` field"
  var valid_616897 = query.getOrDefault("LaunchConfigurationName")
  valid_616897 = validateParameter(valid_616897, JString, required = true,
                                 default = nil)
  if valid_616897 != nil:
    section.add "LaunchConfigurationName", valid_616897
  var valid_616898 = query.getOrDefault("Action")
  valid_616898 = validateParameter(valid_616898, JString, required = true, default = newJString(
      "DeleteLaunchConfiguration"))
  if valid_616898 != nil:
    section.add "Action", valid_616898
  var valid_616899 = query.getOrDefault("Version")
  valid_616899 = validateParameter(valid_616899, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_616899 != nil:
    section.add "Version", valid_616899
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_616900 = header.getOrDefault("X-Amz-Date")
  valid_616900 = validateParameter(valid_616900, JString, required = false,
                                 default = nil)
  if valid_616900 != nil:
    section.add "X-Amz-Date", valid_616900
  var valid_616901 = header.getOrDefault("X-Amz-Security-Token")
  valid_616901 = validateParameter(valid_616901, JString, required = false,
                                 default = nil)
  if valid_616901 != nil:
    section.add "X-Amz-Security-Token", valid_616901
  var valid_616902 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616902 = validateParameter(valid_616902, JString, required = false,
                                 default = nil)
  if valid_616902 != nil:
    section.add "X-Amz-Content-Sha256", valid_616902
  var valid_616903 = header.getOrDefault("X-Amz-Algorithm")
  valid_616903 = validateParameter(valid_616903, JString, required = false,
                                 default = nil)
  if valid_616903 != nil:
    section.add "X-Amz-Algorithm", valid_616903
  var valid_616904 = header.getOrDefault("X-Amz-Signature")
  valid_616904 = validateParameter(valid_616904, JString, required = false,
                                 default = nil)
  if valid_616904 != nil:
    section.add "X-Amz-Signature", valid_616904
  var valid_616905 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616905 = validateParameter(valid_616905, JString, required = false,
                                 default = nil)
  if valid_616905 != nil:
    section.add "X-Amz-SignedHeaders", valid_616905
  var valid_616906 = header.getOrDefault("X-Amz-Credential")
  valid_616906 = validateParameter(valid_616906, JString, required = false,
                                 default = nil)
  if valid_616906 != nil:
    section.add "X-Amz-Credential", valid_616906
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616907: Call_GetDeleteLaunchConfiguration_616894; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified launch configuration.</p> <p>The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.</p>
  ## 
  let valid = call_616907.validator(path, query, header, formData, body)
  let scheme = call_616907.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616907.url(scheme.get, call_616907.host, call_616907.base,
                         call_616907.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616907, url, valid)

proc call*(call_616908: Call_GetDeleteLaunchConfiguration_616894;
          LaunchConfigurationName: string;
          Action: string = "DeleteLaunchConfiguration";
          Version: string = "2011-01-01"): Recallable =
  ## getDeleteLaunchConfiguration
  ## <p>Deletes the specified launch configuration.</p> <p>The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.</p>
  ##   LaunchConfigurationName: string (required)
  ##                          : The name of the launch configuration.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616909 = newJObject()
  add(query_616909, "LaunchConfigurationName", newJString(LaunchConfigurationName))
  add(query_616909, "Action", newJString(Action))
  add(query_616909, "Version", newJString(Version))
  result = call_616908.call(nil, query_616909, nil, nil, nil)

var getDeleteLaunchConfiguration* = Call_GetDeleteLaunchConfiguration_616894(
    name: "getDeleteLaunchConfiguration", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DeleteLaunchConfiguration",
    validator: validate_GetDeleteLaunchConfiguration_616895, base: "/",
    url: url_GetDeleteLaunchConfiguration_616896,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteLifecycleHook_616944 = ref object of OpenApiRestCall_615866
proc url_PostDeleteLifecycleHook_616946(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteLifecycleHook_616945(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified lifecycle hook.</p> <p>If there are any outstanding lifecycle actions, they are completed first (<code>ABANDON</code> for launching instances, <code>CONTINUE</code> for terminating instances).</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616947 = query.getOrDefault("Action")
  valid_616947 = validateParameter(valid_616947, JString, required = true,
                                 default = newJString("DeleteLifecycleHook"))
  if valid_616947 != nil:
    section.add "Action", valid_616947
  var valid_616948 = query.getOrDefault("Version")
  valid_616948 = validateParameter(valid_616948, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_616948 != nil:
    section.add "Version", valid_616948
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_616949 = header.getOrDefault("X-Amz-Date")
  valid_616949 = validateParameter(valid_616949, JString, required = false,
                                 default = nil)
  if valid_616949 != nil:
    section.add "X-Amz-Date", valid_616949
  var valid_616950 = header.getOrDefault("X-Amz-Security-Token")
  valid_616950 = validateParameter(valid_616950, JString, required = false,
                                 default = nil)
  if valid_616950 != nil:
    section.add "X-Amz-Security-Token", valid_616950
  var valid_616951 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616951 = validateParameter(valid_616951, JString, required = false,
                                 default = nil)
  if valid_616951 != nil:
    section.add "X-Amz-Content-Sha256", valid_616951
  var valid_616952 = header.getOrDefault("X-Amz-Algorithm")
  valid_616952 = validateParameter(valid_616952, JString, required = false,
                                 default = nil)
  if valid_616952 != nil:
    section.add "X-Amz-Algorithm", valid_616952
  var valid_616953 = header.getOrDefault("X-Amz-Signature")
  valid_616953 = validateParameter(valid_616953, JString, required = false,
                                 default = nil)
  if valid_616953 != nil:
    section.add "X-Amz-Signature", valid_616953
  var valid_616954 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616954 = validateParameter(valid_616954, JString, required = false,
                                 default = nil)
  if valid_616954 != nil:
    section.add "X-Amz-SignedHeaders", valid_616954
  var valid_616955 = header.getOrDefault("X-Amz-Credential")
  valid_616955 = validateParameter(valid_616955, JString, required = false,
                                 default = nil)
  if valid_616955 != nil:
    section.add "X-Amz-Credential", valid_616955
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_616956 = formData.getOrDefault("AutoScalingGroupName")
  valid_616956 = validateParameter(valid_616956, JString, required = true,
                                 default = nil)
  if valid_616956 != nil:
    section.add "AutoScalingGroupName", valid_616956
  var valid_616957 = formData.getOrDefault("LifecycleHookName")
  valid_616957 = validateParameter(valid_616957, JString, required = true,
                                 default = nil)
  if valid_616957 != nil:
    section.add "LifecycleHookName", valid_616957
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616958: Call_PostDeleteLifecycleHook_616944; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified lifecycle hook.</p> <p>If there are any outstanding lifecycle actions, they are completed first (<code>ABANDON</code> for launching instances, <code>CONTINUE</code> for terminating instances).</p>
  ## 
  let valid = call_616958.validator(path, query, header, formData, body)
  let scheme = call_616958.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616958.url(scheme.get, call_616958.host, call_616958.base,
                         call_616958.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616958, url, valid)

proc call*(call_616959: Call_PostDeleteLifecycleHook_616944;
          AutoScalingGroupName: string; LifecycleHookName: string;
          Action: string = "DeleteLifecycleHook"; Version: string = "2011-01-01"): Recallable =
  ## postDeleteLifecycleHook
  ## <p>Deletes the specified lifecycle hook.</p> <p>If there are any outstanding lifecycle actions, they are completed first (<code>ABANDON</code> for launching instances, <code>CONTINUE</code> for terminating instances).</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   Version: string (required)
  var query_616960 = newJObject()
  var formData_616961 = newJObject()
  add(formData_616961, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_616960, "Action", newJString(Action))
  add(formData_616961, "LifecycleHookName", newJString(LifecycleHookName))
  add(query_616960, "Version", newJString(Version))
  result = call_616959.call(nil, query_616960, nil, formData_616961, nil)

var postDeleteLifecycleHook* = Call_PostDeleteLifecycleHook_616944(
    name: "postDeleteLifecycleHook", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DeleteLifecycleHook",
    validator: validate_PostDeleteLifecycleHook_616945, base: "/",
    url: url_PostDeleteLifecycleHook_616946, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteLifecycleHook_616927 = ref object of OpenApiRestCall_615866
proc url_GetDeleteLifecycleHook_616929(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteLifecycleHook_616928(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified lifecycle hook.</p> <p>If there are any outstanding lifecycle actions, they are completed first (<code>ABANDON</code> for launching instances, <code>CONTINUE</code> for terminating instances).</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_616930 = query.getOrDefault("AutoScalingGroupName")
  valid_616930 = validateParameter(valid_616930, JString, required = true,
                                 default = nil)
  if valid_616930 != nil:
    section.add "AutoScalingGroupName", valid_616930
  var valid_616931 = query.getOrDefault("Action")
  valid_616931 = validateParameter(valid_616931, JString, required = true,
                                 default = newJString("DeleteLifecycleHook"))
  if valid_616931 != nil:
    section.add "Action", valid_616931
  var valid_616932 = query.getOrDefault("LifecycleHookName")
  valid_616932 = validateParameter(valid_616932, JString, required = true,
                                 default = nil)
  if valid_616932 != nil:
    section.add "LifecycleHookName", valid_616932
  var valid_616933 = query.getOrDefault("Version")
  valid_616933 = validateParameter(valid_616933, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_616933 != nil:
    section.add "Version", valid_616933
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_616934 = header.getOrDefault("X-Amz-Date")
  valid_616934 = validateParameter(valid_616934, JString, required = false,
                                 default = nil)
  if valid_616934 != nil:
    section.add "X-Amz-Date", valid_616934
  var valid_616935 = header.getOrDefault("X-Amz-Security-Token")
  valid_616935 = validateParameter(valid_616935, JString, required = false,
                                 default = nil)
  if valid_616935 != nil:
    section.add "X-Amz-Security-Token", valid_616935
  var valid_616936 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616936 = validateParameter(valid_616936, JString, required = false,
                                 default = nil)
  if valid_616936 != nil:
    section.add "X-Amz-Content-Sha256", valid_616936
  var valid_616937 = header.getOrDefault("X-Amz-Algorithm")
  valid_616937 = validateParameter(valid_616937, JString, required = false,
                                 default = nil)
  if valid_616937 != nil:
    section.add "X-Amz-Algorithm", valid_616937
  var valid_616938 = header.getOrDefault("X-Amz-Signature")
  valid_616938 = validateParameter(valid_616938, JString, required = false,
                                 default = nil)
  if valid_616938 != nil:
    section.add "X-Amz-Signature", valid_616938
  var valid_616939 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616939 = validateParameter(valid_616939, JString, required = false,
                                 default = nil)
  if valid_616939 != nil:
    section.add "X-Amz-SignedHeaders", valid_616939
  var valid_616940 = header.getOrDefault("X-Amz-Credential")
  valid_616940 = validateParameter(valid_616940, JString, required = false,
                                 default = nil)
  if valid_616940 != nil:
    section.add "X-Amz-Credential", valid_616940
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616941: Call_GetDeleteLifecycleHook_616927; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified lifecycle hook.</p> <p>If there are any outstanding lifecycle actions, they are completed first (<code>ABANDON</code> for launching instances, <code>CONTINUE</code> for terminating instances).</p>
  ## 
  let valid = call_616941.validator(path, query, header, formData, body)
  let scheme = call_616941.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616941.url(scheme.get, call_616941.host, call_616941.base,
                         call_616941.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616941, url, valid)

proc call*(call_616942: Call_GetDeleteLifecycleHook_616927;
          AutoScalingGroupName: string; LifecycleHookName: string;
          Action: string = "DeleteLifecycleHook"; Version: string = "2011-01-01"): Recallable =
  ## getDeleteLifecycleHook
  ## <p>Deletes the specified lifecycle hook.</p> <p>If there are any outstanding lifecycle actions, they are completed first (<code>ABANDON</code> for launching instances, <code>CONTINUE</code> for terminating instances).</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   Version: string (required)
  var query_616943 = newJObject()
  add(query_616943, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_616943, "Action", newJString(Action))
  add(query_616943, "LifecycleHookName", newJString(LifecycleHookName))
  add(query_616943, "Version", newJString(Version))
  result = call_616942.call(nil, query_616943, nil, nil, nil)

var getDeleteLifecycleHook* = Call_GetDeleteLifecycleHook_616927(
    name: "getDeleteLifecycleHook", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DeleteLifecycleHook",
    validator: validate_GetDeleteLifecycleHook_616928, base: "/",
    url: url_GetDeleteLifecycleHook_616929, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteNotificationConfiguration_616979 = ref object of OpenApiRestCall_615866
proc url_PostDeleteNotificationConfiguration_616981(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteNotificationConfiguration_616980(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified notification.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616982 = query.getOrDefault("Action")
  valid_616982 = validateParameter(valid_616982, JString, required = true, default = newJString(
      "DeleteNotificationConfiguration"))
  if valid_616982 != nil:
    section.add "Action", valid_616982
  var valid_616983 = query.getOrDefault("Version")
  valid_616983 = validateParameter(valid_616983, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_616983 != nil:
    section.add "Version", valid_616983
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_616984 = header.getOrDefault("X-Amz-Date")
  valid_616984 = validateParameter(valid_616984, JString, required = false,
                                 default = nil)
  if valid_616984 != nil:
    section.add "X-Amz-Date", valid_616984
  var valid_616985 = header.getOrDefault("X-Amz-Security-Token")
  valid_616985 = validateParameter(valid_616985, JString, required = false,
                                 default = nil)
  if valid_616985 != nil:
    section.add "X-Amz-Security-Token", valid_616985
  var valid_616986 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616986 = validateParameter(valid_616986, JString, required = false,
                                 default = nil)
  if valid_616986 != nil:
    section.add "X-Amz-Content-Sha256", valid_616986
  var valid_616987 = header.getOrDefault("X-Amz-Algorithm")
  valid_616987 = validateParameter(valid_616987, JString, required = false,
                                 default = nil)
  if valid_616987 != nil:
    section.add "X-Amz-Algorithm", valid_616987
  var valid_616988 = header.getOrDefault("X-Amz-Signature")
  valid_616988 = validateParameter(valid_616988, JString, required = false,
                                 default = nil)
  if valid_616988 != nil:
    section.add "X-Amz-Signature", valid_616988
  var valid_616989 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616989 = validateParameter(valid_616989, JString, required = false,
                                 default = nil)
  if valid_616989 != nil:
    section.add "X-Amz-SignedHeaders", valid_616989
  var valid_616990 = header.getOrDefault("X-Amz-Credential")
  valid_616990 = validateParameter(valid_616990, JString, required = false,
                                 default = nil)
  if valid_616990 != nil:
    section.add "X-Amz-Credential", valid_616990
  result.add "header", section
  ## parameters in `formData` object:
  ##   TopicARN: JString (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TopicARN` field"
  var valid_616991 = formData.getOrDefault("TopicARN")
  valid_616991 = validateParameter(valid_616991, JString, required = true,
                                 default = nil)
  if valid_616991 != nil:
    section.add "TopicARN", valid_616991
  var valid_616992 = formData.getOrDefault("AutoScalingGroupName")
  valid_616992 = validateParameter(valid_616992, JString, required = true,
                                 default = nil)
  if valid_616992 != nil:
    section.add "AutoScalingGroupName", valid_616992
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616993: Call_PostDeleteNotificationConfiguration_616979;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes the specified notification.
  ## 
  let valid = call_616993.validator(path, query, header, formData, body)
  let scheme = call_616993.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616993.url(scheme.get, call_616993.host, call_616993.base,
                         call_616993.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616993, url, valid)

proc call*(call_616994: Call_PostDeleteNotificationConfiguration_616979;
          TopicARN: string; AutoScalingGroupName: string;
          Action: string = "DeleteNotificationConfiguration";
          Version: string = "2011-01-01"): Recallable =
  ## postDeleteNotificationConfiguration
  ## Deletes the specified notification.
  ##   TopicARN: string (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616995 = newJObject()
  var formData_616996 = newJObject()
  add(formData_616996, "TopicARN", newJString(TopicARN))
  add(formData_616996, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_616995, "Action", newJString(Action))
  add(query_616995, "Version", newJString(Version))
  result = call_616994.call(nil, query_616995, nil, formData_616996, nil)

var postDeleteNotificationConfiguration* = Call_PostDeleteNotificationConfiguration_616979(
    name: "postDeleteNotificationConfiguration", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DeleteNotificationConfiguration",
    validator: validate_PostDeleteNotificationConfiguration_616980, base: "/",
    url: url_PostDeleteNotificationConfiguration_616981,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteNotificationConfiguration_616962 = ref object of OpenApiRestCall_615866
proc url_GetDeleteNotificationConfiguration_616964(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteNotificationConfiguration_616963(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified notification.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   TopicARN: JString (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_616965 = query.getOrDefault("AutoScalingGroupName")
  valid_616965 = validateParameter(valid_616965, JString, required = true,
                                 default = nil)
  if valid_616965 != nil:
    section.add "AutoScalingGroupName", valid_616965
  var valid_616966 = query.getOrDefault("Action")
  valid_616966 = validateParameter(valid_616966, JString, required = true, default = newJString(
      "DeleteNotificationConfiguration"))
  if valid_616966 != nil:
    section.add "Action", valid_616966
  var valid_616967 = query.getOrDefault("TopicARN")
  valid_616967 = validateParameter(valid_616967, JString, required = true,
                                 default = nil)
  if valid_616967 != nil:
    section.add "TopicARN", valid_616967
  var valid_616968 = query.getOrDefault("Version")
  valid_616968 = validateParameter(valid_616968, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_616968 != nil:
    section.add "Version", valid_616968
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_616969 = header.getOrDefault("X-Amz-Date")
  valid_616969 = validateParameter(valid_616969, JString, required = false,
                                 default = nil)
  if valid_616969 != nil:
    section.add "X-Amz-Date", valid_616969
  var valid_616970 = header.getOrDefault("X-Amz-Security-Token")
  valid_616970 = validateParameter(valid_616970, JString, required = false,
                                 default = nil)
  if valid_616970 != nil:
    section.add "X-Amz-Security-Token", valid_616970
  var valid_616971 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616971 = validateParameter(valid_616971, JString, required = false,
                                 default = nil)
  if valid_616971 != nil:
    section.add "X-Amz-Content-Sha256", valid_616971
  var valid_616972 = header.getOrDefault("X-Amz-Algorithm")
  valid_616972 = validateParameter(valid_616972, JString, required = false,
                                 default = nil)
  if valid_616972 != nil:
    section.add "X-Amz-Algorithm", valid_616972
  var valid_616973 = header.getOrDefault("X-Amz-Signature")
  valid_616973 = validateParameter(valid_616973, JString, required = false,
                                 default = nil)
  if valid_616973 != nil:
    section.add "X-Amz-Signature", valid_616973
  var valid_616974 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616974 = validateParameter(valid_616974, JString, required = false,
                                 default = nil)
  if valid_616974 != nil:
    section.add "X-Amz-SignedHeaders", valid_616974
  var valid_616975 = header.getOrDefault("X-Amz-Credential")
  valid_616975 = validateParameter(valid_616975, JString, required = false,
                                 default = nil)
  if valid_616975 != nil:
    section.add "X-Amz-Credential", valid_616975
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616976: Call_GetDeleteNotificationConfiguration_616962;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes the specified notification.
  ## 
  let valid = call_616976.validator(path, query, header, formData, body)
  let scheme = call_616976.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616976.url(scheme.get, call_616976.host, call_616976.base,
                         call_616976.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616976, url, valid)

proc call*(call_616977: Call_GetDeleteNotificationConfiguration_616962;
          AutoScalingGroupName: string; TopicARN: string;
          Action: string = "DeleteNotificationConfiguration";
          Version: string = "2011-01-01"): Recallable =
  ## getDeleteNotificationConfiguration
  ## Deletes the specified notification.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   TopicARN: string (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   Version: string (required)
  var query_616978 = newJObject()
  add(query_616978, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_616978, "Action", newJString(Action))
  add(query_616978, "TopicARN", newJString(TopicARN))
  add(query_616978, "Version", newJString(Version))
  result = call_616977.call(nil, query_616978, nil, nil, nil)

var getDeleteNotificationConfiguration* = Call_GetDeleteNotificationConfiguration_616962(
    name: "getDeleteNotificationConfiguration", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DeleteNotificationConfiguration",
    validator: validate_GetDeleteNotificationConfiguration_616963, base: "/",
    url: url_GetDeleteNotificationConfiguration_616964,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeletePolicy_617014 = ref object of OpenApiRestCall_615866
proc url_PostDeletePolicy_617016(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeletePolicy_617015(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Deletes the specified scaling policy.</p> <p>Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html">Deleting a Scaling Policy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617017 = query.getOrDefault("Action")
  valid_617017 = validateParameter(valid_617017, JString, required = true,
                                 default = newJString("DeletePolicy"))
  if valid_617017 != nil:
    section.add "Action", valid_617017
  var valid_617018 = query.getOrDefault("Version")
  valid_617018 = validateParameter(valid_617018, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617018 != nil:
    section.add "Version", valid_617018
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617019 = header.getOrDefault("X-Amz-Date")
  valid_617019 = validateParameter(valid_617019, JString, required = false,
                                 default = nil)
  if valid_617019 != nil:
    section.add "X-Amz-Date", valid_617019
  var valid_617020 = header.getOrDefault("X-Amz-Security-Token")
  valid_617020 = validateParameter(valid_617020, JString, required = false,
                                 default = nil)
  if valid_617020 != nil:
    section.add "X-Amz-Security-Token", valid_617020
  var valid_617021 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617021 = validateParameter(valid_617021, JString, required = false,
                                 default = nil)
  if valid_617021 != nil:
    section.add "X-Amz-Content-Sha256", valid_617021
  var valid_617022 = header.getOrDefault("X-Amz-Algorithm")
  valid_617022 = validateParameter(valid_617022, JString, required = false,
                                 default = nil)
  if valid_617022 != nil:
    section.add "X-Amz-Algorithm", valid_617022
  var valid_617023 = header.getOrDefault("X-Amz-Signature")
  valid_617023 = validateParameter(valid_617023, JString, required = false,
                                 default = nil)
  if valid_617023 != nil:
    section.add "X-Amz-Signature", valid_617023
  var valid_617024 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617024 = validateParameter(valid_617024, JString, required = false,
                                 default = nil)
  if valid_617024 != nil:
    section.add "X-Amz-SignedHeaders", valid_617024
  var valid_617025 = header.getOrDefault("X-Amz-Credential")
  valid_617025 = validateParameter(valid_617025, JString, required = false,
                                 default = nil)
  if valid_617025 != nil:
    section.add "X-Amz-Credential", valid_617025
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   PolicyName: JString (required)
  ##             : The name or Amazon Resource Name (ARN) of the policy.
  section = newJObject()
  var valid_617026 = formData.getOrDefault("AutoScalingGroupName")
  valid_617026 = validateParameter(valid_617026, JString, required = false,
                                 default = nil)
  if valid_617026 != nil:
    section.add "AutoScalingGroupName", valid_617026
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_617027 = formData.getOrDefault("PolicyName")
  valid_617027 = validateParameter(valid_617027, JString, required = true,
                                 default = nil)
  if valid_617027 != nil:
    section.add "PolicyName", valid_617027
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617028: Call_PostDeletePolicy_617014; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified scaling policy.</p> <p>Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html">Deleting a Scaling Policy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_617028.validator(path, query, header, formData, body)
  let scheme = call_617028.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617028.url(scheme.get, call_617028.host, call_617028.base,
                         call_617028.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617028, url, valid)

proc call*(call_617029: Call_PostDeletePolicy_617014; PolicyName: string;
          AutoScalingGroupName: string = ""; Action: string = "DeletePolicy";
          Version: string = "2011-01-01"): Recallable =
  ## postDeletePolicy
  ## <p>Deletes the specified scaling policy.</p> <p>Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html">Deleting a Scaling Policy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   PolicyName: string (required)
  ##             : The name or Amazon Resource Name (ARN) of the policy.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617030 = newJObject()
  var formData_617031 = newJObject()
  add(formData_617031, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_617031, "PolicyName", newJString(PolicyName))
  add(query_617030, "Action", newJString(Action))
  add(query_617030, "Version", newJString(Version))
  result = call_617029.call(nil, query_617030, nil, formData_617031, nil)

var postDeletePolicy* = Call_PostDeletePolicy_617014(name: "postDeletePolicy",
    meth: HttpMethod.HttpPost, host: "autoscaling.amazonaws.com",
    route: "/#Action=DeletePolicy", validator: validate_PostDeletePolicy_617015,
    base: "/", url: url_PostDeletePolicy_617016,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeletePolicy_616997 = ref object of OpenApiRestCall_615866
proc url_GetDeletePolicy_616999(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeletePolicy_616998(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Deletes the specified scaling policy.</p> <p>Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html">Deleting a Scaling Policy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : The name or Amazon Resource Name (ARN) of the policy.
  section = newJObject()
  var valid_617000 = query.getOrDefault("AutoScalingGroupName")
  valid_617000 = validateParameter(valid_617000, JString, required = false,
                                 default = nil)
  if valid_617000 != nil:
    section.add "AutoScalingGroupName", valid_617000
  var valid_617001 = query.getOrDefault("Action")
  valid_617001 = validateParameter(valid_617001, JString, required = true,
                                 default = newJString("DeletePolicy"))
  if valid_617001 != nil:
    section.add "Action", valid_617001
  var valid_617002 = query.getOrDefault("Version")
  valid_617002 = validateParameter(valid_617002, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617002 != nil:
    section.add "Version", valid_617002
  var valid_617003 = query.getOrDefault("PolicyName")
  valid_617003 = validateParameter(valid_617003, JString, required = true,
                                 default = nil)
  if valid_617003 != nil:
    section.add "PolicyName", valid_617003
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617004 = header.getOrDefault("X-Amz-Date")
  valid_617004 = validateParameter(valid_617004, JString, required = false,
                                 default = nil)
  if valid_617004 != nil:
    section.add "X-Amz-Date", valid_617004
  var valid_617005 = header.getOrDefault("X-Amz-Security-Token")
  valid_617005 = validateParameter(valid_617005, JString, required = false,
                                 default = nil)
  if valid_617005 != nil:
    section.add "X-Amz-Security-Token", valid_617005
  var valid_617006 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617006 = validateParameter(valid_617006, JString, required = false,
                                 default = nil)
  if valid_617006 != nil:
    section.add "X-Amz-Content-Sha256", valid_617006
  var valid_617007 = header.getOrDefault("X-Amz-Algorithm")
  valid_617007 = validateParameter(valid_617007, JString, required = false,
                                 default = nil)
  if valid_617007 != nil:
    section.add "X-Amz-Algorithm", valid_617007
  var valid_617008 = header.getOrDefault("X-Amz-Signature")
  valid_617008 = validateParameter(valid_617008, JString, required = false,
                                 default = nil)
  if valid_617008 != nil:
    section.add "X-Amz-Signature", valid_617008
  var valid_617009 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617009 = validateParameter(valid_617009, JString, required = false,
                                 default = nil)
  if valid_617009 != nil:
    section.add "X-Amz-SignedHeaders", valid_617009
  var valid_617010 = header.getOrDefault("X-Amz-Credential")
  valid_617010 = validateParameter(valid_617010, JString, required = false,
                                 default = nil)
  if valid_617010 != nil:
    section.add "X-Amz-Credential", valid_617010
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617011: Call_GetDeletePolicy_616997; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified scaling policy.</p> <p>Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html">Deleting a Scaling Policy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_617011.validator(path, query, header, formData, body)
  let scheme = call_617011.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617011.url(scheme.get, call_617011.host, call_617011.base,
                         call_617011.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617011, url, valid)

proc call*(call_617012: Call_GetDeletePolicy_616997; PolicyName: string;
          AutoScalingGroupName: string = ""; Action: string = "DeletePolicy";
          Version: string = "2011-01-01"): Recallable =
  ## getDeletePolicy
  ## <p>Deletes the specified scaling policy.</p> <p>Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html">Deleting a Scaling Policy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : The name or Amazon Resource Name (ARN) of the policy.
  var query_617013 = newJObject()
  add(query_617013, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_617013, "Action", newJString(Action))
  add(query_617013, "Version", newJString(Version))
  add(query_617013, "PolicyName", newJString(PolicyName))
  result = call_617012.call(nil, query_617013, nil, nil, nil)

var getDeletePolicy* = Call_GetDeletePolicy_616997(name: "getDeletePolicy",
    meth: HttpMethod.HttpGet, host: "autoscaling.amazonaws.com",
    route: "/#Action=DeletePolicy", validator: validate_GetDeletePolicy_616998,
    base: "/", url: url_GetDeletePolicy_616999, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteScheduledAction_617049 = ref object of OpenApiRestCall_615866
proc url_PostDeleteScheduledAction_617051(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteScheduledAction_617050(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified scheduled action.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617052 = query.getOrDefault("Action")
  valid_617052 = validateParameter(valid_617052, JString, required = true,
                                 default = newJString("DeleteScheduledAction"))
  if valid_617052 != nil:
    section.add "Action", valid_617052
  var valid_617053 = query.getOrDefault("Version")
  valid_617053 = validateParameter(valid_617053, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617053 != nil:
    section.add "Version", valid_617053
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617054 = header.getOrDefault("X-Amz-Date")
  valid_617054 = validateParameter(valid_617054, JString, required = false,
                                 default = nil)
  if valid_617054 != nil:
    section.add "X-Amz-Date", valid_617054
  var valid_617055 = header.getOrDefault("X-Amz-Security-Token")
  valid_617055 = validateParameter(valid_617055, JString, required = false,
                                 default = nil)
  if valid_617055 != nil:
    section.add "X-Amz-Security-Token", valid_617055
  var valid_617056 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617056 = validateParameter(valid_617056, JString, required = false,
                                 default = nil)
  if valid_617056 != nil:
    section.add "X-Amz-Content-Sha256", valid_617056
  var valid_617057 = header.getOrDefault("X-Amz-Algorithm")
  valid_617057 = validateParameter(valid_617057, JString, required = false,
                                 default = nil)
  if valid_617057 != nil:
    section.add "X-Amz-Algorithm", valid_617057
  var valid_617058 = header.getOrDefault("X-Amz-Signature")
  valid_617058 = validateParameter(valid_617058, JString, required = false,
                                 default = nil)
  if valid_617058 != nil:
    section.add "X-Amz-Signature", valid_617058
  var valid_617059 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617059 = validateParameter(valid_617059, JString, required = false,
                                 default = nil)
  if valid_617059 != nil:
    section.add "X-Amz-SignedHeaders", valid_617059
  var valid_617060 = header.getOrDefault("X-Amz-Credential")
  valid_617060 = validateParameter(valid_617060, JString, required = false,
                                 default = nil)
  if valid_617060 != nil:
    section.add "X-Amz-Credential", valid_617060
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScheduledActionName: JString (required)
  ##                      : The name of the action to delete.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_617061 = formData.getOrDefault("AutoScalingGroupName")
  valid_617061 = validateParameter(valid_617061, JString, required = true,
                                 default = nil)
  if valid_617061 != nil:
    section.add "AutoScalingGroupName", valid_617061
  var valid_617062 = formData.getOrDefault("ScheduledActionName")
  valid_617062 = validateParameter(valid_617062, JString, required = true,
                                 default = nil)
  if valid_617062 != nil:
    section.add "ScheduledActionName", valid_617062
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617063: Call_PostDeleteScheduledAction_617049; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified scheduled action.
  ## 
  let valid = call_617063.validator(path, query, header, formData, body)
  let scheme = call_617063.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617063.url(scheme.get, call_617063.host, call_617063.base,
                         call_617063.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617063, url, valid)

proc call*(call_617064: Call_PostDeleteScheduledAction_617049;
          AutoScalingGroupName: string; ScheduledActionName: string;
          Action: string = "DeleteScheduledAction"; Version: string = "2011-01-01"): Recallable =
  ## postDeleteScheduledAction
  ## Deletes the specified scheduled action.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   ScheduledActionName: string (required)
  ##                      : The name of the action to delete.
  ##   Version: string (required)
  var query_617065 = newJObject()
  var formData_617066 = newJObject()
  add(formData_617066, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_617065, "Action", newJString(Action))
  add(formData_617066, "ScheduledActionName", newJString(ScheduledActionName))
  add(query_617065, "Version", newJString(Version))
  result = call_617064.call(nil, query_617065, nil, formData_617066, nil)

var postDeleteScheduledAction* = Call_PostDeleteScheduledAction_617049(
    name: "postDeleteScheduledAction", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DeleteScheduledAction",
    validator: validate_PostDeleteScheduledAction_617050, base: "/",
    url: url_PostDeleteScheduledAction_617051,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteScheduledAction_617032 = ref object of OpenApiRestCall_615866
proc url_GetDeleteScheduledAction_617034(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteScheduledAction_617033(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified scheduled action.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ScheduledActionName: JString (required)
  ##                      : The name of the action to delete.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ScheduledActionName` field"
  var valid_617035 = query.getOrDefault("ScheduledActionName")
  valid_617035 = validateParameter(valid_617035, JString, required = true,
                                 default = nil)
  if valid_617035 != nil:
    section.add "ScheduledActionName", valid_617035
  var valid_617036 = query.getOrDefault("AutoScalingGroupName")
  valid_617036 = validateParameter(valid_617036, JString, required = true,
                                 default = nil)
  if valid_617036 != nil:
    section.add "AutoScalingGroupName", valid_617036
  var valid_617037 = query.getOrDefault("Action")
  valid_617037 = validateParameter(valid_617037, JString, required = true,
                                 default = newJString("DeleteScheduledAction"))
  if valid_617037 != nil:
    section.add "Action", valid_617037
  var valid_617038 = query.getOrDefault("Version")
  valid_617038 = validateParameter(valid_617038, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617038 != nil:
    section.add "Version", valid_617038
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617039 = header.getOrDefault("X-Amz-Date")
  valid_617039 = validateParameter(valid_617039, JString, required = false,
                                 default = nil)
  if valid_617039 != nil:
    section.add "X-Amz-Date", valid_617039
  var valid_617040 = header.getOrDefault("X-Amz-Security-Token")
  valid_617040 = validateParameter(valid_617040, JString, required = false,
                                 default = nil)
  if valid_617040 != nil:
    section.add "X-Amz-Security-Token", valid_617040
  var valid_617041 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617041 = validateParameter(valid_617041, JString, required = false,
                                 default = nil)
  if valid_617041 != nil:
    section.add "X-Amz-Content-Sha256", valid_617041
  var valid_617042 = header.getOrDefault("X-Amz-Algorithm")
  valid_617042 = validateParameter(valid_617042, JString, required = false,
                                 default = nil)
  if valid_617042 != nil:
    section.add "X-Amz-Algorithm", valid_617042
  var valid_617043 = header.getOrDefault("X-Amz-Signature")
  valid_617043 = validateParameter(valid_617043, JString, required = false,
                                 default = nil)
  if valid_617043 != nil:
    section.add "X-Amz-Signature", valid_617043
  var valid_617044 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617044 = validateParameter(valid_617044, JString, required = false,
                                 default = nil)
  if valid_617044 != nil:
    section.add "X-Amz-SignedHeaders", valid_617044
  var valid_617045 = header.getOrDefault("X-Amz-Credential")
  valid_617045 = validateParameter(valid_617045, JString, required = false,
                                 default = nil)
  if valid_617045 != nil:
    section.add "X-Amz-Credential", valid_617045
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617046: Call_GetDeleteScheduledAction_617032; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified scheduled action.
  ## 
  let valid = call_617046.validator(path, query, header, formData, body)
  let scheme = call_617046.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617046.url(scheme.get, call_617046.host, call_617046.base,
                         call_617046.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617046, url, valid)

proc call*(call_617047: Call_GetDeleteScheduledAction_617032;
          ScheduledActionName: string; AutoScalingGroupName: string;
          Action: string = "DeleteScheduledAction"; Version: string = "2011-01-01"): Recallable =
  ## getDeleteScheduledAction
  ## Deletes the specified scheduled action.
  ##   ScheduledActionName: string (required)
  ##                      : The name of the action to delete.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617048 = newJObject()
  add(query_617048, "ScheduledActionName", newJString(ScheduledActionName))
  add(query_617048, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_617048, "Action", newJString(Action))
  add(query_617048, "Version", newJString(Version))
  result = call_617047.call(nil, query_617048, nil, nil, nil)

var getDeleteScheduledAction* = Call_GetDeleteScheduledAction_617032(
    name: "getDeleteScheduledAction", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DeleteScheduledAction",
    validator: validate_GetDeleteScheduledAction_617033, base: "/",
    url: url_GetDeleteScheduledAction_617034, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteTags_617083 = ref object of OpenApiRestCall_615866
proc url_PostDeleteTags_617085(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteTags_617084(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Deletes the specified tags.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617086 = query.getOrDefault("Action")
  valid_617086 = validateParameter(valid_617086, JString, required = true,
                                 default = newJString("DeleteTags"))
  if valid_617086 != nil:
    section.add "Action", valid_617086
  var valid_617087 = query.getOrDefault("Version")
  valid_617087 = validateParameter(valid_617087, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617087 != nil:
    section.add "Version", valid_617087
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617088 = header.getOrDefault("X-Amz-Date")
  valid_617088 = validateParameter(valid_617088, JString, required = false,
                                 default = nil)
  if valid_617088 != nil:
    section.add "X-Amz-Date", valid_617088
  var valid_617089 = header.getOrDefault("X-Amz-Security-Token")
  valid_617089 = validateParameter(valid_617089, JString, required = false,
                                 default = nil)
  if valid_617089 != nil:
    section.add "X-Amz-Security-Token", valid_617089
  var valid_617090 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617090 = validateParameter(valid_617090, JString, required = false,
                                 default = nil)
  if valid_617090 != nil:
    section.add "X-Amz-Content-Sha256", valid_617090
  var valid_617091 = header.getOrDefault("X-Amz-Algorithm")
  valid_617091 = validateParameter(valid_617091, JString, required = false,
                                 default = nil)
  if valid_617091 != nil:
    section.add "X-Amz-Algorithm", valid_617091
  var valid_617092 = header.getOrDefault("X-Amz-Signature")
  valid_617092 = validateParameter(valid_617092, JString, required = false,
                                 default = nil)
  if valid_617092 != nil:
    section.add "X-Amz-Signature", valid_617092
  var valid_617093 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617093 = validateParameter(valid_617093, JString, required = false,
                                 default = nil)
  if valid_617093 != nil:
    section.add "X-Amz-SignedHeaders", valid_617093
  var valid_617094 = header.getOrDefault("X-Amz-Credential")
  valid_617094 = validateParameter(valid_617094, JString, required = false,
                                 default = nil)
  if valid_617094 != nil:
    section.add "X-Amz-Credential", valid_617094
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray (required)
  ##       : One or more tags.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Tags` field"
  var valid_617095 = formData.getOrDefault("Tags")
  valid_617095 = validateParameter(valid_617095, JArray, required = true, default = nil)
  if valid_617095 != nil:
    section.add "Tags", valid_617095
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617096: Call_PostDeleteTags_617083; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified tags.
  ## 
  let valid = call_617096.validator(path, query, header, formData, body)
  let scheme = call_617096.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617096.url(scheme.get, call_617096.host, call_617096.base,
                         call_617096.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617096, url, valid)

proc call*(call_617097: Call_PostDeleteTags_617083; Tags: JsonNode;
          Action: string = "DeleteTags"; Version: string = "2011-01-01"): Recallable =
  ## postDeleteTags
  ## Deletes the specified tags.
  ##   Tags: JArray (required)
  ##       : One or more tags.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617098 = newJObject()
  var formData_617099 = newJObject()
  if Tags != nil:
    formData_617099.add "Tags", Tags
  add(query_617098, "Action", newJString(Action))
  add(query_617098, "Version", newJString(Version))
  result = call_617097.call(nil, query_617098, nil, formData_617099, nil)

var postDeleteTags* = Call_PostDeleteTags_617083(name: "postDeleteTags",
    meth: HttpMethod.HttpPost, host: "autoscaling.amazonaws.com",
    route: "/#Action=DeleteTags", validator: validate_PostDeleteTags_617084,
    base: "/", url: url_PostDeleteTags_617085, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteTags_617067 = ref object of OpenApiRestCall_615866
proc url_GetDeleteTags_617069(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteTags_617068(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified tags.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : One or more tags.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_617070 = query.getOrDefault("Tags")
  valid_617070 = validateParameter(valid_617070, JArray, required = true, default = nil)
  if valid_617070 != nil:
    section.add "Tags", valid_617070
  var valid_617071 = query.getOrDefault("Action")
  valid_617071 = validateParameter(valid_617071, JString, required = true,
                                 default = newJString("DeleteTags"))
  if valid_617071 != nil:
    section.add "Action", valid_617071
  var valid_617072 = query.getOrDefault("Version")
  valid_617072 = validateParameter(valid_617072, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617072 != nil:
    section.add "Version", valid_617072
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617073 = header.getOrDefault("X-Amz-Date")
  valid_617073 = validateParameter(valid_617073, JString, required = false,
                                 default = nil)
  if valid_617073 != nil:
    section.add "X-Amz-Date", valid_617073
  var valid_617074 = header.getOrDefault("X-Amz-Security-Token")
  valid_617074 = validateParameter(valid_617074, JString, required = false,
                                 default = nil)
  if valid_617074 != nil:
    section.add "X-Amz-Security-Token", valid_617074
  var valid_617075 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617075 = validateParameter(valid_617075, JString, required = false,
                                 default = nil)
  if valid_617075 != nil:
    section.add "X-Amz-Content-Sha256", valid_617075
  var valid_617076 = header.getOrDefault("X-Amz-Algorithm")
  valid_617076 = validateParameter(valid_617076, JString, required = false,
                                 default = nil)
  if valid_617076 != nil:
    section.add "X-Amz-Algorithm", valid_617076
  var valid_617077 = header.getOrDefault("X-Amz-Signature")
  valid_617077 = validateParameter(valid_617077, JString, required = false,
                                 default = nil)
  if valid_617077 != nil:
    section.add "X-Amz-Signature", valid_617077
  var valid_617078 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617078 = validateParameter(valid_617078, JString, required = false,
                                 default = nil)
  if valid_617078 != nil:
    section.add "X-Amz-SignedHeaders", valid_617078
  var valid_617079 = header.getOrDefault("X-Amz-Credential")
  valid_617079 = validateParameter(valid_617079, JString, required = false,
                                 default = nil)
  if valid_617079 != nil:
    section.add "X-Amz-Credential", valid_617079
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617080: Call_GetDeleteTags_617067; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified tags.
  ## 
  let valid = call_617080.validator(path, query, header, formData, body)
  let scheme = call_617080.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617080.url(scheme.get, call_617080.host, call_617080.base,
                         call_617080.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617080, url, valid)

proc call*(call_617081: Call_GetDeleteTags_617067; Tags: JsonNode;
          Action: string = "DeleteTags"; Version: string = "2011-01-01"): Recallable =
  ## getDeleteTags
  ## Deletes the specified tags.
  ##   Tags: JArray (required)
  ##       : One or more tags.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617082 = newJObject()
  if Tags != nil:
    query_617082.add "Tags", Tags
  add(query_617082, "Action", newJString(Action))
  add(query_617082, "Version", newJString(Version))
  result = call_617081.call(nil, query_617082, nil, nil, nil)

var getDeleteTags* = Call_GetDeleteTags_617067(name: "getDeleteTags",
    meth: HttpMethod.HttpGet, host: "autoscaling.amazonaws.com",
    route: "/#Action=DeleteTags", validator: validate_GetDeleteTags_617068,
    base: "/", url: url_GetDeleteTags_617069, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeAccountLimits_617115 = ref object of OpenApiRestCall_615866
proc url_PostDescribeAccountLimits_617117(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeAccountLimits_617116(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the current Amazon EC2 Auto Scaling resource quotas for your AWS account.</p> <p>For information about requesting an increase, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Service Quotas</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617118 = query.getOrDefault("Action")
  valid_617118 = validateParameter(valid_617118, JString, required = true,
                                 default = newJString("DescribeAccountLimits"))
  if valid_617118 != nil:
    section.add "Action", valid_617118
  var valid_617119 = query.getOrDefault("Version")
  valid_617119 = validateParameter(valid_617119, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617119 != nil:
    section.add "Version", valid_617119
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617120 = header.getOrDefault("X-Amz-Date")
  valid_617120 = validateParameter(valid_617120, JString, required = false,
                                 default = nil)
  if valid_617120 != nil:
    section.add "X-Amz-Date", valid_617120
  var valid_617121 = header.getOrDefault("X-Amz-Security-Token")
  valid_617121 = validateParameter(valid_617121, JString, required = false,
                                 default = nil)
  if valid_617121 != nil:
    section.add "X-Amz-Security-Token", valid_617121
  var valid_617122 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617122 = validateParameter(valid_617122, JString, required = false,
                                 default = nil)
  if valid_617122 != nil:
    section.add "X-Amz-Content-Sha256", valid_617122
  var valid_617123 = header.getOrDefault("X-Amz-Algorithm")
  valid_617123 = validateParameter(valid_617123, JString, required = false,
                                 default = nil)
  if valid_617123 != nil:
    section.add "X-Amz-Algorithm", valid_617123
  var valid_617124 = header.getOrDefault("X-Amz-Signature")
  valid_617124 = validateParameter(valid_617124, JString, required = false,
                                 default = nil)
  if valid_617124 != nil:
    section.add "X-Amz-Signature", valid_617124
  var valid_617125 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617125 = validateParameter(valid_617125, JString, required = false,
                                 default = nil)
  if valid_617125 != nil:
    section.add "X-Amz-SignedHeaders", valid_617125
  var valid_617126 = header.getOrDefault("X-Amz-Credential")
  valid_617126 = validateParameter(valid_617126, JString, required = false,
                                 default = nil)
  if valid_617126 != nil:
    section.add "X-Amz-Credential", valid_617126
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617127: Call_PostDescribeAccountLimits_617115; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the current Amazon EC2 Auto Scaling resource quotas for your AWS account.</p> <p>For information about requesting an increase, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Service Quotas</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_617127.validator(path, query, header, formData, body)
  let scheme = call_617127.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617127.url(scheme.get, call_617127.host, call_617127.base,
                         call_617127.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617127, url, valid)

proc call*(call_617128: Call_PostDescribeAccountLimits_617115;
          Action: string = "DescribeAccountLimits"; Version: string = "2011-01-01"): Recallable =
  ## postDescribeAccountLimits
  ## <p>Describes the current Amazon EC2 Auto Scaling resource quotas for your AWS account.</p> <p>For information about requesting an increase, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Service Quotas</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617129 = newJObject()
  add(query_617129, "Action", newJString(Action))
  add(query_617129, "Version", newJString(Version))
  result = call_617128.call(nil, query_617129, nil, nil, nil)

var postDescribeAccountLimits* = Call_PostDescribeAccountLimits_617115(
    name: "postDescribeAccountLimits", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeAccountLimits",
    validator: validate_PostDescribeAccountLimits_617116, base: "/",
    url: url_PostDescribeAccountLimits_617117,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeAccountLimits_617100 = ref object of OpenApiRestCall_615866
proc url_GetDescribeAccountLimits_617102(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeAccountLimits_617101(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the current Amazon EC2 Auto Scaling resource quotas for your AWS account.</p> <p>For information about requesting an increase, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Service Quotas</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617103 = query.getOrDefault("Action")
  valid_617103 = validateParameter(valid_617103, JString, required = true,
                                 default = newJString("DescribeAccountLimits"))
  if valid_617103 != nil:
    section.add "Action", valid_617103
  var valid_617104 = query.getOrDefault("Version")
  valid_617104 = validateParameter(valid_617104, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617104 != nil:
    section.add "Version", valid_617104
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617105 = header.getOrDefault("X-Amz-Date")
  valid_617105 = validateParameter(valid_617105, JString, required = false,
                                 default = nil)
  if valid_617105 != nil:
    section.add "X-Amz-Date", valid_617105
  var valid_617106 = header.getOrDefault("X-Amz-Security-Token")
  valid_617106 = validateParameter(valid_617106, JString, required = false,
                                 default = nil)
  if valid_617106 != nil:
    section.add "X-Amz-Security-Token", valid_617106
  var valid_617107 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617107 = validateParameter(valid_617107, JString, required = false,
                                 default = nil)
  if valid_617107 != nil:
    section.add "X-Amz-Content-Sha256", valid_617107
  var valid_617108 = header.getOrDefault("X-Amz-Algorithm")
  valid_617108 = validateParameter(valid_617108, JString, required = false,
                                 default = nil)
  if valid_617108 != nil:
    section.add "X-Amz-Algorithm", valid_617108
  var valid_617109 = header.getOrDefault("X-Amz-Signature")
  valid_617109 = validateParameter(valid_617109, JString, required = false,
                                 default = nil)
  if valid_617109 != nil:
    section.add "X-Amz-Signature", valid_617109
  var valid_617110 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617110 = validateParameter(valid_617110, JString, required = false,
                                 default = nil)
  if valid_617110 != nil:
    section.add "X-Amz-SignedHeaders", valid_617110
  var valid_617111 = header.getOrDefault("X-Amz-Credential")
  valid_617111 = validateParameter(valid_617111, JString, required = false,
                                 default = nil)
  if valid_617111 != nil:
    section.add "X-Amz-Credential", valid_617111
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617112: Call_GetDescribeAccountLimits_617100; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the current Amazon EC2 Auto Scaling resource quotas for your AWS account.</p> <p>For information about requesting an increase, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Service Quotas</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_617112.validator(path, query, header, formData, body)
  let scheme = call_617112.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617112.url(scheme.get, call_617112.host, call_617112.base,
                         call_617112.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617112, url, valid)

proc call*(call_617113: Call_GetDescribeAccountLimits_617100;
          Action: string = "DescribeAccountLimits"; Version: string = "2011-01-01"): Recallable =
  ## getDescribeAccountLimits
  ## <p>Describes the current Amazon EC2 Auto Scaling resource quotas for your AWS account.</p> <p>For information about requesting an increase, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Service Quotas</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617114 = newJObject()
  add(query_617114, "Action", newJString(Action))
  add(query_617114, "Version", newJString(Version))
  result = call_617113.call(nil, query_617114, nil, nil, nil)

var getDescribeAccountLimits* = Call_GetDescribeAccountLimits_617100(
    name: "getDescribeAccountLimits", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeAccountLimits",
    validator: validate_GetDescribeAccountLimits_617101, base: "/",
    url: url_GetDescribeAccountLimits_617102, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeAdjustmentTypes_617145 = ref object of OpenApiRestCall_615866
proc url_PostDescribeAdjustmentTypes_617147(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeAdjustmentTypes_617146(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the policy adjustment types for use with <a>PutScalingPolicy</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617148 = query.getOrDefault("Action")
  valid_617148 = validateParameter(valid_617148, JString, required = true, default = newJString(
      "DescribeAdjustmentTypes"))
  if valid_617148 != nil:
    section.add "Action", valid_617148
  var valid_617149 = query.getOrDefault("Version")
  valid_617149 = validateParameter(valid_617149, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617149 != nil:
    section.add "Version", valid_617149
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617150 = header.getOrDefault("X-Amz-Date")
  valid_617150 = validateParameter(valid_617150, JString, required = false,
                                 default = nil)
  if valid_617150 != nil:
    section.add "X-Amz-Date", valid_617150
  var valid_617151 = header.getOrDefault("X-Amz-Security-Token")
  valid_617151 = validateParameter(valid_617151, JString, required = false,
                                 default = nil)
  if valid_617151 != nil:
    section.add "X-Amz-Security-Token", valid_617151
  var valid_617152 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617152 = validateParameter(valid_617152, JString, required = false,
                                 default = nil)
  if valid_617152 != nil:
    section.add "X-Amz-Content-Sha256", valid_617152
  var valid_617153 = header.getOrDefault("X-Amz-Algorithm")
  valid_617153 = validateParameter(valid_617153, JString, required = false,
                                 default = nil)
  if valid_617153 != nil:
    section.add "X-Amz-Algorithm", valid_617153
  var valid_617154 = header.getOrDefault("X-Amz-Signature")
  valid_617154 = validateParameter(valid_617154, JString, required = false,
                                 default = nil)
  if valid_617154 != nil:
    section.add "X-Amz-Signature", valid_617154
  var valid_617155 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617155 = validateParameter(valid_617155, JString, required = false,
                                 default = nil)
  if valid_617155 != nil:
    section.add "X-Amz-SignedHeaders", valid_617155
  var valid_617156 = header.getOrDefault("X-Amz-Credential")
  valid_617156 = validateParameter(valid_617156, JString, required = false,
                                 default = nil)
  if valid_617156 != nil:
    section.add "X-Amz-Credential", valid_617156
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617157: Call_PostDescribeAdjustmentTypes_617145; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the policy adjustment types for use with <a>PutScalingPolicy</a>.
  ## 
  let valid = call_617157.validator(path, query, header, formData, body)
  let scheme = call_617157.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617157.url(scheme.get, call_617157.host, call_617157.base,
                         call_617157.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617157, url, valid)

proc call*(call_617158: Call_PostDescribeAdjustmentTypes_617145;
          Action: string = "DescribeAdjustmentTypes"; Version: string = "2011-01-01"): Recallable =
  ## postDescribeAdjustmentTypes
  ## Describes the policy adjustment types for use with <a>PutScalingPolicy</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617159 = newJObject()
  add(query_617159, "Action", newJString(Action))
  add(query_617159, "Version", newJString(Version))
  result = call_617158.call(nil, query_617159, nil, nil, nil)

var postDescribeAdjustmentTypes* = Call_PostDescribeAdjustmentTypes_617145(
    name: "postDescribeAdjustmentTypes", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeAdjustmentTypes",
    validator: validate_PostDescribeAdjustmentTypes_617146, base: "/",
    url: url_PostDescribeAdjustmentTypes_617147,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeAdjustmentTypes_617130 = ref object of OpenApiRestCall_615866
proc url_GetDescribeAdjustmentTypes_617132(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeAdjustmentTypes_617131(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the policy adjustment types for use with <a>PutScalingPolicy</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617133 = query.getOrDefault("Action")
  valid_617133 = validateParameter(valid_617133, JString, required = true, default = newJString(
      "DescribeAdjustmentTypes"))
  if valid_617133 != nil:
    section.add "Action", valid_617133
  var valid_617134 = query.getOrDefault("Version")
  valid_617134 = validateParameter(valid_617134, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617134 != nil:
    section.add "Version", valid_617134
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617135 = header.getOrDefault("X-Amz-Date")
  valid_617135 = validateParameter(valid_617135, JString, required = false,
                                 default = nil)
  if valid_617135 != nil:
    section.add "X-Amz-Date", valid_617135
  var valid_617136 = header.getOrDefault("X-Amz-Security-Token")
  valid_617136 = validateParameter(valid_617136, JString, required = false,
                                 default = nil)
  if valid_617136 != nil:
    section.add "X-Amz-Security-Token", valid_617136
  var valid_617137 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617137 = validateParameter(valid_617137, JString, required = false,
                                 default = nil)
  if valid_617137 != nil:
    section.add "X-Amz-Content-Sha256", valid_617137
  var valid_617138 = header.getOrDefault("X-Amz-Algorithm")
  valid_617138 = validateParameter(valid_617138, JString, required = false,
                                 default = nil)
  if valid_617138 != nil:
    section.add "X-Amz-Algorithm", valid_617138
  var valid_617139 = header.getOrDefault("X-Amz-Signature")
  valid_617139 = validateParameter(valid_617139, JString, required = false,
                                 default = nil)
  if valid_617139 != nil:
    section.add "X-Amz-Signature", valid_617139
  var valid_617140 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617140 = validateParameter(valid_617140, JString, required = false,
                                 default = nil)
  if valid_617140 != nil:
    section.add "X-Amz-SignedHeaders", valid_617140
  var valid_617141 = header.getOrDefault("X-Amz-Credential")
  valid_617141 = validateParameter(valid_617141, JString, required = false,
                                 default = nil)
  if valid_617141 != nil:
    section.add "X-Amz-Credential", valid_617141
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617142: Call_GetDescribeAdjustmentTypes_617130; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the policy adjustment types for use with <a>PutScalingPolicy</a>.
  ## 
  let valid = call_617142.validator(path, query, header, formData, body)
  let scheme = call_617142.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617142.url(scheme.get, call_617142.host, call_617142.base,
                         call_617142.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617142, url, valid)

proc call*(call_617143: Call_GetDescribeAdjustmentTypes_617130;
          Action: string = "DescribeAdjustmentTypes"; Version: string = "2011-01-01"): Recallable =
  ## getDescribeAdjustmentTypes
  ## Describes the policy adjustment types for use with <a>PutScalingPolicy</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617144 = newJObject()
  add(query_617144, "Action", newJString(Action))
  add(query_617144, "Version", newJString(Version))
  result = call_617143.call(nil, query_617144, nil, nil, nil)

var getDescribeAdjustmentTypes* = Call_GetDescribeAdjustmentTypes_617130(
    name: "getDescribeAdjustmentTypes", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeAdjustmentTypes",
    validator: validate_GetDescribeAdjustmentTypes_617131, base: "/",
    url: url_GetDescribeAdjustmentTypes_617132,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeAutoScalingGroups_617178 = ref object of OpenApiRestCall_615866
proc url_PostDescribeAutoScalingGroups_617180(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeAutoScalingGroups_617179(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more Auto Scaling groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617181 = query.getOrDefault("Action")
  valid_617181 = validateParameter(valid_617181, JString, required = true, default = newJString(
      "DescribeAutoScalingGroups"))
  if valid_617181 != nil:
    section.add "Action", valid_617181
  var valid_617182 = query.getOrDefault("Version")
  valid_617182 = validateParameter(valid_617182, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617182 != nil:
    section.add "Version", valid_617182
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617183 = header.getOrDefault("X-Amz-Date")
  valid_617183 = validateParameter(valid_617183, JString, required = false,
                                 default = nil)
  if valid_617183 != nil:
    section.add "X-Amz-Date", valid_617183
  var valid_617184 = header.getOrDefault("X-Amz-Security-Token")
  valid_617184 = validateParameter(valid_617184, JString, required = false,
                                 default = nil)
  if valid_617184 != nil:
    section.add "X-Amz-Security-Token", valid_617184
  var valid_617185 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617185 = validateParameter(valid_617185, JString, required = false,
                                 default = nil)
  if valid_617185 != nil:
    section.add "X-Amz-Content-Sha256", valid_617185
  var valid_617186 = header.getOrDefault("X-Amz-Algorithm")
  valid_617186 = validateParameter(valid_617186, JString, required = false,
                                 default = nil)
  if valid_617186 != nil:
    section.add "X-Amz-Algorithm", valid_617186
  var valid_617187 = header.getOrDefault("X-Amz-Signature")
  valid_617187 = validateParameter(valid_617187, JString, required = false,
                                 default = nil)
  if valid_617187 != nil:
    section.add "X-Amz-Signature", valid_617187
  var valid_617188 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617188 = validateParameter(valid_617188, JString, required = false,
                                 default = nil)
  if valid_617188 != nil:
    section.add "X-Amz-SignedHeaders", valid_617188
  var valid_617189 = header.getOrDefault("X-Amz-Credential")
  valid_617189 = validateParameter(valid_617189, JString, required = false,
                                 default = nil)
  if valid_617189 != nil:
    section.add "X-Amz-Credential", valid_617189
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupNames: JArray
  ##                        : <p>The names of the Auto Scaling groups. Each name can be a maximum of 1600 characters. By default, you can only specify up to 50 names. You can optionally increase this limit using the <code>MaxRecords</code> parameter.</p> <p>If you omit this parameter, all Auto Scaling groups are described.</p>
  section = newJObject()
  var valid_617190 = formData.getOrDefault("NextToken")
  valid_617190 = validateParameter(valid_617190, JString, required = false,
                                 default = nil)
  if valid_617190 != nil:
    section.add "NextToken", valid_617190
  var valid_617191 = formData.getOrDefault("MaxRecords")
  valid_617191 = validateParameter(valid_617191, JInt, required = false, default = nil)
  if valid_617191 != nil:
    section.add "MaxRecords", valid_617191
  var valid_617192 = formData.getOrDefault("AutoScalingGroupNames")
  valid_617192 = validateParameter(valid_617192, JArray, required = false,
                                 default = nil)
  if valid_617192 != nil:
    section.add "AutoScalingGroupNames", valid_617192
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617193: Call_PostDescribeAutoScalingGroups_617178; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes one or more Auto Scaling groups.
  ## 
  let valid = call_617193.validator(path, query, header, formData, body)
  let scheme = call_617193.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617193.url(scheme.get, call_617193.host, call_617193.base,
                         call_617193.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617193, url, valid)

proc call*(call_617194: Call_PostDescribeAutoScalingGroups_617178;
          Action: string = "DescribeAutoScalingGroups"; NextToken: string = "";
          MaxRecords: int = 0; Version: string = "2011-01-01";
          AutoScalingGroupNames: JsonNode = nil): Recallable =
  ## postDescribeAutoScalingGroups
  ## Describes one or more Auto Scaling groups.
  ##   Action: string (required)
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   Version: string (required)
  ##   AutoScalingGroupNames: JArray
  ##                        : <p>The names of the Auto Scaling groups. Each name can be a maximum of 1600 characters. By default, you can only specify up to 50 names. You can optionally increase this limit using the <code>MaxRecords</code> parameter.</p> <p>If you omit this parameter, all Auto Scaling groups are described.</p>
  var query_617195 = newJObject()
  var formData_617196 = newJObject()
  add(query_617195, "Action", newJString(Action))
  add(formData_617196, "NextToken", newJString(NextToken))
  add(formData_617196, "MaxRecords", newJInt(MaxRecords))
  add(query_617195, "Version", newJString(Version))
  if AutoScalingGroupNames != nil:
    formData_617196.add "AutoScalingGroupNames", AutoScalingGroupNames
  result = call_617194.call(nil, query_617195, nil, formData_617196, nil)

var postDescribeAutoScalingGroups* = Call_PostDescribeAutoScalingGroups_617178(
    name: "postDescribeAutoScalingGroups", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeAutoScalingGroups",
    validator: validate_PostDescribeAutoScalingGroups_617179, base: "/",
    url: url_PostDescribeAutoScalingGroups_617180,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeAutoScalingGroups_617160 = ref object of OpenApiRestCall_615866
proc url_GetDescribeAutoScalingGroups_617162(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeAutoScalingGroups_617161(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more Auto Scaling groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   Action: JString (required)
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   AutoScalingGroupNames: JArray
  ##                        : <p>The names of the Auto Scaling groups. Each name can be a maximum of 1600 characters. By default, you can only specify up to 50 names. You can optionally increase this limit using the <code>MaxRecords</code> parameter.</p> <p>If you omit this parameter, all Auto Scaling groups are described.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_617163 = query.getOrDefault("MaxRecords")
  valid_617163 = validateParameter(valid_617163, JInt, required = false, default = nil)
  if valid_617163 != nil:
    section.add "MaxRecords", valid_617163
  var valid_617164 = query.getOrDefault("Action")
  valid_617164 = validateParameter(valid_617164, JString, required = true, default = newJString(
      "DescribeAutoScalingGroups"))
  if valid_617164 != nil:
    section.add "Action", valid_617164
  var valid_617165 = query.getOrDefault("NextToken")
  valid_617165 = validateParameter(valid_617165, JString, required = false,
                                 default = nil)
  if valid_617165 != nil:
    section.add "NextToken", valid_617165
  var valid_617166 = query.getOrDefault("AutoScalingGroupNames")
  valid_617166 = validateParameter(valid_617166, JArray, required = false,
                                 default = nil)
  if valid_617166 != nil:
    section.add "AutoScalingGroupNames", valid_617166
  var valid_617167 = query.getOrDefault("Version")
  valid_617167 = validateParameter(valid_617167, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617167 != nil:
    section.add "Version", valid_617167
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617168 = header.getOrDefault("X-Amz-Date")
  valid_617168 = validateParameter(valid_617168, JString, required = false,
                                 default = nil)
  if valid_617168 != nil:
    section.add "X-Amz-Date", valid_617168
  var valid_617169 = header.getOrDefault("X-Amz-Security-Token")
  valid_617169 = validateParameter(valid_617169, JString, required = false,
                                 default = nil)
  if valid_617169 != nil:
    section.add "X-Amz-Security-Token", valid_617169
  var valid_617170 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617170 = validateParameter(valid_617170, JString, required = false,
                                 default = nil)
  if valid_617170 != nil:
    section.add "X-Amz-Content-Sha256", valid_617170
  var valid_617171 = header.getOrDefault("X-Amz-Algorithm")
  valid_617171 = validateParameter(valid_617171, JString, required = false,
                                 default = nil)
  if valid_617171 != nil:
    section.add "X-Amz-Algorithm", valid_617171
  var valid_617172 = header.getOrDefault("X-Amz-Signature")
  valid_617172 = validateParameter(valid_617172, JString, required = false,
                                 default = nil)
  if valid_617172 != nil:
    section.add "X-Amz-Signature", valid_617172
  var valid_617173 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617173 = validateParameter(valid_617173, JString, required = false,
                                 default = nil)
  if valid_617173 != nil:
    section.add "X-Amz-SignedHeaders", valid_617173
  var valid_617174 = header.getOrDefault("X-Amz-Credential")
  valid_617174 = validateParameter(valid_617174, JString, required = false,
                                 default = nil)
  if valid_617174 != nil:
    section.add "X-Amz-Credential", valid_617174
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617175: Call_GetDescribeAutoScalingGroups_617160; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes one or more Auto Scaling groups.
  ## 
  let valid = call_617175.validator(path, query, header, formData, body)
  let scheme = call_617175.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617175.url(scheme.get, call_617175.host, call_617175.base,
                         call_617175.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617175, url, valid)

proc call*(call_617176: Call_GetDescribeAutoScalingGroups_617160;
          MaxRecords: int = 0; Action: string = "DescribeAutoScalingGroups";
          NextToken: string = ""; AutoScalingGroupNames: JsonNode = nil;
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeAutoScalingGroups
  ## Describes one or more Auto Scaling groups.
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   Action: string (required)
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   AutoScalingGroupNames: JArray
  ##                        : <p>The names of the Auto Scaling groups. Each name can be a maximum of 1600 characters. By default, you can only specify up to 50 names. You can optionally increase this limit using the <code>MaxRecords</code> parameter.</p> <p>If you omit this parameter, all Auto Scaling groups are described.</p>
  ##   Version: string (required)
  var query_617177 = newJObject()
  add(query_617177, "MaxRecords", newJInt(MaxRecords))
  add(query_617177, "Action", newJString(Action))
  add(query_617177, "NextToken", newJString(NextToken))
  if AutoScalingGroupNames != nil:
    query_617177.add "AutoScalingGroupNames", AutoScalingGroupNames
  add(query_617177, "Version", newJString(Version))
  result = call_617176.call(nil, query_617177, nil, nil, nil)

var getDescribeAutoScalingGroups* = Call_GetDescribeAutoScalingGroups_617160(
    name: "getDescribeAutoScalingGroups", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeAutoScalingGroups",
    validator: validate_GetDescribeAutoScalingGroups_617161, base: "/",
    url: url_GetDescribeAutoScalingGroups_617162,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeAutoScalingInstances_617215 = ref object of OpenApiRestCall_615866
proc url_PostDescribeAutoScalingInstances_617217(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeAutoScalingInstances_617216(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more Auto Scaling instances.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617218 = query.getOrDefault("Action")
  valid_617218 = validateParameter(valid_617218, JString, required = true, default = newJString(
      "DescribeAutoScalingInstances"))
  if valid_617218 != nil:
    section.add "Action", valid_617218
  var valid_617219 = query.getOrDefault("Version")
  valid_617219 = validateParameter(valid_617219, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617219 != nil:
    section.add "Version", valid_617219
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617220 = header.getOrDefault("X-Amz-Date")
  valid_617220 = validateParameter(valid_617220, JString, required = false,
                                 default = nil)
  if valid_617220 != nil:
    section.add "X-Amz-Date", valid_617220
  var valid_617221 = header.getOrDefault("X-Amz-Security-Token")
  valid_617221 = validateParameter(valid_617221, JString, required = false,
                                 default = nil)
  if valid_617221 != nil:
    section.add "X-Amz-Security-Token", valid_617221
  var valid_617222 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617222 = validateParameter(valid_617222, JString, required = false,
                                 default = nil)
  if valid_617222 != nil:
    section.add "X-Amz-Content-Sha256", valid_617222
  var valid_617223 = header.getOrDefault("X-Amz-Algorithm")
  valid_617223 = validateParameter(valid_617223, JString, required = false,
                                 default = nil)
  if valid_617223 != nil:
    section.add "X-Amz-Algorithm", valid_617223
  var valid_617224 = header.getOrDefault("X-Amz-Signature")
  valid_617224 = validateParameter(valid_617224, JString, required = false,
                                 default = nil)
  if valid_617224 != nil:
    section.add "X-Amz-Signature", valid_617224
  var valid_617225 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617225 = validateParameter(valid_617225, JString, required = false,
                                 default = nil)
  if valid_617225 != nil:
    section.add "X-Amz-SignedHeaders", valid_617225
  var valid_617226 = header.getOrDefault("X-Amz-Credential")
  valid_617226 = validateParameter(valid_617226, JString, required = false,
                                 default = nil)
  if valid_617226 != nil:
    section.add "X-Amz-Credential", valid_617226
  result.add "header", section
  ## parameters in `formData` object:
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to <code>MaxRecords</code> IDs. If you omit this parameter, all Auto Scaling instances are described. If you specify an ID that does not exist, it is ignored with no error.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>50</code>.
  section = newJObject()
  var valid_617227 = formData.getOrDefault("InstanceIds")
  valid_617227 = validateParameter(valid_617227, JArray, required = false,
                                 default = nil)
  if valid_617227 != nil:
    section.add "InstanceIds", valid_617227
  var valid_617228 = formData.getOrDefault("NextToken")
  valid_617228 = validateParameter(valid_617228, JString, required = false,
                                 default = nil)
  if valid_617228 != nil:
    section.add "NextToken", valid_617228
  var valid_617229 = formData.getOrDefault("MaxRecords")
  valid_617229 = validateParameter(valid_617229, JInt, required = false, default = nil)
  if valid_617229 != nil:
    section.add "MaxRecords", valid_617229
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617230: Call_PostDescribeAutoScalingInstances_617215;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes one or more Auto Scaling instances.
  ## 
  let valid = call_617230.validator(path, query, header, formData, body)
  let scheme = call_617230.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617230.url(scheme.get, call_617230.host, call_617230.base,
                         call_617230.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617230, url, valid)

proc call*(call_617231: Call_PostDescribeAutoScalingInstances_617215;
          InstanceIds: JsonNode = nil;
          Action: string = "DescribeAutoScalingInstances"; NextToken: string = "";
          MaxRecords: int = 0; Version: string = "2011-01-01"): Recallable =
  ## postDescribeAutoScalingInstances
  ## Describes one or more Auto Scaling instances.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to <code>MaxRecords</code> IDs. If you omit this parameter, all Auto Scaling instances are described. If you specify an ID that does not exist, it is ignored with no error.
  ##   Action: string (required)
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>50</code>.
  ##   Version: string (required)
  var query_617232 = newJObject()
  var formData_617233 = newJObject()
  if InstanceIds != nil:
    formData_617233.add "InstanceIds", InstanceIds
  add(query_617232, "Action", newJString(Action))
  add(formData_617233, "NextToken", newJString(NextToken))
  add(formData_617233, "MaxRecords", newJInt(MaxRecords))
  add(query_617232, "Version", newJString(Version))
  result = call_617231.call(nil, query_617232, nil, formData_617233, nil)

var postDescribeAutoScalingInstances* = Call_PostDescribeAutoScalingInstances_617215(
    name: "postDescribeAutoScalingInstances", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeAutoScalingInstances",
    validator: validate_PostDescribeAutoScalingInstances_617216, base: "/",
    url: url_PostDescribeAutoScalingInstances_617217,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeAutoScalingInstances_617197 = ref object of OpenApiRestCall_615866
proc url_GetDescribeAutoScalingInstances_617199(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeAutoScalingInstances_617198(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more Auto Scaling instances.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>50</code>.
  ##   Action: JString (required)
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to <code>MaxRecords</code> IDs. If you omit this parameter, all Auto Scaling instances are described. If you specify an ID that does not exist, it is ignored with no error.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617200 = query.getOrDefault("MaxRecords")
  valid_617200 = validateParameter(valid_617200, JInt, required = false, default = nil)
  if valid_617200 != nil:
    section.add "MaxRecords", valid_617200
  var valid_617201 = query.getOrDefault("Action")
  valid_617201 = validateParameter(valid_617201, JString, required = true, default = newJString(
      "DescribeAutoScalingInstances"))
  if valid_617201 != nil:
    section.add "Action", valid_617201
  var valid_617202 = query.getOrDefault("InstanceIds")
  valid_617202 = validateParameter(valid_617202, JArray, required = false,
                                 default = nil)
  if valid_617202 != nil:
    section.add "InstanceIds", valid_617202
  var valid_617203 = query.getOrDefault("NextToken")
  valid_617203 = validateParameter(valid_617203, JString, required = false,
                                 default = nil)
  if valid_617203 != nil:
    section.add "NextToken", valid_617203
  var valid_617204 = query.getOrDefault("Version")
  valid_617204 = validateParameter(valid_617204, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617204 != nil:
    section.add "Version", valid_617204
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617205 = header.getOrDefault("X-Amz-Date")
  valid_617205 = validateParameter(valid_617205, JString, required = false,
                                 default = nil)
  if valid_617205 != nil:
    section.add "X-Amz-Date", valid_617205
  var valid_617206 = header.getOrDefault("X-Amz-Security-Token")
  valid_617206 = validateParameter(valid_617206, JString, required = false,
                                 default = nil)
  if valid_617206 != nil:
    section.add "X-Amz-Security-Token", valid_617206
  var valid_617207 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617207 = validateParameter(valid_617207, JString, required = false,
                                 default = nil)
  if valid_617207 != nil:
    section.add "X-Amz-Content-Sha256", valid_617207
  var valid_617208 = header.getOrDefault("X-Amz-Algorithm")
  valid_617208 = validateParameter(valid_617208, JString, required = false,
                                 default = nil)
  if valid_617208 != nil:
    section.add "X-Amz-Algorithm", valid_617208
  var valid_617209 = header.getOrDefault("X-Amz-Signature")
  valid_617209 = validateParameter(valid_617209, JString, required = false,
                                 default = nil)
  if valid_617209 != nil:
    section.add "X-Amz-Signature", valid_617209
  var valid_617210 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617210 = validateParameter(valid_617210, JString, required = false,
                                 default = nil)
  if valid_617210 != nil:
    section.add "X-Amz-SignedHeaders", valid_617210
  var valid_617211 = header.getOrDefault("X-Amz-Credential")
  valid_617211 = validateParameter(valid_617211, JString, required = false,
                                 default = nil)
  if valid_617211 != nil:
    section.add "X-Amz-Credential", valid_617211
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617212: Call_GetDescribeAutoScalingInstances_617197;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes one or more Auto Scaling instances.
  ## 
  let valid = call_617212.validator(path, query, header, formData, body)
  let scheme = call_617212.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617212.url(scheme.get, call_617212.host, call_617212.base,
                         call_617212.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617212, url, valid)

proc call*(call_617213: Call_GetDescribeAutoScalingInstances_617197;
          MaxRecords: int = 0; Action: string = "DescribeAutoScalingInstances";
          InstanceIds: JsonNode = nil; NextToken: string = "";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeAutoScalingInstances
  ## Describes one or more Auto Scaling instances.
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>50</code>.
  ##   Action: string (required)
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to <code>MaxRecords</code> IDs. If you omit this parameter, all Auto Scaling instances are described. If you specify an ID that does not exist, it is ignored with no error.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Version: string (required)
  var query_617214 = newJObject()
  add(query_617214, "MaxRecords", newJInt(MaxRecords))
  add(query_617214, "Action", newJString(Action))
  if InstanceIds != nil:
    query_617214.add "InstanceIds", InstanceIds
  add(query_617214, "NextToken", newJString(NextToken))
  add(query_617214, "Version", newJString(Version))
  result = call_617213.call(nil, query_617214, nil, nil, nil)

var getDescribeAutoScalingInstances* = Call_GetDescribeAutoScalingInstances_617197(
    name: "getDescribeAutoScalingInstances", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeAutoScalingInstances",
    validator: validate_GetDescribeAutoScalingInstances_617198, base: "/",
    url: url_GetDescribeAutoScalingInstances_617199,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeAutoScalingNotificationTypes_617249 = ref object of OpenApiRestCall_615866
proc url_PostDescribeAutoScalingNotificationTypes_617251(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeAutoScalingNotificationTypes_617250(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the notification types that are supported by Amazon EC2 Auto Scaling.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617252 = query.getOrDefault("Action")
  valid_617252 = validateParameter(valid_617252, JString, required = true, default = newJString(
      "DescribeAutoScalingNotificationTypes"))
  if valid_617252 != nil:
    section.add "Action", valid_617252
  var valid_617253 = query.getOrDefault("Version")
  valid_617253 = validateParameter(valid_617253, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617253 != nil:
    section.add "Version", valid_617253
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617254 = header.getOrDefault("X-Amz-Date")
  valid_617254 = validateParameter(valid_617254, JString, required = false,
                                 default = nil)
  if valid_617254 != nil:
    section.add "X-Amz-Date", valid_617254
  var valid_617255 = header.getOrDefault("X-Amz-Security-Token")
  valid_617255 = validateParameter(valid_617255, JString, required = false,
                                 default = nil)
  if valid_617255 != nil:
    section.add "X-Amz-Security-Token", valid_617255
  var valid_617256 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617256 = validateParameter(valid_617256, JString, required = false,
                                 default = nil)
  if valid_617256 != nil:
    section.add "X-Amz-Content-Sha256", valid_617256
  var valid_617257 = header.getOrDefault("X-Amz-Algorithm")
  valid_617257 = validateParameter(valid_617257, JString, required = false,
                                 default = nil)
  if valid_617257 != nil:
    section.add "X-Amz-Algorithm", valid_617257
  var valid_617258 = header.getOrDefault("X-Amz-Signature")
  valid_617258 = validateParameter(valid_617258, JString, required = false,
                                 default = nil)
  if valid_617258 != nil:
    section.add "X-Amz-Signature", valid_617258
  var valid_617259 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617259 = validateParameter(valid_617259, JString, required = false,
                                 default = nil)
  if valid_617259 != nil:
    section.add "X-Amz-SignedHeaders", valid_617259
  var valid_617260 = header.getOrDefault("X-Amz-Credential")
  valid_617260 = validateParameter(valid_617260, JString, required = false,
                                 default = nil)
  if valid_617260 != nil:
    section.add "X-Amz-Credential", valid_617260
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617261: Call_PostDescribeAutoScalingNotificationTypes_617249;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the notification types that are supported by Amazon EC2 Auto Scaling.
  ## 
  let valid = call_617261.validator(path, query, header, formData, body)
  let scheme = call_617261.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617261.url(scheme.get, call_617261.host, call_617261.base,
                         call_617261.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617261, url, valid)

proc call*(call_617262: Call_PostDescribeAutoScalingNotificationTypes_617249;
          Action: string = "DescribeAutoScalingNotificationTypes";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeAutoScalingNotificationTypes
  ## Describes the notification types that are supported by Amazon EC2 Auto Scaling.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617263 = newJObject()
  add(query_617263, "Action", newJString(Action))
  add(query_617263, "Version", newJString(Version))
  result = call_617262.call(nil, query_617263, nil, nil, nil)

var postDescribeAutoScalingNotificationTypes* = Call_PostDescribeAutoScalingNotificationTypes_617249(
    name: "postDescribeAutoScalingNotificationTypes", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeAutoScalingNotificationTypes",
    validator: validate_PostDescribeAutoScalingNotificationTypes_617250,
    base: "/", url: url_PostDescribeAutoScalingNotificationTypes_617251,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeAutoScalingNotificationTypes_617234 = ref object of OpenApiRestCall_615866
proc url_GetDescribeAutoScalingNotificationTypes_617236(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeAutoScalingNotificationTypes_617235(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the notification types that are supported by Amazon EC2 Auto Scaling.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617237 = query.getOrDefault("Action")
  valid_617237 = validateParameter(valid_617237, JString, required = true, default = newJString(
      "DescribeAutoScalingNotificationTypes"))
  if valid_617237 != nil:
    section.add "Action", valid_617237
  var valid_617238 = query.getOrDefault("Version")
  valid_617238 = validateParameter(valid_617238, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617238 != nil:
    section.add "Version", valid_617238
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617239 = header.getOrDefault("X-Amz-Date")
  valid_617239 = validateParameter(valid_617239, JString, required = false,
                                 default = nil)
  if valid_617239 != nil:
    section.add "X-Amz-Date", valid_617239
  var valid_617240 = header.getOrDefault("X-Amz-Security-Token")
  valid_617240 = validateParameter(valid_617240, JString, required = false,
                                 default = nil)
  if valid_617240 != nil:
    section.add "X-Amz-Security-Token", valid_617240
  var valid_617241 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617241 = validateParameter(valid_617241, JString, required = false,
                                 default = nil)
  if valid_617241 != nil:
    section.add "X-Amz-Content-Sha256", valid_617241
  var valid_617242 = header.getOrDefault("X-Amz-Algorithm")
  valid_617242 = validateParameter(valid_617242, JString, required = false,
                                 default = nil)
  if valid_617242 != nil:
    section.add "X-Amz-Algorithm", valid_617242
  var valid_617243 = header.getOrDefault("X-Amz-Signature")
  valid_617243 = validateParameter(valid_617243, JString, required = false,
                                 default = nil)
  if valid_617243 != nil:
    section.add "X-Amz-Signature", valid_617243
  var valid_617244 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617244 = validateParameter(valid_617244, JString, required = false,
                                 default = nil)
  if valid_617244 != nil:
    section.add "X-Amz-SignedHeaders", valid_617244
  var valid_617245 = header.getOrDefault("X-Amz-Credential")
  valid_617245 = validateParameter(valid_617245, JString, required = false,
                                 default = nil)
  if valid_617245 != nil:
    section.add "X-Amz-Credential", valid_617245
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617246: Call_GetDescribeAutoScalingNotificationTypes_617234;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the notification types that are supported by Amazon EC2 Auto Scaling.
  ## 
  let valid = call_617246.validator(path, query, header, formData, body)
  let scheme = call_617246.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617246.url(scheme.get, call_617246.host, call_617246.base,
                         call_617246.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617246, url, valid)

proc call*(call_617247: Call_GetDescribeAutoScalingNotificationTypes_617234;
          Action: string = "DescribeAutoScalingNotificationTypes";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeAutoScalingNotificationTypes
  ## Describes the notification types that are supported by Amazon EC2 Auto Scaling.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617248 = newJObject()
  add(query_617248, "Action", newJString(Action))
  add(query_617248, "Version", newJString(Version))
  result = call_617247.call(nil, query_617248, nil, nil, nil)

var getDescribeAutoScalingNotificationTypes* = Call_GetDescribeAutoScalingNotificationTypes_617234(
    name: "getDescribeAutoScalingNotificationTypes", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeAutoScalingNotificationTypes",
    validator: validate_GetDescribeAutoScalingNotificationTypes_617235, base: "/",
    url: url_GetDescribeAutoScalingNotificationTypes_617236,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeLaunchConfigurations_617282 = ref object of OpenApiRestCall_615866
proc url_PostDescribeLaunchConfigurations_617284(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeLaunchConfigurations_617283(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more launch configurations.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617285 = query.getOrDefault("Action")
  valid_617285 = validateParameter(valid_617285, JString, required = true, default = newJString(
      "DescribeLaunchConfigurations"))
  if valid_617285 != nil:
    section.add "Action", valid_617285
  var valid_617286 = query.getOrDefault("Version")
  valid_617286 = validateParameter(valid_617286, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617286 != nil:
    section.add "Version", valid_617286
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617287 = header.getOrDefault("X-Amz-Date")
  valid_617287 = validateParameter(valid_617287, JString, required = false,
                                 default = nil)
  if valid_617287 != nil:
    section.add "X-Amz-Date", valid_617287
  var valid_617288 = header.getOrDefault("X-Amz-Security-Token")
  valid_617288 = validateParameter(valid_617288, JString, required = false,
                                 default = nil)
  if valid_617288 != nil:
    section.add "X-Amz-Security-Token", valid_617288
  var valid_617289 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617289 = validateParameter(valid_617289, JString, required = false,
                                 default = nil)
  if valid_617289 != nil:
    section.add "X-Amz-Content-Sha256", valid_617289
  var valid_617290 = header.getOrDefault("X-Amz-Algorithm")
  valid_617290 = validateParameter(valid_617290, JString, required = false,
                                 default = nil)
  if valid_617290 != nil:
    section.add "X-Amz-Algorithm", valid_617290
  var valid_617291 = header.getOrDefault("X-Amz-Signature")
  valid_617291 = validateParameter(valid_617291, JString, required = false,
                                 default = nil)
  if valid_617291 != nil:
    section.add "X-Amz-Signature", valid_617291
  var valid_617292 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617292 = validateParameter(valid_617292, JString, required = false,
                                 default = nil)
  if valid_617292 != nil:
    section.add "X-Amz-SignedHeaders", valid_617292
  var valid_617293 = header.getOrDefault("X-Amz-Credential")
  valid_617293 = validateParameter(valid_617293, JString, required = false,
                                 default = nil)
  if valid_617293 != nil:
    section.add "X-Amz-Credential", valid_617293
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   LaunchConfigurationNames: JArray
  ##                           : The launch configuration names. If you omit this parameter, all launch configurations are described.
  section = newJObject()
  var valid_617294 = formData.getOrDefault("MaxRecords")
  valid_617294 = validateParameter(valid_617294, JInt, required = false, default = nil)
  if valid_617294 != nil:
    section.add "MaxRecords", valid_617294
  var valid_617295 = formData.getOrDefault("NextToken")
  valid_617295 = validateParameter(valid_617295, JString, required = false,
                                 default = nil)
  if valid_617295 != nil:
    section.add "NextToken", valid_617295
  var valid_617296 = formData.getOrDefault("LaunchConfigurationNames")
  valid_617296 = validateParameter(valid_617296, JArray, required = false,
                                 default = nil)
  if valid_617296 != nil:
    section.add "LaunchConfigurationNames", valid_617296
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617297: Call_PostDescribeLaunchConfigurations_617282;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes one or more launch configurations.
  ## 
  let valid = call_617297.validator(path, query, header, formData, body)
  let scheme = call_617297.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617297.url(scheme.get, call_617297.host, call_617297.base,
                         call_617297.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617297, url, valid)

proc call*(call_617298: Call_PostDescribeLaunchConfigurations_617282;
          MaxRecords: int = 0; Action: string = "DescribeLaunchConfigurations";
          NextToken: string = ""; LaunchConfigurationNames: JsonNode = nil;
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeLaunchConfigurations
  ## Describes one or more launch configurations.
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   Action: string (required)
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   LaunchConfigurationNames: JArray
  ##                           : The launch configuration names. If you omit this parameter, all launch configurations are described.
  ##   Version: string (required)
  var query_617299 = newJObject()
  var formData_617300 = newJObject()
  add(formData_617300, "MaxRecords", newJInt(MaxRecords))
  add(query_617299, "Action", newJString(Action))
  add(formData_617300, "NextToken", newJString(NextToken))
  if LaunchConfigurationNames != nil:
    formData_617300.add "LaunchConfigurationNames", LaunchConfigurationNames
  add(query_617299, "Version", newJString(Version))
  result = call_617298.call(nil, query_617299, nil, formData_617300, nil)

var postDescribeLaunchConfigurations* = Call_PostDescribeLaunchConfigurations_617282(
    name: "postDescribeLaunchConfigurations", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeLaunchConfigurations",
    validator: validate_PostDescribeLaunchConfigurations_617283, base: "/",
    url: url_PostDescribeLaunchConfigurations_617284,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeLaunchConfigurations_617264 = ref object of OpenApiRestCall_615866
proc url_GetDescribeLaunchConfigurations_617266(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeLaunchConfigurations_617265(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more launch configurations.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   LaunchConfigurationNames: JArray
  ##                           : The launch configuration names. If you omit this parameter, all launch configurations are described.
  ##   Action: JString (required)
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617267 = query.getOrDefault("MaxRecords")
  valid_617267 = validateParameter(valid_617267, JInt, required = false, default = nil)
  if valid_617267 != nil:
    section.add "MaxRecords", valid_617267
  var valid_617268 = query.getOrDefault("LaunchConfigurationNames")
  valid_617268 = validateParameter(valid_617268, JArray, required = false,
                                 default = nil)
  if valid_617268 != nil:
    section.add "LaunchConfigurationNames", valid_617268
  var valid_617269 = query.getOrDefault("Action")
  valid_617269 = validateParameter(valid_617269, JString, required = true, default = newJString(
      "DescribeLaunchConfigurations"))
  if valid_617269 != nil:
    section.add "Action", valid_617269
  var valid_617270 = query.getOrDefault("NextToken")
  valid_617270 = validateParameter(valid_617270, JString, required = false,
                                 default = nil)
  if valid_617270 != nil:
    section.add "NextToken", valid_617270
  var valid_617271 = query.getOrDefault("Version")
  valid_617271 = validateParameter(valid_617271, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617271 != nil:
    section.add "Version", valid_617271
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617272 = header.getOrDefault("X-Amz-Date")
  valid_617272 = validateParameter(valid_617272, JString, required = false,
                                 default = nil)
  if valid_617272 != nil:
    section.add "X-Amz-Date", valid_617272
  var valid_617273 = header.getOrDefault("X-Amz-Security-Token")
  valid_617273 = validateParameter(valid_617273, JString, required = false,
                                 default = nil)
  if valid_617273 != nil:
    section.add "X-Amz-Security-Token", valid_617273
  var valid_617274 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617274 = validateParameter(valid_617274, JString, required = false,
                                 default = nil)
  if valid_617274 != nil:
    section.add "X-Amz-Content-Sha256", valid_617274
  var valid_617275 = header.getOrDefault("X-Amz-Algorithm")
  valid_617275 = validateParameter(valid_617275, JString, required = false,
                                 default = nil)
  if valid_617275 != nil:
    section.add "X-Amz-Algorithm", valid_617275
  var valid_617276 = header.getOrDefault("X-Amz-Signature")
  valid_617276 = validateParameter(valid_617276, JString, required = false,
                                 default = nil)
  if valid_617276 != nil:
    section.add "X-Amz-Signature", valid_617276
  var valid_617277 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617277 = validateParameter(valid_617277, JString, required = false,
                                 default = nil)
  if valid_617277 != nil:
    section.add "X-Amz-SignedHeaders", valid_617277
  var valid_617278 = header.getOrDefault("X-Amz-Credential")
  valid_617278 = validateParameter(valid_617278, JString, required = false,
                                 default = nil)
  if valid_617278 != nil:
    section.add "X-Amz-Credential", valid_617278
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617279: Call_GetDescribeLaunchConfigurations_617264;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes one or more launch configurations.
  ## 
  let valid = call_617279.validator(path, query, header, formData, body)
  let scheme = call_617279.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617279.url(scheme.get, call_617279.host, call_617279.base,
                         call_617279.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617279, url, valid)

proc call*(call_617280: Call_GetDescribeLaunchConfigurations_617264;
          MaxRecords: int = 0; LaunchConfigurationNames: JsonNode = nil;
          Action: string = "DescribeLaunchConfigurations"; NextToken: string = "";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeLaunchConfigurations
  ## Describes one or more launch configurations.
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   LaunchConfigurationNames: JArray
  ##                           : The launch configuration names. If you omit this parameter, all launch configurations are described.
  ##   Action: string (required)
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Version: string (required)
  var query_617281 = newJObject()
  add(query_617281, "MaxRecords", newJInt(MaxRecords))
  if LaunchConfigurationNames != nil:
    query_617281.add "LaunchConfigurationNames", LaunchConfigurationNames
  add(query_617281, "Action", newJString(Action))
  add(query_617281, "NextToken", newJString(NextToken))
  add(query_617281, "Version", newJString(Version))
  result = call_617280.call(nil, query_617281, nil, nil, nil)

var getDescribeLaunchConfigurations* = Call_GetDescribeLaunchConfigurations_617264(
    name: "getDescribeLaunchConfigurations", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeLaunchConfigurations",
    validator: validate_GetDescribeLaunchConfigurations_617265, base: "/",
    url: url_GetDescribeLaunchConfigurations_617266,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeLifecycleHookTypes_617316 = ref object of OpenApiRestCall_615866
proc url_PostDescribeLifecycleHookTypes_617318(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeLifecycleHookTypes_617317(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the available types of lifecycle hooks.</p> <p>The following hook types are supported:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617319 = query.getOrDefault("Action")
  valid_617319 = validateParameter(valid_617319, JString, required = true, default = newJString(
      "DescribeLifecycleHookTypes"))
  if valid_617319 != nil:
    section.add "Action", valid_617319
  var valid_617320 = query.getOrDefault("Version")
  valid_617320 = validateParameter(valid_617320, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617320 != nil:
    section.add "Version", valid_617320
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617321 = header.getOrDefault("X-Amz-Date")
  valid_617321 = validateParameter(valid_617321, JString, required = false,
                                 default = nil)
  if valid_617321 != nil:
    section.add "X-Amz-Date", valid_617321
  var valid_617322 = header.getOrDefault("X-Amz-Security-Token")
  valid_617322 = validateParameter(valid_617322, JString, required = false,
                                 default = nil)
  if valid_617322 != nil:
    section.add "X-Amz-Security-Token", valid_617322
  var valid_617323 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617323 = validateParameter(valid_617323, JString, required = false,
                                 default = nil)
  if valid_617323 != nil:
    section.add "X-Amz-Content-Sha256", valid_617323
  var valid_617324 = header.getOrDefault("X-Amz-Algorithm")
  valid_617324 = validateParameter(valid_617324, JString, required = false,
                                 default = nil)
  if valid_617324 != nil:
    section.add "X-Amz-Algorithm", valid_617324
  var valid_617325 = header.getOrDefault("X-Amz-Signature")
  valid_617325 = validateParameter(valid_617325, JString, required = false,
                                 default = nil)
  if valid_617325 != nil:
    section.add "X-Amz-Signature", valid_617325
  var valid_617326 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617326 = validateParameter(valid_617326, JString, required = false,
                                 default = nil)
  if valid_617326 != nil:
    section.add "X-Amz-SignedHeaders", valid_617326
  var valid_617327 = header.getOrDefault("X-Amz-Credential")
  valid_617327 = validateParameter(valid_617327, JString, required = false,
                                 default = nil)
  if valid_617327 != nil:
    section.add "X-Amz-Credential", valid_617327
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617328: Call_PostDescribeLifecycleHookTypes_617316; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the available types of lifecycle hooks.</p> <p>The following hook types are supported:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul>
  ## 
  let valid = call_617328.validator(path, query, header, formData, body)
  let scheme = call_617328.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617328.url(scheme.get, call_617328.host, call_617328.base,
                         call_617328.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617328, url, valid)

proc call*(call_617329: Call_PostDescribeLifecycleHookTypes_617316;
          Action: string = "DescribeLifecycleHookTypes";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeLifecycleHookTypes
  ## <p>Describes the available types of lifecycle hooks.</p> <p>The following hook types are supported:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617330 = newJObject()
  add(query_617330, "Action", newJString(Action))
  add(query_617330, "Version", newJString(Version))
  result = call_617329.call(nil, query_617330, nil, nil, nil)

var postDescribeLifecycleHookTypes* = Call_PostDescribeLifecycleHookTypes_617316(
    name: "postDescribeLifecycleHookTypes", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeLifecycleHookTypes",
    validator: validate_PostDescribeLifecycleHookTypes_617317, base: "/",
    url: url_PostDescribeLifecycleHookTypes_617318,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeLifecycleHookTypes_617301 = ref object of OpenApiRestCall_615866
proc url_GetDescribeLifecycleHookTypes_617303(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeLifecycleHookTypes_617302(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the available types of lifecycle hooks.</p> <p>The following hook types are supported:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617304 = query.getOrDefault("Action")
  valid_617304 = validateParameter(valid_617304, JString, required = true, default = newJString(
      "DescribeLifecycleHookTypes"))
  if valid_617304 != nil:
    section.add "Action", valid_617304
  var valid_617305 = query.getOrDefault("Version")
  valid_617305 = validateParameter(valid_617305, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617305 != nil:
    section.add "Version", valid_617305
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617306 = header.getOrDefault("X-Amz-Date")
  valid_617306 = validateParameter(valid_617306, JString, required = false,
                                 default = nil)
  if valid_617306 != nil:
    section.add "X-Amz-Date", valid_617306
  var valid_617307 = header.getOrDefault("X-Amz-Security-Token")
  valid_617307 = validateParameter(valid_617307, JString, required = false,
                                 default = nil)
  if valid_617307 != nil:
    section.add "X-Amz-Security-Token", valid_617307
  var valid_617308 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617308 = validateParameter(valid_617308, JString, required = false,
                                 default = nil)
  if valid_617308 != nil:
    section.add "X-Amz-Content-Sha256", valid_617308
  var valid_617309 = header.getOrDefault("X-Amz-Algorithm")
  valid_617309 = validateParameter(valid_617309, JString, required = false,
                                 default = nil)
  if valid_617309 != nil:
    section.add "X-Amz-Algorithm", valid_617309
  var valid_617310 = header.getOrDefault("X-Amz-Signature")
  valid_617310 = validateParameter(valid_617310, JString, required = false,
                                 default = nil)
  if valid_617310 != nil:
    section.add "X-Amz-Signature", valid_617310
  var valid_617311 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617311 = validateParameter(valid_617311, JString, required = false,
                                 default = nil)
  if valid_617311 != nil:
    section.add "X-Amz-SignedHeaders", valid_617311
  var valid_617312 = header.getOrDefault("X-Amz-Credential")
  valid_617312 = validateParameter(valid_617312, JString, required = false,
                                 default = nil)
  if valid_617312 != nil:
    section.add "X-Amz-Credential", valid_617312
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617313: Call_GetDescribeLifecycleHookTypes_617301; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the available types of lifecycle hooks.</p> <p>The following hook types are supported:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul>
  ## 
  let valid = call_617313.validator(path, query, header, formData, body)
  let scheme = call_617313.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617313.url(scheme.get, call_617313.host, call_617313.base,
                         call_617313.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617313, url, valid)

proc call*(call_617314: Call_GetDescribeLifecycleHookTypes_617301;
          Action: string = "DescribeLifecycleHookTypes";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeLifecycleHookTypes
  ## <p>Describes the available types of lifecycle hooks.</p> <p>The following hook types are supported:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617315 = newJObject()
  add(query_617315, "Action", newJString(Action))
  add(query_617315, "Version", newJString(Version))
  result = call_617314.call(nil, query_617315, nil, nil, nil)

var getDescribeLifecycleHookTypes* = Call_GetDescribeLifecycleHookTypes_617301(
    name: "getDescribeLifecycleHookTypes", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeLifecycleHookTypes",
    validator: validate_GetDescribeLifecycleHookTypes_617302, base: "/",
    url: url_GetDescribeLifecycleHookTypes_617303,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeLifecycleHooks_617348 = ref object of OpenApiRestCall_615866
proc url_PostDescribeLifecycleHooks_617350(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeLifecycleHooks_617349(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the lifecycle hooks for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617351 = query.getOrDefault("Action")
  valid_617351 = validateParameter(valid_617351, JString, required = true,
                                 default = newJString("DescribeLifecycleHooks"))
  if valid_617351 != nil:
    section.add "Action", valid_617351
  var valid_617352 = query.getOrDefault("Version")
  valid_617352 = validateParameter(valid_617352, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617352 != nil:
    section.add "Version", valid_617352
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617353 = header.getOrDefault("X-Amz-Date")
  valid_617353 = validateParameter(valid_617353, JString, required = false,
                                 default = nil)
  if valid_617353 != nil:
    section.add "X-Amz-Date", valid_617353
  var valid_617354 = header.getOrDefault("X-Amz-Security-Token")
  valid_617354 = validateParameter(valid_617354, JString, required = false,
                                 default = nil)
  if valid_617354 != nil:
    section.add "X-Amz-Security-Token", valid_617354
  var valid_617355 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617355 = validateParameter(valid_617355, JString, required = false,
                                 default = nil)
  if valid_617355 != nil:
    section.add "X-Amz-Content-Sha256", valid_617355
  var valid_617356 = header.getOrDefault("X-Amz-Algorithm")
  valid_617356 = validateParameter(valid_617356, JString, required = false,
                                 default = nil)
  if valid_617356 != nil:
    section.add "X-Amz-Algorithm", valid_617356
  var valid_617357 = header.getOrDefault("X-Amz-Signature")
  valid_617357 = validateParameter(valid_617357, JString, required = false,
                                 default = nil)
  if valid_617357 != nil:
    section.add "X-Amz-Signature", valid_617357
  var valid_617358 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617358 = validateParameter(valid_617358, JString, required = false,
                                 default = nil)
  if valid_617358 != nil:
    section.add "X-Amz-SignedHeaders", valid_617358
  var valid_617359 = header.getOrDefault("X-Amz-Credential")
  valid_617359 = validateParameter(valid_617359, JString, required = false,
                                 default = nil)
  if valid_617359 != nil:
    section.add "X-Amz-Credential", valid_617359
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookNames: JArray
  ##                     : The names of one or more lifecycle hooks. If you omit this parameter, all lifecycle hooks are described.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_617360 = formData.getOrDefault("AutoScalingGroupName")
  valid_617360 = validateParameter(valid_617360, JString, required = true,
                                 default = nil)
  if valid_617360 != nil:
    section.add "AutoScalingGroupName", valid_617360
  var valid_617361 = formData.getOrDefault("LifecycleHookNames")
  valid_617361 = validateParameter(valid_617361, JArray, required = false,
                                 default = nil)
  if valid_617361 != nil:
    section.add "LifecycleHookNames", valid_617361
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617362: Call_PostDescribeLifecycleHooks_617348; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the lifecycle hooks for the specified Auto Scaling group.
  ## 
  let valid = call_617362.validator(path, query, header, formData, body)
  let scheme = call_617362.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617362.url(scheme.get, call_617362.host, call_617362.base,
                         call_617362.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617362, url, valid)

proc call*(call_617363: Call_PostDescribeLifecycleHooks_617348;
          AutoScalingGroupName: string; LifecycleHookNames: JsonNode = nil;
          Action: string = "DescribeLifecycleHooks"; Version: string = "2011-01-01"): Recallable =
  ## postDescribeLifecycleHooks
  ## Describes the lifecycle hooks for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookNames: JArray
  ##                     : The names of one or more lifecycle hooks. If you omit this parameter, all lifecycle hooks are described.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617364 = newJObject()
  var formData_617365 = newJObject()
  add(formData_617365, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if LifecycleHookNames != nil:
    formData_617365.add "LifecycleHookNames", LifecycleHookNames
  add(query_617364, "Action", newJString(Action))
  add(query_617364, "Version", newJString(Version))
  result = call_617363.call(nil, query_617364, nil, formData_617365, nil)

var postDescribeLifecycleHooks* = Call_PostDescribeLifecycleHooks_617348(
    name: "postDescribeLifecycleHooks", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeLifecycleHooks",
    validator: validate_PostDescribeLifecycleHooks_617349, base: "/",
    url: url_PostDescribeLifecycleHooks_617350,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeLifecycleHooks_617331 = ref object of OpenApiRestCall_615866
proc url_GetDescribeLifecycleHooks_617333(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeLifecycleHooks_617332(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the lifecycle hooks for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookNames: JArray
  ##                     : The names of one or more lifecycle hooks. If you omit this parameter, all lifecycle hooks are described.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_617334 = query.getOrDefault("AutoScalingGroupName")
  valid_617334 = validateParameter(valid_617334, JString, required = true,
                                 default = nil)
  if valid_617334 != nil:
    section.add "AutoScalingGroupName", valid_617334
  var valid_617335 = query.getOrDefault("LifecycleHookNames")
  valid_617335 = validateParameter(valid_617335, JArray, required = false,
                                 default = nil)
  if valid_617335 != nil:
    section.add "LifecycleHookNames", valid_617335
  var valid_617336 = query.getOrDefault("Action")
  valid_617336 = validateParameter(valid_617336, JString, required = true,
                                 default = newJString("DescribeLifecycleHooks"))
  if valid_617336 != nil:
    section.add "Action", valid_617336
  var valid_617337 = query.getOrDefault("Version")
  valid_617337 = validateParameter(valid_617337, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617337 != nil:
    section.add "Version", valid_617337
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617338 = header.getOrDefault("X-Amz-Date")
  valid_617338 = validateParameter(valid_617338, JString, required = false,
                                 default = nil)
  if valid_617338 != nil:
    section.add "X-Amz-Date", valid_617338
  var valid_617339 = header.getOrDefault("X-Amz-Security-Token")
  valid_617339 = validateParameter(valid_617339, JString, required = false,
                                 default = nil)
  if valid_617339 != nil:
    section.add "X-Amz-Security-Token", valid_617339
  var valid_617340 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617340 = validateParameter(valid_617340, JString, required = false,
                                 default = nil)
  if valid_617340 != nil:
    section.add "X-Amz-Content-Sha256", valid_617340
  var valid_617341 = header.getOrDefault("X-Amz-Algorithm")
  valid_617341 = validateParameter(valid_617341, JString, required = false,
                                 default = nil)
  if valid_617341 != nil:
    section.add "X-Amz-Algorithm", valid_617341
  var valid_617342 = header.getOrDefault("X-Amz-Signature")
  valid_617342 = validateParameter(valid_617342, JString, required = false,
                                 default = nil)
  if valid_617342 != nil:
    section.add "X-Amz-Signature", valid_617342
  var valid_617343 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617343 = validateParameter(valid_617343, JString, required = false,
                                 default = nil)
  if valid_617343 != nil:
    section.add "X-Amz-SignedHeaders", valid_617343
  var valid_617344 = header.getOrDefault("X-Amz-Credential")
  valid_617344 = validateParameter(valid_617344, JString, required = false,
                                 default = nil)
  if valid_617344 != nil:
    section.add "X-Amz-Credential", valid_617344
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617345: Call_GetDescribeLifecycleHooks_617331; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the lifecycle hooks for the specified Auto Scaling group.
  ## 
  let valid = call_617345.validator(path, query, header, formData, body)
  let scheme = call_617345.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617345.url(scheme.get, call_617345.host, call_617345.base,
                         call_617345.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617345, url, valid)

proc call*(call_617346: Call_GetDescribeLifecycleHooks_617331;
          AutoScalingGroupName: string; LifecycleHookNames: JsonNode = nil;
          Action: string = "DescribeLifecycleHooks"; Version: string = "2011-01-01"): Recallable =
  ## getDescribeLifecycleHooks
  ## Describes the lifecycle hooks for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookNames: JArray
  ##                     : The names of one or more lifecycle hooks. If you omit this parameter, all lifecycle hooks are described.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617347 = newJObject()
  add(query_617347, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if LifecycleHookNames != nil:
    query_617347.add "LifecycleHookNames", LifecycleHookNames
  add(query_617347, "Action", newJString(Action))
  add(query_617347, "Version", newJString(Version))
  result = call_617346.call(nil, query_617347, nil, nil, nil)

var getDescribeLifecycleHooks* = Call_GetDescribeLifecycleHooks_617331(
    name: "getDescribeLifecycleHooks", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeLifecycleHooks",
    validator: validate_GetDescribeLifecycleHooks_617332, base: "/",
    url: url_GetDescribeLifecycleHooks_617333,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeLoadBalancerTargetGroups_617384 = ref object of OpenApiRestCall_615866
proc url_PostDescribeLoadBalancerTargetGroups_617386(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeLoadBalancerTargetGroups_617385(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the target groups for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617387 = query.getOrDefault("Action")
  valid_617387 = validateParameter(valid_617387, JString, required = true, default = newJString(
      "DescribeLoadBalancerTargetGroups"))
  if valid_617387 != nil:
    section.add "Action", valid_617387
  var valid_617388 = query.getOrDefault("Version")
  valid_617388 = validateParameter(valid_617388, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617388 != nil:
    section.add "Version", valid_617388
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617389 = header.getOrDefault("X-Amz-Date")
  valid_617389 = validateParameter(valid_617389, JString, required = false,
                                 default = nil)
  if valid_617389 != nil:
    section.add "X-Amz-Date", valid_617389
  var valid_617390 = header.getOrDefault("X-Amz-Security-Token")
  valid_617390 = validateParameter(valid_617390, JString, required = false,
                                 default = nil)
  if valid_617390 != nil:
    section.add "X-Amz-Security-Token", valid_617390
  var valid_617391 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617391 = validateParameter(valid_617391, JString, required = false,
                                 default = nil)
  if valid_617391 != nil:
    section.add "X-Amz-Content-Sha256", valid_617391
  var valid_617392 = header.getOrDefault("X-Amz-Algorithm")
  valid_617392 = validateParameter(valid_617392, JString, required = false,
                                 default = nil)
  if valid_617392 != nil:
    section.add "X-Amz-Algorithm", valid_617392
  var valid_617393 = header.getOrDefault("X-Amz-Signature")
  valid_617393 = validateParameter(valid_617393, JString, required = false,
                                 default = nil)
  if valid_617393 != nil:
    section.add "X-Amz-Signature", valid_617393
  var valid_617394 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617394 = validateParameter(valid_617394, JString, required = false,
                                 default = nil)
  if valid_617394 != nil:
    section.add "X-Amz-SignedHeaders", valid_617394
  var valid_617395 = header.getOrDefault("X-Amz-Credential")
  valid_617395 = validateParameter(valid_617395, JString, required = false,
                                 default = nil)
  if valid_617395 != nil:
    section.add "X-Amz-Credential", valid_617395
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_617396 = formData.getOrDefault("AutoScalingGroupName")
  valid_617396 = validateParameter(valid_617396, JString, required = true,
                                 default = nil)
  if valid_617396 != nil:
    section.add "AutoScalingGroupName", valid_617396
  var valid_617397 = formData.getOrDefault("NextToken")
  valid_617397 = validateParameter(valid_617397, JString, required = false,
                                 default = nil)
  if valid_617397 != nil:
    section.add "NextToken", valid_617397
  var valid_617398 = formData.getOrDefault("MaxRecords")
  valid_617398 = validateParameter(valid_617398, JInt, required = false, default = nil)
  if valid_617398 != nil:
    section.add "MaxRecords", valid_617398
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617399: Call_PostDescribeLoadBalancerTargetGroups_617384;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the target groups for the specified Auto Scaling group.
  ## 
  let valid = call_617399.validator(path, query, header, formData, body)
  let scheme = call_617399.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617399.url(scheme.get, call_617399.host, call_617399.base,
                         call_617399.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617399, url, valid)

proc call*(call_617400: Call_PostDescribeLoadBalancerTargetGroups_617384;
          AutoScalingGroupName: string;
          Action: string = "DescribeLoadBalancerTargetGroups";
          NextToken: string = ""; MaxRecords: int = 0; Version: string = "2011-01-01"): Recallable =
  ## postDescribeLoadBalancerTargetGroups
  ## Describes the target groups for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   Version: string (required)
  var query_617401 = newJObject()
  var formData_617402 = newJObject()
  add(formData_617402, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_617401, "Action", newJString(Action))
  add(formData_617402, "NextToken", newJString(NextToken))
  add(formData_617402, "MaxRecords", newJInt(MaxRecords))
  add(query_617401, "Version", newJString(Version))
  result = call_617400.call(nil, query_617401, nil, formData_617402, nil)

var postDescribeLoadBalancerTargetGroups* = Call_PostDescribeLoadBalancerTargetGroups_617384(
    name: "postDescribeLoadBalancerTargetGroups", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeLoadBalancerTargetGroups",
    validator: validate_PostDescribeLoadBalancerTargetGroups_617385, base: "/",
    url: url_PostDescribeLoadBalancerTargetGroups_617386,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeLoadBalancerTargetGroups_617366 = ref object of OpenApiRestCall_615866
proc url_GetDescribeLoadBalancerTargetGroups_617368(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeLoadBalancerTargetGroups_617367(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the target groups for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617369 = query.getOrDefault("MaxRecords")
  valid_617369 = validateParameter(valid_617369, JInt, required = false, default = nil)
  if valid_617369 != nil:
    section.add "MaxRecords", valid_617369
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_617370 = query.getOrDefault("AutoScalingGroupName")
  valid_617370 = validateParameter(valid_617370, JString, required = true,
                                 default = nil)
  if valid_617370 != nil:
    section.add "AutoScalingGroupName", valid_617370
  var valid_617371 = query.getOrDefault("Action")
  valid_617371 = validateParameter(valid_617371, JString, required = true, default = newJString(
      "DescribeLoadBalancerTargetGroups"))
  if valid_617371 != nil:
    section.add "Action", valid_617371
  var valid_617372 = query.getOrDefault("NextToken")
  valid_617372 = validateParameter(valid_617372, JString, required = false,
                                 default = nil)
  if valid_617372 != nil:
    section.add "NextToken", valid_617372
  var valid_617373 = query.getOrDefault("Version")
  valid_617373 = validateParameter(valid_617373, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617373 != nil:
    section.add "Version", valid_617373
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617374 = header.getOrDefault("X-Amz-Date")
  valid_617374 = validateParameter(valid_617374, JString, required = false,
                                 default = nil)
  if valid_617374 != nil:
    section.add "X-Amz-Date", valid_617374
  var valid_617375 = header.getOrDefault("X-Amz-Security-Token")
  valid_617375 = validateParameter(valid_617375, JString, required = false,
                                 default = nil)
  if valid_617375 != nil:
    section.add "X-Amz-Security-Token", valid_617375
  var valid_617376 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617376 = validateParameter(valid_617376, JString, required = false,
                                 default = nil)
  if valid_617376 != nil:
    section.add "X-Amz-Content-Sha256", valid_617376
  var valid_617377 = header.getOrDefault("X-Amz-Algorithm")
  valid_617377 = validateParameter(valid_617377, JString, required = false,
                                 default = nil)
  if valid_617377 != nil:
    section.add "X-Amz-Algorithm", valid_617377
  var valid_617378 = header.getOrDefault("X-Amz-Signature")
  valid_617378 = validateParameter(valid_617378, JString, required = false,
                                 default = nil)
  if valid_617378 != nil:
    section.add "X-Amz-Signature", valid_617378
  var valid_617379 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617379 = validateParameter(valid_617379, JString, required = false,
                                 default = nil)
  if valid_617379 != nil:
    section.add "X-Amz-SignedHeaders", valid_617379
  var valid_617380 = header.getOrDefault("X-Amz-Credential")
  valid_617380 = validateParameter(valid_617380, JString, required = false,
                                 default = nil)
  if valid_617380 != nil:
    section.add "X-Amz-Credential", valid_617380
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617381: Call_GetDescribeLoadBalancerTargetGroups_617366;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the target groups for the specified Auto Scaling group.
  ## 
  let valid = call_617381.validator(path, query, header, formData, body)
  let scheme = call_617381.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617381.url(scheme.get, call_617381.host, call_617381.base,
                         call_617381.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617381, url, valid)

proc call*(call_617382: Call_GetDescribeLoadBalancerTargetGroups_617366;
          AutoScalingGroupName: string; MaxRecords: int = 0;
          Action: string = "DescribeLoadBalancerTargetGroups";
          NextToken: string = ""; Version: string = "2011-01-01"): Recallable =
  ## getDescribeLoadBalancerTargetGroups
  ## Describes the target groups for the specified Auto Scaling group.
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Version: string (required)
  var query_617383 = newJObject()
  add(query_617383, "MaxRecords", newJInt(MaxRecords))
  add(query_617383, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_617383, "Action", newJString(Action))
  add(query_617383, "NextToken", newJString(NextToken))
  add(query_617383, "Version", newJString(Version))
  result = call_617382.call(nil, query_617383, nil, nil, nil)

var getDescribeLoadBalancerTargetGroups* = Call_GetDescribeLoadBalancerTargetGroups_617366(
    name: "getDescribeLoadBalancerTargetGroups", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeLoadBalancerTargetGroups",
    validator: validate_GetDescribeLoadBalancerTargetGroups_617367, base: "/",
    url: url_GetDescribeLoadBalancerTargetGroups_617368,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeLoadBalancers_617421 = ref object of OpenApiRestCall_615866
proc url_PostDescribeLoadBalancers_617423(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeLoadBalancers_617422(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the load balancers for the specified Auto Scaling group.</p> <p>This operation describes only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DescribeLoadBalancerTargetGroups</a> instead.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617424 = query.getOrDefault("Action")
  valid_617424 = validateParameter(valid_617424, JString, required = true,
                                 default = newJString("DescribeLoadBalancers"))
  if valid_617424 != nil:
    section.add "Action", valid_617424
  var valid_617425 = query.getOrDefault("Version")
  valid_617425 = validateParameter(valid_617425, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617425 != nil:
    section.add "Version", valid_617425
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617426 = header.getOrDefault("X-Amz-Date")
  valid_617426 = validateParameter(valid_617426, JString, required = false,
                                 default = nil)
  if valid_617426 != nil:
    section.add "X-Amz-Date", valid_617426
  var valid_617427 = header.getOrDefault("X-Amz-Security-Token")
  valid_617427 = validateParameter(valid_617427, JString, required = false,
                                 default = nil)
  if valid_617427 != nil:
    section.add "X-Amz-Security-Token", valid_617427
  var valid_617428 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617428 = validateParameter(valid_617428, JString, required = false,
                                 default = nil)
  if valid_617428 != nil:
    section.add "X-Amz-Content-Sha256", valid_617428
  var valid_617429 = header.getOrDefault("X-Amz-Algorithm")
  valid_617429 = validateParameter(valid_617429, JString, required = false,
                                 default = nil)
  if valid_617429 != nil:
    section.add "X-Amz-Algorithm", valid_617429
  var valid_617430 = header.getOrDefault("X-Amz-Signature")
  valid_617430 = validateParameter(valid_617430, JString, required = false,
                                 default = nil)
  if valid_617430 != nil:
    section.add "X-Amz-Signature", valid_617430
  var valid_617431 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617431 = validateParameter(valid_617431, JString, required = false,
                                 default = nil)
  if valid_617431 != nil:
    section.add "X-Amz-SignedHeaders", valid_617431
  var valid_617432 = header.getOrDefault("X-Amz-Credential")
  valid_617432 = validateParameter(valid_617432, JString, required = false,
                                 default = nil)
  if valid_617432 != nil:
    section.add "X-Amz-Credential", valid_617432
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_617433 = formData.getOrDefault("AutoScalingGroupName")
  valid_617433 = validateParameter(valid_617433, JString, required = true,
                                 default = nil)
  if valid_617433 != nil:
    section.add "AutoScalingGroupName", valid_617433
  var valid_617434 = formData.getOrDefault("NextToken")
  valid_617434 = validateParameter(valid_617434, JString, required = false,
                                 default = nil)
  if valid_617434 != nil:
    section.add "NextToken", valid_617434
  var valid_617435 = formData.getOrDefault("MaxRecords")
  valid_617435 = validateParameter(valid_617435, JInt, required = false, default = nil)
  if valid_617435 != nil:
    section.add "MaxRecords", valid_617435
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617436: Call_PostDescribeLoadBalancers_617421; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the load balancers for the specified Auto Scaling group.</p> <p>This operation describes only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DescribeLoadBalancerTargetGroups</a> instead.</p>
  ## 
  let valid = call_617436.validator(path, query, header, formData, body)
  let scheme = call_617436.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617436.url(scheme.get, call_617436.host, call_617436.base,
                         call_617436.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617436, url, valid)

proc call*(call_617437: Call_PostDescribeLoadBalancers_617421;
          AutoScalingGroupName: string; Action: string = "DescribeLoadBalancers";
          NextToken: string = ""; MaxRecords: int = 0; Version: string = "2011-01-01"): Recallable =
  ## postDescribeLoadBalancers
  ## <p>Describes the load balancers for the specified Auto Scaling group.</p> <p>This operation describes only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DescribeLoadBalancerTargetGroups</a> instead.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   Version: string (required)
  var query_617438 = newJObject()
  var formData_617439 = newJObject()
  add(formData_617439, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_617438, "Action", newJString(Action))
  add(formData_617439, "NextToken", newJString(NextToken))
  add(formData_617439, "MaxRecords", newJInt(MaxRecords))
  add(query_617438, "Version", newJString(Version))
  result = call_617437.call(nil, query_617438, nil, formData_617439, nil)

var postDescribeLoadBalancers* = Call_PostDescribeLoadBalancers_617421(
    name: "postDescribeLoadBalancers", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeLoadBalancers",
    validator: validate_PostDescribeLoadBalancers_617422, base: "/",
    url: url_PostDescribeLoadBalancers_617423,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeLoadBalancers_617403 = ref object of OpenApiRestCall_615866
proc url_GetDescribeLoadBalancers_617405(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeLoadBalancers_617404(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the load balancers for the specified Auto Scaling group.</p> <p>This operation describes only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DescribeLoadBalancerTargetGroups</a> instead.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617406 = query.getOrDefault("MaxRecords")
  valid_617406 = validateParameter(valid_617406, JInt, required = false, default = nil)
  if valid_617406 != nil:
    section.add "MaxRecords", valid_617406
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_617407 = query.getOrDefault("AutoScalingGroupName")
  valid_617407 = validateParameter(valid_617407, JString, required = true,
                                 default = nil)
  if valid_617407 != nil:
    section.add "AutoScalingGroupName", valid_617407
  var valid_617408 = query.getOrDefault("Action")
  valid_617408 = validateParameter(valid_617408, JString, required = true,
                                 default = newJString("DescribeLoadBalancers"))
  if valid_617408 != nil:
    section.add "Action", valid_617408
  var valid_617409 = query.getOrDefault("NextToken")
  valid_617409 = validateParameter(valid_617409, JString, required = false,
                                 default = nil)
  if valid_617409 != nil:
    section.add "NextToken", valid_617409
  var valid_617410 = query.getOrDefault("Version")
  valid_617410 = validateParameter(valid_617410, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617410 != nil:
    section.add "Version", valid_617410
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617411 = header.getOrDefault("X-Amz-Date")
  valid_617411 = validateParameter(valid_617411, JString, required = false,
                                 default = nil)
  if valid_617411 != nil:
    section.add "X-Amz-Date", valid_617411
  var valid_617412 = header.getOrDefault("X-Amz-Security-Token")
  valid_617412 = validateParameter(valid_617412, JString, required = false,
                                 default = nil)
  if valid_617412 != nil:
    section.add "X-Amz-Security-Token", valid_617412
  var valid_617413 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617413 = validateParameter(valid_617413, JString, required = false,
                                 default = nil)
  if valid_617413 != nil:
    section.add "X-Amz-Content-Sha256", valid_617413
  var valid_617414 = header.getOrDefault("X-Amz-Algorithm")
  valid_617414 = validateParameter(valid_617414, JString, required = false,
                                 default = nil)
  if valid_617414 != nil:
    section.add "X-Amz-Algorithm", valid_617414
  var valid_617415 = header.getOrDefault("X-Amz-Signature")
  valid_617415 = validateParameter(valid_617415, JString, required = false,
                                 default = nil)
  if valid_617415 != nil:
    section.add "X-Amz-Signature", valid_617415
  var valid_617416 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617416 = validateParameter(valid_617416, JString, required = false,
                                 default = nil)
  if valid_617416 != nil:
    section.add "X-Amz-SignedHeaders", valid_617416
  var valid_617417 = header.getOrDefault("X-Amz-Credential")
  valid_617417 = validateParameter(valid_617417, JString, required = false,
                                 default = nil)
  if valid_617417 != nil:
    section.add "X-Amz-Credential", valid_617417
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617418: Call_GetDescribeLoadBalancers_617403; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the load balancers for the specified Auto Scaling group.</p> <p>This operation describes only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DescribeLoadBalancerTargetGroups</a> instead.</p>
  ## 
  let valid = call_617418.validator(path, query, header, formData, body)
  let scheme = call_617418.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617418.url(scheme.get, call_617418.host, call_617418.base,
                         call_617418.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617418, url, valid)

proc call*(call_617419: Call_GetDescribeLoadBalancers_617403;
          AutoScalingGroupName: string; MaxRecords: int = 0;
          Action: string = "DescribeLoadBalancers"; NextToken: string = "";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeLoadBalancers
  ## <p>Describes the load balancers for the specified Auto Scaling group.</p> <p>This operation describes only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DescribeLoadBalancerTargetGroups</a> instead.</p>
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Version: string (required)
  var query_617420 = newJObject()
  add(query_617420, "MaxRecords", newJInt(MaxRecords))
  add(query_617420, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_617420, "Action", newJString(Action))
  add(query_617420, "NextToken", newJString(NextToken))
  add(query_617420, "Version", newJString(Version))
  result = call_617419.call(nil, query_617420, nil, nil, nil)

var getDescribeLoadBalancers* = Call_GetDescribeLoadBalancers_617403(
    name: "getDescribeLoadBalancers", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeLoadBalancers",
    validator: validate_GetDescribeLoadBalancers_617404, base: "/",
    url: url_GetDescribeLoadBalancers_617405, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeMetricCollectionTypes_617455 = ref object of OpenApiRestCall_615866
proc url_PostDescribeMetricCollectionTypes_617457(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeMetricCollectionTypes_617456(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.</p> <p>The <code>GroupStandbyInstances</code> metric is not returned by default. You must explicitly request this metric when calling <a>EnableMetricsCollection</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617458 = query.getOrDefault("Action")
  valid_617458 = validateParameter(valid_617458, JString, required = true, default = newJString(
      "DescribeMetricCollectionTypes"))
  if valid_617458 != nil:
    section.add "Action", valid_617458
  var valid_617459 = query.getOrDefault("Version")
  valid_617459 = validateParameter(valid_617459, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617459 != nil:
    section.add "Version", valid_617459
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617460 = header.getOrDefault("X-Amz-Date")
  valid_617460 = validateParameter(valid_617460, JString, required = false,
                                 default = nil)
  if valid_617460 != nil:
    section.add "X-Amz-Date", valid_617460
  var valid_617461 = header.getOrDefault("X-Amz-Security-Token")
  valid_617461 = validateParameter(valid_617461, JString, required = false,
                                 default = nil)
  if valid_617461 != nil:
    section.add "X-Amz-Security-Token", valid_617461
  var valid_617462 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617462 = validateParameter(valid_617462, JString, required = false,
                                 default = nil)
  if valid_617462 != nil:
    section.add "X-Amz-Content-Sha256", valid_617462
  var valid_617463 = header.getOrDefault("X-Amz-Algorithm")
  valid_617463 = validateParameter(valid_617463, JString, required = false,
                                 default = nil)
  if valid_617463 != nil:
    section.add "X-Amz-Algorithm", valid_617463
  var valid_617464 = header.getOrDefault("X-Amz-Signature")
  valid_617464 = validateParameter(valid_617464, JString, required = false,
                                 default = nil)
  if valid_617464 != nil:
    section.add "X-Amz-Signature", valid_617464
  var valid_617465 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617465 = validateParameter(valid_617465, JString, required = false,
                                 default = nil)
  if valid_617465 != nil:
    section.add "X-Amz-SignedHeaders", valid_617465
  var valid_617466 = header.getOrDefault("X-Amz-Credential")
  valid_617466 = validateParameter(valid_617466, JString, required = false,
                                 default = nil)
  if valid_617466 != nil:
    section.add "X-Amz-Credential", valid_617466
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617467: Call_PostDescribeMetricCollectionTypes_617455;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.</p> <p>The <code>GroupStandbyInstances</code> metric is not returned by default. You must explicitly request this metric when calling <a>EnableMetricsCollection</a>.</p>
  ## 
  let valid = call_617467.validator(path, query, header, formData, body)
  let scheme = call_617467.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617467.url(scheme.get, call_617467.host, call_617467.base,
                         call_617467.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617467, url, valid)

proc call*(call_617468: Call_PostDescribeMetricCollectionTypes_617455;
          Action: string = "DescribeMetricCollectionTypes";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeMetricCollectionTypes
  ## <p>Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.</p> <p>The <code>GroupStandbyInstances</code> metric is not returned by default. You must explicitly request this metric when calling <a>EnableMetricsCollection</a>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617469 = newJObject()
  add(query_617469, "Action", newJString(Action))
  add(query_617469, "Version", newJString(Version))
  result = call_617468.call(nil, query_617469, nil, nil, nil)

var postDescribeMetricCollectionTypes* = Call_PostDescribeMetricCollectionTypes_617455(
    name: "postDescribeMetricCollectionTypes", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeMetricCollectionTypes",
    validator: validate_PostDescribeMetricCollectionTypes_617456, base: "/",
    url: url_PostDescribeMetricCollectionTypes_617457,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeMetricCollectionTypes_617440 = ref object of OpenApiRestCall_615866
proc url_GetDescribeMetricCollectionTypes_617442(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeMetricCollectionTypes_617441(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.</p> <p>The <code>GroupStandbyInstances</code> metric is not returned by default. You must explicitly request this metric when calling <a>EnableMetricsCollection</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617443 = query.getOrDefault("Action")
  valid_617443 = validateParameter(valid_617443, JString, required = true, default = newJString(
      "DescribeMetricCollectionTypes"))
  if valid_617443 != nil:
    section.add "Action", valid_617443
  var valid_617444 = query.getOrDefault("Version")
  valid_617444 = validateParameter(valid_617444, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617444 != nil:
    section.add "Version", valid_617444
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617445 = header.getOrDefault("X-Amz-Date")
  valid_617445 = validateParameter(valid_617445, JString, required = false,
                                 default = nil)
  if valid_617445 != nil:
    section.add "X-Amz-Date", valid_617445
  var valid_617446 = header.getOrDefault("X-Amz-Security-Token")
  valid_617446 = validateParameter(valid_617446, JString, required = false,
                                 default = nil)
  if valid_617446 != nil:
    section.add "X-Amz-Security-Token", valid_617446
  var valid_617447 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617447 = validateParameter(valid_617447, JString, required = false,
                                 default = nil)
  if valid_617447 != nil:
    section.add "X-Amz-Content-Sha256", valid_617447
  var valid_617448 = header.getOrDefault("X-Amz-Algorithm")
  valid_617448 = validateParameter(valid_617448, JString, required = false,
                                 default = nil)
  if valid_617448 != nil:
    section.add "X-Amz-Algorithm", valid_617448
  var valid_617449 = header.getOrDefault("X-Amz-Signature")
  valid_617449 = validateParameter(valid_617449, JString, required = false,
                                 default = nil)
  if valid_617449 != nil:
    section.add "X-Amz-Signature", valid_617449
  var valid_617450 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617450 = validateParameter(valid_617450, JString, required = false,
                                 default = nil)
  if valid_617450 != nil:
    section.add "X-Amz-SignedHeaders", valid_617450
  var valid_617451 = header.getOrDefault("X-Amz-Credential")
  valid_617451 = validateParameter(valid_617451, JString, required = false,
                                 default = nil)
  if valid_617451 != nil:
    section.add "X-Amz-Credential", valid_617451
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617452: Call_GetDescribeMetricCollectionTypes_617440;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.</p> <p>The <code>GroupStandbyInstances</code> metric is not returned by default. You must explicitly request this metric when calling <a>EnableMetricsCollection</a>.</p>
  ## 
  let valid = call_617452.validator(path, query, header, formData, body)
  let scheme = call_617452.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617452.url(scheme.get, call_617452.host, call_617452.base,
                         call_617452.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617452, url, valid)

proc call*(call_617453: Call_GetDescribeMetricCollectionTypes_617440;
          Action: string = "DescribeMetricCollectionTypes";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeMetricCollectionTypes
  ## <p>Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.</p> <p>The <code>GroupStandbyInstances</code> metric is not returned by default. You must explicitly request this metric when calling <a>EnableMetricsCollection</a>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617454 = newJObject()
  add(query_617454, "Action", newJString(Action))
  add(query_617454, "Version", newJString(Version))
  result = call_617453.call(nil, query_617454, nil, nil, nil)

var getDescribeMetricCollectionTypes* = Call_GetDescribeMetricCollectionTypes_617440(
    name: "getDescribeMetricCollectionTypes", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeMetricCollectionTypes",
    validator: validate_GetDescribeMetricCollectionTypes_617441, base: "/",
    url: url_GetDescribeMetricCollectionTypes_617442,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeNotificationConfigurations_617488 = ref object of OpenApiRestCall_615866
proc url_PostDescribeNotificationConfigurations_617490(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeNotificationConfigurations_617489(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the notification actions associated with the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617491 = query.getOrDefault("Action")
  valid_617491 = validateParameter(valid_617491, JString, required = true, default = newJString(
      "DescribeNotificationConfigurations"))
  if valid_617491 != nil:
    section.add "Action", valid_617491
  var valid_617492 = query.getOrDefault("Version")
  valid_617492 = validateParameter(valid_617492, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617492 != nil:
    section.add "Version", valid_617492
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617493 = header.getOrDefault("X-Amz-Date")
  valid_617493 = validateParameter(valid_617493, JString, required = false,
                                 default = nil)
  if valid_617493 != nil:
    section.add "X-Amz-Date", valid_617493
  var valid_617494 = header.getOrDefault("X-Amz-Security-Token")
  valid_617494 = validateParameter(valid_617494, JString, required = false,
                                 default = nil)
  if valid_617494 != nil:
    section.add "X-Amz-Security-Token", valid_617494
  var valid_617495 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617495 = validateParameter(valid_617495, JString, required = false,
                                 default = nil)
  if valid_617495 != nil:
    section.add "X-Amz-Content-Sha256", valid_617495
  var valid_617496 = header.getOrDefault("X-Amz-Algorithm")
  valid_617496 = validateParameter(valid_617496, JString, required = false,
                                 default = nil)
  if valid_617496 != nil:
    section.add "X-Amz-Algorithm", valid_617496
  var valid_617497 = header.getOrDefault("X-Amz-Signature")
  valid_617497 = validateParameter(valid_617497, JString, required = false,
                                 default = nil)
  if valid_617497 != nil:
    section.add "X-Amz-Signature", valid_617497
  var valid_617498 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617498 = validateParameter(valid_617498, JString, required = false,
                                 default = nil)
  if valid_617498 != nil:
    section.add "X-Amz-SignedHeaders", valid_617498
  var valid_617499 = header.getOrDefault("X-Amz-Credential")
  valid_617499 = validateParameter(valid_617499, JString, required = false,
                                 default = nil)
  if valid_617499 != nil:
    section.add "X-Amz-Credential", valid_617499
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupNames: JArray
  ##                        : The name of the Auto Scaling group.
  section = newJObject()
  var valid_617500 = formData.getOrDefault("NextToken")
  valid_617500 = validateParameter(valid_617500, JString, required = false,
                                 default = nil)
  if valid_617500 != nil:
    section.add "NextToken", valid_617500
  var valid_617501 = formData.getOrDefault("MaxRecords")
  valid_617501 = validateParameter(valid_617501, JInt, required = false, default = nil)
  if valid_617501 != nil:
    section.add "MaxRecords", valid_617501
  var valid_617502 = formData.getOrDefault("AutoScalingGroupNames")
  valid_617502 = validateParameter(valid_617502, JArray, required = false,
                                 default = nil)
  if valid_617502 != nil:
    section.add "AutoScalingGroupNames", valid_617502
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617503: Call_PostDescribeNotificationConfigurations_617488;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the notification actions associated with the specified Auto Scaling group.
  ## 
  let valid = call_617503.validator(path, query, header, formData, body)
  let scheme = call_617503.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617503.url(scheme.get, call_617503.host, call_617503.base,
                         call_617503.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617503, url, valid)

proc call*(call_617504: Call_PostDescribeNotificationConfigurations_617488;
          Action: string = "DescribeNotificationConfigurations";
          NextToken: string = ""; MaxRecords: int = 0; Version: string = "2011-01-01";
          AutoScalingGroupNames: JsonNode = nil): Recallable =
  ## postDescribeNotificationConfigurations
  ## Describes the notification actions associated with the specified Auto Scaling group.
  ##   Action: string (required)
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   Version: string (required)
  ##   AutoScalingGroupNames: JArray
  ##                        : The name of the Auto Scaling group.
  var query_617505 = newJObject()
  var formData_617506 = newJObject()
  add(query_617505, "Action", newJString(Action))
  add(formData_617506, "NextToken", newJString(NextToken))
  add(formData_617506, "MaxRecords", newJInt(MaxRecords))
  add(query_617505, "Version", newJString(Version))
  if AutoScalingGroupNames != nil:
    formData_617506.add "AutoScalingGroupNames", AutoScalingGroupNames
  result = call_617504.call(nil, query_617505, nil, formData_617506, nil)

var postDescribeNotificationConfigurations* = Call_PostDescribeNotificationConfigurations_617488(
    name: "postDescribeNotificationConfigurations", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeNotificationConfigurations",
    validator: validate_PostDescribeNotificationConfigurations_617489, base: "/",
    url: url_PostDescribeNotificationConfigurations_617490,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeNotificationConfigurations_617470 = ref object of OpenApiRestCall_615866
proc url_GetDescribeNotificationConfigurations_617472(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeNotificationConfigurations_617471(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the notification actions associated with the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   Action: JString (required)
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   AutoScalingGroupNames: JArray
  ##                        : The name of the Auto Scaling group.
  ##   Version: JString (required)
  section = newJObject()
  var valid_617473 = query.getOrDefault("MaxRecords")
  valid_617473 = validateParameter(valid_617473, JInt, required = false, default = nil)
  if valid_617473 != nil:
    section.add "MaxRecords", valid_617473
  var valid_617474 = query.getOrDefault("Action")
  valid_617474 = validateParameter(valid_617474, JString, required = true, default = newJString(
      "DescribeNotificationConfigurations"))
  if valid_617474 != nil:
    section.add "Action", valid_617474
  var valid_617475 = query.getOrDefault("NextToken")
  valid_617475 = validateParameter(valid_617475, JString, required = false,
                                 default = nil)
  if valid_617475 != nil:
    section.add "NextToken", valid_617475
  var valid_617476 = query.getOrDefault("AutoScalingGroupNames")
  valid_617476 = validateParameter(valid_617476, JArray, required = false,
                                 default = nil)
  if valid_617476 != nil:
    section.add "AutoScalingGroupNames", valid_617476
  var valid_617477 = query.getOrDefault("Version")
  valid_617477 = validateParameter(valid_617477, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617477 != nil:
    section.add "Version", valid_617477
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617478 = header.getOrDefault("X-Amz-Date")
  valid_617478 = validateParameter(valid_617478, JString, required = false,
                                 default = nil)
  if valid_617478 != nil:
    section.add "X-Amz-Date", valid_617478
  var valid_617479 = header.getOrDefault("X-Amz-Security-Token")
  valid_617479 = validateParameter(valid_617479, JString, required = false,
                                 default = nil)
  if valid_617479 != nil:
    section.add "X-Amz-Security-Token", valid_617479
  var valid_617480 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617480 = validateParameter(valid_617480, JString, required = false,
                                 default = nil)
  if valid_617480 != nil:
    section.add "X-Amz-Content-Sha256", valid_617480
  var valid_617481 = header.getOrDefault("X-Amz-Algorithm")
  valid_617481 = validateParameter(valid_617481, JString, required = false,
                                 default = nil)
  if valid_617481 != nil:
    section.add "X-Amz-Algorithm", valid_617481
  var valid_617482 = header.getOrDefault("X-Amz-Signature")
  valid_617482 = validateParameter(valid_617482, JString, required = false,
                                 default = nil)
  if valid_617482 != nil:
    section.add "X-Amz-Signature", valid_617482
  var valid_617483 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617483 = validateParameter(valid_617483, JString, required = false,
                                 default = nil)
  if valid_617483 != nil:
    section.add "X-Amz-SignedHeaders", valid_617483
  var valid_617484 = header.getOrDefault("X-Amz-Credential")
  valid_617484 = validateParameter(valid_617484, JString, required = false,
                                 default = nil)
  if valid_617484 != nil:
    section.add "X-Amz-Credential", valid_617484
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617485: Call_GetDescribeNotificationConfigurations_617470;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the notification actions associated with the specified Auto Scaling group.
  ## 
  let valid = call_617485.validator(path, query, header, formData, body)
  let scheme = call_617485.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617485.url(scheme.get, call_617485.host, call_617485.base,
                         call_617485.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617485, url, valid)

proc call*(call_617486: Call_GetDescribeNotificationConfigurations_617470;
          MaxRecords: int = 0;
          Action: string = "DescribeNotificationConfigurations";
          NextToken: string = ""; AutoScalingGroupNames: JsonNode = nil;
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeNotificationConfigurations
  ## Describes the notification actions associated with the specified Auto Scaling group.
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   Action: string (required)
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   AutoScalingGroupNames: JArray
  ##                        : The name of the Auto Scaling group.
  ##   Version: string (required)
  var query_617487 = newJObject()
  add(query_617487, "MaxRecords", newJInt(MaxRecords))
  add(query_617487, "Action", newJString(Action))
  add(query_617487, "NextToken", newJString(NextToken))
  if AutoScalingGroupNames != nil:
    query_617487.add "AutoScalingGroupNames", AutoScalingGroupNames
  add(query_617487, "Version", newJString(Version))
  result = call_617486.call(nil, query_617487, nil, nil, nil)

var getDescribeNotificationConfigurations* = Call_GetDescribeNotificationConfigurations_617470(
    name: "getDescribeNotificationConfigurations", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeNotificationConfigurations",
    validator: validate_GetDescribeNotificationConfigurations_617471, base: "/",
    url: url_GetDescribeNotificationConfigurations_617472,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribePolicies_617527 = ref object of OpenApiRestCall_615866
proc url_PostDescribePolicies_617529(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribePolicies_617528(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the policies for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617530 = query.getOrDefault("Action")
  valid_617530 = validateParameter(valid_617530, JString, required = true,
                                 default = newJString("DescribePolicies"))
  if valid_617530 != nil:
    section.add "Action", valid_617530
  var valid_617531 = query.getOrDefault("Version")
  valid_617531 = validateParameter(valid_617531, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617531 != nil:
    section.add "Version", valid_617531
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617532 = header.getOrDefault("X-Amz-Date")
  valid_617532 = validateParameter(valid_617532, JString, required = false,
                                 default = nil)
  if valid_617532 != nil:
    section.add "X-Amz-Date", valid_617532
  var valid_617533 = header.getOrDefault("X-Amz-Security-Token")
  valid_617533 = validateParameter(valid_617533, JString, required = false,
                                 default = nil)
  if valid_617533 != nil:
    section.add "X-Amz-Security-Token", valid_617533
  var valid_617534 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617534 = validateParameter(valid_617534, JString, required = false,
                                 default = nil)
  if valid_617534 != nil:
    section.add "X-Amz-Content-Sha256", valid_617534
  var valid_617535 = header.getOrDefault("X-Amz-Algorithm")
  valid_617535 = validateParameter(valid_617535, JString, required = false,
                                 default = nil)
  if valid_617535 != nil:
    section.add "X-Amz-Algorithm", valid_617535
  var valid_617536 = header.getOrDefault("X-Amz-Signature")
  valid_617536 = validateParameter(valid_617536, JString, required = false,
                                 default = nil)
  if valid_617536 != nil:
    section.add "X-Amz-Signature", valid_617536
  var valid_617537 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617537 = validateParameter(valid_617537, JString, required = false,
                                 default = nil)
  if valid_617537 != nil:
    section.add "X-Amz-SignedHeaders", valid_617537
  var valid_617538 = header.getOrDefault("X-Amz-Credential")
  valid_617538 = validateParameter(valid_617538, JString, required = false,
                                 default = nil)
  if valid_617538 != nil:
    section.add "X-Amz-Credential", valid_617538
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   PolicyNames: JArray
  ##              : The names of one or more policies. If you omit this parameter, all policies are described. If a group name is provided, the results are limited to that group. This list is limited to 50 items. If you specify an unknown policy name, it is ignored with no error.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   PolicyTypes: JArray
  ##              : One or more policy types. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>.
  ##   MaxRecords: JInt
  ##             : The maximum number of items to be returned with each call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  section = newJObject()
  var valid_617539 = formData.getOrDefault("AutoScalingGroupName")
  valid_617539 = validateParameter(valid_617539, JString, required = false,
                                 default = nil)
  if valid_617539 != nil:
    section.add "AutoScalingGroupName", valid_617539
  var valid_617540 = formData.getOrDefault("PolicyNames")
  valid_617540 = validateParameter(valid_617540, JArray, required = false,
                                 default = nil)
  if valid_617540 != nil:
    section.add "PolicyNames", valid_617540
  var valid_617541 = formData.getOrDefault("NextToken")
  valid_617541 = validateParameter(valid_617541, JString, required = false,
                                 default = nil)
  if valid_617541 != nil:
    section.add "NextToken", valid_617541
  var valid_617542 = formData.getOrDefault("PolicyTypes")
  valid_617542 = validateParameter(valid_617542, JArray, required = false,
                                 default = nil)
  if valid_617542 != nil:
    section.add "PolicyTypes", valid_617542
  var valid_617543 = formData.getOrDefault("MaxRecords")
  valid_617543 = validateParameter(valid_617543, JInt, required = false, default = nil)
  if valid_617543 != nil:
    section.add "MaxRecords", valid_617543
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617544: Call_PostDescribePolicies_617527; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the policies for the specified Auto Scaling group.
  ## 
  let valid = call_617544.validator(path, query, header, formData, body)
  let scheme = call_617544.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617544.url(scheme.get, call_617544.host, call_617544.base,
                         call_617544.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617544, url, valid)

proc call*(call_617545: Call_PostDescribePolicies_617527;
          AutoScalingGroupName: string = ""; PolicyNames: JsonNode = nil;
          Action: string = "DescribePolicies"; NextToken: string = "";
          PolicyTypes: JsonNode = nil; MaxRecords: int = 0;
          Version: string = "2011-01-01"): Recallable =
  ## postDescribePolicies
  ## Describes the policies for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   PolicyNames: JArray
  ##              : The names of one or more policies. If you omit this parameter, all policies are described. If a group name is provided, the results are limited to that group. This list is limited to 50 items. If you specify an unknown policy name, it is ignored with no error.
  ##   Action: string (required)
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   PolicyTypes: JArray
  ##              : One or more policy types. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>.
  ##   MaxRecords: int
  ##             : The maximum number of items to be returned with each call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   Version: string (required)
  var query_617546 = newJObject()
  var formData_617547 = newJObject()
  add(formData_617547, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if PolicyNames != nil:
    formData_617547.add "PolicyNames", PolicyNames
  add(query_617546, "Action", newJString(Action))
  add(formData_617547, "NextToken", newJString(NextToken))
  if PolicyTypes != nil:
    formData_617547.add "PolicyTypes", PolicyTypes
  add(formData_617547, "MaxRecords", newJInt(MaxRecords))
  add(query_617546, "Version", newJString(Version))
  result = call_617545.call(nil, query_617546, nil, formData_617547, nil)

var postDescribePolicies* = Call_PostDescribePolicies_617527(
    name: "postDescribePolicies", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribePolicies",
    validator: validate_PostDescribePolicies_617528, base: "/",
    url: url_PostDescribePolicies_617529, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribePolicies_617507 = ref object of OpenApiRestCall_615866
proc url_GetDescribePolicies_617509(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribePolicies_617508(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Describes the policies for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of items to be returned with each call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   PolicyNames: JArray
  ##              : The names of one or more policies. If you omit this parameter, all policies are described. If a group name is provided, the results are limited to that group. This list is limited to 50 items. If you specify an unknown policy name, it is ignored with no error.
  ##   Version: JString (required)
  ##   PolicyTypes: JArray
  ##              : One or more policy types. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>.
  section = newJObject()
  var valid_617510 = query.getOrDefault("MaxRecords")
  valid_617510 = validateParameter(valid_617510, JInt, required = false, default = nil)
  if valid_617510 != nil:
    section.add "MaxRecords", valid_617510
  var valid_617511 = query.getOrDefault("AutoScalingGroupName")
  valid_617511 = validateParameter(valid_617511, JString, required = false,
                                 default = nil)
  if valid_617511 != nil:
    section.add "AutoScalingGroupName", valid_617511
  var valid_617512 = query.getOrDefault("Action")
  valid_617512 = validateParameter(valid_617512, JString, required = true,
                                 default = newJString("DescribePolicies"))
  if valid_617512 != nil:
    section.add "Action", valid_617512
  var valid_617513 = query.getOrDefault("NextToken")
  valid_617513 = validateParameter(valid_617513, JString, required = false,
                                 default = nil)
  if valid_617513 != nil:
    section.add "NextToken", valid_617513
  var valid_617514 = query.getOrDefault("PolicyNames")
  valid_617514 = validateParameter(valid_617514, JArray, required = false,
                                 default = nil)
  if valid_617514 != nil:
    section.add "PolicyNames", valid_617514
  var valid_617515 = query.getOrDefault("Version")
  valid_617515 = validateParameter(valid_617515, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617515 != nil:
    section.add "Version", valid_617515
  var valid_617516 = query.getOrDefault("PolicyTypes")
  valid_617516 = validateParameter(valid_617516, JArray, required = false,
                                 default = nil)
  if valid_617516 != nil:
    section.add "PolicyTypes", valid_617516
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617517 = header.getOrDefault("X-Amz-Date")
  valid_617517 = validateParameter(valid_617517, JString, required = false,
                                 default = nil)
  if valid_617517 != nil:
    section.add "X-Amz-Date", valid_617517
  var valid_617518 = header.getOrDefault("X-Amz-Security-Token")
  valid_617518 = validateParameter(valid_617518, JString, required = false,
                                 default = nil)
  if valid_617518 != nil:
    section.add "X-Amz-Security-Token", valid_617518
  var valid_617519 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617519 = validateParameter(valid_617519, JString, required = false,
                                 default = nil)
  if valid_617519 != nil:
    section.add "X-Amz-Content-Sha256", valid_617519
  var valid_617520 = header.getOrDefault("X-Amz-Algorithm")
  valid_617520 = validateParameter(valid_617520, JString, required = false,
                                 default = nil)
  if valid_617520 != nil:
    section.add "X-Amz-Algorithm", valid_617520
  var valid_617521 = header.getOrDefault("X-Amz-Signature")
  valid_617521 = validateParameter(valid_617521, JString, required = false,
                                 default = nil)
  if valid_617521 != nil:
    section.add "X-Amz-Signature", valid_617521
  var valid_617522 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617522 = validateParameter(valid_617522, JString, required = false,
                                 default = nil)
  if valid_617522 != nil:
    section.add "X-Amz-SignedHeaders", valid_617522
  var valid_617523 = header.getOrDefault("X-Amz-Credential")
  valid_617523 = validateParameter(valid_617523, JString, required = false,
                                 default = nil)
  if valid_617523 != nil:
    section.add "X-Amz-Credential", valid_617523
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617524: Call_GetDescribePolicies_617507; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the policies for the specified Auto Scaling group.
  ## 
  let valid = call_617524.validator(path, query, header, formData, body)
  let scheme = call_617524.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617524.url(scheme.get, call_617524.host, call_617524.base,
                         call_617524.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617524, url, valid)

proc call*(call_617525: Call_GetDescribePolicies_617507; MaxRecords: int = 0;
          AutoScalingGroupName: string = ""; Action: string = "DescribePolicies";
          NextToken: string = ""; PolicyNames: JsonNode = nil;
          Version: string = "2011-01-01"; PolicyTypes: JsonNode = nil): Recallable =
  ## getDescribePolicies
  ## Describes the policies for the specified Auto Scaling group.
  ##   MaxRecords: int
  ##             : The maximum number of items to be returned with each call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   PolicyNames: JArray
  ##              : The names of one or more policies. If you omit this parameter, all policies are described. If a group name is provided, the results are limited to that group. This list is limited to 50 items. If you specify an unknown policy name, it is ignored with no error.
  ##   Version: string (required)
  ##   PolicyTypes: JArray
  ##              : One or more policy types. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>.
  var query_617526 = newJObject()
  add(query_617526, "MaxRecords", newJInt(MaxRecords))
  add(query_617526, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_617526, "Action", newJString(Action))
  add(query_617526, "NextToken", newJString(NextToken))
  if PolicyNames != nil:
    query_617526.add "PolicyNames", PolicyNames
  add(query_617526, "Version", newJString(Version))
  if PolicyTypes != nil:
    query_617526.add "PolicyTypes", PolicyTypes
  result = call_617525.call(nil, query_617526, nil, nil, nil)

var getDescribePolicies* = Call_GetDescribePolicies_617507(
    name: "getDescribePolicies", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribePolicies",
    validator: validate_GetDescribePolicies_617508, base: "/",
    url: url_GetDescribePolicies_617509, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeScalingActivities_617567 = ref object of OpenApiRestCall_615866
proc url_PostDescribeScalingActivities_617569(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeScalingActivities_617568(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more scaling activities for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617570 = query.getOrDefault("Action")
  valid_617570 = validateParameter(valid_617570, JString, required = true, default = newJString(
      "DescribeScalingActivities"))
  if valid_617570 != nil:
    section.add "Action", valid_617570
  var valid_617571 = query.getOrDefault("Version")
  valid_617571 = validateParameter(valid_617571, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617571 != nil:
    section.add "Version", valid_617571
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617572 = header.getOrDefault("X-Amz-Date")
  valid_617572 = validateParameter(valid_617572, JString, required = false,
                                 default = nil)
  if valid_617572 != nil:
    section.add "X-Amz-Date", valid_617572
  var valid_617573 = header.getOrDefault("X-Amz-Security-Token")
  valid_617573 = validateParameter(valid_617573, JString, required = false,
                                 default = nil)
  if valid_617573 != nil:
    section.add "X-Amz-Security-Token", valid_617573
  var valid_617574 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617574 = validateParameter(valid_617574, JString, required = false,
                                 default = nil)
  if valid_617574 != nil:
    section.add "X-Amz-Content-Sha256", valid_617574
  var valid_617575 = header.getOrDefault("X-Amz-Algorithm")
  valid_617575 = validateParameter(valid_617575, JString, required = false,
                                 default = nil)
  if valid_617575 != nil:
    section.add "X-Amz-Algorithm", valid_617575
  var valid_617576 = header.getOrDefault("X-Amz-Signature")
  valid_617576 = validateParameter(valid_617576, JString, required = false,
                                 default = nil)
  if valid_617576 != nil:
    section.add "X-Amz-Signature", valid_617576
  var valid_617577 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617577 = validateParameter(valid_617577, JString, required = false,
                                 default = nil)
  if valid_617577 != nil:
    section.add "X-Amz-SignedHeaders", valid_617577
  var valid_617578 = header.getOrDefault("X-Amz-Credential")
  valid_617578 = validateParameter(valid_617578, JString, required = false,
                                 default = nil)
  if valid_617578 != nil:
    section.add "X-Amz-Credential", valid_617578
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   ActivityIds: JArray
  ##              : The activity IDs of the desired scaling activities. You can specify up to 50 IDs. If you omit this parameter, all activities for the past six weeks are described. If unknown activities are requested, they are ignored with no error. If you specify an Auto Scaling group, the results are limited to that group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  section = newJObject()
  var valid_617579 = formData.getOrDefault("AutoScalingGroupName")
  valid_617579 = validateParameter(valid_617579, JString, required = false,
                                 default = nil)
  if valid_617579 != nil:
    section.add "AutoScalingGroupName", valid_617579
  var valid_617580 = formData.getOrDefault("ActivityIds")
  valid_617580 = validateParameter(valid_617580, JArray, required = false,
                                 default = nil)
  if valid_617580 != nil:
    section.add "ActivityIds", valid_617580
  var valid_617581 = formData.getOrDefault("NextToken")
  valid_617581 = validateParameter(valid_617581, JString, required = false,
                                 default = nil)
  if valid_617581 != nil:
    section.add "NextToken", valid_617581
  var valid_617582 = formData.getOrDefault("MaxRecords")
  valid_617582 = validateParameter(valid_617582, JInt, required = false, default = nil)
  if valid_617582 != nil:
    section.add "MaxRecords", valid_617582
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617583: Call_PostDescribeScalingActivities_617567; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes one or more scaling activities for the specified Auto Scaling group.
  ## 
  let valid = call_617583.validator(path, query, header, formData, body)
  let scheme = call_617583.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617583.url(scheme.get, call_617583.host, call_617583.base,
                         call_617583.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617583, url, valid)

proc call*(call_617584: Call_PostDescribeScalingActivities_617567;
          AutoScalingGroupName: string = ""; ActivityIds: JsonNode = nil;
          Action: string = "DescribeScalingActivities"; NextToken: string = "";
          MaxRecords: int = 0; Version: string = "2011-01-01"): Recallable =
  ## postDescribeScalingActivities
  ## Describes one or more scaling activities for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   ActivityIds: JArray
  ##              : The activity IDs of the desired scaling activities. You can specify up to 50 IDs. If you omit this parameter, all activities for the past six weeks are described. If unknown activities are requested, they are ignored with no error. If you specify an Auto Scaling group, the results are limited to that group.
  ##   Action: string (required)
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   Version: string (required)
  var query_617585 = newJObject()
  var formData_617586 = newJObject()
  add(formData_617586, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if ActivityIds != nil:
    formData_617586.add "ActivityIds", ActivityIds
  add(query_617585, "Action", newJString(Action))
  add(formData_617586, "NextToken", newJString(NextToken))
  add(formData_617586, "MaxRecords", newJInt(MaxRecords))
  add(query_617585, "Version", newJString(Version))
  result = call_617584.call(nil, query_617585, nil, formData_617586, nil)

var postDescribeScalingActivities* = Call_PostDescribeScalingActivities_617567(
    name: "postDescribeScalingActivities", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeScalingActivities",
    validator: validate_PostDescribeScalingActivities_617568, base: "/",
    url: url_PostDescribeScalingActivities_617569,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeScalingActivities_617548 = ref object of OpenApiRestCall_615866
proc url_GetDescribeScalingActivities_617550(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeScalingActivities_617549(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more scaling activities for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   ActivityIds: JArray
  ##              : The activity IDs of the desired scaling activities. You can specify up to 50 IDs. If you omit this parameter, all activities for the past six weeks are described. If unknown activities are requested, they are ignored with no error. If you specify an Auto Scaling group, the results are limited to that group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617551 = query.getOrDefault("MaxRecords")
  valid_617551 = validateParameter(valid_617551, JInt, required = false, default = nil)
  if valid_617551 != nil:
    section.add "MaxRecords", valid_617551
  var valid_617552 = query.getOrDefault("AutoScalingGroupName")
  valid_617552 = validateParameter(valid_617552, JString, required = false,
                                 default = nil)
  if valid_617552 != nil:
    section.add "AutoScalingGroupName", valid_617552
  var valid_617553 = query.getOrDefault("Action")
  valid_617553 = validateParameter(valid_617553, JString, required = true, default = newJString(
      "DescribeScalingActivities"))
  if valid_617553 != nil:
    section.add "Action", valid_617553
  var valid_617554 = query.getOrDefault("ActivityIds")
  valid_617554 = validateParameter(valid_617554, JArray, required = false,
                                 default = nil)
  if valid_617554 != nil:
    section.add "ActivityIds", valid_617554
  var valid_617555 = query.getOrDefault("NextToken")
  valid_617555 = validateParameter(valid_617555, JString, required = false,
                                 default = nil)
  if valid_617555 != nil:
    section.add "NextToken", valid_617555
  var valid_617556 = query.getOrDefault("Version")
  valid_617556 = validateParameter(valid_617556, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617556 != nil:
    section.add "Version", valid_617556
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617557 = header.getOrDefault("X-Amz-Date")
  valid_617557 = validateParameter(valid_617557, JString, required = false,
                                 default = nil)
  if valid_617557 != nil:
    section.add "X-Amz-Date", valid_617557
  var valid_617558 = header.getOrDefault("X-Amz-Security-Token")
  valid_617558 = validateParameter(valid_617558, JString, required = false,
                                 default = nil)
  if valid_617558 != nil:
    section.add "X-Amz-Security-Token", valid_617558
  var valid_617559 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617559 = validateParameter(valid_617559, JString, required = false,
                                 default = nil)
  if valid_617559 != nil:
    section.add "X-Amz-Content-Sha256", valid_617559
  var valid_617560 = header.getOrDefault("X-Amz-Algorithm")
  valid_617560 = validateParameter(valid_617560, JString, required = false,
                                 default = nil)
  if valid_617560 != nil:
    section.add "X-Amz-Algorithm", valid_617560
  var valid_617561 = header.getOrDefault("X-Amz-Signature")
  valid_617561 = validateParameter(valid_617561, JString, required = false,
                                 default = nil)
  if valid_617561 != nil:
    section.add "X-Amz-Signature", valid_617561
  var valid_617562 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617562 = validateParameter(valid_617562, JString, required = false,
                                 default = nil)
  if valid_617562 != nil:
    section.add "X-Amz-SignedHeaders", valid_617562
  var valid_617563 = header.getOrDefault("X-Amz-Credential")
  valid_617563 = validateParameter(valid_617563, JString, required = false,
                                 default = nil)
  if valid_617563 != nil:
    section.add "X-Amz-Credential", valid_617563
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617564: Call_GetDescribeScalingActivities_617548; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes one or more scaling activities for the specified Auto Scaling group.
  ## 
  let valid = call_617564.validator(path, query, header, formData, body)
  let scheme = call_617564.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617564.url(scheme.get, call_617564.host, call_617564.base,
                         call_617564.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617564, url, valid)

proc call*(call_617565: Call_GetDescribeScalingActivities_617548;
          MaxRecords: int = 0; AutoScalingGroupName: string = "";
          Action: string = "DescribeScalingActivities"; ActivityIds: JsonNode = nil;
          NextToken: string = ""; Version: string = "2011-01-01"): Recallable =
  ## getDescribeScalingActivities
  ## Describes one or more scaling activities for the specified Auto Scaling group.
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   ActivityIds: JArray
  ##              : The activity IDs of the desired scaling activities. You can specify up to 50 IDs. If you omit this parameter, all activities for the past six weeks are described. If unknown activities are requested, they are ignored with no error. If you specify an Auto Scaling group, the results are limited to that group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Version: string (required)
  var query_617566 = newJObject()
  add(query_617566, "MaxRecords", newJInt(MaxRecords))
  add(query_617566, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_617566, "Action", newJString(Action))
  if ActivityIds != nil:
    query_617566.add "ActivityIds", ActivityIds
  add(query_617566, "NextToken", newJString(NextToken))
  add(query_617566, "Version", newJString(Version))
  result = call_617565.call(nil, query_617566, nil, nil, nil)

var getDescribeScalingActivities* = Call_GetDescribeScalingActivities_617548(
    name: "getDescribeScalingActivities", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeScalingActivities",
    validator: validate_GetDescribeScalingActivities_617549, base: "/",
    url: url_GetDescribeScalingActivities_617550,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeScalingProcessTypes_617602 = ref object of OpenApiRestCall_615866
proc url_PostDescribeScalingProcessTypes_617604(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeScalingProcessTypes_617603(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the scaling process types for use with <a>ResumeProcesses</a> and <a>SuspendProcesses</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617605 = query.getOrDefault("Action")
  valid_617605 = validateParameter(valid_617605, JString, required = true, default = newJString(
      "DescribeScalingProcessTypes"))
  if valid_617605 != nil:
    section.add "Action", valid_617605
  var valid_617606 = query.getOrDefault("Version")
  valid_617606 = validateParameter(valid_617606, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617606 != nil:
    section.add "Version", valid_617606
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617607 = header.getOrDefault("X-Amz-Date")
  valid_617607 = validateParameter(valid_617607, JString, required = false,
                                 default = nil)
  if valid_617607 != nil:
    section.add "X-Amz-Date", valid_617607
  var valid_617608 = header.getOrDefault("X-Amz-Security-Token")
  valid_617608 = validateParameter(valid_617608, JString, required = false,
                                 default = nil)
  if valid_617608 != nil:
    section.add "X-Amz-Security-Token", valid_617608
  var valid_617609 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617609 = validateParameter(valid_617609, JString, required = false,
                                 default = nil)
  if valid_617609 != nil:
    section.add "X-Amz-Content-Sha256", valid_617609
  var valid_617610 = header.getOrDefault("X-Amz-Algorithm")
  valid_617610 = validateParameter(valid_617610, JString, required = false,
                                 default = nil)
  if valid_617610 != nil:
    section.add "X-Amz-Algorithm", valid_617610
  var valid_617611 = header.getOrDefault("X-Amz-Signature")
  valid_617611 = validateParameter(valid_617611, JString, required = false,
                                 default = nil)
  if valid_617611 != nil:
    section.add "X-Amz-Signature", valid_617611
  var valid_617612 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617612 = validateParameter(valid_617612, JString, required = false,
                                 default = nil)
  if valid_617612 != nil:
    section.add "X-Amz-SignedHeaders", valid_617612
  var valid_617613 = header.getOrDefault("X-Amz-Credential")
  valid_617613 = validateParameter(valid_617613, JString, required = false,
                                 default = nil)
  if valid_617613 != nil:
    section.add "X-Amz-Credential", valid_617613
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617614: Call_PostDescribeScalingProcessTypes_617602;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the scaling process types for use with <a>ResumeProcesses</a> and <a>SuspendProcesses</a>.
  ## 
  let valid = call_617614.validator(path, query, header, formData, body)
  let scheme = call_617614.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617614.url(scheme.get, call_617614.host, call_617614.base,
                         call_617614.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617614, url, valid)

proc call*(call_617615: Call_PostDescribeScalingProcessTypes_617602;
          Action: string = "DescribeScalingProcessTypes";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeScalingProcessTypes
  ## Describes the scaling process types for use with <a>ResumeProcesses</a> and <a>SuspendProcesses</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617616 = newJObject()
  add(query_617616, "Action", newJString(Action))
  add(query_617616, "Version", newJString(Version))
  result = call_617615.call(nil, query_617616, nil, nil, nil)

var postDescribeScalingProcessTypes* = Call_PostDescribeScalingProcessTypes_617602(
    name: "postDescribeScalingProcessTypes", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeScalingProcessTypes",
    validator: validate_PostDescribeScalingProcessTypes_617603, base: "/",
    url: url_PostDescribeScalingProcessTypes_617604,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeScalingProcessTypes_617587 = ref object of OpenApiRestCall_615866
proc url_GetDescribeScalingProcessTypes_617589(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeScalingProcessTypes_617588(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the scaling process types for use with <a>ResumeProcesses</a> and <a>SuspendProcesses</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617590 = query.getOrDefault("Action")
  valid_617590 = validateParameter(valid_617590, JString, required = true, default = newJString(
      "DescribeScalingProcessTypes"))
  if valid_617590 != nil:
    section.add "Action", valid_617590
  var valid_617591 = query.getOrDefault("Version")
  valid_617591 = validateParameter(valid_617591, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617591 != nil:
    section.add "Version", valid_617591
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617592 = header.getOrDefault("X-Amz-Date")
  valid_617592 = validateParameter(valid_617592, JString, required = false,
                                 default = nil)
  if valid_617592 != nil:
    section.add "X-Amz-Date", valid_617592
  var valid_617593 = header.getOrDefault("X-Amz-Security-Token")
  valid_617593 = validateParameter(valid_617593, JString, required = false,
                                 default = nil)
  if valid_617593 != nil:
    section.add "X-Amz-Security-Token", valid_617593
  var valid_617594 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617594 = validateParameter(valid_617594, JString, required = false,
                                 default = nil)
  if valid_617594 != nil:
    section.add "X-Amz-Content-Sha256", valid_617594
  var valid_617595 = header.getOrDefault("X-Amz-Algorithm")
  valid_617595 = validateParameter(valid_617595, JString, required = false,
                                 default = nil)
  if valid_617595 != nil:
    section.add "X-Amz-Algorithm", valid_617595
  var valid_617596 = header.getOrDefault("X-Amz-Signature")
  valid_617596 = validateParameter(valid_617596, JString, required = false,
                                 default = nil)
  if valid_617596 != nil:
    section.add "X-Amz-Signature", valid_617596
  var valid_617597 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617597 = validateParameter(valid_617597, JString, required = false,
                                 default = nil)
  if valid_617597 != nil:
    section.add "X-Amz-SignedHeaders", valid_617597
  var valid_617598 = header.getOrDefault("X-Amz-Credential")
  valid_617598 = validateParameter(valid_617598, JString, required = false,
                                 default = nil)
  if valid_617598 != nil:
    section.add "X-Amz-Credential", valid_617598
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617599: Call_GetDescribeScalingProcessTypes_617587; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the scaling process types for use with <a>ResumeProcesses</a> and <a>SuspendProcesses</a>.
  ## 
  let valid = call_617599.validator(path, query, header, formData, body)
  let scheme = call_617599.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617599.url(scheme.get, call_617599.host, call_617599.base,
                         call_617599.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617599, url, valid)

proc call*(call_617600: Call_GetDescribeScalingProcessTypes_617587;
          Action: string = "DescribeScalingProcessTypes";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeScalingProcessTypes
  ## Describes the scaling process types for use with <a>ResumeProcesses</a> and <a>SuspendProcesses</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617601 = newJObject()
  add(query_617601, "Action", newJString(Action))
  add(query_617601, "Version", newJString(Version))
  result = call_617600.call(nil, query_617601, nil, nil, nil)

var getDescribeScalingProcessTypes* = Call_GetDescribeScalingProcessTypes_617587(
    name: "getDescribeScalingProcessTypes", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeScalingProcessTypes",
    validator: validate_GetDescribeScalingProcessTypes_617588, base: "/",
    url: url_GetDescribeScalingProcessTypes_617589,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeScheduledActions_617638 = ref object of OpenApiRestCall_615866
proc url_PostDescribeScheduledActions_617640(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeScheduledActions_617639(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the actions scheduled for your Auto Scaling group that haven't run or that have not reached their end time. To describe the actions that have already run, use <a>DescribeScalingActivities</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617641 = query.getOrDefault("Action")
  valid_617641 = validateParameter(valid_617641, JString, required = true, default = newJString(
      "DescribeScheduledActions"))
  if valid_617641 != nil:
    section.add "Action", valid_617641
  var valid_617642 = query.getOrDefault("Version")
  valid_617642 = validateParameter(valid_617642, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617642 != nil:
    section.add "Version", valid_617642
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617643 = header.getOrDefault("X-Amz-Date")
  valid_617643 = validateParameter(valid_617643, JString, required = false,
                                 default = nil)
  if valid_617643 != nil:
    section.add "X-Amz-Date", valid_617643
  var valid_617644 = header.getOrDefault("X-Amz-Security-Token")
  valid_617644 = validateParameter(valid_617644, JString, required = false,
                                 default = nil)
  if valid_617644 != nil:
    section.add "X-Amz-Security-Token", valid_617644
  var valid_617645 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617645 = validateParameter(valid_617645, JString, required = false,
                                 default = nil)
  if valid_617645 != nil:
    section.add "X-Amz-Content-Sha256", valid_617645
  var valid_617646 = header.getOrDefault("X-Amz-Algorithm")
  valid_617646 = validateParameter(valid_617646, JString, required = false,
                                 default = nil)
  if valid_617646 != nil:
    section.add "X-Amz-Algorithm", valid_617646
  var valid_617647 = header.getOrDefault("X-Amz-Signature")
  valid_617647 = validateParameter(valid_617647, JString, required = false,
                                 default = nil)
  if valid_617647 != nil:
    section.add "X-Amz-Signature", valid_617647
  var valid_617648 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617648 = validateParameter(valid_617648, JString, required = false,
                                 default = nil)
  if valid_617648 != nil:
    section.add "X-Amz-SignedHeaders", valid_617648
  var valid_617649 = header.getOrDefault("X-Amz-Credential")
  valid_617649 = validateParameter(valid_617649, JString, required = false,
                                 default = nil)
  if valid_617649 != nil:
    section.add "X-Amz-Credential", valid_617649
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   StartTime: JString
  ##            : The earliest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   EndTime: JString
  ##          : The latest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   ScheduledActionNames: JArray
  ##                       : The names of one or more scheduled actions. You can specify up to 50 actions. If you omit this parameter, all scheduled actions are described. If you specify an unknown scheduled action, it is ignored with no error.
  section = newJObject()
  var valid_617650 = formData.getOrDefault("AutoScalingGroupName")
  valid_617650 = validateParameter(valid_617650, JString, required = false,
                                 default = nil)
  if valid_617650 != nil:
    section.add "AutoScalingGroupName", valid_617650
  var valid_617651 = formData.getOrDefault("StartTime")
  valid_617651 = validateParameter(valid_617651, JString, required = false,
                                 default = nil)
  if valid_617651 != nil:
    section.add "StartTime", valid_617651
  var valid_617652 = formData.getOrDefault("NextToken")
  valid_617652 = validateParameter(valid_617652, JString, required = false,
                                 default = nil)
  if valid_617652 != nil:
    section.add "NextToken", valid_617652
  var valid_617653 = formData.getOrDefault("EndTime")
  valid_617653 = validateParameter(valid_617653, JString, required = false,
                                 default = nil)
  if valid_617653 != nil:
    section.add "EndTime", valid_617653
  var valid_617654 = formData.getOrDefault("MaxRecords")
  valid_617654 = validateParameter(valid_617654, JInt, required = false, default = nil)
  if valid_617654 != nil:
    section.add "MaxRecords", valid_617654
  var valid_617655 = formData.getOrDefault("ScheduledActionNames")
  valid_617655 = validateParameter(valid_617655, JArray, required = false,
                                 default = nil)
  if valid_617655 != nil:
    section.add "ScheduledActionNames", valid_617655
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617656: Call_PostDescribeScheduledActions_617638; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the actions scheduled for your Auto Scaling group that haven't run or that have not reached their end time. To describe the actions that have already run, use <a>DescribeScalingActivities</a>.
  ## 
  let valid = call_617656.validator(path, query, header, formData, body)
  let scheme = call_617656.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617656.url(scheme.get, call_617656.host, call_617656.base,
                         call_617656.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617656, url, valid)

proc call*(call_617657: Call_PostDescribeScheduledActions_617638;
          AutoScalingGroupName: string = ""; StartTime: string = "";
          Action: string = "DescribeScheduledActions"; NextToken: string = "";
          EndTime: string = ""; MaxRecords: int = 0; Version: string = "2011-01-01";
          ScheduledActionNames: JsonNode = nil): Recallable =
  ## postDescribeScheduledActions
  ## Describes the actions scheduled for your Auto Scaling group that haven't run or that have not reached their end time. To describe the actions that have already run, use <a>DescribeScalingActivities</a>.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   StartTime: string
  ##            : The earliest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   Action: string (required)
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   EndTime: string
  ##          : The latest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   Version: string (required)
  ##   ScheduledActionNames: JArray
  ##                       : The names of one or more scheduled actions. You can specify up to 50 actions. If you omit this parameter, all scheduled actions are described. If you specify an unknown scheduled action, it is ignored with no error.
  var query_617658 = newJObject()
  var formData_617659 = newJObject()
  add(formData_617659, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_617659, "StartTime", newJString(StartTime))
  add(query_617658, "Action", newJString(Action))
  add(formData_617659, "NextToken", newJString(NextToken))
  add(formData_617659, "EndTime", newJString(EndTime))
  add(formData_617659, "MaxRecords", newJInt(MaxRecords))
  add(query_617658, "Version", newJString(Version))
  if ScheduledActionNames != nil:
    formData_617659.add "ScheduledActionNames", ScheduledActionNames
  result = call_617657.call(nil, query_617658, nil, formData_617659, nil)

var postDescribeScheduledActions* = Call_PostDescribeScheduledActions_617638(
    name: "postDescribeScheduledActions", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeScheduledActions",
    validator: validate_PostDescribeScheduledActions_617639, base: "/",
    url: url_PostDescribeScheduledActions_617640,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeScheduledActions_617617 = ref object of OpenApiRestCall_615866
proc url_GetDescribeScheduledActions_617619(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeScheduledActions_617618(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the actions scheduled for your Auto Scaling group that haven't run or that have not reached their end time. To describe the actions that have already run, use <a>DescribeScalingActivities</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   StartTime: JString
  ##            : The earliest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   Action: JString (required)
  ##   ScheduledActionNames: JArray
  ##                       : The names of one or more scheduled actions. You can specify up to 50 actions. If you omit this parameter, all scheduled actions are described. If you specify an unknown scheduled action, it is ignored with no error.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   EndTime: JString
  ##          : The latest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   Version: JString (required)
  section = newJObject()
  var valid_617620 = query.getOrDefault("MaxRecords")
  valid_617620 = validateParameter(valid_617620, JInt, required = false, default = nil)
  if valid_617620 != nil:
    section.add "MaxRecords", valid_617620
  var valid_617621 = query.getOrDefault("AutoScalingGroupName")
  valid_617621 = validateParameter(valid_617621, JString, required = false,
                                 default = nil)
  if valid_617621 != nil:
    section.add "AutoScalingGroupName", valid_617621
  var valid_617622 = query.getOrDefault("StartTime")
  valid_617622 = validateParameter(valid_617622, JString, required = false,
                                 default = nil)
  if valid_617622 != nil:
    section.add "StartTime", valid_617622
  var valid_617623 = query.getOrDefault("Action")
  valid_617623 = validateParameter(valid_617623, JString, required = true, default = newJString(
      "DescribeScheduledActions"))
  if valid_617623 != nil:
    section.add "Action", valid_617623
  var valid_617624 = query.getOrDefault("ScheduledActionNames")
  valid_617624 = validateParameter(valid_617624, JArray, required = false,
                                 default = nil)
  if valid_617624 != nil:
    section.add "ScheduledActionNames", valid_617624
  var valid_617625 = query.getOrDefault("NextToken")
  valid_617625 = validateParameter(valid_617625, JString, required = false,
                                 default = nil)
  if valid_617625 != nil:
    section.add "NextToken", valid_617625
  var valid_617626 = query.getOrDefault("EndTime")
  valid_617626 = validateParameter(valid_617626, JString, required = false,
                                 default = nil)
  if valid_617626 != nil:
    section.add "EndTime", valid_617626
  var valid_617627 = query.getOrDefault("Version")
  valid_617627 = validateParameter(valid_617627, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617627 != nil:
    section.add "Version", valid_617627
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617628 = header.getOrDefault("X-Amz-Date")
  valid_617628 = validateParameter(valid_617628, JString, required = false,
                                 default = nil)
  if valid_617628 != nil:
    section.add "X-Amz-Date", valid_617628
  var valid_617629 = header.getOrDefault("X-Amz-Security-Token")
  valid_617629 = validateParameter(valid_617629, JString, required = false,
                                 default = nil)
  if valid_617629 != nil:
    section.add "X-Amz-Security-Token", valid_617629
  var valid_617630 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617630 = validateParameter(valid_617630, JString, required = false,
                                 default = nil)
  if valid_617630 != nil:
    section.add "X-Amz-Content-Sha256", valid_617630
  var valid_617631 = header.getOrDefault("X-Amz-Algorithm")
  valid_617631 = validateParameter(valid_617631, JString, required = false,
                                 default = nil)
  if valid_617631 != nil:
    section.add "X-Amz-Algorithm", valid_617631
  var valid_617632 = header.getOrDefault("X-Amz-Signature")
  valid_617632 = validateParameter(valid_617632, JString, required = false,
                                 default = nil)
  if valid_617632 != nil:
    section.add "X-Amz-Signature", valid_617632
  var valid_617633 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617633 = validateParameter(valid_617633, JString, required = false,
                                 default = nil)
  if valid_617633 != nil:
    section.add "X-Amz-SignedHeaders", valid_617633
  var valid_617634 = header.getOrDefault("X-Amz-Credential")
  valid_617634 = validateParameter(valid_617634, JString, required = false,
                                 default = nil)
  if valid_617634 != nil:
    section.add "X-Amz-Credential", valid_617634
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617635: Call_GetDescribeScheduledActions_617617; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the actions scheduled for your Auto Scaling group that haven't run or that have not reached their end time. To describe the actions that have already run, use <a>DescribeScalingActivities</a>.
  ## 
  let valid = call_617635.validator(path, query, header, formData, body)
  let scheme = call_617635.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617635.url(scheme.get, call_617635.host, call_617635.base,
                         call_617635.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617635, url, valid)

proc call*(call_617636: Call_GetDescribeScheduledActions_617617;
          MaxRecords: int = 0; AutoScalingGroupName: string = "";
          StartTime: string = ""; Action: string = "DescribeScheduledActions";
          ScheduledActionNames: JsonNode = nil; NextToken: string = "";
          EndTime: string = ""; Version: string = "2011-01-01"): Recallable =
  ## getDescribeScheduledActions
  ## Describes the actions scheduled for your Auto Scaling group that haven't run or that have not reached their end time. To describe the actions that have already run, use <a>DescribeScalingActivities</a>.
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   StartTime: string
  ##            : The earliest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   Action: string (required)
  ##   ScheduledActionNames: JArray
  ##                       : The names of one or more scheduled actions. You can specify up to 50 actions. If you omit this parameter, all scheduled actions are described. If you specify an unknown scheduled action, it is ignored with no error.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   EndTime: string
  ##          : The latest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   Version: string (required)
  var query_617637 = newJObject()
  add(query_617637, "MaxRecords", newJInt(MaxRecords))
  add(query_617637, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_617637, "StartTime", newJString(StartTime))
  add(query_617637, "Action", newJString(Action))
  if ScheduledActionNames != nil:
    query_617637.add "ScheduledActionNames", ScheduledActionNames
  add(query_617637, "NextToken", newJString(NextToken))
  add(query_617637, "EndTime", newJString(EndTime))
  add(query_617637, "Version", newJString(Version))
  result = call_617636.call(nil, query_617637, nil, nil, nil)

var getDescribeScheduledActions* = Call_GetDescribeScheduledActions_617617(
    name: "getDescribeScheduledActions", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeScheduledActions",
    validator: validate_GetDescribeScheduledActions_617618, base: "/",
    url: url_GetDescribeScheduledActions_617619,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeTags_617678 = ref object of OpenApiRestCall_615866
proc url_PostDescribeTags_617680(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeTags_617679(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Describes the specified tags.</p> <p>You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.</p> <p>You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there's no match, no special message is returned.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617681 = query.getOrDefault("Action")
  valid_617681 = validateParameter(valid_617681, JString, required = true,
                                 default = newJString("DescribeTags"))
  if valid_617681 != nil:
    section.add "Action", valid_617681
  var valid_617682 = query.getOrDefault("Version")
  valid_617682 = validateParameter(valid_617682, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617682 != nil:
    section.add "Version", valid_617682
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617683 = header.getOrDefault("X-Amz-Date")
  valid_617683 = validateParameter(valid_617683, JString, required = false,
                                 default = nil)
  if valid_617683 != nil:
    section.add "X-Amz-Date", valid_617683
  var valid_617684 = header.getOrDefault("X-Amz-Security-Token")
  valid_617684 = validateParameter(valid_617684, JString, required = false,
                                 default = nil)
  if valid_617684 != nil:
    section.add "X-Amz-Security-Token", valid_617684
  var valid_617685 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617685 = validateParameter(valid_617685, JString, required = false,
                                 default = nil)
  if valid_617685 != nil:
    section.add "X-Amz-Content-Sha256", valid_617685
  var valid_617686 = header.getOrDefault("X-Amz-Algorithm")
  valid_617686 = validateParameter(valid_617686, JString, required = false,
                                 default = nil)
  if valid_617686 != nil:
    section.add "X-Amz-Algorithm", valid_617686
  var valid_617687 = header.getOrDefault("X-Amz-Signature")
  valid_617687 = validateParameter(valid_617687, JString, required = false,
                                 default = nil)
  if valid_617687 != nil:
    section.add "X-Amz-Signature", valid_617687
  var valid_617688 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617688 = validateParameter(valid_617688, JString, required = false,
                                 default = nil)
  if valid_617688 != nil:
    section.add "X-Amz-SignedHeaders", valid_617688
  var valid_617689 = header.getOrDefault("X-Amz-Credential")
  valid_617689 = validateParameter(valid_617689, JString, required = false,
                                 default = nil)
  if valid_617689 != nil:
    section.add "X-Amz-Credential", valid_617689
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Filters: JArray
  ##          : One or more filters to scope the tags to return. The maximum number of filters per filter type (for example, <code>auto-scaling-group</code>) is 1000.
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  section = newJObject()
  var valid_617690 = formData.getOrDefault("NextToken")
  valid_617690 = validateParameter(valid_617690, JString, required = false,
                                 default = nil)
  if valid_617690 != nil:
    section.add "NextToken", valid_617690
  var valid_617691 = formData.getOrDefault("Filters")
  valid_617691 = validateParameter(valid_617691, JArray, required = false,
                                 default = nil)
  if valid_617691 != nil:
    section.add "Filters", valid_617691
  var valid_617692 = formData.getOrDefault("MaxRecords")
  valid_617692 = validateParameter(valid_617692, JInt, required = false, default = nil)
  if valid_617692 != nil:
    section.add "MaxRecords", valid_617692
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617693: Call_PostDescribeTags_617678; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the specified tags.</p> <p>You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.</p> <p>You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there's no match, no special message is returned.</p>
  ## 
  let valid = call_617693.validator(path, query, header, formData, body)
  let scheme = call_617693.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617693.url(scheme.get, call_617693.host, call_617693.base,
                         call_617693.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617693, url, valid)

proc call*(call_617694: Call_PostDescribeTags_617678;
          Action: string = "DescribeTags"; NextToken: string = "";
          Filters: JsonNode = nil; MaxRecords: int = 0; Version: string = "2011-01-01"): Recallable =
  ## postDescribeTags
  ## <p>Describes the specified tags.</p> <p>You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.</p> <p>You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there's no match, no special message is returned.</p>
  ##   Action: string (required)
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Filters: JArray
  ##          : One or more filters to scope the tags to return. The maximum number of filters per filter type (for example, <code>auto-scaling-group</code>) is 1000.
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   Version: string (required)
  var query_617695 = newJObject()
  var formData_617696 = newJObject()
  add(query_617695, "Action", newJString(Action))
  add(formData_617696, "NextToken", newJString(NextToken))
  if Filters != nil:
    formData_617696.add "Filters", Filters
  add(formData_617696, "MaxRecords", newJInt(MaxRecords))
  add(query_617695, "Version", newJString(Version))
  result = call_617694.call(nil, query_617695, nil, formData_617696, nil)

var postDescribeTags* = Call_PostDescribeTags_617678(name: "postDescribeTags",
    meth: HttpMethod.HttpPost, host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeTags", validator: validate_PostDescribeTags_617679,
    base: "/", url: url_PostDescribeTags_617680,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeTags_617660 = ref object of OpenApiRestCall_615866
proc url_GetDescribeTags_617662(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeTags_617661(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Describes the specified tags.</p> <p>You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.</p> <p>You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there's no match, no special message is returned.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   Filters: JArray
  ##          : One or more filters to scope the tags to return. The maximum number of filters per filter type (for example, <code>auto-scaling-group</code>) is 1000.
  ##   Action: JString (required)
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617663 = query.getOrDefault("MaxRecords")
  valid_617663 = validateParameter(valid_617663, JInt, required = false, default = nil)
  if valid_617663 != nil:
    section.add "MaxRecords", valid_617663
  var valid_617664 = query.getOrDefault("Filters")
  valid_617664 = validateParameter(valid_617664, JArray, required = false,
                                 default = nil)
  if valid_617664 != nil:
    section.add "Filters", valid_617664
  var valid_617665 = query.getOrDefault("Action")
  valid_617665 = validateParameter(valid_617665, JString, required = true,
                                 default = newJString("DescribeTags"))
  if valid_617665 != nil:
    section.add "Action", valid_617665
  var valid_617666 = query.getOrDefault("NextToken")
  valid_617666 = validateParameter(valid_617666, JString, required = false,
                                 default = nil)
  if valid_617666 != nil:
    section.add "NextToken", valid_617666
  var valid_617667 = query.getOrDefault("Version")
  valid_617667 = validateParameter(valid_617667, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617667 != nil:
    section.add "Version", valid_617667
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617668 = header.getOrDefault("X-Amz-Date")
  valid_617668 = validateParameter(valid_617668, JString, required = false,
                                 default = nil)
  if valid_617668 != nil:
    section.add "X-Amz-Date", valid_617668
  var valid_617669 = header.getOrDefault("X-Amz-Security-Token")
  valid_617669 = validateParameter(valid_617669, JString, required = false,
                                 default = nil)
  if valid_617669 != nil:
    section.add "X-Amz-Security-Token", valid_617669
  var valid_617670 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617670 = validateParameter(valid_617670, JString, required = false,
                                 default = nil)
  if valid_617670 != nil:
    section.add "X-Amz-Content-Sha256", valid_617670
  var valid_617671 = header.getOrDefault("X-Amz-Algorithm")
  valid_617671 = validateParameter(valid_617671, JString, required = false,
                                 default = nil)
  if valid_617671 != nil:
    section.add "X-Amz-Algorithm", valid_617671
  var valid_617672 = header.getOrDefault("X-Amz-Signature")
  valid_617672 = validateParameter(valid_617672, JString, required = false,
                                 default = nil)
  if valid_617672 != nil:
    section.add "X-Amz-Signature", valid_617672
  var valid_617673 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617673 = validateParameter(valid_617673, JString, required = false,
                                 default = nil)
  if valid_617673 != nil:
    section.add "X-Amz-SignedHeaders", valid_617673
  var valid_617674 = header.getOrDefault("X-Amz-Credential")
  valid_617674 = validateParameter(valid_617674, JString, required = false,
                                 default = nil)
  if valid_617674 != nil:
    section.add "X-Amz-Credential", valid_617674
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617675: Call_GetDescribeTags_617660; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the specified tags.</p> <p>You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.</p> <p>You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there's no match, no special message is returned.</p>
  ## 
  let valid = call_617675.validator(path, query, header, formData, body)
  let scheme = call_617675.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617675.url(scheme.get, call_617675.host, call_617675.base,
                         call_617675.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617675, url, valid)

proc call*(call_617676: Call_GetDescribeTags_617660; MaxRecords: int = 0;
          Filters: JsonNode = nil; Action: string = "DescribeTags";
          NextToken: string = ""; Version: string = "2011-01-01"): Recallable =
  ## getDescribeTags
  ## <p>Describes the specified tags.</p> <p>You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.</p> <p>You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there's no match, no special message is returned.</p>
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   Filters: JArray
  ##          : One or more filters to scope the tags to return. The maximum number of filters per filter type (for example, <code>auto-scaling-group</code>) is 1000.
  ##   Action: string (required)
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Version: string (required)
  var query_617677 = newJObject()
  add(query_617677, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_617677.add "Filters", Filters
  add(query_617677, "Action", newJString(Action))
  add(query_617677, "NextToken", newJString(NextToken))
  add(query_617677, "Version", newJString(Version))
  result = call_617676.call(nil, query_617677, nil, nil, nil)

var getDescribeTags* = Call_GetDescribeTags_617660(name: "getDescribeTags",
    meth: HttpMethod.HttpGet, host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeTags", validator: validate_GetDescribeTags_617661,
    base: "/", url: url_GetDescribeTags_617662, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeTerminationPolicyTypes_617712 = ref object of OpenApiRestCall_615866
proc url_PostDescribeTerminationPolicyTypes_617714(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeTerminationPolicyTypes_617713(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the termination policies supported by Amazon EC2 Auto Scaling.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Auto Scaling Instances Terminate During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617715 = query.getOrDefault("Action")
  valid_617715 = validateParameter(valid_617715, JString, required = true, default = newJString(
      "DescribeTerminationPolicyTypes"))
  if valid_617715 != nil:
    section.add "Action", valid_617715
  var valid_617716 = query.getOrDefault("Version")
  valid_617716 = validateParameter(valid_617716, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617716 != nil:
    section.add "Version", valid_617716
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617717 = header.getOrDefault("X-Amz-Date")
  valid_617717 = validateParameter(valid_617717, JString, required = false,
                                 default = nil)
  if valid_617717 != nil:
    section.add "X-Amz-Date", valid_617717
  var valid_617718 = header.getOrDefault("X-Amz-Security-Token")
  valid_617718 = validateParameter(valid_617718, JString, required = false,
                                 default = nil)
  if valid_617718 != nil:
    section.add "X-Amz-Security-Token", valid_617718
  var valid_617719 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617719 = validateParameter(valid_617719, JString, required = false,
                                 default = nil)
  if valid_617719 != nil:
    section.add "X-Amz-Content-Sha256", valid_617719
  var valid_617720 = header.getOrDefault("X-Amz-Algorithm")
  valid_617720 = validateParameter(valid_617720, JString, required = false,
                                 default = nil)
  if valid_617720 != nil:
    section.add "X-Amz-Algorithm", valid_617720
  var valid_617721 = header.getOrDefault("X-Amz-Signature")
  valid_617721 = validateParameter(valid_617721, JString, required = false,
                                 default = nil)
  if valid_617721 != nil:
    section.add "X-Amz-Signature", valid_617721
  var valid_617722 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617722 = validateParameter(valid_617722, JString, required = false,
                                 default = nil)
  if valid_617722 != nil:
    section.add "X-Amz-SignedHeaders", valid_617722
  var valid_617723 = header.getOrDefault("X-Amz-Credential")
  valid_617723 = validateParameter(valid_617723, JString, required = false,
                                 default = nil)
  if valid_617723 != nil:
    section.add "X-Amz-Credential", valid_617723
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617724: Call_PostDescribeTerminationPolicyTypes_617712;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Describes the termination policies supported by Amazon EC2 Auto Scaling.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Auto Scaling Instances Terminate During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_617724.validator(path, query, header, formData, body)
  let scheme = call_617724.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617724.url(scheme.get, call_617724.host, call_617724.base,
                         call_617724.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617724, url, valid)

proc call*(call_617725: Call_PostDescribeTerminationPolicyTypes_617712;
          Action: string = "DescribeTerminationPolicyTypes";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeTerminationPolicyTypes
  ## <p>Describes the termination policies supported by Amazon EC2 Auto Scaling.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Auto Scaling Instances Terminate During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617726 = newJObject()
  add(query_617726, "Action", newJString(Action))
  add(query_617726, "Version", newJString(Version))
  result = call_617725.call(nil, query_617726, nil, nil, nil)

var postDescribeTerminationPolicyTypes* = Call_PostDescribeTerminationPolicyTypes_617712(
    name: "postDescribeTerminationPolicyTypes", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeTerminationPolicyTypes",
    validator: validate_PostDescribeTerminationPolicyTypes_617713, base: "/",
    url: url_PostDescribeTerminationPolicyTypes_617714,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeTerminationPolicyTypes_617697 = ref object of OpenApiRestCall_615866
proc url_GetDescribeTerminationPolicyTypes_617699(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeTerminationPolicyTypes_617698(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the termination policies supported by Amazon EC2 Auto Scaling.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Auto Scaling Instances Terminate During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617700 = query.getOrDefault("Action")
  valid_617700 = validateParameter(valid_617700, JString, required = true, default = newJString(
      "DescribeTerminationPolicyTypes"))
  if valid_617700 != nil:
    section.add "Action", valid_617700
  var valid_617701 = query.getOrDefault("Version")
  valid_617701 = validateParameter(valid_617701, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617701 != nil:
    section.add "Version", valid_617701
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617702 = header.getOrDefault("X-Amz-Date")
  valid_617702 = validateParameter(valid_617702, JString, required = false,
                                 default = nil)
  if valid_617702 != nil:
    section.add "X-Amz-Date", valid_617702
  var valid_617703 = header.getOrDefault("X-Amz-Security-Token")
  valid_617703 = validateParameter(valid_617703, JString, required = false,
                                 default = nil)
  if valid_617703 != nil:
    section.add "X-Amz-Security-Token", valid_617703
  var valid_617704 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617704 = validateParameter(valid_617704, JString, required = false,
                                 default = nil)
  if valid_617704 != nil:
    section.add "X-Amz-Content-Sha256", valid_617704
  var valid_617705 = header.getOrDefault("X-Amz-Algorithm")
  valid_617705 = validateParameter(valid_617705, JString, required = false,
                                 default = nil)
  if valid_617705 != nil:
    section.add "X-Amz-Algorithm", valid_617705
  var valid_617706 = header.getOrDefault("X-Amz-Signature")
  valid_617706 = validateParameter(valid_617706, JString, required = false,
                                 default = nil)
  if valid_617706 != nil:
    section.add "X-Amz-Signature", valid_617706
  var valid_617707 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617707 = validateParameter(valid_617707, JString, required = false,
                                 default = nil)
  if valid_617707 != nil:
    section.add "X-Amz-SignedHeaders", valid_617707
  var valid_617708 = header.getOrDefault("X-Amz-Credential")
  valid_617708 = validateParameter(valid_617708, JString, required = false,
                                 default = nil)
  if valid_617708 != nil:
    section.add "X-Amz-Credential", valid_617708
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617709: Call_GetDescribeTerminationPolicyTypes_617697;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Describes the termination policies supported by Amazon EC2 Auto Scaling.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Auto Scaling Instances Terminate During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_617709.validator(path, query, header, formData, body)
  let scheme = call_617709.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617709.url(scheme.get, call_617709.host, call_617709.base,
                         call_617709.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617709, url, valid)

proc call*(call_617710: Call_GetDescribeTerminationPolicyTypes_617697;
          Action: string = "DescribeTerminationPolicyTypes";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeTerminationPolicyTypes
  ## <p>Describes the termination policies supported by Amazon EC2 Auto Scaling.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Auto Scaling Instances Terminate During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617711 = newJObject()
  add(query_617711, "Action", newJString(Action))
  add(query_617711, "Version", newJString(Version))
  result = call_617710.call(nil, query_617711, nil, nil, nil)

var getDescribeTerminationPolicyTypes* = Call_GetDescribeTerminationPolicyTypes_617697(
    name: "getDescribeTerminationPolicyTypes", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeTerminationPolicyTypes",
    validator: validate_GetDescribeTerminationPolicyTypes_617698, base: "/",
    url: url_GetDescribeTerminationPolicyTypes_617699,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDetachInstances_617745 = ref object of OpenApiRestCall_615866
proc url_PostDetachInstances_617747(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDetachInstances_617746(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Removes one or more instances from the specified Auto Scaling group.</p> <p>After the instances are detached, you can manage them independent of the Auto Scaling group.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.</p> <p>If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html">Detach EC2 Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617748 = query.getOrDefault("Action")
  valid_617748 = validateParameter(valid_617748, JString, required = true,
                                 default = newJString("DetachInstances"))
  if valid_617748 != nil:
    section.add "Action", valid_617748
  var valid_617749 = query.getOrDefault("Version")
  valid_617749 = validateParameter(valid_617749, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617749 != nil:
    section.add "Version", valid_617749
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617750 = header.getOrDefault("X-Amz-Date")
  valid_617750 = validateParameter(valid_617750, JString, required = false,
                                 default = nil)
  if valid_617750 != nil:
    section.add "X-Amz-Date", valid_617750
  var valid_617751 = header.getOrDefault("X-Amz-Security-Token")
  valid_617751 = validateParameter(valid_617751, JString, required = false,
                                 default = nil)
  if valid_617751 != nil:
    section.add "X-Amz-Security-Token", valid_617751
  var valid_617752 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617752 = validateParameter(valid_617752, JString, required = false,
                                 default = nil)
  if valid_617752 != nil:
    section.add "X-Amz-Content-Sha256", valid_617752
  var valid_617753 = header.getOrDefault("X-Amz-Algorithm")
  valid_617753 = validateParameter(valid_617753, JString, required = false,
                                 default = nil)
  if valid_617753 != nil:
    section.add "X-Amz-Algorithm", valid_617753
  var valid_617754 = header.getOrDefault("X-Amz-Signature")
  valid_617754 = validateParameter(valid_617754, JString, required = false,
                                 default = nil)
  if valid_617754 != nil:
    section.add "X-Amz-Signature", valid_617754
  var valid_617755 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617755 = validateParameter(valid_617755, JString, required = false,
                                 default = nil)
  if valid_617755 != nil:
    section.add "X-Amz-SignedHeaders", valid_617755
  var valid_617756 = header.getOrDefault("X-Amz-Credential")
  valid_617756 = validateParameter(valid_617756, JString, required = false,
                                 default = nil)
  if valid_617756 != nil:
    section.add "X-Amz-Credential", valid_617756
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   ShouldDecrementDesiredCapacity: JBool (required)
  ##                                 : Indicates whether the Auto Scaling group decrements the desired capacity value by the number of instances detached.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_617757 = formData.getOrDefault("AutoScalingGroupName")
  valid_617757 = validateParameter(valid_617757, JString, required = true,
                                 default = nil)
  if valid_617757 != nil:
    section.add "AutoScalingGroupName", valid_617757
  var valid_617758 = formData.getOrDefault("InstanceIds")
  valid_617758 = validateParameter(valid_617758, JArray, required = false,
                                 default = nil)
  if valid_617758 != nil:
    section.add "InstanceIds", valid_617758
  var valid_617759 = formData.getOrDefault("ShouldDecrementDesiredCapacity")
  valid_617759 = validateParameter(valid_617759, JBool, required = true, default = nil)
  if valid_617759 != nil:
    section.add "ShouldDecrementDesiredCapacity", valid_617759
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617760: Call_PostDetachInstances_617745; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes one or more instances from the specified Auto Scaling group.</p> <p>After the instances are detached, you can manage them independent of the Auto Scaling group.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.</p> <p>If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html">Detach EC2 Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_617760.validator(path, query, header, formData, body)
  let scheme = call_617760.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617760.url(scheme.get, call_617760.host, call_617760.base,
                         call_617760.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617760, url, valid)

proc call*(call_617761: Call_PostDetachInstances_617745;
          AutoScalingGroupName: string; ShouldDecrementDesiredCapacity: bool;
          InstanceIds: JsonNode = nil; Action: string = "DetachInstances";
          Version: string = "2011-01-01"): Recallable =
  ## postDetachInstances
  ## <p>Removes one or more instances from the specified Auto Scaling group.</p> <p>After the instances are detached, you can manage them independent of the Auto Scaling group.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.</p> <p>If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html">Detach EC2 Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Action: string (required)
  ##   ShouldDecrementDesiredCapacity: bool (required)
  ##                                 : Indicates whether the Auto Scaling group decrements the desired capacity value by the number of instances detached.
  ##   Version: string (required)
  var query_617762 = newJObject()
  var formData_617763 = newJObject()
  add(formData_617763, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if InstanceIds != nil:
    formData_617763.add "InstanceIds", InstanceIds
  add(query_617762, "Action", newJString(Action))
  add(formData_617763, "ShouldDecrementDesiredCapacity",
      newJBool(ShouldDecrementDesiredCapacity))
  add(query_617762, "Version", newJString(Version))
  result = call_617761.call(nil, query_617762, nil, formData_617763, nil)

var postDetachInstances* = Call_PostDetachInstances_617745(
    name: "postDetachInstances", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DetachInstances",
    validator: validate_PostDetachInstances_617746, base: "/",
    url: url_PostDetachInstances_617747, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDetachInstances_617727 = ref object of OpenApiRestCall_615866
proc url_GetDetachInstances_617729(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDetachInstances_617728(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Removes one or more instances from the specified Auto Scaling group.</p> <p>After the instances are detached, you can manage them independent of the Auto Scaling group.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.</p> <p>If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html">Detach EC2 Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   ShouldDecrementDesiredCapacity: JBool (required)
  ##                                 : Indicates whether the Auto Scaling group decrements the desired capacity value by the number of instances detached.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_617730 = query.getOrDefault("AutoScalingGroupName")
  valid_617730 = validateParameter(valid_617730, JString, required = true,
                                 default = nil)
  if valid_617730 != nil:
    section.add "AutoScalingGroupName", valid_617730
  var valid_617731 = query.getOrDefault("Action")
  valid_617731 = validateParameter(valid_617731, JString, required = true,
                                 default = newJString("DetachInstances"))
  if valid_617731 != nil:
    section.add "Action", valid_617731
  var valid_617732 = query.getOrDefault("ShouldDecrementDesiredCapacity")
  valid_617732 = validateParameter(valid_617732, JBool, required = true, default = nil)
  if valid_617732 != nil:
    section.add "ShouldDecrementDesiredCapacity", valid_617732
  var valid_617733 = query.getOrDefault("InstanceIds")
  valid_617733 = validateParameter(valid_617733, JArray, required = false,
                                 default = nil)
  if valid_617733 != nil:
    section.add "InstanceIds", valid_617733
  var valid_617734 = query.getOrDefault("Version")
  valid_617734 = validateParameter(valid_617734, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617734 != nil:
    section.add "Version", valid_617734
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617735 = header.getOrDefault("X-Amz-Date")
  valid_617735 = validateParameter(valid_617735, JString, required = false,
                                 default = nil)
  if valid_617735 != nil:
    section.add "X-Amz-Date", valid_617735
  var valid_617736 = header.getOrDefault("X-Amz-Security-Token")
  valid_617736 = validateParameter(valid_617736, JString, required = false,
                                 default = nil)
  if valid_617736 != nil:
    section.add "X-Amz-Security-Token", valid_617736
  var valid_617737 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617737 = validateParameter(valid_617737, JString, required = false,
                                 default = nil)
  if valid_617737 != nil:
    section.add "X-Amz-Content-Sha256", valid_617737
  var valid_617738 = header.getOrDefault("X-Amz-Algorithm")
  valid_617738 = validateParameter(valid_617738, JString, required = false,
                                 default = nil)
  if valid_617738 != nil:
    section.add "X-Amz-Algorithm", valid_617738
  var valid_617739 = header.getOrDefault("X-Amz-Signature")
  valid_617739 = validateParameter(valid_617739, JString, required = false,
                                 default = nil)
  if valid_617739 != nil:
    section.add "X-Amz-Signature", valid_617739
  var valid_617740 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617740 = validateParameter(valid_617740, JString, required = false,
                                 default = nil)
  if valid_617740 != nil:
    section.add "X-Amz-SignedHeaders", valid_617740
  var valid_617741 = header.getOrDefault("X-Amz-Credential")
  valid_617741 = validateParameter(valid_617741, JString, required = false,
                                 default = nil)
  if valid_617741 != nil:
    section.add "X-Amz-Credential", valid_617741
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617742: Call_GetDetachInstances_617727; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes one or more instances from the specified Auto Scaling group.</p> <p>After the instances are detached, you can manage them independent of the Auto Scaling group.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.</p> <p>If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html">Detach EC2 Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_617742.validator(path, query, header, formData, body)
  let scheme = call_617742.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617742.url(scheme.get, call_617742.host, call_617742.base,
                         call_617742.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617742, url, valid)

proc call*(call_617743: Call_GetDetachInstances_617727;
          AutoScalingGroupName: string; ShouldDecrementDesiredCapacity: bool;
          Action: string = "DetachInstances"; InstanceIds: JsonNode = nil;
          Version: string = "2011-01-01"): Recallable =
  ## getDetachInstances
  ## <p>Removes one or more instances from the specified Auto Scaling group.</p> <p>After the instances are detached, you can manage them independent of the Auto Scaling group.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.</p> <p>If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html">Detach EC2 Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   ShouldDecrementDesiredCapacity: bool (required)
  ##                                 : Indicates whether the Auto Scaling group decrements the desired capacity value by the number of instances detached.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Version: string (required)
  var query_617744 = newJObject()
  add(query_617744, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_617744, "Action", newJString(Action))
  add(query_617744, "ShouldDecrementDesiredCapacity",
      newJBool(ShouldDecrementDesiredCapacity))
  if InstanceIds != nil:
    query_617744.add "InstanceIds", InstanceIds
  add(query_617744, "Version", newJString(Version))
  result = call_617743.call(nil, query_617744, nil, nil, nil)

var getDetachInstances* = Call_GetDetachInstances_617727(
    name: "getDetachInstances", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DetachInstances",
    validator: validate_GetDetachInstances_617728, base: "/",
    url: url_GetDetachInstances_617729, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDetachLoadBalancerTargetGroups_617781 = ref object of OpenApiRestCall_615866
proc url_PostDetachLoadBalancerTargetGroups_617783(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDetachLoadBalancerTargetGroups_617782(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Detaches one or more target groups from the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617784 = query.getOrDefault("Action")
  valid_617784 = validateParameter(valid_617784, JString, required = true, default = newJString(
      "DetachLoadBalancerTargetGroups"))
  if valid_617784 != nil:
    section.add "Action", valid_617784
  var valid_617785 = query.getOrDefault("Version")
  valid_617785 = validateParameter(valid_617785, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617785 != nil:
    section.add "Version", valid_617785
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617786 = header.getOrDefault("X-Amz-Date")
  valid_617786 = validateParameter(valid_617786, JString, required = false,
                                 default = nil)
  if valid_617786 != nil:
    section.add "X-Amz-Date", valid_617786
  var valid_617787 = header.getOrDefault("X-Amz-Security-Token")
  valid_617787 = validateParameter(valid_617787, JString, required = false,
                                 default = nil)
  if valid_617787 != nil:
    section.add "X-Amz-Security-Token", valid_617787
  var valid_617788 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617788 = validateParameter(valid_617788, JString, required = false,
                                 default = nil)
  if valid_617788 != nil:
    section.add "X-Amz-Content-Sha256", valid_617788
  var valid_617789 = header.getOrDefault("X-Amz-Algorithm")
  valid_617789 = validateParameter(valid_617789, JString, required = false,
                                 default = nil)
  if valid_617789 != nil:
    section.add "X-Amz-Algorithm", valid_617789
  var valid_617790 = header.getOrDefault("X-Amz-Signature")
  valid_617790 = validateParameter(valid_617790, JString, required = false,
                                 default = nil)
  if valid_617790 != nil:
    section.add "X-Amz-Signature", valid_617790
  var valid_617791 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617791 = validateParameter(valid_617791, JString, required = false,
                                 default = nil)
  if valid_617791 != nil:
    section.add "X-Amz-SignedHeaders", valid_617791
  var valid_617792 = header.getOrDefault("X-Amz-Credential")
  valid_617792 = validateParameter(valid_617792, JString, required = false,
                                 default = nil)
  if valid_617792 != nil:
    section.add "X-Amz-Credential", valid_617792
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_617793 = formData.getOrDefault("AutoScalingGroupName")
  valid_617793 = validateParameter(valid_617793, JString, required = true,
                                 default = nil)
  if valid_617793 != nil:
    section.add "AutoScalingGroupName", valid_617793
  var valid_617794 = formData.getOrDefault("TargetGroupARNs")
  valid_617794 = validateParameter(valid_617794, JArray, required = true, default = nil)
  if valid_617794 != nil:
    section.add "TargetGroupARNs", valid_617794
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617795: Call_PostDetachLoadBalancerTargetGroups_617781;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Detaches one or more target groups from the specified Auto Scaling group.
  ## 
  let valid = call_617795.validator(path, query, header, formData, body)
  let scheme = call_617795.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617795.url(scheme.get, call_617795.host, call_617795.base,
                         call_617795.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617795, url, valid)

proc call*(call_617796: Call_PostDetachLoadBalancerTargetGroups_617781;
          AutoScalingGroupName: string; TargetGroupARNs: JsonNode;
          Action: string = "DetachLoadBalancerTargetGroups";
          Version: string = "2011-01-01"): Recallable =
  ## postDetachLoadBalancerTargetGroups
  ## Detaches one or more target groups from the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617797 = newJObject()
  var formData_617798 = newJObject()
  add(formData_617798, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if TargetGroupARNs != nil:
    formData_617798.add "TargetGroupARNs", TargetGroupARNs
  add(query_617797, "Action", newJString(Action))
  add(query_617797, "Version", newJString(Version))
  result = call_617796.call(nil, query_617797, nil, formData_617798, nil)

var postDetachLoadBalancerTargetGroups* = Call_PostDetachLoadBalancerTargetGroups_617781(
    name: "postDetachLoadBalancerTargetGroups", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DetachLoadBalancerTargetGroups",
    validator: validate_PostDetachLoadBalancerTargetGroups_617782, base: "/",
    url: url_PostDetachLoadBalancerTargetGroups_617783,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDetachLoadBalancerTargetGroups_617764 = ref object of OpenApiRestCall_615866
proc url_GetDetachLoadBalancerTargetGroups_617766(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDetachLoadBalancerTargetGroups_617765(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Detaches one or more target groups from the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_617767 = query.getOrDefault("AutoScalingGroupName")
  valid_617767 = validateParameter(valid_617767, JString, required = true,
                                 default = nil)
  if valid_617767 != nil:
    section.add "AutoScalingGroupName", valid_617767
  var valid_617768 = query.getOrDefault("Action")
  valid_617768 = validateParameter(valid_617768, JString, required = true, default = newJString(
      "DetachLoadBalancerTargetGroups"))
  if valid_617768 != nil:
    section.add "Action", valid_617768
  var valid_617769 = query.getOrDefault("TargetGroupARNs")
  valid_617769 = validateParameter(valid_617769, JArray, required = true, default = nil)
  if valid_617769 != nil:
    section.add "TargetGroupARNs", valid_617769
  var valid_617770 = query.getOrDefault("Version")
  valid_617770 = validateParameter(valid_617770, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617770 != nil:
    section.add "Version", valid_617770
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617771 = header.getOrDefault("X-Amz-Date")
  valid_617771 = validateParameter(valid_617771, JString, required = false,
                                 default = nil)
  if valid_617771 != nil:
    section.add "X-Amz-Date", valid_617771
  var valid_617772 = header.getOrDefault("X-Amz-Security-Token")
  valid_617772 = validateParameter(valid_617772, JString, required = false,
                                 default = nil)
  if valid_617772 != nil:
    section.add "X-Amz-Security-Token", valid_617772
  var valid_617773 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617773 = validateParameter(valid_617773, JString, required = false,
                                 default = nil)
  if valid_617773 != nil:
    section.add "X-Amz-Content-Sha256", valid_617773
  var valid_617774 = header.getOrDefault("X-Amz-Algorithm")
  valid_617774 = validateParameter(valid_617774, JString, required = false,
                                 default = nil)
  if valid_617774 != nil:
    section.add "X-Amz-Algorithm", valid_617774
  var valid_617775 = header.getOrDefault("X-Amz-Signature")
  valid_617775 = validateParameter(valid_617775, JString, required = false,
                                 default = nil)
  if valid_617775 != nil:
    section.add "X-Amz-Signature", valid_617775
  var valid_617776 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617776 = validateParameter(valid_617776, JString, required = false,
                                 default = nil)
  if valid_617776 != nil:
    section.add "X-Amz-SignedHeaders", valid_617776
  var valid_617777 = header.getOrDefault("X-Amz-Credential")
  valid_617777 = validateParameter(valid_617777, JString, required = false,
                                 default = nil)
  if valid_617777 != nil:
    section.add "X-Amz-Credential", valid_617777
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617778: Call_GetDetachLoadBalancerTargetGroups_617764;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Detaches one or more target groups from the specified Auto Scaling group.
  ## 
  let valid = call_617778.validator(path, query, header, formData, body)
  let scheme = call_617778.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617778.url(scheme.get, call_617778.host, call_617778.base,
                         call_617778.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617778, url, valid)

proc call*(call_617779: Call_GetDetachLoadBalancerTargetGroups_617764;
          AutoScalingGroupName: string; TargetGroupARNs: JsonNode;
          Action: string = "DetachLoadBalancerTargetGroups";
          Version: string = "2011-01-01"): Recallable =
  ## getDetachLoadBalancerTargetGroups
  ## Detaches one or more target groups from the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  ##   Version: string (required)
  var query_617780 = newJObject()
  add(query_617780, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_617780, "Action", newJString(Action))
  if TargetGroupARNs != nil:
    query_617780.add "TargetGroupARNs", TargetGroupARNs
  add(query_617780, "Version", newJString(Version))
  result = call_617779.call(nil, query_617780, nil, nil, nil)

var getDetachLoadBalancerTargetGroups* = Call_GetDetachLoadBalancerTargetGroups_617764(
    name: "getDetachLoadBalancerTargetGroups", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DetachLoadBalancerTargetGroups",
    validator: validate_GetDetachLoadBalancerTargetGroups_617765, base: "/",
    url: url_GetDetachLoadBalancerTargetGroups_617766,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDetachLoadBalancers_617816 = ref object of OpenApiRestCall_615866
proc url_PostDetachLoadBalancers_617818(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDetachLoadBalancers_617817(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Detaches one or more Classic Load Balancers from the specified Auto Scaling group.</p> <p>This operation detaches only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DetachLoadBalancerTargetGroups</a> instead.</p> <p>When you detach a load balancer, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using <a>DescribeLoadBalancers</a>. The instances remain running.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617819 = query.getOrDefault("Action")
  valid_617819 = validateParameter(valid_617819, JString, required = true,
                                 default = newJString("DetachLoadBalancers"))
  if valid_617819 != nil:
    section.add "Action", valid_617819
  var valid_617820 = query.getOrDefault("Version")
  valid_617820 = validateParameter(valid_617820, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617820 != nil:
    section.add "Version", valid_617820
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617821 = header.getOrDefault("X-Amz-Date")
  valid_617821 = validateParameter(valid_617821, JString, required = false,
                                 default = nil)
  if valid_617821 != nil:
    section.add "X-Amz-Date", valid_617821
  var valid_617822 = header.getOrDefault("X-Amz-Security-Token")
  valid_617822 = validateParameter(valid_617822, JString, required = false,
                                 default = nil)
  if valid_617822 != nil:
    section.add "X-Amz-Security-Token", valid_617822
  var valid_617823 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617823 = validateParameter(valid_617823, JString, required = false,
                                 default = nil)
  if valid_617823 != nil:
    section.add "X-Amz-Content-Sha256", valid_617823
  var valid_617824 = header.getOrDefault("X-Amz-Algorithm")
  valid_617824 = validateParameter(valid_617824, JString, required = false,
                                 default = nil)
  if valid_617824 != nil:
    section.add "X-Amz-Algorithm", valid_617824
  var valid_617825 = header.getOrDefault("X-Amz-Signature")
  valid_617825 = validateParameter(valid_617825, JString, required = false,
                                 default = nil)
  if valid_617825 != nil:
    section.add "X-Amz-Signature", valid_617825
  var valid_617826 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617826 = validateParameter(valid_617826, JString, required = false,
                                 default = nil)
  if valid_617826 != nil:
    section.add "X-Amz-SignedHeaders", valid_617826
  var valid_617827 = header.getOrDefault("X-Amz-Credential")
  valid_617827 = validateParameter(valid_617827, JString, required = false,
                                 default = nil)
  if valid_617827 != nil:
    section.add "X-Amz-Credential", valid_617827
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_617828 = formData.getOrDefault("AutoScalingGroupName")
  valid_617828 = validateParameter(valid_617828, JString, required = true,
                                 default = nil)
  if valid_617828 != nil:
    section.add "AutoScalingGroupName", valid_617828
  var valid_617829 = formData.getOrDefault("LoadBalancerNames")
  valid_617829 = validateParameter(valid_617829, JArray, required = true, default = nil)
  if valid_617829 != nil:
    section.add "LoadBalancerNames", valid_617829
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617830: Call_PostDetachLoadBalancers_617816; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Detaches one or more Classic Load Balancers from the specified Auto Scaling group.</p> <p>This operation detaches only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DetachLoadBalancerTargetGroups</a> instead.</p> <p>When you detach a load balancer, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using <a>DescribeLoadBalancers</a>. The instances remain running.</p>
  ## 
  let valid = call_617830.validator(path, query, header, formData, body)
  let scheme = call_617830.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617830.url(scheme.get, call_617830.host, call_617830.base,
                         call_617830.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617830, url, valid)

proc call*(call_617831: Call_PostDetachLoadBalancers_617816;
          AutoScalingGroupName: string; LoadBalancerNames: JsonNode;
          Action: string = "DetachLoadBalancers"; Version: string = "2011-01-01"): Recallable =
  ## postDetachLoadBalancers
  ## <p>Detaches one or more Classic Load Balancers from the specified Auto Scaling group.</p> <p>This operation detaches only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DetachLoadBalancerTargetGroups</a> instead.</p> <p>When you detach a load balancer, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using <a>DescribeLoadBalancers</a>. The instances remain running.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  ##   Version: string (required)
  var query_617832 = newJObject()
  var formData_617833 = newJObject()
  add(formData_617833, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_617832, "Action", newJString(Action))
  if LoadBalancerNames != nil:
    formData_617833.add "LoadBalancerNames", LoadBalancerNames
  add(query_617832, "Version", newJString(Version))
  result = call_617831.call(nil, query_617832, nil, formData_617833, nil)

var postDetachLoadBalancers* = Call_PostDetachLoadBalancers_617816(
    name: "postDetachLoadBalancers", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DetachLoadBalancers",
    validator: validate_PostDetachLoadBalancers_617817, base: "/",
    url: url_PostDetachLoadBalancers_617818, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDetachLoadBalancers_617799 = ref object of OpenApiRestCall_615866
proc url_GetDetachLoadBalancers_617801(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDetachLoadBalancers_617800(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Detaches one or more Classic Load Balancers from the specified Auto Scaling group.</p> <p>This operation detaches only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DetachLoadBalancerTargetGroups</a> instead.</p> <p>When you detach a load balancer, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using <a>DescribeLoadBalancers</a>. The instances remain running.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_617802 = query.getOrDefault("AutoScalingGroupName")
  valid_617802 = validateParameter(valid_617802, JString, required = true,
                                 default = nil)
  if valid_617802 != nil:
    section.add "AutoScalingGroupName", valid_617802
  var valid_617803 = query.getOrDefault("Action")
  valid_617803 = validateParameter(valid_617803, JString, required = true,
                                 default = newJString("DetachLoadBalancers"))
  if valid_617803 != nil:
    section.add "Action", valid_617803
  var valid_617804 = query.getOrDefault("LoadBalancerNames")
  valid_617804 = validateParameter(valid_617804, JArray, required = true, default = nil)
  if valid_617804 != nil:
    section.add "LoadBalancerNames", valid_617804
  var valid_617805 = query.getOrDefault("Version")
  valid_617805 = validateParameter(valid_617805, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617805 != nil:
    section.add "Version", valid_617805
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617806 = header.getOrDefault("X-Amz-Date")
  valid_617806 = validateParameter(valid_617806, JString, required = false,
                                 default = nil)
  if valid_617806 != nil:
    section.add "X-Amz-Date", valid_617806
  var valid_617807 = header.getOrDefault("X-Amz-Security-Token")
  valid_617807 = validateParameter(valid_617807, JString, required = false,
                                 default = nil)
  if valid_617807 != nil:
    section.add "X-Amz-Security-Token", valid_617807
  var valid_617808 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617808 = validateParameter(valid_617808, JString, required = false,
                                 default = nil)
  if valid_617808 != nil:
    section.add "X-Amz-Content-Sha256", valid_617808
  var valid_617809 = header.getOrDefault("X-Amz-Algorithm")
  valid_617809 = validateParameter(valid_617809, JString, required = false,
                                 default = nil)
  if valid_617809 != nil:
    section.add "X-Amz-Algorithm", valid_617809
  var valid_617810 = header.getOrDefault("X-Amz-Signature")
  valid_617810 = validateParameter(valid_617810, JString, required = false,
                                 default = nil)
  if valid_617810 != nil:
    section.add "X-Amz-Signature", valid_617810
  var valid_617811 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617811 = validateParameter(valid_617811, JString, required = false,
                                 default = nil)
  if valid_617811 != nil:
    section.add "X-Amz-SignedHeaders", valid_617811
  var valid_617812 = header.getOrDefault("X-Amz-Credential")
  valid_617812 = validateParameter(valid_617812, JString, required = false,
                                 default = nil)
  if valid_617812 != nil:
    section.add "X-Amz-Credential", valid_617812
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617813: Call_GetDetachLoadBalancers_617799; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Detaches one or more Classic Load Balancers from the specified Auto Scaling group.</p> <p>This operation detaches only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DetachLoadBalancerTargetGroups</a> instead.</p> <p>When you detach a load balancer, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using <a>DescribeLoadBalancers</a>. The instances remain running.</p>
  ## 
  let valid = call_617813.validator(path, query, header, formData, body)
  let scheme = call_617813.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617813.url(scheme.get, call_617813.host, call_617813.base,
                         call_617813.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617813, url, valid)

proc call*(call_617814: Call_GetDetachLoadBalancers_617799;
          AutoScalingGroupName: string; LoadBalancerNames: JsonNode;
          Action: string = "DetachLoadBalancers"; Version: string = "2011-01-01"): Recallable =
  ## getDetachLoadBalancers
  ## <p>Detaches one or more Classic Load Balancers from the specified Auto Scaling group.</p> <p>This operation detaches only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DetachLoadBalancerTargetGroups</a> instead.</p> <p>When you detach a load balancer, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using <a>DescribeLoadBalancers</a>. The instances remain running.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  ##   Version: string (required)
  var query_617815 = newJObject()
  add(query_617815, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_617815, "Action", newJString(Action))
  if LoadBalancerNames != nil:
    query_617815.add "LoadBalancerNames", LoadBalancerNames
  add(query_617815, "Version", newJString(Version))
  result = call_617814.call(nil, query_617815, nil, nil, nil)

var getDetachLoadBalancers* = Call_GetDetachLoadBalancers_617799(
    name: "getDetachLoadBalancers", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DetachLoadBalancers",
    validator: validate_GetDetachLoadBalancers_617800, base: "/",
    url: url_GetDetachLoadBalancers_617801, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDisableMetricsCollection_617851 = ref object of OpenApiRestCall_615866
proc url_PostDisableMetricsCollection_617853(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDisableMetricsCollection_617852(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disables group metrics for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617854 = query.getOrDefault("Action")
  valid_617854 = validateParameter(valid_617854, JString, required = true, default = newJString(
      "DisableMetricsCollection"))
  if valid_617854 != nil:
    section.add "Action", valid_617854
  var valid_617855 = query.getOrDefault("Version")
  valid_617855 = validateParameter(valid_617855, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617855 != nil:
    section.add "Version", valid_617855
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617856 = header.getOrDefault("X-Amz-Date")
  valid_617856 = validateParameter(valid_617856, JString, required = false,
                                 default = nil)
  if valid_617856 != nil:
    section.add "X-Amz-Date", valid_617856
  var valid_617857 = header.getOrDefault("X-Amz-Security-Token")
  valid_617857 = validateParameter(valid_617857, JString, required = false,
                                 default = nil)
  if valid_617857 != nil:
    section.add "X-Amz-Security-Token", valid_617857
  var valid_617858 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617858 = validateParameter(valid_617858, JString, required = false,
                                 default = nil)
  if valid_617858 != nil:
    section.add "X-Amz-Content-Sha256", valid_617858
  var valid_617859 = header.getOrDefault("X-Amz-Algorithm")
  valid_617859 = validateParameter(valid_617859, JString, required = false,
                                 default = nil)
  if valid_617859 != nil:
    section.add "X-Amz-Algorithm", valid_617859
  var valid_617860 = header.getOrDefault("X-Amz-Signature")
  valid_617860 = validateParameter(valid_617860, JString, required = false,
                                 default = nil)
  if valid_617860 != nil:
    section.add "X-Amz-Signature", valid_617860
  var valid_617861 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617861 = validateParameter(valid_617861, JString, required = false,
                                 default = nil)
  if valid_617861 != nil:
    section.add "X-Amz-SignedHeaders", valid_617861
  var valid_617862 = header.getOrDefault("X-Amz-Credential")
  valid_617862 = validateParameter(valid_617862, JString, required = false,
                                 default = nil)
  if valid_617862 != nil:
    section.add "X-Amz-Credential", valid_617862
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are disabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_617863 = formData.getOrDefault("AutoScalingGroupName")
  valid_617863 = validateParameter(valid_617863, JString, required = true,
                                 default = nil)
  if valid_617863 != nil:
    section.add "AutoScalingGroupName", valid_617863
  var valid_617864 = formData.getOrDefault("Metrics")
  valid_617864 = validateParameter(valid_617864, JArray, required = false,
                                 default = nil)
  if valid_617864 != nil:
    section.add "Metrics", valid_617864
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617865: Call_PostDisableMetricsCollection_617851; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disables group metrics for the specified Auto Scaling group.
  ## 
  let valid = call_617865.validator(path, query, header, formData, body)
  let scheme = call_617865.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617865.url(scheme.get, call_617865.host, call_617865.base,
                         call_617865.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617865, url, valid)

proc call*(call_617866: Call_PostDisableMetricsCollection_617851;
          AutoScalingGroupName: string; Metrics: JsonNode = nil;
          Action: string = "DisableMetricsCollection";
          Version: string = "2011-01-01"): Recallable =
  ## postDisableMetricsCollection
  ## Disables group metrics for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are disabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617867 = newJObject()
  var formData_617868 = newJObject()
  add(formData_617868, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if Metrics != nil:
    formData_617868.add "Metrics", Metrics
  add(query_617867, "Action", newJString(Action))
  add(query_617867, "Version", newJString(Version))
  result = call_617866.call(nil, query_617867, nil, formData_617868, nil)

var postDisableMetricsCollection* = Call_PostDisableMetricsCollection_617851(
    name: "postDisableMetricsCollection", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DisableMetricsCollection",
    validator: validate_PostDisableMetricsCollection_617852, base: "/",
    url: url_PostDisableMetricsCollection_617853,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDisableMetricsCollection_617834 = ref object of OpenApiRestCall_615866
proc url_GetDisableMetricsCollection_617836(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDisableMetricsCollection_617835(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disables group metrics for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are disabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_617837 = query.getOrDefault("AutoScalingGroupName")
  valid_617837 = validateParameter(valid_617837, JString, required = true,
                                 default = nil)
  if valid_617837 != nil:
    section.add "AutoScalingGroupName", valid_617837
  var valid_617838 = query.getOrDefault("Action")
  valid_617838 = validateParameter(valid_617838, JString, required = true, default = newJString(
      "DisableMetricsCollection"))
  if valid_617838 != nil:
    section.add "Action", valid_617838
  var valid_617839 = query.getOrDefault("Metrics")
  valid_617839 = validateParameter(valid_617839, JArray, required = false,
                                 default = nil)
  if valid_617839 != nil:
    section.add "Metrics", valid_617839
  var valid_617840 = query.getOrDefault("Version")
  valid_617840 = validateParameter(valid_617840, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617840 != nil:
    section.add "Version", valid_617840
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617841 = header.getOrDefault("X-Amz-Date")
  valid_617841 = validateParameter(valid_617841, JString, required = false,
                                 default = nil)
  if valid_617841 != nil:
    section.add "X-Amz-Date", valid_617841
  var valid_617842 = header.getOrDefault("X-Amz-Security-Token")
  valid_617842 = validateParameter(valid_617842, JString, required = false,
                                 default = nil)
  if valid_617842 != nil:
    section.add "X-Amz-Security-Token", valid_617842
  var valid_617843 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617843 = validateParameter(valid_617843, JString, required = false,
                                 default = nil)
  if valid_617843 != nil:
    section.add "X-Amz-Content-Sha256", valid_617843
  var valid_617844 = header.getOrDefault("X-Amz-Algorithm")
  valid_617844 = validateParameter(valid_617844, JString, required = false,
                                 default = nil)
  if valid_617844 != nil:
    section.add "X-Amz-Algorithm", valid_617844
  var valid_617845 = header.getOrDefault("X-Amz-Signature")
  valid_617845 = validateParameter(valid_617845, JString, required = false,
                                 default = nil)
  if valid_617845 != nil:
    section.add "X-Amz-Signature", valid_617845
  var valid_617846 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617846 = validateParameter(valid_617846, JString, required = false,
                                 default = nil)
  if valid_617846 != nil:
    section.add "X-Amz-SignedHeaders", valid_617846
  var valid_617847 = header.getOrDefault("X-Amz-Credential")
  valid_617847 = validateParameter(valid_617847, JString, required = false,
                                 default = nil)
  if valid_617847 != nil:
    section.add "X-Amz-Credential", valid_617847
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617848: Call_GetDisableMetricsCollection_617834; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disables group metrics for the specified Auto Scaling group.
  ## 
  let valid = call_617848.validator(path, query, header, formData, body)
  let scheme = call_617848.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617848.url(scheme.get, call_617848.host, call_617848.base,
                         call_617848.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617848, url, valid)

proc call*(call_617849: Call_GetDisableMetricsCollection_617834;
          AutoScalingGroupName: string;
          Action: string = "DisableMetricsCollection"; Metrics: JsonNode = nil;
          Version: string = "2011-01-01"): Recallable =
  ## getDisableMetricsCollection
  ## Disables group metrics for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are disabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  ##   Version: string (required)
  var query_617850 = newJObject()
  add(query_617850, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_617850, "Action", newJString(Action))
  if Metrics != nil:
    query_617850.add "Metrics", Metrics
  add(query_617850, "Version", newJString(Version))
  result = call_617849.call(nil, query_617850, nil, nil, nil)

var getDisableMetricsCollection* = Call_GetDisableMetricsCollection_617834(
    name: "getDisableMetricsCollection", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DisableMetricsCollection",
    validator: validate_GetDisableMetricsCollection_617835, base: "/",
    url: url_GetDisableMetricsCollection_617836,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostEnableMetricsCollection_617887 = ref object of OpenApiRestCall_615866
proc url_PostEnableMetricsCollection_617889(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostEnableMetricsCollection_617888(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Enables group metrics for the specified Auto Scaling group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html">Monitoring Your Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617890 = query.getOrDefault("Action")
  valid_617890 = validateParameter(valid_617890, JString, required = true, default = newJString(
      "EnableMetricsCollection"))
  if valid_617890 != nil:
    section.add "Action", valid_617890
  var valid_617891 = query.getOrDefault("Version")
  valid_617891 = validateParameter(valid_617891, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617891 != nil:
    section.add "Version", valid_617891
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617892 = header.getOrDefault("X-Amz-Date")
  valid_617892 = validateParameter(valid_617892, JString, required = false,
                                 default = nil)
  if valid_617892 != nil:
    section.add "X-Amz-Date", valid_617892
  var valid_617893 = header.getOrDefault("X-Amz-Security-Token")
  valid_617893 = validateParameter(valid_617893, JString, required = false,
                                 default = nil)
  if valid_617893 != nil:
    section.add "X-Amz-Security-Token", valid_617893
  var valid_617894 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617894 = validateParameter(valid_617894, JString, required = false,
                                 default = nil)
  if valid_617894 != nil:
    section.add "X-Amz-Content-Sha256", valid_617894
  var valid_617895 = header.getOrDefault("X-Amz-Algorithm")
  valid_617895 = validateParameter(valid_617895, JString, required = false,
                                 default = nil)
  if valid_617895 != nil:
    section.add "X-Amz-Algorithm", valid_617895
  var valid_617896 = header.getOrDefault("X-Amz-Signature")
  valid_617896 = validateParameter(valid_617896, JString, required = false,
                                 default = nil)
  if valid_617896 != nil:
    section.add "X-Amz-Signature", valid_617896
  var valid_617897 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617897 = validateParameter(valid_617897, JString, required = false,
                                 default = nil)
  if valid_617897 != nil:
    section.add "X-Amz-SignedHeaders", valid_617897
  var valid_617898 = header.getOrDefault("X-Amz-Credential")
  valid_617898 = validateParameter(valid_617898, JString, required = false,
                                 default = nil)
  if valid_617898 != nil:
    section.add "X-Amz-Credential", valid_617898
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are enabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  ##   Granularity: JString (required)
  ##              : The granularity to associate with the metrics to collect. The only valid value is <code>1Minute</code>.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_617899 = formData.getOrDefault("AutoScalingGroupName")
  valid_617899 = validateParameter(valid_617899, JString, required = true,
                                 default = nil)
  if valid_617899 != nil:
    section.add "AutoScalingGroupName", valid_617899
  var valid_617900 = formData.getOrDefault("Metrics")
  valid_617900 = validateParameter(valid_617900, JArray, required = false,
                                 default = nil)
  if valid_617900 != nil:
    section.add "Metrics", valid_617900
  var valid_617901 = formData.getOrDefault("Granularity")
  valid_617901 = validateParameter(valid_617901, JString, required = true,
                                 default = nil)
  if valid_617901 != nil:
    section.add "Granularity", valid_617901
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617902: Call_PostEnableMetricsCollection_617887; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Enables group metrics for the specified Auto Scaling group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html">Monitoring Your Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ## 
  let valid = call_617902.validator(path, query, header, formData, body)
  let scheme = call_617902.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617902.url(scheme.get, call_617902.host, call_617902.base,
                         call_617902.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617902, url, valid)

proc call*(call_617903: Call_PostEnableMetricsCollection_617887;
          AutoScalingGroupName: string; Granularity: string;
          Metrics: JsonNode = nil; Action: string = "EnableMetricsCollection";
          Version: string = "2011-01-01"): Recallable =
  ## postEnableMetricsCollection
  ## Enables group metrics for the specified Auto Scaling group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html">Monitoring Your Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are enabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  ##   Granularity: string (required)
  ##              : The granularity to associate with the metrics to collect. The only valid value is <code>1Minute</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617904 = newJObject()
  var formData_617905 = newJObject()
  add(formData_617905, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if Metrics != nil:
    formData_617905.add "Metrics", Metrics
  add(formData_617905, "Granularity", newJString(Granularity))
  add(query_617904, "Action", newJString(Action))
  add(query_617904, "Version", newJString(Version))
  result = call_617903.call(nil, query_617904, nil, formData_617905, nil)

var postEnableMetricsCollection* = Call_PostEnableMetricsCollection_617887(
    name: "postEnableMetricsCollection", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=EnableMetricsCollection",
    validator: validate_PostEnableMetricsCollection_617888, base: "/",
    url: url_PostEnableMetricsCollection_617889,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetEnableMetricsCollection_617869 = ref object of OpenApiRestCall_615866
proc url_GetEnableMetricsCollection_617871(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetEnableMetricsCollection_617870(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Enables group metrics for the specified Auto Scaling group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html">Monitoring Your Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Granularity: JString (required)
  ##              : The granularity to associate with the metrics to collect. The only valid value is <code>1Minute</code>.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are enabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Granularity` field"
  var valid_617872 = query.getOrDefault("Granularity")
  valid_617872 = validateParameter(valid_617872, JString, required = true,
                                 default = nil)
  if valid_617872 != nil:
    section.add "Granularity", valid_617872
  var valid_617873 = query.getOrDefault("AutoScalingGroupName")
  valid_617873 = validateParameter(valid_617873, JString, required = true,
                                 default = nil)
  if valid_617873 != nil:
    section.add "AutoScalingGroupName", valid_617873
  var valid_617874 = query.getOrDefault("Action")
  valid_617874 = validateParameter(valid_617874, JString, required = true, default = newJString(
      "EnableMetricsCollection"))
  if valid_617874 != nil:
    section.add "Action", valid_617874
  var valid_617875 = query.getOrDefault("Metrics")
  valid_617875 = validateParameter(valid_617875, JArray, required = false,
                                 default = nil)
  if valid_617875 != nil:
    section.add "Metrics", valid_617875
  var valid_617876 = query.getOrDefault("Version")
  valid_617876 = validateParameter(valid_617876, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617876 != nil:
    section.add "Version", valid_617876
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617877 = header.getOrDefault("X-Amz-Date")
  valid_617877 = validateParameter(valid_617877, JString, required = false,
                                 default = nil)
  if valid_617877 != nil:
    section.add "X-Amz-Date", valid_617877
  var valid_617878 = header.getOrDefault("X-Amz-Security-Token")
  valid_617878 = validateParameter(valid_617878, JString, required = false,
                                 default = nil)
  if valid_617878 != nil:
    section.add "X-Amz-Security-Token", valid_617878
  var valid_617879 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617879 = validateParameter(valid_617879, JString, required = false,
                                 default = nil)
  if valid_617879 != nil:
    section.add "X-Amz-Content-Sha256", valid_617879
  var valid_617880 = header.getOrDefault("X-Amz-Algorithm")
  valid_617880 = validateParameter(valid_617880, JString, required = false,
                                 default = nil)
  if valid_617880 != nil:
    section.add "X-Amz-Algorithm", valid_617880
  var valid_617881 = header.getOrDefault("X-Amz-Signature")
  valid_617881 = validateParameter(valid_617881, JString, required = false,
                                 default = nil)
  if valid_617881 != nil:
    section.add "X-Amz-Signature", valid_617881
  var valid_617882 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617882 = validateParameter(valid_617882, JString, required = false,
                                 default = nil)
  if valid_617882 != nil:
    section.add "X-Amz-SignedHeaders", valid_617882
  var valid_617883 = header.getOrDefault("X-Amz-Credential")
  valid_617883 = validateParameter(valid_617883, JString, required = false,
                                 default = nil)
  if valid_617883 != nil:
    section.add "X-Amz-Credential", valid_617883
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617884: Call_GetEnableMetricsCollection_617869; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Enables group metrics for the specified Auto Scaling group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html">Monitoring Your Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ## 
  let valid = call_617884.validator(path, query, header, formData, body)
  let scheme = call_617884.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617884.url(scheme.get, call_617884.host, call_617884.base,
                         call_617884.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617884, url, valid)

proc call*(call_617885: Call_GetEnableMetricsCollection_617869;
          Granularity: string; AutoScalingGroupName: string;
          Action: string = "EnableMetricsCollection"; Metrics: JsonNode = nil;
          Version: string = "2011-01-01"): Recallable =
  ## getEnableMetricsCollection
  ## Enables group metrics for the specified Auto Scaling group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html">Monitoring Your Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   Granularity: string (required)
  ##              : The granularity to associate with the metrics to collect. The only valid value is <code>1Minute</code>.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are enabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  ##   Version: string (required)
  var query_617886 = newJObject()
  add(query_617886, "Granularity", newJString(Granularity))
  add(query_617886, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_617886, "Action", newJString(Action))
  if Metrics != nil:
    query_617886.add "Metrics", Metrics
  add(query_617886, "Version", newJString(Version))
  result = call_617885.call(nil, query_617886, nil, nil, nil)

var getEnableMetricsCollection* = Call_GetEnableMetricsCollection_617869(
    name: "getEnableMetricsCollection", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=EnableMetricsCollection",
    validator: validate_GetEnableMetricsCollection_617870, base: "/",
    url: url_GetEnableMetricsCollection_617871,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostEnterStandby_617924 = ref object of OpenApiRestCall_615866
proc url_PostEnterStandby_617926(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostEnterStandby_617925(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Moves the specified instances into the standby state.</p> <p>If you choose to decrement the desired capacity of the Auto Scaling group, the instances can enter standby as long as the desired capacity of the Auto Scaling group after the instances are placed into standby is equal to or greater than the minimum capacity of the group.</p> <p>If you choose not to decrement the desired capacity of the Auto Scaling group, the Auto Scaling group launches new instances to replace the instances on standby.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617927 = query.getOrDefault("Action")
  valid_617927 = validateParameter(valid_617927, JString, required = true,
                                 default = newJString("EnterStandby"))
  if valid_617927 != nil:
    section.add "Action", valid_617927
  var valid_617928 = query.getOrDefault("Version")
  valid_617928 = validateParameter(valid_617928, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617928 != nil:
    section.add "Version", valid_617928
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617929 = header.getOrDefault("X-Amz-Date")
  valid_617929 = validateParameter(valid_617929, JString, required = false,
                                 default = nil)
  if valid_617929 != nil:
    section.add "X-Amz-Date", valid_617929
  var valid_617930 = header.getOrDefault("X-Amz-Security-Token")
  valid_617930 = validateParameter(valid_617930, JString, required = false,
                                 default = nil)
  if valid_617930 != nil:
    section.add "X-Amz-Security-Token", valid_617930
  var valid_617931 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617931 = validateParameter(valid_617931, JString, required = false,
                                 default = nil)
  if valid_617931 != nil:
    section.add "X-Amz-Content-Sha256", valid_617931
  var valid_617932 = header.getOrDefault("X-Amz-Algorithm")
  valid_617932 = validateParameter(valid_617932, JString, required = false,
                                 default = nil)
  if valid_617932 != nil:
    section.add "X-Amz-Algorithm", valid_617932
  var valid_617933 = header.getOrDefault("X-Amz-Signature")
  valid_617933 = validateParameter(valid_617933, JString, required = false,
                                 default = nil)
  if valid_617933 != nil:
    section.add "X-Amz-Signature", valid_617933
  var valid_617934 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617934 = validateParameter(valid_617934, JString, required = false,
                                 default = nil)
  if valid_617934 != nil:
    section.add "X-Amz-SignedHeaders", valid_617934
  var valid_617935 = header.getOrDefault("X-Amz-Credential")
  valid_617935 = validateParameter(valid_617935, JString, required = false,
                                 default = nil)
  if valid_617935 != nil:
    section.add "X-Amz-Credential", valid_617935
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   ShouldDecrementDesiredCapacity: JBool (required)
  ##                                 : Indicates whether to decrement the desired capacity of the Auto Scaling group by the number of instances moved to <code>Standby</code> mode.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_617936 = formData.getOrDefault("AutoScalingGroupName")
  valid_617936 = validateParameter(valid_617936, JString, required = true,
                                 default = nil)
  if valid_617936 != nil:
    section.add "AutoScalingGroupName", valid_617936
  var valid_617937 = formData.getOrDefault("InstanceIds")
  valid_617937 = validateParameter(valid_617937, JArray, required = false,
                                 default = nil)
  if valid_617937 != nil:
    section.add "InstanceIds", valid_617937
  var valid_617938 = formData.getOrDefault("ShouldDecrementDesiredCapacity")
  valid_617938 = validateParameter(valid_617938, JBool, required = true, default = nil)
  if valid_617938 != nil:
    section.add "ShouldDecrementDesiredCapacity", valid_617938
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617939: Call_PostEnterStandby_617924; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Moves the specified instances into the standby state.</p> <p>If you choose to decrement the desired capacity of the Auto Scaling group, the instances can enter standby as long as the desired capacity of the Auto Scaling group after the instances are placed into standby is equal to or greater than the minimum capacity of the group.</p> <p>If you choose not to decrement the desired capacity of the Auto Scaling group, the Auto Scaling group launches new instances to replace the instances on standby.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_617939.validator(path, query, header, formData, body)
  let scheme = call_617939.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617939.url(scheme.get, call_617939.host, call_617939.base,
                         call_617939.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617939, url, valid)

proc call*(call_617940: Call_PostEnterStandby_617924; AutoScalingGroupName: string;
          ShouldDecrementDesiredCapacity: bool; InstanceIds: JsonNode = nil;
          Action: string = "EnterStandby"; Version: string = "2011-01-01"): Recallable =
  ## postEnterStandby
  ## <p>Moves the specified instances into the standby state.</p> <p>If you choose to decrement the desired capacity of the Auto Scaling group, the instances can enter standby as long as the desired capacity of the Auto Scaling group after the instances are placed into standby is equal to or greater than the minimum capacity of the group.</p> <p>If you choose not to decrement the desired capacity of the Auto Scaling group, the Auto Scaling group launches new instances to replace the instances on standby.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Action: string (required)
  ##   ShouldDecrementDesiredCapacity: bool (required)
  ##                                 : Indicates whether to decrement the desired capacity of the Auto Scaling group by the number of instances moved to <code>Standby</code> mode.
  ##   Version: string (required)
  var query_617941 = newJObject()
  var formData_617942 = newJObject()
  add(formData_617942, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if InstanceIds != nil:
    formData_617942.add "InstanceIds", InstanceIds
  add(query_617941, "Action", newJString(Action))
  add(formData_617942, "ShouldDecrementDesiredCapacity",
      newJBool(ShouldDecrementDesiredCapacity))
  add(query_617941, "Version", newJString(Version))
  result = call_617940.call(nil, query_617941, nil, formData_617942, nil)

var postEnterStandby* = Call_PostEnterStandby_617924(name: "postEnterStandby",
    meth: HttpMethod.HttpPost, host: "autoscaling.amazonaws.com",
    route: "/#Action=EnterStandby", validator: validate_PostEnterStandby_617925,
    base: "/", url: url_PostEnterStandby_617926,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetEnterStandby_617906 = ref object of OpenApiRestCall_615866
proc url_GetEnterStandby_617908(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetEnterStandby_617907(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Moves the specified instances into the standby state.</p> <p>If you choose to decrement the desired capacity of the Auto Scaling group, the instances can enter standby as long as the desired capacity of the Auto Scaling group after the instances are placed into standby is equal to or greater than the minimum capacity of the group.</p> <p>If you choose not to decrement the desired capacity of the Auto Scaling group, the Auto Scaling group launches new instances to replace the instances on standby.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   ShouldDecrementDesiredCapacity: JBool (required)
  ##                                 : Indicates whether to decrement the desired capacity of the Auto Scaling group by the number of instances moved to <code>Standby</code> mode.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_617909 = query.getOrDefault("AutoScalingGroupName")
  valid_617909 = validateParameter(valid_617909, JString, required = true,
                                 default = nil)
  if valid_617909 != nil:
    section.add "AutoScalingGroupName", valid_617909
  var valid_617910 = query.getOrDefault("Action")
  valid_617910 = validateParameter(valid_617910, JString, required = true,
                                 default = newJString("EnterStandby"))
  if valid_617910 != nil:
    section.add "Action", valid_617910
  var valid_617911 = query.getOrDefault("ShouldDecrementDesiredCapacity")
  valid_617911 = validateParameter(valid_617911, JBool, required = true, default = nil)
  if valid_617911 != nil:
    section.add "ShouldDecrementDesiredCapacity", valid_617911
  var valid_617912 = query.getOrDefault("InstanceIds")
  valid_617912 = validateParameter(valid_617912, JArray, required = false,
                                 default = nil)
  if valid_617912 != nil:
    section.add "InstanceIds", valid_617912
  var valid_617913 = query.getOrDefault("Version")
  valid_617913 = validateParameter(valid_617913, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617913 != nil:
    section.add "Version", valid_617913
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617914 = header.getOrDefault("X-Amz-Date")
  valid_617914 = validateParameter(valid_617914, JString, required = false,
                                 default = nil)
  if valid_617914 != nil:
    section.add "X-Amz-Date", valid_617914
  var valid_617915 = header.getOrDefault("X-Amz-Security-Token")
  valid_617915 = validateParameter(valid_617915, JString, required = false,
                                 default = nil)
  if valid_617915 != nil:
    section.add "X-Amz-Security-Token", valid_617915
  var valid_617916 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617916 = validateParameter(valid_617916, JString, required = false,
                                 default = nil)
  if valid_617916 != nil:
    section.add "X-Amz-Content-Sha256", valid_617916
  var valid_617917 = header.getOrDefault("X-Amz-Algorithm")
  valid_617917 = validateParameter(valid_617917, JString, required = false,
                                 default = nil)
  if valid_617917 != nil:
    section.add "X-Amz-Algorithm", valid_617917
  var valid_617918 = header.getOrDefault("X-Amz-Signature")
  valid_617918 = validateParameter(valid_617918, JString, required = false,
                                 default = nil)
  if valid_617918 != nil:
    section.add "X-Amz-Signature", valid_617918
  var valid_617919 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617919 = validateParameter(valid_617919, JString, required = false,
                                 default = nil)
  if valid_617919 != nil:
    section.add "X-Amz-SignedHeaders", valid_617919
  var valid_617920 = header.getOrDefault("X-Amz-Credential")
  valid_617920 = validateParameter(valid_617920, JString, required = false,
                                 default = nil)
  if valid_617920 != nil:
    section.add "X-Amz-Credential", valid_617920
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617921: Call_GetEnterStandby_617906; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Moves the specified instances into the standby state.</p> <p>If you choose to decrement the desired capacity of the Auto Scaling group, the instances can enter standby as long as the desired capacity of the Auto Scaling group after the instances are placed into standby is equal to or greater than the minimum capacity of the group.</p> <p>If you choose not to decrement the desired capacity of the Auto Scaling group, the Auto Scaling group launches new instances to replace the instances on standby.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_617921.validator(path, query, header, formData, body)
  let scheme = call_617921.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617921.url(scheme.get, call_617921.host, call_617921.base,
                         call_617921.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617921, url, valid)

proc call*(call_617922: Call_GetEnterStandby_617906; AutoScalingGroupName: string;
          ShouldDecrementDesiredCapacity: bool; Action: string = "EnterStandby";
          InstanceIds: JsonNode = nil; Version: string = "2011-01-01"): Recallable =
  ## getEnterStandby
  ## <p>Moves the specified instances into the standby state.</p> <p>If you choose to decrement the desired capacity of the Auto Scaling group, the instances can enter standby as long as the desired capacity of the Auto Scaling group after the instances are placed into standby is equal to or greater than the minimum capacity of the group.</p> <p>If you choose not to decrement the desired capacity of the Auto Scaling group, the Auto Scaling group launches new instances to replace the instances on standby.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   ShouldDecrementDesiredCapacity: bool (required)
  ##                                 : Indicates whether to decrement the desired capacity of the Auto Scaling group by the number of instances moved to <code>Standby</code> mode.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Version: string (required)
  var query_617923 = newJObject()
  add(query_617923, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_617923, "Action", newJString(Action))
  add(query_617923, "ShouldDecrementDesiredCapacity",
      newJBool(ShouldDecrementDesiredCapacity))
  if InstanceIds != nil:
    query_617923.add "InstanceIds", InstanceIds
  add(query_617923, "Version", newJString(Version))
  result = call_617922.call(nil, query_617923, nil, nil, nil)

var getEnterStandby* = Call_GetEnterStandby_617906(name: "getEnterStandby",
    meth: HttpMethod.HttpGet, host: "autoscaling.amazonaws.com",
    route: "/#Action=EnterStandby", validator: validate_GetEnterStandby_617907,
    base: "/", url: url_GetEnterStandby_617908, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostExecutePolicy_617963 = ref object of OpenApiRestCall_615866
proc url_PostExecutePolicy_617965(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostExecutePolicy_617964(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Executes the specified policy.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617966 = query.getOrDefault("Action")
  valid_617966 = validateParameter(valid_617966, JString, required = true,
                                 default = newJString("ExecutePolicy"))
  if valid_617966 != nil:
    section.add "Action", valid_617966
  var valid_617967 = query.getOrDefault("Version")
  valid_617967 = validateParameter(valid_617967, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617967 != nil:
    section.add "Version", valid_617967
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617968 = header.getOrDefault("X-Amz-Date")
  valid_617968 = validateParameter(valid_617968, JString, required = false,
                                 default = nil)
  if valid_617968 != nil:
    section.add "X-Amz-Date", valid_617968
  var valid_617969 = header.getOrDefault("X-Amz-Security-Token")
  valid_617969 = validateParameter(valid_617969, JString, required = false,
                                 default = nil)
  if valid_617969 != nil:
    section.add "X-Amz-Security-Token", valid_617969
  var valid_617970 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617970 = validateParameter(valid_617970, JString, required = false,
                                 default = nil)
  if valid_617970 != nil:
    section.add "X-Amz-Content-Sha256", valid_617970
  var valid_617971 = header.getOrDefault("X-Amz-Algorithm")
  valid_617971 = validateParameter(valid_617971, JString, required = false,
                                 default = nil)
  if valid_617971 != nil:
    section.add "X-Amz-Algorithm", valid_617971
  var valid_617972 = header.getOrDefault("X-Amz-Signature")
  valid_617972 = validateParameter(valid_617972, JString, required = false,
                                 default = nil)
  if valid_617972 != nil:
    section.add "X-Amz-Signature", valid_617972
  var valid_617973 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617973 = validateParameter(valid_617973, JString, required = false,
                                 default = nil)
  if valid_617973 != nil:
    section.add "X-Amz-SignedHeaders", valid_617973
  var valid_617974 = header.getOrDefault("X-Amz-Credential")
  valid_617974 = validateParameter(valid_617974, JString, required = false,
                                 default = nil)
  if valid_617974 != nil:
    section.add "X-Amz-Credential", valid_617974
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   PolicyName: JString (required)
  ##             : The name or ARN of the policy.
  ##   MetricValue: JFloat
  ##              : <p>The metric value to compare to <code>BreachThreshold</code>. This enables you to execute a policy of type <code>StepScaling</code> and determine which step adjustment to use. For example, if the breach threshold is 50 and you want to use a step adjustment with a lower bound of 0 and an upper bound of 10, you can set the metric value to 59.</p> <p>If you specify a metric value that doesn't correspond to a step adjustment for the policy, the call returns an error.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   HonorCooldown: JBool
  ##                : <p>Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before executing the policy.</p> <p>This parameter is not supported if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   BreachThreshold: JFloat
  ##                  : <p>The breach threshold for the alarm.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  section = newJObject()
  var valid_617975 = formData.getOrDefault("AutoScalingGroupName")
  valid_617975 = validateParameter(valid_617975, JString, required = false,
                                 default = nil)
  if valid_617975 != nil:
    section.add "AutoScalingGroupName", valid_617975
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_617976 = formData.getOrDefault("PolicyName")
  valid_617976 = validateParameter(valid_617976, JString, required = true,
                                 default = nil)
  if valid_617976 != nil:
    section.add "PolicyName", valid_617976
  var valid_617977 = formData.getOrDefault("MetricValue")
  valid_617977 = validateParameter(valid_617977, JFloat, required = false,
                                 default = nil)
  if valid_617977 != nil:
    section.add "MetricValue", valid_617977
  var valid_617978 = formData.getOrDefault("HonorCooldown")
  valid_617978 = validateParameter(valid_617978, JBool, required = false, default = nil)
  if valid_617978 != nil:
    section.add "HonorCooldown", valid_617978
  var valid_617979 = formData.getOrDefault("BreachThreshold")
  valid_617979 = validateParameter(valid_617979, JFloat, required = false,
                                 default = nil)
  if valid_617979 != nil:
    section.add "BreachThreshold", valid_617979
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617980: Call_PostExecutePolicy_617963; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Executes the specified policy.
  ## 
  let valid = call_617980.validator(path, query, header, formData, body)
  let scheme = call_617980.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617980.url(scheme.get, call_617980.host, call_617980.base,
                         call_617980.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617980, url, valid)

proc call*(call_617981: Call_PostExecutePolicy_617963; PolicyName: string;
          AutoScalingGroupName: string = ""; MetricValue: float = 0.0;
          HonorCooldown: bool = false; BreachThreshold: float = 0.0;
          Action: string = "ExecutePolicy"; Version: string = "2011-01-01"): Recallable =
  ## postExecutePolicy
  ## Executes the specified policy.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   PolicyName: string (required)
  ##             : The name or ARN of the policy.
  ##   MetricValue: float
  ##              : <p>The metric value to compare to <code>BreachThreshold</code>. This enables you to execute a policy of type <code>StepScaling</code> and determine which step adjustment to use. For example, if the breach threshold is 50 and you want to use a step adjustment with a lower bound of 0 and an upper bound of 10, you can set the metric value to 59.</p> <p>If you specify a metric value that doesn't correspond to a step adjustment for the policy, the call returns an error.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   HonorCooldown: bool
  ##                : <p>Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before executing the policy.</p> <p>This parameter is not supported if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   BreachThreshold: float
  ##                  : <p>The breach threshold for the alarm.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617982 = newJObject()
  var formData_617983 = newJObject()
  add(formData_617983, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_617983, "PolicyName", newJString(PolicyName))
  add(formData_617983, "MetricValue", newJFloat(MetricValue))
  add(formData_617983, "HonorCooldown", newJBool(HonorCooldown))
  add(formData_617983, "BreachThreshold", newJFloat(BreachThreshold))
  add(query_617982, "Action", newJString(Action))
  add(query_617982, "Version", newJString(Version))
  result = call_617981.call(nil, query_617982, nil, formData_617983, nil)

var postExecutePolicy* = Call_PostExecutePolicy_617963(name: "postExecutePolicy",
    meth: HttpMethod.HttpPost, host: "autoscaling.amazonaws.com",
    route: "/#Action=ExecutePolicy", validator: validate_PostExecutePolicy_617964,
    base: "/", url: url_PostExecutePolicy_617965,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetExecutePolicy_617943 = ref object of OpenApiRestCall_615866
proc url_GetExecutePolicy_617945(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetExecutePolicy_617944(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Executes the specified policy.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   BreachThreshold: JFloat
  ##                  : <p>The breach threshold for the alarm.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   Action: JString (required)
  ##   HonorCooldown: JBool
  ##                : <p>Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before executing the policy.</p> <p>This parameter is not supported if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MetricValue: JFloat
  ##              : <p>The metric value to compare to <code>BreachThreshold</code>. This enables you to execute a policy of type <code>StepScaling</code> and determine which step adjustment to use. For example, if the breach threshold is 50 and you want to use a step adjustment with a lower bound of 0 and an upper bound of 10, you can set the metric value to 59.</p> <p>If you specify a metric value that doesn't correspond to a step adjustment for the policy, the call returns an error.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : The name or ARN of the policy.
  section = newJObject()
  var valid_617946 = query.getOrDefault("AutoScalingGroupName")
  valid_617946 = validateParameter(valid_617946, JString, required = false,
                                 default = nil)
  if valid_617946 != nil:
    section.add "AutoScalingGroupName", valid_617946
  var valid_617947 = query.getOrDefault("BreachThreshold")
  valid_617947 = validateParameter(valid_617947, JFloat, required = false,
                                 default = nil)
  if valid_617947 != nil:
    section.add "BreachThreshold", valid_617947
  var valid_617948 = query.getOrDefault("Action")
  valid_617948 = validateParameter(valid_617948, JString, required = true,
                                 default = newJString("ExecutePolicy"))
  if valid_617948 != nil:
    section.add "Action", valid_617948
  var valid_617949 = query.getOrDefault("HonorCooldown")
  valid_617949 = validateParameter(valid_617949, JBool, required = false, default = nil)
  if valid_617949 != nil:
    section.add "HonorCooldown", valid_617949
  var valid_617950 = query.getOrDefault("MetricValue")
  valid_617950 = validateParameter(valid_617950, JFloat, required = false,
                                 default = nil)
  if valid_617950 != nil:
    section.add "MetricValue", valid_617950
  var valid_617951 = query.getOrDefault("Version")
  valid_617951 = validateParameter(valid_617951, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617951 != nil:
    section.add "Version", valid_617951
  var valid_617952 = query.getOrDefault("PolicyName")
  valid_617952 = validateParameter(valid_617952, JString, required = true,
                                 default = nil)
  if valid_617952 != nil:
    section.add "PolicyName", valid_617952
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617953 = header.getOrDefault("X-Amz-Date")
  valid_617953 = validateParameter(valid_617953, JString, required = false,
                                 default = nil)
  if valid_617953 != nil:
    section.add "X-Amz-Date", valid_617953
  var valid_617954 = header.getOrDefault("X-Amz-Security-Token")
  valid_617954 = validateParameter(valid_617954, JString, required = false,
                                 default = nil)
  if valid_617954 != nil:
    section.add "X-Amz-Security-Token", valid_617954
  var valid_617955 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617955 = validateParameter(valid_617955, JString, required = false,
                                 default = nil)
  if valid_617955 != nil:
    section.add "X-Amz-Content-Sha256", valid_617955
  var valid_617956 = header.getOrDefault("X-Amz-Algorithm")
  valid_617956 = validateParameter(valid_617956, JString, required = false,
                                 default = nil)
  if valid_617956 != nil:
    section.add "X-Amz-Algorithm", valid_617956
  var valid_617957 = header.getOrDefault("X-Amz-Signature")
  valid_617957 = validateParameter(valid_617957, JString, required = false,
                                 default = nil)
  if valid_617957 != nil:
    section.add "X-Amz-Signature", valid_617957
  var valid_617958 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617958 = validateParameter(valid_617958, JString, required = false,
                                 default = nil)
  if valid_617958 != nil:
    section.add "X-Amz-SignedHeaders", valid_617958
  var valid_617959 = header.getOrDefault("X-Amz-Credential")
  valid_617959 = validateParameter(valid_617959, JString, required = false,
                                 default = nil)
  if valid_617959 != nil:
    section.add "X-Amz-Credential", valid_617959
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617960: Call_GetExecutePolicy_617943; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Executes the specified policy.
  ## 
  let valid = call_617960.validator(path, query, header, formData, body)
  let scheme = call_617960.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617960.url(scheme.get, call_617960.host, call_617960.base,
                         call_617960.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617960, url, valid)

proc call*(call_617961: Call_GetExecutePolicy_617943; PolicyName: string;
          AutoScalingGroupName: string = ""; BreachThreshold: float = 0.0;
          Action: string = "ExecutePolicy"; HonorCooldown: bool = false;
          MetricValue: float = 0.0; Version: string = "2011-01-01"): Recallable =
  ## getExecutePolicy
  ## Executes the specified policy.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   BreachThreshold: float
  ##                  : <p>The breach threshold for the alarm.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   Action: string (required)
  ##   HonorCooldown: bool
  ##                : <p>Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before executing the policy.</p> <p>This parameter is not supported if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MetricValue: float
  ##              : <p>The metric value to compare to <code>BreachThreshold</code>. This enables you to execute a policy of type <code>StepScaling</code> and determine which step adjustment to use. For example, if the breach threshold is 50 and you want to use a step adjustment with a lower bound of 0 and an upper bound of 10, you can set the metric value to 59.</p> <p>If you specify a metric value that doesn't correspond to a step adjustment for the policy, the call returns an error.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : The name or ARN of the policy.
  var query_617962 = newJObject()
  add(query_617962, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_617962, "BreachThreshold", newJFloat(BreachThreshold))
  add(query_617962, "Action", newJString(Action))
  add(query_617962, "HonorCooldown", newJBool(HonorCooldown))
  add(query_617962, "MetricValue", newJFloat(MetricValue))
  add(query_617962, "Version", newJString(Version))
  add(query_617962, "PolicyName", newJString(PolicyName))
  result = call_617961.call(nil, query_617962, nil, nil, nil)

var getExecutePolicy* = Call_GetExecutePolicy_617943(name: "getExecutePolicy",
    meth: HttpMethod.HttpGet, host: "autoscaling.amazonaws.com",
    route: "/#Action=ExecutePolicy", validator: validate_GetExecutePolicy_617944,
    base: "/", url: url_GetExecutePolicy_617945,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostExitStandby_618001 = ref object of OpenApiRestCall_615866
proc url_PostExitStandby_618003(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostExitStandby_618002(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Moves the specified instances out of the standby state.</p> <p>After you put the instances back in service, the desired capacity is incremented.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_618004 = query.getOrDefault("Action")
  valid_618004 = validateParameter(valid_618004, JString, required = true,
                                 default = newJString("ExitStandby"))
  if valid_618004 != nil:
    section.add "Action", valid_618004
  var valid_618005 = query.getOrDefault("Version")
  valid_618005 = validateParameter(valid_618005, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_618005 != nil:
    section.add "Version", valid_618005
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_618006 = header.getOrDefault("X-Amz-Date")
  valid_618006 = validateParameter(valid_618006, JString, required = false,
                                 default = nil)
  if valid_618006 != nil:
    section.add "X-Amz-Date", valid_618006
  var valid_618007 = header.getOrDefault("X-Amz-Security-Token")
  valid_618007 = validateParameter(valid_618007, JString, required = false,
                                 default = nil)
  if valid_618007 != nil:
    section.add "X-Amz-Security-Token", valid_618007
  var valid_618008 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618008 = validateParameter(valid_618008, JString, required = false,
                                 default = nil)
  if valid_618008 != nil:
    section.add "X-Amz-Content-Sha256", valid_618008
  var valid_618009 = header.getOrDefault("X-Amz-Algorithm")
  valid_618009 = validateParameter(valid_618009, JString, required = false,
                                 default = nil)
  if valid_618009 != nil:
    section.add "X-Amz-Algorithm", valid_618009
  var valid_618010 = header.getOrDefault("X-Amz-Signature")
  valid_618010 = validateParameter(valid_618010, JString, required = false,
                                 default = nil)
  if valid_618010 != nil:
    section.add "X-Amz-Signature", valid_618010
  var valid_618011 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618011 = validateParameter(valid_618011, JString, required = false,
                                 default = nil)
  if valid_618011 != nil:
    section.add "X-Amz-SignedHeaders", valid_618011
  var valid_618012 = header.getOrDefault("X-Amz-Credential")
  valid_618012 = validateParameter(valid_618012, JString, required = false,
                                 default = nil)
  if valid_618012 != nil:
    section.add "X-Amz-Credential", valid_618012
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_618013 = formData.getOrDefault("AutoScalingGroupName")
  valid_618013 = validateParameter(valid_618013, JString, required = true,
                                 default = nil)
  if valid_618013 != nil:
    section.add "AutoScalingGroupName", valid_618013
  var valid_618014 = formData.getOrDefault("InstanceIds")
  valid_618014 = validateParameter(valid_618014, JArray, required = false,
                                 default = nil)
  if valid_618014 != nil:
    section.add "InstanceIds", valid_618014
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618015: Call_PostExitStandby_618001; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Moves the specified instances out of the standby state.</p> <p>After you put the instances back in service, the desired capacity is incremented.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_618015.validator(path, query, header, formData, body)
  let scheme = call_618015.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618015.url(scheme.get, call_618015.host, call_618015.base,
                         call_618015.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618015, url, valid)

proc call*(call_618016: Call_PostExitStandby_618001; AutoScalingGroupName: string;
          InstanceIds: JsonNode = nil; Action: string = "ExitStandby";
          Version: string = "2011-01-01"): Recallable =
  ## postExitStandby
  ## <p>Moves the specified instances out of the standby state.</p> <p>After you put the instances back in service, the desired capacity is incremented.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_618017 = newJObject()
  var formData_618018 = newJObject()
  add(formData_618018, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if InstanceIds != nil:
    formData_618018.add "InstanceIds", InstanceIds
  add(query_618017, "Action", newJString(Action))
  add(query_618017, "Version", newJString(Version))
  result = call_618016.call(nil, query_618017, nil, formData_618018, nil)

var postExitStandby* = Call_PostExitStandby_618001(name: "postExitStandby",
    meth: HttpMethod.HttpPost, host: "autoscaling.amazonaws.com",
    route: "/#Action=ExitStandby", validator: validate_PostExitStandby_618002,
    base: "/", url: url_PostExitStandby_618003, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetExitStandby_617984 = ref object of OpenApiRestCall_615866
proc url_GetExitStandby_617986(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetExitStandby_617985(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Moves the specified instances out of the standby state.</p> <p>After you put the instances back in service, the desired capacity is incremented.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_617987 = query.getOrDefault("AutoScalingGroupName")
  valid_617987 = validateParameter(valid_617987, JString, required = true,
                                 default = nil)
  if valid_617987 != nil:
    section.add "AutoScalingGroupName", valid_617987
  var valid_617988 = query.getOrDefault("Action")
  valid_617988 = validateParameter(valid_617988, JString, required = true,
                                 default = newJString("ExitStandby"))
  if valid_617988 != nil:
    section.add "Action", valid_617988
  var valid_617989 = query.getOrDefault("InstanceIds")
  valid_617989 = validateParameter(valid_617989, JArray, required = false,
                                 default = nil)
  if valid_617989 != nil:
    section.add "InstanceIds", valid_617989
  var valid_617990 = query.getOrDefault("Version")
  valid_617990 = validateParameter(valid_617990, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_617990 != nil:
    section.add "Version", valid_617990
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_617991 = header.getOrDefault("X-Amz-Date")
  valid_617991 = validateParameter(valid_617991, JString, required = false,
                                 default = nil)
  if valid_617991 != nil:
    section.add "X-Amz-Date", valid_617991
  var valid_617992 = header.getOrDefault("X-Amz-Security-Token")
  valid_617992 = validateParameter(valid_617992, JString, required = false,
                                 default = nil)
  if valid_617992 != nil:
    section.add "X-Amz-Security-Token", valid_617992
  var valid_617993 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617993 = validateParameter(valid_617993, JString, required = false,
                                 default = nil)
  if valid_617993 != nil:
    section.add "X-Amz-Content-Sha256", valid_617993
  var valid_617994 = header.getOrDefault("X-Amz-Algorithm")
  valid_617994 = validateParameter(valid_617994, JString, required = false,
                                 default = nil)
  if valid_617994 != nil:
    section.add "X-Amz-Algorithm", valid_617994
  var valid_617995 = header.getOrDefault("X-Amz-Signature")
  valid_617995 = validateParameter(valid_617995, JString, required = false,
                                 default = nil)
  if valid_617995 != nil:
    section.add "X-Amz-Signature", valid_617995
  var valid_617996 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617996 = validateParameter(valid_617996, JString, required = false,
                                 default = nil)
  if valid_617996 != nil:
    section.add "X-Amz-SignedHeaders", valid_617996
  var valid_617997 = header.getOrDefault("X-Amz-Credential")
  valid_617997 = validateParameter(valid_617997, JString, required = false,
                                 default = nil)
  if valid_617997 != nil:
    section.add "X-Amz-Credential", valid_617997
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617998: Call_GetExitStandby_617984; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Moves the specified instances out of the standby state.</p> <p>After you put the instances back in service, the desired capacity is incremented.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_617998.validator(path, query, header, formData, body)
  let scheme = call_617998.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617998.url(scheme.get, call_617998.host, call_617998.base,
                         call_617998.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617998, url, valid)

proc call*(call_617999: Call_GetExitStandby_617984; AutoScalingGroupName: string;
          Action: string = "ExitStandby"; InstanceIds: JsonNode = nil;
          Version: string = "2011-01-01"): Recallable =
  ## getExitStandby
  ## <p>Moves the specified instances out of the standby state.</p> <p>After you put the instances back in service, the desired capacity is incremented.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Version: string (required)
  var query_618000 = newJObject()
  add(query_618000, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_618000, "Action", newJString(Action))
  if InstanceIds != nil:
    query_618000.add "InstanceIds", InstanceIds
  add(query_618000, "Version", newJString(Version))
  result = call_617999.call(nil, query_618000, nil, nil, nil)

var getExitStandby* = Call_GetExitStandby_617984(name: "getExitStandby",
    meth: HttpMethod.HttpGet, host: "autoscaling.amazonaws.com",
    route: "/#Action=ExitStandby", validator: validate_GetExitStandby_617985,
    base: "/", url: url_GetExitStandby_617986, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutLifecycleHook_618042 = ref object of OpenApiRestCall_615866
proc url_PostPutLifecycleHook_618044(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPutLifecycleHook_618043(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates or updates a lifecycle hook for the specified Auto Scaling group.</p> <p>A lifecycle hook tells Amazon EC2 Auto Scaling to perform an action on an instance when the instance launches (before it is put into service) or as the instance terminates (before it is fully terminated).</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p> <b>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</b> </p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state using <a>RecordLifecycleActionHeartbeat</a>.</p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action using <a>CompleteLifecycleAction</a>.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.</p> <p>You can view the lifecycle hooks for an Auto Scaling group using <a>DescribeLifecycleHooks</a>. If you are no longer using a lifecycle hook, you can delete it using <a>DeleteLifecycleHook</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_618045 = query.getOrDefault("Action")
  valid_618045 = validateParameter(valid_618045, JString, required = true,
                                 default = newJString("PutLifecycleHook"))
  if valid_618045 != nil:
    section.add "Action", valid_618045
  var valid_618046 = query.getOrDefault("Version")
  valid_618046 = validateParameter(valid_618046, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_618046 != nil:
    section.add "Version", valid_618046
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_618047 = header.getOrDefault("X-Amz-Date")
  valid_618047 = validateParameter(valid_618047, JString, required = false,
                                 default = nil)
  if valid_618047 != nil:
    section.add "X-Amz-Date", valid_618047
  var valid_618048 = header.getOrDefault("X-Amz-Security-Token")
  valid_618048 = validateParameter(valid_618048, JString, required = false,
                                 default = nil)
  if valid_618048 != nil:
    section.add "X-Amz-Security-Token", valid_618048
  var valid_618049 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618049 = validateParameter(valid_618049, JString, required = false,
                                 default = nil)
  if valid_618049 != nil:
    section.add "X-Amz-Content-Sha256", valid_618049
  var valid_618050 = header.getOrDefault("X-Amz-Algorithm")
  valid_618050 = validateParameter(valid_618050, JString, required = false,
                                 default = nil)
  if valid_618050 != nil:
    section.add "X-Amz-Algorithm", valid_618050
  var valid_618051 = header.getOrDefault("X-Amz-Signature")
  valid_618051 = validateParameter(valid_618051, JString, required = false,
                                 default = nil)
  if valid_618051 != nil:
    section.add "X-Amz-Signature", valid_618051
  var valid_618052 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618052 = validateParameter(valid_618052, JString, required = false,
                                 default = nil)
  if valid_618052 != nil:
    section.add "X-Amz-SignedHeaders", valid_618052
  var valid_618053 = header.getOrDefault("X-Amz-Credential")
  valid_618053 = validateParameter(valid_618053, JString, required = false,
                                 default = nil)
  if valid_618053 != nil:
    section.add "X-Amz-Credential", valid_618053
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleTransition: JString
  ##                      : <p>The instance state to which you want to attach the lifecycle hook. The valid values are:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  ##   DefaultResult: JString
  ##                : Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>. The default value is <code>ABANDON</code>.
  ##   NotificationTargetARN: JString
  ##                        : <p>The ARN of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in the transition state for the lifecycle hook. This target can be either an SQS queue or an SNS topic.</p> <p>If you specify an empty string, this overrides the current ARN.</p> <p>This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key-value pair format when sending notifications to an Amazon SNS topic.</p> <p>When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test messages contain the following additional key-value pair: <code>"Event": "autoscaling:TEST_NOTIFICATION"</code>.</p>
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   NotificationMetadata: JString
  ##                       : Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.
  ##   HeartbeatTimeout: JInt
  ##                   : <p>The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from <code>30</code> to <code>7200</code> seconds. The default value is <code>3600</code> seconds (1 hour).</p> <p>If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action that you specified in the <code>DefaultResult</code> parameter. You can prevent the lifecycle hook from timing out by calling <a>RecordLifecycleActionHeartbeat</a>.</p>
  ##   RoleARN: JString
  ##          : <p>The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target, for example, an Amazon SNS topic or an Amazon SQS queue.</p> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_618054 = formData.getOrDefault("AutoScalingGroupName")
  valid_618054 = validateParameter(valid_618054, JString, required = true,
                                 default = nil)
  if valid_618054 != nil:
    section.add "AutoScalingGroupName", valid_618054
  var valid_618055 = formData.getOrDefault("LifecycleTransition")
  valid_618055 = validateParameter(valid_618055, JString, required = false,
                                 default = nil)
  if valid_618055 != nil:
    section.add "LifecycleTransition", valid_618055
  var valid_618056 = formData.getOrDefault("DefaultResult")
  valid_618056 = validateParameter(valid_618056, JString, required = false,
                                 default = nil)
  if valid_618056 != nil:
    section.add "DefaultResult", valid_618056
  var valid_618057 = formData.getOrDefault("NotificationTargetARN")
  valid_618057 = validateParameter(valid_618057, JString, required = false,
                                 default = nil)
  if valid_618057 != nil:
    section.add "NotificationTargetARN", valid_618057
  var valid_618058 = formData.getOrDefault("LifecycleHookName")
  valid_618058 = validateParameter(valid_618058, JString, required = true,
                                 default = nil)
  if valid_618058 != nil:
    section.add "LifecycleHookName", valid_618058
  var valid_618059 = formData.getOrDefault("NotificationMetadata")
  valid_618059 = validateParameter(valid_618059, JString, required = false,
                                 default = nil)
  if valid_618059 != nil:
    section.add "NotificationMetadata", valid_618059
  var valid_618060 = formData.getOrDefault("HeartbeatTimeout")
  valid_618060 = validateParameter(valid_618060, JInt, required = false, default = nil)
  if valid_618060 != nil:
    section.add "HeartbeatTimeout", valid_618060
  var valid_618061 = formData.getOrDefault("RoleARN")
  valid_618061 = validateParameter(valid_618061, JString, required = false,
                                 default = nil)
  if valid_618061 != nil:
    section.add "RoleARN", valid_618061
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618062: Call_PostPutLifecycleHook_618042; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates or updates a lifecycle hook for the specified Auto Scaling group.</p> <p>A lifecycle hook tells Amazon EC2 Auto Scaling to perform an action on an instance when the instance launches (before it is put into service) or as the instance terminates (before it is fully terminated).</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p> <b>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</b> </p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state using <a>RecordLifecycleActionHeartbeat</a>.</p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action using <a>CompleteLifecycleAction</a>.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.</p> <p>You can view the lifecycle hooks for an Auto Scaling group using <a>DescribeLifecycleHooks</a>. If you are no longer using a lifecycle hook, you can delete it using <a>DeleteLifecycleHook</a>.</p>
  ## 
  let valid = call_618062.validator(path, query, header, formData, body)
  let scheme = call_618062.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618062.url(scheme.get, call_618062.host, call_618062.base,
                         call_618062.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618062, url, valid)

proc call*(call_618063: Call_PostPutLifecycleHook_618042;
          AutoScalingGroupName: string; LifecycleHookName: string;
          LifecycleTransition: string = ""; DefaultResult: string = "";
          Action: string = "PutLifecycleHook"; NotificationTargetARN: string = "";
          NotificationMetadata: string = ""; HeartbeatTimeout: int = 0;
          Version: string = "2011-01-01"; RoleARN: string = ""): Recallable =
  ## postPutLifecycleHook
  ## <p>Creates or updates a lifecycle hook for the specified Auto Scaling group.</p> <p>A lifecycle hook tells Amazon EC2 Auto Scaling to perform an action on an instance when the instance launches (before it is put into service) or as the instance terminates (before it is fully terminated).</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p> <b>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</b> </p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state using <a>RecordLifecycleActionHeartbeat</a>.</p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action using <a>CompleteLifecycleAction</a>.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.</p> <p>You can view the lifecycle hooks for an Auto Scaling group using <a>DescribeLifecycleHooks</a>. If you are no longer using a lifecycle hook, you can delete it using <a>DeleteLifecycleHook</a>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleTransition: string
  ##                      : <p>The instance state to which you want to attach the lifecycle hook. The valid values are:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  ##   DefaultResult: string
  ##                : Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>. The default value is <code>ABANDON</code>.
  ##   Action: string (required)
  ##   NotificationTargetARN: string
  ##                        : <p>The ARN of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in the transition state for the lifecycle hook. This target can be either an SQS queue or an SNS topic.</p> <p>If you specify an empty string, this overrides the current ARN.</p> <p>This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key-value pair format when sending notifications to an Amazon SNS topic.</p> <p>When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test messages contain the following additional key-value pair: <code>"Event": "autoscaling:TEST_NOTIFICATION"</code>.</p>
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   NotificationMetadata: string
  ##                       : Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.
  ##   HeartbeatTimeout: int
  ##                   : <p>The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from <code>30</code> to <code>7200</code> seconds. The default value is <code>3600</code> seconds (1 hour).</p> <p>If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action that you specified in the <code>DefaultResult</code> parameter. You can prevent the lifecycle hook from timing out by calling <a>RecordLifecycleActionHeartbeat</a>.</p>
  ##   Version: string (required)
  ##   RoleARN: string
  ##          : <p>The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target, for example, an Amazon SNS topic or an Amazon SQS queue.</p> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  var query_618064 = newJObject()
  var formData_618065 = newJObject()
  add(formData_618065, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_618065, "LifecycleTransition", newJString(LifecycleTransition))
  add(formData_618065, "DefaultResult", newJString(DefaultResult))
  add(query_618064, "Action", newJString(Action))
  add(formData_618065, "NotificationTargetARN", newJString(NotificationTargetARN))
  add(formData_618065, "LifecycleHookName", newJString(LifecycleHookName))
  add(formData_618065, "NotificationMetadata", newJString(NotificationMetadata))
  add(formData_618065, "HeartbeatTimeout", newJInt(HeartbeatTimeout))
  add(query_618064, "Version", newJString(Version))
  add(formData_618065, "RoleARN", newJString(RoleARN))
  result = call_618063.call(nil, query_618064, nil, formData_618065, nil)

var postPutLifecycleHook* = Call_PostPutLifecycleHook_618042(
    name: "postPutLifecycleHook", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=PutLifecycleHook",
    validator: validate_PostPutLifecycleHook_618043, base: "/",
    url: url_PostPutLifecycleHook_618044, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutLifecycleHook_618019 = ref object of OpenApiRestCall_615866
proc url_GetPutLifecycleHook_618021(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPutLifecycleHook_618020(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Creates or updates a lifecycle hook for the specified Auto Scaling group.</p> <p>A lifecycle hook tells Amazon EC2 Auto Scaling to perform an action on an instance when the instance launches (before it is put into service) or as the instance terminates (before it is fully terminated).</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p> <b>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</b> </p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state using <a>RecordLifecycleActionHeartbeat</a>.</p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action using <a>CompleteLifecycleAction</a>.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.</p> <p>You can view the lifecycle hooks for an Auto Scaling group using <a>DescribeLifecycleHooks</a>. If you are no longer using a lifecycle hook, you can delete it using <a>DeleteLifecycleHook</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   NotificationTargetARN: JString
  ##                        : <p>The ARN of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in the transition state for the lifecycle hook. This target can be either an SQS queue or an SNS topic.</p> <p>If you specify an empty string, this overrides the current ARN.</p> <p>This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key-value pair format when sending notifications to an Amazon SNS topic.</p> <p>When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test messages contain the following additional key-value pair: <code>"Event": "autoscaling:TEST_NOTIFICATION"</code>.</p>
  ##   DefaultResult: JString
  ##                : Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>. The default value is <code>ABANDON</code>.
  ##   Action: JString (required)
  ##   RoleARN: JString
  ##          : <p>The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target, for example, an Amazon SNS topic or an Amazon SQS queue.</p> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  ##   LifecycleTransition: JString
  ##                      : <p>The instance state to which you want to attach the lifecycle hook. The valid values are:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  ##   HeartbeatTimeout: JInt
  ##                   : <p>The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from <code>30</code> to <code>7200</code> seconds. The default value is <code>3600</code> seconds (1 hour).</p> <p>If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action that you specified in the <code>DefaultResult</code> parameter. You can prevent the lifecycle hook from timing out by calling <a>RecordLifecycleActionHeartbeat</a>.</p>
  ##   NotificationMetadata: JString
  ##                       : Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_618022 = query.getOrDefault("AutoScalingGroupName")
  valid_618022 = validateParameter(valid_618022, JString, required = true,
                                 default = nil)
  if valid_618022 != nil:
    section.add "AutoScalingGroupName", valid_618022
  var valid_618023 = query.getOrDefault("NotificationTargetARN")
  valid_618023 = validateParameter(valid_618023, JString, required = false,
                                 default = nil)
  if valid_618023 != nil:
    section.add "NotificationTargetARN", valid_618023
  var valid_618024 = query.getOrDefault("DefaultResult")
  valid_618024 = validateParameter(valid_618024, JString, required = false,
                                 default = nil)
  if valid_618024 != nil:
    section.add "DefaultResult", valid_618024
  var valid_618025 = query.getOrDefault("Action")
  valid_618025 = validateParameter(valid_618025, JString, required = true,
                                 default = newJString("PutLifecycleHook"))
  if valid_618025 != nil:
    section.add "Action", valid_618025
  var valid_618026 = query.getOrDefault("RoleARN")
  valid_618026 = validateParameter(valid_618026, JString, required = false,
                                 default = nil)
  if valid_618026 != nil:
    section.add "RoleARN", valid_618026
  var valid_618027 = query.getOrDefault("LifecycleTransition")
  valid_618027 = validateParameter(valid_618027, JString, required = false,
                                 default = nil)
  if valid_618027 != nil:
    section.add "LifecycleTransition", valid_618027
  var valid_618028 = query.getOrDefault("HeartbeatTimeout")
  valid_618028 = validateParameter(valid_618028, JInt, required = false, default = nil)
  if valid_618028 != nil:
    section.add "HeartbeatTimeout", valid_618028
  var valid_618029 = query.getOrDefault("NotificationMetadata")
  valid_618029 = validateParameter(valid_618029, JString, required = false,
                                 default = nil)
  if valid_618029 != nil:
    section.add "NotificationMetadata", valid_618029
  var valid_618030 = query.getOrDefault("LifecycleHookName")
  valid_618030 = validateParameter(valid_618030, JString, required = true,
                                 default = nil)
  if valid_618030 != nil:
    section.add "LifecycleHookName", valid_618030
  var valid_618031 = query.getOrDefault("Version")
  valid_618031 = validateParameter(valid_618031, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_618031 != nil:
    section.add "Version", valid_618031
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_618032 = header.getOrDefault("X-Amz-Date")
  valid_618032 = validateParameter(valid_618032, JString, required = false,
                                 default = nil)
  if valid_618032 != nil:
    section.add "X-Amz-Date", valid_618032
  var valid_618033 = header.getOrDefault("X-Amz-Security-Token")
  valid_618033 = validateParameter(valid_618033, JString, required = false,
                                 default = nil)
  if valid_618033 != nil:
    section.add "X-Amz-Security-Token", valid_618033
  var valid_618034 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618034 = validateParameter(valid_618034, JString, required = false,
                                 default = nil)
  if valid_618034 != nil:
    section.add "X-Amz-Content-Sha256", valid_618034
  var valid_618035 = header.getOrDefault("X-Amz-Algorithm")
  valid_618035 = validateParameter(valid_618035, JString, required = false,
                                 default = nil)
  if valid_618035 != nil:
    section.add "X-Amz-Algorithm", valid_618035
  var valid_618036 = header.getOrDefault("X-Amz-Signature")
  valid_618036 = validateParameter(valid_618036, JString, required = false,
                                 default = nil)
  if valid_618036 != nil:
    section.add "X-Amz-Signature", valid_618036
  var valid_618037 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618037 = validateParameter(valid_618037, JString, required = false,
                                 default = nil)
  if valid_618037 != nil:
    section.add "X-Amz-SignedHeaders", valid_618037
  var valid_618038 = header.getOrDefault("X-Amz-Credential")
  valid_618038 = validateParameter(valid_618038, JString, required = false,
                                 default = nil)
  if valid_618038 != nil:
    section.add "X-Amz-Credential", valid_618038
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618039: Call_GetPutLifecycleHook_618019; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates or updates a lifecycle hook for the specified Auto Scaling group.</p> <p>A lifecycle hook tells Amazon EC2 Auto Scaling to perform an action on an instance when the instance launches (before it is put into service) or as the instance terminates (before it is fully terminated).</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p> <b>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</b> </p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state using <a>RecordLifecycleActionHeartbeat</a>.</p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action using <a>CompleteLifecycleAction</a>.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.</p> <p>You can view the lifecycle hooks for an Auto Scaling group using <a>DescribeLifecycleHooks</a>. If you are no longer using a lifecycle hook, you can delete it using <a>DeleteLifecycleHook</a>.</p>
  ## 
  let valid = call_618039.validator(path, query, header, formData, body)
  let scheme = call_618039.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618039.url(scheme.get, call_618039.host, call_618039.base,
                         call_618039.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618039, url, valid)

proc call*(call_618040: Call_GetPutLifecycleHook_618019;
          AutoScalingGroupName: string; LifecycleHookName: string;
          NotificationTargetARN: string = ""; DefaultResult: string = "";
          Action: string = "PutLifecycleHook"; RoleARN: string = "";
          LifecycleTransition: string = ""; HeartbeatTimeout: int = 0;
          NotificationMetadata: string = ""; Version: string = "2011-01-01"): Recallable =
  ## getPutLifecycleHook
  ## <p>Creates or updates a lifecycle hook for the specified Auto Scaling group.</p> <p>A lifecycle hook tells Amazon EC2 Auto Scaling to perform an action on an instance when the instance launches (before it is put into service) or as the instance terminates (before it is fully terminated).</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p> <b>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</b> </p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state using <a>RecordLifecycleActionHeartbeat</a>.</p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action using <a>CompleteLifecycleAction</a>.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.</p> <p>You can view the lifecycle hooks for an Auto Scaling group using <a>DescribeLifecycleHooks</a>. If you are no longer using a lifecycle hook, you can delete it using <a>DeleteLifecycleHook</a>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   NotificationTargetARN: string
  ##                        : <p>The ARN of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in the transition state for the lifecycle hook. This target can be either an SQS queue or an SNS topic.</p> <p>If you specify an empty string, this overrides the current ARN.</p> <p>This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key-value pair format when sending notifications to an Amazon SNS topic.</p> <p>When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test messages contain the following additional key-value pair: <code>"Event": "autoscaling:TEST_NOTIFICATION"</code>.</p>
  ##   DefaultResult: string
  ##                : Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>. The default value is <code>ABANDON</code>.
  ##   Action: string (required)
  ##   RoleARN: string
  ##          : <p>The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target, for example, an Amazon SNS topic or an Amazon SQS queue.</p> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  ##   LifecycleTransition: string
  ##                      : <p>The instance state to which you want to attach the lifecycle hook. The valid values are:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  ##   HeartbeatTimeout: int
  ##                   : <p>The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from <code>30</code> to <code>7200</code> seconds. The default value is <code>3600</code> seconds (1 hour).</p> <p>If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action that you specified in the <code>DefaultResult</code> parameter. You can prevent the lifecycle hook from timing out by calling <a>RecordLifecycleActionHeartbeat</a>.</p>
  ##   NotificationMetadata: string
  ##                       : Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   Version: string (required)
  var query_618041 = newJObject()
  add(query_618041, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_618041, "NotificationTargetARN", newJString(NotificationTargetARN))
  add(query_618041, "DefaultResult", newJString(DefaultResult))
  add(query_618041, "Action", newJString(Action))
  add(query_618041, "RoleARN", newJString(RoleARN))
  add(query_618041, "LifecycleTransition", newJString(LifecycleTransition))
  add(query_618041, "HeartbeatTimeout", newJInt(HeartbeatTimeout))
  add(query_618041, "NotificationMetadata", newJString(NotificationMetadata))
  add(query_618041, "LifecycleHookName", newJString(LifecycleHookName))
  add(query_618041, "Version", newJString(Version))
  result = call_618040.call(nil, query_618041, nil, nil, nil)

var getPutLifecycleHook* = Call_GetPutLifecycleHook_618019(
    name: "getPutLifecycleHook", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=PutLifecycleHook",
    validator: validate_GetPutLifecycleHook_618020, base: "/",
    url: url_GetPutLifecycleHook_618021, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutNotificationConfiguration_618084 = ref object of OpenApiRestCall_615866
proc url_PostPutNotificationConfiguration_618086(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPutNotificationConfiguration_618085(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.</p> <p>This configuration overwrites any existing configuration.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html">Getting Amazon SNS Notifications When Your Auto Scaling Group Scales</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_618087 = query.getOrDefault("Action")
  valid_618087 = validateParameter(valid_618087, JString, required = true, default = newJString(
      "PutNotificationConfiguration"))
  if valid_618087 != nil:
    section.add "Action", valid_618087
  var valid_618088 = query.getOrDefault("Version")
  valid_618088 = validateParameter(valid_618088, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_618088 != nil:
    section.add "Version", valid_618088
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_618089 = header.getOrDefault("X-Amz-Date")
  valid_618089 = validateParameter(valid_618089, JString, required = false,
                                 default = nil)
  if valid_618089 != nil:
    section.add "X-Amz-Date", valid_618089
  var valid_618090 = header.getOrDefault("X-Amz-Security-Token")
  valid_618090 = validateParameter(valid_618090, JString, required = false,
                                 default = nil)
  if valid_618090 != nil:
    section.add "X-Amz-Security-Token", valid_618090
  var valid_618091 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618091 = validateParameter(valid_618091, JString, required = false,
                                 default = nil)
  if valid_618091 != nil:
    section.add "X-Amz-Content-Sha256", valid_618091
  var valid_618092 = header.getOrDefault("X-Amz-Algorithm")
  valid_618092 = validateParameter(valid_618092, JString, required = false,
                                 default = nil)
  if valid_618092 != nil:
    section.add "X-Amz-Algorithm", valid_618092
  var valid_618093 = header.getOrDefault("X-Amz-Signature")
  valid_618093 = validateParameter(valid_618093, JString, required = false,
                                 default = nil)
  if valid_618093 != nil:
    section.add "X-Amz-Signature", valid_618093
  var valid_618094 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618094 = validateParameter(valid_618094, JString, required = false,
                                 default = nil)
  if valid_618094 != nil:
    section.add "X-Amz-SignedHeaders", valid_618094
  var valid_618095 = header.getOrDefault("X-Amz-Credential")
  valid_618095 = validateParameter(valid_618095, JString, required = false,
                                 default = nil)
  if valid_618095 != nil:
    section.add "X-Amz-Credential", valid_618095
  result.add "header", section
  ## parameters in `formData` object:
  ##   TopicARN: JString (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   NotificationTypes: JArray (required)
  ##                    : The type of event that causes the notification to be sent. For more information about notification types supported by Amazon EC2 Auto Scaling, see <a>DescribeAutoScalingNotificationTypes</a>.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TopicARN` field"
  var valid_618096 = formData.getOrDefault("TopicARN")
  valid_618096 = validateParameter(valid_618096, JString, required = true,
                                 default = nil)
  if valid_618096 != nil:
    section.add "TopicARN", valid_618096
  var valid_618097 = formData.getOrDefault("AutoScalingGroupName")
  valid_618097 = validateParameter(valid_618097, JString, required = true,
                                 default = nil)
  if valid_618097 != nil:
    section.add "AutoScalingGroupName", valid_618097
  var valid_618098 = formData.getOrDefault("NotificationTypes")
  valid_618098 = validateParameter(valid_618098, JArray, required = true, default = nil)
  if valid_618098 != nil:
    section.add "NotificationTypes", valid_618098
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618099: Call_PostPutNotificationConfiguration_618084;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.</p> <p>This configuration overwrites any existing configuration.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html">Getting Amazon SNS Notifications When Your Auto Scaling Group Scales</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_618099.validator(path, query, header, formData, body)
  let scheme = call_618099.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618099.url(scheme.get, call_618099.host, call_618099.base,
                         call_618099.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618099, url, valid)

proc call*(call_618100: Call_PostPutNotificationConfiguration_618084;
          TopicARN: string; AutoScalingGroupName: string;
          NotificationTypes: JsonNode;
          Action: string = "PutNotificationConfiguration";
          Version: string = "2011-01-01"): Recallable =
  ## postPutNotificationConfiguration
  ## <p>Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.</p> <p>This configuration overwrites any existing configuration.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html">Getting Amazon SNS Notifications When Your Auto Scaling Group Scales</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   TopicARN: string (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   NotificationTypes: JArray (required)
  ##                    : The type of event that causes the notification to be sent. For more information about notification types supported by Amazon EC2 Auto Scaling, see <a>DescribeAutoScalingNotificationTypes</a>.
  ##   Version: string (required)
  var query_618101 = newJObject()
  var formData_618102 = newJObject()
  add(formData_618102, "TopicARN", newJString(TopicARN))
  add(formData_618102, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_618101, "Action", newJString(Action))
  if NotificationTypes != nil:
    formData_618102.add "NotificationTypes", NotificationTypes
  add(query_618101, "Version", newJString(Version))
  result = call_618100.call(nil, query_618101, nil, formData_618102, nil)

var postPutNotificationConfiguration* = Call_PostPutNotificationConfiguration_618084(
    name: "postPutNotificationConfiguration", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=PutNotificationConfiguration",
    validator: validate_PostPutNotificationConfiguration_618085, base: "/",
    url: url_PostPutNotificationConfiguration_618086,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutNotificationConfiguration_618066 = ref object of OpenApiRestCall_615866
proc url_GetPutNotificationConfiguration_618068(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPutNotificationConfiguration_618067(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.</p> <p>This configuration overwrites any existing configuration.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html">Getting Amazon SNS Notifications When Your Auto Scaling Group Scales</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   NotificationTypes: JArray (required)
  ##                    : The type of event that causes the notification to be sent. For more information about notification types supported by Amazon EC2 Auto Scaling, see <a>DescribeAutoScalingNotificationTypes</a>.
  ##   TopicARN: JString (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_618069 = query.getOrDefault("AutoScalingGroupName")
  valid_618069 = validateParameter(valid_618069, JString, required = true,
                                 default = nil)
  if valid_618069 != nil:
    section.add "AutoScalingGroupName", valid_618069
  var valid_618070 = query.getOrDefault("Action")
  valid_618070 = validateParameter(valid_618070, JString, required = true, default = newJString(
      "PutNotificationConfiguration"))
  if valid_618070 != nil:
    section.add "Action", valid_618070
  var valid_618071 = query.getOrDefault("NotificationTypes")
  valid_618071 = validateParameter(valid_618071, JArray, required = true, default = nil)
  if valid_618071 != nil:
    section.add "NotificationTypes", valid_618071
  var valid_618072 = query.getOrDefault("TopicARN")
  valid_618072 = validateParameter(valid_618072, JString, required = true,
                                 default = nil)
  if valid_618072 != nil:
    section.add "TopicARN", valid_618072
  var valid_618073 = query.getOrDefault("Version")
  valid_618073 = validateParameter(valid_618073, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_618073 != nil:
    section.add "Version", valid_618073
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_618074 = header.getOrDefault("X-Amz-Date")
  valid_618074 = validateParameter(valid_618074, JString, required = false,
                                 default = nil)
  if valid_618074 != nil:
    section.add "X-Amz-Date", valid_618074
  var valid_618075 = header.getOrDefault("X-Amz-Security-Token")
  valid_618075 = validateParameter(valid_618075, JString, required = false,
                                 default = nil)
  if valid_618075 != nil:
    section.add "X-Amz-Security-Token", valid_618075
  var valid_618076 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618076 = validateParameter(valid_618076, JString, required = false,
                                 default = nil)
  if valid_618076 != nil:
    section.add "X-Amz-Content-Sha256", valid_618076
  var valid_618077 = header.getOrDefault("X-Amz-Algorithm")
  valid_618077 = validateParameter(valid_618077, JString, required = false,
                                 default = nil)
  if valid_618077 != nil:
    section.add "X-Amz-Algorithm", valid_618077
  var valid_618078 = header.getOrDefault("X-Amz-Signature")
  valid_618078 = validateParameter(valid_618078, JString, required = false,
                                 default = nil)
  if valid_618078 != nil:
    section.add "X-Amz-Signature", valid_618078
  var valid_618079 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618079 = validateParameter(valid_618079, JString, required = false,
                                 default = nil)
  if valid_618079 != nil:
    section.add "X-Amz-SignedHeaders", valid_618079
  var valid_618080 = header.getOrDefault("X-Amz-Credential")
  valid_618080 = validateParameter(valid_618080, JString, required = false,
                                 default = nil)
  if valid_618080 != nil:
    section.add "X-Amz-Credential", valid_618080
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618081: Call_GetPutNotificationConfiguration_618066;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.</p> <p>This configuration overwrites any existing configuration.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html">Getting Amazon SNS Notifications When Your Auto Scaling Group Scales</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_618081.validator(path, query, header, formData, body)
  let scheme = call_618081.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618081.url(scheme.get, call_618081.host, call_618081.base,
                         call_618081.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618081, url, valid)

proc call*(call_618082: Call_GetPutNotificationConfiguration_618066;
          AutoScalingGroupName: string; NotificationTypes: JsonNode;
          TopicARN: string; Action: string = "PutNotificationConfiguration";
          Version: string = "2011-01-01"): Recallable =
  ## getPutNotificationConfiguration
  ## <p>Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.</p> <p>This configuration overwrites any existing configuration.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html">Getting Amazon SNS Notifications When Your Auto Scaling Group Scales</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   NotificationTypes: JArray (required)
  ##                    : The type of event that causes the notification to be sent. For more information about notification types supported by Amazon EC2 Auto Scaling, see <a>DescribeAutoScalingNotificationTypes</a>.
  ##   TopicARN: string (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   Version: string (required)
  var query_618083 = newJObject()
  add(query_618083, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_618083, "Action", newJString(Action))
  if NotificationTypes != nil:
    query_618083.add "NotificationTypes", NotificationTypes
  add(query_618083, "TopicARN", newJString(TopicARN))
  add(query_618083, "Version", newJString(Version))
  result = call_618082.call(nil, query_618083, nil, nil, nil)

var getPutNotificationConfiguration* = Call_GetPutNotificationConfiguration_618066(
    name: "getPutNotificationConfiguration", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=PutNotificationConfiguration",
    validator: validate_GetPutNotificationConfiguration_618067, base: "/",
    url: url_GetPutNotificationConfiguration_618068,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutScalingPolicy_618134 = ref object of OpenApiRestCall_615866
proc url_PostPutScalingPolicy_618136(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPutScalingPolicy_618135(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates or updates a scaling policy for an Auto Scaling group.</p> <p>For more information about using scaling policies to scale your Auto Scaling group automatically, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scale-based-on-demand.html">Dynamic Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_618137 = query.getOrDefault("Action")
  valid_618137 = validateParameter(valid_618137, JString, required = true,
                                 default = newJString("PutScalingPolicy"))
  if valid_618137 != nil:
    section.add "Action", valid_618137
  var valid_618138 = query.getOrDefault("Version")
  valid_618138 = validateParameter(valid_618138, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_618138 != nil:
    section.add "Version", valid_618138
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_618139 = header.getOrDefault("X-Amz-Date")
  valid_618139 = validateParameter(valid_618139, JString, required = false,
                                 default = nil)
  if valid_618139 != nil:
    section.add "X-Amz-Date", valid_618139
  var valid_618140 = header.getOrDefault("X-Amz-Security-Token")
  valid_618140 = validateParameter(valid_618140, JString, required = false,
                                 default = nil)
  if valid_618140 != nil:
    section.add "X-Amz-Security-Token", valid_618140
  var valid_618141 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618141 = validateParameter(valid_618141, JString, required = false,
                                 default = nil)
  if valid_618141 != nil:
    section.add "X-Amz-Content-Sha256", valid_618141
  var valid_618142 = header.getOrDefault("X-Amz-Algorithm")
  valid_618142 = validateParameter(valid_618142, JString, required = false,
                                 default = nil)
  if valid_618142 != nil:
    section.add "X-Amz-Algorithm", valid_618142
  var valid_618143 = header.getOrDefault("X-Amz-Signature")
  valid_618143 = validateParameter(valid_618143, JString, required = false,
                                 default = nil)
  if valid_618143 != nil:
    section.add "X-Amz-Signature", valid_618143
  var valid_618144 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618144 = validateParameter(valid_618144, JString, required = false,
                                 default = nil)
  if valid_618144 != nil:
    section.add "X-Amz-SignedHeaders", valid_618144
  var valid_618145 = header.getOrDefault("X-Amz-Credential")
  valid_618145 = validateParameter(valid_618145, JString, required = false,
                                 default = nil)
  if valid_618145 != nil:
    section.add "X-Amz-Credential", valid_618145
  result.add "header", section
  ## parameters in `formData` object:
  ##   Enabled: JBool
  ##          : Indicates whether the scaling policy is enabled or disabled. The default is enabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enable-disable-scaling-policy.html">Disabling a Scaling Policy for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   PolicyName: JString (required)
  ##             : The name of the policy.
  ##   StepAdjustments: JArray
  ##                  : <p>A set of adjustments that enable you to scale based on the size of the alarm breach.</p> <p>Conditional: If you specify <code>StepScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   TargetTrackingConfiguration.DisableScaleIn: JString
  ##                                             : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## Indicates whether scaling in by the target tracking scaling policy is disabled. If scaling in is disabled, the target tracking scaling policy doesn't remove instances from the Auto Scaling group. Otherwise, the target tracking scaling policy can remove instances from the Auto Scaling group. The default is <code>false</code>.
  ##   PolicyType: JString
  ##             : The policy type. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>. If the policy type is null, the value is treated as <code>SimpleScaling</code>.
  ##   TargetTrackingConfiguration.CustomizedMetricSpecification: JString
  ##                                                            : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A customized metric. You must specify either a predefined metric or a customized metric.
  ##   ScalingAdjustment: JInt
  ##                    : <p>The amount by which a simple scaling policy scales the Auto Scaling group in response to an alarm breach. The adjustment is based on the value that you specified in the <code>AdjustmentType</code> parameter (either an absolute number or a percentage). A positive value adds to the current capacity and a negative value subtracts from the current capacity. For exact capacity, you must specify a positive value.</p> <p>Conditional: If you specify <code>SimpleScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   MinAdjustmentMagnitude: JInt
  ##                         : <p>The minimum number of instances to scale. If the value of <code>AdjustmentType</code> is <code>PercentChangeInCapacity</code>, the scaling policy changes the <code>DesiredCapacity</code> of the Auto Scaling group by at least this many instances. Otherwise, the error is <code>ValidationError</code>.</p> <p>This property replaces the <code>MinAdjustmentStep</code> property. For example, suppose that you create a step scaling policy to scale out an Auto Scaling group by 25 percent and you specify a <code>MinAdjustmentMagnitude</code> of 2. If the group has 4 instances and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a <code>MinAdjustmentMagnitude</code> of 2, Amazon EC2 Auto Scaling scales out the group by 2 instances.</p> <p>Valid only if the policy type is <code>SimpleScaling</code> or <code>StepScaling</code>.</p>
  ##   MinAdjustmentStep: JInt
  ##                    : Available for backward compatibility. Use <code>MinAdjustmentMagnitude</code> instead.
  ##   Cooldown: JInt
  ##           : <p>The amount of time, in seconds, after a scaling activity completes before any further dynamic scaling activities can start. If this parameter is not specified, the default cooldown period for the group applies.</p> <p>Valid only if the policy type is <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MetricAggregationType: JString
  ##                        : <p>The aggregation type for the CloudWatch metrics. The valid values are <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code>. If the aggregation type is null, the value is treated as <code>Average</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code>.</p>
  ##   AdjustmentType: JString
  ##                 : <p>Specifies whether the <code>ScalingAdjustment</code> parameter is an absolute number or a percentage of the current capacity. The valid values are <code>ChangeInCapacity</code>, <code>ExactCapacity</code>, and <code>PercentChangeInCapacity</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment">Scaling Adjustment Types</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   TargetTrackingConfiguration.PredefinedMetricSpecification: JString
  ##                                                            : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A predefined metric. You must specify either a predefined metric or a customized metric.
  ##   TargetTrackingConfiguration.TargetValue: JString
  ##                                          : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## The target value for the metric.
  ##   EstimatedInstanceWarmup: JInt
  ##                          : <p>The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. The default is to use the value specified for the default cooldown period for the group.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p>
  section = newJObject()
  var valid_618146 = formData.getOrDefault("Enabled")
  valid_618146 = validateParameter(valid_618146, JBool, required = false, default = nil)
  if valid_618146 != nil:
    section.add "Enabled", valid_618146
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_618147 = formData.getOrDefault("AutoScalingGroupName")
  valid_618147 = validateParameter(valid_618147, JString, required = true,
                                 default = nil)
  if valid_618147 != nil:
    section.add "AutoScalingGroupName", valid_618147
  var valid_618148 = formData.getOrDefault("PolicyName")
  valid_618148 = validateParameter(valid_618148, JString, required = true,
                                 default = nil)
  if valid_618148 != nil:
    section.add "PolicyName", valid_618148
  var valid_618149 = formData.getOrDefault("StepAdjustments")
  valid_618149 = validateParameter(valid_618149, JArray, required = false,
                                 default = nil)
  if valid_618149 != nil:
    section.add "StepAdjustments", valid_618149
  var valid_618150 = formData.getOrDefault("TargetTrackingConfiguration.DisableScaleIn")
  valid_618150 = validateParameter(valid_618150, JString, required = false,
                                 default = nil)
  if valid_618150 != nil:
    section.add "TargetTrackingConfiguration.DisableScaleIn", valid_618150
  var valid_618151 = formData.getOrDefault("PolicyType")
  valid_618151 = validateParameter(valid_618151, JString, required = false,
                                 default = nil)
  if valid_618151 != nil:
    section.add "PolicyType", valid_618151
  var valid_618152 = formData.getOrDefault("TargetTrackingConfiguration.CustomizedMetricSpecification")
  valid_618152 = validateParameter(valid_618152, JString, required = false,
                                 default = nil)
  if valid_618152 != nil:
    section.add "TargetTrackingConfiguration.CustomizedMetricSpecification", valid_618152
  var valid_618153 = formData.getOrDefault("ScalingAdjustment")
  valid_618153 = validateParameter(valid_618153, JInt, required = false, default = nil)
  if valid_618153 != nil:
    section.add "ScalingAdjustment", valid_618153
  var valid_618154 = formData.getOrDefault("MinAdjustmentMagnitude")
  valid_618154 = validateParameter(valid_618154, JInt, required = false, default = nil)
  if valid_618154 != nil:
    section.add "MinAdjustmentMagnitude", valid_618154
  var valid_618155 = formData.getOrDefault("MinAdjustmentStep")
  valid_618155 = validateParameter(valid_618155, JInt, required = false, default = nil)
  if valid_618155 != nil:
    section.add "MinAdjustmentStep", valid_618155
  var valid_618156 = formData.getOrDefault("Cooldown")
  valid_618156 = validateParameter(valid_618156, JInt, required = false, default = nil)
  if valid_618156 != nil:
    section.add "Cooldown", valid_618156
  var valid_618157 = formData.getOrDefault("MetricAggregationType")
  valid_618157 = validateParameter(valid_618157, JString, required = false,
                                 default = nil)
  if valid_618157 != nil:
    section.add "MetricAggregationType", valid_618157
  var valid_618158 = formData.getOrDefault("AdjustmentType")
  valid_618158 = validateParameter(valid_618158, JString, required = false,
                                 default = nil)
  if valid_618158 != nil:
    section.add "AdjustmentType", valid_618158
  var valid_618159 = formData.getOrDefault("TargetTrackingConfiguration.PredefinedMetricSpecification")
  valid_618159 = validateParameter(valid_618159, JString, required = false,
                                 default = nil)
  if valid_618159 != nil:
    section.add "TargetTrackingConfiguration.PredefinedMetricSpecification", valid_618159
  var valid_618160 = formData.getOrDefault("TargetTrackingConfiguration.TargetValue")
  valid_618160 = validateParameter(valid_618160, JString, required = false,
                                 default = nil)
  if valid_618160 != nil:
    section.add "TargetTrackingConfiguration.TargetValue", valid_618160
  var valid_618161 = formData.getOrDefault("EstimatedInstanceWarmup")
  valid_618161 = validateParameter(valid_618161, JInt, required = false, default = nil)
  if valid_618161 != nil:
    section.add "EstimatedInstanceWarmup", valid_618161
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618162: Call_PostPutScalingPolicy_618134; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates or updates a scaling policy for an Auto Scaling group.</p> <p>For more information about using scaling policies to scale your Auto Scaling group automatically, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scale-based-on-demand.html">Dynamic Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_618162.validator(path, query, header, formData, body)
  let scheme = call_618162.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618162.url(scheme.get, call_618162.host, call_618162.base,
                         call_618162.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618162, url, valid)

proc call*(call_618163: Call_PostPutScalingPolicy_618134;
          AutoScalingGroupName: string; PolicyName: string; Enabled: bool = false;
          StepAdjustments: JsonNode = nil;
          TargetTrackingConfigurationDisableScaleIn: string = "";
          PolicyType: string = ""; TargetTrackingConfigurationCustomizedMetricSpecification: string = "";
          ScalingAdjustment: int = 0; MinAdjustmentMagnitude: int = 0;
          MinAdjustmentStep: int = 0; Cooldown: int = 0;
          Action: string = "PutScalingPolicy"; MetricAggregationType: string = "";
          AdjustmentType: string = ""; TargetTrackingConfigurationPredefinedMetricSpecification: string = "";
          TargetTrackingConfigurationTargetValue: string = "";
          Version: string = "2011-01-01"; EstimatedInstanceWarmup: int = 0): Recallable =
  ## postPutScalingPolicy
  ## <p>Creates or updates a scaling policy for an Auto Scaling group.</p> <p>For more information about using scaling policies to scale your Auto Scaling group automatically, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scale-based-on-demand.html">Dynamic Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Enabled: bool
  ##          : Indicates whether the scaling policy is enabled or disabled. The default is enabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enable-disable-scaling-policy.html">Disabling a Scaling Policy for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   PolicyName: string (required)
  ##             : The name of the policy.
  ##   StepAdjustments: JArray
  ##                  : <p>A set of adjustments that enable you to scale based on the size of the alarm breach.</p> <p>Conditional: If you specify <code>StepScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   TargetTrackingConfigurationDisableScaleIn: string
  ##                                            : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## Indicates whether scaling in by the target tracking scaling policy is disabled. If scaling in is disabled, the target tracking scaling policy doesn't remove instances from the Auto Scaling group. Otherwise, the target tracking scaling policy can remove instances from the Auto Scaling group. The default is <code>false</code>.
  ##   PolicyType: string
  ##             : The policy type. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>. If the policy type is null, the value is treated as <code>SimpleScaling</code>.
  ##   TargetTrackingConfigurationCustomizedMetricSpecification: string
  ##                                                           : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A customized metric. You must specify either a predefined metric or a customized metric.
  ##   ScalingAdjustment: int
  ##                    : <p>The amount by which a simple scaling policy scales the Auto Scaling group in response to an alarm breach. The adjustment is based on the value that you specified in the <code>AdjustmentType</code> parameter (either an absolute number or a percentage). A positive value adds to the current capacity and a negative value subtracts from the current capacity. For exact capacity, you must specify a positive value.</p> <p>Conditional: If you specify <code>SimpleScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   MinAdjustmentMagnitude: int
  ##                         : <p>The minimum number of instances to scale. If the value of <code>AdjustmentType</code> is <code>PercentChangeInCapacity</code>, the scaling policy changes the <code>DesiredCapacity</code> of the Auto Scaling group by at least this many instances. Otherwise, the error is <code>ValidationError</code>.</p> <p>This property replaces the <code>MinAdjustmentStep</code> property. For example, suppose that you create a step scaling policy to scale out an Auto Scaling group by 25 percent and you specify a <code>MinAdjustmentMagnitude</code> of 2. If the group has 4 instances and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a <code>MinAdjustmentMagnitude</code> of 2, Amazon EC2 Auto Scaling scales out the group by 2 instances.</p> <p>Valid only if the policy type is <code>SimpleScaling</code> or <code>StepScaling</code>.</p>
  ##   MinAdjustmentStep: int
  ##                    : Available for backward compatibility. Use <code>MinAdjustmentMagnitude</code> instead.
  ##   Cooldown: int
  ##           : <p>The amount of time, in seconds, after a scaling activity completes before any further dynamic scaling activities can start. If this parameter is not specified, the default cooldown period for the group applies.</p> <p>Valid only if the policy type is <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   MetricAggregationType: string
  ##                        : <p>The aggregation type for the CloudWatch metrics. The valid values are <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code>. If the aggregation type is null, the value is treated as <code>Average</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code>.</p>
  ##   AdjustmentType: string
  ##                 : <p>Specifies whether the <code>ScalingAdjustment</code> parameter is an absolute number or a percentage of the current capacity. The valid values are <code>ChangeInCapacity</code>, <code>ExactCapacity</code>, and <code>PercentChangeInCapacity</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment">Scaling Adjustment Types</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   TargetTrackingConfigurationPredefinedMetricSpecification: string
  ##                                                           : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A predefined metric. You must specify either a predefined metric or a customized metric.
  ##   TargetTrackingConfigurationTargetValue: string
  ##                                         : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## The target value for the metric.
  ##   Version: string (required)
  ##   EstimatedInstanceWarmup: int
  ##                          : <p>The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. The default is to use the value specified for the default cooldown period for the group.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p>
  var query_618164 = newJObject()
  var formData_618165 = newJObject()
  add(formData_618165, "Enabled", newJBool(Enabled))
  add(formData_618165, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_618165, "PolicyName", newJString(PolicyName))
  if StepAdjustments != nil:
    formData_618165.add "StepAdjustments", StepAdjustments
  add(formData_618165, "TargetTrackingConfiguration.DisableScaleIn",
      newJString(TargetTrackingConfigurationDisableScaleIn))
  add(formData_618165, "PolicyType", newJString(PolicyType))
  add(formData_618165,
      "TargetTrackingConfiguration.CustomizedMetricSpecification",
      newJString(TargetTrackingConfigurationCustomizedMetricSpecification))
  add(formData_618165, "ScalingAdjustment", newJInt(ScalingAdjustment))
  add(formData_618165, "MinAdjustmentMagnitude", newJInt(MinAdjustmentMagnitude))
  add(formData_618165, "MinAdjustmentStep", newJInt(MinAdjustmentStep))
  add(formData_618165, "Cooldown", newJInt(Cooldown))
  add(query_618164, "Action", newJString(Action))
  add(formData_618165, "MetricAggregationType", newJString(MetricAggregationType))
  add(formData_618165, "AdjustmentType", newJString(AdjustmentType))
  add(formData_618165,
      "TargetTrackingConfiguration.PredefinedMetricSpecification",
      newJString(TargetTrackingConfigurationPredefinedMetricSpecification))
  add(formData_618165, "TargetTrackingConfiguration.TargetValue",
      newJString(TargetTrackingConfigurationTargetValue))
  add(query_618164, "Version", newJString(Version))
  add(formData_618165, "EstimatedInstanceWarmup", newJInt(EstimatedInstanceWarmup))
  result = call_618163.call(nil, query_618164, nil, formData_618165, nil)

var postPutScalingPolicy* = Call_PostPutScalingPolicy_618134(
    name: "postPutScalingPolicy", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=PutScalingPolicy",
    validator: validate_PostPutScalingPolicy_618135, base: "/",
    url: url_PostPutScalingPolicy_618136, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutScalingPolicy_618103 = ref object of OpenApiRestCall_615866
proc url_GetPutScalingPolicy_618105(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPutScalingPolicy_618104(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Creates or updates a scaling policy for an Auto Scaling group.</p> <p>For more information about using scaling policies to scale your Auto Scaling group automatically, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scale-based-on-demand.html">Dynamic Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TargetTrackingConfiguration.DisableScaleIn: JString
  ##                                             : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## Indicates whether scaling in by the target tracking scaling policy is disabled. If scaling in is disabled, the target tracking scaling policy doesn't remove instances from the Auto Scaling group. Otherwise, the target tracking scaling policy can remove instances from the Auto Scaling group. The default is <code>false</code>.
  ##   AdjustmentType: JString
  ##                 : <p>Specifies whether the <code>ScalingAdjustment</code> parameter is an absolute number or a percentage of the current capacity. The valid values are <code>ChangeInCapacity</code>, <code>ExactCapacity</code>, and <code>PercentChangeInCapacity</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment">Scaling Adjustment Types</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   TargetTrackingConfiguration.PredefinedMetricSpecification: JString
  ##                                                            : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A predefined metric. You must specify either a predefined metric or a customized metric.
  ##   MetricAggregationType: JString
  ##                        : <p>The aggregation type for the CloudWatch metrics. The valid values are <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code>. If the aggregation type is null, the value is treated as <code>Average</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code>.</p>
  ##   MinAdjustmentMagnitude: JInt
  ##                         : <p>The minimum number of instances to scale. If the value of <code>AdjustmentType</code> is <code>PercentChangeInCapacity</code>, the scaling policy changes the <code>DesiredCapacity</code> of the Auto Scaling group by at least this many instances. Otherwise, the error is <code>ValidationError</code>.</p> <p>This property replaces the <code>MinAdjustmentStep</code> property. For example, suppose that you create a step scaling policy to scale out an Auto Scaling group by 25 percent and you specify a <code>MinAdjustmentMagnitude</code> of 2. If the group has 4 instances and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a <code>MinAdjustmentMagnitude</code> of 2, Amazon EC2 Auto Scaling scales out the group by 2 instances.</p> <p>Valid only if the policy type is <code>SimpleScaling</code> or <code>StepScaling</code>.</p>
  ##   Cooldown: JInt
  ##           : <p>The amount of time, in seconds, after a scaling activity completes before any further dynamic scaling activities can start. If this parameter is not specified, the default cooldown period for the group applies.</p> <p>Valid only if the policy type is <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetTrackingConfiguration.TargetValue: JString
  ##                                          : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## The target value for the metric.
  ##   Enabled: JBool
  ##          : Indicates whether the scaling policy is enabled or disabled. The default is enabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enable-disable-scaling-policy.html">Disabling a Scaling Policy for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   TargetTrackingConfiguration.CustomizedMetricSpecification: JString
  ##                                                            : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A customized metric. You must specify either a predefined metric or a customized metric.
  ##   Action: JString (required)
  ##   EstimatedInstanceWarmup: JInt
  ##                          : <p>The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. The default is to use the value specified for the default cooldown period for the group.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p>
  ##   MinAdjustmentStep: JInt
  ##                    : Available for backward compatibility. Use <code>MinAdjustmentMagnitude</code> instead.
  ##   StepAdjustments: JArray
  ##                  : <p>A set of adjustments that enable you to scale based on the size of the alarm breach.</p> <p>Conditional: If you specify <code>StepScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   PolicyType: JString
  ##             : The policy type. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>. If the policy type is null, the value is treated as <code>SimpleScaling</code>.
  ##   Version: JString (required)
  ##   ScalingAdjustment: JInt
  ##                    : <p>The amount by which a simple scaling policy scales the Auto Scaling group in response to an alarm breach. The adjustment is based on the value that you specified in the <code>AdjustmentType</code> parameter (either an absolute number or a percentage). A positive value adds to the current capacity and a negative value subtracts from the current capacity. For exact capacity, you must specify a positive value.</p> <p>Conditional: If you specify <code>SimpleScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   PolicyName: JString (required)
  ##             : The name of the policy.
  section = newJObject()
  var valid_618106 = query.getOrDefault("TargetTrackingConfiguration.DisableScaleIn")
  valid_618106 = validateParameter(valid_618106, JString, required = false,
                                 default = nil)
  if valid_618106 != nil:
    section.add "TargetTrackingConfiguration.DisableScaleIn", valid_618106
  var valid_618107 = query.getOrDefault("AdjustmentType")
  valid_618107 = validateParameter(valid_618107, JString, required = false,
                                 default = nil)
  if valid_618107 != nil:
    section.add "AdjustmentType", valid_618107
  var valid_618108 = query.getOrDefault("TargetTrackingConfiguration.PredefinedMetricSpecification")
  valid_618108 = validateParameter(valid_618108, JString, required = false,
                                 default = nil)
  if valid_618108 != nil:
    section.add "TargetTrackingConfiguration.PredefinedMetricSpecification", valid_618108
  var valid_618109 = query.getOrDefault("MetricAggregationType")
  valid_618109 = validateParameter(valid_618109, JString, required = false,
                                 default = nil)
  if valid_618109 != nil:
    section.add "MetricAggregationType", valid_618109
  var valid_618110 = query.getOrDefault("MinAdjustmentMagnitude")
  valid_618110 = validateParameter(valid_618110, JInt, required = false, default = nil)
  if valid_618110 != nil:
    section.add "MinAdjustmentMagnitude", valid_618110
  var valid_618111 = query.getOrDefault("Cooldown")
  valid_618111 = validateParameter(valid_618111, JInt, required = false, default = nil)
  if valid_618111 != nil:
    section.add "Cooldown", valid_618111
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_618112 = query.getOrDefault("AutoScalingGroupName")
  valid_618112 = validateParameter(valid_618112, JString, required = true,
                                 default = nil)
  if valid_618112 != nil:
    section.add "AutoScalingGroupName", valid_618112
  var valid_618113 = query.getOrDefault("TargetTrackingConfiguration.TargetValue")
  valid_618113 = validateParameter(valid_618113, JString, required = false,
                                 default = nil)
  if valid_618113 != nil:
    section.add "TargetTrackingConfiguration.TargetValue", valid_618113
  var valid_618114 = query.getOrDefault("Enabled")
  valid_618114 = validateParameter(valid_618114, JBool, required = false, default = nil)
  if valid_618114 != nil:
    section.add "Enabled", valid_618114
  var valid_618115 = query.getOrDefault("TargetTrackingConfiguration.CustomizedMetricSpecification")
  valid_618115 = validateParameter(valid_618115, JString, required = false,
                                 default = nil)
  if valid_618115 != nil:
    section.add "TargetTrackingConfiguration.CustomizedMetricSpecification", valid_618115
  var valid_618116 = query.getOrDefault("Action")
  valid_618116 = validateParameter(valid_618116, JString, required = true,
                                 default = newJString("PutScalingPolicy"))
  if valid_618116 != nil:
    section.add "Action", valid_618116
  var valid_618117 = query.getOrDefault("EstimatedInstanceWarmup")
  valid_618117 = validateParameter(valid_618117, JInt, required = false, default = nil)
  if valid_618117 != nil:
    section.add "EstimatedInstanceWarmup", valid_618117
  var valid_618118 = query.getOrDefault("MinAdjustmentStep")
  valid_618118 = validateParameter(valid_618118, JInt, required = false, default = nil)
  if valid_618118 != nil:
    section.add "MinAdjustmentStep", valid_618118
  var valid_618119 = query.getOrDefault("StepAdjustments")
  valid_618119 = validateParameter(valid_618119, JArray, required = false,
                                 default = nil)
  if valid_618119 != nil:
    section.add "StepAdjustments", valid_618119
  var valid_618120 = query.getOrDefault("PolicyType")
  valid_618120 = validateParameter(valid_618120, JString, required = false,
                                 default = nil)
  if valid_618120 != nil:
    section.add "PolicyType", valid_618120
  var valid_618121 = query.getOrDefault("Version")
  valid_618121 = validateParameter(valid_618121, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_618121 != nil:
    section.add "Version", valid_618121
  var valid_618122 = query.getOrDefault("ScalingAdjustment")
  valid_618122 = validateParameter(valid_618122, JInt, required = false, default = nil)
  if valid_618122 != nil:
    section.add "ScalingAdjustment", valid_618122
  var valid_618123 = query.getOrDefault("PolicyName")
  valid_618123 = validateParameter(valid_618123, JString, required = true,
                                 default = nil)
  if valid_618123 != nil:
    section.add "PolicyName", valid_618123
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_618124 = header.getOrDefault("X-Amz-Date")
  valid_618124 = validateParameter(valid_618124, JString, required = false,
                                 default = nil)
  if valid_618124 != nil:
    section.add "X-Amz-Date", valid_618124
  var valid_618125 = header.getOrDefault("X-Amz-Security-Token")
  valid_618125 = validateParameter(valid_618125, JString, required = false,
                                 default = nil)
  if valid_618125 != nil:
    section.add "X-Amz-Security-Token", valid_618125
  var valid_618126 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618126 = validateParameter(valid_618126, JString, required = false,
                                 default = nil)
  if valid_618126 != nil:
    section.add "X-Amz-Content-Sha256", valid_618126
  var valid_618127 = header.getOrDefault("X-Amz-Algorithm")
  valid_618127 = validateParameter(valid_618127, JString, required = false,
                                 default = nil)
  if valid_618127 != nil:
    section.add "X-Amz-Algorithm", valid_618127
  var valid_618128 = header.getOrDefault("X-Amz-Signature")
  valid_618128 = validateParameter(valid_618128, JString, required = false,
                                 default = nil)
  if valid_618128 != nil:
    section.add "X-Amz-Signature", valid_618128
  var valid_618129 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618129 = validateParameter(valid_618129, JString, required = false,
                                 default = nil)
  if valid_618129 != nil:
    section.add "X-Amz-SignedHeaders", valid_618129
  var valid_618130 = header.getOrDefault("X-Amz-Credential")
  valid_618130 = validateParameter(valid_618130, JString, required = false,
                                 default = nil)
  if valid_618130 != nil:
    section.add "X-Amz-Credential", valid_618130
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618131: Call_GetPutScalingPolicy_618103; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates or updates a scaling policy for an Auto Scaling group.</p> <p>For more information about using scaling policies to scale your Auto Scaling group automatically, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scale-based-on-demand.html">Dynamic Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_618131.validator(path, query, header, formData, body)
  let scheme = call_618131.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618131.url(scheme.get, call_618131.host, call_618131.base,
                         call_618131.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618131, url, valid)

proc call*(call_618132: Call_GetPutScalingPolicy_618103;
          AutoScalingGroupName: string; PolicyName: string;
          TargetTrackingConfigurationDisableScaleIn: string = "";
          AdjustmentType: string = ""; TargetTrackingConfigurationPredefinedMetricSpecification: string = "";
          MetricAggregationType: string = ""; MinAdjustmentMagnitude: int = 0;
          Cooldown: int = 0; TargetTrackingConfigurationTargetValue: string = "";
          Enabled: bool = false; TargetTrackingConfigurationCustomizedMetricSpecification: string = "";
          Action: string = "PutScalingPolicy"; EstimatedInstanceWarmup: int = 0;
          MinAdjustmentStep: int = 0; StepAdjustments: JsonNode = nil;
          PolicyType: string = ""; Version: string = "2011-01-01";
          ScalingAdjustment: int = 0): Recallable =
  ## getPutScalingPolicy
  ## <p>Creates or updates a scaling policy for an Auto Scaling group.</p> <p>For more information about using scaling policies to scale your Auto Scaling group automatically, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scale-based-on-demand.html">Dynamic Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   TargetTrackingConfigurationDisableScaleIn: string
  ##                                            : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## Indicates whether scaling in by the target tracking scaling policy is disabled. If scaling in is disabled, the target tracking scaling policy doesn't remove instances from the Auto Scaling group. Otherwise, the target tracking scaling policy can remove instances from the Auto Scaling group. The default is <code>false</code>.
  ##   AdjustmentType: string
  ##                 : <p>Specifies whether the <code>ScalingAdjustment</code> parameter is an absolute number or a percentage of the current capacity. The valid values are <code>ChangeInCapacity</code>, <code>ExactCapacity</code>, and <code>PercentChangeInCapacity</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment">Scaling Adjustment Types</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   TargetTrackingConfigurationPredefinedMetricSpecification: string
  ##                                                           : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A predefined metric. You must specify either a predefined metric or a customized metric.
  ##   MetricAggregationType: string
  ##                        : <p>The aggregation type for the CloudWatch metrics. The valid values are <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code>. If the aggregation type is null, the value is treated as <code>Average</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code>.</p>
  ##   MinAdjustmentMagnitude: int
  ##                         : <p>The minimum number of instances to scale. If the value of <code>AdjustmentType</code> is <code>PercentChangeInCapacity</code>, the scaling policy changes the <code>DesiredCapacity</code> of the Auto Scaling group by at least this many instances. Otherwise, the error is <code>ValidationError</code>.</p> <p>This property replaces the <code>MinAdjustmentStep</code> property. For example, suppose that you create a step scaling policy to scale out an Auto Scaling group by 25 percent and you specify a <code>MinAdjustmentMagnitude</code> of 2. If the group has 4 instances and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a <code>MinAdjustmentMagnitude</code> of 2, Amazon EC2 Auto Scaling scales out the group by 2 instances.</p> <p>Valid only if the policy type is <code>SimpleScaling</code> or <code>StepScaling</code>.</p>
  ##   Cooldown: int
  ##           : <p>The amount of time, in seconds, after a scaling activity completes before any further dynamic scaling activities can start. If this parameter is not specified, the default cooldown period for the group applies.</p> <p>Valid only if the policy type is <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetTrackingConfigurationTargetValue: string
  ##                                         : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## The target value for the metric.
  ##   Enabled: bool
  ##          : Indicates whether the scaling policy is enabled or disabled. The default is enabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enable-disable-scaling-policy.html">Disabling a Scaling Policy for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   TargetTrackingConfigurationCustomizedMetricSpecification: string
  ##                                                           : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A customized metric. You must specify either a predefined metric or a customized metric.
  ##   Action: string (required)
  ##   EstimatedInstanceWarmup: int
  ##                          : <p>The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. The default is to use the value specified for the default cooldown period for the group.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p>
  ##   MinAdjustmentStep: int
  ##                    : Available for backward compatibility. Use <code>MinAdjustmentMagnitude</code> instead.
  ##   StepAdjustments: JArray
  ##                  : <p>A set of adjustments that enable you to scale based on the size of the alarm breach.</p> <p>Conditional: If you specify <code>StepScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   PolicyType: string
  ##             : The policy type. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>. If the policy type is null, the value is treated as <code>SimpleScaling</code>.
  ##   Version: string (required)
  ##   ScalingAdjustment: int
  ##                    : <p>The amount by which a simple scaling policy scales the Auto Scaling group in response to an alarm breach. The adjustment is based on the value that you specified in the <code>AdjustmentType</code> parameter (either an absolute number or a percentage). A positive value adds to the current capacity and a negative value subtracts from the current capacity. For exact capacity, you must specify a positive value.</p> <p>Conditional: If you specify <code>SimpleScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   PolicyName: string (required)
  ##             : The name of the policy.
  var query_618133 = newJObject()
  add(query_618133, "TargetTrackingConfiguration.DisableScaleIn",
      newJString(TargetTrackingConfigurationDisableScaleIn))
  add(query_618133, "AdjustmentType", newJString(AdjustmentType))
  add(query_618133, "TargetTrackingConfiguration.PredefinedMetricSpecification",
      newJString(TargetTrackingConfigurationPredefinedMetricSpecification))
  add(query_618133, "MetricAggregationType", newJString(MetricAggregationType))
  add(query_618133, "MinAdjustmentMagnitude", newJInt(MinAdjustmentMagnitude))
  add(query_618133, "Cooldown", newJInt(Cooldown))
  add(query_618133, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_618133, "TargetTrackingConfiguration.TargetValue",
      newJString(TargetTrackingConfigurationTargetValue))
  add(query_618133, "Enabled", newJBool(Enabled))
  add(query_618133, "TargetTrackingConfiguration.CustomizedMetricSpecification",
      newJString(TargetTrackingConfigurationCustomizedMetricSpecification))
  add(query_618133, "Action", newJString(Action))
  add(query_618133, "EstimatedInstanceWarmup", newJInt(EstimatedInstanceWarmup))
  add(query_618133, "MinAdjustmentStep", newJInt(MinAdjustmentStep))
  if StepAdjustments != nil:
    query_618133.add "StepAdjustments", StepAdjustments
  add(query_618133, "PolicyType", newJString(PolicyType))
  add(query_618133, "Version", newJString(Version))
  add(query_618133, "ScalingAdjustment", newJInt(ScalingAdjustment))
  add(query_618133, "PolicyName", newJString(PolicyName))
  result = call_618132.call(nil, query_618133, nil, nil, nil)

var getPutScalingPolicy* = Call_GetPutScalingPolicy_618103(
    name: "getPutScalingPolicy", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=PutScalingPolicy",
    validator: validate_GetPutScalingPolicy_618104, base: "/",
    url: url_GetPutScalingPolicy_618105, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutScheduledUpdateGroupAction_618190 = ref object of OpenApiRestCall_615866
proc url_PostPutScheduledUpdateGroupAction_618192(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPutScheduledUpdateGroupAction_618191(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates or updates a scheduled scaling action for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html">Scheduled Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_618193 = query.getOrDefault("Action")
  valid_618193 = validateParameter(valid_618193, JString, required = true, default = newJString(
      "PutScheduledUpdateGroupAction"))
  if valid_618193 != nil:
    section.add "Action", valid_618193
  var valid_618194 = query.getOrDefault("Version")
  valid_618194 = validateParameter(valid_618194, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_618194 != nil:
    section.add "Version", valid_618194
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_618195 = header.getOrDefault("X-Amz-Date")
  valid_618195 = validateParameter(valid_618195, JString, required = false,
                                 default = nil)
  if valid_618195 != nil:
    section.add "X-Amz-Date", valid_618195
  var valid_618196 = header.getOrDefault("X-Amz-Security-Token")
  valid_618196 = validateParameter(valid_618196, JString, required = false,
                                 default = nil)
  if valid_618196 != nil:
    section.add "X-Amz-Security-Token", valid_618196
  var valid_618197 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618197 = validateParameter(valid_618197, JString, required = false,
                                 default = nil)
  if valid_618197 != nil:
    section.add "X-Amz-Content-Sha256", valid_618197
  var valid_618198 = header.getOrDefault("X-Amz-Algorithm")
  valid_618198 = validateParameter(valid_618198, JString, required = false,
                                 default = nil)
  if valid_618198 != nil:
    section.add "X-Amz-Algorithm", valid_618198
  var valid_618199 = header.getOrDefault("X-Amz-Signature")
  valid_618199 = validateParameter(valid_618199, JString, required = false,
                                 default = nil)
  if valid_618199 != nil:
    section.add "X-Amz-Signature", valid_618199
  var valid_618200 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618200 = validateParameter(valid_618200, JString, required = false,
                                 default = nil)
  if valid_618200 != nil:
    section.add "X-Amz-SignedHeaders", valid_618200
  var valid_618201 = header.getOrDefault("X-Amz-Credential")
  valid_618201 = validateParameter(valid_618201, JString, required = false,
                                 default = nil)
  if valid_618201 != nil:
    section.add "X-Amz-Credential", valid_618201
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Recurrence: JString
  ##             : <p>The recurring schedule for this action, in Unix cron syntax format. This format consists of five fields separated by white spaces: [Minute] [Hour] [Day_of_Month] [Month_of_Year] [Day_of_Week]. The value must be in quotes (for example, <code>"30 0 1 1,6,12 *"</code>). For more information about this format, see <a href="http://crontab.org">Crontab</a>.</p> <p>When <code>StartTime</code> and <code>EndTime</code> are specified with <code>Recurrence</code>, they form the boundaries of when the recurring action starts and stops.</p>
  ##   DesiredCapacity: JInt
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   Time: JString
  ##       : This parameter is no longer used.
  ##   StartTime: JString
  ##            : <p>The date and time for this action to start, in YYYY-MM-DDThh:mm:ssZ format in UTC/GMT only and in quotes (for example, <code>"2019-06-01T00:00:00Z"</code>).</p> <p>If you specify <code>Recurrence</code> and <code>StartTime</code>, Amazon EC2 Auto Scaling performs the action at this time, and then performs the action based on the specified recurrence.</p> <p>If you try to schedule your action in the past, Amazon EC2 Auto Scaling returns an error message.</p>
  ##   ScheduledActionName: JString (required)
  ##                      : The name of this scaling action.
  ##   MinSize: JInt
  ##          : The minimum number of instances in the Auto Scaling group.
  ##   MaxSize: JInt
  ##          : The maximum number of instances in the Auto Scaling group.
  ##   EndTime: JString
  ##          : The date and time for the recurring schedule to end. Amazon EC2 Auto Scaling does not perform the action after this time.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_618202 = formData.getOrDefault("AutoScalingGroupName")
  valid_618202 = validateParameter(valid_618202, JString, required = true,
                                 default = nil)
  if valid_618202 != nil:
    section.add "AutoScalingGroupName", valid_618202
  var valid_618203 = formData.getOrDefault("Recurrence")
  valid_618203 = validateParameter(valid_618203, JString, required = false,
                                 default = nil)
  if valid_618203 != nil:
    section.add "Recurrence", valid_618203
  var valid_618204 = formData.getOrDefault("DesiredCapacity")
  valid_618204 = validateParameter(valid_618204, JInt, required = false, default = nil)
  if valid_618204 != nil:
    section.add "DesiredCapacity", valid_618204
  var valid_618205 = formData.getOrDefault("Time")
  valid_618205 = validateParameter(valid_618205, JString, required = false,
                                 default = nil)
  if valid_618205 != nil:
    section.add "Time", valid_618205
  var valid_618206 = formData.getOrDefault("StartTime")
  valid_618206 = validateParameter(valid_618206, JString, required = false,
                                 default = nil)
  if valid_618206 != nil:
    section.add "StartTime", valid_618206
  var valid_618207 = formData.getOrDefault("ScheduledActionName")
  valid_618207 = validateParameter(valid_618207, JString, required = true,
                                 default = nil)
  if valid_618207 != nil:
    section.add "ScheduledActionName", valid_618207
  var valid_618208 = formData.getOrDefault("MinSize")
  valid_618208 = validateParameter(valid_618208, JInt, required = false, default = nil)
  if valid_618208 != nil:
    section.add "MinSize", valid_618208
  var valid_618209 = formData.getOrDefault("MaxSize")
  valid_618209 = validateParameter(valid_618209, JInt, required = false, default = nil)
  if valid_618209 != nil:
    section.add "MaxSize", valid_618209
  var valid_618210 = formData.getOrDefault("EndTime")
  valid_618210 = validateParameter(valid_618210, JString, required = false,
                                 default = nil)
  if valid_618210 != nil:
    section.add "EndTime", valid_618210
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618211: Call_PostPutScheduledUpdateGroupAction_618190;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates or updates a scheduled scaling action for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html">Scheduled Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_618211.validator(path, query, header, formData, body)
  let scheme = call_618211.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618211.url(scheme.get, call_618211.host, call_618211.base,
                         call_618211.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618211, url, valid)

proc call*(call_618212: Call_PostPutScheduledUpdateGroupAction_618190;
          AutoScalingGroupName: string; ScheduledActionName: string;
          Recurrence: string = ""; DesiredCapacity: int = 0; Time: string = "";
          StartTime: string = ""; Action: string = "PutScheduledUpdateGroupAction";
          MinSize: int = 0; MaxSize: int = 0; EndTime: string = "";
          Version: string = "2011-01-01"): Recallable =
  ## postPutScheduledUpdateGroupAction
  ## <p>Creates or updates a scheduled scaling action for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html">Scheduled Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Recurrence: string
  ##             : <p>The recurring schedule for this action, in Unix cron syntax format. This format consists of five fields separated by white spaces: [Minute] [Hour] [Day_of_Month] [Month_of_Year] [Day_of_Week]. The value must be in quotes (for example, <code>"30 0 1 1,6,12 *"</code>). For more information about this format, see <a href="http://crontab.org">Crontab</a>.</p> <p>When <code>StartTime</code> and <code>EndTime</code> are specified with <code>Recurrence</code>, they form the boundaries of when the recurring action starts and stops.</p>
  ##   DesiredCapacity: int
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   Time: string
  ##       : This parameter is no longer used.
  ##   StartTime: string
  ##            : <p>The date and time for this action to start, in YYYY-MM-DDThh:mm:ssZ format in UTC/GMT only and in quotes (for example, <code>"2019-06-01T00:00:00Z"</code>).</p> <p>If you specify <code>Recurrence</code> and <code>StartTime</code>, Amazon EC2 Auto Scaling performs the action at this time, and then performs the action based on the specified recurrence.</p> <p>If you try to schedule your action in the past, Amazon EC2 Auto Scaling returns an error message.</p>
  ##   Action: string (required)
  ##   ScheduledActionName: string (required)
  ##                      : The name of this scaling action.
  ##   MinSize: int
  ##          : The minimum number of instances in the Auto Scaling group.
  ##   MaxSize: int
  ##          : The maximum number of instances in the Auto Scaling group.
  ##   EndTime: string
  ##          : The date and time for the recurring schedule to end. Amazon EC2 Auto Scaling does not perform the action after this time.
  ##   Version: string (required)
  var query_618213 = newJObject()
  var formData_618214 = newJObject()
  add(formData_618214, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_618214, "Recurrence", newJString(Recurrence))
  add(formData_618214, "DesiredCapacity", newJInt(DesiredCapacity))
  add(formData_618214, "Time", newJString(Time))
  add(formData_618214, "StartTime", newJString(StartTime))
  add(query_618213, "Action", newJString(Action))
  add(formData_618214, "ScheduledActionName", newJString(ScheduledActionName))
  add(formData_618214, "MinSize", newJInt(MinSize))
  add(formData_618214, "MaxSize", newJInt(MaxSize))
  add(formData_618214, "EndTime", newJString(EndTime))
  add(query_618213, "Version", newJString(Version))
  result = call_618212.call(nil, query_618213, nil, formData_618214, nil)

var postPutScheduledUpdateGroupAction* = Call_PostPutScheduledUpdateGroupAction_618190(
    name: "postPutScheduledUpdateGroupAction", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=PutScheduledUpdateGroupAction",
    validator: validate_PostPutScheduledUpdateGroupAction_618191, base: "/",
    url: url_PostPutScheduledUpdateGroupAction_618192,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutScheduledUpdateGroupAction_618166 = ref object of OpenApiRestCall_615866
proc url_GetPutScheduledUpdateGroupAction_618168(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPutScheduledUpdateGroupAction_618167(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates or updates a scheduled scaling action for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html">Scheduled Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DesiredCapacity: JInt
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   ScheduledActionName: JString (required)
  ##                      : The name of this scaling action.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Time: JString
  ##       : This parameter is no longer used.
  ##   MinSize: JInt
  ##          : The minimum number of instances in the Auto Scaling group.
  ##   StartTime: JString
  ##            : <p>The date and time for this action to start, in YYYY-MM-DDThh:mm:ssZ format in UTC/GMT only and in quotes (for example, <code>"2019-06-01T00:00:00Z"</code>).</p> <p>If you specify <code>Recurrence</code> and <code>StartTime</code>, Amazon EC2 Auto Scaling performs the action at this time, and then performs the action based on the specified recurrence.</p> <p>If you try to schedule your action in the past, Amazon EC2 Auto Scaling returns an error message.</p>
  ##   Recurrence: JString
  ##             : <p>The recurring schedule for this action, in Unix cron syntax format. This format consists of five fields separated by white spaces: [Minute] [Hour] [Day_of_Month] [Month_of_Year] [Day_of_Week]. The value must be in quotes (for example, <code>"30 0 1 1,6,12 *"</code>). For more information about this format, see <a href="http://crontab.org">Crontab</a>.</p> <p>When <code>StartTime</code> and <code>EndTime</code> are specified with <code>Recurrence</code>, they form the boundaries of when the recurring action starts and stops.</p>
  ##   Action: JString (required)
  ##   MaxSize: JInt
  ##          : The maximum number of instances in the Auto Scaling group.
  ##   EndTime: JString
  ##          : The date and time for the recurring schedule to end. Amazon EC2 Auto Scaling does not perform the action after this time.
  ##   Version: JString (required)
  section = newJObject()
  var valid_618169 = query.getOrDefault("DesiredCapacity")
  valid_618169 = validateParameter(valid_618169, JInt, required = false, default = nil)
  if valid_618169 != nil:
    section.add "DesiredCapacity", valid_618169
  assert query != nil, "query argument is necessary due to required `ScheduledActionName` field"
  var valid_618170 = query.getOrDefault("ScheduledActionName")
  valid_618170 = validateParameter(valid_618170, JString, required = true,
                                 default = nil)
  if valid_618170 != nil:
    section.add "ScheduledActionName", valid_618170
  var valid_618171 = query.getOrDefault("AutoScalingGroupName")
  valid_618171 = validateParameter(valid_618171, JString, required = true,
                                 default = nil)
  if valid_618171 != nil:
    section.add "AutoScalingGroupName", valid_618171
  var valid_618172 = query.getOrDefault("Time")
  valid_618172 = validateParameter(valid_618172, JString, required = false,
                                 default = nil)
  if valid_618172 != nil:
    section.add "Time", valid_618172
  var valid_618173 = query.getOrDefault("MinSize")
  valid_618173 = validateParameter(valid_618173, JInt, required = false, default = nil)
  if valid_618173 != nil:
    section.add "MinSize", valid_618173
  var valid_618174 = query.getOrDefault("StartTime")
  valid_618174 = validateParameter(valid_618174, JString, required = false,
                                 default = nil)
  if valid_618174 != nil:
    section.add "StartTime", valid_618174
  var valid_618175 = query.getOrDefault("Recurrence")
  valid_618175 = validateParameter(valid_618175, JString, required = false,
                                 default = nil)
  if valid_618175 != nil:
    section.add "Recurrence", valid_618175
  var valid_618176 = query.getOrDefault("Action")
  valid_618176 = validateParameter(valid_618176, JString, required = true, default = newJString(
      "PutScheduledUpdateGroupAction"))
  if valid_618176 != nil:
    section.add "Action", valid_618176
  var valid_618177 = query.getOrDefault("MaxSize")
  valid_618177 = validateParameter(valid_618177, JInt, required = false, default = nil)
  if valid_618177 != nil:
    section.add "MaxSize", valid_618177
  var valid_618178 = query.getOrDefault("EndTime")
  valid_618178 = validateParameter(valid_618178, JString, required = false,
                                 default = nil)
  if valid_618178 != nil:
    section.add "EndTime", valid_618178
  var valid_618179 = query.getOrDefault("Version")
  valid_618179 = validateParameter(valid_618179, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_618179 != nil:
    section.add "Version", valid_618179
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_618180 = header.getOrDefault("X-Amz-Date")
  valid_618180 = validateParameter(valid_618180, JString, required = false,
                                 default = nil)
  if valid_618180 != nil:
    section.add "X-Amz-Date", valid_618180
  var valid_618181 = header.getOrDefault("X-Amz-Security-Token")
  valid_618181 = validateParameter(valid_618181, JString, required = false,
                                 default = nil)
  if valid_618181 != nil:
    section.add "X-Amz-Security-Token", valid_618181
  var valid_618182 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618182 = validateParameter(valid_618182, JString, required = false,
                                 default = nil)
  if valid_618182 != nil:
    section.add "X-Amz-Content-Sha256", valid_618182
  var valid_618183 = header.getOrDefault("X-Amz-Algorithm")
  valid_618183 = validateParameter(valid_618183, JString, required = false,
                                 default = nil)
  if valid_618183 != nil:
    section.add "X-Amz-Algorithm", valid_618183
  var valid_618184 = header.getOrDefault("X-Amz-Signature")
  valid_618184 = validateParameter(valid_618184, JString, required = false,
                                 default = nil)
  if valid_618184 != nil:
    section.add "X-Amz-Signature", valid_618184
  var valid_618185 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618185 = validateParameter(valid_618185, JString, required = false,
                                 default = nil)
  if valid_618185 != nil:
    section.add "X-Amz-SignedHeaders", valid_618185
  var valid_618186 = header.getOrDefault("X-Amz-Credential")
  valid_618186 = validateParameter(valid_618186, JString, required = false,
                                 default = nil)
  if valid_618186 != nil:
    section.add "X-Amz-Credential", valid_618186
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618187: Call_GetPutScheduledUpdateGroupAction_618166;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates or updates a scheduled scaling action for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html">Scheduled Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_618187.validator(path, query, header, formData, body)
  let scheme = call_618187.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618187.url(scheme.get, call_618187.host, call_618187.base,
                         call_618187.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618187, url, valid)

proc call*(call_618188: Call_GetPutScheduledUpdateGroupAction_618166;
          ScheduledActionName: string; AutoScalingGroupName: string;
          DesiredCapacity: int = 0; Time: string = ""; MinSize: int = 0;
          StartTime: string = ""; Recurrence: string = "";
          Action: string = "PutScheduledUpdateGroupAction"; MaxSize: int = 0;
          EndTime: string = ""; Version: string = "2011-01-01"): Recallable =
  ## getPutScheduledUpdateGroupAction
  ## <p>Creates or updates a scheduled scaling action for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html">Scheduled Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   DesiredCapacity: int
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   ScheduledActionName: string (required)
  ##                      : The name of this scaling action.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Time: string
  ##       : This parameter is no longer used.
  ##   MinSize: int
  ##          : The minimum number of instances in the Auto Scaling group.
  ##   StartTime: string
  ##            : <p>The date and time for this action to start, in YYYY-MM-DDThh:mm:ssZ format in UTC/GMT only and in quotes (for example, <code>"2019-06-01T00:00:00Z"</code>).</p> <p>If you specify <code>Recurrence</code> and <code>StartTime</code>, Amazon EC2 Auto Scaling performs the action at this time, and then performs the action based on the specified recurrence.</p> <p>If you try to schedule your action in the past, Amazon EC2 Auto Scaling returns an error message.</p>
  ##   Recurrence: string
  ##             : <p>The recurring schedule for this action, in Unix cron syntax format. This format consists of five fields separated by white spaces: [Minute] [Hour] [Day_of_Month] [Month_of_Year] [Day_of_Week]. The value must be in quotes (for example, <code>"30 0 1 1,6,12 *"</code>). For more information about this format, see <a href="http://crontab.org">Crontab</a>.</p> <p>When <code>StartTime</code> and <code>EndTime</code> are specified with <code>Recurrence</code>, they form the boundaries of when the recurring action starts and stops.</p>
  ##   Action: string (required)
  ##   MaxSize: int
  ##          : The maximum number of instances in the Auto Scaling group.
  ##   EndTime: string
  ##          : The date and time for the recurring schedule to end. Amazon EC2 Auto Scaling does not perform the action after this time.
  ##   Version: string (required)
  var query_618189 = newJObject()
  add(query_618189, "DesiredCapacity", newJInt(DesiredCapacity))
  add(query_618189, "ScheduledActionName", newJString(ScheduledActionName))
  add(query_618189, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_618189, "Time", newJString(Time))
  add(query_618189, "MinSize", newJInt(MinSize))
  add(query_618189, "StartTime", newJString(StartTime))
  add(query_618189, "Recurrence", newJString(Recurrence))
  add(query_618189, "Action", newJString(Action))
  add(query_618189, "MaxSize", newJInt(MaxSize))
  add(query_618189, "EndTime", newJString(EndTime))
  add(query_618189, "Version", newJString(Version))
  result = call_618188.call(nil, query_618189, nil, nil, nil)

var getPutScheduledUpdateGroupAction* = Call_GetPutScheduledUpdateGroupAction_618166(
    name: "getPutScheduledUpdateGroupAction", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=PutScheduledUpdateGroupAction",
    validator: validate_GetPutScheduledUpdateGroupAction_618167, base: "/",
    url: url_GetPutScheduledUpdateGroupAction_618168,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRecordLifecycleActionHeartbeat_618234 = ref object of OpenApiRestCall_615866
proc url_PostRecordLifecycleActionHeartbeat_618236(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRecordLifecycleActionHeartbeat_618235(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using <a>PutLifecycleHook</a>.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p> <b>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</b> </p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html">Auto Scaling Lifecycle</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_618237 = query.getOrDefault("Action")
  valid_618237 = validateParameter(valid_618237, JString, required = true, default = newJString(
      "RecordLifecycleActionHeartbeat"))
  if valid_618237 != nil:
    section.add "Action", valid_618237
  var valid_618238 = query.getOrDefault("Version")
  valid_618238 = validateParameter(valid_618238, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_618238 != nil:
    section.add "Version", valid_618238
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_618239 = header.getOrDefault("X-Amz-Date")
  valid_618239 = validateParameter(valid_618239, JString, required = false,
                                 default = nil)
  if valid_618239 != nil:
    section.add "X-Amz-Date", valid_618239
  var valid_618240 = header.getOrDefault("X-Amz-Security-Token")
  valid_618240 = validateParameter(valid_618240, JString, required = false,
                                 default = nil)
  if valid_618240 != nil:
    section.add "X-Amz-Security-Token", valid_618240
  var valid_618241 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618241 = validateParameter(valid_618241, JString, required = false,
                                 default = nil)
  if valid_618241 != nil:
    section.add "X-Amz-Content-Sha256", valid_618241
  var valid_618242 = header.getOrDefault("X-Amz-Algorithm")
  valid_618242 = validateParameter(valid_618242, JString, required = false,
                                 default = nil)
  if valid_618242 != nil:
    section.add "X-Amz-Algorithm", valid_618242
  var valid_618243 = header.getOrDefault("X-Amz-Signature")
  valid_618243 = validateParameter(valid_618243, JString, required = false,
                                 default = nil)
  if valid_618243 != nil:
    section.add "X-Amz-Signature", valid_618243
  var valid_618244 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618244 = validateParameter(valid_618244, JString, required = false,
                                 default = nil)
  if valid_618244 != nil:
    section.add "X-Amz-SignedHeaders", valid_618244
  var valid_618245 = header.getOrDefault("X-Amz-Credential")
  valid_618245 = validateParameter(valid_618245, JString, required = false,
                                 default = nil)
  if valid_618245 != nil:
    section.add "X-Amz-Credential", valid_618245
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceId: JString
  ##             : The ID of the instance.
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   LifecycleActionToken: JString
  ##                       : A token that uniquely identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target that you specified when you created the lifecycle hook.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_618246 = formData.getOrDefault("AutoScalingGroupName")
  valid_618246 = validateParameter(valid_618246, JString, required = true,
                                 default = nil)
  if valid_618246 != nil:
    section.add "AutoScalingGroupName", valid_618246
  var valid_618247 = formData.getOrDefault("InstanceId")
  valid_618247 = validateParameter(valid_618247, JString, required = false,
                                 default = nil)
  if valid_618247 != nil:
    section.add "InstanceId", valid_618247
  var valid_618248 = formData.getOrDefault("LifecycleHookName")
  valid_618248 = validateParameter(valid_618248, JString, required = true,
                                 default = nil)
  if valid_618248 != nil:
    section.add "LifecycleHookName", valid_618248
  var valid_618249 = formData.getOrDefault("LifecycleActionToken")
  valid_618249 = validateParameter(valid_618249, JString, required = false,
                                 default = nil)
  if valid_618249 != nil:
    section.add "LifecycleActionToken", valid_618249
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618250: Call_PostRecordLifecycleActionHeartbeat_618234;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using <a>PutLifecycleHook</a>.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p> <b>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</b> </p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html">Auto Scaling Lifecycle</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_618250.validator(path, query, header, formData, body)
  let scheme = call_618250.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618250.url(scheme.get, call_618250.host, call_618250.base,
                         call_618250.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618250, url, valid)

proc call*(call_618251: Call_PostRecordLifecycleActionHeartbeat_618234;
          AutoScalingGroupName: string; LifecycleHookName: string;
          Action: string = "RecordLifecycleActionHeartbeat";
          InstanceId: string = ""; Version: string = "2011-01-01";
          LifecycleActionToken: string = ""): Recallable =
  ## postRecordLifecycleActionHeartbeat
  ## <p>Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using <a>PutLifecycleHook</a>.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p> <b>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</b> </p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html">Auto Scaling Lifecycle</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   InstanceId: string
  ##             : The ID of the instance.
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   Version: string (required)
  ##   LifecycleActionToken: string
  ##                       : A token that uniquely identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target that you specified when you created the lifecycle hook.
  var query_618252 = newJObject()
  var formData_618253 = newJObject()
  add(formData_618253, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_618252, "Action", newJString(Action))
  add(formData_618253, "InstanceId", newJString(InstanceId))
  add(formData_618253, "LifecycleHookName", newJString(LifecycleHookName))
  add(query_618252, "Version", newJString(Version))
  add(formData_618253, "LifecycleActionToken", newJString(LifecycleActionToken))
  result = call_618251.call(nil, query_618252, nil, formData_618253, nil)

var postRecordLifecycleActionHeartbeat* = Call_PostRecordLifecycleActionHeartbeat_618234(
    name: "postRecordLifecycleActionHeartbeat", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=RecordLifecycleActionHeartbeat",
    validator: validate_PostRecordLifecycleActionHeartbeat_618235, base: "/",
    url: url_PostRecordLifecycleActionHeartbeat_618236,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRecordLifecycleActionHeartbeat_618215 = ref object of OpenApiRestCall_615866
proc url_GetRecordLifecycleActionHeartbeat_618217(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRecordLifecycleActionHeartbeat_618216(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using <a>PutLifecycleHook</a>.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p> <b>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</b> </p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html">Auto Scaling Lifecycle</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   InstanceId: JString
  ##             : The ID of the instance.
  ##   Version: JString (required)
  ##   LifecycleActionToken: JString
  ##                       : A token that uniquely identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target that you specified when you created the lifecycle hook.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_618218 = query.getOrDefault("AutoScalingGroupName")
  valid_618218 = validateParameter(valid_618218, JString, required = true,
                                 default = nil)
  if valid_618218 != nil:
    section.add "AutoScalingGroupName", valid_618218
  var valid_618219 = query.getOrDefault("Action")
  valid_618219 = validateParameter(valid_618219, JString, required = true, default = newJString(
      "RecordLifecycleActionHeartbeat"))
  if valid_618219 != nil:
    section.add "Action", valid_618219
  var valid_618220 = query.getOrDefault("LifecycleHookName")
  valid_618220 = validateParameter(valid_618220, JString, required = true,
                                 default = nil)
  if valid_618220 != nil:
    section.add "LifecycleHookName", valid_618220
  var valid_618221 = query.getOrDefault("InstanceId")
  valid_618221 = validateParameter(valid_618221, JString, required = false,
                                 default = nil)
  if valid_618221 != nil:
    section.add "InstanceId", valid_618221
  var valid_618222 = query.getOrDefault("Version")
  valid_618222 = validateParameter(valid_618222, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_618222 != nil:
    section.add "Version", valid_618222
  var valid_618223 = query.getOrDefault("LifecycleActionToken")
  valid_618223 = validateParameter(valid_618223, JString, required = false,
                                 default = nil)
  if valid_618223 != nil:
    section.add "LifecycleActionToken", valid_618223
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_618224 = header.getOrDefault("X-Amz-Date")
  valid_618224 = validateParameter(valid_618224, JString, required = false,
                                 default = nil)
  if valid_618224 != nil:
    section.add "X-Amz-Date", valid_618224
  var valid_618225 = header.getOrDefault("X-Amz-Security-Token")
  valid_618225 = validateParameter(valid_618225, JString, required = false,
                                 default = nil)
  if valid_618225 != nil:
    section.add "X-Amz-Security-Token", valid_618225
  var valid_618226 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618226 = validateParameter(valid_618226, JString, required = false,
                                 default = nil)
  if valid_618226 != nil:
    section.add "X-Amz-Content-Sha256", valid_618226
  var valid_618227 = header.getOrDefault("X-Amz-Algorithm")
  valid_618227 = validateParameter(valid_618227, JString, required = false,
                                 default = nil)
  if valid_618227 != nil:
    section.add "X-Amz-Algorithm", valid_618227
  var valid_618228 = header.getOrDefault("X-Amz-Signature")
  valid_618228 = validateParameter(valid_618228, JString, required = false,
                                 default = nil)
  if valid_618228 != nil:
    section.add "X-Amz-Signature", valid_618228
  var valid_618229 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618229 = validateParameter(valid_618229, JString, required = false,
                                 default = nil)
  if valid_618229 != nil:
    section.add "X-Amz-SignedHeaders", valid_618229
  var valid_618230 = header.getOrDefault("X-Amz-Credential")
  valid_618230 = validateParameter(valid_618230, JString, required = false,
                                 default = nil)
  if valid_618230 != nil:
    section.add "X-Amz-Credential", valid_618230
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618231: Call_GetRecordLifecycleActionHeartbeat_618215;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using <a>PutLifecycleHook</a>.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p> <b>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</b> </p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html">Auto Scaling Lifecycle</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_618231.validator(path, query, header, formData, body)
  let scheme = call_618231.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618231.url(scheme.get, call_618231.host, call_618231.base,
                         call_618231.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618231, url, valid)

proc call*(call_618232: Call_GetRecordLifecycleActionHeartbeat_618215;
          AutoScalingGroupName: string; LifecycleHookName: string;
          Action: string = "RecordLifecycleActionHeartbeat";
          InstanceId: string = ""; Version: string = "2011-01-01";
          LifecycleActionToken: string = ""): Recallable =
  ## getRecordLifecycleActionHeartbeat
  ## <p>Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using <a>PutLifecycleHook</a>.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p> <b>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</b> </p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html">Auto Scaling Lifecycle</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   InstanceId: string
  ##             : The ID of the instance.
  ##   Version: string (required)
  ##   LifecycleActionToken: string
  ##                       : A token that uniquely identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target that you specified when you created the lifecycle hook.
  var query_618233 = newJObject()
  add(query_618233, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_618233, "Action", newJString(Action))
  add(query_618233, "LifecycleHookName", newJString(LifecycleHookName))
  add(query_618233, "InstanceId", newJString(InstanceId))
  add(query_618233, "Version", newJString(Version))
  add(query_618233, "LifecycleActionToken", newJString(LifecycleActionToken))
  result = call_618232.call(nil, query_618233, nil, nil, nil)

var getRecordLifecycleActionHeartbeat* = Call_GetRecordLifecycleActionHeartbeat_618215(
    name: "getRecordLifecycleActionHeartbeat", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=RecordLifecycleActionHeartbeat",
    validator: validate_GetRecordLifecycleActionHeartbeat_618216, base: "/",
    url: url_GetRecordLifecycleActionHeartbeat_618217,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResumeProcesses_618271 = ref object of OpenApiRestCall_615866
proc url_PostResumeProcesses_618273(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostResumeProcesses_618272(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Resumes the specified suspended automatic scaling processes, or all suspended process, for the specified Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_618274 = query.getOrDefault("Action")
  valid_618274 = validateParameter(valid_618274, JString, required = true,
                                 default = newJString("ResumeProcesses"))
  if valid_618274 != nil:
    section.add "Action", valid_618274
  var valid_618275 = query.getOrDefault("Version")
  valid_618275 = validateParameter(valid_618275, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_618275 != nil:
    section.add "Version", valid_618275
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_618276 = header.getOrDefault("X-Amz-Date")
  valid_618276 = validateParameter(valid_618276, JString, required = false,
                                 default = nil)
  if valid_618276 != nil:
    section.add "X-Amz-Date", valid_618276
  var valid_618277 = header.getOrDefault("X-Amz-Security-Token")
  valid_618277 = validateParameter(valid_618277, JString, required = false,
                                 default = nil)
  if valid_618277 != nil:
    section.add "X-Amz-Security-Token", valid_618277
  var valid_618278 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618278 = validateParameter(valid_618278, JString, required = false,
                                 default = nil)
  if valid_618278 != nil:
    section.add "X-Amz-Content-Sha256", valid_618278
  var valid_618279 = header.getOrDefault("X-Amz-Algorithm")
  valid_618279 = validateParameter(valid_618279, JString, required = false,
                                 default = nil)
  if valid_618279 != nil:
    section.add "X-Amz-Algorithm", valid_618279
  var valid_618280 = header.getOrDefault("X-Amz-Signature")
  valid_618280 = validateParameter(valid_618280, JString, required = false,
                                 default = nil)
  if valid_618280 != nil:
    section.add "X-Amz-Signature", valid_618280
  var valid_618281 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618281 = validateParameter(valid_618281, JString, required = false,
                                 default = nil)
  if valid_618281 != nil:
    section.add "X-Amz-SignedHeaders", valid_618281
  var valid_618282 = header.getOrDefault("X-Amz-Credential")
  valid_618282 = validateParameter(valid_618282, JString, required = false,
                                 default = nil)
  if valid_618282 != nil:
    section.add "X-Amz-Credential", valid_618282
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_618283 = formData.getOrDefault("AutoScalingGroupName")
  valid_618283 = validateParameter(valid_618283, JString, required = true,
                                 default = nil)
  if valid_618283 != nil:
    section.add "AutoScalingGroupName", valid_618283
  var valid_618284 = formData.getOrDefault("ScalingProcesses")
  valid_618284 = validateParameter(valid_618284, JArray, required = false,
                                 default = nil)
  if valid_618284 != nil:
    section.add "ScalingProcesses", valid_618284
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618285: Call_PostResumeProcesses_618271; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Resumes the specified suspended automatic scaling processes, or all suspended process, for the specified Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_618285.validator(path, query, header, formData, body)
  let scheme = call_618285.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618285.url(scheme.get, call_618285.host, call_618285.base,
                         call_618285.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618285, url, valid)

proc call*(call_618286: Call_PostResumeProcesses_618271;
          AutoScalingGroupName: string; ScalingProcesses: JsonNode = nil;
          Action: string = "ResumeProcesses"; Version: string = "2011-01-01"): Recallable =
  ## postResumeProcesses
  ## <p>Resumes the specified suspended automatic scaling processes, or all suspended process, for the specified Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_618287 = newJObject()
  var formData_618288 = newJObject()
  add(formData_618288, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if ScalingProcesses != nil:
    formData_618288.add "ScalingProcesses", ScalingProcesses
  add(query_618287, "Action", newJString(Action))
  add(query_618287, "Version", newJString(Version))
  result = call_618286.call(nil, query_618287, nil, formData_618288, nil)

var postResumeProcesses* = Call_PostResumeProcesses_618271(
    name: "postResumeProcesses", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=ResumeProcesses",
    validator: validate_PostResumeProcesses_618272, base: "/",
    url: url_PostResumeProcesses_618273, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResumeProcesses_618254 = ref object of OpenApiRestCall_615866
proc url_GetResumeProcesses_618256(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetResumeProcesses_618255(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Resumes the specified suspended automatic scaling processes, or all suspended process, for the specified Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_618257 = query.getOrDefault("ScalingProcesses")
  valid_618257 = validateParameter(valid_618257, JArray, required = false,
                                 default = nil)
  if valid_618257 != nil:
    section.add "ScalingProcesses", valid_618257
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_618258 = query.getOrDefault("AutoScalingGroupName")
  valid_618258 = validateParameter(valid_618258, JString, required = true,
                                 default = nil)
  if valid_618258 != nil:
    section.add "AutoScalingGroupName", valid_618258
  var valid_618259 = query.getOrDefault("Action")
  valid_618259 = validateParameter(valid_618259, JString, required = true,
                                 default = newJString("ResumeProcesses"))
  if valid_618259 != nil:
    section.add "Action", valid_618259
  var valid_618260 = query.getOrDefault("Version")
  valid_618260 = validateParameter(valid_618260, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_618260 != nil:
    section.add "Version", valid_618260
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_618261 = header.getOrDefault("X-Amz-Date")
  valid_618261 = validateParameter(valid_618261, JString, required = false,
                                 default = nil)
  if valid_618261 != nil:
    section.add "X-Amz-Date", valid_618261
  var valid_618262 = header.getOrDefault("X-Amz-Security-Token")
  valid_618262 = validateParameter(valid_618262, JString, required = false,
                                 default = nil)
  if valid_618262 != nil:
    section.add "X-Amz-Security-Token", valid_618262
  var valid_618263 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618263 = validateParameter(valid_618263, JString, required = false,
                                 default = nil)
  if valid_618263 != nil:
    section.add "X-Amz-Content-Sha256", valid_618263
  var valid_618264 = header.getOrDefault("X-Amz-Algorithm")
  valid_618264 = validateParameter(valid_618264, JString, required = false,
                                 default = nil)
  if valid_618264 != nil:
    section.add "X-Amz-Algorithm", valid_618264
  var valid_618265 = header.getOrDefault("X-Amz-Signature")
  valid_618265 = validateParameter(valid_618265, JString, required = false,
                                 default = nil)
  if valid_618265 != nil:
    section.add "X-Amz-Signature", valid_618265
  var valid_618266 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618266 = validateParameter(valid_618266, JString, required = false,
                                 default = nil)
  if valid_618266 != nil:
    section.add "X-Amz-SignedHeaders", valid_618266
  var valid_618267 = header.getOrDefault("X-Amz-Credential")
  valid_618267 = validateParameter(valid_618267, JString, required = false,
                                 default = nil)
  if valid_618267 != nil:
    section.add "X-Amz-Credential", valid_618267
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618268: Call_GetResumeProcesses_618254; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Resumes the specified suspended automatic scaling processes, or all suspended process, for the specified Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_618268.validator(path, query, header, formData, body)
  let scheme = call_618268.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618268.url(scheme.get, call_618268.host, call_618268.base,
                         call_618268.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618268, url, valid)

proc call*(call_618269: Call_GetResumeProcesses_618254;
          AutoScalingGroupName: string; ScalingProcesses: JsonNode = nil;
          Action: string = "ResumeProcesses"; Version: string = "2011-01-01"): Recallable =
  ## getResumeProcesses
  ## <p>Resumes the specified suspended automatic scaling processes, or all suspended process, for the specified Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_618270 = newJObject()
  if ScalingProcesses != nil:
    query_618270.add "ScalingProcesses", ScalingProcesses
  add(query_618270, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_618270, "Action", newJString(Action))
  add(query_618270, "Version", newJString(Version))
  result = call_618269.call(nil, query_618270, nil, nil, nil)

var getResumeProcesses* = Call_GetResumeProcesses_618254(
    name: "getResumeProcesses", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=ResumeProcesses",
    validator: validate_GetResumeProcesses_618255, base: "/",
    url: url_GetResumeProcesses_618256, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetDesiredCapacity_618307 = ref object of OpenApiRestCall_615866
proc url_PostSetDesiredCapacity_618309(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSetDesiredCapacity_618308(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the size of the specified Auto Scaling group.</p> <p>For more information about desired capacity, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">What Is Amazon EC2 Auto Scaling?</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_618310 = query.getOrDefault("Action")
  valid_618310 = validateParameter(valid_618310, JString, required = true,
                                 default = newJString("SetDesiredCapacity"))
  if valid_618310 != nil:
    section.add "Action", valid_618310
  var valid_618311 = query.getOrDefault("Version")
  valid_618311 = validateParameter(valid_618311, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_618311 != nil:
    section.add "Version", valid_618311
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_618312 = header.getOrDefault("X-Amz-Date")
  valid_618312 = validateParameter(valid_618312, JString, required = false,
                                 default = nil)
  if valid_618312 != nil:
    section.add "X-Amz-Date", valid_618312
  var valid_618313 = header.getOrDefault("X-Amz-Security-Token")
  valid_618313 = validateParameter(valid_618313, JString, required = false,
                                 default = nil)
  if valid_618313 != nil:
    section.add "X-Amz-Security-Token", valid_618313
  var valid_618314 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618314 = validateParameter(valid_618314, JString, required = false,
                                 default = nil)
  if valid_618314 != nil:
    section.add "X-Amz-Content-Sha256", valid_618314
  var valid_618315 = header.getOrDefault("X-Amz-Algorithm")
  valid_618315 = validateParameter(valid_618315, JString, required = false,
                                 default = nil)
  if valid_618315 != nil:
    section.add "X-Amz-Algorithm", valid_618315
  var valid_618316 = header.getOrDefault("X-Amz-Signature")
  valid_618316 = validateParameter(valid_618316, JString, required = false,
                                 default = nil)
  if valid_618316 != nil:
    section.add "X-Amz-Signature", valid_618316
  var valid_618317 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618317 = validateParameter(valid_618317, JString, required = false,
                                 default = nil)
  if valid_618317 != nil:
    section.add "X-Amz-SignedHeaders", valid_618317
  var valid_618318 = header.getOrDefault("X-Amz-Credential")
  valid_618318 = validateParameter(valid_618318, JString, required = false,
                                 default = nil)
  if valid_618318 != nil:
    section.add "X-Amz-Credential", valid_618318
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   DesiredCapacity: JInt (required)
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   HonorCooldown: JBool
  ##                : Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before initiating a scaling activity to set your Auto Scaling group to its new capacity. By default, Amazon EC2 Auto Scaling does not honor the cooldown period during manual scaling activities.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_618319 = formData.getOrDefault("AutoScalingGroupName")
  valid_618319 = validateParameter(valid_618319, JString, required = true,
                                 default = nil)
  if valid_618319 != nil:
    section.add "AutoScalingGroupName", valid_618319
  var valid_618320 = formData.getOrDefault("DesiredCapacity")
  valid_618320 = validateParameter(valid_618320, JInt, required = true, default = nil)
  if valid_618320 != nil:
    section.add "DesiredCapacity", valid_618320
  var valid_618321 = formData.getOrDefault("HonorCooldown")
  valid_618321 = validateParameter(valid_618321, JBool, required = false, default = nil)
  if valid_618321 != nil:
    section.add "HonorCooldown", valid_618321
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618322: Call_PostSetDesiredCapacity_618307; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the size of the specified Auto Scaling group.</p> <p>For more information about desired capacity, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">What Is Amazon EC2 Auto Scaling?</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_618322.validator(path, query, header, formData, body)
  let scheme = call_618322.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618322.url(scheme.get, call_618322.host, call_618322.base,
                         call_618322.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618322, url, valid)

proc call*(call_618323: Call_PostSetDesiredCapacity_618307;
          AutoScalingGroupName: string; DesiredCapacity: int;
          HonorCooldown: bool = false; Action: string = "SetDesiredCapacity";
          Version: string = "2011-01-01"): Recallable =
  ## postSetDesiredCapacity
  ## <p>Sets the size of the specified Auto Scaling group.</p> <p>For more information about desired capacity, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">What Is Amazon EC2 Auto Scaling?</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   DesiredCapacity: int (required)
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   HonorCooldown: bool
  ##                : Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before initiating a scaling activity to set your Auto Scaling group to its new capacity. By default, Amazon EC2 Auto Scaling does not honor the cooldown period during manual scaling activities.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_618324 = newJObject()
  var formData_618325 = newJObject()
  add(formData_618325, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_618325, "DesiredCapacity", newJInt(DesiredCapacity))
  add(formData_618325, "HonorCooldown", newJBool(HonorCooldown))
  add(query_618324, "Action", newJString(Action))
  add(query_618324, "Version", newJString(Version))
  result = call_618323.call(nil, query_618324, nil, formData_618325, nil)

var postSetDesiredCapacity* = Call_PostSetDesiredCapacity_618307(
    name: "postSetDesiredCapacity", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=SetDesiredCapacity",
    validator: validate_PostSetDesiredCapacity_618308, base: "/",
    url: url_PostSetDesiredCapacity_618309, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetDesiredCapacity_618289 = ref object of OpenApiRestCall_615866
proc url_GetSetDesiredCapacity_618291(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSetDesiredCapacity_618290(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the size of the specified Auto Scaling group.</p> <p>For more information about desired capacity, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">What Is Amazon EC2 Auto Scaling?</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DesiredCapacity: JInt (required)
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   HonorCooldown: JBool
  ##                : Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before initiating a scaling activity to set your Auto Scaling group to its new capacity. By default, Amazon EC2 Auto Scaling does not honor the cooldown period during manual scaling activities.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `DesiredCapacity` field"
  var valid_618292 = query.getOrDefault("DesiredCapacity")
  valid_618292 = validateParameter(valid_618292, JInt, required = true, default = nil)
  if valid_618292 != nil:
    section.add "DesiredCapacity", valid_618292
  var valid_618293 = query.getOrDefault("AutoScalingGroupName")
  valid_618293 = validateParameter(valid_618293, JString, required = true,
                                 default = nil)
  if valid_618293 != nil:
    section.add "AutoScalingGroupName", valid_618293
  var valid_618294 = query.getOrDefault("Action")
  valid_618294 = validateParameter(valid_618294, JString, required = true,
                                 default = newJString("SetDesiredCapacity"))
  if valid_618294 != nil:
    section.add "Action", valid_618294
  var valid_618295 = query.getOrDefault("HonorCooldown")
  valid_618295 = validateParameter(valid_618295, JBool, required = false, default = nil)
  if valid_618295 != nil:
    section.add "HonorCooldown", valid_618295
  var valid_618296 = query.getOrDefault("Version")
  valid_618296 = validateParameter(valid_618296, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_618296 != nil:
    section.add "Version", valid_618296
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_618297 = header.getOrDefault("X-Amz-Date")
  valid_618297 = validateParameter(valid_618297, JString, required = false,
                                 default = nil)
  if valid_618297 != nil:
    section.add "X-Amz-Date", valid_618297
  var valid_618298 = header.getOrDefault("X-Amz-Security-Token")
  valid_618298 = validateParameter(valid_618298, JString, required = false,
                                 default = nil)
  if valid_618298 != nil:
    section.add "X-Amz-Security-Token", valid_618298
  var valid_618299 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618299 = validateParameter(valid_618299, JString, required = false,
                                 default = nil)
  if valid_618299 != nil:
    section.add "X-Amz-Content-Sha256", valid_618299
  var valid_618300 = header.getOrDefault("X-Amz-Algorithm")
  valid_618300 = validateParameter(valid_618300, JString, required = false,
                                 default = nil)
  if valid_618300 != nil:
    section.add "X-Amz-Algorithm", valid_618300
  var valid_618301 = header.getOrDefault("X-Amz-Signature")
  valid_618301 = validateParameter(valid_618301, JString, required = false,
                                 default = nil)
  if valid_618301 != nil:
    section.add "X-Amz-Signature", valid_618301
  var valid_618302 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618302 = validateParameter(valid_618302, JString, required = false,
                                 default = nil)
  if valid_618302 != nil:
    section.add "X-Amz-SignedHeaders", valid_618302
  var valid_618303 = header.getOrDefault("X-Amz-Credential")
  valid_618303 = validateParameter(valid_618303, JString, required = false,
                                 default = nil)
  if valid_618303 != nil:
    section.add "X-Amz-Credential", valid_618303
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618304: Call_GetSetDesiredCapacity_618289; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the size of the specified Auto Scaling group.</p> <p>For more information about desired capacity, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">What Is Amazon EC2 Auto Scaling?</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_618304.validator(path, query, header, formData, body)
  let scheme = call_618304.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618304.url(scheme.get, call_618304.host, call_618304.base,
                         call_618304.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618304, url, valid)

proc call*(call_618305: Call_GetSetDesiredCapacity_618289; DesiredCapacity: int;
          AutoScalingGroupName: string; Action: string = "SetDesiredCapacity";
          HonorCooldown: bool = false; Version: string = "2011-01-01"): Recallable =
  ## getSetDesiredCapacity
  ## <p>Sets the size of the specified Auto Scaling group.</p> <p>For more information about desired capacity, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">What Is Amazon EC2 Auto Scaling?</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   DesiredCapacity: int (required)
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   HonorCooldown: bool
  ##                : Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before initiating a scaling activity to set your Auto Scaling group to its new capacity. By default, Amazon EC2 Auto Scaling does not honor the cooldown period during manual scaling activities.
  ##   Version: string (required)
  var query_618306 = newJObject()
  add(query_618306, "DesiredCapacity", newJInt(DesiredCapacity))
  add(query_618306, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_618306, "Action", newJString(Action))
  add(query_618306, "HonorCooldown", newJBool(HonorCooldown))
  add(query_618306, "Version", newJString(Version))
  result = call_618305.call(nil, query_618306, nil, nil, nil)

var getSetDesiredCapacity* = Call_GetSetDesiredCapacity_618289(
    name: "getSetDesiredCapacity", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=SetDesiredCapacity",
    validator: validate_GetSetDesiredCapacity_618290, base: "/",
    url: url_GetSetDesiredCapacity_618291, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetInstanceHealth_618344 = ref object of OpenApiRestCall_615866
proc url_PostSetInstanceHealth_618346(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSetInstanceHealth_618345(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the health status of the specified instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_618347 = query.getOrDefault("Action")
  valid_618347 = validateParameter(valid_618347, JString, required = true,
                                 default = newJString("SetInstanceHealth"))
  if valid_618347 != nil:
    section.add "Action", valid_618347
  var valid_618348 = query.getOrDefault("Version")
  valid_618348 = validateParameter(valid_618348, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_618348 != nil:
    section.add "Version", valid_618348
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_618349 = header.getOrDefault("X-Amz-Date")
  valid_618349 = validateParameter(valid_618349, JString, required = false,
                                 default = nil)
  if valid_618349 != nil:
    section.add "X-Amz-Date", valid_618349
  var valid_618350 = header.getOrDefault("X-Amz-Security-Token")
  valid_618350 = validateParameter(valid_618350, JString, required = false,
                                 default = nil)
  if valid_618350 != nil:
    section.add "X-Amz-Security-Token", valid_618350
  var valid_618351 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618351 = validateParameter(valid_618351, JString, required = false,
                                 default = nil)
  if valid_618351 != nil:
    section.add "X-Amz-Content-Sha256", valid_618351
  var valid_618352 = header.getOrDefault("X-Amz-Algorithm")
  valid_618352 = validateParameter(valid_618352, JString, required = false,
                                 default = nil)
  if valid_618352 != nil:
    section.add "X-Amz-Algorithm", valid_618352
  var valid_618353 = header.getOrDefault("X-Amz-Signature")
  valid_618353 = validateParameter(valid_618353, JString, required = false,
                                 default = nil)
  if valid_618353 != nil:
    section.add "X-Amz-Signature", valid_618353
  var valid_618354 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618354 = validateParameter(valid_618354, JString, required = false,
                                 default = nil)
  if valid_618354 != nil:
    section.add "X-Amz-SignedHeaders", valid_618354
  var valid_618355 = header.getOrDefault("X-Amz-Credential")
  valid_618355 = validateParameter(valid_618355, JString, required = false,
                                 default = nil)
  if valid_618355 != nil:
    section.add "X-Amz-Credential", valid_618355
  result.add "header", section
  ## parameters in `formData` object:
  ##   ShouldRespectGracePeriod: JBool
  ##                           : <p>If the Auto Scaling group of the specified instance has a <code>HealthCheckGracePeriod</code> specified for the group, by default, this call respects the grace period. Set this to <code>False</code>, to have the call not respect the grace period associated with the group.</p> <p>For more information about the health check grace period, see <a>CreateAutoScalingGroup</a>.</p>
  ##   HealthStatus: JString (required)
  ##               : The health status of the instance. Set to <code>Healthy</code> to have the instance remain in service. Set to <code>Unhealthy</code> to have the instance be out of service. Amazon EC2 Auto Scaling terminates and replaces the unhealthy instance.
  ##   InstanceId: JString (required)
  ##             : The ID of the instance.
  section = newJObject()
  var valid_618356 = formData.getOrDefault("ShouldRespectGracePeriod")
  valid_618356 = validateParameter(valid_618356, JBool, required = false, default = nil)
  if valid_618356 != nil:
    section.add "ShouldRespectGracePeriod", valid_618356
  assert formData != nil,
        "formData argument is necessary due to required `HealthStatus` field"
  var valid_618357 = formData.getOrDefault("HealthStatus")
  valid_618357 = validateParameter(valid_618357, JString, required = true,
                                 default = nil)
  if valid_618357 != nil:
    section.add "HealthStatus", valid_618357
  var valid_618358 = formData.getOrDefault("InstanceId")
  valid_618358 = validateParameter(valid_618358, JString, required = true,
                                 default = nil)
  if valid_618358 != nil:
    section.add "InstanceId", valid_618358
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618359: Call_PostSetInstanceHealth_618344; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the health status of the specified instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_618359.validator(path, query, header, formData, body)
  let scheme = call_618359.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618359.url(scheme.get, call_618359.host, call_618359.base,
                         call_618359.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618359, url, valid)

proc call*(call_618360: Call_PostSetInstanceHealth_618344; HealthStatus: string;
          InstanceId: string; ShouldRespectGracePeriod: bool = false;
          Action: string = "SetInstanceHealth"; Version: string = "2011-01-01"): Recallable =
  ## postSetInstanceHealth
  ## <p>Sets the health status of the specified instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   ShouldRespectGracePeriod: bool
  ##                           : <p>If the Auto Scaling group of the specified instance has a <code>HealthCheckGracePeriod</code> specified for the group, by default, this call respects the grace period. Set this to <code>False</code>, to have the call not respect the grace period associated with the group.</p> <p>For more information about the health check grace period, see <a>CreateAutoScalingGroup</a>.</p>
  ##   Action: string (required)
  ##   HealthStatus: string (required)
  ##               : The health status of the instance. Set to <code>Healthy</code> to have the instance remain in service. Set to <code>Unhealthy</code> to have the instance be out of service. Amazon EC2 Auto Scaling terminates and replaces the unhealthy instance.
  ##   InstanceId: string (required)
  ##             : The ID of the instance.
  ##   Version: string (required)
  var query_618361 = newJObject()
  var formData_618362 = newJObject()
  add(formData_618362, "ShouldRespectGracePeriod",
      newJBool(ShouldRespectGracePeriod))
  add(query_618361, "Action", newJString(Action))
  add(formData_618362, "HealthStatus", newJString(HealthStatus))
  add(formData_618362, "InstanceId", newJString(InstanceId))
  add(query_618361, "Version", newJString(Version))
  result = call_618360.call(nil, query_618361, nil, formData_618362, nil)

var postSetInstanceHealth* = Call_PostSetInstanceHealth_618344(
    name: "postSetInstanceHealth", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=SetInstanceHealth",
    validator: validate_PostSetInstanceHealth_618345, base: "/",
    url: url_PostSetInstanceHealth_618346, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetInstanceHealth_618326 = ref object of OpenApiRestCall_615866
proc url_GetSetInstanceHealth_618328(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSetInstanceHealth_618327(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the health status of the specified instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   HealthStatus: JString (required)
  ##               : The health status of the instance. Set to <code>Healthy</code> to have the instance remain in service. Set to <code>Unhealthy</code> to have the instance be out of service. Amazon EC2 Auto Scaling terminates and replaces the unhealthy instance.
  ##   Action: JString (required)
  ##   InstanceId: JString (required)
  ##             : The ID of the instance.
  ##   Version: JString (required)
  ##   ShouldRespectGracePeriod: JBool
  ##                           : <p>If the Auto Scaling group of the specified instance has a <code>HealthCheckGracePeriod</code> specified for the group, by default, this call respects the grace period. Set this to <code>False</code>, to have the call not respect the grace period associated with the group.</p> <p>For more information about the health check grace period, see <a>CreateAutoScalingGroup</a>.</p>
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `HealthStatus` field"
  var valid_618329 = query.getOrDefault("HealthStatus")
  valid_618329 = validateParameter(valid_618329, JString, required = true,
                                 default = nil)
  if valid_618329 != nil:
    section.add "HealthStatus", valid_618329
  var valid_618330 = query.getOrDefault("Action")
  valid_618330 = validateParameter(valid_618330, JString, required = true,
                                 default = newJString("SetInstanceHealth"))
  if valid_618330 != nil:
    section.add "Action", valid_618330
  var valid_618331 = query.getOrDefault("InstanceId")
  valid_618331 = validateParameter(valid_618331, JString, required = true,
                                 default = nil)
  if valid_618331 != nil:
    section.add "InstanceId", valid_618331
  var valid_618332 = query.getOrDefault("Version")
  valid_618332 = validateParameter(valid_618332, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_618332 != nil:
    section.add "Version", valid_618332
  var valid_618333 = query.getOrDefault("ShouldRespectGracePeriod")
  valid_618333 = validateParameter(valid_618333, JBool, required = false, default = nil)
  if valid_618333 != nil:
    section.add "ShouldRespectGracePeriod", valid_618333
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_618334 = header.getOrDefault("X-Amz-Date")
  valid_618334 = validateParameter(valid_618334, JString, required = false,
                                 default = nil)
  if valid_618334 != nil:
    section.add "X-Amz-Date", valid_618334
  var valid_618335 = header.getOrDefault("X-Amz-Security-Token")
  valid_618335 = validateParameter(valid_618335, JString, required = false,
                                 default = nil)
  if valid_618335 != nil:
    section.add "X-Amz-Security-Token", valid_618335
  var valid_618336 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618336 = validateParameter(valid_618336, JString, required = false,
                                 default = nil)
  if valid_618336 != nil:
    section.add "X-Amz-Content-Sha256", valid_618336
  var valid_618337 = header.getOrDefault("X-Amz-Algorithm")
  valid_618337 = validateParameter(valid_618337, JString, required = false,
                                 default = nil)
  if valid_618337 != nil:
    section.add "X-Amz-Algorithm", valid_618337
  var valid_618338 = header.getOrDefault("X-Amz-Signature")
  valid_618338 = validateParameter(valid_618338, JString, required = false,
                                 default = nil)
  if valid_618338 != nil:
    section.add "X-Amz-Signature", valid_618338
  var valid_618339 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618339 = validateParameter(valid_618339, JString, required = false,
                                 default = nil)
  if valid_618339 != nil:
    section.add "X-Amz-SignedHeaders", valid_618339
  var valid_618340 = header.getOrDefault("X-Amz-Credential")
  valid_618340 = validateParameter(valid_618340, JString, required = false,
                                 default = nil)
  if valid_618340 != nil:
    section.add "X-Amz-Credential", valid_618340
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618341: Call_GetSetInstanceHealth_618326; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the health status of the specified instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_618341.validator(path, query, header, formData, body)
  let scheme = call_618341.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618341.url(scheme.get, call_618341.host, call_618341.base,
                         call_618341.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618341, url, valid)

proc call*(call_618342: Call_GetSetInstanceHealth_618326; HealthStatus: string;
          InstanceId: string; Action: string = "SetInstanceHealth";
          Version: string = "2011-01-01"; ShouldRespectGracePeriod: bool = false): Recallable =
  ## getSetInstanceHealth
  ## <p>Sets the health status of the specified instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   HealthStatus: string (required)
  ##               : The health status of the instance. Set to <code>Healthy</code> to have the instance remain in service. Set to <code>Unhealthy</code> to have the instance be out of service. Amazon EC2 Auto Scaling terminates and replaces the unhealthy instance.
  ##   Action: string (required)
  ##   InstanceId: string (required)
  ##             : The ID of the instance.
  ##   Version: string (required)
  ##   ShouldRespectGracePeriod: bool
  ##                           : <p>If the Auto Scaling group of the specified instance has a <code>HealthCheckGracePeriod</code> specified for the group, by default, this call respects the grace period. Set this to <code>False</code>, to have the call not respect the grace period associated with the group.</p> <p>For more information about the health check grace period, see <a>CreateAutoScalingGroup</a>.</p>
  var query_618343 = newJObject()
  add(query_618343, "HealthStatus", newJString(HealthStatus))
  add(query_618343, "Action", newJString(Action))
  add(query_618343, "InstanceId", newJString(InstanceId))
  add(query_618343, "Version", newJString(Version))
  add(query_618343, "ShouldRespectGracePeriod", newJBool(ShouldRespectGracePeriod))
  result = call_618342.call(nil, query_618343, nil, nil, nil)

var getSetInstanceHealth* = Call_GetSetInstanceHealth_618326(
    name: "getSetInstanceHealth", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=SetInstanceHealth",
    validator: validate_GetSetInstanceHealth_618327, base: "/",
    url: url_GetSetInstanceHealth_618328, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetInstanceProtection_618381 = ref object of OpenApiRestCall_615866
proc url_PostSetInstanceProtection_618383(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSetInstanceProtection_618382(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the instance protection settings of the specified instances.</p> <p>For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_618384 = query.getOrDefault("Action")
  valid_618384 = validateParameter(valid_618384, JString, required = true,
                                 default = newJString("SetInstanceProtection"))
  if valid_618384 != nil:
    section.add "Action", valid_618384
  var valid_618385 = query.getOrDefault("Version")
  valid_618385 = validateParameter(valid_618385, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_618385 != nil:
    section.add "Version", valid_618385
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_618386 = header.getOrDefault("X-Amz-Date")
  valid_618386 = validateParameter(valid_618386, JString, required = false,
                                 default = nil)
  if valid_618386 != nil:
    section.add "X-Amz-Date", valid_618386
  var valid_618387 = header.getOrDefault("X-Amz-Security-Token")
  valid_618387 = validateParameter(valid_618387, JString, required = false,
                                 default = nil)
  if valid_618387 != nil:
    section.add "X-Amz-Security-Token", valid_618387
  var valid_618388 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618388 = validateParameter(valid_618388, JString, required = false,
                                 default = nil)
  if valid_618388 != nil:
    section.add "X-Amz-Content-Sha256", valid_618388
  var valid_618389 = header.getOrDefault("X-Amz-Algorithm")
  valid_618389 = validateParameter(valid_618389, JString, required = false,
                                 default = nil)
  if valid_618389 != nil:
    section.add "X-Amz-Algorithm", valid_618389
  var valid_618390 = header.getOrDefault("X-Amz-Signature")
  valid_618390 = validateParameter(valid_618390, JString, required = false,
                                 default = nil)
  if valid_618390 != nil:
    section.add "X-Amz-Signature", valid_618390
  var valid_618391 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618391 = validateParameter(valid_618391, JString, required = false,
                                 default = nil)
  if valid_618391 != nil:
    section.add "X-Amz-SignedHeaders", valid_618391
  var valid_618392 = header.getOrDefault("X-Amz-Credential")
  valid_618392 = validateParameter(valid_618392, JString, required = false,
                                 default = nil)
  if valid_618392 != nil:
    section.add "X-Amz-Credential", valid_618392
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray (required)
  ##              : One or more instance IDs.
  ##   ProtectedFromScaleIn: JBool (required)
  ##                       : Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling in.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_618393 = formData.getOrDefault("AutoScalingGroupName")
  valid_618393 = validateParameter(valid_618393, JString, required = true,
                                 default = nil)
  if valid_618393 != nil:
    section.add "AutoScalingGroupName", valid_618393
  var valid_618394 = formData.getOrDefault("InstanceIds")
  valid_618394 = validateParameter(valid_618394, JArray, required = true, default = nil)
  if valid_618394 != nil:
    section.add "InstanceIds", valid_618394
  var valid_618395 = formData.getOrDefault("ProtectedFromScaleIn")
  valid_618395 = validateParameter(valid_618395, JBool, required = true, default = nil)
  if valid_618395 != nil:
    section.add "ProtectedFromScaleIn", valid_618395
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618396: Call_PostSetInstanceProtection_618381; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the instance protection settings of the specified instances.</p> <p>For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_618396.validator(path, query, header, formData, body)
  let scheme = call_618396.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618396.url(scheme.get, call_618396.host, call_618396.base,
                         call_618396.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618396, url, valid)

proc call*(call_618397: Call_PostSetInstanceProtection_618381;
          AutoScalingGroupName: string; InstanceIds: JsonNode;
          ProtectedFromScaleIn: bool; Action: string = "SetInstanceProtection";
          Version: string = "2011-01-01"): Recallable =
  ## postSetInstanceProtection
  ## <p>Updates the instance protection settings of the specified instances.</p> <p>For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray (required)
  ##              : One or more instance IDs.
  ##   Action: string (required)
  ##   ProtectedFromScaleIn: bool (required)
  ##                       : Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling in.
  ##   Version: string (required)
  var query_618398 = newJObject()
  var formData_618399 = newJObject()
  add(formData_618399, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if InstanceIds != nil:
    formData_618399.add "InstanceIds", InstanceIds
  add(query_618398, "Action", newJString(Action))
  add(formData_618399, "ProtectedFromScaleIn", newJBool(ProtectedFromScaleIn))
  add(query_618398, "Version", newJString(Version))
  result = call_618397.call(nil, query_618398, nil, formData_618399, nil)

var postSetInstanceProtection* = Call_PostSetInstanceProtection_618381(
    name: "postSetInstanceProtection", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=SetInstanceProtection",
    validator: validate_PostSetInstanceProtection_618382, base: "/",
    url: url_PostSetInstanceProtection_618383,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetInstanceProtection_618363 = ref object of OpenApiRestCall_615866
proc url_GetSetInstanceProtection_618365(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSetInstanceProtection_618364(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the instance protection settings of the specified instances.</p> <p>For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   InstanceIds: JArray (required)
  ##              : One or more instance IDs.
  ##   ProtectedFromScaleIn: JBool (required)
  ##                       : Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling in.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_618366 = query.getOrDefault("AutoScalingGroupName")
  valid_618366 = validateParameter(valid_618366, JString, required = true,
                                 default = nil)
  if valid_618366 != nil:
    section.add "AutoScalingGroupName", valid_618366
  var valid_618367 = query.getOrDefault("Action")
  valid_618367 = validateParameter(valid_618367, JString, required = true,
                                 default = newJString("SetInstanceProtection"))
  if valid_618367 != nil:
    section.add "Action", valid_618367
  var valid_618368 = query.getOrDefault("InstanceIds")
  valid_618368 = validateParameter(valid_618368, JArray, required = true, default = nil)
  if valid_618368 != nil:
    section.add "InstanceIds", valid_618368
  var valid_618369 = query.getOrDefault("ProtectedFromScaleIn")
  valid_618369 = validateParameter(valid_618369, JBool, required = true, default = nil)
  if valid_618369 != nil:
    section.add "ProtectedFromScaleIn", valid_618369
  var valid_618370 = query.getOrDefault("Version")
  valid_618370 = validateParameter(valid_618370, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_618370 != nil:
    section.add "Version", valid_618370
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_618371 = header.getOrDefault("X-Amz-Date")
  valid_618371 = validateParameter(valid_618371, JString, required = false,
                                 default = nil)
  if valid_618371 != nil:
    section.add "X-Amz-Date", valid_618371
  var valid_618372 = header.getOrDefault("X-Amz-Security-Token")
  valid_618372 = validateParameter(valid_618372, JString, required = false,
                                 default = nil)
  if valid_618372 != nil:
    section.add "X-Amz-Security-Token", valid_618372
  var valid_618373 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618373 = validateParameter(valid_618373, JString, required = false,
                                 default = nil)
  if valid_618373 != nil:
    section.add "X-Amz-Content-Sha256", valid_618373
  var valid_618374 = header.getOrDefault("X-Amz-Algorithm")
  valid_618374 = validateParameter(valid_618374, JString, required = false,
                                 default = nil)
  if valid_618374 != nil:
    section.add "X-Amz-Algorithm", valid_618374
  var valid_618375 = header.getOrDefault("X-Amz-Signature")
  valid_618375 = validateParameter(valid_618375, JString, required = false,
                                 default = nil)
  if valid_618375 != nil:
    section.add "X-Amz-Signature", valid_618375
  var valid_618376 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618376 = validateParameter(valid_618376, JString, required = false,
                                 default = nil)
  if valid_618376 != nil:
    section.add "X-Amz-SignedHeaders", valid_618376
  var valid_618377 = header.getOrDefault("X-Amz-Credential")
  valid_618377 = validateParameter(valid_618377, JString, required = false,
                                 default = nil)
  if valid_618377 != nil:
    section.add "X-Amz-Credential", valid_618377
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618378: Call_GetSetInstanceProtection_618363; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the instance protection settings of the specified instances.</p> <p>For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_618378.validator(path, query, header, formData, body)
  let scheme = call_618378.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618378.url(scheme.get, call_618378.host, call_618378.base,
                         call_618378.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618378, url, valid)

proc call*(call_618379: Call_GetSetInstanceProtection_618363;
          AutoScalingGroupName: string; InstanceIds: JsonNode;
          ProtectedFromScaleIn: bool; Action: string = "SetInstanceProtection";
          Version: string = "2011-01-01"): Recallable =
  ## getSetInstanceProtection
  ## <p>Updates the instance protection settings of the specified instances.</p> <p>For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   InstanceIds: JArray (required)
  ##              : One or more instance IDs.
  ##   ProtectedFromScaleIn: bool (required)
  ##                       : Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling in.
  ##   Version: string (required)
  var query_618380 = newJObject()
  add(query_618380, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_618380, "Action", newJString(Action))
  if InstanceIds != nil:
    query_618380.add "InstanceIds", InstanceIds
  add(query_618380, "ProtectedFromScaleIn", newJBool(ProtectedFromScaleIn))
  add(query_618380, "Version", newJString(Version))
  result = call_618379.call(nil, query_618380, nil, nil, nil)

var getSetInstanceProtection* = Call_GetSetInstanceProtection_618363(
    name: "getSetInstanceProtection", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=SetInstanceProtection",
    validator: validate_GetSetInstanceProtection_618364, base: "/",
    url: url_GetSetInstanceProtection_618365, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSuspendProcesses_618417 = ref object of OpenApiRestCall_615866
proc url_PostSuspendProcesses_618419(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSuspendProcesses_618418(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Suspends the specified automatic scaling processes, or all processes, for the specified Auto Scaling group.</p> <p>If you suspend either the <code>Launch</code> or <code>Terminate</code> process types, it can prevent other process types from functioning properly.</p> <p>To resume processes that have been suspended, use <a>ResumeProcesses</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_618420 = query.getOrDefault("Action")
  valid_618420 = validateParameter(valid_618420, JString, required = true,
                                 default = newJString("SuspendProcesses"))
  if valid_618420 != nil:
    section.add "Action", valid_618420
  var valid_618421 = query.getOrDefault("Version")
  valid_618421 = validateParameter(valid_618421, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_618421 != nil:
    section.add "Version", valid_618421
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_618422 = header.getOrDefault("X-Amz-Date")
  valid_618422 = validateParameter(valid_618422, JString, required = false,
                                 default = nil)
  if valid_618422 != nil:
    section.add "X-Amz-Date", valid_618422
  var valid_618423 = header.getOrDefault("X-Amz-Security-Token")
  valid_618423 = validateParameter(valid_618423, JString, required = false,
                                 default = nil)
  if valid_618423 != nil:
    section.add "X-Amz-Security-Token", valid_618423
  var valid_618424 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618424 = validateParameter(valid_618424, JString, required = false,
                                 default = nil)
  if valid_618424 != nil:
    section.add "X-Amz-Content-Sha256", valid_618424
  var valid_618425 = header.getOrDefault("X-Amz-Algorithm")
  valid_618425 = validateParameter(valid_618425, JString, required = false,
                                 default = nil)
  if valid_618425 != nil:
    section.add "X-Amz-Algorithm", valid_618425
  var valid_618426 = header.getOrDefault("X-Amz-Signature")
  valid_618426 = validateParameter(valid_618426, JString, required = false,
                                 default = nil)
  if valid_618426 != nil:
    section.add "X-Amz-Signature", valid_618426
  var valid_618427 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618427 = validateParameter(valid_618427, JString, required = false,
                                 default = nil)
  if valid_618427 != nil:
    section.add "X-Amz-SignedHeaders", valid_618427
  var valid_618428 = header.getOrDefault("X-Amz-Credential")
  valid_618428 = validateParameter(valid_618428, JString, required = false,
                                 default = nil)
  if valid_618428 != nil:
    section.add "X-Amz-Credential", valid_618428
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_618429 = formData.getOrDefault("AutoScalingGroupName")
  valid_618429 = validateParameter(valid_618429, JString, required = true,
                                 default = nil)
  if valid_618429 != nil:
    section.add "AutoScalingGroupName", valid_618429
  var valid_618430 = formData.getOrDefault("ScalingProcesses")
  valid_618430 = validateParameter(valid_618430, JArray, required = false,
                                 default = nil)
  if valid_618430 != nil:
    section.add "ScalingProcesses", valid_618430
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618431: Call_PostSuspendProcesses_618417; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Suspends the specified automatic scaling processes, or all processes, for the specified Auto Scaling group.</p> <p>If you suspend either the <code>Launch</code> or <code>Terminate</code> process types, it can prevent other process types from functioning properly.</p> <p>To resume processes that have been suspended, use <a>ResumeProcesses</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_618431.validator(path, query, header, formData, body)
  let scheme = call_618431.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618431.url(scheme.get, call_618431.host, call_618431.base,
                         call_618431.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618431, url, valid)

proc call*(call_618432: Call_PostSuspendProcesses_618417;
          AutoScalingGroupName: string; ScalingProcesses: JsonNode = nil;
          Action: string = "SuspendProcesses"; Version: string = "2011-01-01"): Recallable =
  ## postSuspendProcesses
  ## <p>Suspends the specified automatic scaling processes, or all processes, for the specified Auto Scaling group.</p> <p>If you suspend either the <code>Launch</code> or <code>Terminate</code> process types, it can prevent other process types from functioning properly.</p> <p>To resume processes that have been suspended, use <a>ResumeProcesses</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_618433 = newJObject()
  var formData_618434 = newJObject()
  add(formData_618434, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if ScalingProcesses != nil:
    formData_618434.add "ScalingProcesses", ScalingProcesses
  add(query_618433, "Action", newJString(Action))
  add(query_618433, "Version", newJString(Version))
  result = call_618432.call(nil, query_618433, nil, formData_618434, nil)

var postSuspendProcesses* = Call_PostSuspendProcesses_618417(
    name: "postSuspendProcesses", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=SuspendProcesses",
    validator: validate_PostSuspendProcesses_618418, base: "/",
    url: url_PostSuspendProcesses_618419, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSuspendProcesses_618400 = ref object of OpenApiRestCall_615866
proc url_GetSuspendProcesses_618402(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSuspendProcesses_618401(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Suspends the specified automatic scaling processes, or all processes, for the specified Auto Scaling group.</p> <p>If you suspend either the <code>Launch</code> or <code>Terminate</code> process types, it can prevent other process types from functioning properly.</p> <p>To resume processes that have been suspended, use <a>ResumeProcesses</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_618403 = query.getOrDefault("ScalingProcesses")
  valid_618403 = validateParameter(valid_618403, JArray, required = false,
                                 default = nil)
  if valid_618403 != nil:
    section.add "ScalingProcesses", valid_618403
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_618404 = query.getOrDefault("AutoScalingGroupName")
  valid_618404 = validateParameter(valid_618404, JString, required = true,
                                 default = nil)
  if valid_618404 != nil:
    section.add "AutoScalingGroupName", valid_618404
  var valid_618405 = query.getOrDefault("Action")
  valid_618405 = validateParameter(valid_618405, JString, required = true,
                                 default = newJString("SuspendProcesses"))
  if valid_618405 != nil:
    section.add "Action", valid_618405
  var valid_618406 = query.getOrDefault("Version")
  valid_618406 = validateParameter(valid_618406, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_618406 != nil:
    section.add "Version", valid_618406
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_618407 = header.getOrDefault("X-Amz-Date")
  valid_618407 = validateParameter(valid_618407, JString, required = false,
                                 default = nil)
  if valid_618407 != nil:
    section.add "X-Amz-Date", valid_618407
  var valid_618408 = header.getOrDefault("X-Amz-Security-Token")
  valid_618408 = validateParameter(valid_618408, JString, required = false,
                                 default = nil)
  if valid_618408 != nil:
    section.add "X-Amz-Security-Token", valid_618408
  var valid_618409 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618409 = validateParameter(valid_618409, JString, required = false,
                                 default = nil)
  if valid_618409 != nil:
    section.add "X-Amz-Content-Sha256", valid_618409
  var valid_618410 = header.getOrDefault("X-Amz-Algorithm")
  valid_618410 = validateParameter(valid_618410, JString, required = false,
                                 default = nil)
  if valid_618410 != nil:
    section.add "X-Amz-Algorithm", valid_618410
  var valid_618411 = header.getOrDefault("X-Amz-Signature")
  valid_618411 = validateParameter(valid_618411, JString, required = false,
                                 default = nil)
  if valid_618411 != nil:
    section.add "X-Amz-Signature", valid_618411
  var valid_618412 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618412 = validateParameter(valid_618412, JString, required = false,
                                 default = nil)
  if valid_618412 != nil:
    section.add "X-Amz-SignedHeaders", valid_618412
  var valid_618413 = header.getOrDefault("X-Amz-Credential")
  valid_618413 = validateParameter(valid_618413, JString, required = false,
                                 default = nil)
  if valid_618413 != nil:
    section.add "X-Amz-Credential", valid_618413
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618414: Call_GetSuspendProcesses_618400; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Suspends the specified automatic scaling processes, or all processes, for the specified Auto Scaling group.</p> <p>If you suspend either the <code>Launch</code> or <code>Terminate</code> process types, it can prevent other process types from functioning properly.</p> <p>To resume processes that have been suspended, use <a>ResumeProcesses</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_618414.validator(path, query, header, formData, body)
  let scheme = call_618414.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618414.url(scheme.get, call_618414.host, call_618414.base,
                         call_618414.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618414, url, valid)

proc call*(call_618415: Call_GetSuspendProcesses_618400;
          AutoScalingGroupName: string; ScalingProcesses: JsonNode = nil;
          Action: string = "SuspendProcesses"; Version: string = "2011-01-01"): Recallable =
  ## getSuspendProcesses
  ## <p>Suspends the specified automatic scaling processes, or all processes, for the specified Auto Scaling group.</p> <p>If you suspend either the <code>Launch</code> or <code>Terminate</code> process types, it can prevent other process types from functioning properly.</p> <p>To resume processes that have been suspended, use <a>ResumeProcesses</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_618416 = newJObject()
  if ScalingProcesses != nil:
    query_618416.add "ScalingProcesses", ScalingProcesses
  add(query_618416, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_618416, "Action", newJString(Action))
  add(query_618416, "Version", newJString(Version))
  result = call_618415.call(nil, query_618416, nil, nil, nil)

var getSuspendProcesses* = Call_GetSuspendProcesses_618400(
    name: "getSuspendProcesses", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=SuspendProcesses",
    validator: validate_GetSuspendProcesses_618401, base: "/",
    url: url_GetSuspendProcesses_618402, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostTerminateInstanceInAutoScalingGroup_618452 = ref object of OpenApiRestCall_615866
proc url_PostTerminateInstanceInAutoScalingGroup_618454(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostTerminateInstanceInAutoScalingGroup_618453(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Terminates the specified instance and optionally adjusts the desired group size. This call simply makes a termination request. The instance is not terminated immediately. When an instance is terminated, the instance status changes to <code>terminated</code>. You can't connect to or start an instance after you've terminated it.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are terminated. </p> <p>By default, Amazon EC2 Auto Scaling balances instances across all Availability Zones. If you decrement the desired capacity, your Auto Scaling group can become unbalanced between Availability Zones. Amazon EC2 Auto Scaling tries to rebalance the group, and rebalancing might terminate instances in other zones. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/auto-scaling-benefits.html#AutoScalingBehavior.InstanceUsage">Rebalancing Activities</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_618455 = query.getOrDefault("Action")
  valid_618455 = validateParameter(valid_618455, JString, required = true, default = newJString(
      "TerminateInstanceInAutoScalingGroup"))
  if valid_618455 != nil:
    section.add "Action", valid_618455
  var valid_618456 = query.getOrDefault("Version")
  valid_618456 = validateParameter(valid_618456, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_618456 != nil:
    section.add "Version", valid_618456
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_618457 = header.getOrDefault("X-Amz-Date")
  valid_618457 = validateParameter(valid_618457, JString, required = false,
                                 default = nil)
  if valid_618457 != nil:
    section.add "X-Amz-Date", valid_618457
  var valid_618458 = header.getOrDefault("X-Amz-Security-Token")
  valid_618458 = validateParameter(valid_618458, JString, required = false,
                                 default = nil)
  if valid_618458 != nil:
    section.add "X-Amz-Security-Token", valid_618458
  var valid_618459 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618459 = validateParameter(valid_618459, JString, required = false,
                                 default = nil)
  if valid_618459 != nil:
    section.add "X-Amz-Content-Sha256", valid_618459
  var valid_618460 = header.getOrDefault("X-Amz-Algorithm")
  valid_618460 = validateParameter(valid_618460, JString, required = false,
                                 default = nil)
  if valid_618460 != nil:
    section.add "X-Amz-Algorithm", valid_618460
  var valid_618461 = header.getOrDefault("X-Amz-Signature")
  valid_618461 = validateParameter(valid_618461, JString, required = false,
                                 default = nil)
  if valid_618461 != nil:
    section.add "X-Amz-Signature", valid_618461
  var valid_618462 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618462 = validateParameter(valid_618462, JString, required = false,
                                 default = nil)
  if valid_618462 != nil:
    section.add "X-Amz-SignedHeaders", valid_618462
  var valid_618463 = header.getOrDefault("X-Amz-Credential")
  valid_618463 = validateParameter(valid_618463, JString, required = false,
                                 default = nil)
  if valid_618463 != nil:
    section.add "X-Amz-Credential", valid_618463
  result.add "header", section
  ## parameters in `formData` object:
  ##   InstanceId: JString (required)
  ##             : The ID of the instance.
  ##   ShouldDecrementDesiredCapacity: JBool (required)
  ##                                 : Indicates whether terminating the instance also decrements the size of the Auto Scaling group.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `InstanceId` field"
  var valid_618464 = formData.getOrDefault("InstanceId")
  valid_618464 = validateParameter(valid_618464, JString, required = true,
                                 default = nil)
  if valid_618464 != nil:
    section.add "InstanceId", valid_618464
  var valid_618465 = formData.getOrDefault("ShouldDecrementDesiredCapacity")
  valid_618465 = validateParameter(valid_618465, JBool, required = true, default = nil)
  if valid_618465 != nil:
    section.add "ShouldDecrementDesiredCapacity", valid_618465
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618466: Call_PostTerminateInstanceInAutoScalingGroup_618452;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Terminates the specified instance and optionally adjusts the desired group size. This call simply makes a termination request. The instance is not terminated immediately. When an instance is terminated, the instance status changes to <code>terminated</code>. You can't connect to or start an instance after you've terminated it.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are terminated. </p> <p>By default, Amazon EC2 Auto Scaling balances instances across all Availability Zones. If you decrement the desired capacity, your Auto Scaling group can become unbalanced between Availability Zones. Amazon EC2 Auto Scaling tries to rebalance the group, and rebalancing might terminate instances in other zones. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/auto-scaling-benefits.html#AutoScalingBehavior.InstanceUsage">Rebalancing Activities</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_618466.validator(path, query, header, formData, body)
  let scheme = call_618466.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618466.url(scheme.get, call_618466.host, call_618466.base,
                         call_618466.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618466, url, valid)

proc call*(call_618467: Call_PostTerminateInstanceInAutoScalingGroup_618452;
          InstanceId: string; ShouldDecrementDesiredCapacity: bool;
          Action: string = "TerminateInstanceInAutoScalingGroup";
          Version: string = "2011-01-01"): Recallable =
  ## postTerminateInstanceInAutoScalingGroup
  ## <p>Terminates the specified instance and optionally adjusts the desired group size. This call simply makes a termination request. The instance is not terminated immediately. When an instance is terminated, the instance status changes to <code>terminated</code>. You can't connect to or start an instance after you've terminated it.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are terminated. </p> <p>By default, Amazon EC2 Auto Scaling balances instances across all Availability Zones. If you decrement the desired capacity, your Auto Scaling group can become unbalanced between Availability Zones. Amazon EC2 Auto Scaling tries to rebalance the group, and rebalancing might terminate instances in other zones. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/auto-scaling-benefits.html#AutoScalingBehavior.InstanceUsage">Rebalancing Activities</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   InstanceId: string (required)
  ##             : The ID of the instance.
  ##   ShouldDecrementDesiredCapacity: bool (required)
  ##                                 : Indicates whether terminating the instance also decrements the size of the Auto Scaling group.
  ##   Version: string (required)
  var query_618468 = newJObject()
  var formData_618469 = newJObject()
  add(query_618468, "Action", newJString(Action))
  add(formData_618469, "InstanceId", newJString(InstanceId))
  add(formData_618469, "ShouldDecrementDesiredCapacity",
      newJBool(ShouldDecrementDesiredCapacity))
  add(query_618468, "Version", newJString(Version))
  result = call_618467.call(nil, query_618468, nil, formData_618469, nil)

var postTerminateInstanceInAutoScalingGroup* = Call_PostTerminateInstanceInAutoScalingGroup_618452(
    name: "postTerminateInstanceInAutoScalingGroup", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=TerminateInstanceInAutoScalingGroup",
    validator: validate_PostTerminateInstanceInAutoScalingGroup_618453, base: "/",
    url: url_PostTerminateInstanceInAutoScalingGroup_618454,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetTerminateInstanceInAutoScalingGroup_618435 = ref object of OpenApiRestCall_615866
proc url_GetTerminateInstanceInAutoScalingGroup_618437(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetTerminateInstanceInAutoScalingGroup_618436(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Terminates the specified instance and optionally adjusts the desired group size. This call simply makes a termination request. The instance is not terminated immediately. When an instance is terminated, the instance status changes to <code>terminated</code>. You can't connect to or start an instance after you've terminated it.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are terminated. </p> <p>By default, Amazon EC2 Auto Scaling balances instances across all Availability Zones. If you decrement the desired capacity, your Auto Scaling group can become unbalanced between Availability Zones. Amazon EC2 Auto Scaling tries to rebalance the group, and rebalancing might terminate instances in other zones. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/auto-scaling-benefits.html#AutoScalingBehavior.InstanceUsage">Rebalancing Activities</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   ShouldDecrementDesiredCapacity: JBool (required)
  ##                                 : Indicates whether terminating the instance also decrements the size of the Auto Scaling group.
  ##   InstanceId: JString (required)
  ##             : The ID of the instance.
  ##   Version: JString (required)
  section = newJObject()
  var valid_618438 = query.getOrDefault("Action")
  valid_618438 = validateParameter(valid_618438, JString, required = true, default = newJString(
      "TerminateInstanceInAutoScalingGroup"))
  if valid_618438 != nil:
    section.add "Action", valid_618438
  var valid_618439 = query.getOrDefault("ShouldDecrementDesiredCapacity")
  valid_618439 = validateParameter(valid_618439, JBool, required = true, default = nil)
  if valid_618439 != nil:
    section.add "ShouldDecrementDesiredCapacity", valid_618439
  var valid_618440 = query.getOrDefault("InstanceId")
  valid_618440 = validateParameter(valid_618440, JString, required = true,
                                 default = nil)
  if valid_618440 != nil:
    section.add "InstanceId", valid_618440
  var valid_618441 = query.getOrDefault("Version")
  valid_618441 = validateParameter(valid_618441, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_618441 != nil:
    section.add "Version", valid_618441
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_618442 = header.getOrDefault("X-Amz-Date")
  valid_618442 = validateParameter(valid_618442, JString, required = false,
                                 default = nil)
  if valid_618442 != nil:
    section.add "X-Amz-Date", valid_618442
  var valid_618443 = header.getOrDefault("X-Amz-Security-Token")
  valid_618443 = validateParameter(valid_618443, JString, required = false,
                                 default = nil)
  if valid_618443 != nil:
    section.add "X-Amz-Security-Token", valid_618443
  var valid_618444 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618444 = validateParameter(valid_618444, JString, required = false,
                                 default = nil)
  if valid_618444 != nil:
    section.add "X-Amz-Content-Sha256", valid_618444
  var valid_618445 = header.getOrDefault("X-Amz-Algorithm")
  valid_618445 = validateParameter(valid_618445, JString, required = false,
                                 default = nil)
  if valid_618445 != nil:
    section.add "X-Amz-Algorithm", valid_618445
  var valid_618446 = header.getOrDefault("X-Amz-Signature")
  valid_618446 = validateParameter(valid_618446, JString, required = false,
                                 default = nil)
  if valid_618446 != nil:
    section.add "X-Amz-Signature", valid_618446
  var valid_618447 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618447 = validateParameter(valid_618447, JString, required = false,
                                 default = nil)
  if valid_618447 != nil:
    section.add "X-Amz-SignedHeaders", valid_618447
  var valid_618448 = header.getOrDefault("X-Amz-Credential")
  valid_618448 = validateParameter(valid_618448, JString, required = false,
                                 default = nil)
  if valid_618448 != nil:
    section.add "X-Amz-Credential", valid_618448
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618449: Call_GetTerminateInstanceInAutoScalingGroup_618435;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Terminates the specified instance and optionally adjusts the desired group size. This call simply makes a termination request. The instance is not terminated immediately. When an instance is terminated, the instance status changes to <code>terminated</code>. You can't connect to or start an instance after you've terminated it.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are terminated. </p> <p>By default, Amazon EC2 Auto Scaling balances instances across all Availability Zones. If you decrement the desired capacity, your Auto Scaling group can become unbalanced between Availability Zones. Amazon EC2 Auto Scaling tries to rebalance the group, and rebalancing might terminate instances in other zones. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/auto-scaling-benefits.html#AutoScalingBehavior.InstanceUsage">Rebalancing Activities</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_618449.validator(path, query, header, formData, body)
  let scheme = call_618449.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618449.url(scheme.get, call_618449.host, call_618449.base,
                         call_618449.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618449, url, valid)

proc call*(call_618450: Call_GetTerminateInstanceInAutoScalingGroup_618435;
          ShouldDecrementDesiredCapacity: bool; InstanceId: string;
          Action: string = "TerminateInstanceInAutoScalingGroup";
          Version: string = "2011-01-01"): Recallable =
  ## getTerminateInstanceInAutoScalingGroup
  ## <p>Terminates the specified instance and optionally adjusts the desired group size. This call simply makes a termination request. The instance is not terminated immediately. When an instance is terminated, the instance status changes to <code>terminated</code>. You can't connect to or start an instance after you've terminated it.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are terminated. </p> <p>By default, Amazon EC2 Auto Scaling balances instances across all Availability Zones. If you decrement the desired capacity, your Auto Scaling group can become unbalanced between Availability Zones. Amazon EC2 Auto Scaling tries to rebalance the group, and rebalancing might terminate instances in other zones. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/auto-scaling-benefits.html#AutoScalingBehavior.InstanceUsage">Rebalancing Activities</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   ShouldDecrementDesiredCapacity: bool (required)
  ##                                 : Indicates whether terminating the instance also decrements the size of the Auto Scaling group.
  ##   InstanceId: string (required)
  ##             : The ID of the instance.
  ##   Version: string (required)
  var query_618451 = newJObject()
  add(query_618451, "Action", newJString(Action))
  add(query_618451, "ShouldDecrementDesiredCapacity",
      newJBool(ShouldDecrementDesiredCapacity))
  add(query_618451, "InstanceId", newJString(InstanceId))
  add(query_618451, "Version", newJString(Version))
  result = call_618450.call(nil, query_618451, nil, nil, nil)

var getTerminateInstanceInAutoScalingGroup* = Call_GetTerminateInstanceInAutoScalingGroup_618435(
    name: "getTerminateInstanceInAutoScalingGroup", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=TerminateInstanceInAutoScalingGroup",
    validator: validate_GetTerminateInstanceInAutoScalingGroup_618436, base: "/",
    url: url_GetTerminateInstanceInAutoScalingGroup_618437,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateAutoScalingGroup_618505 = ref object of OpenApiRestCall_615866
proc url_PostUpdateAutoScalingGroup_618507(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateAutoScalingGroup_618506(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the configuration for the specified Auto Scaling group.</p> <p>To update an Auto Scaling group, specify the name of the group and the parameter that you want to change. Any parameters that you don't specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. </p> <p>If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.</p> <p>Note the following about changing <code>DesiredCapacity</code>, <code>MaxSize</code>, or <code>MinSize</code>:</p> <ul> <li> <p>If a scale-in event occurs as a result of a new <code>DesiredCapacity</code> value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.</p> </li> <li> <p>If you specify a new value for <code>MinSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MinSize</code> is larger than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MinSize</code> value.</p> </li> <li> <p>If you specify a new value for <code>MaxSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MaxSize</code> is smaller than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MaxSize</code> value.</p> </li> </ul> <p>To see which parameters have been set, use <a>DescribeAutoScalingGroups</a>. You can also view the scaling policies for an Auto Scaling group using <a>DescribePolicies</a>. If the group has scaling policies, you can update them using <a>PutScalingPolicy</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_618508 = query.getOrDefault("Action")
  valid_618508 = validateParameter(valid_618508, JString, required = true,
                                 default = newJString("UpdateAutoScalingGroup"))
  if valid_618508 != nil:
    section.add "Action", valid_618508
  var valid_618509 = query.getOrDefault("Version")
  valid_618509 = validateParameter(valid_618509, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_618509 != nil:
    section.add "Version", valid_618509
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_618510 = header.getOrDefault("X-Amz-Date")
  valid_618510 = validateParameter(valid_618510, JString, required = false,
                                 default = nil)
  if valid_618510 != nil:
    section.add "X-Amz-Date", valid_618510
  var valid_618511 = header.getOrDefault("X-Amz-Security-Token")
  valid_618511 = validateParameter(valid_618511, JString, required = false,
                                 default = nil)
  if valid_618511 != nil:
    section.add "X-Amz-Security-Token", valid_618511
  var valid_618512 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618512 = validateParameter(valid_618512, JString, required = false,
                                 default = nil)
  if valid_618512 != nil:
    section.add "X-Amz-Content-Sha256", valid_618512
  var valid_618513 = header.getOrDefault("X-Amz-Algorithm")
  valid_618513 = validateParameter(valid_618513, JString, required = false,
                                 default = nil)
  if valid_618513 != nil:
    section.add "X-Amz-Algorithm", valid_618513
  var valid_618514 = header.getOrDefault("X-Amz-Signature")
  valid_618514 = validateParameter(valid_618514, JString, required = false,
                                 default = nil)
  if valid_618514 != nil:
    section.add "X-Amz-Signature", valid_618514
  var valid_618515 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618515 = validateParameter(valid_618515, JString, required = false,
                                 default = nil)
  if valid_618515 != nil:
    section.add "X-Amz-SignedHeaders", valid_618515
  var valid_618516 = header.getOrDefault("X-Amz-Credential")
  valid_618516 = validateParameter(valid_618516, JString, required = false,
                                 default = nil)
  if valid_618516 != nil:
    section.add "X-Amz-Credential", valid_618516
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   PlacementGroup: JString
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   LaunchConfigurationName: JString
  ##                          : The name of the launch configuration. If you specify <code>LaunchConfigurationName</code> in your update request, you can't specify <code>LaunchTemplate</code> or <code>MixedInstancesPolicy</code>.
  ##   HealthCheckType: JString
  ##                  : The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.
  ##   DesiredCapacity: JInt
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group.
  ##   HealthCheckGracePeriod: JInt
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   VPCZoneIdentifier: JString
  ##                    : <p>A comma-separated list of subnet IDs for virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p>
  ##   AvailabilityZones: JArray
  ##                    : One or more Availability Zones for the group.
  ##   MinSize: JInt
  ##          : The minimum size of the Auto Scaling group.
  ##   DefaultCooldown: JInt
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>. This cooldown period is not used when a scaling-specific cooldown is specified.</p> <p>Cooldown periods are not supported for target tracking scaling policies, step scaling policies, or scheduled scaling. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MaxInstanceLifetime: JInt
  ##                      : <p>The maximum amount of time, in seconds, that an instance can be in service.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-max-instance-lifetime.html">Replacing Auto Scaling Instances Based on Maximum Instance Lifetime</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Valid Range: Minimum value of 604800.</p>
  ##   MaxSize: JInt
  ##          : The maximum size of the Auto Scaling group.
  ##   ServiceLinkedRoleARN: JString
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   MixedInstancesPolicy.InstancesDistribution: JString
  ##                                             : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified, the value for each parameter in <code>InstancesDistribution</code> uses a default value.</p>
  ##   NewInstancesProtectedFromScaleIn: JBool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LaunchTemplate.LaunchTemplateId: JString
  ##                                  : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  ##   LaunchTemplate.Version: JString
  ##                         : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   TerminationPolicies: JArray
  ##                      : <p>A standalone termination policy or a list of termination policies used to select the instance to terminate. The policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MixedInstancesPolicy.LaunchTemplate: JString
  ##                                      : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   LaunchTemplate.LaunchTemplateName: JString
  ##                                    : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_618517 = formData.getOrDefault("AutoScalingGroupName")
  valid_618517 = validateParameter(valid_618517, JString, required = true,
                                 default = nil)
  if valid_618517 != nil:
    section.add "AutoScalingGroupName", valid_618517
  var valid_618518 = formData.getOrDefault("PlacementGroup")
  valid_618518 = validateParameter(valid_618518, JString, required = false,
                                 default = nil)
  if valid_618518 != nil:
    section.add "PlacementGroup", valid_618518
  var valid_618519 = formData.getOrDefault("LaunchConfigurationName")
  valid_618519 = validateParameter(valid_618519, JString, required = false,
                                 default = nil)
  if valid_618519 != nil:
    section.add "LaunchConfigurationName", valid_618519
  var valid_618520 = formData.getOrDefault("HealthCheckType")
  valid_618520 = validateParameter(valid_618520, JString, required = false,
                                 default = nil)
  if valid_618520 != nil:
    section.add "HealthCheckType", valid_618520
  var valid_618521 = formData.getOrDefault("DesiredCapacity")
  valid_618521 = validateParameter(valid_618521, JInt, required = false, default = nil)
  if valid_618521 != nil:
    section.add "DesiredCapacity", valid_618521
  var valid_618522 = formData.getOrDefault("HealthCheckGracePeriod")
  valid_618522 = validateParameter(valid_618522, JInt, required = false, default = nil)
  if valid_618522 != nil:
    section.add "HealthCheckGracePeriod", valid_618522
  var valid_618523 = formData.getOrDefault("VPCZoneIdentifier")
  valid_618523 = validateParameter(valid_618523, JString, required = false,
                                 default = nil)
  if valid_618523 != nil:
    section.add "VPCZoneIdentifier", valid_618523
  var valid_618524 = formData.getOrDefault("AvailabilityZones")
  valid_618524 = validateParameter(valid_618524, JArray, required = false,
                                 default = nil)
  if valid_618524 != nil:
    section.add "AvailabilityZones", valid_618524
  var valid_618525 = formData.getOrDefault("MinSize")
  valid_618525 = validateParameter(valid_618525, JInt, required = false, default = nil)
  if valid_618525 != nil:
    section.add "MinSize", valid_618525
  var valid_618526 = formData.getOrDefault("DefaultCooldown")
  valid_618526 = validateParameter(valid_618526, JInt, required = false, default = nil)
  if valid_618526 != nil:
    section.add "DefaultCooldown", valid_618526
  var valid_618527 = formData.getOrDefault("MaxInstanceLifetime")
  valid_618527 = validateParameter(valid_618527, JInt, required = false, default = nil)
  if valid_618527 != nil:
    section.add "MaxInstanceLifetime", valid_618527
  var valid_618528 = formData.getOrDefault("MaxSize")
  valid_618528 = validateParameter(valid_618528, JInt, required = false, default = nil)
  if valid_618528 != nil:
    section.add "MaxSize", valid_618528
  var valid_618529 = formData.getOrDefault("ServiceLinkedRoleARN")
  valid_618529 = validateParameter(valid_618529, JString, required = false,
                                 default = nil)
  if valid_618529 != nil:
    section.add "ServiceLinkedRoleARN", valid_618529
  var valid_618530 = formData.getOrDefault("MixedInstancesPolicy.InstancesDistribution")
  valid_618530 = validateParameter(valid_618530, JString, required = false,
                                 default = nil)
  if valid_618530 != nil:
    section.add "MixedInstancesPolicy.InstancesDistribution", valid_618530
  var valid_618531 = formData.getOrDefault("NewInstancesProtectedFromScaleIn")
  valid_618531 = validateParameter(valid_618531, JBool, required = false, default = nil)
  if valid_618531 != nil:
    section.add "NewInstancesProtectedFromScaleIn", valid_618531
  var valid_618532 = formData.getOrDefault("LaunchTemplate.LaunchTemplateId")
  valid_618532 = validateParameter(valid_618532, JString, required = false,
                                 default = nil)
  if valid_618532 != nil:
    section.add "LaunchTemplate.LaunchTemplateId", valid_618532
  var valid_618533 = formData.getOrDefault("LaunchTemplate.Version")
  valid_618533 = validateParameter(valid_618533, JString, required = false,
                                 default = nil)
  if valid_618533 != nil:
    section.add "LaunchTemplate.Version", valid_618533
  var valid_618534 = formData.getOrDefault("TerminationPolicies")
  valid_618534 = validateParameter(valid_618534, JArray, required = false,
                                 default = nil)
  if valid_618534 != nil:
    section.add "TerminationPolicies", valid_618534
  var valid_618535 = formData.getOrDefault("MixedInstancesPolicy.LaunchTemplate")
  valid_618535 = validateParameter(valid_618535, JString, required = false,
                                 default = nil)
  if valid_618535 != nil:
    section.add "MixedInstancesPolicy.LaunchTemplate", valid_618535
  var valid_618536 = formData.getOrDefault("LaunchTemplate.LaunchTemplateName")
  valid_618536 = validateParameter(valid_618536, JString, required = false,
                                 default = nil)
  if valid_618536 != nil:
    section.add "LaunchTemplate.LaunchTemplateName", valid_618536
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618537: Call_PostUpdateAutoScalingGroup_618505; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the configuration for the specified Auto Scaling group.</p> <p>To update an Auto Scaling group, specify the name of the group and the parameter that you want to change. Any parameters that you don't specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. </p> <p>If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.</p> <p>Note the following about changing <code>DesiredCapacity</code>, <code>MaxSize</code>, or <code>MinSize</code>:</p> <ul> <li> <p>If a scale-in event occurs as a result of a new <code>DesiredCapacity</code> value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.</p> </li> <li> <p>If you specify a new value for <code>MinSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MinSize</code> is larger than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MinSize</code> value.</p> </li> <li> <p>If you specify a new value for <code>MaxSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MaxSize</code> is smaller than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MaxSize</code> value.</p> </li> </ul> <p>To see which parameters have been set, use <a>DescribeAutoScalingGroups</a>. You can also view the scaling policies for an Auto Scaling group using <a>DescribePolicies</a>. If the group has scaling policies, you can update them using <a>PutScalingPolicy</a>.</p>
  ## 
  let valid = call_618537.validator(path, query, header, formData, body)
  let scheme = call_618537.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618537.url(scheme.get, call_618537.host, call_618537.base,
                         call_618537.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618537, url, valid)

proc call*(call_618538: Call_PostUpdateAutoScalingGroup_618505;
          AutoScalingGroupName: string; PlacementGroup: string = "";
          LaunchConfigurationName: string = ""; HealthCheckType: string = "";
          DesiredCapacity: int = 0; HealthCheckGracePeriod: int = 0;
          VPCZoneIdentifier: string = ""; Action: string = "UpdateAutoScalingGroup";
          AvailabilityZones: JsonNode = nil; MinSize: int = 0; DefaultCooldown: int = 0;
          MaxInstanceLifetime: int = 0; MaxSize: int = 0;
          ServiceLinkedRoleARN: string = "";
          MixedInstancesPolicyInstancesDistribution: string = "";
          NewInstancesProtectedFromScaleIn: bool = false;
          LaunchTemplateLaunchTemplateId: string = "";
          LaunchTemplateVersion: string = ""; TerminationPolicies: JsonNode = nil;
          Version: string = "2011-01-01";
          MixedInstancesPolicyLaunchTemplate: string = "";
          LaunchTemplateLaunchTemplateName: string = ""): Recallable =
  ## postUpdateAutoScalingGroup
  ## <p>Updates the configuration for the specified Auto Scaling group.</p> <p>To update an Auto Scaling group, specify the name of the group and the parameter that you want to change. Any parameters that you don't specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. </p> <p>If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.</p> <p>Note the following about changing <code>DesiredCapacity</code>, <code>MaxSize</code>, or <code>MinSize</code>:</p> <ul> <li> <p>If a scale-in event occurs as a result of a new <code>DesiredCapacity</code> value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.</p> </li> <li> <p>If you specify a new value for <code>MinSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MinSize</code> is larger than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MinSize</code> value.</p> </li> <li> <p>If you specify a new value for <code>MaxSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MaxSize</code> is smaller than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MaxSize</code> value.</p> </li> </ul> <p>To see which parameters have been set, use <a>DescribeAutoScalingGroups</a>. You can also view the scaling policies for an Auto Scaling group using <a>DescribePolicies</a>. If the group has scaling policies, you can update them using <a>PutScalingPolicy</a>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   PlacementGroup: string
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   LaunchConfigurationName: string
  ##                          : The name of the launch configuration. If you specify <code>LaunchConfigurationName</code> in your update request, you can't specify <code>LaunchTemplate</code> or <code>MixedInstancesPolicy</code>.
  ##   HealthCheckType: string
  ##                  : The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.
  ##   DesiredCapacity: int
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group.
  ##   HealthCheckGracePeriod: int
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   VPCZoneIdentifier: string
  ##                    : <p>A comma-separated list of subnet IDs for virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p>
  ##   Action: string (required)
  ##   AvailabilityZones: JArray
  ##                    : One or more Availability Zones for the group.
  ##   MinSize: int
  ##          : The minimum size of the Auto Scaling group.
  ##   DefaultCooldown: int
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>. This cooldown period is not used when a scaling-specific cooldown is specified.</p> <p>Cooldown periods are not supported for target tracking scaling policies, step scaling policies, or scheduled scaling. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MaxInstanceLifetime: int
  ##                      : <p>The maximum amount of time, in seconds, that an instance can be in service.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-max-instance-lifetime.html">Replacing Auto Scaling Instances Based on Maximum Instance Lifetime</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Valid Range: Minimum value of 604800.</p>
  ##   MaxSize: int
  ##          : The maximum size of the Auto Scaling group.
  ##   ServiceLinkedRoleARN: string
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   MixedInstancesPolicyInstancesDistribution: string
  ##                                            : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified, the value for each parameter in <code>InstancesDistribution</code> uses a default value.</p>
  ##   NewInstancesProtectedFromScaleIn: bool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LaunchTemplateLaunchTemplateId: string
  ##                                 : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  ##   LaunchTemplateVersion: string
  ##                        : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   TerminationPolicies: JArray
  ##                      : <p>A standalone termination policy or a list of termination policies used to select the instance to terminate. The policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Version: string (required)
  ##   MixedInstancesPolicyLaunchTemplate: string
  ##                                     : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   LaunchTemplateLaunchTemplateName: string
  ##                                   : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  var query_618539 = newJObject()
  var formData_618540 = newJObject()
  add(formData_618540, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_618540, "PlacementGroup", newJString(PlacementGroup))
  add(formData_618540, "LaunchConfigurationName",
      newJString(LaunchConfigurationName))
  add(formData_618540, "HealthCheckType", newJString(HealthCheckType))
  add(formData_618540, "DesiredCapacity", newJInt(DesiredCapacity))
  add(formData_618540, "HealthCheckGracePeriod", newJInt(HealthCheckGracePeriod))
  add(formData_618540, "VPCZoneIdentifier", newJString(VPCZoneIdentifier))
  add(query_618539, "Action", newJString(Action))
  if AvailabilityZones != nil:
    formData_618540.add "AvailabilityZones", AvailabilityZones
  add(formData_618540, "MinSize", newJInt(MinSize))
  add(formData_618540, "DefaultCooldown", newJInt(DefaultCooldown))
  add(formData_618540, "MaxInstanceLifetime", newJInt(MaxInstanceLifetime))
  add(formData_618540, "MaxSize", newJInt(MaxSize))
  add(formData_618540, "ServiceLinkedRoleARN", newJString(ServiceLinkedRoleARN))
  add(formData_618540, "MixedInstancesPolicy.InstancesDistribution",
      newJString(MixedInstancesPolicyInstancesDistribution))
  add(formData_618540, "NewInstancesProtectedFromScaleIn",
      newJBool(NewInstancesProtectedFromScaleIn))
  add(formData_618540, "LaunchTemplate.LaunchTemplateId",
      newJString(LaunchTemplateLaunchTemplateId))
  add(formData_618540, "LaunchTemplate.Version", newJString(LaunchTemplateVersion))
  if TerminationPolicies != nil:
    formData_618540.add "TerminationPolicies", TerminationPolicies
  add(query_618539, "Version", newJString(Version))
  add(formData_618540, "MixedInstancesPolicy.LaunchTemplate",
      newJString(MixedInstancesPolicyLaunchTemplate))
  add(formData_618540, "LaunchTemplate.LaunchTemplateName",
      newJString(LaunchTemplateLaunchTemplateName))
  result = call_618538.call(nil, query_618539, nil, formData_618540, nil)

var postUpdateAutoScalingGroup* = Call_PostUpdateAutoScalingGroup_618505(
    name: "postUpdateAutoScalingGroup", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=UpdateAutoScalingGroup",
    validator: validate_PostUpdateAutoScalingGroup_618506, base: "/",
    url: url_PostUpdateAutoScalingGroup_618507,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateAutoScalingGroup_618470 = ref object of OpenApiRestCall_615866
proc url_GetUpdateAutoScalingGroup_618472(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateAutoScalingGroup_618471(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the configuration for the specified Auto Scaling group.</p> <p>To update an Auto Scaling group, specify the name of the group and the parameter that you want to change. Any parameters that you don't specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. </p> <p>If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.</p> <p>Note the following about changing <code>DesiredCapacity</code>, <code>MaxSize</code>, or <code>MinSize</code>:</p> <ul> <li> <p>If a scale-in event occurs as a result of a new <code>DesiredCapacity</code> value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.</p> </li> <li> <p>If you specify a new value for <code>MinSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MinSize</code> is larger than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MinSize</code> value.</p> </li> <li> <p>If you specify a new value for <code>MaxSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MaxSize</code> is smaller than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MaxSize</code> value.</p> </li> </ul> <p>To see which parameters have been set, use <a>DescribeAutoScalingGroups</a>. You can also view the scaling policies for an Auto Scaling group using <a>DescribePolicies</a>. If the group has scaling policies, you can update them using <a>PutScalingPolicy</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   HealthCheckType: JString
  ##                  : The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.
  ##   TerminationPolicies: JArray
  ##                      : <p>A standalone termination policy or a list of termination policies used to select the instance to terminate. The policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   DesiredCapacity: JInt
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group.
  ##   LaunchTemplate.LaunchTemplateId: JString
  ##                                  : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  ##   AvailabilityZones: JArray
  ##                    : One or more Availability Zones for the group.
  ##   LaunchTemplate.LaunchTemplateName: JString
  ##                                    : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   VPCZoneIdentifier: JString
  ##                    : <p>A comma-separated list of subnet IDs for virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p>
  ##   NewInstancesProtectedFromScaleIn: JBool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MixedInstancesPolicy.LaunchTemplate: JString
  ##                                      : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   LaunchConfigurationName: JString
  ##                          : The name of the launch configuration. If you specify <code>LaunchConfigurationName</code> in your update request, you can't specify <code>LaunchTemplate</code> or <code>MixedInstancesPolicy</code>.
  ##   MaxInstanceLifetime: JInt
  ##                      : <p>The maximum amount of time, in seconds, that an instance can be in service.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-max-instance-lifetime.html">Replacing Auto Scaling Instances Based on Maximum Instance Lifetime</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Valid Range: Minimum value of 604800.</p>
  ##   Action: JString (required)
  ##   PlacementGroup: JString
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   HealthCheckGracePeriod: JInt
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   MixedInstancesPolicy.InstancesDistribution: JString
  ##                                             : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified, the value for each parameter in <code>InstancesDistribution</code> uses a default value.</p>
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LaunchTemplate.Version: JString
  ##                         : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   DefaultCooldown: JInt
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>. This cooldown period is not used when a scaling-specific cooldown is specified.</p> <p>Cooldown periods are not supported for target tracking scaling policies, step scaling policies, or scheduled scaling. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MaxSize: JInt
  ##          : The maximum size of the Auto Scaling group.
  ##   MinSize: JInt
  ##          : The minimum size of the Auto Scaling group.
  ##   ServiceLinkedRoleARN: JString
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   Version: JString (required)
  section = newJObject()
  var valid_618473 = query.getOrDefault("HealthCheckType")
  valid_618473 = validateParameter(valid_618473, JString, required = false,
                                 default = nil)
  if valid_618473 != nil:
    section.add "HealthCheckType", valid_618473
  var valid_618474 = query.getOrDefault("TerminationPolicies")
  valid_618474 = validateParameter(valid_618474, JArray, required = false,
                                 default = nil)
  if valid_618474 != nil:
    section.add "TerminationPolicies", valid_618474
  var valid_618475 = query.getOrDefault("DesiredCapacity")
  valid_618475 = validateParameter(valid_618475, JInt, required = false, default = nil)
  if valid_618475 != nil:
    section.add "DesiredCapacity", valid_618475
  var valid_618476 = query.getOrDefault("LaunchTemplate.LaunchTemplateId")
  valid_618476 = validateParameter(valid_618476, JString, required = false,
                                 default = nil)
  if valid_618476 != nil:
    section.add "LaunchTemplate.LaunchTemplateId", valid_618476
  var valid_618477 = query.getOrDefault("AvailabilityZones")
  valid_618477 = validateParameter(valid_618477, JArray, required = false,
                                 default = nil)
  if valid_618477 != nil:
    section.add "AvailabilityZones", valid_618477
  var valid_618478 = query.getOrDefault("LaunchTemplate.LaunchTemplateName")
  valid_618478 = validateParameter(valid_618478, JString, required = false,
                                 default = nil)
  if valid_618478 != nil:
    section.add "LaunchTemplate.LaunchTemplateName", valid_618478
  var valid_618479 = query.getOrDefault("VPCZoneIdentifier")
  valid_618479 = validateParameter(valid_618479, JString, required = false,
                                 default = nil)
  if valid_618479 != nil:
    section.add "VPCZoneIdentifier", valid_618479
  var valid_618480 = query.getOrDefault("NewInstancesProtectedFromScaleIn")
  valid_618480 = validateParameter(valid_618480, JBool, required = false, default = nil)
  if valid_618480 != nil:
    section.add "NewInstancesProtectedFromScaleIn", valid_618480
  var valid_618481 = query.getOrDefault("MixedInstancesPolicy.LaunchTemplate")
  valid_618481 = validateParameter(valid_618481, JString, required = false,
                                 default = nil)
  if valid_618481 != nil:
    section.add "MixedInstancesPolicy.LaunchTemplate", valid_618481
  var valid_618482 = query.getOrDefault("LaunchConfigurationName")
  valid_618482 = validateParameter(valid_618482, JString, required = false,
                                 default = nil)
  if valid_618482 != nil:
    section.add "LaunchConfigurationName", valid_618482
  var valid_618483 = query.getOrDefault("MaxInstanceLifetime")
  valid_618483 = validateParameter(valid_618483, JInt, required = false, default = nil)
  if valid_618483 != nil:
    section.add "MaxInstanceLifetime", valid_618483
  var valid_618484 = query.getOrDefault("Action")
  valid_618484 = validateParameter(valid_618484, JString, required = true,
                                 default = newJString("UpdateAutoScalingGroup"))
  if valid_618484 != nil:
    section.add "Action", valid_618484
  var valid_618485 = query.getOrDefault("PlacementGroup")
  valid_618485 = validateParameter(valid_618485, JString, required = false,
                                 default = nil)
  if valid_618485 != nil:
    section.add "PlacementGroup", valid_618485
  var valid_618486 = query.getOrDefault("HealthCheckGracePeriod")
  valid_618486 = validateParameter(valid_618486, JInt, required = false, default = nil)
  if valid_618486 != nil:
    section.add "HealthCheckGracePeriod", valid_618486
  var valid_618487 = query.getOrDefault("MixedInstancesPolicy.InstancesDistribution")
  valid_618487 = validateParameter(valid_618487, JString, required = false,
                                 default = nil)
  if valid_618487 != nil:
    section.add "MixedInstancesPolicy.InstancesDistribution", valid_618487
  var valid_618488 = query.getOrDefault("AutoScalingGroupName")
  valid_618488 = validateParameter(valid_618488, JString, required = true,
                                 default = nil)
  if valid_618488 != nil:
    section.add "AutoScalingGroupName", valid_618488
  var valid_618489 = query.getOrDefault("LaunchTemplate.Version")
  valid_618489 = validateParameter(valid_618489, JString, required = false,
                                 default = nil)
  if valid_618489 != nil:
    section.add "LaunchTemplate.Version", valid_618489
  var valid_618490 = query.getOrDefault("DefaultCooldown")
  valid_618490 = validateParameter(valid_618490, JInt, required = false, default = nil)
  if valid_618490 != nil:
    section.add "DefaultCooldown", valid_618490
  var valid_618491 = query.getOrDefault("MaxSize")
  valid_618491 = validateParameter(valid_618491, JInt, required = false, default = nil)
  if valid_618491 != nil:
    section.add "MaxSize", valid_618491
  var valid_618492 = query.getOrDefault("MinSize")
  valid_618492 = validateParameter(valid_618492, JInt, required = false, default = nil)
  if valid_618492 != nil:
    section.add "MinSize", valid_618492
  var valid_618493 = query.getOrDefault("ServiceLinkedRoleARN")
  valid_618493 = validateParameter(valid_618493, JString, required = false,
                                 default = nil)
  if valid_618493 != nil:
    section.add "ServiceLinkedRoleARN", valid_618493
  var valid_618494 = query.getOrDefault("Version")
  valid_618494 = validateParameter(valid_618494, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_618494 != nil:
    section.add "Version", valid_618494
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_618495 = header.getOrDefault("X-Amz-Date")
  valid_618495 = validateParameter(valid_618495, JString, required = false,
                                 default = nil)
  if valid_618495 != nil:
    section.add "X-Amz-Date", valid_618495
  var valid_618496 = header.getOrDefault("X-Amz-Security-Token")
  valid_618496 = validateParameter(valid_618496, JString, required = false,
                                 default = nil)
  if valid_618496 != nil:
    section.add "X-Amz-Security-Token", valid_618496
  var valid_618497 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618497 = validateParameter(valid_618497, JString, required = false,
                                 default = nil)
  if valid_618497 != nil:
    section.add "X-Amz-Content-Sha256", valid_618497
  var valid_618498 = header.getOrDefault("X-Amz-Algorithm")
  valid_618498 = validateParameter(valid_618498, JString, required = false,
                                 default = nil)
  if valid_618498 != nil:
    section.add "X-Amz-Algorithm", valid_618498
  var valid_618499 = header.getOrDefault("X-Amz-Signature")
  valid_618499 = validateParameter(valid_618499, JString, required = false,
                                 default = nil)
  if valid_618499 != nil:
    section.add "X-Amz-Signature", valid_618499
  var valid_618500 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618500 = validateParameter(valid_618500, JString, required = false,
                                 default = nil)
  if valid_618500 != nil:
    section.add "X-Amz-SignedHeaders", valid_618500
  var valid_618501 = header.getOrDefault("X-Amz-Credential")
  valid_618501 = validateParameter(valid_618501, JString, required = false,
                                 default = nil)
  if valid_618501 != nil:
    section.add "X-Amz-Credential", valid_618501
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618502: Call_GetUpdateAutoScalingGroup_618470; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the configuration for the specified Auto Scaling group.</p> <p>To update an Auto Scaling group, specify the name of the group and the parameter that you want to change. Any parameters that you don't specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. </p> <p>If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.</p> <p>Note the following about changing <code>DesiredCapacity</code>, <code>MaxSize</code>, or <code>MinSize</code>:</p> <ul> <li> <p>If a scale-in event occurs as a result of a new <code>DesiredCapacity</code> value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.</p> </li> <li> <p>If you specify a new value for <code>MinSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MinSize</code> is larger than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MinSize</code> value.</p> </li> <li> <p>If you specify a new value for <code>MaxSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MaxSize</code> is smaller than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MaxSize</code> value.</p> </li> </ul> <p>To see which parameters have been set, use <a>DescribeAutoScalingGroups</a>. You can also view the scaling policies for an Auto Scaling group using <a>DescribePolicies</a>. If the group has scaling policies, you can update them using <a>PutScalingPolicy</a>.</p>
  ## 
  let valid = call_618502.validator(path, query, header, formData, body)
  let scheme = call_618502.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618502.url(scheme.get, call_618502.host, call_618502.base,
                         call_618502.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618502, url, valid)

proc call*(call_618503: Call_GetUpdateAutoScalingGroup_618470;
          AutoScalingGroupName: string; HealthCheckType: string = "";
          TerminationPolicies: JsonNode = nil; DesiredCapacity: int = 0;
          LaunchTemplateLaunchTemplateId: string = "";
          AvailabilityZones: JsonNode = nil;
          LaunchTemplateLaunchTemplateName: string = "";
          VPCZoneIdentifier: string = "";
          NewInstancesProtectedFromScaleIn: bool = false;
          MixedInstancesPolicyLaunchTemplate: string = "";
          LaunchConfigurationName: string = ""; MaxInstanceLifetime: int = 0;
          Action: string = "UpdateAutoScalingGroup"; PlacementGroup: string = "";
          HealthCheckGracePeriod: int = 0;
          MixedInstancesPolicyInstancesDistribution: string = "";
          LaunchTemplateVersion: string = ""; DefaultCooldown: int = 0;
          MaxSize: int = 0; MinSize: int = 0; ServiceLinkedRoleARN: string = "";
          Version: string = "2011-01-01"): Recallable =
  ## getUpdateAutoScalingGroup
  ## <p>Updates the configuration for the specified Auto Scaling group.</p> <p>To update an Auto Scaling group, specify the name of the group and the parameter that you want to change. Any parameters that you don't specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. </p> <p>If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.</p> <p>Note the following about changing <code>DesiredCapacity</code>, <code>MaxSize</code>, or <code>MinSize</code>:</p> <ul> <li> <p>If a scale-in event occurs as a result of a new <code>DesiredCapacity</code> value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.</p> </li> <li> <p>If you specify a new value for <code>MinSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MinSize</code> is larger than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MinSize</code> value.</p> </li> <li> <p>If you specify a new value for <code>MaxSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MaxSize</code> is smaller than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MaxSize</code> value.</p> </li> </ul> <p>To see which parameters have been set, use <a>DescribeAutoScalingGroups</a>. You can also view the scaling policies for an Auto Scaling group using <a>DescribePolicies</a>. If the group has scaling policies, you can update them using <a>PutScalingPolicy</a>.</p>
  ##   HealthCheckType: string
  ##                  : The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.
  ##   TerminationPolicies: JArray
  ##                      : <p>A standalone termination policy or a list of termination policies used to select the instance to terminate. The policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   DesiredCapacity: int
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group.
  ##   LaunchTemplateLaunchTemplateId: string
  ##                                 : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  ##   AvailabilityZones: JArray
  ##                    : One or more Availability Zones for the group.
  ##   LaunchTemplateLaunchTemplateName: string
  ##                                   : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   VPCZoneIdentifier: string
  ##                    : <p>A comma-separated list of subnet IDs for virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p>
  ##   NewInstancesProtectedFromScaleIn: bool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MixedInstancesPolicyLaunchTemplate: string
  ##                                     : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   LaunchConfigurationName: string
  ##                          : The name of the launch configuration. If you specify <code>LaunchConfigurationName</code> in your update request, you can't specify <code>LaunchTemplate</code> or <code>MixedInstancesPolicy</code>.
  ##   MaxInstanceLifetime: int
  ##                      : <p>The maximum amount of time, in seconds, that an instance can be in service.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-max-instance-lifetime.html">Replacing Auto Scaling Instances Based on Maximum Instance Lifetime</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Valid Range: Minimum value of 604800.</p>
  ##   Action: string (required)
  ##   PlacementGroup: string
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   HealthCheckGracePeriod: int
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   MixedInstancesPolicyInstancesDistribution: string
  ##                                            : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified, the value for each parameter in <code>InstancesDistribution</code> uses a default value.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   LaunchTemplateVersion: string
  ##                        : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   DefaultCooldown: int
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>. This cooldown period is not used when a scaling-specific cooldown is specified.</p> <p>Cooldown periods are not supported for target tracking scaling policies, step scaling policies, or scheduled scaling. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MaxSize: int
  ##          : The maximum size of the Auto Scaling group.
  ##   MinSize: int
  ##          : The minimum size of the Auto Scaling group.
  ##   ServiceLinkedRoleARN: string
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   Version: string (required)
  var query_618504 = newJObject()
  add(query_618504, "HealthCheckType", newJString(HealthCheckType))
  if TerminationPolicies != nil:
    query_618504.add "TerminationPolicies", TerminationPolicies
  add(query_618504, "DesiredCapacity", newJInt(DesiredCapacity))
  add(query_618504, "LaunchTemplate.LaunchTemplateId",
      newJString(LaunchTemplateLaunchTemplateId))
  if AvailabilityZones != nil:
    query_618504.add "AvailabilityZones", AvailabilityZones
  add(query_618504, "LaunchTemplate.LaunchTemplateName",
      newJString(LaunchTemplateLaunchTemplateName))
  add(query_618504, "VPCZoneIdentifier", newJString(VPCZoneIdentifier))
  add(query_618504, "NewInstancesProtectedFromScaleIn",
      newJBool(NewInstancesProtectedFromScaleIn))
  add(query_618504, "MixedInstancesPolicy.LaunchTemplate",
      newJString(MixedInstancesPolicyLaunchTemplate))
  add(query_618504, "LaunchConfigurationName", newJString(LaunchConfigurationName))
  add(query_618504, "MaxInstanceLifetime", newJInt(MaxInstanceLifetime))
  add(query_618504, "Action", newJString(Action))
  add(query_618504, "PlacementGroup", newJString(PlacementGroup))
  add(query_618504, "HealthCheckGracePeriod", newJInt(HealthCheckGracePeriod))
  add(query_618504, "MixedInstancesPolicy.InstancesDistribution",
      newJString(MixedInstancesPolicyInstancesDistribution))
  add(query_618504, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_618504, "LaunchTemplate.Version", newJString(LaunchTemplateVersion))
  add(query_618504, "DefaultCooldown", newJInt(DefaultCooldown))
  add(query_618504, "MaxSize", newJInt(MaxSize))
  add(query_618504, "MinSize", newJInt(MinSize))
  add(query_618504, "ServiceLinkedRoleARN", newJString(ServiceLinkedRoleARN))
  add(query_618504, "Version", newJString(Version))
  result = call_618503.call(nil, query_618504, nil, nil, nil)

var getUpdateAutoScalingGroup* = Call_GetUpdateAutoScalingGroup_618470(
    name: "getUpdateAutoScalingGroup", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=UpdateAutoScalingGroup",
    validator: validate_GetUpdateAutoScalingGroup_618471, base: "/",
    url: url_GetUpdateAutoScalingGroup_618472,
    schemes: {Scheme.Https, Scheme.Http})
export
  rest

type
  EnvKind = enum
    BakeIntoBinary = "Baking $1 into the binary",
    FetchFromEnv = "Fetch $1 from the environment"
template sloppyConst(via: EnvKind; name: untyped): untyped =
  import
    macros

  const
    name {.strdefine.}: string = case via
    of BakeIntoBinary:
      getEnv(astToStr(name), "")
    of FetchFromEnv:
      ""
  static :
    let msg = block:
      if name == "":
        "Missing $1 in the environment"
      else:
        $via
    warning msg % [astToStr(name)]

sloppyConst FetchFromEnv, AWS_ACCESS_KEY_ID
sloppyConst FetchFromEnv, AWS_SECRET_ACCESS_KEY
sloppyConst BakeIntoBinary, AWS_REGION
sloppyConst FetchFromEnv, AWS_ACCOUNT_ID
type
  XAmz = enum
    SecurityToken = "X-Amz-Security-Token", ContentSha256 = "X-Amz-Content-Sha256"
proc atozSign(recall: var Recallable; query: JsonNode; algo: SigningAlgo = SHA256) =
  let
    date = makeDateTime()
    access = os.getEnv("AWS_ACCESS_KEY_ID", AWS_ACCESS_KEY_ID)
    secret = os.getEnv("AWS_SECRET_ACCESS_KEY", AWS_SECRET_ACCESS_KEY)
    region = os.getEnv("AWS_REGION", AWS_REGION)
  assert secret != "", "need $AWS_SECRET_ACCESS_KEY in environment"
  assert access != "", "need $AWS_ACCESS_KEY_ID in environment"
  assert region != "", "need $AWS_REGION in environment"
  var
    normal: PathNormal
    url = normalizeUrl(recall.url, query, normalize = normal)
    scheme = parseEnum[Scheme](url.scheme)
  assert scheme in awsServers, "unknown scheme `" & $scheme & "`"
  assert region in awsServers[scheme], "unknown region `" & region & "`"
  url.hostname = awsServers[scheme][region]
  case awsServiceName.toLowerAscii
  of "s3":
    normal = PathNormal.S3
  else:
    normal = PathNormal.Default
  recall.headers["Host"] = url.hostname
  recall.headers["X-Amz-Date"] = date
  recall.headers[$ContentSha256] = hash(recall.body, SHA256)
  let
    scope = credentialScope(region = region, service = awsServiceName, date = date)
    request = canonicalRequest(recall.meth, $url, query, recall.headers, recall.body,
                             normalize = normal, digest = algo)
    sts = stringToSign(request.hash(algo), scope, date = date, digest = algo)
    signature = calculateSignature(secret = secret, date = date, region = region,
                                 service = awsServiceName, sts, digest = algo)
  var auth = $algo & " "
  auth &= "Credential=" & access / scope & ", "
  auth &= "SignedHeaders=" & recall.headers.signedHeaders & ", "
  auth &= "Signature=" & signature
  recall.headers["Authorization"] = auth
  recall.headers.del "Host"
  recall.url = $url

method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  ## the hook is a terrible earworm
  var headers = newHttpHeaders(massageHeaders(input.getOrDefault("header")))
  let
    body = input.getOrDefault("body")
    text = if body == nil:
      "" elif body.kind == JString:
      body.getStr else:
      $body
  if body != nil and body.kind != JString:
    if not headers.hasKey("content-type"):
      headers["content-type"] = "application/x-amz-json-1.0"
  if not headers.hasKey($SecurityToken):
    let session = getEnv("AWS_SESSION_TOKEN", "")
    if session != "":
      headers[$SecurityToken] = session
  result = newRecallable(call, url, headers, text)
  result.atozSign(input.getOrDefault("query"), SHA256)
