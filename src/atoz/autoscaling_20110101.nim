
import
  json, options, hashes, uri, strutils, tables, rest, os, uri, strutils, httpcore, sigv4

## auto-generated via openapi macro
## title: Auto Scaling
## version: 2011-01-01
## termsOfService: https://aws.amazon.com/service-terms/
## license:
##     name: Apache 2.0 License
##     url: http://www.apache.org/licenses/
## 
## <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch or terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks. Use this service with AWS Auto Scaling, Amazon CloudWatch, and Elastic Load Balancing.</p> <p>For more information, including information about granting IAM users required permissions for Amazon EC2 Auto Scaling actions, see the <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">Amazon EC2 Auto Scaling User Guide</a>.</p>
## 
## Amazon Web Services documentation
## https://docs.aws.amazon.com/autoscaling/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_601389 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_601389](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_601389): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    case js.kind
    of JInt, JFloat, JNull, JBool:
      head = $js
    of JString:
      head = js.getStr
    else:
      return
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  awsServers = {Scheme.Http: {"ap-northeast-1": "autoscaling.ap-northeast-1.amazonaws.com", "ap-southeast-1": "autoscaling.ap-southeast-1.amazonaws.com",
                           "us-west-2": "autoscaling.us-west-2.amazonaws.com",
                           "eu-west-2": "autoscaling.eu-west-2.amazonaws.com", "ap-northeast-3": "autoscaling.ap-northeast-3.amazonaws.com", "eu-central-1": "autoscaling.eu-central-1.amazonaws.com",
                           "us-east-2": "autoscaling.us-east-2.amazonaws.com",
                           "us-east-1": "autoscaling.us-east-1.amazonaws.com", "cn-northwest-1": "autoscaling.cn-northwest-1.amazonaws.com.cn", "ap-south-1": "autoscaling.ap-south-1.amazonaws.com", "eu-north-1": "autoscaling.eu-north-1.amazonaws.com", "ap-northeast-2": "autoscaling.ap-northeast-2.amazonaws.com",
                           "us-west-1": "autoscaling.us-west-1.amazonaws.com", "us-gov-east-1": "autoscaling.us-gov-east-1.amazonaws.com",
                           "eu-west-3": "autoscaling.eu-west-3.amazonaws.com", "cn-north-1": "autoscaling.cn-north-1.amazonaws.com.cn",
                           "sa-east-1": "autoscaling.sa-east-1.amazonaws.com",
                           "eu-west-1": "autoscaling.eu-west-1.amazonaws.com", "us-gov-west-1": "autoscaling.us-gov-west-1.amazonaws.com", "ap-southeast-2": "autoscaling.ap-southeast-2.amazonaws.com", "ca-central-1": "autoscaling.ca-central-1.amazonaws.com"}.toTable, Scheme.Https: {
      "ap-northeast-1": "autoscaling.ap-northeast-1.amazonaws.com",
      "ap-southeast-1": "autoscaling.ap-southeast-1.amazonaws.com",
      "us-west-2": "autoscaling.us-west-2.amazonaws.com",
      "eu-west-2": "autoscaling.eu-west-2.amazonaws.com",
      "ap-northeast-3": "autoscaling.ap-northeast-3.amazonaws.com",
      "eu-central-1": "autoscaling.eu-central-1.amazonaws.com",
      "us-east-2": "autoscaling.us-east-2.amazonaws.com",
      "us-east-1": "autoscaling.us-east-1.amazonaws.com",
      "cn-northwest-1": "autoscaling.cn-northwest-1.amazonaws.com.cn",
      "ap-south-1": "autoscaling.ap-south-1.amazonaws.com",
      "eu-north-1": "autoscaling.eu-north-1.amazonaws.com",
      "ap-northeast-2": "autoscaling.ap-northeast-2.amazonaws.com",
      "us-west-1": "autoscaling.us-west-1.amazonaws.com",
      "us-gov-east-1": "autoscaling.us-gov-east-1.amazonaws.com",
      "eu-west-3": "autoscaling.eu-west-3.amazonaws.com",
      "cn-north-1": "autoscaling.cn-north-1.amazonaws.com.cn",
      "sa-east-1": "autoscaling.sa-east-1.amazonaws.com",
      "eu-west-1": "autoscaling.eu-west-1.amazonaws.com",
      "us-gov-west-1": "autoscaling.us-gov-west-1.amazonaws.com",
      "ap-southeast-2": "autoscaling.ap-southeast-2.amazonaws.com",
      "ca-central-1": "autoscaling.ca-central-1.amazonaws.com"}.toTable}.toTable
const
  awsServiceName = "autoscaling"
method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_PostAttachInstances_601999 = ref object of OpenApiRestCall_601389
proc url_PostAttachInstances_602001(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAttachInstances_602000(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Attaches one or more EC2 instances to the specified Auto Scaling group.</p> <p>When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.</p> <p>If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html">Attach EC2 Instances to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602002 = query.getOrDefault("Action")
  valid_602002 = validateParameter(valid_602002, JString, required = true,
                                 default = newJString("AttachInstances"))
  if valid_602002 != nil:
    section.add "Action", valid_602002
  var valid_602003 = query.getOrDefault("Version")
  valid_602003 = validateParameter(valid_602003, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602003 != nil:
    section.add "Version", valid_602003
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602004 = header.getOrDefault("X-Amz-Signature")
  valid_602004 = validateParameter(valid_602004, JString, required = false,
                                 default = nil)
  if valid_602004 != nil:
    section.add "X-Amz-Signature", valid_602004
  var valid_602005 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602005 = validateParameter(valid_602005, JString, required = false,
                                 default = nil)
  if valid_602005 != nil:
    section.add "X-Amz-Content-Sha256", valid_602005
  var valid_602006 = header.getOrDefault("X-Amz-Date")
  valid_602006 = validateParameter(valid_602006, JString, required = false,
                                 default = nil)
  if valid_602006 != nil:
    section.add "X-Amz-Date", valid_602006
  var valid_602007 = header.getOrDefault("X-Amz-Credential")
  valid_602007 = validateParameter(valid_602007, JString, required = false,
                                 default = nil)
  if valid_602007 != nil:
    section.add "X-Amz-Credential", valid_602007
  var valid_602008 = header.getOrDefault("X-Amz-Security-Token")
  valid_602008 = validateParameter(valid_602008, JString, required = false,
                                 default = nil)
  if valid_602008 != nil:
    section.add "X-Amz-Security-Token", valid_602008
  var valid_602009 = header.getOrDefault("X-Amz-Algorithm")
  valid_602009 = validateParameter(valid_602009, JString, required = false,
                                 default = nil)
  if valid_602009 != nil:
    section.add "X-Amz-Algorithm", valid_602009
  var valid_602010 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602010 = validateParameter(valid_602010, JString, required = false,
                                 default = nil)
  if valid_602010 != nil:
    section.add "X-Amz-SignedHeaders", valid_602010
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_602011 = formData.getOrDefault("AutoScalingGroupName")
  valid_602011 = validateParameter(valid_602011, JString, required = true,
                                 default = nil)
  if valid_602011 != nil:
    section.add "AutoScalingGroupName", valid_602011
  var valid_602012 = formData.getOrDefault("InstanceIds")
  valid_602012 = validateParameter(valid_602012, JArray, required = false,
                                 default = nil)
  if valid_602012 != nil:
    section.add "InstanceIds", valid_602012
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602013: Call_PostAttachInstances_601999; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches one or more EC2 instances to the specified Auto Scaling group.</p> <p>When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.</p> <p>If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html">Attach EC2 Instances to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_602013.validator(path, query, header, formData, body)
  let scheme = call_602013.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602013.url(scheme.get, call_602013.host, call_602013.base,
                         call_602013.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602013, url, valid)

proc call*(call_602014: Call_PostAttachInstances_601999;
          AutoScalingGroupName: string; InstanceIds: JsonNode = nil;
          Action: string = "AttachInstances"; Version: string = "2011-01-01"): Recallable =
  ## postAttachInstances
  ## <p>Attaches one or more EC2 instances to the specified Auto Scaling group.</p> <p>When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.</p> <p>If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html">Attach EC2 Instances to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602015 = newJObject()
  var formData_602016 = newJObject()
  add(formData_602016, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if InstanceIds != nil:
    formData_602016.add "InstanceIds", InstanceIds
  add(query_602015, "Action", newJString(Action))
  add(query_602015, "Version", newJString(Version))
  result = call_602014.call(nil, query_602015, nil, formData_602016, nil)

var postAttachInstances* = Call_PostAttachInstances_601999(
    name: "postAttachInstances", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=AttachInstances",
    validator: validate_PostAttachInstances_602000, base: "/",
    url: url_PostAttachInstances_602001, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAttachInstances_601727 = ref object of OpenApiRestCall_601389
proc url_GetAttachInstances_601729(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAttachInstances_601728(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Attaches one or more EC2 instances to the specified Auto Scaling group.</p> <p>When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.</p> <p>If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html">Attach EC2 Instances to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_601841 = query.getOrDefault("InstanceIds")
  valid_601841 = validateParameter(valid_601841, JArray, required = false,
                                 default = nil)
  if valid_601841 != nil:
    section.add "InstanceIds", valid_601841
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_601842 = query.getOrDefault("AutoScalingGroupName")
  valid_601842 = validateParameter(valid_601842, JString, required = true,
                                 default = nil)
  if valid_601842 != nil:
    section.add "AutoScalingGroupName", valid_601842
  var valid_601856 = query.getOrDefault("Action")
  valid_601856 = validateParameter(valid_601856, JString, required = true,
                                 default = newJString("AttachInstances"))
  if valid_601856 != nil:
    section.add "Action", valid_601856
  var valid_601857 = query.getOrDefault("Version")
  valid_601857 = validateParameter(valid_601857, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_601857 != nil:
    section.add "Version", valid_601857
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_601858 = header.getOrDefault("X-Amz-Signature")
  valid_601858 = validateParameter(valid_601858, JString, required = false,
                                 default = nil)
  if valid_601858 != nil:
    section.add "X-Amz-Signature", valid_601858
  var valid_601859 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601859 = validateParameter(valid_601859, JString, required = false,
                                 default = nil)
  if valid_601859 != nil:
    section.add "X-Amz-Content-Sha256", valid_601859
  var valid_601860 = header.getOrDefault("X-Amz-Date")
  valid_601860 = validateParameter(valid_601860, JString, required = false,
                                 default = nil)
  if valid_601860 != nil:
    section.add "X-Amz-Date", valid_601860
  var valid_601861 = header.getOrDefault("X-Amz-Credential")
  valid_601861 = validateParameter(valid_601861, JString, required = false,
                                 default = nil)
  if valid_601861 != nil:
    section.add "X-Amz-Credential", valid_601861
  var valid_601862 = header.getOrDefault("X-Amz-Security-Token")
  valid_601862 = validateParameter(valid_601862, JString, required = false,
                                 default = nil)
  if valid_601862 != nil:
    section.add "X-Amz-Security-Token", valid_601862
  var valid_601863 = header.getOrDefault("X-Amz-Algorithm")
  valid_601863 = validateParameter(valid_601863, JString, required = false,
                                 default = nil)
  if valid_601863 != nil:
    section.add "X-Amz-Algorithm", valid_601863
  var valid_601864 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601864 = validateParameter(valid_601864, JString, required = false,
                                 default = nil)
  if valid_601864 != nil:
    section.add "X-Amz-SignedHeaders", valid_601864
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601887: Call_GetAttachInstances_601727; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches one or more EC2 instances to the specified Auto Scaling group.</p> <p>When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.</p> <p>If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html">Attach EC2 Instances to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_601887.validator(path, query, header, formData, body)
  let scheme = call_601887.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601887.url(scheme.get, call_601887.host, call_601887.base,
                         call_601887.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601887, url, valid)

proc call*(call_601958: Call_GetAttachInstances_601727;
          AutoScalingGroupName: string; InstanceIds: JsonNode = nil;
          Action: string = "AttachInstances"; Version: string = "2011-01-01"): Recallable =
  ## getAttachInstances
  ## <p>Attaches one or more EC2 instances to the specified Auto Scaling group.</p> <p>When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.</p> <p>If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html">Attach EC2 Instances to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601959 = newJObject()
  if InstanceIds != nil:
    query_601959.add "InstanceIds", InstanceIds
  add(query_601959, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_601959, "Action", newJString(Action))
  add(query_601959, "Version", newJString(Version))
  result = call_601958.call(nil, query_601959, nil, nil, nil)

var getAttachInstances* = Call_GetAttachInstances_601727(
    name: "getAttachInstances", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=AttachInstances",
    validator: validate_GetAttachInstances_601728, base: "/",
    url: url_GetAttachInstances_601729, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAttachLoadBalancerTargetGroups_602034 = ref object of OpenApiRestCall_601389
proc url_PostAttachLoadBalancerTargetGroups_602036(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAttachLoadBalancerTargetGroups_602035(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches one or more target groups to the specified Auto Scaling group.</p> <p>To describe the target groups for an Auto Scaling group, use <a>DescribeLoadBalancerTargetGroups</a>. To detach the target group from the Auto Scaling group, use <a>DetachLoadBalancerTargetGroups</a>.</p> <p>With Application Load Balancers and Network Load Balancers, instances are registered as targets with a target group. With Classic Load Balancers, instances are registered with the load balancer. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602037 = query.getOrDefault("Action")
  valid_602037 = validateParameter(valid_602037, JString, required = true, default = newJString(
      "AttachLoadBalancerTargetGroups"))
  if valid_602037 != nil:
    section.add "Action", valid_602037
  var valid_602038 = query.getOrDefault("Version")
  valid_602038 = validateParameter(valid_602038, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602038 != nil:
    section.add "Version", valid_602038
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602039 = header.getOrDefault("X-Amz-Signature")
  valid_602039 = validateParameter(valid_602039, JString, required = false,
                                 default = nil)
  if valid_602039 != nil:
    section.add "X-Amz-Signature", valid_602039
  var valid_602040 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602040 = validateParameter(valid_602040, JString, required = false,
                                 default = nil)
  if valid_602040 != nil:
    section.add "X-Amz-Content-Sha256", valid_602040
  var valid_602041 = header.getOrDefault("X-Amz-Date")
  valid_602041 = validateParameter(valid_602041, JString, required = false,
                                 default = nil)
  if valid_602041 != nil:
    section.add "X-Amz-Date", valid_602041
  var valid_602042 = header.getOrDefault("X-Amz-Credential")
  valid_602042 = validateParameter(valid_602042, JString, required = false,
                                 default = nil)
  if valid_602042 != nil:
    section.add "X-Amz-Credential", valid_602042
  var valid_602043 = header.getOrDefault("X-Amz-Security-Token")
  valid_602043 = validateParameter(valid_602043, JString, required = false,
                                 default = nil)
  if valid_602043 != nil:
    section.add "X-Amz-Security-Token", valid_602043
  var valid_602044 = header.getOrDefault("X-Amz-Algorithm")
  valid_602044 = validateParameter(valid_602044, JString, required = false,
                                 default = nil)
  if valid_602044 != nil:
    section.add "X-Amz-Algorithm", valid_602044
  var valid_602045 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602045 = validateParameter(valid_602045, JString, required = false,
                                 default = nil)
  if valid_602045 != nil:
    section.add "X-Amz-SignedHeaders", valid_602045
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_602046 = formData.getOrDefault("AutoScalingGroupName")
  valid_602046 = validateParameter(valid_602046, JString, required = true,
                                 default = nil)
  if valid_602046 != nil:
    section.add "AutoScalingGroupName", valid_602046
  var valid_602047 = formData.getOrDefault("TargetGroupARNs")
  valid_602047 = validateParameter(valid_602047, JArray, required = true, default = nil)
  if valid_602047 != nil:
    section.add "TargetGroupARNs", valid_602047
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602048: Call_PostAttachLoadBalancerTargetGroups_602034;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Attaches one or more target groups to the specified Auto Scaling group.</p> <p>To describe the target groups for an Auto Scaling group, use <a>DescribeLoadBalancerTargetGroups</a>. To detach the target group from the Auto Scaling group, use <a>DetachLoadBalancerTargetGroups</a>.</p> <p>With Application Load Balancers and Network Load Balancers, instances are registered as targets with a target group. With Classic Load Balancers, instances are registered with the load balancer. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_602048.validator(path, query, header, formData, body)
  let scheme = call_602048.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602048.url(scheme.get, call_602048.host, call_602048.base,
                         call_602048.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602048, url, valid)

proc call*(call_602049: Call_PostAttachLoadBalancerTargetGroups_602034;
          AutoScalingGroupName: string; TargetGroupARNs: JsonNode;
          Action: string = "AttachLoadBalancerTargetGroups";
          Version: string = "2011-01-01"): Recallable =
  ## postAttachLoadBalancerTargetGroups
  ## <p>Attaches one or more target groups to the specified Auto Scaling group.</p> <p>To describe the target groups for an Auto Scaling group, use <a>DescribeLoadBalancerTargetGroups</a>. To detach the target group from the Auto Scaling group, use <a>DetachLoadBalancerTargetGroups</a>.</p> <p>With Application Load Balancers and Network Load Balancers, instances are registered as targets with a target group. With Classic Load Balancers, instances are registered with the load balancer. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602050 = newJObject()
  var formData_602051 = newJObject()
  add(formData_602051, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if TargetGroupARNs != nil:
    formData_602051.add "TargetGroupARNs", TargetGroupARNs
  add(query_602050, "Action", newJString(Action))
  add(query_602050, "Version", newJString(Version))
  result = call_602049.call(nil, query_602050, nil, formData_602051, nil)

var postAttachLoadBalancerTargetGroups* = Call_PostAttachLoadBalancerTargetGroups_602034(
    name: "postAttachLoadBalancerTargetGroups", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=AttachLoadBalancerTargetGroups",
    validator: validate_PostAttachLoadBalancerTargetGroups_602035, base: "/",
    url: url_PostAttachLoadBalancerTargetGroups_602036,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAttachLoadBalancerTargetGroups_602017 = ref object of OpenApiRestCall_601389
proc url_GetAttachLoadBalancerTargetGroups_602019(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAttachLoadBalancerTargetGroups_602018(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches one or more target groups to the specified Auto Scaling group.</p> <p>To describe the target groups for an Auto Scaling group, use <a>DescribeLoadBalancerTargetGroups</a>. To detach the target group from the Auto Scaling group, use <a>DetachLoadBalancerTargetGroups</a>.</p> <p>With Application Load Balancers and Network Load Balancers, instances are registered as targets with a target group. With Classic Load Balancers, instances are registered with the load balancer. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_602020 = query.getOrDefault("AutoScalingGroupName")
  valid_602020 = validateParameter(valid_602020, JString, required = true,
                                 default = nil)
  if valid_602020 != nil:
    section.add "AutoScalingGroupName", valid_602020
  var valid_602021 = query.getOrDefault("TargetGroupARNs")
  valid_602021 = validateParameter(valid_602021, JArray, required = true, default = nil)
  if valid_602021 != nil:
    section.add "TargetGroupARNs", valid_602021
  var valid_602022 = query.getOrDefault("Action")
  valid_602022 = validateParameter(valid_602022, JString, required = true, default = newJString(
      "AttachLoadBalancerTargetGroups"))
  if valid_602022 != nil:
    section.add "Action", valid_602022
  var valid_602023 = query.getOrDefault("Version")
  valid_602023 = validateParameter(valid_602023, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602023 != nil:
    section.add "Version", valid_602023
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602024 = header.getOrDefault("X-Amz-Signature")
  valid_602024 = validateParameter(valid_602024, JString, required = false,
                                 default = nil)
  if valid_602024 != nil:
    section.add "X-Amz-Signature", valid_602024
  var valid_602025 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602025 = validateParameter(valid_602025, JString, required = false,
                                 default = nil)
  if valid_602025 != nil:
    section.add "X-Amz-Content-Sha256", valid_602025
  var valid_602026 = header.getOrDefault("X-Amz-Date")
  valid_602026 = validateParameter(valid_602026, JString, required = false,
                                 default = nil)
  if valid_602026 != nil:
    section.add "X-Amz-Date", valid_602026
  var valid_602027 = header.getOrDefault("X-Amz-Credential")
  valid_602027 = validateParameter(valid_602027, JString, required = false,
                                 default = nil)
  if valid_602027 != nil:
    section.add "X-Amz-Credential", valid_602027
  var valid_602028 = header.getOrDefault("X-Amz-Security-Token")
  valid_602028 = validateParameter(valid_602028, JString, required = false,
                                 default = nil)
  if valid_602028 != nil:
    section.add "X-Amz-Security-Token", valid_602028
  var valid_602029 = header.getOrDefault("X-Amz-Algorithm")
  valid_602029 = validateParameter(valid_602029, JString, required = false,
                                 default = nil)
  if valid_602029 != nil:
    section.add "X-Amz-Algorithm", valid_602029
  var valid_602030 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602030 = validateParameter(valid_602030, JString, required = false,
                                 default = nil)
  if valid_602030 != nil:
    section.add "X-Amz-SignedHeaders", valid_602030
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602031: Call_GetAttachLoadBalancerTargetGroups_602017;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Attaches one or more target groups to the specified Auto Scaling group.</p> <p>To describe the target groups for an Auto Scaling group, use <a>DescribeLoadBalancerTargetGroups</a>. To detach the target group from the Auto Scaling group, use <a>DetachLoadBalancerTargetGroups</a>.</p> <p>With Application Load Balancers and Network Load Balancers, instances are registered as targets with a target group. With Classic Load Balancers, instances are registered with the load balancer. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_602031.validator(path, query, header, formData, body)
  let scheme = call_602031.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602031.url(scheme.get, call_602031.host, call_602031.base,
                         call_602031.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602031, url, valid)

proc call*(call_602032: Call_GetAttachLoadBalancerTargetGroups_602017;
          AutoScalingGroupName: string; TargetGroupARNs: JsonNode;
          Action: string = "AttachLoadBalancerTargetGroups";
          Version: string = "2011-01-01"): Recallable =
  ## getAttachLoadBalancerTargetGroups
  ## <p>Attaches one or more target groups to the specified Auto Scaling group.</p> <p>To describe the target groups for an Auto Scaling group, use <a>DescribeLoadBalancerTargetGroups</a>. To detach the target group from the Auto Scaling group, use <a>DetachLoadBalancerTargetGroups</a>.</p> <p>With Application Load Balancers and Network Load Balancers, instances are registered as targets with a target group. With Classic Load Balancers, instances are registered with the load balancer. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602033 = newJObject()
  add(query_602033, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if TargetGroupARNs != nil:
    query_602033.add "TargetGroupARNs", TargetGroupARNs
  add(query_602033, "Action", newJString(Action))
  add(query_602033, "Version", newJString(Version))
  result = call_602032.call(nil, query_602033, nil, nil, nil)

var getAttachLoadBalancerTargetGroups* = Call_GetAttachLoadBalancerTargetGroups_602017(
    name: "getAttachLoadBalancerTargetGroups", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=AttachLoadBalancerTargetGroups",
    validator: validate_GetAttachLoadBalancerTargetGroups_602018, base: "/",
    url: url_GetAttachLoadBalancerTargetGroups_602019,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAttachLoadBalancers_602069 = ref object of OpenApiRestCall_601389
proc url_PostAttachLoadBalancers_602071(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAttachLoadBalancers_602070(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches one or more Classic Load Balancers to the specified Auto Scaling group.</p> <p>To attach an Application Load Balancer or a Network Load Balancer instead, see <a>AttachLoadBalancerTargetGroups</a>.</p> <p>To describe the load balancers for an Auto Scaling group, use <a>DescribeLoadBalancers</a>. To detach the load balancer from the Auto Scaling group, use <a>DetachLoadBalancers</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602072 = query.getOrDefault("Action")
  valid_602072 = validateParameter(valid_602072, JString, required = true,
                                 default = newJString("AttachLoadBalancers"))
  if valid_602072 != nil:
    section.add "Action", valid_602072
  var valid_602073 = query.getOrDefault("Version")
  valid_602073 = validateParameter(valid_602073, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602073 != nil:
    section.add "Version", valid_602073
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602074 = header.getOrDefault("X-Amz-Signature")
  valid_602074 = validateParameter(valid_602074, JString, required = false,
                                 default = nil)
  if valid_602074 != nil:
    section.add "X-Amz-Signature", valid_602074
  var valid_602075 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602075 = validateParameter(valid_602075, JString, required = false,
                                 default = nil)
  if valid_602075 != nil:
    section.add "X-Amz-Content-Sha256", valid_602075
  var valid_602076 = header.getOrDefault("X-Amz-Date")
  valid_602076 = validateParameter(valid_602076, JString, required = false,
                                 default = nil)
  if valid_602076 != nil:
    section.add "X-Amz-Date", valid_602076
  var valid_602077 = header.getOrDefault("X-Amz-Credential")
  valid_602077 = validateParameter(valid_602077, JString, required = false,
                                 default = nil)
  if valid_602077 != nil:
    section.add "X-Amz-Credential", valid_602077
  var valid_602078 = header.getOrDefault("X-Amz-Security-Token")
  valid_602078 = validateParameter(valid_602078, JString, required = false,
                                 default = nil)
  if valid_602078 != nil:
    section.add "X-Amz-Security-Token", valid_602078
  var valid_602079 = header.getOrDefault("X-Amz-Algorithm")
  valid_602079 = validateParameter(valid_602079, JString, required = false,
                                 default = nil)
  if valid_602079 != nil:
    section.add "X-Amz-Algorithm", valid_602079
  var valid_602080 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602080 = validateParameter(valid_602080, JString, required = false,
                                 default = nil)
  if valid_602080 != nil:
    section.add "X-Amz-SignedHeaders", valid_602080
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_602081 = formData.getOrDefault("AutoScalingGroupName")
  valid_602081 = validateParameter(valid_602081, JString, required = true,
                                 default = nil)
  if valid_602081 != nil:
    section.add "AutoScalingGroupName", valid_602081
  var valid_602082 = formData.getOrDefault("LoadBalancerNames")
  valid_602082 = validateParameter(valid_602082, JArray, required = true, default = nil)
  if valid_602082 != nil:
    section.add "LoadBalancerNames", valid_602082
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602083: Call_PostAttachLoadBalancers_602069; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches one or more Classic Load Balancers to the specified Auto Scaling group.</p> <p>To attach an Application Load Balancer or a Network Load Balancer instead, see <a>AttachLoadBalancerTargetGroups</a>.</p> <p>To describe the load balancers for an Auto Scaling group, use <a>DescribeLoadBalancers</a>. To detach the load balancer from the Auto Scaling group, use <a>DetachLoadBalancers</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_602083.validator(path, query, header, formData, body)
  let scheme = call_602083.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602083.url(scheme.get, call_602083.host, call_602083.base,
                         call_602083.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602083, url, valid)

proc call*(call_602084: Call_PostAttachLoadBalancers_602069;
          AutoScalingGroupName: string; LoadBalancerNames: JsonNode;
          Action: string = "AttachLoadBalancers"; Version: string = "2011-01-01"): Recallable =
  ## postAttachLoadBalancers
  ## <p>Attaches one or more Classic Load Balancers to the specified Auto Scaling group.</p> <p>To attach an Application Load Balancer or a Network Load Balancer instead, see <a>AttachLoadBalancerTargetGroups</a>.</p> <p>To describe the load balancers for an Auto Scaling group, use <a>DescribeLoadBalancers</a>. To detach the load balancer from the Auto Scaling group, use <a>DetachLoadBalancers</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602085 = newJObject()
  var formData_602086 = newJObject()
  add(formData_602086, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if LoadBalancerNames != nil:
    formData_602086.add "LoadBalancerNames", LoadBalancerNames
  add(query_602085, "Action", newJString(Action))
  add(query_602085, "Version", newJString(Version))
  result = call_602084.call(nil, query_602085, nil, formData_602086, nil)

var postAttachLoadBalancers* = Call_PostAttachLoadBalancers_602069(
    name: "postAttachLoadBalancers", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=AttachLoadBalancers",
    validator: validate_PostAttachLoadBalancers_602070, base: "/",
    url: url_PostAttachLoadBalancers_602071, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAttachLoadBalancers_602052 = ref object of OpenApiRestCall_601389
proc url_GetAttachLoadBalancers_602054(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAttachLoadBalancers_602053(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches one or more Classic Load Balancers to the specified Auto Scaling group.</p> <p>To attach an Application Load Balancer or a Network Load Balancer instead, see <a>AttachLoadBalancerTargetGroups</a>.</p> <p>To describe the load balancers for an Auto Scaling group, use <a>DescribeLoadBalancers</a>. To detach the load balancer from the Auto Scaling group, use <a>DetachLoadBalancers</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_602055 = query.getOrDefault("AutoScalingGroupName")
  valid_602055 = validateParameter(valid_602055, JString, required = true,
                                 default = nil)
  if valid_602055 != nil:
    section.add "AutoScalingGroupName", valid_602055
  var valid_602056 = query.getOrDefault("Action")
  valid_602056 = validateParameter(valid_602056, JString, required = true,
                                 default = newJString("AttachLoadBalancers"))
  if valid_602056 != nil:
    section.add "Action", valid_602056
  var valid_602057 = query.getOrDefault("Version")
  valid_602057 = validateParameter(valid_602057, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602057 != nil:
    section.add "Version", valid_602057
  var valid_602058 = query.getOrDefault("LoadBalancerNames")
  valid_602058 = validateParameter(valid_602058, JArray, required = true, default = nil)
  if valid_602058 != nil:
    section.add "LoadBalancerNames", valid_602058
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602059 = header.getOrDefault("X-Amz-Signature")
  valid_602059 = validateParameter(valid_602059, JString, required = false,
                                 default = nil)
  if valid_602059 != nil:
    section.add "X-Amz-Signature", valid_602059
  var valid_602060 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602060 = validateParameter(valid_602060, JString, required = false,
                                 default = nil)
  if valid_602060 != nil:
    section.add "X-Amz-Content-Sha256", valid_602060
  var valid_602061 = header.getOrDefault("X-Amz-Date")
  valid_602061 = validateParameter(valid_602061, JString, required = false,
                                 default = nil)
  if valid_602061 != nil:
    section.add "X-Amz-Date", valid_602061
  var valid_602062 = header.getOrDefault("X-Amz-Credential")
  valid_602062 = validateParameter(valid_602062, JString, required = false,
                                 default = nil)
  if valid_602062 != nil:
    section.add "X-Amz-Credential", valid_602062
  var valid_602063 = header.getOrDefault("X-Amz-Security-Token")
  valid_602063 = validateParameter(valid_602063, JString, required = false,
                                 default = nil)
  if valid_602063 != nil:
    section.add "X-Amz-Security-Token", valid_602063
  var valid_602064 = header.getOrDefault("X-Amz-Algorithm")
  valid_602064 = validateParameter(valid_602064, JString, required = false,
                                 default = nil)
  if valid_602064 != nil:
    section.add "X-Amz-Algorithm", valid_602064
  var valid_602065 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602065 = validateParameter(valid_602065, JString, required = false,
                                 default = nil)
  if valid_602065 != nil:
    section.add "X-Amz-SignedHeaders", valid_602065
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602066: Call_GetAttachLoadBalancers_602052; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches one or more Classic Load Balancers to the specified Auto Scaling group.</p> <p>To attach an Application Load Balancer or a Network Load Balancer instead, see <a>AttachLoadBalancerTargetGroups</a>.</p> <p>To describe the load balancers for an Auto Scaling group, use <a>DescribeLoadBalancers</a>. To detach the load balancer from the Auto Scaling group, use <a>DetachLoadBalancers</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_602066.validator(path, query, header, formData, body)
  let scheme = call_602066.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602066.url(scheme.get, call_602066.host, call_602066.base,
                         call_602066.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602066, url, valid)

proc call*(call_602067: Call_GetAttachLoadBalancers_602052;
          AutoScalingGroupName: string; LoadBalancerNames: JsonNode;
          Action: string = "AttachLoadBalancers"; Version: string = "2011-01-01"): Recallable =
  ## getAttachLoadBalancers
  ## <p>Attaches one or more Classic Load Balancers to the specified Auto Scaling group.</p> <p>To attach an Application Load Balancer or a Network Load Balancer instead, see <a>AttachLoadBalancerTargetGroups</a>.</p> <p>To describe the load balancers for an Auto Scaling group, use <a>DescribeLoadBalancers</a>. To detach the load balancer from the Auto Scaling group, use <a>DetachLoadBalancers</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  var query_602068 = newJObject()
  add(query_602068, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_602068, "Action", newJString(Action))
  add(query_602068, "Version", newJString(Version))
  if LoadBalancerNames != nil:
    query_602068.add "LoadBalancerNames", LoadBalancerNames
  result = call_602067.call(nil, query_602068, nil, nil, nil)

var getAttachLoadBalancers* = Call_GetAttachLoadBalancers_602052(
    name: "getAttachLoadBalancers", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=AttachLoadBalancers",
    validator: validate_GetAttachLoadBalancers_602053, base: "/",
    url: url_GetAttachLoadBalancers_602054, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostBatchDeleteScheduledAction_602104 = ref object of OpenApiRestCall_601389
proc url_PostBatchDeleteScheduledAction_602106(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostBatchDeleteScheduledAction_602105(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes one or more scheduled actions for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602107 = query.getOrDefault("Action")
  valid_602107 = validateParameter(valid_602107, JString, required = true, default = newJString(
      "BatchDeleteScheduledAction"))
  if valid_602107 != nil:
    section.add "Action", valid_602107
  var valid_602108 = query.getOrDefault("Version")
  valid_602108 = validateParameter(valid_602108, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602108 != nil:
    section.add "Version", valid_602108
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602109 = header.getOrDefault("X-Amz-Signature")
  valid_602109 = validateParameter(valid_602109, JString, required = false,
                                 default = nil)
  if valid_602109 != nil:
    section.add "X-Amz-Signature", valid_602109
  var valid_602110 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602110 = validateParameter(valid_602110, JString, required = false,
                                 default = nil)
  if valid_602110 != nil:
    section.add "X-Amz-Content-Sha256", valid_602110
  var valid_602111 = header.getOrDefault("X-Amz-Date")
  valid_602111 = validateParameter(valid_602111, JString, required = false,
                                 default = nil)
  if valid_602111 != nil:
    section.add "X-Amz-Date", valid_602111
  var valid_602112 = header.getOrDefault("X-Amz-Credential")
  valid_602112 = validateParameter(valid_602112, JString, required = false,
                                 default = nil)
  if valid_602112 != nil:
    section.add "X-Amz-Credential", valid_602112
  var valid_602113 = header.getOrDefault("X-Amz-Security-Token")
  valid_602113 = validateParameter(valid_602113, JString, required = false,
                                 default = nil)
  if valid_602113 != nil:
    section.add "X-Amz-Security-Token", valid_602113
  var valid_602114 = header.getOrDefault("X-Amz-Algorithm")
  valid_602114 = validateParameter(valid_602114, JString, required = false,
                                 default = nil)
  if valid_602114 != nil:
    section.add "X-Amz-Algorithm", valid_602114
  var valid_602115 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602115 = validateParameter(valid_602115, JString, required = false,
                                 default = nil)
  if valid_602115 != nil:
    section.add "X-Amz-SignedHeaders", valid_602115
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScheduledActionNames: JArray (required)
  ##                       : The names of the scheduled actions to delete. The maximum number allowed is 50. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_602116 = formData.getOrDefault("AutoScalingGroupName")
  valid_602116 = validateParameter(valid_602116, JString, required = true,
                                 default = nil)
  if valid_602116 != nil:
    section.add "AutoScalingGroupName", valid_602116
  var valid_602117 = formData.getOrDefault("ScheduledActionNames")
  valid_602117 = validateParameter(valid_602117, JArray, required = true, default = nil)
  if valid_602117 != nil:
    section.add "ScheduledActionNames", valid_602117
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602118: Call_PostBatchDeleteScheduledAction_602104; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes one or more scheduled actions for the specified Auto Scaling group.
  ## 
  let valid = call_602118.validator(path, query, header, formData, body)
  let scheme = call_602118.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602118.url(scheme.get, call_602118.host, call_602118.base,
                         call_602118.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602118, url, valid)

proc call*(call_602119: Call_PostBatchDeleteScheduledAction_602104;
          AutoScalingGroupName: string; ScheduledActionNames: JsonNode;
          Action: string = "BatchDeleteScheduledAction";
          Version: string = "2011-01-01"): Recallable =
  ## postBatchDeleteScheduledAction
  ## Deletes one or more scheduled actions for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ScheduledActionNames: JArray (required)
  ##                       : The names of the scheduled actions to delete. The maximum number allowed is 50. 
  var query_602120 = newJObject()
  var formData_602121 = newJObject()
  add(formData_602121, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_602120, "Action", newJString(Action))
  add(query_602120, "Version", newJString(Version))
  if ScheduledActionNames != nil:
    formData_602121.add "ScheduledActionNames", ScheduledActionNames
  result = call_602119.call(nil, query_602120, nil, formData_602121, nil)

var postBatchDeleteScheduledAction* = Call_PostBatchDeleteScheduledAction_602104(
    name: "postBatchDeleteScheduledAction", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=BatchDeleteScheduledAction",
    validator: validate_PostBatchDeleteScheduledAction_602105, base: "/",
    url: url_PostBatchDeleteScheduledAction_602106,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBatchDeleteScheduledAction_602087 = ref object of OpenApiRestCall_601389
proc url_GetBatchDeleteScheduledAction_602089(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetBatchDeleteScheduledAction_602088(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes one or more scheduled actions for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   ScheduledActionNames: JArray (required)
  ##                       : The names of the scheduled actions to delete. The maximum number allowed is 50. 
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_602090 = query.getOrDefault("AutoScalingGroupName")
  valid_602090 = validateParameter(valid_602090, JString, required = true,
                                 default = nil)
  if valid_602090 != nil:
    section.add "AutoScalingGroupName", valid_602090
  var valid_602091 = query.getOrDefault("Action")
  valid_602091 = validateParameter(valid_602091, JString, required = true, default = newJString(
      "BatchDeleteScheduledAction"))
  if valid_602091 != nil:
    section.add "Action", valid_602091
  var valid_602092 = query.getOrDefault("ScheduledActionNames")
  valid_602092 = validateParameter(valid_602092, JArray, required = true, default = nil)
  if valid_602092 != nil:
    section.add "ScheduledActionNames", valid_602092
  var valid_602093 = query.getOrDefault("Version")
  valid_602093 = validateParameter(valid_602093, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602093 != nil:
    section.add "Version", valid_602093
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602094 = header.getOrDefault("X-Amz-Signature")
  valid_602094 = validateParameter(valid_602094, JString, required = false,
                                 default = nil)
  if valid_602094 != nil:
    section.add "X-Amz-Signature", valid_602094
  var valid_602095 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602095 = validateParameter(valid_602095, JString, required = false,
                                 default = nil)
  if valid_602095 != nil:
    section.add "X-Amz-Content-Sha256", valid_602095
  var valid_602096 = header.getOrDefault("X-Amz-Date")
  valid_602096 = validateParameter(valid_602096, JString, required = false,
                                 default = nil)
  if valid_602096 != nil:
    section.add "X-Amz-Date", valid_602096
  var valid_602097 = header.getOrDefault("X-Amz-Credential")
  valid_602097 = validateParameter(valid_602097, JString, required = false,
                                 default = nil)
  if valid_602097 != nil:
    section.add "X-Amz-Credential", valid_602097
  var valid_602098 = header.getOrDefault("X-Amz-Security-Token")
  valid_602098 = validateParameter(valid_602098, JString, required = false,
                                 default = nil)
  if valid_602098 != nil:
    section.add "X-Amz-Security-Token", valid_602098
  var valid_602099 = header.getOrDefault("X-Amz-Algorithm")
  valid_602099 = validateParameter(valid_602099, JString, required = false,
                                 default = nil)
  if valid_602099 != nil:
    section.add "X-Amz-Algorithm", valid_602099
  var valid_602100 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602100 = validateParameter(valid_602100, JString, required = false,
                                 default = nil)
  if valid_602100 != nil:
    section.add "X-Amz-SignedHeaders", valid_602100
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602101: Call_GetBatchDeleteScheduledAction_602087; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes one or more scheduled actions for the specified Auto Scaling group.
  ## 
  let valid = call_602101.validator(path, query, header, formData, body)
  let scheme = call_602101.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602101.url(scheme.get, call_602101.host, call_602101.base,
                         call_602101.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602101, url, valid)

proc call*(call_602102: Call_GetBatchDeleteScheduledAction_602087;
          AutoScalingGroupName: string; ScheduledActionNames: JsonNode;
          Action: string = "BatchDeleteScheduledAction";
          Version: string = "2011-01-01"): Recallable =
  ## getBatchDeleteScheduledAction
  ## Deletes one or more scheduled actions for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   ScheduledActionNames: JArray (required)
  ##                       : The names of the scheduled actions to delete. The maximum number allowed is 50. 
  ##   Version: string (required)
  var query_602103 = newJObject()
  add(query_602103, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_602103, "Action", newJString(Action))
  if ScheduledActionNames != nil:
    query_602103.add "ScheduledActionNames", ScheduledActionNames
  add(query_602103, "Version", newJString(Version))
  result = call_602102.call(nil, query_602103, nil, nil, nil)

var getBatchDeleteScheduledAction* = Call_GetBatchDeleteScheduledAction_602087(
    name: "getBatchDeleteScheduledAction", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=BatchDeleteScheduledAction",
    validator: validate_GetBatchDeleteScheduledAction_602088, base: "/",
    url: url_GetBatchDeleteScheduledAction_602089,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostBatchPutScheduledUpdateGroupAction_602139 = ref object of OpenApiRestCall_601389
proc url_PostBatchPutScheduledUpdateGroupAction_602141(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostBatchPutScheduledUpdateGroupAction_602140(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates or updates one or more scheduled scaling actions for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602142 = query.getOrDefault("Action")
  valid_602142 = validateParameter(valid_602142, JString, required = true, default = newJString(
      "BatchPutScheduledUpdateGroupAction"))
  if valid_602142 != nil:
    section.add "Action", valid_602142
  var valid_602143 = query.getOrDefault("Version")
  valid_602143 = validateParameter(valid_602143, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602143 != nil:
    section.add "Version", valid_602143
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602144 = header.getOrDefault("X-Amz-Signature")
  valid_602144 = validateParameter(valid_602144, JString, required = false,
                                 default = nil)
  if valid_602144 != nil:
    section.add "X-Amz-Signature", valid_602144
  var valid_602145 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602145 = validateParameter(valid_602145, JString, required = false,
                                 default = nil)
  if valid_602145 != nil:
    section.add "X-Amz-Content-Sha256", valid_602145
  var valid_602146 = header.getOrDefault("X-Amz-Date")
  valid_602146 = validateParameter(valid_602146, JString, required = false,
                                 default = nil)
  if valid_602146 != nil:
    section.add "X-Amz-Date", valid_602146
  var valid_602147 = header.getOrDefault("X-Amz-Credential")
  valid_602147 = validateParameter(valid_602147, JString, required = false,
                                 default = nil)
  if valid_602147 != nil:
    section.add "X-Amz-Credential", valid_602147
  var valid_602148 = header.getOrDefault("X-Amz-Security-Token")
  valid_602148 = validateParameter(valid_602148, JString, required = false,
                                 default = nil)
  if valid_602148 != nil:
    section.add "X-Amz-Security-Token", valid_602148
  var valid_602149 = header.getOrDefault("X-Amz-Algorithm")
  valid_602149 = validateParameter(valid_602149, JString, required = false,
                                 default = nil)
  if valid_602149 != nil:
    section.add "X-Amz-Algorithm", valid_602149
  var valid_602150 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602150 = validateParameter(valid_602150, JString, required = false,
                                 default = nil)
  if valid_602150 != nil:
    section.add "X-Amz-SignedHeaders", valid_602150
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScheduledUpdateGroupActions: JArray (required)
  ##                              : One or more scheduled actions. The maximum number allowed is 50.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_602151 = formData.getOrDefault("AutoScalingGroupName")
  valid_602151 = validateParameter(valid_602151, JString, required = true,
                                 default = nil)
  if valid_602151 != nil:
    section.add "AutoScalingGroupName", valid_602151
  var valid_602152 = formData.getOrDefault("ScheduledUpdateGroupActions")
  valid_602152 = validateParameter(valid_602152, JArray, required = true, default = nil)
  if valid_602152 != nil:
    section.add "ScheduledUpdateGroupActions", valid_602152
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602153: Call_PostBatchPutScheduledUpdateGroupAction_602139;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates or updates one or more scheduled scaling actions for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.
  ## 
  let valid = call_602153.validator(path, query, header, formData, body)
  let scheme = call_602153.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602153.url(scheme.get, call_602153.host, call_602153.base,
                         call_602153.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602153, url, valid)

proc call*(call_602154: Call_PostBatchPutScheduledUpdateGroupAction_602139;
          AutoScalingGroupName: string; ScheduledUpdateGroupActions: JsonNode;
          Action: string = "BatchPutScheduledUpdateGroupAction";
          Version: string = "2011-01-01"): Recallable =
  ## postBatchPutScheduledUpdateGroupAction
  ## Creates or updates one or more scheduled scaling actions for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   ScheduledUpdateGroupActions: JArray (required)
  ##                              : One or more scheduled actions. The maximum number allowed is 50.
  ##   Version: string (required)
  var query_602155 = newJObject()
  var formData_602156 = newJObject()
  add(formData_602156, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_602155, "Action", newJString(Action))
  if ScheduledUpdateGroupActions != nil:
    formData_602156.add "ScheduledUpdateGroupActions", ScheduledUpdateGroupActions
  add(query_602155, "Version", newJString(Version))
  result = call_602154.call(nil, query_602155, nil, formData_602156, nil)

var postBatchPutScheduledUpdateGroupAction* = Call_PostBatchPutScheduledUpdateGroupAction_602139(
    name: "postBatchPutScheduledUpdateGroupAction", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=BatchPutScheduledUpdateGroupAction",
    validator: validate_PostBatchPutScheduledUpdateGroupAction_602140, base: "/",
    url: url_PostBatchPutScheduledUpdateGroupAction_602141,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBatchPutScheduledUpdateGroupAction_602122 = ref object of OpenApiRestCall_601389
proc url_GetBatchPutScheduledUpdateGroupAction_602124(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetBatchPutScheduledUpdateGroupAction_602123(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates or updates one or more scheduled scaling actions for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ScheduledUpdateGroupActions: JArray (required)
  ##                              : One or more scheduled actions. The maximum number allowed is 50.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ScheduledUpdateGroupActions` field"
  var valid_602125 = query.getOrDefault("ScheduledUpdateGroupActions")
  valid_602125 = validateParameter(valid_602125, JArray, required = true, default = nil)
  if valid_602125 != nil:
    section.add "ScheduledUpdateGroupActions", valid_602125
  var valid_602126 = query.getOrDefault("AutoScalingGroupName")
  valid_602126 = validateParameter(valid_602126, JString, required = true,
                                 default = nil)
  if valid_602126 != nil:
    section.add "AutoScalingGroupName", valid_602126
  var valid_602127 = query.getOrDefault("Action")
  valid_602127 = validateParameter(valid_602127, JString, required = true, default = newJString(
      "BatchPutScheduledUpdateGroupAction"))
  if valid_602127 != nil:
    section.add "Action", valid_602127
  var valid_602128 = query.getOrDefault("Version")
  valid_602128 = validateParameter(valid_602128, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602128 != nil:
    section.add "Version", valid_602128
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602129 = header.getOrDefault("X-Amz-Signature")
  valid_602129 = validateParameter(valid_602129, JString, required = false,
                                 default = nil)
  if valid_602129 != nil:
    section.add "X-Amz-Signature", valid_602129
  var valid_602130 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602130 = validateParameter(valid_602130, JString, required = false,
                                 default = nil)
  if valid_602130 != nil:
    section.add "X-Amz-Content-Sha256", valid_602130
  var valid_602131 = header.getOrDefault("X-Amz-Date")
  valid_602131 = validateParameter(valid_602131, JString, required = false,
                                 default = nil)
  if valid_602131 != nil:
    section.add "X-Amz-Date", valid_602131
  var valid_602132 = header.getOrDefault("X-Amz-Credential")
  valid_602132 = validateParameter(valid_602132, JString, required = false,
                                 default = nil)
  if valid_602132 != nil:
    section.add "X-Amz-Credential", valid_602132
  var valid_602133 = header.getOrDefault("X-Amz-Security-Token")
  valid_602133 = validateParameter(valid_602133, JString, required = false,
                                 default = nil)
  if valid_602133 != nil:
    section.add "X-Amz-Security-Token", valid_602133
  var valid_602134 = header.getOrDefault("X-Amz-Algorithm")
  valid_602134 = validateParameter(valid_602134, JString, required = false,
                                 default = nil)
  if valid_602134 != nil:
    section.add "X-Amz-Algorithm", valid_602134
  var valid_602135 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602135 = validateParameter(valid_602135, JString, required = false,
                                 default = nil)
  if valid_602135 != nil:
    section.add "X-Amz-SignedHeaders", valid_602135
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602136: Call_GetBatchPutScheduledUpdateGroupAction_602122;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates or updates one or more scheduled scaling actions for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.
  ## 
  let valid = call_602136.validator(path, query, header, formData, body)
  let scheme = call_602136.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602136.url(scheme.get, call_602136.host, call_602136.base,
                         call_602136.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602136, url, valid)

proc call*(call_602137: Call_GetBatchPutScheduledUpdateGroupAction_602122;
          ScheduledUpdateGroupActions: JsonNode; AutoScalingGroupName: string;
          Action: string = "BatchPutScheduledUpdateGroupAction";
          Version: string = "2011-01-01"): Recallable =
  ## getBatchPutScheduledUpdateGroupAction
  ## Creates or updates one or more scheduled scaling actions for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.
  ##   ScheduledUpdateGroupActions: JArray (required)
  ##                              : One or more scheduled actions. The maximum number allowed is 50.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602138 = newJObject()
  if ScheduledUpdateGroupActions != nil:
    query_602138.add "ScheduledUpdateGroupActions", ScheduledUpdateGroupActions
  add(query_602138, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_602138, "Action", newJString(Action))
  add(query_602138, "Version", newJString(Version))
  result = call_602137.call(nil, query_602138, nil, nil, nil)

var getBatchPutScheduledUpdateGroupAction* = Call_GetBatchPutScheduledUpdateGroupAction_602122(
    name: "getBatchPutScheduledUpdateGroupAction", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=BatchPutScheduledUpdateGroupAction",
    validator: validate_GetBatchPutScheduledUpdateGroupAction_602123, base: "/",
    url: url_GetBatchPutScheduledUpdateGroupAction_602124,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCompleteLifecycleAction_602177 = ref object of OpenApiRestCall_601389
proc url_PostCompleteLifecycleAction_602179(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCompleteLifecycleAction_602178(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Completes the lifecycle action for the specified token or instance with the specified result.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</p> </li> <li> <p> <b>If you finish before the timeout period ends, complete the lifecycle action.</b> </p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602180 = query.getOrDefault("Action")
  valid_602180 = validateParameter(valid_602180, JString, required = true, default = newJString(
      "CompleteLifecycleAction"))
  if valid_602180 != nil:
    section.add "Action", valid_602180
  var valid_602181 = query.getOrDefault("Version")
  valid_602181 = validateParameter(valid_602181, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602181 != nil:
    section.add "Version", valid_602181
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602182 = header.getOrDefault("X-Amz-Signature")
  valid_602182 = validateParameter(valid_602182, JString, required = false,
                                 default = nil)
  if valid_602182 != nil:
    section.add "X-Amz-Signature", valid_602182
  var valid_602183 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602183 = validateParameter(valid_602183, JString, required = false,
                                 default = nil)
  if valid_602183 != nil:
    section.add "X-Amz-Content-Sha256", valid_602183
  var valid_602184 = header.getOrDefault("X-Amz-Date")
  valid_602184 = validateParameter(valid_602184, JString, required = false,
                                 default = nil)
  if valid_602184 != nil:
    section.add "X-Amz-Date", valid_602184
  var valid_602185 = header.getOrDefault("X-Amz-Credential")
  valid_602185 = validateParameter(valid_602185, JString, required = false,
                                 default = nil)
  if valid_602185 != nil:
    section.add "X-Amz-Credential", valid_602185
  var valid_602186 = header.getOrDefault("X-Amz-Security-Token")
  valid_602186 = validateParameter(valid_602186, JString, required = false,
                                 default = nil)
  if valid_602186 != nil:
    section.add "X-Amz-Security-Token", valid_602186
  var valid_602187 = header.getOrDefault("X-Amz-Algorithm")
  valid_602187 = validateParameter(valid_602187, JString, required = false,
                                 default = nil)
  if valid_602187 != nil:
    section.add "X-Amz-Algorithm", valid_602187
  var valid_602188 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602188 = validateParameter(valid_602188, JString, required = false,
                                 default = nil)
  if valid_602188 != nil:
    section.add "X-Amz-SignedHeaders", valid_602188
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   LifecycleActionToken: JString
  ##                       : A universally unique identifier (UUID) that identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target you specified when you created the lifecycle hook.
  ##   InstanceId: JString
  ##             : The ID of the instance.
  ##   LifecycleActionResult: JString (required)
  ##                        : The action for the group to take. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_602189 = formData.getOrDefault("AutoScalingGroupName")
  valid_602189 = validateParameter(valid_602189, JString, required = true,
                                 default = nil)
  if valid_602189 != nil:
    section.add "AutoScalingGroupName", valid_602189
  var valid_602190 = formData.getOrDefault("LifecycleHookName")
  valid_602190 = validateParameter(valid_602190, JString, required = true,
                                 default = nil)
  if valid_602190 != nil:
    section.add "LifecycleHookName", valid_602190
  var valid_602191 = formData.getOrDefault("LifecycleActionToken")
  valid_602191 = validateParameter(valid_602191, JString, required = false,
                                 default = nil)
  if valid_602191 != nil:
    section.add "LifecycleActionToken", valid_602191
  var valid_602192 = formData.getOrDefault("InstanceId")
  valid_602192 = validateParameter(valid_602192, JString, required = false,
                                 default = nil)
  if valid_602192 != nil:
    section.add "InstanceId", valid_602192
  var valid_602193 = formData.getOrDefault("LifecycleActionResult")
  valid_602193 = validateParameter(valid_602193, JString, required = true,
                                 default = nil)
  if valid_602193 != nil:
    section.add "LifecycleActionResult", valid_602193
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602194: Call_PostCompleteLifecycleAction_602177; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Completes the lifecycle action for the specified token or instance with the specified result.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</p> </li> <li> <p> <b>If you finish before the timeout period ends, complete the lifecycle action.</b> </p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_602194.validator(path, query, header, formData, body)
  let scheme = call_602194.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602194.url(scheme.get, call_602194.host, call_602194.base,
                         call_602194.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602194, url, valid)

proc call*(call_602195: Call_PostCompleteLifecycleAction_602177;
          AutoScalingGroupName: string; LifecycleHookName: string;
          LifecycleActionResult: string; LifecycleActionToken: string = "";
          InstanceId: string = ""; Action: string = "CompleteLifecycleAction";
          Version: string = "2011-01-01"): Recallable =
  ## postCompleteLifecycleAction
  ## <p>Completes the lifecycle action for the specified token or instance with the specified result.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</p> </li> <li> <p> <b>If you finish before the timeout period ends, complete the lifecycle action.</b> </p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   LifecycleActionToken: string
  ##                       : A universally unique identifier (UUID) that identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target you specified when you created the lifecycle hook.
  ##   InstanceId: string
  ##             : The ID of the instance.
  ##   Action: string (required)
  ##   LifecycleActionResult: string (required)
  ##                        : The action for the group to take. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>.
  ##   Version: string (required)
  var query_602196 = newJObject()
  var formData_602197 = newJObject()
  add(formData_602197, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_602197, "LifecycleHookName", newJString(LifecycleHookName))
  add(formData_602197, "LifecycleActionToken", newJString(LifecycleActionToken))
  add(formData_602197, "InstanceId", newJString(InstanceId))
  add(query_602196, "Action", newJString(Action))
  add(formData_602197, "LifecycleActionResult", newJString(LifecycleActionResult))
  add(query_602196, "Version", newJString(Version))
  result = call_602195.call(nil, query_602196, nil, formData_602197, nil)

var postCompleteLifecycleAction* = Call_PostCompleteLifecycleAction_602177(
    name: "postCompleteLifecycleAction", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=CompleteLifecycleAction",
    validator: validate_PostCompleteLifecycleAction_602178, base: "/",
    url: url_PostCompleteLifecycleAction_602179,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCompleteLifecycleAction_602157 = ref object of OpenApiRestCall_601389
proc url_GetCompleteLifecycleAction_602159(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCompleteLifecycleAction_602158(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Completes the lifecycle action for the specified token or instance with the specified result.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</p> </li> <li> <p> <b>If you finish before the timeout period ends, complete the lifecycle action.</b> </p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   LifecycleActionResult: JString (required)
  ##                        : The action for the group to take. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>.
  ##   InstanceId: JString
  ##             : The ID of the instance.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   Action: JString (required)
  ##   LifecycleActionToken: JString
  ##                       : A universally unique identifier (UUID) that identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target you specified when you created the lifecycle hook.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `LifecycleActionResult` field"
  var valid_602160 = query.getOrDefault("LifecycleActionResult")
  valid_602160 = validateParameter(valid_602160, JString, required = true,
                                 default = nil)
  if valid_602160 != nil:
    section.add "LifecycleActionResult", valid_602160
  var valid_602161 = query.getOrDefault("InstanceId")
  valid_602161 = validateParameter(valid_602161, JString, required = false,
                                 default = nil)
  if valid_602161 != nil:
    section.add "InstanceId", valid_602161
  var valid_602162 = query.getOrDefault("AutoScalingGroupName")
  valid_602162 = validateParameter(valid_602162, JString, required = true,
                                 default = nil)
  if valid_602162 != nil:
    section.add "AutoScalingGroupName", valid_602162
  var valid_602163 = query.getOrDefault("LifecycleHookName")
  valid_602163 = validateParameter(valid_602163, JString, required = true,
                                 default = nil)
  if valid_602163 != nil:
    section.add "LifecycleHookName", valid_602163
  var valid_602164 = query.getOrDefault("Action")
  valid_602164 = validateParameter(valid_602164, JString, required = true, default = newJString(
      "CompleteLifecycleAction"))
  if valid_602164 != nil:
    section.add "Action", valid_602164
  var valid_602165 = query.getOrDefault("LifecycleActionToken")
  valid_602165 = validateParameter(valid_602165, JString, required = false,
                                 default = nil)
  if valid_602165 != nil:
    section.add "LifecycleActionToken", valid_602165
  var valid_602166 = query.getOrDefault("Version")
  valid_602166 = validateParameter(valid_602166, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602166 != nil:
    section.add "Version", valid_602166
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602167 = header.getOrDefault("X-Amz-Signature")
  valid_602167 = validateParameter(valid_602167, JString, required = false,
                                 default = nil)
  if valid_602167 != nil:
    section.add "X-Amz-Signature", valid_602167
  var valid_602168 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602168 = validateParameter(valid_602168, JString, required = false,
                                 default = nil)
  if valid_602168 != nil:
    section.add "X-Amz-Content-Sha256", valid_602168
  var valid_602169 = header.getOrDefault("X-Amz-Date")
  valid_602169 = validateParameter(valid_602169, JString, required = false,
                                 default = nil)
  if valid_602169 != nil:
    section.add "X-Amz-Date", valid_602169
  var valid_602170 = header.getOrDefault("X-Amz-Credential")
  valid_602170 = validateParameter(valid_602170, JString, required = false,
                                 default = nil)
  if valid_602170 != nil:
    section.add "X-Amz-Credential", valid_602170
  var valid_602171 = header.getOrDefault("X-Amz-Security-Token")
  valid_602171 = validateParameter(valid_602171, JString, required = false,
                                 default = nil)
  if valid_602171 != nil:
    section.add "X-Amz-Security-Token", valid_602171
  var valid_602172 = header.getOrDefault("X-Amz-Algorithm")
  valid_602172 = validateParameter(valid_602172, JString, required = false,
                                 default = nil)
  if valid_602172 != nil:
    section.add "X-Amz-Algorithm", valid_602172
  var valid_602173 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602173 = validateParameter(valid_602173, JString, required = false,
                                 default = nil)
  if valid_602173 != nil:
    section.add "X-Amz-SignedHeaders", valid_602173
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602174: Call_GetCompleteLifecycleAction_602157; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Completes the lifecycle action for the specified token or instance with the specified result.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</p> </li> <li> <p> <b>If you finish before the timeout period ends, complete the lifecycle action.</b> </p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_602174.validator(path, query, header, formData, body)
  let scheme = call_602174.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602174.url(scheme.get, call_602174.host, call_602174.base,
                         call_602174.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602174, url, valid)

proc call*(call_602175: Call_GetCompleteLifecycleAction_602157;
          LifecycleActionResult: string; AutoScalingGroupName: string;
          LifecycleHookName: string; InstanceId: string = "";
          Action: string = "CompleteLifecycleAction";
          LifecycleActionToken: string = ""; Version: string = "2011-01-01"): Recallable =
  ## getCompleteLifecycleAction
  ## <p>Completes the lifecycle action for the specified token or instance with the specified result.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</p> </li> <li> <p> <b>If you finish before the timeout period ends, complete the lifecycle action.</b> </p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LifecycleActionResult: string (required)
  ##                        : The action for the group to take. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>.
  ##   InstanceId: string
  ##             : The ID of the instance.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   Action: string (required)
  ##   LifecycleActionToken: string
  ##                       : A universally unique identifier (UUID) that identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target you specified when you created the lifecycle hook.
  ##   Version: string (required)
  var query_602176 = newJObject()
  add(query_602176, "LifecycleActionResult", newJString(LifecycleActionResult))
  add(query_602176, "InstanceId", newJString(InstanceId))
  add(query_602176, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_602176, "LifecycleHookName", newJString(LifecycleHookName))
  add(query_602176, "Action", newJString(Action))
  add(query_602176, "LifecycleActionToken", newJString(LifecycleActionToken))
  add(query_602176, "Version", newJString(Version))
  result = call_602175.call(nil, query_602176, nil, nil, nil)

var getCompleteLifecycleAction* = Call_GetCompleteLifecycleAction_602157(
    name: "getCompleteLifecycleAction", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=CompleteLifecycleAction",
    validator: validate_GetCompleteLifecycleAction_602158, base: "/",
    url: url_GetCompleteLifecycleAction_602159,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateAutoScalingGroup_602238 = ref object of OpenApiRestCall_601389
proc url_PostCreateAutoScalingGroup_602240(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateAutoScalingGroup_602239(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an Auto Scaling group with the specified name and attributes.</p> <p>If you exceed your maximum limit of Auto Scaling groups, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602241 = query.getOrDefault("Action")
  valid_602241 = validateParameter(valid_602241, JString, required = true,
                                 default = newJString("CreateAutoScalingGroup"))
  if valid_602241 != nil:
    section.add "Action", valid_602241
  var valid_602242 = query.getOrDefault("Version")
  valid_602242 = validateParameter(valid_602242, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602242 != nil:
    section.add "Version", valid_602242
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602243 = header.getOrDefault("X-Amz-Signature")
  valid_602243 = validateParameter(valid_602243, JString, required = false,
                                 default = nil)
  if valid_602243 != nil:
    section.add "X-Amz-Signature", valid_602243
  var valid_602244 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602244 = validateParameter(valid_602244, JString, required = false,
                                 default = nil)
  if valid_602244 != nil:
    section.add "X-Amz-Content-Sha256", valid_602244
  var valid_602245 = header.getOrDefault("X-Amz-Date")
  valid_602245 = validateParameter(valid_602245, JString, required = false,
                                 default = nil)
  if valid_602245 != nil:
    section.add "X-Amz-Date", valid_602245
  var valid_602246 = header.getOrDefault("X-Amz-Credential")
  valid_602246 = validateParameter(valid_602246, JString, required = false,
                                 default = nil)
  if valid_602246 != nil:
    section.add "X-Amz-Credential", valid_602246
  var valid_602247 = header.getOrDefault("X-Amz-Security-Token")
  valid_602247 = validateParameter(valid_602247, JString, required = false,
                                 default = nil)
  if valid_602247 != nil:
    section.add "X-Amz-Security-Token", valid_602247
  var valid_602248 = header.getOrDefault("X-Amz-Algorithm")
  valid_602248 = validateParameter(valid_602248, JString, required = false,
                                 default = nil)
  if valid_602248 != nil:
    section.add "X-Amz-Algorithm", valid_602248
  var valid_602249 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602249 = validateParameter(valid_602249, JString, required = false,
                                 default = nil)
  if valid_602249 != nil:
    section.add "X-Amz-SignedHeaders", valid_602249
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group. This name must be unique per Region per account.
  ##   MinSize: JInt (required)
  ##          : The minimum size of the group.
  ##   MixedInstancesPolicy.InstancesDistribution: JString
  ##                                             : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified, the value for each parameter in <code>InstancesDistribution</code> uses a default value.</p>
  ##   DesiredCapacity: JInt
  ##                  : The number of Amazon EC2 instances that the Auto Scaling group attempts to maintain. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group. If you do not specify a desired capacity, the default is the minimum size of the group.
  ##   DefaultCooldown: JInt
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LoadBalancerNames: JArray
  ##                    : <p>A list of Classic Load Balancers associated with this Auto Scaling group. For Application Load Balancers and Network Load Balancers, specify a list of target groups using the <code>TargetGroupARNs</code> property instead.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   NewInstancesProtectedFromScaleIn: JBool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MaxInstanceLifetime: JInt
  ##                      : <p>The maximum amount of time, in seconds, that an instance can be in service.</p> <p>Valid Range: Minimum value of 604800.</p>
  ##   TargetGroupARNs: JArray
  ##                  : <p>The Amazon Resource Names (ARN) of the target groups to associate with the Auto Scaling group. Instances are registered as targets in a target group, and traffic is routed to the target group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   TerminationPolicies: JArray
  ##                      : <p>One or more termination policies used to select the instance to terminate. These policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AvailabilityZones: JArray
  ##                    : <p>One or more Availability Zones for the group. This parameter is optional if you specify one or more subnets for <code>VPCZoneIdentifier</code>.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into EC2-Classic.</p>
  ##   LaunchTemplate.Version: JString
  ##                         : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   HealthCheckType: JString
  ##                  : <p>The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. The default value is <code>EC2</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   PlacementGroup: JString
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   InstanceId: JString
  ##             : <p>The ID of the instance used to create a launch configuration for the group.</p> <p>When you specify an ID of an instance, Amazon EC2 Auto Scaling creates a new launch configuration and associates it with the group. This launch configuration derives its attributes from the specified instance, except for the block device mapping.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-from-instance.html">Create an Auto Scaling Group Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You must specify one of the following parameters in your request: <code>LaunchConfigurationName</code>, <code>LaunchTemplate</code>, <code>InstanceId</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   LaunchTemplate.LaunchTemplateName: JString
  ##                                    : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   LifecycleHookSpecificationList: JArray
  ##                                 : One or more lifecycle hooks.
  ##   LaunchTemplate.LaunchTemplateId: JString
  ##                                  : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  ##   MaxSize: JInt (required)
  ##          : The maximum size of the group.
  ##   HealthCheckGracePeriod: JInt
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. During this time, any health check failures for the instance are ignored. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   Tags: JArray
  ##       : <p>One or more tags.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   ServiceLinkedRoleARN: JString
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. By default, Amazon EC2 Auto Scaling uses a service-linked role named AWSServiceRoleForAutoScaling, which it creates if it does not exist. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   LaunchConfigurationName: JString
  ##                          : <p>The name of the launch configuration.</p> <p>If you do not specify <code>LaunchConfigurationName</code>, you must specify one of the following parameters: <code>InstanceId</code>, <code>LaunchTemplate</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   MixedInstancesPolicy.LaunchTemplate: JString
  ##                                      : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   VPCZoneIdentifier: JString
  ##                    : <p>A comma-separated list of subnet IDs for your virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into a VPC.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_602250 = formData.getOrDefault("AutoScalingGroupName")
  valid_602250 = validateParameter(valid_602250, JString, required = true,
                                 default = nil)
  if valid_602250 != nil:
    section.add "AutoScalingGroupName", valid_602250
  var valid_602251 = formData.getOrDefault("MinSize")
  valid_602251 = validateParameter(valid_602251, JInt, required = true, default = nil)
  if valid_602251 != nil:
    section.add "MinSize", valid_602251
  var valid_602252 = formData.getOrDefault("MixedInstancesPolicy.InstancesDistribution")
  valid_602252 = validateParameter(valid_602252, JString, required = false,
                                 default = nil)
  if valid_602252 != nil:
    section.add "MixedInstancesPolicy.InstancesDistribution", valid_602252
  var valid_602253 = formData.getOrDefault("DesiredCapacity")
  valid_602253 = validateParameter(valid_602253, JInt, required = false, default = nil)
  if valid_602253 != nil:
    section.add "DesiredCapacity", valid_602253
  var valid_602254 = formData.getOrDefault("DefaultCooldown")
  valid_602254 = validateParameter(valid_602254, JInt, required = false, default = nil)
  if valid_602254 != nil:
    section.add "DefaultCooldown", valid_602254
  var valid_602255 = formData.getOrDefault("LoadBalancerNames")
  valid_602255 = validateParameter(valid_602255, JArray, required = false,
                                 default = nil)
  if valid_602255 != nil:
    section.add "LoadBalancerNames", valid_602255
  var valid_602256 = formData.getOrDefault("NewInstancesProtectedFromScaleIn")
  valid_602256 = validateParameter(valid_602256, JBool, required = false, default = nil)
  if valid_602256 != nil:
    section.add "NewInstancesProtectedFromScaleIn", valid_602256
  var valid_602257 = formData.getOrDefault("MaxInstanceLifetime")
  valid_602257 = validateParameter(valid_602257, JInt, required = false, default = nil)
  if valid_602257 != nil:
    section.add "MaxInstanceLifetime", valid_602257
  var valid_602258 = formData.getOrDefault("TargetGroupARNs")
  valid_602258 = validateParameter(valid_602258, JArray, required = false,
                                 default = nil)
  if valid_602258 != nil:
    section.add "TargetGroupARNs", valid_602258
  var valid_602259 = formData.getOrDefault("TerminationPolicies")
  valid_602259 = validateParameter(valid_602259, JArray, required = false,
                                 default = nil)
  if valid_602259 != nil:
    section.add "TerminationPolicies", valid_602259
  var valid_602260 = formData.getOrDefault("AvailabilityZones")
  valid_602260 = validateParameter(valid_602260, JArray, required = false,
                                 default = nil)
  if valid_602260 != nil:
    section.add "AvailabilityZones", valid_602260
  var valid_602261 = formData.getOrDefault("LaunchTemplate.Version")
  valid_602261 = validateParameter(valid_602261, JString, required = false,
                                 default = nil)
  if valid_602261 != nil:
    section.add "LaunchTemplate.Version", valid_602261
  var valid_602262 = formData.getOrDefault("HealthCheckType")
  valid_602262 = validateParameter(valid_602262, JString, required = false,
                                 default = nil)
  if valid_602262 != nil:
    section.add "HealthCheckType", valid_602262
  var valid_602263 = formData.getOrDefault("PlacementGroup")
  valid_602263 = validateParameter(valid_602263, JString, required = false,
                                 default = nil)
  if valid_602263 != nil:
    section.add "PlacementGroup", valid_602263
  var valid_602264 = formData.getOrDefault("InstanceId")
  valid_602264 = validateParameter(valid_602264, JString, required = false,
                                 default = nil)
  if valid_602264 != nil:
    section.add "InstanceId", valid_602264
  var valid_602265 = formData.getOrDefault("LaunchTemplate.LaunchTemplateName")
  valid_602265 = validateParameter(valid_602265, JString, required = false,
                                 default = nil)
  if valid_602265 != nil:
    section.add "LaunchTemplate.LaunchTemplateName", valid_602265
  var valid_602266 = formData.getOrDefault("LifecycleHookSpecificationList")
  valid_602266 = validateParameter(valid_602266, JArray, required = false,
                                 default = nil)
  if valid_602266 != nil:
    section.add "LifecycleHookSpecificationList", valid_602266
  var valid_602267 = formData.getOrDefault("LaunchTemplate.LaunchTemplateId")
  valid_602267 = validateParameter(valid_602267, JString, required = false,
                                 default = nil)
  if valid_602267 != nil:
    section.add "LaunchTemplate.LaunchTemplateId", valid_602267
  var valid_602268 = formData.getOrDefault("MaxSize")
  valid_602268 = validateParameter(valid_602268, JInt, required = true, default = nil)
  if valid_602268 != nil:
    section.add "MaxSize", valid_602268
  var valid_602269 = formData.getOrDefault("HealthCheckGracePeriod")
  valid_602269 = validateParameter(valid_602269, JInt, required = false, default = nil)
  if valid_602269 != nil:
    section.add "HealthCheckGracePeriod", valid_602269
  var valid_602270 = formData.getOrDefault("Tags")
  valid_602270 = validateParameter(valid_602270, JArray, required = false,
                                 default = nil)
  if valid_602270 != nil:
    section.add "Tags", valid_602270
  var valid_602271 = formData.getOrDefault("ServiceLinkedRoleARN")
  valid_602271 = validateParameter(valid_602271, JString, required = false,
                                 default = nil)
  if valid_602271 != nil:
    section.add "ServiceLinkedRoleARN", valid_602271
  var valid_602272 = formData.getOrDefault("LaunchConfigurationName")
  valid_602272 = validateParameter(valid_602272, JString, required = false,
                                 default = nil)
  if valid_602272 != nil:
    section.add "LaunchConfigurationName", valid_602272
  var valid_602273 = formData.getOrDefault("MixedInstancesPolicy.LaunchTemplate")
  valid_602273 = validateParameter(valid_602273, JString, required = false,
                                 default = nil)
  if valid_602273 != nil:
    section.add "MixedInstancesPolicy.LaunchTemplate", valid_602273
  var valid_602274 = formData.getOrDefault("VPCZoneIdentifier")
  valid_602274 = validateParameter(valid_602274, JString, required = false,
                                 default = nil)
  if valid_602274 != nil:
    section.add "VPCZoneIdentifier", valid_602274
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602275: Call_PostCreateAutoScalingGroup_602238; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an Auto Scaling group with the specified name and attributes.</p> <p>If you exceed your maximum limit of Auto Scaling groups, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_602275.validator(path, query, header, formData, body)
  let scheme = call_602275.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602275.url(scheme.get, call_602275.host, call_602275.base,
                         call_602275.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602275, url, valid)

proc call*(call_602276: Call_PostCreateAutoScalingGroup_602238;
          AutoScalingGroupName: string; MinSize: int; MaxSize: int;
          MixedInstancesPolicyInstancesDistribution: string = "";
          DesiredCapacity: int = 0; DefaultCooldown: int = 0;
          LoadBalancerNames: JsonNode = nil;
          NewInstancesProtectedFromScaleIn: bool = false;
          MaxInstanceLifetime: int = 0; TargetGroupARNs: JsonNode = nil;
          TerminationPolicies: JsonNode = nil; AvailabilityZones: JsonNode = nil;
          LaunchTemplateVersion: string = ""; HealthCheckType: string = "";
          PlacementGroup: string = ""; InstanceId: string = "";
          LaunchTemplateLaunchTemplateName: string = "";
          LifecycleHookSpecificationList: JsonNode = nil;
          Action: string = "CreateAutoScalingGroup";
          LaunchTemplateLaunchTemplateId: string = "";
          HealthCheckGracePeriod: int = 0; Tags: JsonNode = nil;
          ServiceLinkedRoleARN: string = ""; LaunchConfigurationName: string = "";
          Version: string = "2011-01-01";
          MixedInstancesPolicyLaunchTemplate: string = "";
          VPCZoneIdentifier: string = ""): Recallable =
  ## postCreateAutoScalingGroup
  ## <p>Creates an Auto Scaling group with the specified name and attributes.</p> <p>If you exceed your maximum limit of Auto Scaling groups, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group. This name must be unique per Region per account.
  ##   MinSize: int (required)
  ##          : The minimum size of the group.
  ##   MixedInstancesPolicyInstancesDistribution: string
  ##                                            : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified, the value for each parameter in <code>InstancesDistribution</code> uses a default value.</p>
  ##   DesiredCapacity: int
  ##                  : The number of Amazon EC2 instances that the Auto Scaling group attempts to maintain. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group. If you do not specify a desired capacity, the default is the minimum size of the group.
  ##   DefaultCooldown: int
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LoadBalancerNames: JArray
  ##                    : <p>A list of Classic Load Balancers associated with this Auto Scaling group. For Application Load Balancers and Network Load Balancers, specify a list of target groups using the <code>TargetGroupARNs</code> property instead.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   NewInstancesProtectedFromScaleIn: bool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MaxInstanceLifetime: int
  ##                      : <p>The maximum amount of time, in seconds, that an instance can be in service.</p> <p>Valid Range: Minimum value of 604800.</p>
  ##   TargetGroupARNs: JArray
  ##                  : <p>The Amazon Resource Names (ARN) of the target groups to associate with the Auto Scaling group. Instances are registered as targets in a target group, and traffic is routed to the target group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   TerminationPolicies: JArray
  ##                      : <p>One or more termination policies used to select the instance to terminate. These policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AvailabilityZones: JArray
  ##                    : <p>One or more Availability Zones for the group. This parameter is optional if you specify one or more subnets for <code>VPCZoneIdentifier</code>.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into EC2-Classic.</p>
  ##   LaunchTemplateVersion: string
  ##                        : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   HealthCheckType: string
  ##                  : <p>The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. The default value is <code>EC2</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   PlacementGroup: string
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   InstanceId: string
  ##             : <p>The ID of the instance used to create a launch configuration for the group.</p> <p>When you specify an ID of an instance, Amazon EC2 Auto Scaling creates a new launch configuration and associates it with the group. This launch configuration derives its attributes from the specified instance, except for the block device mapping.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-from-instance.html">Create an Auto Scaling Group Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You must specify one of the following parameters in your request: <code>LaunchConfigurationName</code>, <code>LaunchTemplate</code>, <code>InstanceId</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   LaunchTemplateLaunchTemplateName: string
  ##                                   : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   LifecycleHookSpecificationList: JArray
  ##                                 : One or more lifecycle hooks.
  ##   Action: string (required)
  ##   LaunchTemplateLaunchTemplateId: string
  ##                                 : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  ##   MaxSize: int (required)
  ##          : The maximum size of the group.
  ##   HealthCheckGracePeriod: int
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. During this time, any health check failures for the instance are ignored. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   Tags: JArray
  ##       : <p>One or more tags.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   ServiceLinkedRoleARN: string
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. By default, Amazon EC2 Auto Scaling uses a service-linked role named AWSServiceRoleForAutoScaling, which it creates if it does not exist. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   LaunchConfigurationName: string
  ##                          : <p>The name of the launch configuration.</p> <p>If you do not specify <code>LaunchConfigurationName</code>, you must specify one of the following parameters: <code>InstanceId</code>, <code>LaunchTemplate</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   Version: string (required)
  ##   MixedInstancesPolicyLaunchTemplate: string
  ##                                     : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   VPCZoneIdentifier: string
  ##                    : <p>A comma-separated list of subnet IDs for your virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into a VPC.</p>
  var query_602277 = newJObject()
  var formData_602278 = newJObject()
  add(formData_602278, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_602278, "MinSize", newJInt(MinSize))
  add(formData_602278, "MixedInstancesPolicy.InstancesDistribution",
      newJString(MixedInstancesPolicyInstancesDistribution))
  add(formData_602278, "DesiredCapacity", newJInt(DesiredCapacity))
  add(formData_602278, "DefaultCooldown", newJInt(DefaultCooldown))
  if LoadBalancerNames != nil:
    formData_602278.add "LoadBalancerNames", LoadBalancerNames
  add(formData_602278, "NewInstancesProtectedFromScaleIn",
      newJBool(NewInstancesProtectedFromScaleIn))
  add(formData_602278, "MaxInstanceLifetime", newJInt(MaxInstanceLifetime))
  if TargetGroupARNs != nil:
    formData_602278.add "TargetGroupARNs", TargetGroupARNs
  if TerminationPolicies != nil:
    formData_602278.add "TerminationPolicies", TerminationPolicies
  if AvailabilityZones != nil:
    formData_602278.add "AvailabilityZones", AvailabilityZones
  add(formData_602278, "LaunchTemplate.Version", newJString(LaunchTemplateVersion))
  add(formData_602278, "HealthCheckType", newJString(HealthCheckType))
  add(formData_602278, "PlacementGroup", newJString(PlacementGroup))
  add(formData_602278, "InstanceId", newJString(InstanceId))
  add(formData_602278, "LaunchTemplate.LaunchTemplateName",
      newJString(LaunchTemplateLaunchTemplateName))
  if LifecycleHookSpecificationList != nil:
    formData_602278.add "LifecycleHookSpecificationList",
                       LifecycleHookSpecificationList
  add(query_602277, "Action", newJString(Action))
  add(formData_602278, "LaunchTemplate.LaunchTemplateId",
      newJString(LaunchTemplateLaunchTemplateId))
  add(formData_602278, "MaxSize", newJInt(MaxSize))
  add(formData_602278, "HealthCheckGracePeriod", newJInt(HealthCheckGracePeriod))
  if Tags != nil:
    formData_602278.add "Tags", Tags
  add(formData_602278, "ServiceLinkedRoleARN", newJString(ServiceLinkedRoleARN))
  add(formData_602278, "LaunchConfigurationName",
      newJString(LaunchConfigurationName))
  add(query_602277, "Version", newJString(Version))
  add(formData_602278, "MixedInstancesPolicy.LaunchTemplate",
      newJString(MixedInstancesPolicyLaunchTemplate))
  add(formData_602278, "VPCZoneIdentifier", newJString(VPCZoneIdentifier))
  result = call_602276.call(nil, query_602277, nil, formData_602278, nil)

var postCreateAutoScalingGroup* = Call_PostCreateAutoScalingGroup_602238(
    name: "postCreateAutoScalingGroup", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=CreateAutoScalingGroup",
    validator: validate_PostCreateAutoScalingGroup_602239, base: "/",
    url: url_PostCreateAutoScalingGroup_602240,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateAutoScalingGroup_602198 = ref object of OpenApiRestCall_601389
proc url_GetCreateAutoScalingGroup_602200(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateAutoScalingGroup_602199(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an Auto Scaling group with the specified name and attributes.</p> <p>If you exceed your maximum limit of Auto Scaling groups, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MixedInstancesPolicy.InstancesDistribution: JString
  ##                                             : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified, the value for each parameter in <code>InstancesDistribution</code> uses a default value.</p>
  ##   LaunchTemplate.LaunchTemplateName: JString
  ##                                    : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   MaxSize: JInt (required)
  ##          : The maximum size of the group.
  ##   LaunchConfigurationName: JString
  ##                          : <p>The name of the launch configuration.</p> <p>If you do not specify <code>LaunchConfigurationName</code>, you must specify one of the following parameters: <code>InstanceId</code>, <code>LaunchTemplate</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   HealthCheckGracePeriod: JInt
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. During this time, any health check failures for the instance are ignored. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   MixedInstancesPolicy.LaunchTemplate: JString
  ##                                      : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   Tags: JArray
  ##       : <p>One or more tags.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   NewInstancesProtectedFromScaleIn: JBool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AvailabilityZones: JArray
  ##                    : <p>One or more Availability Zones for the group. This parameter is optional if you specify one or more subnets for <code>VPCZoneIdentifier</code>.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into EC2-Classic.</p>
  ##   HealthCheckType: JString
  ##                  : <p>The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. The default value is <code>EC2</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   TerminationPolicies: JArray
  ##                      : <p>One or more termination policies used to select the instance to terminate. These policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   InstanceId: JString
  ##             : <p>The ID of the instance used to create a launch configuration for the group.</p> <p>When you specify an ID of an instance, Amazon EC2 Auto Scaling creates a new launch configuration and associates it with the group. This launch configuration derives its attributes from the specified instance, except for the block device mapping.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-from-instance.html">Create an Auto Scaling Group Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You must specify one of the following parameters in your request: <code>LaunchConfigurationName</code>, <code>LaunchTemplate</code>, <code>InstanceId</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   DesiredCapacity: JInt
  ##                  : The number of Amazon EC2 instances that the Auto Scaling group attempts to maintain. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group. If you do not specify a desired capacity, the default is the minimum size of the group.
  ##   LifecycleHookSpecificationList: JArray
  ##                                 : One or more lifecycle hooks.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group. This name must be unique per Region per account.
  ##   DefaultCooldown: JInt
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   TargetGroupARNs: JArray
  ##                  : <p>The Amazon Resource Names (ARN) of the target groups to associate with the Auto Scaling group. Instances are registered as targets in a target group, and traffic is routed to the target group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: JString (required)
  ##   MinSize: JInt (required)
  ##          : The minimum size of the group.
  ##   PlacementGroup: JString
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   LaunchTemplate.Version: JString
  ##                         : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   MaxInstanceLifetime: JInt
  ##                      : <p>The maximum amount of time, in seconds, that an instance can be in service.</p> <p>Valid Range: Minimum value of 604800.</p>
  ##   Version: JString (required)
  ##   VPCZoneIdentifier: JString
  ##                    : <p>A comma-separated list of subnet IDs for your virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into a VPC.</p>
  ##   LoadBalancerNames: JArray
  ##                    : <p>A list of Classic Load Balancers associated with this Auto Scaling group. For Application Load Balancers and Network Load Balancers, specify a list of target groups using the <code>TargetGroupARNs</code> property instead.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   ServiceLinkedRoleARN: JString
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. By default, Amazon EC2 Auto Scaling uses a service-linked role named AWSServiceRoleForAutoScaling, which it creates if it does not exist. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   LaunchTemplate.LaunchTemplateId: JString
  ##                                  : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  section = newJObject()
  var valid_602201 = query.getOrDefault("MixedInstancesPolicy.InstancesDistribution")
  valid_602201 = validateParameter(valid_602201, JString, required = false,
                                 default = nil)
  if valid_602201 != nil:
    section.add "MixedInstancesPolicy.InstancesDistribution", valid_602201
  var valid_602202 = query.getOrDefault("LaunchTemplate.LaunchTemplateName")
  valid_602202 = validateParameter(valid_602202, JString, required = false,
                                 default = nil)
  if valid_602202 != nil:
    section.add "LaunchTemplate.LaunchTemplateName", valid_602202
  assert query != nil, "query argument is necessary due to required `MaxSize` field"
  var valid_602203 = query.getOrDefault("MaxSize")
  valid_602203 = validateParameter(valid_602203, JInt, required = true, default = nil)
  if valid_602203 != nil:
    section.add "MaxSize", valid_602203
  var valid_602204 = query.getOrDefault("LaunchConfigurationName")
  valid_602204 = validateParameter(valid_602204, JString, required = false,
                                 default = nil)
  if valid_602204 != nil:
    section.add "LaunchConfigurationName", valid_602204
  var valid_602205 = query.getOrDefault("HealthCheckGracePeriod")
  valid_602205 = validateParameter(valid_602205, JInt, required = false, default = nil)
  if valid_602205 != nil:
    section.add "HealthCheckGracePeriod", valid_602205
  var valid_602206 = query.getOrDefault("MixedInstancesPolicy.LaunchTemplate")
  valid_602206 = validateParameter(valid_602206, JString, required = false,
                                 default = nil)
  if valid_602206 != nil:
    section.add "MixedInstancesPolicy.LaunchTemplate", valid_602206
  var valid_602207 = query.getOrDefault("Tags")
  valid_602207 = validateParameter(valid_602207, JArray, required = false,
                                 default = nil)
  if valid_602207 != nil:
    section.add "Tags", valid_602207
  var valid_602208 = query.getOrDefault("NewInstancesProtectedFromScaleIn")
  valid_602208 = validateParameter(valid_602208, JBool, required = false, default = nil)
  if valid_602208 != nil:
    section.add "NewInstancesProtectedFromScaleIn", valid_602208
  var valid_602209 = query.getOrDefault("AvailabilityZones")
  valid_602209 = validateParameter(valid_602209, JArray, required = false,
                                 default = nil)
  if valid_602209 != nil:
    section.add "AvailabilityZones", valid_602209
  var valid_602210 = query.getOrDefault("HealthCheckType")
  valid_602210 = validateParameter(valid_602210, JString, required = false,
                                 default = nil)
  if valid_602210 != nil:
    section.add "HealthCheckType", valid_602210
  var valid_602211 = query.getOrDefault("TerminationPolicies")
  valid_602211 = validateParameter(valid_602211, JArray, required = false,
                                 default = nil)
  if valid_602211 != nil:
    section.add "TerminationPolicies", valid_602211
  var valid_602212 = query.getOrDefault("InstanceId")
  valid_602212 = validateParameter(valid_602212, JString, required = false,
                                 default = nil)
  if valid_602212 != nil:
    section.add "InstanceId", valid_602212
  var valid_602213 = query.getOrDefault("DesiredCapacity")
  valid_602213 = validateParameter(valid_602213, JInt, required = false, default = nil)
  if valid_602213 != nil:
    section.add "DesiredCapacity", valid_602213
  var valid_602214 = query.getOrDefault("LifecycleHookSpecificationList")
  valid_602214 = validateParameter(valid_602214, JArray, required = false,
                                 default = nil)
  if valid_602214 != nil:
    section.add "LifecycleHookSpecificationList", valid_602214
  var valid_602215 = query.getOrDefault("AutoScalingGroupName")
  valid_602215 = validateParameter(valid_602215, JString, required = true,
                                 default = nil)
  if valid_602215 != nil:
    section.add "AutoScalingGroupName", valid_602215
  var valid_602216 = query.getOrDefault("DefaultCooldown")
  valid_602216 = validateParameter(valid_602216, JInt, required = false, default = nil)
  if valid_602216 != nil:
    section.add "DefaultCooldown", valid_602216
  var valid_602217 = query.getOrDefault("TargetGroupARNs")
  valid_602217 = validateParameter(valid_602217, JArray, required = false,
                                 default = nil)
  if valid_602217 != nil:
    section.add "TargetGroupARNs", valid_602217
  var valid_602218 = query.getOrDefault("Action")
  valid_602218 = validateParameter(valid_602218, JString, required = true,
                                 default = newJString("CreateAutoScalingGroup"))
  if valid_602218 != nil:
    section.add "Action", valid_602218
  var valid_602219 = query.getOrDefault("MinSize")
  valid_602219 = validateParameter(valid_602219, JInt, required = true, default = nil)
  if valid_602219 != nil:
    section.add "MinSize", valid_602219
  var valid_602220 = query.getOrDefault("PlacementGroup")
  valid_602220 = validateParameter(valid_602220, JString, required = false,
                                 default = nil)
  if valid_602220 != nil:
    section.add "PlacementGroup", valid_602220
  var valid_602221 = query.getOrDefault("LaunchTemplate.Version")
  valid_602221 = validateParameter(valid_602221, JString, required = false,
                                 default = nil)
  if valid_602221 != nil:
    section.add "LaunchTemplate.Version", valid_602221
  var valid_602222 = query.getOrDefault("MaxInstanceLifetime")
  valid_602222 = validateParameter(valid_602222, JInt, required = false, default = nil)
  if valid_602222 != nil:
    section.add "MaxInstanceLifetime", valid_602222
  var valid_602223 = query.getOrDefault("Version")
  valid_602223 = validateParameter(valid_602223, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602223 != nil:
    section.add "Version", valid_602223
  var valid_602224 = query.getOrDefault("VPCZoneIdentifier")
  valid_602224 = validateParameter(valid_602224, JString, required = false,
                                 default = nil)
  if valid_602224 != nil:
    section.add "VPCZoneIdentifier", valid_602224
  var valid_602225 = query.getOrDefault("LoadBalancerNames")
  valid_602225 = validateParameter(valid_602225, JArray, required = false,
                                 default = nil)
  if valid_602225 != nil:
    section.add "LoadBalancerNames", valid_602225
  var valid_602226 = query.getOrDefault("ServiceLinkedRoleARN")
  valid_602226 = validateParameter(valid_602226, JString, required = false,
                                 default = nil)
  if valid_602226 != nil:
    section.add "ServiceLinkedRoleARN", valid_602226
  var valid_602227 = query.getOrDefault("LaunchTemplate.LaunchTemplateId")
  valid_602227 = validateParameter(valid_602227, JString, required = false,
                                 default = nil)
  if valid_602227 != nil:
    section.add "LaunchTemplate.LaunchTemplateId", valid_602227
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602228 = header.getOrDefault("X-Amz-Signature")
  valid_602228 = validateParameter(valid_602228, JString, required = false,
                                 default = nil)
  if valid_602228 != nil:
    section.add "X-Amz-Signature", valid_602228
  var valid_602229 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602229 = validateParameter(valid_602229, JString, required = false,
                                 default = nil)
  if valid_602229 != nil:
    section.add "X-Amz-Content-Sha256", valid_602229
  var valid_602230 = header.getOrDefault("X-Amz-Date")
  valid_602230 = validateParameter(valid_602230, JString, required = false,
                                 default = nil)
  if valid_602230 != nil:
    section.add "X-Amz-Date", valid_602230
  var valid_602231 = header.getOrDefault("X-Amz-Credential")
  valid_602231 = validateParameter(valid_602231, JString, required = false,
                                 default = nil)
  if valid_602231 != nil:
    section.add "X-Amz-Credential", valid_602231
  var valid_602232 = header.getOrDefault("X-Amz-Security-Token")
  valid_602232 = validateParameter(valid_602232, JString, required = false,
                                 default = nil)
  if valid_602232 != nil:
    section.add "X-Amz-Security-Token", valid_602232
  var valid_602233 = header.getOrDefault("X-Amz-Algorithm")
  valid_602233 = validateParameter(valid_602233, JString, required = false,
                                 default = nil)
  if valid_602233 != nil:
    section.add "X-Amz-Algorithm", valid_602233
  var valid_602234 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602234 = validateParameter(valid_602234, JString, required = false,
                                 default = nil)
  if valid_602234 != nil:
    section.add "X-Amz-SignedHeaders", valid_602234
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602235: Call_GetCreateAutoScalingGroup_602198; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an Auto Scaling group with the specified name and attributes.</p> <p>If you exceed your maximum limit of Auto Scaling groups, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_602235.validator(path, query, header, formData, body)
  let scheme = call_602235.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602235.url(scheme.get, call_602235.host, call_602235.base,
                         call_602235.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602235, url, valid)

proc call*(call_602236: Call_GetCreateAutoScalingGroup_602198; MaxSize: int;
          AutoScalingGroupName: string; MinSize: int;
          MixedInstancesPolicyInstancesDistribution: string = "";
          LaunchTemplateLaunchTemplateName: string = "";
          LaunchConfigurationName: string = ""; HealthCheckGracePeriod: int = 0;
          MixedInstancesPolicyLaunchTemplate: string = ""; Tags: JsonNode = nil;
          NewInstancesProtectedFromScaleIn: bool = false;
          AvailabilityZones: JsonNode = nil; HealthCheckType: string = "";
          TerminationPolicies: JsonNode = nil; InstanceId: string = "";
          DesiredCapacity: int = 0; LifecycleHookSpecificationList: JsonNode = nil;
          DefaultCooldown: int = 0; TargetGroupARNs: JsonNode = nil;
          Action: string = "CreateAutoScalingGroup"; PlacementGroup: string = "";
          LaunchTemplateVersion: string = ""; MaxInstanceLifetime: int = 0;
          Version: string = "2011-01-01"; VPCZoneIdentifier: string = "";
          LoadBalancerNames: JsonNode = nil; ServiceLinkedRoleARN: string = "";
          LaunchTemplateLaunchTemplateId: string = ""): Recallable =
  ## getCreateAutoScalingGroup
  ## <p>Creates an Auto Scaling group with the specified name and attributes.</p> <p>If you exceed your maximum limit of Auto Scaling groups, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MixedInstancesPolicyInstancesDistribution: string
  ##                                            : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified, the value for each parameter in <code>InstancesDistribution</code> uses a default value.</p>
  ##   LaunchTemplateLaunchTemplateName: string
  ##                                   : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   MaxSize: int (required)
  ##          : The maximum size of the group.
  ##   LaunchConfigurationName: string
  ##                          : <p>The name of the launch configuration.</p> <p>If you do not specify <code>LaunchConfigurationName</code>, you must specify one of the following parameters: <code>InstanceId</code>, <code>LaunchTemplate</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   HealthCheckGracePeriod: int
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. During this time, any health check failures for the instance are ignored. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   MixedInstancesPolicyLaunchTemplate: string
  ##                                     : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   Tags: JArray
  ##       : <p>One or more tags.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   NewInstancesProtectedFromScaleIn: bool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AvailabilityZones: JArray
  ##                    : <p>One or more Availability Zones for the group. This parameter is optional if you specify one or more subnets for <code>VPCZoneIdentifier</code>.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into EC2-Classic.</p>
  ##   HealthCheckType: string
  ##                  : <p>The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. The default value is <code>EC2</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   TerminationPolicies: JArray
  ##                      : <p>One or more termination policies used to select the instance to terminate. These policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   InstanceId: string
  ##             : <p>The ID of the instance used to create a launch configuration for the group.</p> <p>When you specify an ID of an instance, Amazon EC2 Auto Scaling creates a new launch configuration and associates it with the group. This launch configuration derives its attributes from the specified instance, except for the block device mapping.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-from-instance.html">Create an Auto Scaling Group Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You must specify one of the following parameters in your request: <code>LaunchConfigurationName</code>, <code>LaunchTemplate</code>, <code>InstanceId</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   DesiredCapacity: int
  ##                  : The number of Amazon EC2 instances that the Auto Scaling group attempts to maintain. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group. If you do not specify a desired capacity, the default is the minimum size of the group.
  ##   LifecycleHookSpecificationList: JArray
  ##                                 : One or more lifecycle hooks.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group. This name must be unique per Region per account.
  ##   DefaultCooldown: int
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   TargetGroupARNs: JArray
  ##                  : <p>The Amazon Resource Names (ARN) of the target groups to associate with the Auto Scaling group. Instances are registered as targets in a target group, and traffic is routed to the target group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   MinSize: int (required)
  ##          : The minimum size of the group.
  ##   PlacementGroup: string
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   LaunchTemplateVersion: string
  ##                        : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   MaxInstanceLifetime: int
  ##                      : <p>The maximum amount of time, in seconds, that an instance can be in service.</p> <p>Valid Range: Minimum value of 604800.</p>
  ##   Version: string (required)
  ##   VPCZoneIdentifier: string
  ##                    : <p>A comma-separated list of subnet IDs for your virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into a VPC.</p>
  ##   LoadBalancerNames: JArray
  ##                    : <p>A list of Classic Load Balancers associated with this Auto Scaling group. For Application Load Balancers and Network Load Balancers, specify a list of target groups using the <code>TargetGroupARNs</code> property instead.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   ServiceLinkedRoleARN: string
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. By default, Amazon EC2 Auto Scaling uses a service-linked role named AWSServiceRoleForAutoScaling, which it creates if it does not exist. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   LaunchTemplateLaunchTemplateId: string
  ##                                 : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  var query_602237 = newJObject()
  add(query_602237, "MixedInstancesPolicy.InstancesDistribution",
      newJString(MixedInstancesPolicyInstancesDistribution))
  add(query_602237, "LaunchTemplate.LaunchTemplateName",
      newJString(LaunchTemplateLaunchTemplateName))
  add(query_602237, "MaxSize", newJInt(MaxSize))
  add(query_602237, "LaunchConfigurationName", newJString(LaunchConfigurationName))
  add(query_602237, "HealthCheckGracePeriod", newJInt(HealthCheckGracePeriod))
  add(query_602237, "MixedInstancesPolicy.LaunchTemplate",
      newJString(MixedInstancesPolicyLaunchTemplate))
  if Tags != nil:
    query_602237.add "Tags", Tags
  add(query_602237, "NewInstancesProtectedFromScaleIn",
      newJBool(NewInstancesProtectedFromScaleIn))
  if AvailabilityZones != nil:
    query_602237.add "AvailabilityZones", AvailabilityZones
  add(query_602237, "HealthCheckType", newJString(HealthCheckType))
  if TerminationPolicies != nil:
    query_602237.add "TerminationPolicies", TerminationPolicies
  add(query_602237, "InstanceId", newJString(InstanceId))
  add(query_602237, "DesiredCapacity", newJInt(DesiredCapacity))
  if LifecycleHookSpecificationList != nil:
    query_602237.add "LifecycleHookSpecificationList",
                    LifecycleHookSpecificationList
  add(query_602237, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_602237, "DefaultCooldown", newJInt(DefaultCooldown))
  if TargetGroupARNs != nil:
    query_602237.add "TargetGroupARNs", TargetGroupARNs
  add(query_602237, "Action", newJString(Action))
  add(query_602237, "MinSize", newJInt(MinSize))
  add(query_602237, "PlacementGroup", newJString(PlacementGroup))
  add(query_602237, "LaunchTemplate.Version", newJString(LaunchTemplateVersion))
  add(query_602237, "MaxInstanceLifetime", newJInt(MaxInstanceLifetime))
  add(query_602237, "Version", newJString(Version))
  add(query_602237, "VPCZoneIdentifier", newJString(VPCZoneIdentifier))
  if LoadBalancerNames != nil:
    query_602237.add "LoadBalancerNames", LoadBalancerNames
  add(query_602237, "ServiceLinkedRoleARN", newJString(ServiceLinkedRoleARN))
  add(query_602237, "LaunchTemplate.LaunchTemplateId",
      newJString(LaunchTemplateLaunchTemplateId))
  result = call_602236.call(nil, query_602237, nil, nil, nil)

var getCreateAutoScalingGroup* = Call_GetCreateAutoScalingGroup_602198(
    name: "getCreateAutoScalingGroup", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=CreateAutoScalingGroup",
    validator: validate_GetCreateAutoScalingGroup_602199, base: "/",
    url: url_GetCreateAutoScalingGroup_602200,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateLaunchConfiguration_602312 = ref object of OpenApiRestCall_601389
proc url_PostCreateLaunchConfiguration_602314(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateLaunchConfiguration_602313(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a launch configuration.</p> <p>If you exceed your maximum limit of launch configurations, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html">Launch Configurations</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602315 = query.getOrDefault("Action")
  valid_602315 = validateParameter(valid_602315, JString, required = true, default = newJString(
      "CreateLaunchConfiguration"))
  if valid_602315 != nil:
    section.add "Action", valid_602315
  var valid_602316 = query.getOrDefault("Version")
  valid_602316 = validateParameter(valid_602316, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602316 != nil:
    section.add "Version", valid_602316
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602317 = header.getOrDefault("X-Amz-Signature")
  valid_602317 = validateParameter(valid_602317, JString, required = false,
                                 default = nil)
  if valid_602317 != nil:
    section.add "X-Amz-Signature", valid_602317
  var valid_602318 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602318 = validateParameter(valid_602318, JString, required = false,
                                 default = nil)
  if valid_602318 != nil:
    section.add "X-Amz-Content-Sha256", valid_602318
  var valid_602319 = header.getOrDefault("X-Amz-Date")
  valid_602319 = validateParameter(valid_602319, JString, required = false,
                                 default = nil)
  if valid_602319 != nil:
    section.add "X-Amz-Date", valid_602319
  var valid_602320 = header.getOrDefault("X-Amz-Credential")
  valid_602320 = validateParameter(valid_602320, JString, required = false,
                                 default = nil)
  if valid_602320 != nil:
    section.add "X-Amz-Credential", valid_602320
  var valid_602321 = header.getOrDefault("X-Amz-Security-Token")
  valid_602321 = validateParameter(valid_602321, JString, required = false,
                                 default = nil)
  if valid_602321 != nil:
    section.add "X-Amz-Security-Token", valid_602321
  var valid_602322 = header.getOrDefault("X-Amz-Algorithm")
  valid_602322 = validateParameter(valid_602322, JString, required = false,
                                 default = nil)
  if valid_602322 != nil:
    section.add "X-Amz-Algorithm", valid_602322
  var valid_602323 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602323 = validateParameter(valid_602323, JString, required = false,
                                 default = nil)
  if valid_602323 != nil:
    section.add "X-Amz-SignedHeaders", valid_602323
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserData: JString
  ##           : The Base64-encoded user data to make available to the launched EC2 instances. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance Metadata and User Data</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   InstanceType: JString
  ##               : <p>Specifies the instance type of the EC2 instance.</p> <p>For information about available instance types, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes">Available Instance Types</a> in the <i>Amazon EC2 User Guide for Linux Instances.</i> </p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>InstanceType</code>.</p>
  ##   SecurityGroups: JArray
  ##                 : <p>A list that contains the security groups to assign to the instances in the Auto Scaling group.</p> <p>[EC2-VPC] Specify the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security Groups for Your VPC</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>[EC2-Classic] Specify either the security group names or the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon EC2 Security Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
  ##   KeyName: JString
  ##          : The name of the key pair. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Amazon EC2 Key Pairs</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   SpotPrice: JString
  ##            : <p>The maximum hourly price to be paid for any Spot Instance launched to fulfill the request. Spot Instances are launched when the price you specify exceeds the current Spot price. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-launch-spot-instances.html">Launching Spot Instances in Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <note> <p>When you change your maximum price by creating a new launch configuration, running instances will continue to run as long as the maximum price for those running instances is higher than the current Spot price.</p> </note>
  ##   ClassicLinkVPCId: JString
  ##                   : <p>The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>This parameter can only be used if you are launching EC2-Classic instances.</p>
  ##   PlacementTenancy: JString
  ##                   : <p>The tenancy of the instance. An instance with <code>dedicated</code> tenancy runs on isolated, single-tenant hardware and can only be launched into a VPC.</p> <p>To launch dedicated instances into a shared tenancy VPC (a VPC with the instance placement tenancy attribute set to <code>default</code>), you must set the value of this parameter to <code>dedicated</code>.</p> <p>If you specify <code>PlacementTenancy</code>, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-vpc-tenancy">Instance Placement Tenancy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Valid Values: <code>default</code> | <code>dedicated</code> </p>
  ##   KernelId: JString
  ##           : The ID of the kernel associated with the AMI.
  ##   BlockDeviceMappings: JArray
  ##                      : A block device mapping, which specifies the block devices for the instance. You can specify virtual devices and EBS volumes. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html">Block Device Mapping</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   ClassicLinkVPCSecurityGroups: JArray
  ##                               : <p>The IDs of one or more security groups for the specified ClassicLink-enabled VPC. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify the <code>ClassicLinkVPCId</code> parameter, you must specify this parameter.</p>
  ##   InstanceId: JString
  ##             : <p>The ID of the instance to use to create the launch configuration. The new launch configuration derives attributes from the instance, except for the block device mapping.</p> <p>To create a launch configuration with a block device mapping or override any other instance attributes, specify them as part of the same request.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-lc-with-instanceID.html">Create a Launch Configuration Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify both <code>ImageId</code> and <code>InstanceType</code>.</p>
  ##   AssociatePublicIpAddress: JBool
  ##                           : <p>For Auto Scaling groups that are running in a virtual private cloud (VPC), specifies whether to assign a public IP address to the group's instances. If you specify <code>true</code>, each instance in the Auto Scaling group receives a unique public IP address. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html">Launching Auto Scaling Instances in a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify this parameter, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <note> <p>If the instance is launched into a default subnet, the default is to assign a public IP address, unless you disabled the option to assign a public IP address on the subnet. If the instance is launched into a nondefault subnet, the default is not to assign a public IP address, unless you enabled the option to assign a public IP address on the subnet.</p> </note>
  ##   EbsOptimized: JBool
  ##               : <p>Specifies whether the launch configuration is optimized for EBS I/O (<code>true</code>) or not (<code>false</code>). The optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization is not available with all instance types. Additional fees are incurred when you enable EBS optimization for an instance type that is not EBS-optimized by default. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html">Amazon EBS-Optimized Instances</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>The default value is <code>false</code>.</p>
  ##   RamdiskId: JString
  ##            : The ID of the RAM disk to select.
  ##   LaunchConfigurationName: JString (required)
  ##                          : The name of the launch configuration. This name must be unique per Region per account.
  ##   ImageId: JString
  ##          : <p>The ID of the Amazon Machine Image (AMI) that was assigned during registration. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html">Finding an AMI</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>ImageId</code>.</p>
  ##   IamInstanceProfile: JString
  ##                     : <p>The name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/us-iam-role.html">IAM Role for Applications That Run on Amazon EC2 Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   InstanceMonitoring.Enabled: JString
  ##                             : Describes whether detailed monitoring is enabled for the Auto Scaling instances.
  ## If <code>true</code>, detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
  section = newJObject()
  var valid_602324 = formData.getOrDefault("UserData")
  valid_602324 = validateParameter(valid_602324, JString, required = false,
                                 default = nil)
  if valid_602324 != nil:
    section.add "UserData", valid_602324
  var valid_602325 = formData.getOrDefault("InstanceType")
  valid_602325 = validateParameter(valid_602325, JString, required = false,
                                 default = nil)
  if valid_602325 != nil:
    section.add "InstanceType", valid_602325
  var valid_602326 = formData.getOrDefault("SecurityGroups")
  valid_602326 = validateParameter(valid_602326, JArray, required = false,
                                 default = nil)
  if valid_602326 != nil:
    section.add "SecurityGroups", valid_602326
  var valid_602327 = formData.getOrDefault("KeyName")
  valid_602327 = validateParameter(valid_602327, JString, required = false,
                                 default = nil)
  if valid_602327 != nil:
    section.add "KeyName", valid_602327
  var valid_602328 = formData.getOrDefault("SpotPrice")
  valid_602328 = validateParameter(valid_602328, JString, required = false,
                                 default = nil)
  if valid_602328 != nil:
    section.add "SpotPrice", valid_602328
  var valid_602329 = formData.getOrDefault("ClassicLinkVPCId")
  valid_602329 = validateParameter(valid_602329, JString, required = false,
                                 default = nil)
  if valid_602329 != nil:
    section.add "ClassicLinkVPCId", valid_602329
  var valid_602330 = formData.getOrDefault("PlacementTenancy")
  valid_602330 = validateParameter(valid_602330, JString, required = false,
                                 default = nil)
  if valid_602330 != nil:
    section.add "PlacementTenancy", valid_602330
  var valid_602331 = formData.getOrDefault("KernelId")
  valid_602331 = validateParameter(valid_602331, JString, required = false,
                                 default = nil)
  if valid_602331 != nil:
    section.add "KernelId", valid_602331
  var valid_602332 = formData.getOrDefault("BlockDeviceMappings")
  valid_602332 = validateParameter(valid_602332, JArray, required = false,
                                 default = nil)
  if valid_602332 != nil:
    section.add "BlockDeviceMappings", valid_602332
  var valid_602333 = formData.getOrDefault("ClassicLinkVPCSecurityGroups")
  valid_602333 = validateParameter(valid_602333, JArray, required = false,
                                 default = nil)
  if valid_602333 != nil:
    section.add "ClassicLinkVPCSecurityGroups", valid_602333
  var valid_602334 = formData.getOrDefault("InstanceId")
  valid_602334 = validateParameter(valid_602334, JString, required = false,
                                 default = nil)
  if valid_602334 != nil:
    section.add "InstanceId", valid_602334
  var valid_602335 = formData.getOrDefault("AssociatePublicIpAddress")
  valid_602335 = validateParameter(valid_602335, JBool, required = false, default = nil)
  if valid_602335 != nil:
    section.add "AssociatePublicIpAddress", valid_602335
  var valid_602336 = formData.getOrDefault("EbsOptimized")
  valid_602336 = validateParameter(valid_602336, JBool, required = false, default = nil)
  if valid_602336 != nil:
    section.add "EbsOptimized", valid_602336
  var valid_602337 = formData.getOrDefault("RamdiskId")
  valid_602337 = validateParameter(valid_602337, JString, required = false,
                                 default = nil)
  if valid_602337 != nil:
    section.add "RamdiskId", valid_602337
  assert formData != nil, "formData argument is necessary due to required `LaunchConfigurationName` field"
  var valid_602338 = formData.getOrDefault("LaunchConfigurationName")
  valid_602338 = validateParameter(valid_602338, JString, required = true,
                                 default = nil)
  if valid_602338 != nil:
    section.add "LaunchConfigurationName", valid_602338
  var valid_602339 = formData.getOrDefault("ImageId")
  valid_602339 = validateParameter(valid_602339, JString, required = false,
                                 default = nil)
  if valid_602339 != nil:
    section.add "ImageId", valid_602339
  var valid_602340 = formData.getOrDefault("IamInstanceProfile")
  valid_602340 = validateParameter(valid_602340, JString, required = false,
                                 default = nil)
  if valid_602340 != nil:
    section.add "IamInstanceProfile", valid_602340
  var valid_602341 = formData.getOrDefault("InstanceMonitoring.Enabled")
  valid_602341 = validateParameter(valid_602341, JString, required = false,
                                 default = nil)
  if valid_602341 != nil:
    section.add "InstanceMonitoring.Enabled", valid_602341
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602342: Call_PostCreateLaunchConfiguration_602312; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a launch configuration.</p> <p>If you exceed your maximum limit of launch configurations, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html">Launch Configurations</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_602342.validator(path, query, header, formData, body)
  let scheme = call_602342.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602342.url(scheme.get, call_602342.host, call_602342.base,
                         call_602342.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602342, url, valid)

proc call*(call_602343: Call_PostCreateLaunchConfiguration_602312;
          LaunchConfigurationName: string; UserData: string = "";
          InstanceType: string = ""; SecurityGroups: JsonNode = nil;
          KeyName: string = ""; SpotPrice: string = ""; ClassicLinkVPCId: string = "";
          PlacementTenancy: string = ""; KernelId: string = "";
          BlockDeviceMappings: JsonNode = nil;
          ClassicLinkVPCSecurityGroups: JsonNode = nil; InstanceId: string = "";
          Action: string = "CreateLaunchConfiguration";
          AssociatePublicIpAddress: bool = false; EbsOptimized: bool = false;
          RamdiskId: string = ""; ImageId: string = ""; Version: string = "2011-01-01";
          IamInstanceProfile: string = ""; InstanceMonitoringEnabled: string = ""): Recallable =
  ## postCreateLaunchConfiguration
  ## <p>Creates a launch configuration.</p> <p>If you exceed your maximum limit of launch configurations, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html">Launch Configurations</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   UserData: string
  ##           : The Base64-encoded user data to make available to the launched EC2 instances. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance Metadata and User Data</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   InstanceType: string
  ##               : <p>Specifies the instance type of the EC2 instance.</p> <p>For information about available instance types, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes">Available Instance Types</a> in the <i>Amazon EC2 User Guide for Linux Instances.</i> </p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>InstanceType</code>.</p>
  ##   SecurityGroups: JArray
  ##                 : <p>A list that contains the security groups to assign to the instances in the Auto Scaling group.</p> <p>[EC2-VPC] Specify the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security Groups for Your VPC</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>[EC2-Classic] Specify either the security group names or the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon EC2 Security Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
  ##   KeyName: string
  ##          : The name of the key pair. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Amazon EC2 Key Pairs</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   SpotPrice: string
  ##            : <p>The maximum hourly price to be paid for any Spot Instance launched to fulfill the request. Spot Instances are launched when the price you specify exceeds the current Spot price. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-launch-spot-instances.html">Launching Spot Instances in Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <note> <p>When you change your maximum price by creating a new launch configuration, running instances will continue to run as long as the maximum price for those running instances is higher than the current Spot price.</p> </note>
  ##   ClassicLinkVPCId: string
  ##                   : <p>The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>This parameter can only be used if you are launching EC2-Classic instances.</p>
  ##   PlacementTenancy: string
  ##                   : <p>The tenancy of the instance. An instance with <code>dedicated</code> tenancy runs on isolated, single-tenant hardware and can only be launched into a VPC.</p> <p>To launch dedicated instances into a shared tenancy VPC (a VPC with the instance placement tenancy attribute set to <code>default</code>), you must set the value of this parameter to <code>dedicated</code>.</p> <p>If you specify <code>PlacementTenancy</code>, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-vpc-tenancy">Instance Placement Tenancy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Valid Values: <code>default</code> | <code>dedicated</code> </p>
  ##   KernelId: string
  ##           : The ID of the kernel associated with the AMI.
  ##   BlockDeviceMappings: JArray
  ##                      : A block device mapping, which specifies the block devices for the instance. You can specify virtual devices and EBS volumes. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html">Block Device Mapping</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   ClassicLinkVPCSecurityGroups: JArray
  ##                               : <p>The IDs of one or more security groups for the specified ClassicLink-enabled VPC. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify the <code>ClassicLinkVPCId</code> parameter, you must specify this parameter.</p>
  ##   InstanceId: string
  ##             : <p>The ID of the instance to use to create the launch configuration. The new launch configuration derives attributes from the instance, except for the block device mapping.</p> <p>To create a launch configuration with a block device mapping or override any other instance attributes, specify them as part of the same request.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-lc-with-instanceID.html">Create a Launch Configuration Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify both <code>ImageId</code> and <code>InstanceType</code>.</p>
  ##   Action: string (required)
  ##   AssociatePublicIpAddress: bool
  ##                           : <p>For Auto Scaling groups that are running in a virtual private cloud (VPC), specifies whether to assign a public IP address to the group's instances. If you specify <code>true</code>, each instance in the Auto Scaling group receives a unique public IP address. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html">Launching Auto Scaling Instances in a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify this parameter, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <note> <p>If the instance is launched into a default subnet, the default is to assign a public IP address, unless you disabled the option to assign a public IP address on the subnet. If the instance is launched into a nondefault subnet, the default is not to assign a public IP address, unless you enabled the option to assign a public IP address on the subnet.</p> </note>
  ##   EbsOptimized: bool
  ##               : <p>Specifies whether the launch configuration is optimized for EBS I/O (<code>true</code>) or not (<code>false</code>). The optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization is not available with all instance types. Additional fees are incurred when you enable EBS optimization for an instance type that is not EBS-optimized by default. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html">Amazon EBS-Optimized Instances</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>The default value is <code>false</code>.</p>
  ##   RamdiskId: string
  ##            : The ID of the RAM disk to select.
  ##   LaunchConfigurationName: string (required)
  ##                          : The name of the launch configuration. This name must be unique per Region per account.
  ##   ImageId: string
  ##          : <p>The ID of the Amazon Machine Image (AMI) that was assigned during registration. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html">Finding an AMI</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>ImageId</code>.</p>
  ##   Version: string (required)
  ##   IamInstanceProfile: string
  ##                     : <p>The name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/us-iam-role.html">IAM Role for Applications That Run on Amazon EC2 Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   InstanceMonitoringEnabled: string
  ##                            : Describes whether detailed monitoring is enabled for the Auto Scaling instances.
  ## If <code>true</code>, detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
  var query_602344 = newJObject()
  var formData_602345 = newJObject()
  add(formData_602345, "UserData", newJString(UserData))
  add(formData_602345, "InstanceType", newJString(InstanceType))
  if SecurityGroups != nil:
    formData_602345.add "SecurityGroups", SecurityGroups
  add(formData_602345, "KeyName", newJString(KeyName))
  add(formData_602345, "SpotPrice", newJString(SpotPrice))
  add(formData_602345, "ClassicLinkVPCId", newJString(ClassicLinkVPCId))
  add(formData_602345, "PlacementTenancy", newJString(PlacementTenancy))
  add(formData_602345, "KernelId", newJString(KernelId))
  if BlockDeviceMappings != nil:
    formData_602345.add "BlockDeviceMappings", BlockDeviceMappings
  if ClassicLinkVPCSecurityGroups != nil:
    formData_602345.add "ClassicLinkVPCSecurityGroups",
                       ClassicLinkVPCSecurityGroups
  add(formData_602345, "InstanceId", newJString(InstanceId))
  add(query_602344, "Action", newJString(Action))
  add(formData_602345, "AssociatePublicIpAddress",
      newJBool(AssociatePublicIpAddress))
  add(formData_602345, "EbsOptimized", newJBool(EbsOptimized))
  add(formData_602345, "RamdiskId", newJString(RamdiskId))
  add(formData_602345, "LaunchConfigurationName",
      newJString(LaunchConfigurationName))
  add(formData_602345, "ImageId", newJString(ImageId))
  add(query_602344, "Version", newJString(Version))
  add(formData_602345, "IamInstanceProfile", newJString(IamInstanceProfile))
  add(formData_602345, "InstanceMonitoring.Enabled",
      newJString(InstanceMonitoringEnabled))
  result = call_602343.call(nil, query_602344, nil, formData_602345, nil)

var postCreateLaunchConfiguration* = Call_PostCreateLaunchConfiguration_602312(
    name: "postCreateLaunchConfiguration", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=CreateLaunchConfiguration",
    validator: validate_PostCreateLaunchConfiguration_602313, base: "/",
    url: url_PostCreateLaunchConfiguration_602314,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateLaunchConfiguration_602279 = ref object of OpenApiRestCall_601389
proc url_GetCreateLaunchConfiguration_602281(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateLaunchConfiguration_602280(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a launch configuration.</p> <p>If you exceed your maximum limit of launch configurations, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html">Launch Configurations</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   KeyName: JString
  ##          : The name of the key pair. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Amazon EC2 Key Pairs</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   PlacementTenancy: JString
  ##                   : <p>The tenancy of the instance. An instance with <code>dedicated</code> tenancy runs on isolated, single-tenant hardware and can only be launched into a VPC.</p> <p>To launch dedicated instances into a shared tenancy VPC (a VPC with the instance placement tenancy attribute set to <code>default</code>), you must set the value of this parameter to <code>dedicated</code>.</p> <p>If you specify <code>PlacementTenancy</code>, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-vpc-tenancy">Instance Placement Tenancy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Valid Values: <code>default</code> | <code>dedicated</code> </p>
  ##   ImageId: JString
  ##          : <p>The ID of the Amazon Machine Image (AMI) that was assigned during registration. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html">Finding an AMI</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>ImageId</code>.</p>
  ##   LaunchConfigurationName: JString (required)
  ##                          : The name of the launch configuration. This name must be unique per Region per account.
  ##   EbsOptimized: JBool
  ##               : <p>Specifies whether the launch configuration is optimized for EBS I/O (<code>true</code>) or not (<code>false</code>). The optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization is not available with all instance types. Additional fees are incurred when you enable EBS optimization for an instance type that is not EBS-optimized by default. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html">Amazon EBS-Optimized Instances</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>The default value is <code>false</code>.</p>
  ##   BlockDeviceMappings: JArray
  ##                      : A block device mapping, which specifies the block devices for the instance. You can specify virtual devices and EBS volumes. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html">Block Device Mapping</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   UserData: JString
  ##           : The Base64-encoded user data to make available to the launched EC2 instances. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance Metadata and User Data</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   IamInstanceProfile: JString
  ##                     : <p>The name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/us-iam-role.html">IAM Role for Applications That Run on Amazon EC2 Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   InstanceMonitoring.Enabled: JString
  ##                             : Describes whether detailed monitoring is enabled for the Auto Scaling instances.
  ## If <code>true</code>, detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
  ##   AssociatePublicIpAddress: JBool
  ##                           : <p>For Auto Scaling groups that are running in a virtual private cloud (VPC), specifies whether to assign a public IP address to the group's instances. If you specify <code>true</code>, each instance in the Auto Scaling group receives a unique public IP address. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html">Launching Auto Scaling Instances in a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify this parameter, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <note> <p>If the instance is launched into a default subnet, the default is to assign a public IP address, unless you disabled the option to assign a public IP address on the subnet. If the instance is launched into a nondefault subnet, the default is not to assign a public IP address, unless you enabled the option to assign a public IP address on the subnet.</p> </note>
  ##   InstanceId: JString
  ##             : <p>The ID of the instance to use to create the launch configuration. The new launch configuration derives attributes from the instance, except for the block device mapping.</p> <p>To create a launch configuration with a block device mapping or override any other instance attributes, specify them as part of the same request.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-lc-with-instanceID.html">Create a Launch Configuration Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify both <code>ImageId</code> and <code>InstanceType</code>.</p>
  ##   SecurityGroups: JArray
  ##                 : <p>A list that contains the security groups to assign to the instances in the Auto Scaling group.</p> <p>[EC2-VPC] Specify the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security Groups for Your VPC</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>[EC2-Classic] Specify either the security group names or the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon EC2 Security Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
  ##   ClassicLinkVPCSecurityGroups: JArray
  ##                               : <p>The IDs of one or more security groups for the specified ClassicLink-enabled VPC. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify the <code>ClassicLinkVPCId</code> parameter, you must specify this parameter.</p>
  ##   RamdiskId: JString
  ##            : The ID of the RAM disk to select.
  ##   KernelId: JString
  ##           : The ID of the kernel associated with the AMI.
  ##   ClassicLinkVPCId: JString
  ##                   : <p>The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>This parameter can only be used if you are launching EC2-Classic instances.</p>
  ##   InstanceType: JString
  ##               : <p>Specifies the instance type of the EC2 instance.</p> <p>For information about available instance types, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes">Available Instance Types</a> in the <i>Amazon EC2 User Guide for Linux Instances.</i> </p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>InstanceType</code>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   SpotPrice: JString
  ##            : <p>The maximum hourly price to be paid for any Spot Instance launched to fulfill the request. Spot Instances are launched when the price you specify exceeds the current Spot price. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-launch-spot-instances.html">Launching Spot Instances in Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <note> <p>When you change your maximum price by creating a new launch configuration, running instances will continue to run as long as the maximum price for those running instances is higher than the current Spot price.</p> </note>
  section = newJObject()
  var valid_602282 = query.getOrDefault("KeyName")
  valid_602282 = validateParameter(valid_602282, JString, required = false,
                                 default = nil)
  if valid_602282 != nil:
    section.add "KeyName", valid_602282
  var valid_602283 = query.getOrDefault("PlacementTenancy")
  valid_602283 = validateParameter(valid_602283, JString, required = false,
                                 default = nil)
  if valid_602283 != nil:
    section.add "PlacementTenancy", valid_602283
  var valid_602284 = query.getOrDefault("ImageId")
  valid_602284 = validateParameter(valid_602284, JString, required = false,
                                 default = nil)
  if valid_602284 != nil:
    section.add "ImageId", valid_602284
  assert query != nil, "query argument is necessary due to required `LaunchConfigurationName` field"
  var valid_602285 = query.getOrDefault("LaunchConfigurationName")
  valid_602285 = validateParameter(valid_602285, JString, required = true,
                                 default = nil)
  if valid_602285 != nil:
    section.add "LaunchConfigurationName", valid_602285
  var valid_602286 = query.getOrDefault("EbsOptimized")
  valid_602286 = validateParameter(valid_602286, JBool, required = false, default = nil)
  if valid_602286 != nil:
    section.add "EbsOptimized", valid_602286
  var valid_602287 = query.getOrDefault("BlockDeviceMappings")
  valid_602287 = validateParameter(valid_602287, JArray, required = false,
                                 default = nil)
  if valid_602287 != nil:
    section.add "BlockDeviceMappings", valid_602287
  var valid_602288 = query.getOrDefault("UserData")
  valid_602288 = validateParameter(valid_602288, JString, required = false,
                                 default = nil)
  if valid_602288 != nil:
    section.add "UserData", valid_602288
  var valid_602289 = query.getOrDefault("IamInstanceProfile")
  valid_602289 = validateParameter(valid_602289, JString, required = false,
                                 default = nil)
  if valid_602289 != nil:
    section.add "IamInstanceProfile", valid_602289
  var valid_602290 = query.getOrDefault("InstanceMonitoring.Enabled")
  valid_602290 = validateParameter(valid_602290, JString, required = false,
                                 default = nil)
  if valid_602290 != nil:
    section.add "InstanceMonitoring.Enabled", valid_602290
  var valid_602291 = query.getOrDefault("AssociatePublicIpAddress")
  valid_602291 = validateParameter(valid_602291, JBool, required = false, default = nil)
  if valid_602291 != nil:
    section.add "AssociatePublicIpAddress", valid_602291
  var valid_602292 = query.getOrDefault("InstanceId")
  valid_602292 = validateParameter(valid_602292, JString, required = false,
                                 default = nil)
  if valid_602292 != nil:
    section.add "InstanceId", valid_602292
  var valid_602293 = query.getOrDefault("SecurityGroups")
  valid_602293 = validateParameter(valid_602293, JArray, required = false,
                                 default = nil)
  if valid_602293 != nil:
    section.add "SecurityGroups", valid_602293
  var valid_602294 = query.getOrDefault("ClassicLinkVPCSecurityGroups")
  valid_602294 = validateParameter(valid_602294, JArray, required = false,
                                 default = nil)
  if valid_602294 != nil:
    section.add "ClassicLinkVPCSecurityGroups", valid_602294
  var valid_602295 = query.getOrDefault("RamdiskId")
  valid_602295 = validateParameter(valid_602295, JString, required = false,
                                 default = nil)
  if valid_602295 != nil:
    section.add "RamdiskId", valid_602295
  var valid_602296 = query.getOrDefault("KernelId")
  valid_602296 = validateParameter(valid_602296, JString, required = false,
                                 default = nil)
  if valid_602296 != nil:
    section.add "KernelId", valid_602296
  var valid_602297 = query.getOrDefault("ClassicLinkVPCId")
  valid_602297 = validateParameter(valid_602297, JString, required = false,
                                 default = nil)
  if valid_602297 != nil:
    section.add "ClassicLinkVPCId", valid_602297
  var valid_602298 = query.getOrDefault("InstanceType")
  valid_602298 = validateParameter(valid_602298, JString, required = false,
                                 default = nil)
  if valid_602298 != nil:
    section.add "InstanceType", valid_602298
  var valid_602299 = query.getOrDefault("Action")
  valid_602299 = validateParameter(valid_602299, JString, required = true, default = newJString(
      "CreateLaunchConfiguration"))
  if valid_602299 != nil:
    section.add "Action", valid_602299
  var valid_602300 = query.getOrDefault("Version")
  valid_602300 = validateParameter(valid_602300, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602300 != nil:
    section.add "Version", valid_602300
  var valid_602301 = query.getOrDefault("SpotPrice")
  valid_602301 = validateParameter(valid_602301, JString, required = false,
                                 default = nil)
  if valid_602301 != nil:
    section.add "SpotPrice", valid_602301
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602302 = header.getOrDefault("X-Amz-Signature")
  valid_602302 = validateParameter(valid_602302, JString, required = false,
                                 default = nil)
  if valid_602302 != nil:
    section.add "X-Amz-Signature", valid_602302
  var valid_602303 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602303 = validateParameter(valid_602303, JString, required = false,
                                 default = nil)
  if valid_602303 != nil:
    section.add "X-Amz-Content-Sha256", valid_602303
  var valid_602304 = header.getOrDefault("X-Amz-Date")
  valid_602304 = validateParameter(valid_602304, JString, required = false,
                                 default = nil)
  if valid_602304 != nil:
    section.add "X-Amz-Date", valid_602304
  var valid_602305 = header.getOrDefault("X-Amz-Credential")
  valid_602305 = validateParameter(valid_602305, JString, required = false,
                                 default = nil)
  if valid_602305 != nil:
    section.add "X-Amz-Credential", valid_602305
  var valid_602306 = header.getOrDefault("X-Amz-Security-Token")
  valid_602306 = validateParameter(valid_602306, JString, required = false,
                                 default = nil)
  if valid_602306 != nil:
    section.add "X-Amz-Security-Token", valid_602306
  var valid_602307 = header.getOrDefault("X-Amz-Algorithm")
  valid_602307 = validateParameter(valid_602307, JString, required = false,
                                 default = nil)
  if valid_602307 != nil:
    section.add "X-Amz-Algorithm", valid_602307
  var valid_602308 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602308 = validateParameter(valid_602308, JString, required = false,
                                 default = nil)
  if valid_602308 != nil:
    section.add "X-Amz-SignedHeaders", valid_602308
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602309: Call_GetCreateLaunchConfiguration_602279; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a launch configuration.</p> <p>If you exceed your maximum limit of launch configurations, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html">Launch Configurations</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_602309.validator(path, query, header, formData, body)
  let scheme = call_602309.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602309.url(scheme.get, call_602309.host, call_602309.base,
                         call_602309.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602309, url, valid)

proc call*(call_602310: Call_GetCreateLaunchConfiguration_602279;
          LaunchConfigurationName: string; KeyName: string = "";
          PlacementTenancy: string = ""; ImageId: string = "";
          EbsOptimized: bool = false; BlockDeviceMappings: JsonNode = nil;
          UserData: string = ""; IamInstanceProfile: string = "";
          InstanceMonitoringEnabled: string = "";
          AssociatePublicIpAddress: bool = false; InstanceId: string = "";
          SecurityGroups: JsonNode = nil;
          ClassicLinkVPCSecurityGroups: JsonNode = nil; RamdiskId: string = "";
          KernelId: string = ""; ClassicLinkVPCId: string = "";
          InstanceType: string = ""; Action: string = "CreateLaunchConfiguration";
          Version: string = "2011-01-01"; SpotPrice: string = ""): Recallable =
  ## getCreateLaunchConfiguration
  ## <p>Creates a launch configuration.</p> <p>If you exceed your maximum limit of launch configurations, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html">Launch Configurations</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   KeyName: string
  ##          : The name of the key pair. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Amazon EC2 Key Pairs</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   PlacementTenancy: string
  ##                   : <p>The tenancy of the instance. An instance with <code>dedicated</code> tenancy runs on isolated, single-tenant hardware and can only be launched into a VPC.</p> <p>To launch dedicated instances into a shared tenancy VPC (a VPC with the instance placement tenancy attribute set to <code>default</code>), you must set the value of this parameter to <code>dedicated</code>.</p> <p>If you specify <code>PlacementTenancy</code>, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-vpc-tenancy">Instance Placement Tenancy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Valid Values: <code>default</code> | <code>dedicated</code> </p>
  ##   ImageId: string
  ##          : <p>The ID of the Amazon Machine Image (AMI) that was assigned during registration. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html">Finding an AMI</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>ImageId</code>.</p>
  ##   LaunchConfigurationName: string (required)
  ##                          : The name of the launch configuration. This name must be unique per Region per account.
  ##   EbsOptimized: bool
  ##               : <p>Specifies whether the launch configuration is optimized for EBS I/O (<code>true</code>) or not (<code>false</code>). The optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization is not available with all instance types. Additional fees are incurred when you enable EBS optimization for an instance type that is not EBS-optimized by default. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html">Amazon EBS-Optimized Instances</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>The default value is <code>false</code>.</p>
  ##   BlockDeviceMappings: JArray
  ##                      : A block device mapping, which specifies the block devices for the instance. You can specify virtual devices and EBS volumes. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html">Block Device Mapping</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   UserData: string
  ##           : The Base64-encoded user data to make available to the launched EC2 instances. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance Metadata and User Data</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   IamInstanceProfile: string
  ##                     : <p>The name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/us-iam-role.html">IAM Role for Applications That Run on Amazon EC2 Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   InstanceMonitoringEnabled: string
  ##                            : Describes whether detailed monitoring is enabled for the Auto Scaling instances.
  ## If <code>true</code>, detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
  ##   AssociatePublicIpAddress: bool
  ##                           : <p>For Auto Scaling groups that are running in a virtual private cloud (VPC), specifies whether to assign a public IP address to the group's instances. If you specify <code>true</code>, each instance in the Auto Scaling group receives a unique public IP address. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html">Launching Auto Scaling Instances in a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify this parameter, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <note> <p>If the instance is launched into a default subnet, the default is to assign a public IP address, unless you disabled the option to assign a public IP address on the subnet. If the instance is launched into a nondefault subnet, the default is not to assign a public IP address, unless you enabled the option to assign a public IP address on the subnet.</p> </note>
  ##   InstanceId: string
  ##             : <p>The ID of the instance to use to create the launch configuration. The new launch configuration derives attributes from the instance, except for the block device mapping.</p> <p>To create a launch configuration with a block device mapping or override any other instance attributes, specify them as part of the same request.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-lc-with-instanceID.html">Create a Launch Configuration Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify both <code>ImageId</code> and <code>InstanceType</code>.</p>
  ##   SecurityGroups: JArray
  ##                 : <p>A list that contains the security groups to assign to the instances in the Auto Scaling group.</p> <p>[EC2-VPC] Specify the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security Groups for Your VPC</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>[EC2-Classic] Specify either the security group names or the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon EC2 Security Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
  ##   ClassicLinkVPCSecurityGroups: JArray
  ##                               : <p>The IDs of one or more security groups for the specified ClassicLink-enabled VPC. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify the <code>ClassicLinkVPCId</code> parameter, you must specify this parameter.</p>
  ##   RamdiskId: string
  ##            : The ID of the RAM disk to select.
  ##   KernelId: string
  ##           : The ID of the kernel associated with the AMI.
  ##   ClassicLinkVPCId: string
  ##                   : <p>The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>This parameter can only be used if you are launching EC2-Classic instances.</p>
  ##   InstanceType: string
  ##               : <p>Specifies the instance type of the EC2 instance.</p> <p>For information about available instance types, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes">Available Instance Types</a> in the <i>Amazon EC2 User Guide for Linux Instances.</i> </p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>InstanceType</code>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   SpotPrice: string
  ##            : <p>The maximum hourly price to be paid for any Spot Instance launched to fulfill the request. Spot Instances are launched when the price you specify exceeds the current Spot price. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-launch-spot-instances.html">Launching Spot Instances in Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <note> <p>When you change your maximum price by creating a new launch configuration, running instances will continue to run as long as the maximum price for those running instances is higher than the current Spot price.</p> </note>
  var query_602311 = newJObject()
  add(query_602311, "KeyName", newJString(KeyName))
  add(query_602311, "PlacementTenancy", newJString(PlacementTenancy))
  add(query_602311, "ImageId", newJString(ImageId))
  add(query_602311, "LaunchConfigurationName", newJString(LaunchConfigurationName))
  add(query_602311, "EbsOptimized", newJBool(EbsOptimized))
  if BlockDeviceMappings != nil:
    query_602311.add "BlockDeviceMappings", BlockDeviceMappings
  add(query_602311, "UserData", newJString(UserData))
  add(query_602311, "IamInstanceProfile", newJString(IamInstanceProfile))
  add(query_602311, "InstanceMonitoring.Enabled",
      newJString(InstanceMonitoringEnabled))
  add(query_602311, "AssociatePublicIpAddress", newJBool(AssociatePublicIpAddress))
  add(query_602311, "InstanceId", newJString(InstanceId))
  if SecurityGroups != nil:
    query_602311.add "SecurityGroups", SecurityGroups
  if ClassicLinkVPCSecurityGroups != nil:
    query_602311.add "ClassicLinkVPCSecurityGroups", ClassicLinkVPCSecurityGroups
  add(query_602311, "RamdiskId", newJString(RamdiskId))
  add(query_602311, "KernelId", newJString(KernelId))
  add(query_602311, "ClassicLinkVPCId", newJString(ClassicLinkVPCId))
  add(query_602311, "InstanceType", newJString(InstanceType))
  add(query_602311, "Action", newJString(Action))
  add(query_602311, "Version", newJString(Version))
  add(query_602311, "SpotPrice", newJString(SpotPrice))
  result = call_602310.call(nil, query_602311, nil, nil, nil)

var getCreateLaunchConfiguration* = Call_GetCreateLaunchConfiguration_602279(
    name: "getCreateLaunchConfiguration", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=CreateLaunchConfiguration",
    validator: validate_GetCreateLaunchConfiguration_602280, base: "/",
    url: url_GetCreateLaunchConfiguration_602281,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateOrUpdateTags_602362 = ref object of OpenApiRestCall_601389
proc url_PostCreateOrUpdateTags_602364(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateOrUpdateTags_602363(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates or updates tags for the specified Auto Scaling group.</p> <p>When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602365 = query.getOrDefault("Action")
  valid_602365 = validateParameter(valid_602365, JString, required = true,
                                 default = newJString("CreateOrUpdateTags"))
  if valid_602365 != nil:
    section.add "Action", valid_602365
  var valid_602366 = query.getOrDefault("Version")
  valid_602366 = validateParameter(valid_602366, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602366 != nil:
    section.add "Version", valid_602366
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602367 = header.getOrDefault("X-Amz-Signature")
  valid_602367 = validateParameter(valid_602367, JString, required = false,
                                 default = nil)
  if valid_602367 != nil:
    section.add "X-Amz-Signature", valid_602367
  var valid_602368 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602368 = validateParameter(valid_602368, JString, required = false,
                                 default = nil)
  if valid_602368 != nil:
    section.add "X-Amz-Content-Sha256", valid_602368
  var valid_602369 = header.getOrDefault("X-Amz-Date")
  valid_602369 = validateParameter(valid_602369, JString, required = false,
                                 default = nil)
  if valid_602369 != nil:
    section.add "X-Amz-Date", valid_602369
  var valid_602370 = header.getOrDefault("X-Amz-Credential")
  valid_602370 = validateParameter(valid_602370, JString, required = false,
                                 default = nil)
  if valid_602370 != nil:
    section.add "X-Amz-Credential", valid_602370
  var valid_602371 = header.getOrDefault("X-Amz-Security-Token")
  valid_602371 = validateParameter(valid_602371, JString, required = false,
                                 default = nil)
  if valid_602371 != nil:
    section.add "X-Amz-Security-Token", valid_602371
  var valid_602372 = header.getOrDefault("X-Amz-Algorithm")
  valid_602372 = validateParameter(valid_602372, JString, required = false,
                                 default = nil)
  if valid_602372 != nil:
    section.add "X-Amz-Algorithm", valid_602372
  var valid_602373 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602373 = validateParameter(valid_602373, JString, required = false,
                                 default = nil)
  if valid_602373 != nil:
    section.add "X-Amz-SignedHeaders", valid_602373
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray (required)
  ##       : One or more tags.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Tags` field"
  var valid_602374 = formData.getOrDefault("Tags")
  valid_602374 = validateParameter(valid_602374, JArray, required = true, default = nil)
  if valid_602374 != nil:
    section.add "Tags", valid_602374
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602375: Call_PostCreateOrUpdateTags_602362; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates or updates tags for the specified Auto Scaling group.</p> <p>When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_602375.validator(path, query, header, formData, body)
  let scheme = call_602375.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602375.url(scheme.get, call_602375.host, call_602375.base,
                         call_602375.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602375, url, valid)

proc call*(call_602376: Call_PostCreateOrUpdateTags_602362; Tags: JsonNode;
          Action: string = "CreateOrUpdateTags"; Version: string = "2011-01-01"): Recallable =
  ## postCreateOrUpdateTags
  ## <p>Creates or updates tags for the specified Auto Scaling group.</p> <p>When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   Tags: JArray (required)
  ##       : One or more tags.
  ##   Version: string (required)
  var query_602377 = newJObject()
  var formData_602378 = newJObject()
  add(query_602377, "Action", newJString(Action))
  if Tags != nil:
    formData_602378.add "Tags", Tags
  add(query_602377, "Version", newJString(Version))
  result = call_602376.call(nil, query_602377, nil, formData_602378, nil)

var postCreateOrUpdateTags* = Call_PostCreateOrUpdateTags_602362(
    name: "postCreateOrUpdateTags", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=CreateOrUpdateTags",
    validator: validate_PostCreateOrUpdateTags_602363, base: "/",
    url: url_PostCreateOrUpdateTags_602364, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateOrUpdateTags_602346 = ref object of OpenApiRestCall_601389
proc url_GetCreateOrUpdateTags_602348(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateOrUpdateTags_602347(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates or updates tags for the specified Auto Scaling group.</p> <p>When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : One or more tags.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_602349 = query.getOrDefault("Tags")
  valid_602349 = validateParameter(valid_602349, JArray, required = true, default = nil)
  if valid_602349 != nil:
    section.add "Tags", valid_602349
  var valid_602350 = query.getOrDefault("Action")
  valid_602350 = validateParameter(valid_602350, JString, required = true,
                                 default = newJString("CreateOrUpdateTags"))
  if valid_602350 != nil:
    section.add "Action", valid_602350
  var valid_602351 = query.getOrDefault("Version")
  valid_602351 = validateParameter(valid_602351, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602351 != nil:
    section.add "Version", valid_602351
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602352 = header.getOrDefault("X-Amz-Signature")
  valid_602352 = validateParameter(valid_602352, JString, required = false,
                                 default = nil)
  if valid_602352 != nil:
    section.add "X-Amz-Signature", valid_602352
  var valid_602353 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602353 = validateParameter(valid_602353, JString, required = false,
                                 default = nil)
  if valid_602353 != nil:
    section.add "X-Amz-Content-Sha256", valid_602353
  var valid_602354 = header.getOrDefault("X-Amz-Date")
  valid_602354 = validateParameter(valid_602354, JString, required = false,
                                 default = nil)
  if valid_602354 != nil:
    section.add "X-Amz-Date", valid_602354
  var valid_602355 = header.getOrDefault("X-Amz-Credential")
  valid_602355 = validateParameter(valid_602355, JString, required = false,
                                 default = nil)
  if valid_602355 != nil:
    section.add "X-Amz-Credential", valid_602355
  var valid_602356 = header.getOrDefault("X-Amz-Security-Token")
  valid_602356 = validateParameter(valid_602356, JString, required = false,
                                 default = nil)
  if valid_602356 != nil:
    section.add "X-Amz-Security-Token", valid_602356
  var valid_602357 = header.getOrDefault("X-Amz-Algorithm")
  valid_602357 = validateParameter(valid_602357, JString, required = false,
                                 default = nil)
  if valid_602357 != nil:
    section.add "X-Amz-Algorithm", valid_602357
  var valid_602358 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602358 = validateParameter(valid_602358, JString, required = false,
                                 default = nil)
  if valid_602358 != nil:
    section.add "X-Amz-SignedHeaders", valid_602358
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602359: Call_GetCreateOrUpdateTags_602346; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates or updates tags for the specified Auto Scaling group.</p> <p>When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_602359.validator(path, query, header, formData, body)
  let scheme = call_602359.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602359.url(scheme.get, call_602359.host, call_602359.base,
                         call_602359.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602359, url, valid)

proc call*(call_602360: Call_GetCreateOrUpdateTags_602346; Tags: JsonNode;
          Action: string = "CreateOrUpdateTags"; Version: string = "2011-01-01"): Recallable =
  ## getCreateOrUpdateTags
  ## <p>Creates or updates tags for the specified Auto Scaling group.</p> <p>When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Tags: JArray (required)
  ##       : One or more tags.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602361 = newJObject()
  if Tags != nil:
    query_602361.add "Tags", Tags
  add(query_602361, "Action", newJString(Action))
  add(query_602361, "Version", newJString(Version))
  result = call_602360.call(nil, query_602361, nil, nil, nil)

var getCreateOrUpdateTags* = Call_GetCreateOrUpdateTags_602346(
    name: "getCreateOrUpdateTags", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=CreateOrUpdateTags",
    validator: validate_GetCreateOrUpdateTags_602347, base: "/",
    url: url_GetCreateOrUpdateTags_602348, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteAutoScalingGroup_602396 = ref object of OpenApiRestCall_601389
proc url_PostDeleteAutoScalingGroup_602398(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteAutoScalingGroup_602397(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified Auto Scaling group.</p> <p>If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed.</p> <p>If the group has policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.</p> <p>To remove instances from the Auto Scaling group before deleting it, call <a>DetachInstances</a> with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.</p> <p>To terminate all instances before deleting the Auto Scaling group, call <a>UpdateAutoScalingGroup</a> and set the minimum size and desired capacity of the Auto Scaling group to zero.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602399 = query.getOrDefault("Action")
  valid_602399 = validateParameter(valid_602399, JString, required = true,
                                 default = newJString("DeleteAutoScalingGroup"))
  if valid_602399 != nil:
    section.add "Action", valid_602399
  var valid_602400 = query.getOrDefault("Version")
  valid_602400 = validateParameter(valid_602400, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602400 != nil:
    section.add "Version", valid_602400
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602401 = header.getOrDefault("X-Amz-Signature")
  valid_602401 = validateParameter(valid_602401, JString, required = false,
                                 default = nil)
  if valid_602401 != nil:
    section.add "X-Amz-Signature", valid_602401
  var valid_602402 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602402 = validateParameter(valid_602402, JString, required = false,
                                 default = nil)
  if valid_602402 != nil:
    section.add "X-Amz-Content-Sha256", valid_602402
  var valid_602403 = header.getOrDefault("X-Amz-Date")
  valid_602403 = validateParameter(valid_602403, JString, required = false,
                                 default = nil)
  if valid_602403 != nil:
    section.add "X-Amz-Date", valid_602403
  var valid_602404 = header.getOrDefault("X-Amz-Credential")
  valid_602404 = validateParameter(valid_602404, JString, required = false,
                                 default = nil)
  if valid_602404 != nil:
    section.add "X-Amz-Credential", valid_602404
  var valid_602405 = header.getOrDefault("X-Amz-Security-Token")
  valid_602405 = validateParameter(valid_602405, JString, required = false,
                                 default = nil)
  if valid_602405 != nil:
    section.add "X-Amz-Security-Token", valid_602405
  var valid_602406 = header.getOrDefault("X-Amz-Algorithm")
  valid_602406 = validateParameter(valid_602406, JString, required = false,
                                 default = nil)
  if valid_602406 != nil:
    section.add "X-Amz-Algorithm", valid_602406
  var valid_602407 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602407 = validateParameter(valid_602407, JString, required = false,
                                 default = nil)
  if valid_602407 != nil:
    section.add "X-Amz-SignedHeaders", valid_602407
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   ForceDelete: JBool
  ##              : Specifies that the group is to be deleted along with all instances associated with the group, without waiting for all instances to be terminated. This parameter also deletes any lifecycle actions associated with the group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_602408 = formData.getOrDefault("AutoScalingGroupName")
  valid_602408 = validateParameter(valid_602408, JString, required = true,
                                 default = nil)
  if valid_602408 != nil:
    section.add "AutoScalingGroupName", valid_602408
  var valid_602409 = formData.getOrDefault("ForceDelete")
  valid_602409 = validateParameter(valid_602409, JBool, required = false, default = nil)
  if valid_602409 != nil:
    section.add "ForceDelete", valid_602409
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602410: Call_PostDeleteAutoScalingGroup_602396; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified Auto Scaling group.</p> <p>If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed.</p> <p>If the group has policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.</p> <p>To remove instances from the Auto Scaling group before deleting it, call <a>DetachInstances</a> with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.</p> <p>To terminate all instances before deleting the Auto Scaling group, call <a>UpdateAutoScalingGroup</a> and set the minimum size and desired capacity of the Auto Scaling group to zero.</p>
  ## 
  let valid = call_602410.validator(path, query, header, formData, body)
  let scheme = call_602410.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602410.url(scheme.get, call_602410.host, call_602410.base,
                         call_602410.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602410, url, valid)

proc call*(call_602411: Call_PostDeleteAutoScalingGroup_602396;
          AutoScalingGroupName: string; ForceDelete: bool = false;
          Action: string = "DeleteAutoScalingGroup"; Version: string = "2011-01-01"): Recallable =
  ## postDeleteAutoScalingGroup
  ## <p>Deletes the specified Auto Scaling group.</p> <p>If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed.</p> <p>If the group has policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.</p> <p>To remove instances from the Auto Scaling group before deleting it, call <a>DetachInstances</a> with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.</p> <p>To terminate all instances before deleting the Auto Scaling group, call <a>UpdateAutoScalingGroup</a> and set the minimum size and desired capacity of the Auto Scaling group to zero.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   ForceDelete: bool
  ##              : Specifies that the group is to be deleted along with all instances associated with the group, without waiting for all instances to be terminated. This parameter also deletes any lifecycle actions associated with the group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602412 = newJObject()
  var formData_602413 = newJObject()
  add(formData_602413, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_602413, "ForceDelete", newJBool(ForceDelete))
  add(query_602412, "Action", newJString(Action))
  add(query_602412, "Version", newJString(Version))
  result = call_602411.call(nil, query_602412, nil, formData_602413, nil)

var postDeleteAutoScalingGroup* = Call_PostDeleteAutoScalingGroup_602396(
    name: "postDeleteAutoScalingGroup", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DeleteAutoScalingGroup",
    validator: validate_PostDeleteAutoScalingGroup_602397, base: "/",
    url: url_PostDeleteAutoScalingGroup_602398,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteAutoScalingGroup_602379 = ref object of OpenApiRestCall_601389
proc url_GetDeleteAutoScalingGroup_602381(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteAutoScalingGroup_602380(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified Auto Scaling group.</p> <p>If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed.</p> <p>If the group has policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.</p> <p>To remove instances from the Auto Scaling group before deleting it, call <a>DetachInstances</a> with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.</p> <p>To terminate all instances before deleting the Auto Scaling group, call <a>UpdateAutoScalingGroup</a> and set the minimum size and desired capacity of the Auto Scaling group to zero.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   ForceDelete: JBool
  ##              : Specifies that the group is to be deleted along with all instances associated with the group, without waiting for all instances to be terminated. This parameter also deletes any lifecycle actions associated with the group.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_602382 = query.getOrDefault("AutoScalingGroupName")
  valid_602382 = validateParameter(valid_602382, JString, required = true,
                                 default = nil)
  if valid_602382 != nil:
    section.add "AutoScalingGroupName", valid_602382
  var valid_602383 = query.getOrDefault("Action")
  valid_602383 = validateParameter(valid_602383, JString, required = true,
                                 default = newJString("DeleteAutoScalingGroup"))
  if valid_602383 != nil:
    section.add "Action", valid_602383
  var valid_602384 = query.getOrDefault("ForceDelete")
  valid_602384 = validateParameter(valid_602384, JBool, required = false, default = nil)
  if valid_602384 != nil:
    section.add "ForceDelete", valid_602384
  var valid_602385 = query.getOrDefault("Version")
  valid_602385 = validateParameter(valid_602385, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602385 != nil:
    section.add "Version", valid_602385
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602386 = header.getOrDefault("X-Amz-Signature")
  valid_602386 = validateParameter(valid_602386, JString, required = false,
                                 default = nil)
  if valid_602386 != nil:
    section.add "X-Amz-Signature", valid_602386
  var valid_602387 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602387 = validateParameter(valid_602387, JString, required = false,
                                 default = nil)
  if valid_602387 != nil:
    section.add "X-Amz-Content-Sha256", valid_602387
  var valid_602388 = header.getOrDefault("X-Amz-Date")
  valid_602388 = validateParameter(valid_602388, JString, required = false,
                                 default = nil)
  if valid_602388 != nil:
    section.add "X-Amz-Date", valid_602388
  var valid_602389 = header.getOrDefault("X-Amz-Credential")
  valid_602389 = validateParameter(valid_602389, JString, required = false,
                                 default = nil)
  if valid_602389 != nil:
    section.add "X-Amz-Credential", valid_602389
  var valid_602390 = header.getOrDefault("X-Amz-Security-Token")
  valid_602390 = validateParameter(valid_602390, JString, required = false,
                                 default = nil)
  if valid_602390 != nil:
    section.add "X-Amz-Security-Token", valid_602390
  var valid_602391 = header.getOrDefault("X-Amz-Algorithm")
  valid_602391 = validateParameter(valid_602391, JString, required = false,
                                 default = nil)
  if valid_602391 != nil:
    section.add "X-Amz-Algorithm", valid_602391
  var valid_602392 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602392 = validateParameter(valid_602392, JString, required = false,
                                 default = nil)
  if valid_602392 != nil:
    section.add "X-Amz-SignedHeaders", valid_602392
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602393: Call_GetDeleteAutoScalingGroup_602379; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified Auto Scaling group.</p> <p>If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed.</p> <p>If the group has policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.</p> <p>To remove instances from the Auto Scaling group before deleting it, call <a>DetachInstances</a> with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.</p> <p>To terminate all instances before deleting the Auto Scaling group, call <a>UpdateAutoScalingGroup</a> and set the minimum size and desired capacity of the Auto Scaling group to zero.</p>
  ## 
  let valid = call_602393.validator(path, query, header, formData, body)
  let scheme = call_602393.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602393.url(scheme.get, call_602393.host, call_602393.base,
                         call_602393.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602393, url, valid)

proc call*(call_602394: Call_GetDeleteAutoScalingGroup_602379;
          AutoScalingGroupName: string; Action: string = "DeleteAutoScalingGroup";
          ForceDelete: bool = false; Version: string = "2011-01-01"): Recallable =
  ## getDeleteAutoScalingGroup
  ## <p>Deletes the specified Auto Scaling group.</p> <p>If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed.</p> <p>If the group has policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.</p> <p>To remove instances from the Auto Scaling group before deleting it, call <a>DetachInstances</a> with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.</p> <p>To terminate all instances before deleting the Auto Scaling group, call <a>UpdateAutoScalingGroup</a> and set the minimum size and desired capacity of the Auto Scaling group to zero.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   ForceDelete: bool
  ##              : Specifies that the group is to be deleted along with all instances associated with the group, without waiting for all instances to be terminated. This parameter also deletes any lifecycle actions associated with the group.
  ##   Version: string (required)
  var query_602395 = newJObject()
  add(query_602395, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_602395, "Action", newJString(Action))
  add(query_602395, "ForceDelete", newJBool(ForceDelete))
  add(query_602395, "Version", newJString(Version))
  result = call_602394.call(nil, query_602395, nil, nil, nil)

var getDeleteAutoScalingGroup* = Call_GetDeleteAutoScalingGroup_602379(
    name: "getDeleteAutoScalingGroup", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DeleteAutoScalingGroup",
    validator: validate_GetDeleteAutoScalingGroup_602380, base: "/",
    url: url_GetDeleteAutoScalingGroup_602381,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteLaunchConfiguration_602430 = ref object of OpenApiRestCall_601389
proc url_PostDeleteLaunchConfiguration_602432(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteLaunchConfiguration_602431(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified launch configuration.</p> <p>The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602433 = query.getOrDefault("Action")
  valid_602433 = validateParameter(valid_602433, JString, required = true, default = newJString(
      "DeleteLaunchConfiguration"))
  if valid_602433 != nil:
    section.add "Action", valid_602433
  var valid_602434 = query.getOrDefault("Version")
  valid_602434 = validateParameter(valid_602434, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602434 != nil:
    section.add "Version", valid_602434
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602435 = header.getOrDefault("X-Amz-Signature")
  valid_602435 = validateParameter(valid_602435, JString, required = false,
                                 default = nil)
  if valid_602435 != nil:
    section.add "X-Amz-Signature", valid_602435
  var valid_602436 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602436 = validateParameter(valid_602436, JString, required = false,
                                 default = nil)
  if valid_602436 != nil:
    section.add "X-Amz-Content-Sha256", valid_602436
  var valid_602437 = header.getOrDefault("X-Amz-Date")
  valid_602437 = validateParameter(valid_602437, JString, required = false,
                                 default = nil)
  if valid_602437 != nil:
    section.add "X-Amz-Date", valid_602437
  var valid_602438 = header.getOrDefault("X-Amz-Credential")
  valid_602438 = validateParameter(valid_602438, JString, required = false,
                                 default = nil)
  if valid_602438 != nil:
    section.add "X-Amz-Credential", valid_602438
  var valid_602439 = header.getOrDefault("X-Amz-Security-Token")
  valid_602439 = validateParameter(valid_602439, JString, required = false,
                                 default = nil)
  if valid_602439 != nil:
    section.add "X-Amz-Security-Token", valid_602439
  var valid_602440 = header.getOrDefault("X-Amz-Algorithm")
  valid_602440 = validateParameter(valid_602440, JString, required = false,
                                 default = nil)
  if valid_602440 != nil:
    section.add "X-Amz-Algorithm", valid_602440
  var valid_602441 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602441 = validateParameter(valid_602441, JString, required = false,
                                 default = nil)
  if valid_602441 != nil:
    section.add "X-Amz-SignedHeaders", valid_602441
  result.add "header", section
  ## parameters in `formData` object:
  ##   LaunchConfigurationName: JString (required)
  ##                          : The name of the launch configuration.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `LaunchConfigurationName` field"
  var valid_602442 = formData.getOrDefault("LaunchConfigurationName")
  valid_602442 = validateParameter(valid_602442, JString, required = true,
                                 default = nil)
  if valid_602442 != nil:
    section.add "LaunchConfigurationName", valid_602442
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602443: Call_PostDeleteLaunchConfiguration_602430; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified launch configuration.</p> <p>The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.</p>
  ## 
  let valid = call_602443.validator(path, query, header, formData, body)
  let scheme = call_602443.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602443.url(scheme.get, call_602443.host, call_602443.base,
                         call_602443.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602443, url, valid)

proc call*(call_602444: Call_PostDeleteLaunchConfiguration_602430;
          LaunchConfigurationName: string;
          Action: string = "DeleteLaunchConfiguration";
          Version: string = "2011-01-01"): Recallable =
  ## postDeleteLaunchConfiguration
  ## <p>Deletes the specified launch configuration.</p> <p>The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.</p>
  ##   Action: string (required)
  ##   LaunchConfigurationName: string (required)
  ##                          : The name of the launch configuration.
  ##   Version: string (required)
  var query_602445 = newJObject()
  var formData_602446 = newJObject()
  add(query_602445, "Action", newJString(Action))
  add(formData_602446, "LaunchConfigurationName",
      newJString(LaunchConfigurationName))
  add(query_602445, "Version", newJString(Version))
  result = call_602444.call(nil, query_602445, nil, formData_602446, nil)

var postDeleteLaunchConfiguration* = Call_PostDeleteLaunchConfiguration_602430(
    name: "postDeleteLaunchConfiguration", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DeleteLaunchConfiguration",
    validator: validate_PostDeleteLaunchConfiguration_602431, base: "/",
    url: url_PostDeleteLaunchConfiguration_602432,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteLaunchConfiguration_602414 = ref object of OpenApiRestCall_601389
proc url_GetDeleteLaunchConfiguration_602416(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteLaunchConfiguration_602415(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified launch configuration.</p> <p>The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   LaunchConfigurationName: JString (required)
  ##                          : The name of the launch configuration.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `LaunchConfigurationName` field"
  var valid_602417 = query.getOrDefault("LaunchConfigurationName")
  valid_602417 = validateParameter(valid_602417, JString, required = true,
                                 default = nil)
  if valid_602417 != nil:
    section.add "LaunchConfigurationName", valid_602417
  var valid_602418 = query.getOrDefault("Action")
  valid_602418 = validateParameter(valid_602418, JString, required = true, default = newJString(
      "DeleteLaunchConfiguration"))
  if valid_602418 != nil:
    section.add "Action", valid_602418
  var valid_602419 = query.getOrDefault("Version")
  valid_602419 = validateParameter(valid_602419, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602419 != nil:
    section.add "Version", valid_602419
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602420 = header.getOrDefault("X-Amz-Signature")
  valid_602420 = validateParameter(valid_602420, JString, required = false,
                                 default = nil)
  if valid_602420 != nil:
    section.add "X-Amz-Signature", valid_602420
  var valid_602421 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602421 = validateParameter(valid_602421, JString, required = false,
                                 default = nil)
  if valid_602421 != nil:
    section.add "X-Amz-Content-Sha256", valid_602421
  var valid_602422 = header.getOrDefault("X-Amz-Date")
  valid_602422 = validateParameter(valid_602422, JString, required = false,
                                 default = nil)
  if valid_602422 != nil:
    section.add "X-Amz-Date", valid_602422
  var valid_602423 = header.getOrDefault("X-Amz-Credential")
  valid_602423 = validateParameter(valid_602423, JString, required = false,
                                 default = nil)
  if valid_602423 != nil:
    section.add "X-Amz-Credential", valid_602423
  var valid_602424 = header.getOrDefault("X-Amz-Security-Token")
  valid_602424 = validateParameter(valid_602424, JString, required = false,
                                 default = nil)
  if valid_602424 != nil:
    section.add "X-Amz-Security-Token", valid_602424
  var valid_602425 = header.getOrDefault("X-Amz-Algorithm")
  valid_602425 = validateParameter(valid_602425, JString, required = false,
                                 default = nil)
  if valid_602425 != nil:
    section.add "X-Amz-Algorithm", valid_602425
  var valid_602426 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602426 = validateParameter(valid_602426, JString, required = false,
                                 default = nil)
  if valid_602426 != nil:
    section.add "X-Amz-SignedHeaders", valid_602426
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602427: Call_GetDeleteLaunchConfiguration_602414; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified launch configuration.</p> <p>The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.</p>
  ## 
  let valid = call_602427.validator(path, query, header, formData, body)
  let scheme = call_602427.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602427.url(scheme.get, call_602427.host, call_602427.base,
                         call_602427.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602427, url, valid)

proc call*(call_602428: Call_GetDeleteLaunchConfiguration_602414;
          LaunchConfigurationName: string;
          Action: string = "DeleteLaunchConfiguration";
          Version: string = "2011-01-01"): Recallable =
  ## getDeleteLaunchConfiguration
  ## <p>Deletes the specified launch configuration.</p> <p>The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.</p>
  ##   LaunchConfigurationName: string (required)
  ##                          : The name of the launch configuration.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602429 = newJObject()
  add(query_602429, "LaunchConfigurationName", newJString(LaunchConfigurationName))
  add(query_602429, "Action", newJString(Action))
  add(query_602429, "Version", newJString(Version))
  result = call_602428.call(nil, query_602429, nil, nil, nil)

var getDeleteLaunchConfiguration* = Call_GetDeleteLaunchConfiguration_602414(
    name: "getDeleteLaunchConfiguration", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DeleteLaunchConfiguration",
    validator: validate_GetDeleteLaunchConfiguration_602415, base: "/",
    url: url_GetDeleteLaunchConfiguration_602416,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteLifecycleHook_602464 = ref object of OpenApiRestCall_601389
proc url_PostDeleteLifecycleHook_602466(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteLifecycleHook_602465(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified lifecycle hook.</p> <p>If there are any outstanding lifecycle actions, they are completed first (<code>ABANDON</code> for launching instances, <code>CONTINUE</code> for terminating instances).</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602467 = query.getOrDefault("Action")
  valid_602467 = validateParameter(valid_602467, JString, required = true,
                                 default = newJString("DeleteLifecycleHook"))
  if valid_602467 != nil:
    section.add "Action", valid_602467
  var valid_602468 = query.getOrDefault("Version")
  valid_602468 = validateParameter(valid_602468, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602468 != nil:
    section.add "Version", valid_602468
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602469 = header.getOrDefault("X-Amz-Signature")
  valid_602469 = validateParameter(valid_602469, JString, required = false,
                                 default = nil)
  if valid_602469 != nil:
    section.add "X-Amz-Signature", valid_602469
  var valid_602470 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602470 = validateParameter(valid_602470, JString, required = false,
                                 default = nil)
  if valid_602470 != nil:
    section.add "X-Amz-Content-Sha256", valid_602470
  var valid_602471 = header.getOrDefault("X-Amz-Date")
  valid_602471 = validateParameter(valid_602471, JString, required = false,
                                 default = nil)
  if valid_602471 != nil:
    section.add "X-Amz-Date", valid_602471
  var valid_602472 = header.getOrDefault("X-Amz-Credential")
  valid_602472 = validateParameter(valid_602472, JString, required = false,
                                 default = nil)
  if valid_602472 != nil:
    section.add "X-Amz-Credential", valid_602472
  var valid_602473 = header.getOrDefault("X-Amz-Security-Token")
  valid_602473 = validateParameter(valid_602473, JString, required = false,
                                 default = nil)
  if valid_602473 != nil:
    section.add "X-Amz-Security-Token", valid_602473
  var valid_602474 = header.getOrDefault("X-Amz-Algorithm")
  valid_602474 = validateParameter(valid_602474, JString, required = false,
                                 default = nil)
  if valid_602474 != nil:
    section.add "X-Amz-Algorithm", valid_602474
  var valid_602475 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602475 = validateParameter(valid_602475, JString, required = false,
                                 default = nil)
  if valid_602475 != nil:
    section.add "X-Amz-SignedHeaders", valid_602475
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_602476 = formData.getOrDefault("AutoScalingGroupName")
  valid_602476 = validateParameter(valid_602476, JString, required = true,
                                 default = nil)
  if valid_602476 != nil:
    section.add "AutoScalingGroupName", valid_602476
  var valid_602477 = formData.getOrDefault("LifecycleHookName")
  valid_602477 = validateParameter(valid_602477, JString, required = true,
                                 default = nil)
  if valid_602477 != nil:
    section.add "LifecycleHookName", valid_602477
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602478: Call_PostDeleteLifecycleHook_602464; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified lifecycle hook.</p> <p>If there are any outstanding lifecycle actions, they are completed first (<code>ABANDON</code> for launching instances, <code>CONTINUE</code> for terminating instances).</p>
  ## 
  let valid = call_602478.validator(path, query, header, formData, body)
  let scheme = call_602478.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602478.url(scheme.get, call_602478.host, call_602478.base,
                         call_602478.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602478, url, valid)

proc call*(call_602479: Call_PostDeleteLifecycleHook_602464;
          AutoScalingGroupName: string; LifecycleHookName: string;
          Action: string = "DeleteLifecycleHook"; Version: string = "2011-01-01"): Recallable =
  ## postDeleteLifecycleHook
  ## <p>Deletes the specified lifecycle hook.</p> <p>If there are any outstanding lifecycle actions, they are completed first (<code>ABANDON</code> for launching instances, <code>CONTINUE</code> for terminating instances).</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602480 = newJObject()
  var formData_602481 = newJObject()
  add(formData_602481, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_602481, "LifecycleHookName", newJString(LifecycleHookName))
  add(query_602480, "Action", newJString(Action))
  add(query_602480, "Version", newJString(Version))
  result = call_602479.call(nil, query_602480, nil, formData_602481, nil)

var postDeleteLifecycleHook* = Call_PostDeleteLifecycleHook_602464(
    name: "postDeleteLifecycleHook", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DeleteLifecycleHook",
    validator: validate_PostDeleteLifecycleHook_602465, base: "/",
    url: url_PostDeleteLifecycleHook_602466, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteLifecycleHook_602447 = ref object of OpenApiRestCall_601389
proc url_GetDeleteLifecycleHook_602449(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteLifecycleHook_602448(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified lifecycle hook.</p> <p>If there are any outstanding lifecycle actions, they are completed first (<code>ABANDON</code> for launching instances, <code>CONTINUE</code> for terminating instances).</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_602450 = query.getOrDefault("AutoScalingGroupName")
  valid_602450 = validateParameter(valid_602450, JString, required = true,
                                 default = nil)
  if valid_602450 != nil:
    section.add "AutoScalingGroupName", valid_602450
  var valid_602451 = query.getOrDefault("LifecycleHookName")
  valid_602451 = validateParameter(valid_602451, JString, required = true,
                                 default = nil)
  if valid_602451 != nil:
    section.add "LifecycleHookName", valid_602451
  var valid_602452 = query.getOrDefault("Action")
  valid_602452 = validateParameter(valid_602452, JString, required = true,
                                 default = newJString("DeleteLifecycleHook"))
  if valid_602452 != nil:
    section.add "Action", valid_602452
  var valid_602453 = query.getOrDefault("Version")
  valid_602453 = validateParameter(valid_602453, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602453 != nil:
    section.add "Version", valid_602453
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602454 = header.getOrDefault("X-Amz-Signature")
  valid_602454 = validateParameter(valid_602454, JString, required = false,
                                 default = nil)
  if valid_602454 != nil:
    section.add "X-Amz-Signature", valid_602454
  var valid_602455 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602455 = validateParameter(valid_602455, JString, required = false,
                                 default = nil)
  if valid_602455 != nil:
    section.add "X-Amz-Content-Sha256", valid_602455
  var valid_602456 = header.getOrDefault("X-Amz-Date")
  valid_602456 = validateParameter(valid_602456, JString, required = false,
                                 default = nil)
  if valid_602456 != nil:
    section.add "X-Amz-Date", valid_602456
  var valid_602457 = header.getOrDefault("X-Amz-Credential")
  valid_602457 = validateParameter(valid_602457, JString, required = false,
                                 default = nil)
  if valid_602457 != nil:
    section.add "X-Amz-Credential", valid_602457
  var valid_602458 = header.getOrDefault("X-Amz-Security-Token")
  valid_602458 = validateParameter(valid_602458, JString, required = false,
                                 default = nil)
  if valid_602458 != nil:
    section.add "X-Amz-Security-Token", valid_602458
  var valid_602459 = header.getOrDefault("X-Amz-Algorithm")
  valid_602459 = validateParameter(valid_602459, JString, required = false,
                                 default = nil)
  if valid_602459 != nil:
    section.add "X-Amz-Algorithm", valid_602459
  var valid_602460 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602460 = validateParameter(valid_602460, JString, required = false,
                                 default = nil)
  if valid_602460 != nil:
    section.add "X-Amz-SignedHeaders", valid_602460
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602461: Call_GetDeleteLifecycleHook_602447; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified lifecycle hook.</p> <p>If there are any outstanding lifecycle actions, they are completed first (<code>ABANDON</code> for launching instances, <code>CONTINUE</code> for terminating instances).</p>
  ## 
  let valid = call_602461.validator(path, query, header, formData, body)
  let scheme = call_602461.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602461.url(scheme.get, call_602461.host, call_602461.base,
                         call_602461.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602461, url, valid)

proc call*(call_602462: Call_GetDeleteLifecycleHook_602447;
          AutoScalingGroupName: string; LifecycleHookName: string;
          Action: string = "DeleteLifecycleHook"; Version: string = "2011-01-01"): Recallable =
  ## getDeleteLifecycleHook
  ## <p>Deletes the specified lifecycle hook.</p> <p>If there are any outstanding lifecycle actions, they are completed first (<code>ABANDON</code> for launching instances, <code>CONTINUE</code> for terminating instances).</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602463 = newJObject()
  add(query_602463, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_602463, "LifecycleHookName", newJString(LifecycleHookName))
  add(query_602463, "Action", newJString(Action))
  add(query_602463, "Version", newJString(Version))
  result = call_602462.call(nil, query_602463, nil, nil, nil)

var getDeleteLifecycleHook* = Call_GetDeleteLifecycleHook_602447(
    name: "getDeleteLifecycleHook", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DeleteLifecycleHook",
    validator: validate_GetDeleteLifecycleHook_602448, base: "/",
    url: url_GetDeleteLifecycleHook_602449, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteNotificationConfiguration_602499 = ref object of OpenApiRestCall_601389
proc url_PostDeleteNotificationConfiguration_602501(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteNotificationConfiguration_602500(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified notification.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602502 = query.getOrDefault("Action")
  valid_602502 = validateParameter(valid_602502, JString, required = true, default = newJString(
      "DeleteNotificationConfiguration"))
  if valid_602502 != nil:
    section.add "Action", valid_602502
  var valid_602503 = query.getOrDefault("Version")
  valid_602503 = validateParameter(valid_602503, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602503 != nil:
    section.add "Version", valid_602503
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602504 = header.getOrDefault("X-Amz-Signature")
  valid_602504 = validateParameter(valid_602504, JString, required = false,
                                 default = nil)
  if valid_602504 != nil:
    section.add "X-Amz-Signature", valid_602504
  var valid_602505 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602505 = validateParameter(valid_602505, JString, required = false,
                                 default = nil)
  if valid_602505 != nil:
    section.add "X-Amz-Content-Sha256", valid_602505
  var valid_602506 = header.getOrDefault("X-Amz-Date")
  valid_602506 = validateParameter(valid_602506, JString, required = false,
                                 default = nil)
  if valid_602506 != nil:
    section.add "X-Amz-Date", valid_602506
  var valid_602507 = header.getOrDefault("X-Amz-Credential")
  valid_602507 = validateParameter(valid_602507, JString, required = false,
                                 default = nil)
  if valid_602507 != nil:
    section.add "X-Amz-Credential", valid_602507
  var valid_602508 = header.getOrDefault("X-Amz-Security-Token")
  valid_602508 = validateParameter(valid_602508, JString, required = false,
                                 default = nil)
  if valid_602508 != nil:
    section.add "X-Amz-Security-Token", valid_602508
  var valid_602509 = header.getOrDefault("X-Amz-Algorithm")
  valid_602509 = validateParameter(valid_602509, JString, required = false,
                                 default = nil)
  if valid_602509 != nil:
    section.add "X-Amz-Algorithm", valid_602509
  var valid_602510 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602510 = validateParameter(valid_602510, JString, required = false,
                                 default = nil)
  if valid_602510 != nil:
    section.add "X-Amz-SignedHeaders", valid_602510
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   TopicARN: JString (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_602511 = formData.getOrDefault("AutoScalingGroupName")
  valid_602511 = validateParameter(valid_602511, JString, required = true,
                                 default = nil)
  if valid_602511 != nil:
    section.add "AutoScalingGroupName", valid_602511
  var valid_602512 = formData.getOrDefault("TopicARN")
  valid_602512 = validateParameter(valid_602512, JString, required = true,
                                 default = nil)
  if valid_602512 != nil:
    section.add "TopicARN", valid_602512
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602513: Call_PostDeleteNotificationConfiguration_602499;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes the specified notification.
  ## 
  let valid = call_602513.validator(path, query, header, formData, body)
  let scheme = call_602513.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602513.url(scheme.get, call_602513.host, call_602513.base,
                         call_602513.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602513, url, valid)

proc call*(call_602514: Call_PostDeleteNotificationConfiguration_602499;
          AutoScalingGroupName: string; TopicARN: string;
          Action: string = "DeleteNotificationConfiguration";
          Version: string = "2011-01-01"): Recallable =
  ## postDeleteNotificationConfiguration
  ## Deletes the specified notification.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   TopicARN: string (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   Version: string (required)
  var query_602515 = newJObject()
  var formData_602516 = newJObject()
  add(formData_602516, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_602515, "Action", newJString(Action))
  add(formData_602516, "TopicARN", newJString(TopicARN))
  add(query_602515, "Version", newJString(Version))
  result = call_602514.call(nil, query_602515, nil, formData_602516, nil)

var postDeleteNotificationConfiguration* = Call_PostDeleteNotificationConfiguration_602499(
    name: "postDeleteNotificationConfiguration", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DeleteNotificationConfiguration",
    validator: validate_PostDeleteNotificationConfiguration_602500, base: "/",
    url: url_PostDeleteNotificationConfiguration_602501,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteNotificationConfiguration_602482 = ref object of OpenApiRestCall_601389
proc url_GetDeleteNotificationConfiguration_602484(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteNotificationConfiguration_602483(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified notification.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   TopicARN: JString (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_602485 = query.getOrDefault("AutoScalingGroupName")
  valid_602485 = validateParameter(valid_602485, JString, required = true,
                                 default = nil)
  if valid_602485 != nil:
    section.add "AutoScalingGroupName", valid_602485
  var valid_602486 = query.getOrDefault("TopicARN")
  valid_602486 = validateParameter(valid_602486, JString, required = true,
                                 default = nil)
  if valid_602486 != nil:
    section.add "TopicARN", valid_602486
  var valid_602487 = query.getOrDefault("Action")
  valid_602487 = validateParameter(valid_602487, JString, required = true, default = newJString(
      "DeleteNotificationConfiguration"))
  if valid_602487 != nil:
    section.add "Action", valid_602487
  var valid_602488 = query.getOrDefault("Version")
  valid_602488 = validateParameter(valid_602488, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602488 != nil:
    section.add "Version", valid_602488
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602489 = header.getOrDefault("X-Amz-Signature")
  valid_602489 = validateParameter(valid_602489, JString, required = false,
                                 default = nil)
  if valid_602489 != nil:
    section.add "X-Amz-Signature", valid_602489
  var valid_602490 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602490 = validateParameter(valid_602490, JString, required = false,
                                 default = nil)
  if valid_602490 != nil:
    section.add "X-Amz-Content-Sha256", valid_602490
  var valid_602491 = header.getOrDefault("X-Amz-Date")
  valid_602491 = validateParameter(valid_602491, JString, required = false,
                                 default = nil)
  if valid_602491 != nil:
    section.add "X-Amz-Date", valid_602491
  var valid_602492 = header.getOrDefault("X-Amz-Credential")
  valid_602492 = validateParameter(valid_602492, JString, required = false,
                                 default = nil)
  if valid_602492 != nil:
    section.add "X-Amz-Credential", valid_602492
  var valid_602493 = header.getOrDefault("X-Amz-Security-Token")
  valid_602493 = validateParameter(valid_602493, JString, required = false,
                                 default = nil)
  if valid_602493 != nil:
    section.add "X-Amz-Security-Token", valid_602493
  var valid_602494 = header.getOrDefault("X-Amz-Algorithm")
  valid_602494 = validateParameter(valid_602494, JString, required = false,
                                 default = nil)
  if valid_602494 != nil:
    section.add "X-Amz-Algorithm", valid_602494
  var valid_602495 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602495 = validateParameter(valid_602495, JString, required = false,
                                 default = nil)
  if valid_602495 != nil:
    section.add "X-Amz-SignedHeaders", valid_602495
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602496: Call_GetDeleteNotificationConfiguration_602482;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes the specified notification.
  ## 
  let valid = call_602496.validator(path, query, header, formData, body)
  let scheme = call_602496.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602496.url(scheme.get, call_602496.host, call_602496.base,
                         call_602496.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602496, url, valid)

proc call*(call_602497: Call_GetDeleteNotificationConfiguration_602482;
          AutoScalingGroupName: string; TopicARN: string;
          Action: string = "DeleteNotificationConfiguration";
          Version: string = "2011-01-01"): Recallable =
  ## getDeleteNotificationConfiguration
  ## Deletes the specified notification.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   TopicARN: string (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602498 = newJObject()
  add(query_602498, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_602498, "TopicARN", newJString(TopicARN))
  add(query_602498, "Action", newJString(Action))
  add(query_602498, "Version", newJString(Version))
  result = call_602497.call(nil, query_602498, nil, nil, nil)

var getDeleteNotificationConfiguration* = Call_GetDeleteNotificationConfiguration_602482(
    name: "getDeleteNotificationConfiguration", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DeleteNotificationConfiguration",
    validator: validate_GetDeleteNotificationConfiguration_602483, base: "/",
    url: url_GetDeleteNotificationConfiguration_602484,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeletePolicy_602534 = ref object of OpenApiRestCall_601389
proc url_PostDeletePolicy_602536(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeletePolicy_602535(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Deletes the specified scaling policy.</p> <p>Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html">Deleting a Scaling Policy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602537 = query.getOrDefault("Action")
  valid_602537 = validateParameter(valid_602537, JString, required = true,
                                 default = newJString("DeletePolicy"))
  if valid_602537 != nil:
    section.add "Action", valid_602537
  var valid_602538 = query.getOrDefault("Version")
  valid_602538 = validateParameter(valid_602538, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602538 != nil:
    section.add "Version", valid_602538
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602539 = header.getOrDefault("X-Amz-Signature")
  valid_602539 = validateParameter(valid_602539, JString, required = false,
                                 default = nil)
  if valid_602539 != nil:
    section.add "X-Amz-Signature", valid_602539
  var valid_602540 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602540 = validateParameter(valid_602540, JString, required = false,
                                 default = nil)
  if valid_602540 != nil:
    section.add "X-Amz-Content-Sha256", valid_602540
  var valid_602541 = header.getOrDefault("X-Amz-Date")
  valid_602541 = validateParameter(valid_602541, JString, required = false,
                                 default = nil)
  if valid_602541 != nil:
    section.add "X-Amz-Date", valid_602541
  var valid_602542 = header.getOrDefault("X-Amz-Credential")
  valid_602542 = validateParameter(valid_602542, JString, required = false,
                                 default = nil)
  if valid_602542 != nil:
    section.add "X-Amz-Credential", valid_602542
  var valid_602543 = header.getOrDefault("X-Amz-Security-Token")
  valid_602543 = validateParameter(valid_602543, JString, required = false,
                                 default = nil)
  if valid_602543 != nil:
    section.add "X-Amz-Security-Token", valid_602543
  var valid_602544 = header.getOrDefault("X-Amz-Algorithm")
  valid_602544 = validateParameter(valid_602544, JString, required = false,
                                 default = nil)
  if valid_602544 != nil:
    section.add "X-Amz-Algorithm", valid_602544
  var valid_602545 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602545 = validateParameter(valid_602545, JString, required = false,
                                 default = nil)
  if valid_602545 != nil:
    section.add "X-Amz-SignedHeaders", valid_602545
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   PolicyName: JString (required)
  ##             : The name or Amazon Resource Name (ARN) of the policy.
  section = newJObject()
  var valid_602546 = formData.getOrDefault("AutoScalingGroupName")
  valid_602546 = validateParameter(valid_602546, JString, required = false,
                                 default = nil)
  if valid_602546 != nil:
    section.add "AutoScalingGroupName", valid_602546
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_602547 = formData.getOrDefault("PolicyName")
  valid_602547 = validateParameter(valid_602547, JString, required = true,
                                 default = nil)
  if valid_602547 != nil:
    section.add "PolicyName", valid_602547
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602548: Call_PostDeletePolicy_602534; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified scaling policy.</p> <p>Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html">Deleting a Scaling Policy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_602548.validator(path, query, header, formData, body)
  let scheme = call_602548.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602548.url(scheme.get, call_602548.host, call_602548.base,
                         call_602548.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602548, url, valid)

proc call*(call_602549: Call_PostDeletePolicy_602534; PolicyName: string;
          AutoScalingGroupName: string = ""; Action: string = "DeletePolicy";
          Version: string = "2011-01-01"): Recallable =
  ## postDeletePolicy
  ## <p>Deletes the specified scaling policy.</p> <p>Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html">Deleting a Scaling Policy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : The name or Amazon Resource Name (ARN) of the policy.
  var query_602550 = newJObject()
  var formData_602551 = newJObject()
  add(formData_602551, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_602550, "Action", newJString(Action))
  add(query_602550, "Version", newJString(Version))
  add(formData_602551, "PolicyName", newJString(PolicyName))
  result = call_602549.call(nil, query_602550, nil, formData_602551, nil)

var postDeletePolicy* = Call_PostDeletePolicy_602534(name: "postDeletePolicy",
    meth: HttpMethod.HttpPost, host: "autoscaling.amazonaws.com",
    route: "/#Action=DeletePolicy", validator: validate_PostDeletePolicy_602535,
    base: "/", url: url_PostDeletePolicy_602536,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeletePolicy_602517 = ref object of OpenApiRestCall_601389
proc url_GetDeletePolicy_602519(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeletePolicy_602518(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Deletes the specified scaling policy.</p> <p>Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html">Deleting a Scaling Policy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyName: JString (required)
  ##             : The name or Amazon Resource Name (ARN) of the policy.
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyName` field"
  var valid_602520 = query.getOrDefault("PolicyName")
  valid_602520 = validateParameter(valid_602520, JString, required = true,
                                 default = nil)
  if valid_602520 != nil:
    section.add "PolicyName", valid_602520
  var valid_602521 = query.getOrDefault("AutoScalingGroupName")
  valid_602521 = validateParameter(valid_602521, JString, required = false,
                                 default = nil)
  if valid_602521 != nil:
    section.add "AutoScalingGroupName", valid_602521
  var valid_602522 = query.getOrDefault("Action")
  valid_602522 = validateParameter(valid_602522, JString, required = true,
                                 default = newJString("DeletePolicy"))
  if valid_602522 != nil:
    section.add "Action", valid_602522
  var valid_602523 = query.getOrDefault("Version")
  valid_602523 = validateParameter(valid_602523, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602523 != nil:
    section.add "Version", valid_602523
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602524 = header.getOrDefault("X-Amz-Signature")
  valid_602524 = validateParameter(valid_602524, JString, required = false,
                                 default = nil)
  if valid_602524 != nil:
    section.add "X-Amz-Signature", valid_602524
  var valid_602525 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602525 = validateParameter(valid_602525, JString, required = false,
                                 default = nil)
  if valid_602525 != nil:
    section.add "X-Amz-Content-Sha256", valid_602525
  var valid_602526 = header.getOrDefault("X-Amz-Date")
  valid_602526 = validateParameter(valid_602526, JString, required = false,
                                 default = nil)
  if valid_602526 != nil:
    section.add "X-Amz-Date", valid_602526
  var valid_602527 = header.getOrDefault("X-Amz-Credential")
  valid_602527 = validateParameter(valid_602527, JString, required = false,
                                 default = nil)
  if valid_602527 != nil:
    section.add "X-Amz-Credential", valid_602527
  var valid_602528 = header.getOrDefault("X-Amz-Security-Token")
  valid_602528 = validateParameter(valid_602528, JString, required = false,
                                 default = nil)
  if valid_602528 != nil:
    section.add "X-Amz-Security-Token", valid_602528
  var valid_602529 = header.getOrDefault("X-Amz-Algorithm")
  valid_602529 = validateParameter(valid_602529, JString, required = false,
                                 default = nil)
  if valid_602529 != nil:
    section.add "X-Amz-Algorithm", valid_602529
  var valid_602530 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602530 = validateParameter(valid_602530, JString, required = false,
                                 default = nil)
  if valid_602530 != nil:
    section.add "X-Amz-SignedHeaders", valid_602530
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602531: Call_GetDeletePolicy_602517; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified scaling policy.</p> <p>Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html">Deleting a Scaling Policy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_602531.validator(path, query, header, formData, body)
  let scheme = call_602531.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602531.url(scheme.get, call_602531.host, call_602531.base,
                         call_602531.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602531, url, valid)

proc call*(call_602532: Call_GetDeletePolicy_602517; PolicyName: string;
          AutoScalingGroupName: string = ""; Action: string = "DeletePolicy";
          Version: string = "2011-01-01"): Recallable =
  ## getDeletePolicy
  ## <p>Deletes the specified scaling policy.</p> <p>Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html">Deleting a Scaling Policy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   PolicyName: string (required)
  ##             : The name or Amazon Resource Name (ARN) of the policy.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602533 = newJObject()
  add(query_602533, "PolicyName", newJString(PolicyName))
  add(query_602533, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_602533, "Action", newJString(Action))
  add(query_602533, "Version", newJString(Version))
  result = call_602532.call(nil, query_602533, nil, nil, nil)

var getDeletePolicy* = Call_GetDeletePolicy_602517(name: "getDeletePolicy",
    meth: HttpMethod.HttpGet, host: "autoscaling.amazonaws.com",
    route: "/#Action=DeletePolicy", validator: validate_GetDeletePolicy_602518,
    base: "/", url: url_GetDeletePolicy_602519, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteScheduledAction_602569 = ref object of OpenApiRestCall_601389
proc url_PostDeleteScheduledAction_602571(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteScheduledAction_602570(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified scheduled action.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602572 = query.getOrDefault("Action")
  valid_602572 = validateParameter(valid_602572, JString, required = true,
                                 default = newJString("DeleteScheduledAction"))
  if valid_602572 != nil:
    section.add "Action", valid_602572
  var valid_602573 = query.getOrDefault("Version")
  valid_602573 = validateParameter(valid_602573, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602573 != nil:
    section.add "Version", valid_602573
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602574 = header.getOrDefault("X-Amz-Signature")
  valid_602574 = validateParameter(valid_602574, JString, required = false,
                                 default = nil)
  if valid_602574 != nil:
    section.add "X-Amz-Signature", valid_602574
  var valid_602575 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602575 = validateParameter(valid_602575, JString, required = false,
                                 default = nil)
  if valid_602575 != nil:
    section.add "X-Amz-Content-Sha256", valid_602575
  var valid_602576 = header.getOrDefault("X-Amz-Date")
  valid_602576 = validateParameter(valid_602576, JString, required = false,
                                 default = nil)
  if valid_602576 != nil:
    section.add "X-Amz-Date", valid_602576
  var valid_602577 = header.getOrDefault("X-Amz-Credential")
  valid_602577 = validateParameter(valid_602577, JString, required = false,
                                 default = nil)
  if valid_602577 != nil:
    section.add "X-Amz-Credential", valid_602577
  var valid_602578 = header.getOrDefault("X-Amz-Security-Token")
  valid_602578 = validateParameter(valid_602578, JString, required = false,
                                 default = nil)
  if valid_602578 != nil:
    section.add "X-Amz-Security-Token", valid_602578
  var valid_602579 = header.getOrDefault("X-Amz-Algorithm")
  valid_602579 = validateParameter(valid_602579, JString, required = false,
                                 default = nil)
  if valid_602579 != nil:
    section.add "X-Amz-Algorithm", valid_602579
  var valid_602580 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602580 = validateParameter(valid_602580, JString, required = false,
                                 default = nil)
  if valid_602580 != nil:
    section.add "X-Amz-SignedHeaders", valid_602580
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScheduledActionName: JString (required)
  ##                      : The name of the action to delete.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_602581 = formData.getOrDefault("AutoScalingGroupName")
  valid_602581 = validateParameter(valid_602581, JString, required = true,
                                 default = nil)
  if valid_602581 != nil:
    section.add "AutoScalingGroupName", valid_602581
  var valid_602582 = formData.getOrDefault("ScheduledActionName")
  valid_602582 = validateParameter(valid_602582, JString, required = true,
                                 default = nil)
  if valid_602582 != nil:
    section.add "ScheduledActionName", valid_602582
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602583: Call_PostDeleteScheduledAction_602569; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified scheduled action.
  ## 
  let valid = call_602583.validator(path, query, header, formData, body)
  let scheme = call_602583.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602583.url(scheme.get, call_602583.host, call_602583.base,
                         call_602583.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602583, url, valid)

proc call*(call_602584: Call_PostDeleteScheduledAction_602569;
          AutoScalingGroupName: string; ScheduledActionName: string;
          Action: string = "DeleteScheduledAction"; Version: string = "2011-01-01"): Recallable =
  ## postDeleteScheduledAction
  ## Deletes the specified scheduled action.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScheduledActionName: string (required)
  ##                      : The name of the action to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602585 = newJObject()
  var formData_602586 = newJObject()
  add(formData_602586, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_602586, "ScheduledActionName", newJString(ScheduledActionName))
  add(query_602585, "Action", newJString(Action))
  add(query_602585, "Version", newJString(Version))
  result = call_602584.call(nil, query_602585, nil, formData_602586, nil)

var postDeleteScheduledAction* = Call_PostDeleteScheduledAction_602569(
    name: "postDeleteScheduledAction", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DeleteScheduledAction",
    validator: validate_PostDeleteScheduledAction_602570, base: "/",
    url: url_PostDeleteScheduledAction_602571,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteScheduledAction_602552 = ref object of OpenApiRestCall_601389
proc url_GetDeleteScheduledAction_602554(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteScheduledAction_602553(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified scheduled action.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ScheduledActionName: JString (required)
  ##                      : The name of the action to delete.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ScheduledActionName` field"
  var valid_602555 = query.getOrDefault("ScheduledActionName")
  valid_602555 = validateParameter(valid_602555, JString, required = true,
                                 default = nil)
  if valid_602555 != nil:
    section.add "ScheduledActionName", valid_602555
  var valid_602556 = query.getOrDefault("AutoScalingGroupName")
  valid_602556 = validateParameter(valid_602556, JString, required = true,
                                 default = nil)
  if valid_602556 != nil:
    section.add "AutoScalingGroupName", valid_602556
  var valid_602557 = query.getOrDefault("Action")
  valid_602557 = validateParameter(valid_602557, JString, required = true,
                                 default = newJString("DeleteScheduledAction"))
  if valid_602557 != nil:
    section.add "Action", valid_602557
  var valid_602558 = query.getOrDefault("Version")
  valid_602558 = validateParameter(valid_602558, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602558 != nil:
    section.add "Version", valid_602558
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602559 = header.getOrDefault("X-Amz-Signature")
  valid_602559 = validateParameter(valid_602559, JString, required = false,
                                 default = nil)
  if valid_602559 != nil:
    section.add "X-Amz-Signature", valid_602559
  var valid_602560 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602560 = validateParameter(valid_602560, JString, required = false,
                                 default = nil)
  if valid_602560 != nil:
    section.add "X-Amz-Content-Sha256", valid_602560
  var valid_602561 = header.getOrDefault("X-Amz-Date")
  valid_602561 = validateParameter(valid_602561, JString, required = false,
                                 default = nil)
  if valid_602561 != nil:
    section.add "X-Amz-Date", valid_602561
  var valid_602562 = header.getOrDefault("X-Amz-Credential")
  valid_602562 = validateParameter(valid_602562, JString, required = false,
                                 default = nil)
  if valid_602562 != nil:
    section.add "X-Amz-Credential", valid_602562
  var valid_602563 = header.getOrDefault("X-Amz-Security-Token")
  valid_602563 = validateParameter(valid_602563, JString, required = false,
                                 default = nil)
  if valid_602563 != nil:
    section.add "X-Amz-Security-Token", valid_602563
  var valid_602564 = header.getOrDefault("X-Amz-Algorithm")
  valid_602564 = validateParameter(valid_602564, JString, required = false,
                                 default = nil)
  if valid_602564 != nil:
    section.add "X-Amz-Algorithm", valid_602564
  var valid_602565 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602565 = validateParameter(valid_602565, JString, required = false,
                                 default = nil)
  if valid_602565 != nil:
    section.add "X-Amz-SignedHeaders", valid_602565
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602566: Call_GetDeleteScheduledAction_602552; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified scheduled action.
  ## 
  let valid = call_602566.validator(path, query, header, formData, body)
  let scheme = call_602566.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602566.url(scheme.get, call_602566.host, call_602566.base,
                         call_602566.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602566, url, valid)

proc call*(call_602567: Call_GetDeleteScheduledAction_602552;
          ScheduledActionName: string; AutoScalingGroupName: string;
          Action: string = "DeleteScheduledAction"; Version: string = "2011-01-01"): Recallable =
  ## getDeleteScheduledAction
  ## Deletes the specified scheduled action.
  ##   ScheduledActionName: string (required)
  ##                      : The name of the action to delete.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602568 = newJObject()
  add(query_602568, "ScheduledActionName", newJString(ScheduledActionName))
  add(query_602568, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_602568, "Action", newJString(Action))
  add(query_602568, "Version", newJString(Version))
  result = call_602567.call(nil, query_602568, nil, nil, nil)

var getDeleteScheduledAction* = Call_GetDeleteScheduledAction_602552(
    name: "getDeleteScheduledAction", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DeleteScheduledAction",
    validator: validate_GetDeleteScheduledAction_602553, base: "/",
    url: url_GetDeleteScheduledAction_602554, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteTags_602603 = ref object of OpenApiRestCall_601389
proc url_PostDeleteTags_602605(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteTags_602604(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Deletes the specified tags.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602606 = query.getOrDefault("Action")
  valid_602606 = validateParameter(valid_602606, JString, required = true,
                                 default = newJString("DeleteTags"))
  if valid_602606 != nil:
    section.add "Action", valid_602606
  var valid_602607 = query.getOrDefault("Version")
  valid_602607 = validateParameter(valid_602607, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602607 != nil:
    section.add "Version", valid_602607
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602608 = header.getOrDefault("X-Amz-Signature")
  valid_602608 = validateParameter(valid_602608, JString, required = false,
                                 default = nil)
  if valid_602608 != nil:
    section.add "X-Amz-Signature", valid_602608
  var valid_602609 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602609 = validateParameter(valid_602609, JString, required = false,
                                 default = nil)
  if valid_602609 != nil:
    section.add "X-Amz-Content-Sha256", valid_602609
  var valid_602610 = header.getOrDefault("X-Amz-Date")
  valid_602610 = validateParameter(valid_602610, JString, required = false,
                                 default = nil)
  if valid_602610 != nil:
    section.add "X-Amz-Date", valid_602610
  var valid_602611 = header.getOrDefault("X-Amz-Credential")
  valid_602611 = validateParameter(valid_602611, JString, required = false,
                                 default = nil)
  if valid_602611 != nil:
    section.add "X-Amz-Credential", valid_602611
  var valid_602612 = header.getOrDefault("X-Amz-Security-Token")
  valid_602612 = validateParameter(valid_602612, JString, required = false,
                                 default = nil)
  if valid_602612 != nil:
    section.add "X-Amz-Security-Token", valid_602612
  var valid_602613 = header.getOrDefault("X-Amz-Algorithm")
  valid_602613 = validateParameter(valid_602613, JString, required = false,
                                 default = nil)
  if valid_602613 != nil:
    section.add "X-Amz-Algorithm", valid_602613
  var valid_602614 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602614 = validateParameter(valid_602614, JString, required = false,
                                 default = nil)
  if valid_602614 != nil:
    section.add "X-Amz-SignedHeaders", valid_602614
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray (required)
  ##       : One or more tags.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Tags` field"
  var valid_602615 = formData.getOrDefault("Tags")
  valid_602615 = validateParameter(valid_602615, JArray, required = true, default = nil)
  if valid_602615 != nil:
    section.add "Tags", valid_602615
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602616: Call_PostDeleteTags_602603; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified tags.
  ## 
  let valid = call_602616.validator(path, query, header, formData, body)
  let scheme = call_602616.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602616.url(scheme.get, call_602616.host, call_602616.base,
                         call_602616.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602616, url, valid)

proc call*(call_602617: Call_PostDeleteTags_602603; Tags: JsonNode;
          Action: string = "DeleteTags"; Version: string = "2011-01-01"): Recallable =
  ## postDeleteTags
  ## Deletes the specified tags.
  ##   Action: string (required)
  ##   Tags: JArray (required)
  ##       : One or more tags.
  ##   Version: string (required)
  var query_602618 = newJObject()
  var formData_602619 = newJObject()
  add(query_602618, "Action", newJString(Action))
  if Tags != nil:
    formData_602619.add "Tags", Tags
  add(query_602618, "Version", newJString(Version))
  result = call_602617.call(nil, query_602618, nil, formData_602619, nil)

var postDeleteTags* = Call_PostDeleteTags_602603(name: "postDeleteTags",
    meth: HttpMethod.HttpPost, host: "autoscaling.amazonaws.com",
    route: "/#Action=DeleteTags", validator: validate_PostDeleteTags_602604,
    base: "/", url: url_PostDeleteTags_602605, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteTags_602587 = ref object of OpenApiRestCall_601389
proc url_GetDeleteTags_602589(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteTags_602588(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified tags.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : One or more tags.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_602590 = query.getOrDefault("Tags")
  valid_602590 = validateParameter(valid_602590, JArray, required = true, default = nil)
  if valid_602590 != nil:
    section.add "Tags", valid_602590
  var valid_602591 = query.getOrDefault("Action")
  valid_602591 = validateParameter(valid_602591, JString, required = true,
                                 default = newJString("DeleteTags"))
  if valid_602591 != nil:
    section.add "Action", valid_602591
  var valid_602592 = query.getOrDefault("Version")
  valid_602592 = validateParameter(valid_602592, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602592 != nil:
    section.add "Version", valid_602592
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602593 = header.getOrDefault("X-Amz-Signature")
  valid_602593 = validateParameter(valid_602593, JString, required = false,
                                 default = nil)
  if valid_602593 != nil:
    section.add "X-Amz-Signature", valid_602593
  var valid_602594 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602594 = validateParameter(valid_602594, JString, required = false,
                                 default = nil)
  if valid_602594 != nil:
    section.add "X-Amz-Content-Sha256", valid_602594
  var valid_602595 = header.getOrDefault("X-Amz-Date")
  valid_602595 = validateParameter(valid_602595, JString, required = false,
                                 default = nil)
  if valid_602595 != nil:
    section.add "X-Amz-Date", valid_602595
  var valid_602596 = header.getOrDefault("X-Amz-Credential")
  valid_602596 = validateParameter(valid_602596, JString, required = false,
                                 default = nil)
  if valid_602596 != nil:
    section.add "X-Amz-Credential", valid_602596
  var valid_602597 = header.getOrDefault("X-Amz-Security-Token")
  valid_602597 = validateParameter(valid_602597, JString, required = false,
                                 default = nil)
  if valid_602597 != nil:
    section.add "X-Amz-Security-Token", valid_602597
  var valid_602598 = header.getOrDefault("X-Amz-Algorithm")
  valid_602598 = validateParameter(valid_602598, JString, required = false,
                                 default = nil)
  if valid_602598 != nil:
    section.add "X-Amz-Algorithm", valid_602598
  var valid_602599 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602599 = validateParameter(valid_602599, JString, required = false,
                                 default = nil)
  if valid_602599 != nil:
    section.add "X-Amz-SignedHeaders", valid_602599
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602600: Call_GetDeleteTags_602587; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified tags.
  ## 
  let valid = call_602600.validator(path, query, header, formData, body)
  let scheme = call_602600.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602600.url(scheme.get, call_602600.host, call_602600.base,
                         call_602600.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602600, url, valid)

proc call*(call_602601: Call_GetDeleteTags_602587; Tags: JsonNode;
          Action: string = "DeleteTags"; Version: string = "2011-01-01"): Recallable =
  ## getDeleteTags
  ## Deletes the specified tags.
  ##   Tags: JArray (required)
  ##       : One or more tags.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602602 = newJObject()
  if Tags != nil:
    query_602602.add "Tags", Tags
  add(query_602602, "Action", newJString(Action))
  add(query_602602, "Version", newJString(Version))
  result = call_602601.call(nil, query_602602, nil, nil, nil)

var getDeleteTags* = Call_GetDeleteTags_602587(name: "getDeleteTags",
    meth: HttpMethod.HttpGet, host: "autoscaling.amazonaws.com",
    route: "/#Action=DeleteTags", validator: validate_GetDeleteTags_602588,
    base: "/", url: url_GetDeleteTags_602589, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeAccountLimits_602635 = ref object of OpenApiRestCall_601389
proc url_PostDescribeAccountLimits_602637(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeAccountLimits_602636(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the current Amazon EC2 Auto Scaling resource limits for your AWS account.</p> <p>For information about requesting an increase in these limits, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602638 = query.getOrDefault("Action")
  valid_602638 = validateParameter(valid_602638, JString, required = true,
                                 default = newJString("DescribeAccountLimits"))
  if valid_602638 != nil:
    section.add "Action", valid_602638
  var valid_602639 = query.getOrDefault("Version")
  valid_602639 = validateParameter(valid_602639, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602639 != nil:
    section.add "Version", valid_602639
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602640 = header.getOrDefault("X-Amz-Signature")
  valid_602640 = validateParameter(valid_602640, JString, required = false,
                                 default = nil)
  if valid_602640 != nil:
    section.add "X-Amz-Signature", valid_602640
  var valid_602641 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602641 = validateParameter(valid_602641, JString, required = false,
                                 default = nil)
  if valid_602641 != nil:
    section.add "X-Amz-Content-Sha256", valid_602641
  var valid_602642 = header.getOrDefault("X-Amz-Date")
  valid_602642 = validateParameter(valid_602642, JString, required = false,
                                 default = nil)
  if valid_602642 != nil:
    section.add "X-Amz-Date", valid_602642
  var valid_602643 = header.getOrDefault("X-Amz-Credential")
  valid_602643 = validateParameter(valid_602643, JString, required = false,
                                 default = nil)
  if valid_602643 != nil:
    section.add "X-Amz-Credential", valid_602643
  var valid_602644 = header.getOrDefault("X-Amz-Security-Token")
  valid_602644 = validateParameter(valid_602644, JString, required = false,
                                 default = nil)
  if valid_602644 != nil:
    section.add "X-Amz-Security-Token", valid_602644
  var valid_602645 = header.getOrDefault("X-Amz-Algorithm")
  valid_602645 = validateParameter(valid_602645, JString, required = false,
                                 default = nil)
  if valid_602645 != nil:
    section.add "X-Amz-Algorithm", valid_602645
  var valid_602646 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602646 = validateParameter(valid_602646, JString, required = false,
                                 default = nil)
  if valid_602646 != nil:
    section.add "X-Amz-SignedHeaders", valid_602646
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602647: Call_PostDescribeAccountLimits_602635; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the current Amazon EC2 Auto Scaling resource limits for your AWS account.</p> <p>For information about requesting an increase in these limits, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_602647.validator(path, query, header, formData, body)
  let scheme = call_602647.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602647.url(scheme.get, call_602647.host, call_602647.base,
                         call_602647.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602647, url, valid)

proc call*(call_602648: Call_PostDescribeAccountLimits_602635;
          Action: string = "DescribeAccountLimits"; Version: string = "2011-01-01"): Recallable =
  ## postDescribeAccountLimits
  ## <p>Describes the current Amazon EC2 Auto Scaling resource limits for your AWS account.</p> <p>For information about requesting an increase in these limits, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602649 = newJObject()
  add(query_602649, "Action", newJString(Action))
  add(query_602649, "Version", newJString(Version))
  result = call_602648.call(nil, query_602649, nil, nil, nil)

var postDescribeAccountLimits* = Call_PostDescribeAccountLimits_602635(
    name: "postDescribeAccountLimits", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeAccountLimits",
    validator: validate_PostDescribeAccountLimits_602636, base: "/",
    url: url_PostDescribeAccountLimits_602637,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeAccountLimits_602620 = ref object of OpenApiRestCall_601389
proc url_GetDescribeAccountLimits_602622(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeAccountLimits_602621(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the current Amazon EC2 Auto Scaling resource limits for your AWS account.</p> <p>For information about requesting an increase in these limits, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602623 = query.getOrDefault("Action")
  valid_602623 = validateParameter(valid_602623, JString, required = true,
                                 default = newJString("DescribeAccountLimits"))
  if valid_602623 != nil:
    section.add "Action", valid_602623
  var valid_602624 = query.getOrDefault("Version")
  valid_602624 = validateParameter(valid_602624, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602624 != nil:
    section.add "Version", valid_602624
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602625 = header.getOrDefault("X-Amz-Signature")
  valid_602625 = validateParameter(valid_602625, JString, required = false,
                                 default = nil)
  if valid_602625 != nil:
    section.add "X-Amz-Signature", valid_602625
  var valid_602626 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602626 = validateParameter(valid_602626, JString, required = false,
                                 default = nil)
  if valid_602626 != nil:
    section.add "X-Amz-Content-Sha256", valid_602626
  var valid_602627 = header.getOrDefault("X-Amz-Date")
  valid_602627 = validateParameter(valid_602627, JString, required = false,
                                 default = nil)
  if valid_602627 != nil:
    section.add "X-Amz-Date", valid_602627
  var valid_602628 = header.getOrDefault("X-Amz-Credential")
  valid_602628 = validateParameter(valid_602628, JString, required = false,
                                 default = nil)
  if valid_602628 != nil:
    section.add "X-Amz-Credential", valid_602628
  var valid_602629 = header.getOrDefault("X-Amz-Security-Token")
  valid_602629 = validateParameter(valid_602629, JString, required = false,
                                 default = nil)
  if valid_602629 != nil:
    section.add "X-Amz-Security-Token", valid_602629
  var valid_602630 = header.getOrDefault("X-Amz-Algorithm")
  valid_602630 = validateParameter(valid_602630, JString, required = false,
                                 default = nil)
  if valid_602630 != nil:
    section.add "X-Amz-Algorithm", valid_602630
  var valid_602631 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602631 = validateParameter(valid_602631, JString, required = false,
                                 default = nil)
  if valid_602631 != nil:
    section.add "X-Amz-SignedHeaders", valid_602631
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602632: Call_GetDescribeAccountLimits_602620; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the current Amazon EC2 Auto Scaling resource limits for your AWS account.</p> <p>For information about requesting an increase in these limits, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_602632.validator(path, query, header, formData, body)
  let scheme = call_602632.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602632.url(scheme.get, call_602632.host, call_602632.base,
                         call_602632.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602632, url, valid)

proc call*(call_602633: Call_GetDescribeAccountLimits_602620;
          Action: string = "DescribeAccountLimits"; Version: string = "2011-01-01"): Recallable =
  ## getDescribeAccountLimits
  ## <p>Describes the current Amazon EC2 Auto Scaling resource limits for your AWS account.</p> <p>For information about requesting an increase in these limits, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602634 = newJObject()
  add(query_602634, "Action", newJString(Action))
  add(query_602634, "Version", newJString(Version))
  result = call_602633.call(nil, query_602634, nil, nil, nil)

var getDescribeAccountLimits* = Call_GetDescribeAccountLimits_602620(
    name: "getDescribeAccountLimits", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeAccountLimits",
    validator: validate_GetDescribeAccountLimits_602621, base: "/",
    url: url_GetDescribeAccountLimits_602622, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeAdjustmentTypes_602665 = ref object of OpenApiRestCall_601389
proc url_PostDescribeAdjustmentTypes_602667(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeAdjustmentTypes_602666(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the policy adjustment types for use with <a>PutScalingPolicy</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602668 = query.getOrDefault("Action")
  valid_602668 = validateParameter(valid_602668, JString, required = true, default = newJString(
      "DescribeAdjustmentTypes"))
  if valid_602668 != nil:
    section.add "Action", valid_602668
  var valid_602669 = query.getOrDefault("Version")
  valid_602669 = validateParameter(valid_602669, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602669 != nil:
    section.add "Version", valid_602669
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602670 = header.getOrDefault("X-Amz-Signature")
  valid_602670 = validateParameter(valid_602670, JString, required = false,
                                 default = nil)
  if valid_602670 != nil:
    section.add "X-Amz-Signature", valid_602670
  var valid_602671 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602671 = validateParameter(valid_602671, JString, required = false,
                                 default = nil)
  if valid_602671 != nil:
    section.add "X-Amz-Content-Sha256", valid_602671
  var valid_602672 = header.getOrDefault("X-Amz-Date")
  valid_602672 = validateParameter(valid_602672, JString, required = false,
                                 default = nil)
  if valid_602672 != nil:
    section.add "X-Amz-Date", valid_602672
  var valid_602673 = header.getOrDefault("X-Amz-Credential")
  valid_602673 = validateParameter(valid_602673, JString, required = false,
                                 default = nil)
  if valid_602673 != nil:
    section.add "X-Amz-Credential", valid_602673
  var valid_602674 = header.getOrDefault("X-Amz-Security-Token")
  valid_602674 = validateParameter(valid_602674, JString, required = false,
                                 default = nil)
  if valid_602674 != nil:
    section.add "X-Amz-Security-Token", valid_602674
  var valid_602675 = header.getOrDefault("X-Amz-Algorithm")
  valid_602675 = validateParameter(valid_602675, JString, required = false,
                                 default = nil)
  if valid_602675 != nil:
    section.add "X-Amz-Algorithm", valid_602675
  var valid_602676 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602676 = validateParameter(valid_602676, JString, required = false,
                                 default = nil)
  if valid_602676 != nil:
    section.add "X-Amz-SignedHeaders", valid_602676
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602677: Call_PostDescribeAdjustmentTypes_602665; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the policy adjustment types for use with <a>PutScalingPolicy</a>.
  ## 
  let valid = call_602677.validator(path, query, header, formData, body)
  let scheme = call_602677.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602677.url(scheme.get, call_602677.host, call_602677.base,
                         call_602677.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602677, url, valid)

proc call*(call_602678: Call_PostDescribeAdjustmentTypes_602665;
          Action: string = "DescribeAdjustmentTypes"; Version: string = "2011-01-01"): Recallable =
  ## postDescribeAdjustmentTypes
  ## Describes the policy adjustment types for use with <a>PutScalingPolicy</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602679 = newJObject()
  add(query_602679, "Action", newJString(Action))
  add(query_602679, "Version", newJString(Version))
  result = call_602678.call(nil, query_602679, nil, nil, nil)

var postDescribeAdjustmentTypes* = Call_PostDescribeAdjustmentTypes_602665(
    name: "postDescribeAdjustmentTypes", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeAdjustmentTypes",
    validator: validate_PostDescribeAdjustmentTypes_602666, base: "/",
    url: url_PostDescribeAdjustmentTypes_602667,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeAdjustmentTypes_602650 = ref object of OpenApiRestCall_601389
proc url_GetDescribeAdjustmentTypes_602652(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeAdjustmentTypes_602651(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the policy adjustment types for use with <a>PutScalingPolicy</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602653 = query.getOrDefault("Action")
  valid_602653 = validateParameter(valid_602653, JString, required = true, default = newJString(
      "DescribeAdjustmentTypes"))
  if valid_602653 != nil:
    section.add "Action", valid_602653
  var valid_602654 = query.getOrDefault("Version")
  valid_602654 = validateParameter(valid_602654, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602654 != nil:
    section.add "Version", valid_602654
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602655 = header.getOrDefault("X-Amz-Signature")
  valid_602655 = validateParameter(valid_602655, JString, required = false,
                                 default = nil)
  if valid_602655 != nil:
    section.add "X-Amz-Signature", valid_602655
  var valid_602656 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602656 = validateParameter(valid_602656, JString, required = false,
                                 default = nil)
  if valid_602656 != nil:
    section.add "X-Amz-Content-Sha256", valid_602656
  var valid_602657 = header.getOrDefault("X-Amz-Date")
  valid_602657 = validateParameter(valid_602657, JString, required = false,
                                 default = nil)
  if valid_602657 != nil:
    section.add "X-Amz-Date", valid_602657
  var valid_602658 = header.getOrDefault("X-Amz-Credential")
  valid_602658 = validateParameter(valid_602658, JString, required = false,
                                 default = nil)
  if valid_602658 != nil:
    section.add "X-Amz-Credential", valid_602658
  var valid_602659 = header.getOrDefault("X-Amz-Security-Token")
  valid_602659 = validateParameter(valid_602659, JString, required = false,
                                 default = nil)
  if valid_602659 != nil:
    section.add "X-Amz-Security-Token", valid_602659
  var valid_602660 = header.getOrDefault("X-Amz-Algorithm")
  valid_602660 = validateParameter(valid_602660, JString, required = false,
                                 default = nil)
  if valid_602660 != nil:
    section.add "X-Amz-Algorithm", valid_602660
  var valid_602661 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602661 = validateParameter(valid_602661, JString, required = false,
                                 default = nil)
  if valid_602661 != nil:
    section.add "X-Amz-SignedHeaders", valid_602661
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602662: Call_GetDescribeAdjustmentTypes_602650; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the policy adjustment types for use with <a>PutScalingPolicy</a>.
  ## 
  let valid = call_602662.validator(path, query, header, formData, body)
  let scheme = call_602662.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602662.url(scheme.get, call_602662.host, call_602662.base,
                         call_602662.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602662, url, valid)

proc call*(call_602663: Call_GetDescribeAdjustmentTypes_602650;
          Action: string = "DescribeAdjustmentTypes"; Version: string = "2011-01-01"): Recallable =
  ## getDescribeAdjustmentTypes
  ## Describes the policy adjustment types for use with <a>PutScalingPolicy</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602664 = newJObject()
  add(query_602664, "Action", newJString(Action))
  add(query_602664, "Version", newJString(Version))
  result = call_602663.call(nil, query_602664, nil, nil, nil)

var getDescribeAdjustmentTypes* = Call_GetDescribeAdjustmentTypes_602650(
    name: "getDescribeAdjustmentTypes", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeAdjustmentTypes",
    validator: validate_GetDescribeAdjustmentTypes_602651, base: "/",
    url: url_GetDescribeAdjustmentTypes_602652,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeAutoScalingGroups_602698 = ref object of OpenApiRestCall_601389
proc url_PostDescribeAutoScalingGroups_602700(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeAutoScalingGroups_602699(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more Auto Scaling groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602701 = query.getOrDefault("Action")
  valid_602701 = validateParameter(valid_602701, JString, required = true, default = newJString(
      "DescribeAutoScalingGroups"))
  if valid_602701 != nil:
    section.add "Action", valid_602701
  var valid_602702 = query.getOrDefault("Version")
  valid_602702 = validateParameter(valid_602702, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602702 != nil:
    section.add "Version", valid_602702
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602703 = header.getOrDefault("X-Amz-Signature")
  valid_602703 = validateParameter(valid_602703, JString, required = false,
                                 default = nil)
  if valid_602703 != nil:
    section.add "X-Amz-Signature", valid_602703
  var valid_602704 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602704 = validateParameter(valid_602704, JString, required = false,
                                 default = nil)
  if valid_602704 != nil:
    section.add "X-Amz-Content-Sha256", valid_602704
  var valid_602705 = header.getOrDefault("X-Amz-Date")
  valid_602705 = validateParameter(valid_602705, JString, required = false,
                                 default = nil)
  if valid_602705 != nil:
    section.add "X-Amz-Date", valid_602705
  var valid_602706 = header.getOrDefault("X-Amz-Credential")
  valid_602706 = validateParameter(valid_602706, JString, required = false,
                                 default = nil)
  if valid_602706 != nil:
    section.add "X-Amz-Credential", valid_602706
  var valid_602707 = header.getOrDefault("X-Amz-Security-Token")
  valid_602707 = validateParameter(valid_602707, JString, required = false,
                                 default = nil)
  if valid_602707 != nil:
    section.add "X-Amz-Security-Token", valid_602707
  var valid_602708 = header.getOrDefault("X-Amz-Algorithm")
  valid_602708 = validateParameter(valid_602708, JString, required = false,
                                 default = nil)
  if valid_602708 != nil:
    section.add "X-Amz-Algorithm", valid_602708
  var valid_602709 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602709 = validateParameter(valid_602709, JString, required = false,
                                 default = nil)
  if valid_602709 != nil:
    section.add "X-Amz-SignedHeaders", valid_602709
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupNames: JArray
  ##                        : <p>The names of the Auto Scaling groups. Each name can be a maximum of 1600 characters. By default, you can only specify up to 50 names. You can optionally increase this limit using the <code>MaxRecords</code> parameter.</p> <p>If you omit this parameter, all Auto Scaling groups are described.</p>
  section = newJObject()
  var valid_602710 = formData.getOrDefault("NextToken")
  valid_602710 = validateParameter(valid_602710, JString, required = false,
                                 default = nil)
  if valid_602710 != nil:
    section.add "NextToken", valid_602710
  var valid_602711 = formData.getOrDefault("MaxRecords")
  valid_602711 = validateParameter(valid_602711, JInt, required = false, default = nil)
  if valid_602711 != nil:
    section.add "MaxRecords", valid_602711
  var valid_602712 = formData.getOrDefault("AutoScalingGroupNames")
  valid_602712 = validateParameter(valid_602712, JArray, required = false,
                                 default = nil)
  if valid_602712 != nil:
    section.add "AutoScalingGroupNames", valid_602712
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602713: Call_PostDescribeAutoScalingGroups_602698; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes one or more Auto Scaling groups.
  ## 
  let valid = call_602713.validator(path, query, header, formData, body)
  let scheme = call_602713.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602713.url(scheme.get, call_602713.host, call_602713.base,
                         call_602713.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602713, url, valid)

proc call*(call_602714: Call_PostDescribeAutoScalingGroups_602698;
          NextToken: string = ""; MaxRecords: int = 0;
          AutoScalingGroupNames: JsonNode = nil;
          Action: string = "DescribeAutoScalingGroups";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeAutoScalingGroups
  ## Describes one or more Auto Scaling groups.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupNames: JArray
  ##                        : <p>The names of the Auto Scaling groups. Each name can be a maximum of 1600 characters. By default, you can only specify up to 50 names. You can optionally increase this limit using the <code>MaxRecords</code> parameter.</p> <p>If you omit this parameter, all Auto Scaling groups are described.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602715 = newJObject()
  var formData_602716 = newJObject()
  add(formData_602716, "NextToken", newJString(NextToken))
  add(formData_602716, "MaxRecords", newJInt(MaxRecords))
  if AutoScalingGroupNames != nil:
    formData_602716.add "AutoScalingGroupNames", AutoScalingGroupNames
  add(query_602715, "Action", newJString(Action))
  add(query_602715, "Version", newJString(Version))
  result = call_602714.call(nil, query_602715, nil, formData_602716, nil)

var postDescribeAutoScalingGroups* = Call_PostDescribeAutoScalingGroups_602698(
    name: "postDescribeAutoScalingGroups", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeAutoScalingGroups",
    validator: validate_PostDescribeAutoScalingGroups_602699, base: "/",
    url: url_PostDescribeAutoScalingGroups_602700,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeAutoScalingGroups_602680 = ref object of OpenApiRestCall_601389
proc url_GetDescribeAutoScalingGroups_602682(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeAutoScalingGroups_602681(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more Auto Scaling groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   AutoScalingGroupNames: JArray
  ##                        : <p>The names of the Auto Scaling groups. Each name can be a maximum of 1600 characters. By default, you can only specify up to 50 names. You can optionally increase this limit using the <code>MaxRecords</code> parameter.</p> <p>If you omit this parameter, all Auto Scaling groups are described.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  section = newJObject()
  var valid_602683 = query.getOrDefault("NextToken")
  valid_602683 = validateParameter(valid_602683, JString, required = false,
                                 default = nil)
  if valid_602683 != nil:
    section.add "NextToken", valid_602683
  var valid_602684 = query.getOrDefault("AutoScalingGroupNames")
  valid_602684 = validateParameter(valid_602684, JArray, required = false,
                                 default = nil)
  if valid_602684 != nil:
    section.add "AutoScalingGroupNames", valid_602684
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602685 = query.getOrDefault("Action")
  valid_602685 = validateParameter(valid_602685, JString, required = true, default = newJString(
      "DescribeAutoScalingGroups"))
  if valid_602685 != nil:
    section.add "Action", valid_602685
  var valid_602686 = query.getOrDefault("Version")
  valid_602686 = validateParameter(valid_602686, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602686 != nil:
    section.add "Version", valid_602686
  var valid_602687 = query.getOrDefault("MaxRecords")
  valid_602687 = validateParameter(valid_602687, JInt, required = false, default = nil)
  if valid_602687 != nil:
    section.add "MaxRecords", valid_602687
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602688 = header.getOrDefault("X-Amz-Signature")
  valid_602688 = validateParameter(valid_602688, JString, required = false,
                                 default = nil)
  if valid_602688 != nil:
    section.add "X-Amz-Signature", valid_602688
  var valid_602689 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602689 = validateParameter(valid_602689, JString, required = false,
                                 default = nil)
  if valid_602689 != nil:
    section.add "X-Amz-Content-Sha256", valid_602689
  var valid_602690 = header.getOrDefault("X-Amz-Date")
  valid_602690 = validateParameter(valid_602690, JString, required = false,
                                 default = nil)
  if valid_602690 != nil:
    section.add "X-Amz-Date", valid_602690
  var valid_602691 = header.getOrDefault("X-Amz-Credential")
  valid_602691 = validateParameter(valid_602691, JString, required = false,
                                 default = nil)
  if valid_602691 != nil:
    section.add "X-Amz-Credential", valid_602691
  var valid_602692 = header.getOrDefault("X-Amz-Security-Token")
  valid_602692 = validateParameter(valid_602692, JString, required = false,
                                 default = nil)
  if valid_602692 != nil:
    section.add "X-Amz-Security-Token", valid_602692
  var valid_602693 = header.getOrDefault("X-Amz-Algorithm")
  valid_602693 = validateParameter(valid_602693, JString, required = false,
                                 default = nil)
  if valid_602693 != nil:
    section.add "X-Amz-Algorithm", valid_602693
  var valid_602694 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602694 = validateParameter(valid_602694, JString, required = false,
                                 default = nil)
  if valid_602694 != nil:
    section.add "X-Amz-SignedHeaders", valid_602694
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602695: Call_GetDescribeAutoScalingGroups_602680; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes one or more Auto Scaling groups.
  ## 
  let valid = call_602695.validator(path, query, header, formData, body)
  let scheme = call_602695.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602695.url(scheme.get, call_602695.host, call_602695.base,
                         call_602695.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602695, url, valid)

proc call*(call_602696: Call_GetDescribeAutoScalingGroups_602680;
          NextToken: string = ""; AutoScalingGroupNames: JsonNode = nil;
          Action: string = "DescribeAutoScalingGroups";
          Version: string = "2011-01-01"; MaxRecords: int = 0): Recallable =
  ## getDescribeAutoScalingGroups
  ## Describes one or more Auto Scaling groups.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   AutoScalingGroupNames: JArray
  ##                        : <p>The names of the Auto Scaling groups. Each name can be a maximum of 1600 characters. By default, you can only specify up to 50 names. You can optionally increase this limit using the <code>MaxRecords</code> parameter.</p> <p>If you omit this parameter, all Auto Scaling groups are described.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  var query_602697 = newJObject()
  add(query_602697, "NextToken", newJString(NextToken))
  if AutoScalingGroupNames != nil:
    query_602697.add "AutoScalingGroupNames", AutoScalingGroupNames
  add(query_602697, "Action", newJString(Action))
  add(query_602697, "Version", newJString(Version))
  add(query_602697, "MaxRecords", newJInt(MaxRecords))
  result = call_602696.call(nil, query_602697, nil, nil, nil)

var getDescribeAutoScalingGroups* = Call_GetDescribeAutoScalingGroups_602680(
    name: "getDescribeAutoScalingGroups", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeAutoScalingGroups",
    validator: validate_GetDescribeAutoScalingGroups_602681, base: "/",
    url: url_GetDescribeAutoScalingGroups_602682,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeAutoScalingInstances_602735 = ref object of OpenApiRestCall_601389
proc url_PostDescribeAutoScalingInstances_602737(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeAutoScalingInstances_602736(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more Auto Scaling instances.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602738 = query.getOrDefault("Action")
  valid_602738 = validateParameter(valid_602738, JString, required = true, default = newJString(
      "DescribeAutoScalingInstances"))
  if valid_602738 != nil:
    section.add "Action", valid_602738
  var valid_602739 = query.getOrDefault("Version")
  valid_602739 = validateParameter(valid_602739, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602739 != nil:
    section.add "Version", valid_602739
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602740 = header.getOrDefault("X-Amz-Signature")
  valid_602740 = validateParameter(valid_602740, JString, required = false,
                                 default = nil)
  if valid_602740 != nil:
    section.add "X-Amz-Signature", valid_602740
  var valid_602741 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602741 = validateParameter(valid_602741, JString, required = false,
                                 default = nil)
  if valid_602741 != nil:
    section.add "X-Amz-Content-Sha256", valid_602741
  var valid_602742 = header.getOrDefault("X-Amz-Date")
  valid_602742 = validateParameter(valid_602742, JString, required = false,
                                 default = nil)
  if valid_602742 != nil:
    section.add "X-Amz-Date", valid_602742
  var valid_602743 = header.getOrDefault("X-Amz-Credential")
  valid_602743 = validateParameter(valid_602743, JString, required = false,
                                 default = nil)
  if valid_602743 != nil:
    section.add "X-Amz-Credential", valid_602743
  var valid_602744 = header.getOrDefault("X-Amz-Security-Token")
  valid_602744 = validateParameter(valid_602744, JString, required = false,
                                 default = nil)
  if valid_602744 != nil:
    section.add "X-Amz-Security-Token", valid_602744
  var valid_602745 = header.getOrDefault("X-Amz-Algorithm")
  valid_602745 = validateParameter(valid_602745, JString, required = false,
                                 default = nil)
  if valid_602745 != nil:
    section.add "X-Amz-Algorithm", valid_602745
  var valid_602746 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602746 = validateParameter(valid_602746, JString, required = false,
                                 default = nil)
  if valid_602746 != nil:
    section.add "X-Amz-SignedHeaders", valid_602746
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>50</code>.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to <code>MaxRecords</code> IDs. If you omit this parameter, all Auto Scaling instances are described. If you specify an ID that does not exist, it is ignored with no error.
  section = newJObject()
  var valid_602747 = formData.getOrDefault("NextToken")
  valid_602747 = validateParameter(valid_602747, JString, required = false,
                                 default = nil)
  if valid_602747 != nil:
    section.add "NextToken", valid_602747
  var valid_602748 = formData.getOrDefault("MaxRecords")
  valid_602748 = validateParameter(valid_602748, JInt, required = false, default = nil)
  if valid_602748 != nil:
    section.add "MaxRecords", valid_602748
  var valid_602749 = formData.getOrDefault("InstanceIds")
  valid_602749 = validateParameter(valid_602749, JArray, required = false,
                                 default = nil)
  if valid_602749 != nil:
    section.add "InstanceIds", valid_602749
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602750: Call_PostDescribeAutoScalingInstances_602735;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes one or more Auto Scaling instances.
  ## 
  let valid = call_602750.validator(path, query, header, formData, body)
  let scheme = call_602750.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602750.url(scheme.get, call_602750.host, call_602750.base,
                         call_602750.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602750, url, valid)

proc call*(call_602751: Call_PostDescribeAutoScalingInstances_602735;
          NextToken: string = ""; MaxRecords: int = 0; InstanceIds: JsonNode = nil;
          Action: string = "DescribeAutoScalingInstances";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeAutoScalingInstances
  ## Describes one or more Auto Scaling instances.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>50</code>.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to <code>MaxRecords</code> IDs. If you omit this parameter, all Auto Scaling instances are described. If you specify an ID that does not exist, it is ignored with no error.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602752 = newJObject()
  var formData_602753 = newJObject()
  add(formData_602753, "NextToken", newJString(NextToken))
  add(formData_602753, "MaxRecords", newJInt(MaxRecords))
  if InstanceIds != nil:
    formData_602753.add "InstanceIds", InstanceIds
  add(query_602752, "Action", newJString(Action))
  add(query_602752, "Version", newJString(Version))
  result = call_602751.call(nil, query_602752, nil, formData_602753, nil)

var postDescribeAutoScalingInstances* = Call_PostDescribeAutoScalingInstances_602735(
    name: "postDescribeAutoScalingInstances", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeAutoScalingInstances",
    validator: validate_PostDescribeAutoScalingInstances_602736, base: "/",
    url: url_PostDescribeAutoScalingInstances_602737,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeAutoScalingInstances_602717 = ref object of OpenApiRestCall_601389
proc url_GetDescribeAutoScalingInstances_602719(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeAutoScalingInstances_602718(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more Auto Scaling instances.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to <code>MaxRecords</code> IDs. If you omit this parameter, all Auto Scaling instances are described. If you specify an ID that does not exist, it is ignored with no error.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>50</code>.
  section = newJObject()
  var valid_602720 = query.getOrDefault("InstanceIds")
  valid_602720 = validateParameter(valid_602720, JArray, required = false,
                                 default = nil)
  if valid_602720 != nil:
    section.add "InstanceIds", valid_602720
  var valid_602721 = query.getOrDefault("NextToken")
  valid_602721 = validateParameter(valid_602721, JString, required = false,
                                 default = nil)
  if valid_602721 != nil:
    section.add "NextToken", valid_602721
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602722 = query.getOrDefault("Action")
  valid_602722 = validateParameter(valid_602722, JString, required = true, default = newJString(
      "DescribeAutoScalingInstances"))
  if valid_602722 != nil:
    section.add "Action", valid_602722
  var valid_602723 = query.getOrDefault("Version")
  valid_602723 = validateParameter(valid_602723, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602723 != nil:
    section.add "Version", valid_602723
  var valid_602724 = query.getOrDefault("MaxRecords")
  valid_602724 = validateParameter(valid_602724, JInt, required = false, default = nil)
  if valid_602724 != nil:
    section.add "MaxRecords", valid_602724
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602725 = header.getOrDefault("X-Amz-Signature")
  valid_602725 = validateParameter(valid_602725, JString, required = false,
                                 default = nil)
  if valid_602725 != nil:
    section.add "X-Amz-Signature", valid_602725
  var valid_602726 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602726 = validateParameter(valid_602726, JString, required = false,
                                 default = nil)
  if valid_602726 != nil:
    section.add "X-Amz-Content-Sha256", valid_602726
  var valid_602727 = header.getOrDefault("X-Amz-Date")
  valid_602727 = validateParameter(valid_602727, JString, required = false,
                                 default = nil)
  if valid_602727 != nil:
    section.add "X-Amz-Date", valid_602727
  var valid_602728 = header.getOrDefault("X-Amz-Credential")
  valid_602728 = validateParameter(valid_602728, JString, required = false,
                                 default = nil)
  if valid_602728 != nil:
    section.add "X-Amz-Credential", valid_602728
  var valid_602729 = header.getOrDefault("X-Amz-Security-Token")
  valid_602729 = validateParameter(valid_602729, JString, required = false,
                                 default = nil)
  if valid_602729 != nil:
    section.add "X-Amz-Security-Token", valid_602729
  var valid_602730 = header.getOrDefault("X-Amz-Algorithm")
  valid_602730 = validateParameter(valid_602730, JString, required = false,
                                 default = nil)
  if valid_602730 != nil:
    section.add "X-Amz-Algorithm", valid_602730
  var valid_602731 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602731 = validateParameter(valid_602731, JString, required = false,
                                 default = nil)
  if valid_602731 != nil:
    section.add "X-Amz-SignedHeaders", valid_602731
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602732: Call_GetDescribeAutoScalingInstances_602717;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes one or more Auto Scaling instances.
  ## 
  let valid = call_602732.validator(path, query, header, formData, body)
  let scheme = call_602732.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602732.url(scheme.get, call_602732.host, call_602732.base,
                         call_602732.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602732, url, valid)

proc call*(call_602733: Call_GetDescribeAutoScalingInstances_602717;
          InstanceIds: JsonNode = nil; NextToken: string = "";
          Action: string = "DescribeAutoScalingInstances";
          Version: string = "2011-01-01"; MaxRecords: int = 0): Recallable =
  ## getDescribeAutoScalingInstances
  ## Describes one or more Auto Scaling instances.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to <code>MaxRecords</code> IDs. If you omit this parameter, all Auto Scaling instances are described. If you specify an ID that does not exist, it is ignored with no error.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>50</code>.
  var query_602734 = newJObject()
  if InstanceIds != nil:
    query_602734.add "InstanceIds", InstanceIds
  add(query_602734, "NextToken", newJString(NextToken))
  add(query_602734, "Action", newJString(Action))
  add(query_602734, "Version", newJString(Version))
  add(query_602734, "MaxRecords", newJInt(MaxRecords))
  result = call_602733.call(nil, query_602734, nil, nil, nil)

var getDescribeAutoScalingInstances* = Call_GetDescribeAutoScalingInstances_602717(
    name: "getDescribeAutoScalingInstances", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeAutoScalingInstances",
    validator: validate_GetDescribeAutoScalingInstances_602718, base: "/",
    url: url_GetDescribeAutoScalingInstances_602719,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeAutoScalingNotificationTypes_602769 = ref object of OpenApiRestCall_601389
proc url_PostDescribeAutoScalingNotificationTypes_602771(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeAutoScalingNotificationTypes_602770(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the notification types that are supported by Amazon EC2 Auto Scaling.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602772 = query.getOrDefault("Action")
  valid_602772 = validateParameter(valid_602772, JString, required = true, default = newJString(
      "DescribeAutoScalingNotificationTypes"))
  if valid_602772 != nil:
    section.add "Action", valid_602772
  var valid_602773 = query.getOrDefault("Version")
  valid_602773 = validateParameter(valid_602773, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602773 != nil:
    section.add "Version", valid_602773
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602774 = header.getOrDefault("X-Amz-Signature")
  valid_602774 = validateParameter(valid_602774, JString, required = false,
                                 default = nil)
  if valid_602774 != nil:
    section.add "X-Amz-Signature", valid_602774
  var valid_602775 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602775 = validateParameter(valid_602775, JString, required = false,
                                 default = nil)
  if valid_602775 != nil:
    section.add "X-Amz-Content-Sha256", valid_602775
  var valid_602776 = header.getOrDefault("X-Amz-Date")
  valid_602776 = validateParameter(valid_602776, JString, required = false,
                                 default = nil)
  if valid_602776 != nil:
    section.add "X-Amz-Date", valid_602776
  var valid_602777 = header.getOrDefault("X-Amz-Credential")
  valid_602777 = validateParameter(valid_602777, JString, required = false,
                                 default = nil)
  if valid_602777 != nil:
    section.add "X-Amz-Credential", valid_602777
  var valid_602778 = header.getOrDefault("X-Amz-Security-Token")
  valid_602778 = validateParameter(valid_602778, JString, required = false,
                                 default = nil)
  if valid_602778 != nil:
    section.add "X-Amz-Security-Token", valid_602778
  var valid_602779 = header.getOrDefault("X-Amz-Algorithm")
  valid_602779 = validateParameter(valid_602779, JString, required = false,
                                 default = nil)
  if valid_602779 != nil:
    section.add "X-Amz-Algorithm", valid_602779
  var valid_602780 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602780 = validateParameter(valid_602780, JString, required = false,
                                 default = nil)
  if valid_602780 != nil:
    section.add "X-Amz-SignedHeaders", valid_602780
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602781: Call_PostDescribeAutoScalingNotificationTypes_602769;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the notification types that are supported by Amazon EC2 Auto Scaling.
  ## 
  let valid = call_602781.validator(path, query, header, formData, body)
  let scheme = call_602781.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602781.url(scheme.get, call_602781.host, call_602781.base,
                         call_602781.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602781, url, valid)

proc call*(call_602782: Call_PostDescribeAutoScalingNotificationTypes_602769;
          Action: string = "DescribeAutoScalingNotificationTypes";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeAutoScalingNotificationTypes
  ## Describes the notification types that are supported by Amazon EC2 Auto Scaling.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602783 = newJObject()
  add(query_602783, "Action", newJString(Action))
  add(query_602783, "Version", newJString(Version))
  result = call_602782.call(nil, query_602783, nil, nil, nil)

var postDescribeAutoScalingNotificationTypes* = Call_PostDescribeAutoScalingNotificationTypes_602769(
    name: "postDescribeAutoScalingNotificationTypes", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeAutoScalingNotificationTypes",
    validator: validate_PostDescribeAutoScalingNotificationTypes_602770,
    base: "/", url: url_PostDescribeAutoScalingNotificationTypes_602771,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeAutoScalingNotificationTypes_602754 = ref object of OpenApiRestCall_601389
proc url_GetDescribeAutoScalingNotificationTypes_602756(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeAutoScalingNotificationTypes_602755(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the notification types that are supported by Amazon EC2 Auto Scaling.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602757 = query.getOrDefault("Action")
  valid_602757 = validateParameter(valid_602757, JString, required = true, default = newJString(
      "DescribeAutoScalingNotificationTypes"))
  if valid_602757 != nil:
    section.add "Action", valid_602757
  var valid_602758 = query.getOrDefault("Version")
  valid_602758 = validateParameter(valid_602758, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602758 != nil:
    section.add "Version", valid_602758
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602759 = header.getOrDefault("X-Amz-Signature")
  valid_602759 = validateParameter(valid_602759, JString, required = false,
                                 default = nil)
  if valid_602759 != nil:
    section.add "X-Amz-Signature", valid_602759
  var valid_602760 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602760 = validateParameter(valid_602760, JString, required = false,
                                 default = nil)
  if valid_602760 != nil:
    section.add "X-Amz-Content-Sha256", valid_602760
  var valid_602761 = header.getOrDefault("X-Amz-Date")
  valid_602761 = validateParameter(valid_602761, JString, required = false,
                                 default = nil)
  if valid_602761 != nil:
    section.add "X-Amz-Date", valid_602761
  var valid_602762 = header.getOrDefault("X-Amz-Credential")
  valid_602762 = validateParameter(valid_602762, JString, required = false,
                                 default = nil)
  if valid_602762 != nil:
    section.add "X-Amz-Credential", valid_602762
  var valid_602763 = header.getOrDefault("X-Amz-Security-Token")
  valid_602763 = validateParameter(valid_602763, JString, required = false,
                                 default = nil)
  if valid_602763 != nil:
    section.add "X-Amz-Security-Token", valid_602763
  var valid_602764 = header.getOrDefault("X-Amz-Algorithm")
  valid_602764 = validateParameter(valid_602764, JString, required = false,
                                 default = nil)
  if valid_602764 != nil:
    section.add "X-Amz-Algorithm", valid_602764
  var valid_602765 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602765 = validateParameter(valid_602765, JString, required = false,
                                 default = nil)
  if valid_602765 != nil:
    section.add "X-Amz-SignedHeaders", valid_602765
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602766: Call_GetDescribeAutoScalingNotificationTypes_602754;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the notification types that are supported by Amazon EC2 Auto Scaling.
  ## 
  let valid = call_602766.validator(path, query, header, formData, body)
  let scheme = call_602766.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602766.url(scheme.get, call_602766.host, call_602766.base,
                         call_602766.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602766, url, valid)

proc call*(call_602767: Call_GetDescribeAutoScalingNotificationTypes_602754;
          Action: string = "DescribeAutoScalingNotificationTypes";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeAutoScalingNotificationTypes
  ## Describes the notification types that are supported by Amazon EC2 Auto Scaling.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602768 = newJObject()
  add(query_602768, "Action", newJString(Action))
  add(query_602768, "Version", newJString(Version))
  result = call_602767.call(nil, query_602768, nil, nil, nil)

var getDescribeAutoScalingNotificationTypes* = Call_GetDescribeAutoScalingNotificationTypes_602754(
    name: "getDescribeAutoScalingNotificationTypes", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeAutoScalingNotificationTypes",
    validator: validate_GetDescribeAutoScalingNotificationTypes_602755, base: "/",
    url: url_GetDescribeAutoScalingNotificationTypes_602756,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeLaunchConfigurations_602802 = ref object of OpenApiRestCall_601389
proc url_PostDescribeLaunchConfigurations_602804(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeLaunchConfigurations_602803(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more launch configurations.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602805 = query.getOrDefault("Action")
  valid_602805 = validateParameter(valid_602805, JString, required = true, default = newJString(
      "DescribeLaunchConfigurations"))
  if valid_602805 != nil:
    section.add "Action", valid_602805
  var valid_602806 = query.getOrDefault("Version")
  valid_602806 = validateParameter(valid_602806, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602806 != nil:
    section.add "Version", valid_602806
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602807 = header.getOrDefault("X-Amz-Signature")
  valid_602807 = validateParameter(valid_602807, JString, required = false,
                                 default = nil)
  if valid_602807 != nil:
    section.add "X-Amz-Signature", valid_602807
  var valid_602808 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602808 = validateParameter(valid_602808, JString, required = false,
                                 default = nil)
  if valid_602808 != nil:
    section.add "X-Amz-Content-Sha256", valid_602808
  var valid_602809 = header.getOrDefault("X-Amz-Date")
  valid_602809 = validateParameter(valid_602809, JString, required = false,
                                 default = nil)
  if valid_602809 != nil:
    section.add "X-Amz-Date", valid_602809
  var valid_602810 = header.getOrDefault("X-Amz-Credential")
  valid_602810 = validateParameter(valid_602810, JString, required = false,
                                 default = nil)
  if valid_602810 != nil:
    section.add "X-Amz-Credential", valid_602810
  var valid_602811 = header.getOrDefault("X-Amz-Security-Token")
  valid_602811 = validateParameter(valid_602811, JString, required = false,
                                 default = nil)
  if valid_602811 != nil:
    section.add "X-Amz-Security-Token", valid_602811
  var valid_602812 = header.getOrDefault("X-Amz-Algorithm")
  valid_602812 = validateParameter(valid_602812, JString, required = false,
                                 default = nil)
  if valid_602812 != nil:
    section.add "X-Amz-Algorithm", valid_602812
  var valid_602813 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602813 = validateParameter(valid_602813, JString, required = false,
                                 default = nil)
  if valid_602813 != nil:
    section.add "X-Amz-SignedHeaders", valid_602813
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   LaunchConfigurationNames: JArray
  ##                           : The launch configuration names. If you omit this parameter, all launch configurations are described.
  section = newJObject()
  var valid_602814 = formData.getOrDefault("NextToken")
  valid_602814 = validateParameter(valid_602814, JString, required = false,
                                 default = nil)
  if valid_602814 != nil:
    section.add "NextToken", valid_602814
  var valid_602815 = formData.getOrDefault("MaxRecords")
  valid_602815 = validateParameter(valid_602815, JInt, required = false, default = nil)
  if valid_602815 != nil:
    section.add "MaxRecords", valid_602815
  var valid_602816 = formData.getOrDefault("LaunchConfigurationNames")
  valid_602816 = validateParameter(valid_602816, JArray, required = false,
                                 default = nil)
  if valid_602816 != nil:
    section.add "LaunchConfigurationNames", valid_602816
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602817: Call_PostDescribeLaunchConfigurations_602802;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes one or more launch configurations.
  ## 
  let valid = call_602817.validator(path, query, header, formData, body)
  let scheme = call_602817.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602817.url(scheme.get, call_602817.host, call_602817.base,
                         call_602817.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602817, url, valid)

proc call*(call_602818: Call_PostDescribeLaunchConfigurations_602802;
          NextToken: string = ""; MaxRecords: int = 0;
          LaunchConfigurationNames: JsonNode = nil;
          Action: string = "DescribeLaunchConfigurations";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeLaunchConfigurations
  ## Describes one or more launch configurations.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   LaunchConfigurationNames: JArray
  ##                           : The launch configuration names. If you omit this parameter, all launch configurations are described.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602819 = newJObject()
  var formData_602820 = newJObject()
  add(formData_602820, "NextToken", newJString(NextToken))
  add(formData_602820, "MaxRecords", newJInt(MaxRecords))
  if LaunchConfigurationNames != nil:
    formData_602820.add "LaunchConfigurationNames", LaunchConfigurationNames
  add(query_602819, "Action", newJString(Action))
  add(query_602819, "Version", newJString(Version))
  result = call_602818.call(nil, query_602819, nil, formData_602820, nil)

var postDescribeLaunchConfigurations* = Call_PostDescribeLaunchConfigurations_602802(
    name: "postDescribeLaunchConfigurations", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeLaunchConfigurations",
    validator: validate_PostDescribeLaunchConfigurations_602803, base: "/",
    url: url_PostDescribeLaunchConfigurations_602804,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeLaunchConfigurations_602784 = ref object of OpenApiRestCall_601389
proc url_GetDescribeLaunchConfigurations_602786(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeLaunchConfigurations_602785(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more launch configurations.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   LaunchConfigurationNames: JArray
  ##                           : The launch configuration names. If you omit this parameter, all launch configurations are described.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  section = newJObject()
  var valid_602787 = query.getOrDefault("NextToken")
  valid_602787 = validateParameter(valid_602787, JString, required = false,
                                 default = nil)
  if valid_602787 != nil:
    section.add "NextToken", valid_602787
  var valid_602788 = query.getOrDefault("LaunchConfigurationNames")
  valid_602788 = validateParameter(valid_602788, JArray, required = false,
                                 default = nil)
  if valid_602788 != nil:
    section.add "LaunchConfigurationNames", valid_602788
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602789 = query.getOrDefault("Action")
  valid_602789 = validateParameter(valid_602789, JString, required = true, default = newJString(
      "DescribeLaunchConfigurations"))
  if valid_602789 != nil:
    section.add "Action", valid_602789
  var valid_602790 = query.getOrDefault("Version")
  valid_602790 = validateParameter(valid_602790, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602790 != nil:
    section.add "Version", valid_602790
  var valid_602791 = query.getOrDefault("MaxRecords")
  valid_602791 = validateParameter(valid_602791, JInt, required = false, default = nil)
  if valid_602791 != nil:
    section.add "MaxRecords", valid_602791
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602792 = header.getOrDefault("X-Amz-Signature")
  valid_602792 = validateParameter(valid_602792, JString, required = false,
                                 default = nil)
  if valid_602792 != nil:
    section.add "X-Amz-Signature", valid_602792
  var valid_602793 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602793 = validateParameter(valid_602793, JString, required = false,
                                 default = nil)
  if valid_602793 != nil:
    section.add "X-Amz-Content-Sha256", valid_602793
  var valid_602794 = header.getOrDefault("X-Amz-Date")
  valid_602794 = validateParameter(valid_602794, JString, required = false,
                                 default = nil)
  if valid_602794 != nil:
    section.add "X-Amz-Date", valid_602794
  var valid_602795 = header.getOrDefault("X-Amz-Credential")
  valid_602795 = validateParameter(valid_602795, JString, required = false,
                                 default = nil)
  if valid_602795 != nil:
    section.add "X-Amz-Credential", valid_602795
  var valid_602796 = header.getOrDefault("X-Amz-Security-Token")
  valid_602796 = validateParameter(valid_602796, JString, required = false,
                                 default = nil)
  if valid_602796 != nil:
    section.add "X-Amz-Security-Token", valid_602796
  var valid_602797 = header.getOrDefault("X-Amz-Algorithm")
  valid_602797 = validateParameter(valid_602797, JString, required = false,
                                 default = nil)
  if valid_602797 != nil:
    section.add "X-Amz-Algorithm", valid_602797
  var valid_602798 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602798 = validateParameter(valid_602798, JString, required = false,
                                 default = nil)
  if valid_602798 != nil:
    section.add "X-Amz-SignedHeaders", valid_602798
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602799: Call_GetDescribeLaunchConfigurations_602784;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes one or more launch configurations.
  ## 
  let valid = call_602799.validator(path, query, header, formData, body)
  let scheme = call_602799.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602799.url(scheme.get, call_602799.host, call_602799.base,
                         call_602799.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602799, url, valid)

proc call*(call_602800: Call_GetDescribeLaunchConfigurations_602784;
          NextToken: string = ""; LaunchConfigurationNames: JsonNode = nil;
          Action: string = "DescribeLaunchConfigurations";
          Version: string = "2011-01-01"; MaxRecords: int = 0): Recallable =
  ## getDescribeLaunchConfigurations
  ## Describes one or more launch configurations.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   LaunchConfigurationNames: JArray
  ##                           : The launch configuration names. If you omit this parameter, all launch configurations are described.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  var query_602801 = newJObject()
  add(query_602801, "NextToken", newJString(NextToken))
  if LaunchConfigurationNames != nil:
    query_602801.add "LaunchConfigurationNames", LaunchConfigurationNames
  add(query_602801, "Action", newJString(Action))
  add(query_602801, "Version", newJString(Version))
  add(query_602801, "MaxRecords", newJInt(MaxRecords))
  result = call_602800.call(nil, query_602801, nil, nil, nil)

var getDescribeLaunchConfigurations* = Call_GetDescribeLaunchConfigurations_602784(
    name: "getDescribeLaunchConfigurations", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeLaunchConfigurations",
    validator: validate_GetDescribeLaunchConfigurations_602785, base: "/",
    url: url_GetDescribeLaunchConfigurations_602786,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeLifecycleHookTypes_602836 = ref object of OpenApiRestCall_601389
proc url_PostDescribeLifecycleHookTypes_602838(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeLifecycleHookTypes_602837(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the available types of lifecycle hooks.</p> <p>The following hook types are supported:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602839 = query.getOrDefault("Action")
  valid_602839 = validateParameter(valid_602839, JString, required = true, default = newJString(
      "DescribeLifecycleHookTypes"))
  if valid_602839 != nil:
    section.add "Action", valid_602839
  var valid_602840 = query.getOrDefault("Version")
  valid_602840 = validateParameter(valid_602840, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602840 != nil:
    section.add "Version", valid_602840
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602841 = header.getOrDefault("X-Amz-Signature")
  valid_602841 = validateParameter(valid_602841, JString, required = false,
                                 default = nil)
  if valid_602841 != nil:
    section.add "X-Amz-Signature", valid_602841
  var valid_602842 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602842 = validateParameter(valid_602842, JString, required = false,
                                 default = nil)
  if valid_602842 != nil:
    section.add "X-Amz-Content-Sha256", valid_602842
  var valid_602843 = header.getOrDefault("X-Amz-Date")
  valid_602843 = validateParameter(valid_602843, JString, required = false,
                                 default = nil)
  if valid_602843 != nil:
    section.add "X-Amz-Date", valid_602843
  var valid_602844 = header.getOrDefault("X-Amz-Credential")
  valid_602844 = validateParameter(valid_602844, JString, required = false,
                                 default = nil)
  if valid_602844 != nil:
    section.add "X-Amz-Credential", valid_602844
  var valid_602845 = header.getOrDefault("X-Amz-Security-Token")
  valid_602845 = validateParameter(valid_602845, JString, required = false,
                                 default = nil)
  if valid_602845 != nil:
    section.add "X-Amz-Security-Token", valid_602845
  var valid_602846 = header.getOrDefault("X-Amz-Algorithm")
  valid_602846 = validateParameter(valid_602846, JString, required = false,
                                 default = nil)
  if valid_602846 != nil:
    section.add "X-Amz-Algorithm", valid_602846
  var valid_602847 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602847 = validateParameter(valid_602847, JString, required = false,
                                 default = nil)
  if valid_602847 != nil:
    section.add "X-Amz-SignedHeaders", valid_602847
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602848: Call_PostDescribeLifecycleHookTypes_602836; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the available types of lifecycle hooks.</p> <p>The following hook types are supported:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul>
  ## 
  let valid = call_602848.validator(path, query, header, formData, body)
  let scheme = call_602848.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602848.url(scheme.get, call_602848.host, call_602848.base,
                         call_602848.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602848, url, valid)

proc call*(call_602849: Call_PostDescribeLifecycleHookTypes_602836;
          Action: string = "DescribeLifecycleHookTypes";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeLifecycleHookTypes
  ## <p>Describes the available types of lifecycle hooks.</p> <p>The following hook types are supported:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602850 = newJObject()
  add(query_602850, "Action", newJString(Action))
  add(query_602850, "Version", newJString(Version))
  result = call_602849.call(nil, query_602850, nil, nil, nil)

var postDescribeLifecycleHookTypes* = Call_PostDescribeLifecycleHookTypes_602836(
    name: "postDescribeLifecycleHookTypes", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeLifecycleHookTypes",
    validator: validate_PostDescribeLifecycleHookTypes_602837, base: "/",
    url: url_PostDescribeLifecycleHookTypes_602838,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeLifecycleHookTypes_602821 = ref object of OpenApiRestCall_601389
proc url_GetDescribeLifecycleHookTypes_602823(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeLifecycleHookTypes_602822(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the available types of lifecycle hooks.</p> <p>The following hook types are supported:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602824 = query.getOrDefault("Action")
  valid_602824 = validateParameter(valid_602824, JString, required = true, default = newJString(
      "DescribeLifecycleHookTypes"))
  if valid_602824 != nil:
    section.add "Action", valid_602824
  var valid_602825 = query.getOrDefault("Version")
  valid_602825 = validateParameter(valid_602825, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602825 != nil:
    section.add "Version", valid_602825
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602826 = header.getOrDefault("X-Amz-Signature")
  valid_602826 = validateParameter(valid_602826, JString, required = false,
                                 default = nil)
  if valid_602826 != nil:
    section.add "X-Amz-Signature", valid_602826
  var valid_602827 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602827 = validateParameter(valid_602827, JString, required = false,
                                 default = nil)
  if valid_602827 != nil:
    section.add "X-Amz-Content-Sha256", valid_602827
  var valid_602828 = header.getOrDefault("X-Amz-Date")
  valid_602828 = validateParameter(valid_602828, JString, required = false,
                                 default = nil)
  if valid_602828 != nil:
    section.add "X-Amz-Date", valid_602828
  var valid_602829 = header.getOrDefault("X-Amz-Credential")
  valid_602829 = validateParameter(valid_602829, JString, required = false,
                                 default = nil)
  if valid_602829 != nil:
    section.add "X-Amz-Credential", valid_602829
  var valid_602830 = header.getOrDefault("X-Amz-Security-Token")
  valid_602830 = validateParameter(valid_602830, JString, required = false,
                                 default = nil)
  if valid_602830 != nil:
    section.add "X-Amz-Security-Token", valid_602830
  var valid_602831 = header.getOrDefault("X-Amz-Algorithm")
  valid_602831 = validateParameter(valid_602831, JString, required = false,
                                 default = nil)
  if valid_602831 != nil:
    section.add "X-Amz-Algorithm", valid_602831
  var valid_602832 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602832 = validateParameter(valid_602832, JString, required = false,
                                 default = nil)
  if valid_602832 != nil:
    section.add "X-Amz-SignedHeaders", valid_602832
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602833: Call_GetDescribeLifecycleHookTypes_602821; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the available types of lifecycle hooks.</p> <p>The following hook types are supported:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul>
  ## 
  let valid = call_602833.validator(path, query, header, formData, body)
  let scheme = call_602833.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602833.url(scheme.get, call_602833.host, call_602833.base,
                         call_602833.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602833, url, valid)

proc call*(call_602834: Call_GetDescribeLifecycleHookTypes_602821;
          Action: string = "DescribeLifecycleHookTypes";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeLifecycleHookTypes
  ## <p>Describes the available types of lifecycle hooks.</p> <p>The following hook types are supported:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602835 = newJObject()
  add(query_602835, "Action", newJString(Action))
  add(query_602835, "Version", newJString(Version))
  result = call_602834.call(nil, query_602835, nil, nil, nil)

var getDescribeLifecycleHookTypes* = Call_GetDescribeLifecycleHookTypes_602821(
    name: "getDescribeLifecycleHookTypes", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeLifecycleHookTypes",
    validator: validate_GetDescribeLifecycleHookTypes_602822, base: "/",
    url: url_GetDescribeLifecycleHookTypes_602823,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeLifecycleHooks_602868 = ref object of OpenApiRestCall_601389
proc url_PostDescribeLifecycleHooks_602870(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeLifecycleHooks_602869(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the lifecycle hooks for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602871 = query.getOrDefault("Action")
  valid_602871 = validateParameter(valid_602871, JString, required = true,
                                 default = newJString("DescribeLifecycleHooks"))
  if valid_602871 != nil:
    section.add "Action", valid_602871
  var valid_602872 = query.getOrDefault("Version")
  valid_602872 = validateParameter(valid_602872, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602872 != nil:
    section.add "Version", valid_602872
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602873 = header.getOrDefault("X-Amz-Signature")
  valid_602873 = validateParameter(valid_602873, JString, required = false,
                                 default = nil)
  if valid_602873 != nil:
    section.add "X-Amz-Signature", valid_602873
  var valid_602874 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602874 = validateParameter(valid_602874, JString, required = false,
                                 default = nil)
  if valid_602874 != nil:
    section.add "X-Amz-Content-Sha256", valid_602874
  var valid_602875 = header.getOrDefault("X-Amz-Date")
  valid_602875 = validateParameter(valid_602875, JString, required = false,
                                 default = nil)
  if valid_602875 != nil:
    section.add "X-Amz-Date", valid_602875
  var valid_602876 = header.getOrDefault("X-Amz-Credential")
  valid_602876 = validateParameter(valid_602876, JString, required = false,
                                 default = nil)
  if valid_602876 != nil:
    section.add "X-Amz-Credential", valid_602876
  var valid_602877 = header.getOrDefault("X-Amz-Security-Token")
  valid_602877 = validateParameter(valid_602877, JString, required = false,
                                 default = nil)
  if valid_602877 != nil:
    section.add "X-Amz-Security-Token", valid_602877
  var valid_602878 = header.getOrDefault("X-Amz-Algorithm")
  valid_602878 = validateParameter(valid_602878, JString, required = false,
                                 default = nil)
  if valid_602878 != nil:
    section.add "X-Amz-Algorithm", valid_602878
  var valid_602879 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602879 = validateParameter(valid_602879, JString, required = false,
                                 default = nil)
  if valid_602879 != nil:
    section.add "X-Amz-SignedHeaders", valid_602879
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookNames: JArray
  ##                     : The names of one or more lifecycle hooks. If you omit this parameter, all lifecycle hooks are described.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_602880 = formData.getOrDefault("AutoScalingGroupName")
  valid_602880 = validateParameter(valid_602880, JString, required = true,
                                 default = nil)
  if valid_602880 != nil:
    section.add "AutoScalingGroupName", valid_602880
  var valid_602881 = formData.getOrDefault("LifecycleHookNames")
  valid_602881 = validateParameter(valid_602881, JArray, required = false,
                                 default = nil)
  if valid_602881 != nil:
    section.add "LifecycleHookNames", valid_602881
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602882: Call_PostDescribeLifecycleHooks_602868; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the lifecycle hooks for the specified Auto Scaling group.
  ## 
  let valid = call_602882.validator(path, query, header, formData, body)
  let scheme = call_602882.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602882.url(scheme.get, call_602882.host, call_602882.base,
                         call_602882.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602882, url, valid)

proc call*(call_602883: Call_PostDescribeLifecycleHooks_602868;
          AutoScalingGroupName: string; LifecycleHookNames: JsonNode = nil;
          Action: string = "DescribeLifecycleHooks"; Version: string = "2011-01-01"): Recallable =
  ## postDescribeLifecycleHooks
  ## Describes the lifecycle hooks for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookNames: JArray
  ##                     : The names of one or more lifecycle hooks. If you omit this parameter, all lifecycle hooks are described.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602884 = newJObject()
  var formData_602885 = newJObject()
  add(formData_602885, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if LifecycleHookNames != nil:
    formData_602885.add "LifecycleHookNames", LifecycleHookNames
  add(query_602884, "Action", newJString(Action))
  add(query_602884, "Version", newJString(Version))
  result = call_602883.call(nil, query_602884, nil, formData_602885, nil)

var postDescribeLifecycleHooks* = Call_PostDescribeLifecycleHooks_602868(
    name: "postDescribeLifecycleHooks", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeLifecycleHooks",
    validator: validate_PostDescribeLifecycleHooks_602869, base: "/",
    url: url_PostDescribeLifecycleHooks_602870,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeLifecycleHooks_602851 = ref object of OpenApiRestCall_601389
proc url_GetDescribeLifecycleHooks_602853(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeLifecycleHooks_602852(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the lifecycle hooks for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   LifecycleHookNames: JArray
  ##                     : The names of one or more lifecycle hooks. If you omit this parameter, all lifecycle hooks are described.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_602854 = query.getOrDefault("LifecycleHookNames")
  valid_602854 = validateParameter(valid_602854, JArray, required = false,
                                 default = nil)
  if valid_602854 != nil:
    section.add "LifecycleHookNames", valid_602854
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_602855 = query.getOrDefault("AutoScalingGroupName")
  valid_602855 = validateParameter(valid_602855, JString, required = true,
                                 default = nil)
  if valid_602855 != nil:
    section.add "AutoScalingGroupName", valid_602855
  var valid_602856 = query.getOrDefault("Action")
  valid_602856 = validateParameter(valid_602856, JString, required = true,
                                 default = newJString("DescribeLifecycleHooks"))
  if valid_602856 != nil:
    section.add "Action", valid_602856
  var valid_602857 = query.getOrDefault("Version")
  valid_602857 = validateParameter(valid_602857, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602857 != nil:
    section.add "Version", valid_602857
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602858 = header.getOrDefault("X-Amz-Signature")
  valid_602858 = validateParameter(valid_602858, JString, required = false,
                                 default = nil)
  if valid_602858 != nil:
    section.add "X-Amz-Signature", valid_602858
  var valid_602859 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602859 = validateParameter(valid_602859, JString, required = false,
                                 default = nil)
  if valid_602859 != nil:
    section.add "X-Amz-Content-Sha256", valid_602859
  var valid_602860 = header.getOrDefault("X-Amz-Date")
  valid_602860 = validateParameter(valid_602860, JString, required = false,
                                 default = nil)
  if valid_602860 != nil:
    section.add "X-Amz-Date", valid_602860
  var valid_602861 = header.getOrDefault("X-Amz-Credential")
  valid_602861 = validateParameter(valid_602861, JString, required = false,
                                 default = nil)
  if valid_602861 != nil:
    section.add "X-Amz-Credential", valid_602861
  var valid_602862 = header.getOrDefault("X-Amz-Security-Token")
  valid_602862 = validateParameter(valid_602862, JString, required = false,
                                 default = nil)
  if valid_602862 != nil:
    section.add "X-Amz-Security-Token", valid_602862
  var valid_602863 = header.getOrDefault("X-Amz-Algorithm")
  valid_602863 = validateParameter(valid_602863, JString, required = false,
                                 default = nil)
  if valid_602863 != nil:
    section.add "X-Amz-Algorithm", valid_602863
  var valid_602864 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602864 = validateParameter(valid_602864, JString, required = false,
                                 default = nil)
  if valid_602864 != nil:
    section.add "X-Amz-SignedHeaders", valid_602864
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602865: Call_GetDescribeLifecycleHooks_602851; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the lifecycle hooks for the specified Auto Scaling group.
  ## 
  let valid = call_602865.validator(path, query, header, formData, body)
  let scheme = call_602865.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602865.url(scheme.get, call_602865.host, call_602865.base,
                         call_602865.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602865, url, valid)

proc call*(call_602866: Call_GetDescribeLifecycleHooks_602851;
          AutoScalingGroupName: string; LifecycleHookNames: JsonNode = nil;
          Action: string = "DescribeLifecycleHooks"; Version: string = "2011-01-01"): Recallable =
  ## getDescribeLifecycleHooks
  ## Describes the lifecycle hooks for the specified Auto Scaling group.
  ##   LifecycleHookNames: JArray
  ##                     : The names of one or more lifecycle hooks. If you omit this parameter, all lifecycle hooks are described.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602867 = newJObject()
  if LifecycleHookNames != nil:
    query_602867.add "LifecycleHookNames", LifecycleHookNames
  add(query_602867, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_602867, "Action", newJString(Action))
  add(query_602867, "Version", newJString(Version))
  result = call_602866.call(nil, query_602867, nil, nil, nil)

var getDescribeLifecycleHooks* = Call_GetDescribeLifecycleHooks_602851(
    name: "getDescribeLifecycleHooks", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeLifecycleHooks",
    validator: validate_GetDescribeLifecycleHooks_602852, base: "/",
    url: url_GetDescribeLifecycleHooks_602853,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeLoadBalancerTargetGroups_602904 = ref object of OpenApiRestCall_601389
proc url_PostDescribeLoadBalancerTargetGroups_602906(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeLoadBalancerTargetGroups_602905(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the target groups for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602907 = query.getOrDefault("Action")
  valid_602907 = validateParameter(valid_602907, JString, required = true, default = newJString(
      "DescribeLoadBalancerTargetGroups"))
  if valid_602907 != nil:
    section.add "Action", valid_602907
  var valid_602908 = query.getOrDefault("Version")
  valid_602908 = validateParameter(valid_602908, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602908 != nil:
    section.add "Version", valid_602908
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602909 = header.getOrDefault("X-Amz-Signature")
  valid_602909 = validateParameter(valid_602909, JString, required = false,
                                 default = nil)
  if valid_602909 != nil:
    section.add "X-Amz-Signature", valid_602909
  var valid_602910 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602910 = validateParameter(valid_602910, JString, required = false,
                                 default = nil)
  if valid_602910 != nil:
    section.add "X-Amz-Content-Sha256", valid_602910
  var valid_602911 = header.getOrDefault("X-Amz-Date")
  valid_602911 = validateParameter(valid_602911, JString, required = false,
                                 default = nil)
  if valid_602911 != nil:
    section.add "X-Amz-Date", valid_602911
  var valid_602912 = header.getOrDefault("X-Amz-Credential")
  valid_602912 = validateParameter(valid_602912, JString, required = false,
                                 default = nil)
  if valid_602912 != nil:
    section.add "X-Amz-Credential", valid_602912
  var valid_602913 = header.getOrDefault("X-Amz-Security-Token")
  valid_602913 = validateParameter(valid_602913, JString, required = false,
                                 default = nil)
  if valid_602913 != nil:
    section.add "X-Amz-Security-Token", valid_602913
  var valid_602914 = header.getOrDefault("X-Amz-Algorithm")
  valid_602914 = validateParameter(valid_602914, JString, required = false,
                                 default = nil)
  if valid_602914 != nil:
    section.add "X-Amz-Algorithm", valid_602914
  var valid_602915 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602915 = validateParameter(valid_602915, JString, required = false,
                                 default = nil)
  if valid_602915 != nil:
    section.add "X-Amz-SignedHeaders", valid_602915
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_602916 = formData.getOrDefault("AutoScalingGroupName")
  valid_602916 = validateParameter(valid_602916, JString, required = true,
                                 default = nil)
  if valid_602916 != nil:
    section.add "AutoScalingGroupName", valid_602916
  var valid_602917 = formData.getOrDefault("NextToken")
  valid_602917 = validateParameter(valid_602917, JString, required = false,
                                 default = nil)
  if valid_602917 != nil:
    section.add "NextToken", valid_602917
  var valid_602918 = formData.getOrDefault("MaxRecords")
  valid_602918 = validateParameter(valid_602918, JInt, required = false, default = nil)
  if valid_602918 != nil:
    section.add "MaxRecords", valid_602918
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602919: Call_PostDescribeLoadBalancerTargetGroups_602904;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the target groups for the specified Auto Scaling group.
  ## 
  let valid = call_602919.validator(path, query, header, formData, body)
  let scheme = call_602919.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602919.url(scheme.get, call_602919.host, call_602919.base,
                         call_602919.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602919, url, valid)

proc call*(call_602920: Call_PostDescribeLoadBalancerTargetGroups_602904;
          AutoScalingGroupName: string; NextToken: string = ""; MaxRecords: int = 0;
          Action: string = "DescribeLoadBalancerTargetGroups";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeLoadBalancerTargetGroups
  ## Describes the target groups for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602921 = newJObject()
  var formData_602922 = newJObject()
  add(formData_602922, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_602922, "NextToken", newJString(NextToken))
  add(formData_602922, "MaxRecords", newJInt(MaxRecords))
  add(query_602921, "Action", newJString(Action))
  add(query_602921, "Version", newJString(Version))
  result = call_602920.call(nil, query_602921, nil, formData_602922, nil)

var postDescribeLoadBalancerTargetGroups* = Call_PostDescribeLoadBalancerTargetGroups_602904(
    name: "postDescribeLoadBalancerTargetGroups", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeLoadBalancerTargetGroups",
    validator: validate_PostDescribeLoadBalancerTargetGroups_602905, base: "/",
    url: url_PostDescribeLoadBalancerTargetGroups_602906,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeLoadBalancerTargetGroups_602886 = ref object of OpenApiRestCall_601389
proc url_GetDescribeLoadBalancerTargetGroups_602888(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeLoadBalancerTargetGroups_602887(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the target groups for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  section = newJObject()
  var valid_602889 = query.getOrDefault("NextToken")
  valid_602889 = validateParameter(valid_602889, JString, required = false,
                                 default = nil)
  if valid_602889 != nil:
    section.add "NextToken", valid_602889
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_602890 = query.getOrDefault("AutoScalingGroupName")
  valid_602890 = validateParameter(valid_602890, JString, required = true,
                                 default = nil)
  if valid_602890 != nil:
    section.add "AutoScalingGroupName", valid_602890
  var valid_602891 = query.getOrDefault("Action")
  valid_602891 = validateParameter(valid_602891, JString, required = true, default = newJString(
      "DescribeLoadBalancerTargetGroups"))
  if valid_602891 != nil:
    section.add "Action", valid_602891
  var valid_602892 = query.getOrDefault("Version")
  valid_602892 = validateParameter(valid_602892, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602892 != nil:
    section.add "Version", valid_602892
  var valid_602893 = query.getOrDefault("MaxRecords")
  valid_602893 = validateParameter(valid_602893, JInt, required = false, default = nil)
  if valid_602893 != nil:
    section.add "MaxRecords", valid_602893
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602894 = header.getOrDefault("X-Amz-Signature")
  valid_602894 = validateParameter(valid_602894, JString, required = false,
                                 default = nil)
  if valid_602894 != nil:
    section.add "X-Amz-Signature", valid_602894
  var valid_602895 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602895 = validateParameter(valid_602895, JString, required = false,
                                 default = nil)
  if valid_602895 != nil:
    section.add "X-Amz-Content-Sha256", valid_602895
  var valid_602896 = header.getOrDefault("X-Amz-Date")
  valid_602896 = validateParameter(valid_602896, JString, required = false,
                                 default = nil)
  if valid_602896 != nil:
    section.add "X-Amz-Date", valid_602896
  var valid_602897 = header.getOrDefault("X-Amz-Credential")
  valid_602897 = validateParameter(valid_602897, JString, required = false,
                                 default = nil)
  if valid_602897 != nil:
    section.add "X-Amz-Credential", valid_602897
  var valid_602898 = header.getOrDefault("X-Amz-Security-Token")
  valid_602898 = validateParameter(valid_602898, JString, required = false,
                                 default = nil)
  if valid_602898 != nil:
    section.add "X-Amz-Security-Token", valid_602898
  var valid_602899 = header.getOrDefault("X-Amz-Algorithm")
  valid_602899 = validateParameter(valid_602899, JString, required = false,
                                 default = nil)
  if valid_602899 != nil:
    section.add "X-Amz-Algorithm", valid_602899
  var valid_602900 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602900 = validateParameter(valid_602900, JString, required = false,
                                 default = nil)
  if valid_602900 != nil:
    section.add "X-Amz-SignedHeaders", valid_602900
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602901: Call_GetDescribeLoadBalancerTargetGroups_602886;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the target groups for the specified Auto Scaling group.
  ## 
  let valid = call_602901.validator(path, query, header, formData, body)
  let scheme = call_602901.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602901.url(scheme.get, call_602901.host, call_602901.base,
                         call_602901.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602901, url, valid)

proc call*(call_602902: Call_GetDescribeLoadBalancerTargetGroups_602886;
          AutoScalingGroupName: string; NextToken: string = "";
          Action: string = "DescribeLoadBalancerTargetGroups";
          Version: string = "2011-01-01"; MaxRecords: int = 0): Recallable =
  ## getDescribeLoadBalancerTargetGroups
  ## Describes the target groups for the specified Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  var query_602903 = newJObject()
  add(query_602903, "NextToken", newJString(NextToken))
  add(query_602903, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_602903, "Action", newJString(Action))
  add(query_602903, "Version", newJString(Version))
  add(query_602903, "MaxRecords", newJInt(MaxRecords))
  result = call_602902.call(nil, query_602903, nil, nil, nil)

var getDescribeLoadBalancerTargetGroups* = Call_GetDescribeLoadBalancerTargetGroups_602886(
    name: "getDescribeLoadBalancerTargetGroups", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeLoadBalancerTargetGroups",
    validator: validate_GetDescribeLoadBalancerTargetGroups_602887, base: "/",
    url: url_GetDescribeLoadBalancerTargetGroups_602888,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeLoadBalancers_602941 = ref object of OpenApiRestCall_601389
proc url_PostDescribeLoadBalancers_602943(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeLoadBalancers_602942(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the load balancers for the specified Auto Scaling group.</p> <p>This operation describes only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DescribeLoadBalancerTargetGroups</a> instead.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602944 = query.getOrDefault("Action")
  valid_602944 = validateParameter(valid_602944, JString, required = true,
                                 default = newJString("DescribeLoadBalancers"))
  if valid_602944 != nil:
    section.add "Action", valid_602944
  var valid_602945 = query.getOrDefault("Version")
  valid_602945 = validateParameter(valid_602945, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602945 != nil:
    section.add "Version", valid_602945
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602946 = header.getOrDefault("X-Amz-Signature")
  valid_602946 = validateParameter(valid_602946, JString, required = false,
                                 default = nil)
  if valid_602946 != nil:
    section.add "X-Amz-Signature", valid_602946
  var valid_602947 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602947 = validateParameter(valid_602947, JString, required = false,
                                 default = nil)
  if valid_602947 != nil:
    section.add "X-Amz-Content-Sha256", valid_602947
  var valid_602948 = header.getOrDefault("X-Amz-Date")
  valid_602948 = validateParameter(valid_602948, JString, required = false,
                                 default = nil)
  if valid_602948 != nil:
    section.add "X-Amz-Date", valid_602948
  var valid_602949 = header.getOrDefault("X-Amz-Credential")
  valid_602949 = validateParameter(valid_602949, JString, required = false,
                                 default = nil)
  if valid_602949 != nil:
    section.add "X-Amz-Credential", valid_602949
  var valid_602950 = header.getOrDefault("X-Amz-Security-Token")
  valid_602950 = validateParameter(valid_602950, JString, required = false,
                                 default = nil)
  if valid_602950 != nil:
    section.add "X-Amz-Security-Token", valid_602950
  var valid_602951 = header.getOrDefault("X-Amz-Algorithm")
  valid_602951 = validateParameter(valid_602951, JString, required = false,
                                 default = nil)
  if valid_602951 != nil:
    section.add "X-Amz-Algorithm", valid_602951
  var valid_602952 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602952 = validateParameter(valid_602952, JString, required = false,
                                 default = nil)
  if valid_602952 != nil:
    section.add "X-Amz-SignedHeaders", valid_602952
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_602953 = formData.getOrDefault("AutoScalingGroupName")
  valid_602953 = validateParameter(valid_602953, JString, required = true,
                                 default = nil)
  if valid_602953 != nil:
    section.add "AutoScalingGroupName", valid_602953
  var valid_602954 = formData.getOrDefault("NextToken")
  valid_602954 = validateParameter(valid_602954, JString, required = false,
                                 default = nil)
  if valid_602954 != nil:
    section.add "NextToken", valid_602954
  var valid_602955 = formData.getOrDefault("MaxRecords")
  valid_602955 = validateParameter(valid_602955, JInt, required = false, default = nil)
  if valid_602955 != nil:
    section.add "MaxRecords", valid_602955
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602956: Call_PostDescribeLoadBalancers_602941; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the load balancers for the specified Auto Scaling group.</p> <p>This operation describes only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DescribeLoadBalancerTargetGroups</a> instead.</p>
  ## 
  let valid = call_602956.validator(path, query, header, formData, body)
  let scheme = call_602956.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602956.url(scheme.get, call_602956.host, call_602956.base,
                         call_602956.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602956, url, valid)

proc call*(call_602957: Call_PostDescribeLoadBalancers_602941;
          AutoScalingGroupName: string; NextToken: string = ""; MaxRecords: int = 0;
          Action: string = "DescribeLoadBalancers"; Version: string = "2011-01-01"): Recallable =
  ## postDescribeLoadBalancers
  ## <p>Describes the load balancers for the specified Auto Scaling group.</p> <p>This operation describes only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DescribeLoadBalancerTargetGroups</a> instead.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602958 = newJObject()
  var formData_602959 = newJObject()
  add(formData_602959, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_602959, "NextToken", newJString(NextToken))
  add(formData_602959, "MaxRecords", newJInt(MaxRecords))
  add(query_602958, "Action", newJString(Action))
  add(query_602958, "Version", newJString(Version))
  result = call_602957.call(nil, query_602958, nil, formData_602959, nil)

var postDescribeLoadBalancers* = Call_PostDescribeLoadBalancers_602941(
    name: "postDescribeLoadBalancers", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeLoadBalancers",
    validator: validate_PostDescribeLoadBalancers_602942, base: "/",
    url: url_PostDescribeLoadBalancers_602943,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeLoadBalancers_602923 = ref object of OpenApiRestCall_601389
proc url_GetDescribeLoadBalancers_602925(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeLoadBalancers_602924(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the load balancers for the specified Auto Scaling group.</p> <p>This operation describes only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DescribeLoadBalancerTargetGroups</a> instead.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  section = newJObject()
  var valid_602926 = query.getOrDefault("NextToken")
  valid_602926 = validateParameter(valid_602926, JString, required = false,
                                 default = nil)
  if valid_602926 != nil:
    section.add "NextToken", valid_602926
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_602927 = query.getOrDefault("AutoScalingGroupName")
  valid_602927 = validateParameter(valid_602927, JString, required = true,
                                 default = nil)
  if valid_602927 != nil:
    section.add "AutoScalingGroupName", valid_602927
  var valid_602928 = query.getOrDefault("Action")
  valid_602928 = validateParameter(valid_602928, JString, required = true,
                                 default = newJString("DescribeLoadBalancers"))
  if valid_602928 != nil:
    section.add "Action", valid_602928
  var valid_602929 = query.getOrDefault("Version")
  valid_602929 = validateParameter(valid_602929, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602929 != nil:
    section.add "Version", valid_602929
  var valid_602930 = query.getOrDefault("MaxRecords")
  valid_602930 = validateParameter(valid_602930, JInt, required = false, default = nil)
  if valid_602930 != nil:
    section.add "MaxRecords", valid_602930
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602931 = header.getOrDefault("X-Amz-Signature")
  valid_602931 = validateParameter(valid_602931, JString, required = false,
                                 default = nil)
  if valid_602931 != nil:
    section.add "X-Amz-Signature", valid_602931
  var valid_602932 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602932 = validateParameter(valid_602932, JString, required = false,
                                 default = nil)
  if valid_602932 != nil:
    section.add "X-Amz-Content-Sha256", valid_602932
  var valid_602933 = header.getOrDefault("X-Amz-Date")
  valid_602933 = validateParameter(valid_602933, JString, required = false,
                                 default = nil)
  if valid_602933 != nil:
    section.add "X-Amz-Date", valid_602933
  var valid_602934 = header.getOrDefault("X-Amz-Credential")
  valid_602934 = validateParameter(valid_602934, JString, required = false,
                                 default = nil)
  if valid_602934 != nil:
    section.add "X-Amz-Credential", valid_602934
  var valid_602935 = header.getOrDefault("X-Amz-Security-Token")
  valid_602935 = validateParameter(valid_602935, JString, required = false,
                                 default = nil)
  if valid_602935 != nil:
    section.add "X-Amz-Security-Token", valid_602935
  var valid_602936 = header.getOrDefault("X-Amz-Algorithm")
  valid_602936 = validateParameter(valid_602936, JString, required = false,
                                 default = nil)
  if valid_602936 != nil:
    section.add "X-Amz-Algorithm", valid_602936
  var valid_602937 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602937 = validateParameter(valid_602937, JString, required = false,
                                 default = nil)
  if valid_602937 != nil:
    section.add "X-Amz-SignedHeaders", valid_602937
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602938: Call_GetDescribeLoadBalancers_602923; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the load balancers for the specified Auto Scaling group.</p> <p>This operation describes only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DescribeLoadBalancerTargetGroups</a> instead.</p>
  ## 
  let valid = call_602938.validator(path, query, header, formData, body)
  let scheme = call_602938.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602938.url(scheme.get, call_602938.host, call_602938.base,
                         call_602938.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602938, url, valid)

proc call*(call_602939: Call_GetDescribeLoadBalancers_602923;
          AutoScalingGroupName: string; NextToken: string = "";
          Action: string = "DescribeLoadBalancers"; Version: string = "2011-01-01";
          MaxRecords: int = 0): Recallable =
  ## getDescribeLoadBalancers
  ## <p>Describes the load balancers for the specified Auto Scaling group.</p> <p>This operation describes only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DescribeLoadBalancerTargetGroups</a> instead.</p>
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  var query_602940 = newJObject()
  add(query_602940, "NextToken", newJString(NextToken))
  add(query_602940, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_602940, "Action", newJString(Action))
  add(query_602940, "Version", newJString(Version))
  add(query_602940, "MaxRecords", newJInt(MaxRecords))
  result = call_602939.call(nil, query_602940, nil, nil, nil)

var getDescribeLoadBalancers* = Call_GetDescribeLoadBalancers_602923(
    name: "getDescribeLoadBalancers", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeLoadBalancers",
    validator: validate_GetDescribeLoadBalancers_602924, base: "/",
    url: url_GetDescribeLoadBalancers_602925, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeMetricCollectionTypes_602975 = ref object of OpenApiRestCall_601389
proc url_PostDescribeMetricCollectionTypes_602977(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeMetricCollectionTypes_602976(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.</p> <p>The <code>GroupStandbyInstances</code> metric is not returned by default. You must explicitly request this metric when calling <a>EnableMetricsCollection</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602978 = query.getOrDefault("Action")
  valid_602978 = validateParameter(valid_602978, JString, required = true, default = newJString(
      "DescribeMetricCollectionTypes"))
  if valid_602978 != nil:
    section.add "Action", valid_602978
  var valid_602979 = query.getOrDefault("Version")
  valid_602979 = validateParameter(valid_602979, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602979 != nil:
    section.add "Version", valid_602979
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602980 = header.getOrDefault("X-Amz-Signature")
  valid_602980 = validateParameter(valid_602980, JString, required = false,
                                 default = nil)
  if valid_602980 != nil:
    section.add "X-Amz-Signature", valid_602980
  var valid_602981 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602981 = validateParameter(valid_602981, JString, required = false,
                                 default = nil)
  if valid_602981 != nil:
    section.add "X-Amz-Content-Sha256", valid_602981
  var valid_602982 = header.getOrDefault("X-Amz-Date")
  valid_602982 = validateParameter(valid_602982, JString, required = false,
                                 default = nil)
  if valid_602982 != nil:
    section.add "X-Amz-Date", valid_602982
  var valid_602983 = header.getOrDefault("X-Amz-Credential")
  valid_602983 = validateParameter(valid_602983, JString, required = false,
                                 default = nil)
  if valid_602983 != nil:
    section.add "X-Amz-Credential", valid_602983
  var valid_602984 = header.getOrDefault("X-Amz-Security-Token")
  valid_602984 = validateParameter(valid_602984, JString, required = false,
                                 default = nil)
  if valid_602984 != nil:
    section.add "X-Amz-Security-Token", valid_602984
  var valid_602985 = header.getOrDefault("X-Amz-Algorithm")
  valid_602985 = validateParameter(valid_602985, JString, required = false,
                                 default = nil)
  if valid_602985 != nil:
    section.add "X-Amz-Algorithm", valid_602985
  var valid_602986 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602986 = validateParameter(valid_602986, JString, required = false,
                                 default = nil)
  if valid_602986 != nil:
    section.add "X-Amz-SignedHeaders", valid_602986
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602987: Call_PostDescribeMetricCollectionTypes_602975;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.</p> <p>The <code>GroupStandbyInstances</code> metric is not returned by default. You must explicitly request this metric when calling <a>EnableMetricsCollection</a>.</p>
  ## 
  let valid = call_602987.validator(path, query, header, formData, body)
  let scheme = call_602987.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602987.url(scheme.get, call_602987.host, call_602987.base,
                         call_602987.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602987, url, valid)

proc call*(call_602988: Call_PostDescribeMetricCollectionTypes_602975;
          Action: string = "DescribeMetricCollectionTypes";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeMetricCollectionTypes
  ## <p>Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.</p> <p>The <code>GroupStandbyInstances</code> metric is not returned by default. You must explicitly request this metric when calling <a>EnableMetricsCollection</a>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602989 = newJObject()
  add(query_602989, "Action", newJString(Action))
  add(query_602989, "Version", newJString(Version))
  result = call_602988.call(nil, query_602989, nil, nil, nil)

var postDescribeMetricCollectionTypes* = Call_PostDescribeMetricCollectionTypes_602975(
    name: "postDescribeMetricCollectionTypes", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeMetricCollectionTypes",
    validator: validate_PostDescribeMetricCollectionTypes_602976, base: "/",
    url: url_PostDescribeMetricCollectionTypes_602977,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeMetricCollectionTypes_602960 = ref object of OpenApiRestCall_601389
proc url_GetDescribeMetricCollectionTypes_602962(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeMetricCollectionTypes_602961(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.</p> <p>The <code>GroupStandbyInstances</code> metric is not returned by default. You must explicitly request this metric when calling <a>EnableMetricsCollection</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602963 = query.getOrDefault("Action")
  valid_602963 = validateParameter(valid_602963, JString, required = true, default = newJString(
      "DescribeMetricCollectionTypes"))
  if valid_602963 != nil:
    section.add "Action", valid_602963
  var valid_602964 = query.getOrDefault("Version")
  valid_602964 = validateParameter(valid_602964, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602964 != nil:
    section.add "Version", valid_602964
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602965 = header.getOrDefault("X-Amz-Signature")
  valid_602965 = validateParameter(valid_602965, JString, required = false,
                                 default = nil)
  if valid_602965 != nil:
    section.add "X-Amz-Signature", valid_602965
  var valid_602966 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602966 = validateParameter(valid_602966, JString, required = false,
                                 default = nil)
  if valid_602966 != nil:
    section.add "X-Amz-Content-Sha256", valid_602966
  var valid_602967 = header.getOrDefault("X-Amz-Date")
  valid_602967 = validateParameter(valid_602967, JString, required = false,
                                 default = nil)
  if valid_602967 != nil:
    section.add "X-Amz-Date", valid_602967
  var valid_602968 = header.getOrDefault("X-Amz-Credential")
  valid_602968 = validateParameter(valid_602968, JString, required = false,
                                 default = nil)
  if valid_602968 != nil:
    section.add "X-Amz-Credential", valid_602968
  var valid_602969 = header.getOrDefault("X-Amz-Security-Token")
  valid_602969 = validateParameter(valid_602969, JString, required = false,
                                 default = nil)
  if valid_602969 != nil:
    section.add "X-Amz-Security-Token", valid_602969
  var valid_602970 = header.getOrDefault("X-Amz-Algorithm")
  valid_602970 = validateParameter(valid_602970, JString, required = false,
                                 default = nil)
  if valid_602970 != nil:
    section.add "X-Amz-Algorithm", valid_602970
  var valid_602971 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602971 = validateParameter(valid_602971, JString, required = false,
                                 default = nil)
  if valid_602971 != nil:
    section.add "X-Amz-SignedHeaders", valid_602971
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602972: Call_GetDescribeMetricCollectionTypes_602960;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.</p> <p>The <code>GroupStandbyInstances</code> metric is not returned by default. You must explicitly request this metric when calling <a>EnableMetricsCollection</a>.</p>
  ## 
  let valid = call_602972.validator(path, query, header, formData, body)
  let scheme = call_602972.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602972.url(scheme.get, call_602972.host, call_602972.base,
                         call_602972.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602972, url, valid)

proc call*(call_602973: Call_GetDescribeMetricCollectionTypes_602960;
          Action: string = "DescribeMetricCollectionTypes";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeMetricCollectionTypes
  ## <p>Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.</p> <p>The <code>GroupStandbyInstances</code> metric is not returned by default. You must explicitly request this metric when calling <a>EnableMetricsCollection</a>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602974 = newJObject()
  add(query_602974, "Action", newJString(Action))
  add(query_602974, "Version", newJString(Version))
  result = call_602973.call(nil, query_602974, nil, nil, nil)

var getDescribeMetricCollectionTypes* = Call_GetDescribeMetricCollectionTypes_602960(
    name: "getDescribeMetricCollectionTypes", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeMetricCollectionTypes",
    validator: validate_GetDescribeMetricCollectionTypes_602961, base: "/",
    url: url_GetDescribeMetricCollectionTypes_602962,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeNotificationConfigurations_603008 = ref object of OpenApiRestCall_601389
proc url_PostDescribeNotificationConfigurations_603010(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeNotificationConfigurations_603009(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the notification actions associated with the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603011 = query.getOrDefault("Action")
  valid_603011 = validateParameter(valid_603011, JString, required = true, default = newJString(
      "DescribeNotificationConfigurations"))
  if valid_603011 != nil:
    section.add "Action", valid_603011
  var valid_603012 = query.getOrDefault("Version")
  valid_603012 = validateParameter(valid_603012, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603012 != nil:
    section.add "Version", valid_603012
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603013 = header.getOrDefault("X-Amz-Signature")
  valid_603013 = validateParameter(valid_603013, JString, required = false,
                                 default = nil)
  if valid_603013 != nil:
    section.add "X-Amz-Signature", valid_603013
  var valid_603014 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603014 = validateParameter(valid_603014, JString, required = false,
                                 default = nil)
  if valid_603014 != nil:
    section.add "X-Amz-Content-Sha256", valid_603014
  var valid_603015 = header.getOrDefault("X-Amz-Date")
  valid_603015 = validateParameter(valid_603015, JString, required = false,
                                 default = nil)
  if valid_603015 != nil:
    section.add "X-Amz-Date", valid_603015
  var valid_603016 = header.getOrDefault("X-Amz-Credential")
  valid_603016 = validateParameter(valid_603016, JString, required = false,
                                 default = nil)
  if valid_603016 != nil:
    section.add "X-Amz-Credential", valid_603016
  var valid_603017 = header.getOrDefault("X-Amz-Security-Token")
  valid_603017 = validateParameter(valid_603017, JString, required = false,
                                 default = nil)
  if valid_603017 != nil:
    section.add "X-Amz-Security-Token", valid_603017
  var valid_603018 = header.getOrDefault("X-Amz-Algorithm")
  valid_603018 = validateParameter(valid_603018, JString, required = false,
                                 default = nil)
  if valid_603018 != nil:
    section.add "X-Amz-Algorithm", valid_603018
  var valid_603019 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603019 = validateParameter(valid_603019, JString, required = false,
                                 default = nil)
  if valid_603019 != nil:
    section.add "X-Amz-SignedHeaders", valid_603019
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupNames: JArray
  ##                        : The name of the Auto Scaling group.
  section = newJObject()
  var valid_603020 = formData.getOrDefault("NextToken")
  valid_603020 = validateParameter(valid_603020, JString, required = false,
                                 default = nil)
  if valid_603020 != nil:
    section.add "NextToken", valid_603020
  var valid_603021 = formData.getOrDefault("MaxRecords")
  valid_603021 = validateParameter(valid_603021, JInt, required = false, default = nil)
  if valid_603021 != nil:
    section.add "MaxRecords", valid_603021
  var valid_603022 = formData.getOrDefault("AutoScalingGroupNames")
  valid_603022 = validateParameter(valid_603022, JArray, required = false,
                                 default = nil)
  if valid_603022 != nil:
    section.add "AutoScalingGroupNames", valid_603022
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603023: Call_PostDescribeNotificationConfigurations_603008;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the notification actions associated with the specified Auto Scaling group.
  ## 
  let valid = call_603023.validator(path, query, header, formData, body)
  let scheme = call_603023.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603023.url(scheme.get, call_603023.host, call_603023.base,
                         call_603023.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603023, url, valid)

proc call*(call_603024: Call_PostDescribeNotificationConfigurations_603008;
          NextToken: string = ""; MaxRecords: int = 0;
          AutoScalingGroupNames: JsonNode = nil;
          Action: string = "DescribeNotificationConfigurations";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeNotificationConfigurations
  ## Describes the notification actions associated with the specified Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupNames: JArray
  ##                        : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603025 = newJObject()
  var formData_603026 = newJObject()
  add(formData_603026, "NextToken", newJString(NextToken))
  add(formData_603026, "MaxRecords", newJInt(MaxRecords))
  if AutoScalingGroupNames != nil:
    formData_603026.add "AutoScalingGroupNames", AutoScalingGroupNames
  add(query_603025, "Action", newJString(Action))
  add(query_603025, "Version", newJString(Version))
  result = call_603024.call(nil, query_603025, nil, formData_603026, nil)

var postDescribeNotificationConfigurations* = Call_PostDescribeNotificationConfigurations_603008(
    name: "postDescribeNotificationConfigurations", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeNotificationConfigurations",
    validator: validate_PostDescribeNotificationConfigurations_603009, base: "/",
    url: url_PostDescribeNotificationConfigurations_603010,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeNotificationConfigurations_602990 = ref object of OpenApiRestCall_601389
proc url_GetDescribeNotificationConfigurations_602992(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeNotificationConfigurations_602991(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the notification actions associated with the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   AutoScalingGroupNames: JArray
  ##                        : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  section = newJObject()
  var valid_602993 = query.getOrDefault("NextToken")
  valid_602993 = validateParameter(valid_602993, JString, required = false,
                                 default = nil)
  if valid_602993 != nil:
    section.add "NextToken", valid_602993
  var valid_602994 = query.getOrDefault("AutoScalingGroupNames")
  valid_602994 = validateParameter(valid_602994, JArray, required = false,
                                 default = nil)
  if valid_602994 != nil:
    section.add "AutoScalingGroupNames", valid_602994
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602995 = query.getOrDefault("Action")
  valid_602995 = validateParameter(valid_602995, JString, required = true, default = newJString(
      "DescribeNotificationConfigurations"))
  if valid_602995 != nil:
    section.add "Action", valid_602995
  var valid_602996 = query.getOrDefault("Version")
  valid_602996 = validateParameter(valid_602996, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602996 != nil:
    section.add "Version", valid_602996
  var valid_602997 = query.getOrDefault("MaxRecords")
  valid_602997 = validateParameter(valid_602997, JInt, required = false, default = nil)
  if valid_602997 != nil:
    section.add "MaxRecords", valid_602997
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602998 = header.getOrDefault("X-Amz-Signature")
  valid_602998 = validateParameter(valid_602998, JString, required = false,
                                 default = nil)
  if valid_602998 != nil:
    section.add "X-Amz-Signature", valid_602998
  var valid_602999 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602999 = validateParameter(valid_602999, JString, required = false,
                                 default = nil)
  if valid_602999 != nil:
    section.add "X-Amz-Content-Sha256", valid_602999
  var valid_603000 = header.getOrDefault("X-Amz-Date")
  valid_603000 = validateParameter(valid_603000, JString, required = false,
                                 default = nil)
  if valid_603000 != nil:
    section.add "X-Amz-Date", valid_603000
  var valid_603001 = header.getOrDefault("X-Amz-Credential")
  valid_603001 = validateParameter(valid_603001, JString, required = false,
                                 default = nil)
  if valid_603001 != nil:
    section.add "X-Amz-Credential", valid_603001
  var valid_603002 = header.getOrDefault("X-Amz-Security-Token")
  valid_603002 = validateParameter(valid_603002, JString, required = false,
                                 default = nil)
  if valid_603002 != nil:
    section.add "X-Amz-Security-Token", valid_603002
  var valid_603003 = header.getOrDefault("X-Amz-Algorithm")
  valid_603003 = validateParameter(valid_603003, JString, required = false,
                                 default = nil)
  if valid_603003 != nil:
    section.add "X-Amz-Algorithm", valid_603003
  var valid_603004 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603004 = validateParameter(valid_603004, JString, required = false,
                                 default = nil)
  if valid_603004 != nil:
    section.add "X-Amz-SignedHeaders", valid_603004
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603005: Call_GetDescribeNotificationConfigurations_602990;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the notification actions associated with the specified Auto Scaling group.
  ## 
  let valid = call_603005.validator(path, query, header, formData, body)
  let scheme = call_603005.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603005.url(scheme.get, call_603005.host, call_603005.base,
                         call_603005.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603005, url, valid)

proc call*(call_603006: Call_GetDescribeNotificationConfigurations_602990;
          NextToken: string = ""; AutoScalingGroupNames: JsonNode = nil;
          Action: string = "DescribeNotificationConfigurations";
          Version: string = "2011-01-01"; MaxRecords: int = 0): Recallable =
  ## getDescribeNotificationConfigurations
  ## Describes the notification actions associated with the specified Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   AutoScalingGroupNames: JArray
  ##                        : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  var query_603007 = newJObject()
  add(query_603007, "NextToken", newJString(NextToken))
  if AutoScalingGroupNames != nil:
    query_603007.add "AutoScalingGroupNames", AutoScalingGroupNames
  add(query_603007, "Action", newJString(Action))
  add(query_603007, "Version", newJString(Version))
  add(query_603007, "MaxRecords", newJInt(MaxRecords))
  result = call_603006.call(nil, query_603007, nil, nil, nil)

var getDescribeNotificationConfigurations* = Call_GetDescribeNotificationConfigurations_602990(
    name: "getDescribeNotificationConfigurations", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeNotificationConfigurations",
    validator: validate_GetDescribeNotificationConfigurations_602991, base: "/",
    url: url_GetDescribeNotificationConfigurations_602992,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribePolicies_603047 = ref object of OpenApiRestCall_601389
proc url_PostDescribePolicies_603049(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribePolicies_603048(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the policies for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603050 = query.getOrDefault("Action")
  valid_603050 = validateParameter(valid_603050, JString, required = true,
                                 default = newJString("DescribePolicies"))
  if valid_603050 != nil:
    section.add "Action", valid_603050
  var valid_603051 = query.getOrDefault("Version")
  valid_603051 = validateParameter(valid_603051, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603051 != nil:
    section.add "Version", valid_603051
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603052 = header.getOrDefault("X-Amz-Signature")
  valid_603052 = validateParameter(valid_603052, JString, required = false,
                                 default = nil)
  if valid_603052 != nil:
    section.add "X-Amz-Signature", valid_603052
  var valid_603053 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603053 = validateParameter(valid_603053, JString, required = false,
                                 default = nil)
  if valid_603053 != nil:
    section.add "X-Amz-Content-Sha256", valid_603053
  var valid_603054 = header.getOrDefault("X-Amz-Date")
  valid_603054 = validateParameter(valid_603054, JString, required = false,
                                 default = nil)
  if valid_603054 != nil:
    section.add "X-Amz-Date", valid_603054
  var valid_603055 = header.getOrDefault("X-Amz-Credential")
  valid_603055 = validateParameter(valid_603055, JString, required = false,
                                 default = nil)
  if valid_603055 != nil:
    section.add "X-Amz-Credential", valid_603055
  var valid_603056 = header.getOrDefault("X-Amz-Security-Token")
  valid_603056 = validateParameter(valid_603056, JString, required = false,
                                 default = nil)
  if valid_603056 != nil:
    section.add "X-Amz-Security-Token", valid_603056
  var valid_603057 = header.getOrDefault("X-Amz-Algorithm")
  valid_603057 = validateParameter(valid_603057, JString, required = false,
                                 default = nil)
  if valid_603057 != nil:
    section.add "X-Amz-Algorithm", valid_603057
  var valid_603058 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603058 = validateParameter(valid_603058, JString, required = false,
                                 default = nil)
  if valid_603058 != nil:
    section.add "X-Amz-SignedHeaders", valid_603058
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to be returned with each call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   PolicyTypes: JArray
  ##              : One or more policy types. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>.
  ##   PolicyNames: JArray
  ##              : The names of one or more policies. If you omit this parameter, all policies are described. If a group name is provided, the results are limited to that group. This list is limited to 50 items. If you specify an unknown policy name, it is ignored with no error.
  section = newJObject()
  var valid_603059 = formData.getOrDefault("AutoScalingGroupName")
  valid_603059 = validateParameter(valid_603059, JString, required = false,
                                 default = nil)
  if valid_603059 != nil:
    section.add "AutoScalingGroupName", valid_603059
  var valid_603060 = formData.getOrDefault("NextToken")
  valid_603060 = validateParameter(valid_603060, JString, required = false,
                                 default = nil)
  if valid_603060 != nil:
    section.add "NextToken", valid_603060
  var valid_603061 = formData.getOrDefault("MaxRecords")
  valid_603061 = validateParameter(valid_603061, JInt, required = false, default = nil)
  if valid_603061 != nil:
    section.add "MaxRecords", valid_603061
  var valid_603062 = formData.getOrDefault("PolicyTypes")
  valid_603062 = validateParameter(valid_603062, JArray, required = false,
                                 default = nil)
  if valid_603062 != nil:
    section.add "PolicyTypes", valid_603062
  var valid_603063 = formData.getOrDefault("PolicyNames")
  valid_603063 = validateParameter(valid_603063, JArray, required = false,
                                 default = nil)
  if valid_603063 != nil:
    section.add "PolicyNames", valid_603063
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603064: Call_PostDescribePolicies_603047; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the policies for the specified Auto Scaling group.
  ## 
  let valid = call_603064.validator(path, query, header, formData, body)
  let scheme = call_603064.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603064.url(scheme.get, call_603064.host, call_603064.base,
                         call_603064.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603064, url, valid)

proc call*(call_603065: Call_PostDescribePolicies_603047;
          AutoScalingGroupName: string = ""; NextToken: string = "";
          MaxRecords: int = 0; PolicyTypes: JsonNode = nil; PolicyNames: JsonNode = nil;
          Action: string = "DescribePolicies"; Version: string = "2011-01-01"): Recallable =
  ## postDescribePolicies
  ## Describes the policies for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: int
  ##             : The maximum number of items to be returned with each call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   PolicyTypes: JArray
  ##              : One or more policy types. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>.
  ##   PolicyNames: JArray
  ##              : The names of one or more policies. If you omit this parameter, all policies are described. If a group name is provided, the results are limited to that group. This list is limited to 50 items. If you specify an unknown policy name, it is ignored with no error.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603066 = newJObject()
  var formData_603067 = newJObject()
  add(formData_603067, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_603067, "NextToken", newJString(NextToken))
  add(formData_603067, "MaxRecords", newJInt(MaxRecords))
  if PolicyTypes != nil:
    formData_603067.add "PolicyTypes", PolicyTypes
  if PolicyNames != nil:
    formData_603067.add "PolicyNames", PolicyNames
  add(query_603066, "Action", newJString(Action))
  add(query_603066, "Version", newJString(Version))
  result = call_603065.call(nil, query_603066, nil, formData_603067, nil)

var postDescribePolicies* = Call_PostDescribePolicies_603047(
    name: "postDescribePolicies", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribePolicies",
    validator: validate_PostDescribePolicies_603048, base: "/",
    url: url_PostDescribePolicies_603049, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribePolicies_603027 = ref object of OpenApiRestCall_601389
proc url_GetDescribePolicies_603029(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribePolicies_603028(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Describes the policies for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   PolicyTypes: JArray
  ##              : One or more policy types. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>.
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to be returned with each call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   PolicyNames: JArray
  ##              : The names of one or more policies. If you omit this parameter, all policies are described. If a group name is provided, the results are limited to that group. This list is limited to 50 items. If you specify an unknown policy name, it is ignored with no error.
  section = newJObject()
  var valid_603030 = query.getOrDefault("NextToken")
  valid_603030 = validateParameter(valid_603030, JString, required = false,
                                 default = nil)
  if valid_603030 != nil:
    section.add "NextToken", valid_603030
  var valid_603031 = query.getOrDefault("AutoScalingGroupName")
  valid_603031 = validateParameter(valid_603031, JString, required = false,
                                 default = nil)
  if valid_603031 != nil:
    section.add "AutoScalingGroupName", valid_603031
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603032 = query.getOrDefault("Action")
  valid_603032 = validateParameter(valid_603032, JString, required = true,
                                 default = newJString("DescribePolicies"))
  if valid_603032 != nil:
    section.add "Action", valid_603032
  var valid_603033 = query.getOrDefault("PolicyTypes")
  valid_603033 = validateParameter(valid_603033, JArray, required = false,
                                 default = nil)
  if valid_603033 != nil:
    section.add "PolicyTypes", valid_603033
  var valid_603034 = query.getOrDefault("Version")
  valid_603034 = validateParameter(valid_603034, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603034 != nil:
    section.add "Version", valid_603034
  var valid_603035 = query.getOrDefault("MaxRecords")
  valid_603035 = validateParameter(valid_603035, JInt, required = false, default = nil)
  if valid_603035 != nil:
    section.add "MaxRecords", valid_603035
  var valid_603036 = query.getOrDefault("PolicyNames")
  valid_603036 = validateParameter(valid_603036, JArray, required = false,
                                 default = nil)
  if valid_603036 != nil:
    section.add "PolicyNames", valid_603036
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603037 = header.getOrDefault("X-Amz-Signature")
  valid_603037 = validateParameter(valid_603037, JString, required = false,
                                 default = nil)
  if valid_603037 != nil:
    section.add "X-Amz-Signature", valid_603037
  var valid_603038 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603038 = validateParameter(valid_603038, JString, required = false,
                                 default = nil)
  if valid_603038 != nil:
    section.add "X-Amz-Content-Sha256", valid_603038
  var valid_603039 = header.getOrDefault("X-Amz-Date")
  valid_603039 = validateParameter(valid_603039, JString, required = false,
                                 default = nil)
  if valid_603039 != nil:
    section.add "X-Amz-Date", valid_603039
  var valid_603040 = header.getOrDefault("X-Amz-Credential")
  valid_603040 = validateParameter(valid_603040, JString, required = false,
                                 default = nil)
  if valid_603040 != nil:
    section.add "X-Amz-Credential", valid_603040
  var valid_603041 = header.getOrDefault("X-Amz-Security-Token")
  valid_603041 = validateParameter(valid_603041, JString, required = false,
                                 default = nil)
  if valid_603041 != nil:
    section.add "X-Amz-Security-Token", valid_603041
  var valid_603042 = header.getOrDefault("X-Amz-Algorithm")
  valid_603042 = validateParameter(valid_603042, JString, required = false,
                                 default = nil)
  if valid_603042 != nil:
    section.add "X-Amz-Algorithm", valid_603042
  var valid_603043 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603043 = validateParameter(valid_603043, JString, required = false,
                                 default = nil)
  if valid_603043 != nil:
    section.add "X-Amz-SignedHeaders", valid_603043
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603044: Call_GetDescribePolicies_603027; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the policies for the specified Auto Scaling group.
  ## 
  let valid = call_603044.validator(path, query, header, formData, body)
  let scheme = call_603044.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603044.url(scheme.get, call_603044.host, call_603044.base,
                         call_603044.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603044, url, valid)

proc call*(call_603045: Call_GetDescribePolicies_603027; NextToken: string = "";
          AutoScalingGroupName: string = ""; Action: string = "DescribePolicies";
          PolicyTypes: JsonNode = nil; Version: string = "2011-01-01";
          MaxRecords: int = 0; PolicyNames: JsonNode = nil): Recallable =
  ## getDescribePolicies
  ## Describes the policies for the specified Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   PolicyTypes: JArray
  ##              : One or more policy types. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>.
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to be returned with each call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   PolicyNames: JArray
  ##              : The names of one or more policies. If you omit this parameter, all policies are described. If a group name is provided, the results are limited to that group. This list is limited to 50 items. If you specify an unknown policy name, it is ignored with no error.
  var query_603046 = newJObject()
  add(query_603046, "NextToken", newJString(NextToken))
  add(query_603046, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_603046, "Action", newJString(Action))
  if PolicyTypes != nil:
    query_603046.add "PolicyTypes", PolicyTypes
  add(query_603046, "Version", newJString(Version))
  add(query_603046, "MaxRecords", newJInt(MaxRecords))
  if PolicyNames != nil:
    query_603046.add "PolicyNames", PolicyNames
  result = call_603045.call(nil, query_603046, nil, nil, nil)

var getDescribePolicies* = Call_GetDescribePolicies_603027(
    name: "getDescribePolicies", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribePolicies",
    validator: validate_GetDescribePolicies_603028, base: "/",
    url: url_GetDescribePolicies_603029, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeScalingActivities_603087 = ref object of OpenApiRestCall_601389
proc url_PostDescribeScalingActivities_603089(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeScalingActivities_603088(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more scaling activities for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603090 = query.getOrDefault("Action")
  valid_603090 = validateParameter(valid_603090, JString, required = true, default = newJString(
      "DescribeScalingActivities"))
  if valid_603090 != nil:
    section.add "Action", valid_603090
  var valid_603091 = query.getOrDefault("Version")
  valid_603091 = validateParameter(valid_603091, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603091 != nil:
    section.add "Version", valid_603091
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603092 = header.getOrDefault("X-Amz-Signature")
  valid_603092 = validateParameter(valid_603092, JString, required = false,
                                 default = nil)
  if valid_603092 != nil:
    section.add "X-Amz-Signature", valid_603092
  var valid_603093 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603093 = validateParameter(valid_603093, JString, required = false,
                                 default = nil)
  if valid_603093 != nil:
    section.add "X-Amz-Content-Sha256", valid_603093
  var valid_603094 = header.getOrDefault("X-Amz-Date")
  valid_603094 = validateParameter(valid_603094, JString, required = false,
                                 default = nil)
  if valid_603094 != nil:
    section.add "X-Amz-Date", valid_603094
  var valid_603095 = header.getOrDefault("X-Amz-Credential")
  valid_603095 = validateParameter(valid_603095, JString, required = false,
                                 default = nil)
  if valid_603095 != nil:
    section.add "X-Amz-Credential", valid_603095
  var valid_603096 = header.getOrDefault("X-Amz-Security-Token")
  valid_603096 = validateParameter(valid_603096, JString, required = false,
                                 default = nil)
  if valid_603096 != nil:
    section.add "X-Amz-Security-Token", valid_603096
  var valid_603097 = header.getOrDefault("X-Amz-Algorithm")
  valid_603097 = validateParameter(valid_603097, JString, required = false,
                                 default = nil)
  if valid_603097 != nil:
    section.add "X-Amz-Algorithm", valid_603097
  var valid_603098 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603098 = validateParameter(valid_603098, JString, required = false,
                                 default = nil)
  if valid_603098 != nil:
    section.add "X-Amz-SignedHeaders", valid_603098
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   ActivityIds: JArray
  ##              : The activity IDs of the desired scaling activities. You can specify up to 50 IDs. If you omit this parameter, all activities for the past six weeks are described. If unknown activities are requested, they are ignored with no error. If you specify an Auto Scaling group, the results are limited to that group.
  section = newJObject()
  var valid_603099 = formData.getOrDefault("AutoScalingGroupName")
  valid_603099 = validateParameter(valid_603099, JString, required = false,
                                 default = nil)
  if valid_603099 != nil:
    section.add "AutoScalingGroupName", valid_603099
  var valid_603100 = formData.getOrDefault("NextToken")
  valid_603100 = validateParameter(valid_603100, JString, required = false,
                                 default = nil)
  if valid_603100 != nil:
    section.add "NextToken", valid_603100
  var valid_603101 = formData.getOrDefault("MaxRecords")
  valid_603101 = validateParameter(valid_603101, JInt, required = false, default = nil)
  if valid_603101 != nil:
    section.add "MaxRecords", valid_603101
  var valid_603102 = formData.getOrDefault("ActivityIds")
  valid_603102 = validateParameter(valid_603102, JArray, required = false,
                                 default = nil)
  if valid_603102 != nil:
    section.add "ActivityIds", valid_603102
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603103: Call_PostDescribeScalingActivities_603087; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes one or more scaling activities for the specified Auto Scaling group.
  ## 
  let valid = call_603103.validator(path, query, header, formData, body)
  let scheme = call_603103.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603103.url(scheme.get, call_603103.host, call_603103.base,
                         call_603103.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603103, url, valid)

proc call*(call_603104: Call_PostDescribeScalingActivities_603087;
          AutoScalingGroupName: string = ""; NextToken: string = "";
          MaxRecords: int = 0; Action: string = "DescribeScalingActivities";
          Version: string = "2011-01-01"; ActivityIds: JsonNode = nil): Recallable =
  ## postDescribeScalingActivities
  ## Describes one or more scaling activities for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ActivityIds: JArray
  ##              : The activity IDs of the desired scaling activities. You can specify up to 50 IDs. If you omit this parameter, all activities for the past six weeks are described. If unknown activities are requested, they are ignored with no error. If you specify an Auto Scaling group, the results are limited to that group.
  var query_603105 = newJObject()
  var formData_603106 = newJObject()
  add(formData_603106, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_603106, "NextToken", newJString(NextToken))
  add(formData_603106, "MaxRecords", newJInt(MaxRecords))
  add(query_603105, "Action", newJString(Action))
  add(query_603105, "Version", newJString(Version))
  if ActivityIds != nil:
    formData_603106.add "ActivityIds", ActivityIds
  result = call_603104.call(nil, query_603105, nil, formData_603106, nil)

var postDescribeScalingActivities* = Call_PostDescribeScalingActivities_603087(
    name: "postDescribeScalingActivities", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeScalingActivities",
    validator: validate_PostDescribeScalingActivities_603088, base: "/",
    url: url_PostDescribeScalingActivities_603089,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeScalingActivities_603068 = ref object of OpenApiRestCall_601389
proc url_GetDescribeScalingActivities_603070(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeScalingActivities_603069(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more scaling activities for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ActivityIds: JArray
  ##              : The activity IDs of the desired scaling activities. You can specify up to 50 IDs. If you omit this parameter, all activities for the past six weeks are described. If unknown activities are requested, they are ignored with no error. If you specify an Auto Scaling group, the results are limited to that group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  section = newJObject()
  var valid_603071 = query.getOrDefault("ActivityIds")
  valid_603071 = validateParameter(valid_603071, JArray, required = false,
                                 default = nil)
  if valid_603071 != nil:
    section.add "ActivityIds", valid_603071
  var valid_603072 = query.getOrDefault("NextToken")
  valid_603072 = validateParameter(valid_603072, JString, required = false,
                                 default = nil)
  if valid_603072 != nil:
    section.add "NextToken", valid_603072
  var valid_603073 = query.getOrDefault("AutoScalingGroupName")
  valid_603073 = validateParameter(valid_603073, JString, required = false,
                                 default = nil)
  if valid_603073 != nil:
    section.add "AutoScalingGroupName", valid_603073
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603074 = query.getOrDefault("Action")
  valid_603074 = validateParameter(valid_603074, JString, required = true, default = newJString(
      "DescribeScalingActivities"))
  if valid_603074 != nil:
    section.add "Action", valid_603074
  var valid_603075 = query.getOrDefault("Version")
  valid_603075 = validateParameter(valid_603075, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603075 != nil:
    section.add "Version", valid_603075
  var valid_603076 = query.getOrDefault("MaxRecords")
  valid_603076 = validateParameter(valid_603076, JInt, required = false, default = nil)
  if valid_603076 != nil:
    section.add "MaxRecords", valid_603076
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603077 = header.getOrDefault("X-Amz-Signature")
  valid_603077 = validateParameter(valid_603077, JString, required = false,
                                 default = nil)
  if valid_603077 != nil:
    section.add "X-Amz-Signature", valid_603077
  var valid_603078 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603078 = validateParameter(valid_603078, JString, required = false,
                                 default = nil)
  if valid_603078 != nil:
    section.add "X-Amz-Content-Sha256", valid_603078
  var valid_603079 = header.getOrDefault("X-Amz-Date")
  valid_603079 = validateParameter(valid_603079, JString, required = false,
                                 default = nil)
  if valid_603079 != nil:
    section.add "X-Amz-Date", valid_603079
  var valid_603080 = header.getOrDefault("X-Amz-Credential")
  valid_603080 = validateParameter(valid_603080, JString, required = false,
                                 default = nil)
  if valid_603080 != nil:
    section.add "X-Amz-Credential", valid_603080
  var valid_603081 = header.getOrDefault("X-Amz-Security-Token")
  valid_603081 = validateParameter(valid_603081, JString, required = false,
                                 default = nil)
  if valid_603081 != nil:
    section.add "X-Amz-Security-Token", valid_603081
  var valid_603082 = header.getOrDefault("X-Amz-Algorithm")
  valid_603082 = validateParameter(valid_603082, JString, required = false,
                                 default = nil)
  if valid_603082 != nil:
    section.add "X-Amz-Algorithm", valid_603082
  var valid_603083 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603083 = validateParameter(valid_603083, JString, required = false,
                                 default = nil)
  if valid_603083 != nil:
    section.add "X-Amz-SignedHeaders", valid_603083
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603084: Call_GetDescribeScalingActivities_603068; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes one or more scaling activities for the specified Auto Scaling group.
  ## 
  let valid = call_603084.validator(path, query, header, formData, body)
  let scheme = call_603084.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603084.url(scheme.get, call_603084.host, call_603084.base,
                         call_603084.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603084, url, valid)

proc call*(call_603085: Call_GetDescribeScalingActivities_603068;
          ActivityIds: JsonNode = nil; NextToken: string = "";
          AutoScalingGroupName: string = "";
          Action: string = "DescribeScalingActivities";
          Version: string = "2011-01-01"; MaxRecords: int = 0): Recallable =
  ## getDescribeScalingActivities
  ## Describes one or more scaling activities for the specified Auto Scaling group.
  ##   ActivityIds: JArray
  ##              : The activity IDs of the desired scaling activities. You can specify up to 50 IDs. If you omit this parameter, all activities for the past six weeks are described. If unknown activities are requested, they are ignored with no error. If you specify an Auto Scaling group, the results are limited to that group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  var query_603086 = newJObject()
  if ActivityIds != nil:
    query_603086.add "ActivityIds", ActivityIds
  add(query_603086, "NextToken", newJString(NextToken))
  add(query_603086, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_603086, "Action", newJString(Action))
  add(query_603086, "Version", newJString(Version))
  add(query_603086, "MaxRecords", newJInt(MaxRecords))
  result = call_603085.call(nil, query_603086, nil, nil, nil)

var getDescribeScalingActivities* = Call_GetDescribeScalingActivities_603068(
    name: "getDescribeScalingActivities", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeScalingActivities",
    validator: validate_GetDescribeScalingActivities_603069, base: "/",
    url: url_GetDescribeScalingActivities_603070,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeScalingProcessTypes_603122 = ref object of OpenApiRestCall_601389
proc url_PostDescribeScalingProcessTypes_603124(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeScalingProcessTypes_603123(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the scaling process types for use with <a>ResumeProcesses</a> and <a>SuspendProcesses</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603125 = query.getOrDefault("Action")
  valid_603125 = validateParameter(valid_603125, JString, required = true, default = newJString(
      "DescribeScalingProcessTypes"))
  if valid_603125 != nil:
    section.add "Action", valid_603125
  var valid_603126 = query.getOrDefault("Version")
  valid_603126 = validateParameter(valid_603126, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603126 != nil:
    section.add "Version", valid_603126
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603127 = header.getOrDefault("X-Amz-Signature")
  valid_603127 = validateParameter(valid_603127, JString, required = false,
                                 default = nil)
  if valid_603127 != nil:
    section.add "X-Amz-Signature", valid_603127
  var valid_603128 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603128 = validateParameter(valid_603128, JString, required = false,
                                 default = nil)
  if valid_603128 != nil:
    section.add "X-Amz-Content-Sha256", valid_603128
  var valid_603129 = header.getOrDefault("X-Amz-Date")
  valid_603129 = validateParameter(valid_603129, JString, required = false,
                                 default = nil)
  if valid_603129 != nil:
    section.add "X-Amz-Date", valid_603129
  var valid_603130 = header.getOrDefault("X-Amz-Credential")
  valid_603130 = validateParameter(valid_603130, JString, required = false,
                                 default = nil)
  if valid_603130 != nil:
    section.add "X-Amz-Credential", valid_603130
  var valid_603131 = header.getOrDefault("X-Amz-Security-Token")
  valid_603131 = validateParameter(valid_603131, JString, required = false,
                                 default = nil)
  if valid_603131 != nil:
    section.add "X-Amz-Security-Token", valid_603131
  var valid_603132 = header.getOrDefault("X-Amz-Algorithm")
  valid_603132 = validateParameter(valid_603132, JString, required = false,
                                 default = nil)
  if valid_603132 != nil:
    section.add "X-Amz-Algorithm", valid_603132
  var valid_603133 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603133 = validateParameter(valid_603133, JString, required = false,
                                 default = nil)
  if valid_603133 != nil:
    section.add "X-Amz-SignedHeaders", valid_603133
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603134: Call_PostDescribeScalingProcessTypes_603122;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the scaling process types for use with <a>ResumeProcesses</a> and <a>SuspendProcesses</a>.
  ## 
  let valid = call_603134.validator(path, query, header, formData, body)
  let scheme = call_603134.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603134.url(scheme.get, call_603134.host, call_603134.base,
                         call_603134.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603134, url, valid)

proc call*(call_603135: Call_PostDescribeScalingProcessTypes_603122;
          Action: string = "DescribeScalingProcessTypes";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeScalingProcessTypes
  ## Describes the scaling process types for use with <a>ResumeProcesses</a> and <a>SuspendProcesses</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603136 = newJObject()
  add(query_603136, "Action", newJString(Action))
  add(query_603136, "Version", newJString(Version))
  result = call_603135.call(nil, query_603136, nil, nil, nil)

var postDescribeScalingProcessTypes* = Call_PostDescribeScalingProcessTypes_603122(
    name: "postDescribeScalingProcessTypes", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeScalingProcessTypes",
    validator: validate_PostDescribeScalingProcessTypes_603123, base: "/",
    url: url_PostDescribeScalingProcessTypes_603124,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeScalingProcessTypes_603107 = ref object of OpenApiRestCall_601389
proc url_GetDescribeScalingProcessTypes_603109(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeScalingProcessTypes_603108(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the scaling process types for use with <a>ResumeProcesses</a> and <a>SuspendProcesses</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603110 = query.getOrDefault("Action")
  valid_603110 = validateParameter(valid_603110, JString, required = true, default = newJString(
      "DescribeScalingProcessTypes"))
  if valid_603110 != nil:
    section.add "Action", valid_603110
  var valid_603111 = query.getOrDefault("Version")
  valid_603111 = validateParameter(valid_603111, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603111 != nil:
    section.add "Version", valid_603111
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603112 = header.getOrDefault("X-Amz-Signature")
  valid_603112 = validateParameter(valid_603112, JString, required = false,
                                 default = nil)
  if valid_603112 != nil:
    section.add "X-Amz-Signature", valid_603112
  var valid_603113 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603113 = validateParameter(valid_603113, JString, required = false,
                                 default = nil)
  if valid_603113 != nil:
    section.add "X-Amz-Content-Sha256", valid_603113
  var valid_603114 = header.getOrDefault("X-Amz-Date")
  valid_603114 = validateParameter(valid_603114, JString, required = false,
                                 default = nil)
  if valid_603114 != nil:
    section.add "X-Amz-Date", valid_603114
  var valid_603115 = header.getOrDefault("X-Amz-Credential")
  valid_603115 = validateParameter(valid_603115, JString, required = false,
                                 default = nil)
  if valid_603115 != nil:
    section.add "X-Amz-Credential", valid_603115
  var valid_603116 = header.getOrDefault("X-Amz-Security-Token")
  valid_603116 = validateParameter(valid_603116, JString, required = false,
                                 default = nil)
  if valid_603116 != nil:
    section.add "X-Amz-Security-Token", valid_603116
  var valid_603117 = header.getOrDefault("X-Amz-Algorithm")
  valid_603117 = validateParameter(valid_603117, JString, required = false,
                                 default = nil)
  if valid_603117 != nil:
    section.add "X-Amz-Algorithm", valid_603117
  var valid_603118 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603118 = validateParameter(valid_603118, JString, required = false,
                                 default = nil)
  if valid_603118 != nil:
    section.add "X-Amz-SignedHeaders", valid_603118
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603119: Call_GetDescribeScalingProcessTypes_603107; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the scaling process types for use with <a>ResumeProcesses</a> and <a>SuspendProcesses</a>.
  ## 
  let valid = call_603119.validator(path, query, header, formData, body)
  let scheme = call_603119.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603119.url(scheme.get, call_603119.host, call_603119.base,
                         call_603119.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603119, url, valid)

proc call*(call_603120: Call_GetDescribeScalingProcessTypes_603107;
          Action: string = "DescribeScalingProcessTypes";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeScalingProcessTypes
  ## Describes the scaling process types for use with <a>ResumeProcesses</a> and <a>SuspendProcesses</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603121 = newJObject()
  add(query_603121, "Action", newJString(Action))
  add(query_603121, "Version", newJString(Version))
  result = call_603120.call(nil, query_603121, nil, nil, nil)

var getDescribeScalingProcessTypes* = Call_GetDescribeScalingProcessTypes_603107(
    name: "getDescribeScalingProcessTypes", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeScalingProcessTypes",
    validator: validate_GetDescribeScalingProcessTypes_603108, base: "/",
    url: url_GetDescribeScalingProcessTypes_603109,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeScheduledActions_603158 = ref object of OpenApiRestCall_601389
proc url_PostDescribeScheduledActions_603160(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeScheduledActions_603159(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the actions scheduled for your Auto Scaling group that haven't run or that have not reached their end time. To describe the actions that have already run, use <a>DescribeScalingActivities</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603161 = query.getOrDefault("Action")
  valid_603161 = validateParameter(valid_603161, JString, required = true, default = newJString(
      "DescribeScheduledActions"))
  if valid_603161 != nil:
    section.add "Action", valid_603161
  var valid_603162 = query.getOrDefault("Version")
  valid_603162 = validateParameter(valid_603162, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603162 != nil:
    section.add "Version", valid_603162
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603163 = header.getOrDefault("X-Amz-Signature")
  valid_603163 = validateParameter(valid_603163, JString, required = false,
                                 default = nil)
  if valid_603163 != nil:
    section.add "X-Amz-Signature", valid_603163
  var valid_603164 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603164 = validateParameter(valid_603164, JString, required = false,
                                 default = nil)
  if valid_603164 != nil:
    section.add "X-Amz-Content-Sha256", valid_603164
  var valid_603165 = header.getOrDefault("X-Amz-Date")
  valid_603165 = validateParameter(valid_603165, JString, required = false,
                                 default = nil)
  if valid_603165 != nil:
    section.add "X-Amz-Date", valid_603165
  var valid_603166 = header.getOrDefault("X-Amz-Credential")
  valid_603166 = validateParameter(valid_603166, JString, required = false,
                                 default = nil)
  if valid_603166 != nil:
    section.add "X-Amz-Credential", valid_603166
  var valid_603167 = header.getOrDefault("X-Amz-Security-Token")
  valid_603167 = validateParameter(valid_603167, JString, required = false,
                                 default = nil)
  if valid_603167 != nil:
    section.add "X-Amz-Security-Token", valid_603167
  var valid_603168 = header.getOrDefault("X-Amz-Algorithm")
  valid_603168 = validateParameter(valid_603168, JString, required = false,
                                 default = nil)
  if valid_603168 != nil:
    section.add "X-Amz-Algorithm", valid_603168
  var valid_603169 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603169 = validateParameter(valid_603169, JString, required = false,
                                 default = nil)
  if valid_603169 != nil:
    section.add "X-Amz-SignedHeaders", valid_603169
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   EndTime: JString
  ##          : The latest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   StartTime: JString
  ##            : The earliest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   ScheduledActionNames: JArray
  ##                       : The names of one or more scheduled actions. You can specify up to 50 actions. If you omit this parameter, all scheduled actions are described. If you specify an unknown scheduled action, it is ignored with no error.
  section = newJObject()
  var valid_603170 = formData.getOrDefault("AutoScalingGroupName")
  valid_603170 = validateParameter(valid_603170, JString, required = false,
                                 default = nil)
  if valid_603170 != nil:
    section.add "AutoScalingGroupName", valid_603170
  var valid_603171 = formData.getOrDefault("NextToken")
  valid_603171 = validateParameter(valid_603171, JString, required = false,
                                 default = nil)
  if valid_603171 != nil:
    section.add "NextToken", valid_603171
  var valid_603172 = formData.getOrDefault("MaxRecords")
  valid_603172 = validateParameter(valid_603172, JInt, required = false, default = nil)
  if valid_603172 != nil:
    section.add "MaxRecords", valid_603172
  var valid_603173 = formData.getOrDefault("EndTime")
  valid_603173 = validateParameter(valid_603173, JString, required = false,
                                 default = nil)
  if valid_603173 != nil:
    section.add "EndTime", valid_603173
  var valid_603174 = formData.getOrDefault("StartTime")
  valid_603174 = validateParameter(valid_603174, JString, required = false,
                                 default = nil)
  if valid_603174 != nil:
    section.add "StartTime", valid_603174
  var valid_603175 = formData.getOrDefault("ScheduledActionNames")
  valid_603175 = validateParameter(valid_603175, JArray, required = false,
                                 default = nil)
  if valid_603175 != nil:
    section.add "ScheduledActionNames", valid_603175
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603176: Call_PostDescribeScheduledActions_603158; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the actions scheduled for your Auto Scaling group that haven't run or that have not reached their end time. To describe the actions that have already run, use <a>DescribeScalingActivities</a>.
  ## 
  let valid = call_603176.validator(path, query, header, formData, body)
  let scheme = call_603176.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603176.url(scheme.get, call_603176.host, call_603176.base,
                         call_603176.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603176, url, valid)

proc call*(call_603177: Call_PostDescribeScheduledActions_603158;
          AutoScalingGroupName: string = ""; NextToken: string = "";
          MaxRecords: int = 0; EndTime: string = ""; StartTime: string = "";
          Action: string = "DescribeScheduledActions";
          Version: string = "2011-01-01"; ScheduledActionNames: JsonNode = nil): Recallable =
  ## postDescribeScheduledActions
  ## Describes the actions scheduled for your Auto Scaling group that haven't run or that have not reached their end time. To describe the actions that have already run, use <a>DescribeScalingActivities</a>.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   EndTime: string
  ##          : The latest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   StartTime: string
  ##            : The earliest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ScheduledActionNames: JArray
  ##                       : The names of one or more scheduled actions. You can specify up to 50 actions. If you omit this parameter, all scheduled actions are described. If you specify an unknown scheduled action, it is ignored with no error.
  var query_603178 = newJObject()
  var formData_603179 = newJObject()
  add(formData_603179, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_603179, "NextToken", newJString(NextToken))
  add(formData_603179, "MaxRecords", newJInt(MaxRecords))
  add(formData_603179, "EndTime", newJString(EndTime))
  add(formData_603179, "StartTime", newJString(StartTime))
  add(query_603178, "Action", newJString(Action))
  add(query_603178, "Version", newJString(Version))
  if ScheduledActionNames != nil:
    formData_603179.add "ScheduledActionNames", ScheduledActionNames
  result = call_603177.call(nil, query_603178, nil, formData_603179, nil)

var postDescribeScheduledActions* = Call_PostDescribeScheduledActions_603158(
    name: "postDescribeScheduledActions", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeScheduledActions",
    validator: validate_PostDescribeScheduledActions_603159, base: "/",
    url: url_PostDescribeScheduledActions_603160,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeScheduledActions_603137 = ref object of OpenApiRestCall_601389
proc url_GetDescribeScheduledActions_603139(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeScheduledActions_603138(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the actions scheduled for your Auto Scaling group that haven't run or that have not reached their end time. To describe the actions that have already run, use <a>DescribeScalingActivities</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   ScheduledActionNames: JArray
  ##                       : The names of one or more scheduled actions. You can specify up to 50 actions. If you omit this parameter, all scheduled actions are described. If you specify an unknown scheduled action, it is ignored with no error.
  ##   StartTime: JString
  ##            : The earliest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   EndTime: JString
  ##          : The latest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  section = newJObject()
  var valid_603140 = query.getOrDefault("NextToken")
  valid_603140 = validateParameter(valid_603140, JString, required = false,
                                 default = nil)
  if valid_603140 != nil:
    section.add "NextToken", valid_603140
  var valid_603141 = query.getOrDefault("AutoScalingGroupName")
  valid_603141 = validateParameter(valid_603141, JString, required = false,
                                 default = nil)
  if valid_603141 != nil:
    section.add "AutoScalingGroupName", valid_603141
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603142 = query.getOrDefault("Action")
  valid_603142 = validateParameter(valid_603142, JString, required = true, default = newJString(
      "DescribeScheduledActions"))
  if valid_603142 != nil:
    section.add "Action", valid_603142
  var valid_603143 = query.getOrDefault("ScheduledActionNames")
  valid_603143 = validateParameter(valid_603143, JArray, required = false,
                                 default = nil)
  if valid_603143 != nil:
    section.add "ScheduledActionNames", valid_603143
  var valid_603144 = query.getOrDefault("StartTime")
  valid_603144 = validateParameter(valid_603144, JString, required = false,
                                 default = nil)
  if valid_603144 != nil:
    section.add "StartTime", valid_603144
  var valid_603145 = query.getOrDefault("EndTime")
  valid_603145 = validateParameter(valid_603145, JString, required = false,
                                 default = nil)
  if valid_603145 != nil:
    section.add "EndTime", valid_603145
  var valid_603146 = query.getOrDefault("Version")
  valid_603146 = validateParameter(valid_603146, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603146 != nil:
    section.add "Version", valid_603146
  var valid_603147 = query.getOrDefault("MaxRecords")
  valid_603147 = validateParameter(valid_603147, JInt, required = false, default = nil)
  if valid_603147 != nil:
    section.add "MaxRecords", valid_603147
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603148 = header.getOrDefault("X-Amz-Signature")
  valid_603148 = validateParameter(valid_603148, JString, required = false,
                                 default = nil)
  if valid_603148 != nil:
    section.add "X-Amz-Signature", valid_603148
  var valid_603149 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603149 = validateParameter(valid_603149, JString, required = false,
                                 default = nil)
  if valid_603149 != nil:
    section.add "X-Amz-Content-Sha256", valid_603149
  var valid_603150 = header.getOrDefault("X-Amz-Date")
  valid_603150 = validateParameter(valid_603150, JString, required = false,
                                 default = nil)
  if valid_603150 != nil:
    section.add "X-Amz-Date", valid_603150
  var valid_603151 = header.getOrDefault("X-Amz-Credential")
  valid_603151 = validateParameter(valid_603151, JString, required = false,
                                 default = nil)
  if valid_603151 != nil:
    section.add "X-Amz-Credential", valid_603151
  var valid_603152 = header.getOrDefault("X-Amz-Security-Token")
  valid_603152 = validateParameter(valid_603152, JString, required = false,
                                 default = nil)
  if valid_603152 != nil:
    section.add "X-Amz-Security-Token", valid_603152
  var valid_603153 = header.getOrDefault("X-Amz-Algorithm")
  valid_603153 = validateParameter(valid_603153, JString, required = false,
                                 default = nil)
  if valid_603153 != nil:
    section.add "X-Amz-Algorithm", valid_603153
  var valid_603154 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603154 = validateParameter(valid_603154, JString, required = false,
                                 default = nil)
  if valid_603154 != nil:
    section.add "X-Amz-SignedHeaders", valid_603154
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603155: Call_GetDescribeScheduledActions_603137; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the actions scheduled for your Auto Scaling group that haven't run or that have not reached their end time. To describe the actions that have already run, use <a>DescribeScalingActivities</a>.
  ## 
  let valid = call_603155.validator(path, query, header, formData, body)
  let scheme = call_603155.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603155.url(scheme.get, call_603155.host, call_603155.base,
                         call_603155.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603155, url, valid)

proc call*(call_603156: Call_GetDescribeScheduledActions_603137;
          NextToken: string = ""; AutoScalingGroupName: string = "";
          Action: string = "DescribeScheduledActions";
          ScheduledActionNames: JsonNode = nil; StartTime: string = "";
          EndTime: string = ""; Version: string = "2011-01-01"; MaxRecords: int = 0): Recallable =
  ## getDescribeScheduledActions
  ## Describes the actions scheduled for your Auto Scaling group that haven't run or that have not reached their end time. To describe the actions that have already run, use <a>DescribeScalingActivities</a>.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   ScheduledActionNames: JArray
  ##                       : The names of one or more scheduled actions. You can specify up to 50 actions. If you omit this parameter, all scheduled actions are described. If you specify an unknown scheduled action, it is ignored with no error.
  ##   StartTime: string
  ##            : The earliest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   EndTime: string
  ##          : The latest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  var query_603157 = newJObject()
  add(query_603157, "NextToken", newJString(NextToken))
  add(query_603157, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_603157, "Action", newJString(Action))
  if ScheduledActionNames != nil:
    query_603157.add "ScheduledActionNames", ScheduledActionNames
  add(query_603157, "StartTime", newJString(StartTime))
  add(query_603157, "EndTime", newJString(EndTime))
  add(query_603157, "Version", newJString(Version))
  add(query_603157, "MaxRecords", newJInt(MaxRecords))
  result = call_603156.call(nil, query_603157, nil, nil, nil)

var getDescribeScheduledActions* = Call_GetDescribeScheduledActions_603137(
    name: "getDescribeScheduledActions", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeScheduledActions",
    validator: validate_GetDescribeScheduledActions_603138, base: "/",
    url: url_GetDescribeScheduledActions_603139,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeTags_603198 = ref object of OpenApiRestCall_601389
proc url_PostDescribeTags_603200(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeTags_603199(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Describes the specified tags.</p> <p>You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.</p> <p>You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there's no match, no special message is returned.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603201 = query.getOrDefault("Action")
  valid_603201 = validateParameter(valid_603201, JString, required = true,
                                 default = newJString("DescribeTags"))
  if valid_603201 != nil:
    section.add "Action", valid_603201
  var valid_603202 = query.getOrDefault("Version")
  valid_603202 = validateParameter(valid_603202, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603202 != nil:
    section.add "Version", valid_603202
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603203 = header.getOrDefault("X-Amz-Signature")
  valid_603203 = validateParameter(valid_603203, JString, required = false,
                                 default = nil)
  if valid_603203 != nil:
    section.add "X-Amz-Signature", valid_603203
  var valid_603204 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603204 = validateParameter(valid_603204, JString, required = false,
                                 default = nil)
  if valid_603204 != nil:
    section.add "X-Amz-Content-Sha256", valid_603204
  var valid_603205 = header.getOrDefault("X-Amz-Date")
  valid_603205 = validateParameter(valid_603205, JString, required = false,
                                 default = nil)
  if valid_603205 != nil:
    section.add "X-Amz-Date", valid_603205
  var valid_603206 = header.getOrDefault("X-Amz-Credential")
  valid_603206 = validateParameter(valid_603206, JString, required = false,
                                 default = nil)
  if valid_603206 != nil:
    section.add "X-Amz-Credential", valid_603206
  var valid_603207 = header.getOrDefault("X-Amz-Security-Token")
  valid_603207 = validateParameter(valid_603207, JString, required = false,
                                 default = nil)
  if valid_603207 != nil:
    section.add "X-Amz-Security-Token", valid_603207
  var valid_603208 = header.getOrDefault("X-Amz-Algorithm")
  valid_603208 = validateParameter(valid_603208, JString, required = false,
                                 default = nil)
  if valid_603208 != nil:
    section.add "X-Amz-Algorithm", valid_603208
  var valid_603209 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603209 = validateParameter(valid_603209, JString, required = false,
                                 default = nil)
  if valid_603209 != nil:
    section.add "X-Amz-SignedHeaders", valid_603209
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   Filters: JArray
  ##          : One or more filters to scope the tags to return. The maximum number of filters per filter type (for example, <code>auto-scaling-group</code>) is 1000.
  section = newJObject()
  var valid_603210 = formData.getOrDefault("NextToken")
  valid_603210 = validateParameter(valid_603210, JString, required = false,
                                 default = nil)
  if valid_603210 != nil:
    section.add "NextToken", valid_603210
  var valid_603211 = formData.getOrDefault("MaxRecords")
  valid_603211 = validateParameter(valid_603211, JInt, required = false, default = nil)
  if valid_603211 != nil:
    section.add "MaxRecords", valid_603211
  var valid_603212 = formData.getOrDefault("Filters")
  valid_603212 = validateParameter(valid_603212, JArray, required = false,
                                 default = nil)
  if valid_603212 != nil:
    section.add "Filters", valid_603212
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603213: Call_PostDescribeTags_603198; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the specified tags.</p> <p>You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.</p> <p>You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there's no match, no special message is returned.</p>
  ## 
  let valid = call_603213.validator(path, query, header, formData, body)
  let scheme = call_603213.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603213.url(scheme.get, call_603213.host, call_603213.base,
                         call_603213.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603213, url, valid)

proc call*(call_603214: Call_PostDescribeTags_603198; NextToken: string = "";
          MaxRecords: int = 0; Action: string = "DescribeTags"; Filters: JsonNode = nil;
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeTags
  ## <p>Describes the specified tags.</p> <p>You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.</p> <p>You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there's no match, no special message is returned.</p>
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : One or more filters to scope the tags to return. The maximum number of filters per filter type (for example, <code>auto-scaling-group</code>) is 1000.
  ##   Version: string (required)
  var query_603215 = newJObject()
  var formData_603216 = newJObject()
  add(formData_603216, "NextToken", newJString(NextToken))
  add(formData_603216, "MaxRecords", newJInt(MaxRecords))
  add(query_603215, "Action", newJString(Action))
  if Filters != nil:
    formData_603216.add "Filters", Filters
  add(query_603215, "Version", newJString(Version))
  result = call_603214.call(nil, query_603215, nil, formData_603216, nil)

var postDescribeTags* = Call_PostDescribeTags_603198(name: "postDescribeTags",
    meth: HttpMethod.HttpPost, host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeTags", validator: validate_PostDescribeTags_603199,
    base: "/", url: url_PostDescribeTags_603200,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeTags_603180 = ref object of OpenApiRestCall_601389
proc url_GetDescribeTags_603182(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeTags_603181(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Describes the specified tags.</p> <p>You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.</p> <p>You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there's no match, no special message is returned.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : One or more filters to scope the tags to return. The maximum number of filters per filter type (for example, <code>auto-scaling-group</code>) is 1000.
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  section = newJObject()
  var valid_603183 = query.getOrDefault("NextToken")
  valid_603183 = validateParameter(valid_603183, JString, required = false,
                                 default = nil)
  if valid_603183 != nil:
    section.add "NextToken", valid_603183
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603184 = query.getOrDefault("Action")
  valid_603184 = validateParameter(valid_603184, JString, required = true,
                                 default = newJString("DescribeTags"))
  if valid_603184 != nil:
    section.add "Action", valid_603184
  var valid_603185 = query.getOrDefault("Version")
  valid_603185 = validateParameter(valid_603185, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603185 != nil:
    section.add "Version", valid_603185
  var valid_603186 = query.getOrDefault("Filters")
  valid_603186 = validateParameter(valid_603186, JArray, required = false,
                                 default = nil)
  if valid_603186 != nil:
    section.add "Filters", valid_603186
  var valid_603187 = query.getOrDefault("MaxRecords")
  valid_603187 = validateParameter(valid_603187, JInt, required = false, default = nil)
  if valid_603187 != nil:
    section.add "MaxRecords", valid_603187
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603188 = header.getOrDefault("X-Amz-Signature")
  valid_603188 = validateParameter(valid_603188, JString, required = false,
                                 default = nil)
  if valid_603188 != nil:
    section.add "X-Amz-Signature", valid_603188
  var valid_603189 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603189 = validateParameter(valid_603189, JString, required = false,
                                 default = nil)
  if valid_603189 != nil:
    section.add "X-Amz-Content-Sha256", valid_603189
  var valid_603190 = header.getOrDefault("X-Amz-Date")
  valid_603190 = validateParameter(valid_603190, JString, required = false,
                                 default = nil)
  if valid_603190 != nil:
    section.add "X-Amz-Date", valid_603190
  var valid_603191 = header.getOrDefault("X-Amz-Credential")
  valid_603191 = validateParameter(valid_603191, JString, required = false,
                                 default = nil)
  if valid_603191 != nil:
    section.add "X-Amz-Credential", valid_603191
  var valid_603192 = header.getOrDefault("X-Amz-Security-Token")
  valid_603192 = validateParameter(valid_603192, JString, required = false,
                                 default = nil)
  if valid_603192 != nil:
    section.add "X-Amz-Security-Token", valid_603192
  var valid_603193 = header.getOrDefault("X-Amz-Algorithm")
  valid_603193 = validateParameter(valid_603193, JString, required = false,
                                 default = nil)
  if valid_603193 != nil:
    section.add "X-Amz-Algorithm", valid_603193
  var valid_603194 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603194 = validateParameter(valid_603194, JString, required = false,
                                 default = nil)
  if valid_603194 != nil:
    section.add "X-Amz-SignedHeaders", valid_603194
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603195: Call_GetDescribeTags_603180; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the specified tags.</p> <p>You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.</p> <p>You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there's no match, no special message is returned.</p>
  ## 
  let valid = call_603195.validator(path, query, header, formData, body)
  let scheme = call_603195.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603195.url(scheme.get, call_603195.host, call_603195.base,
                         call_603195.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603195, url, valid)

proc call*(call_603196: Call_GetDescribeTags_603180; NextToken: string = "";
          Action: string = "DescribeTags"; Version: string = "2011-01-01";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeTags
  ## <p>Describes the specified tags.</p> <p>You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.</p> <p>You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there's no match, no special message is returned.</p>
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : One or more filters to scope the tags to return. The maximum number of filters per filter type (for example, <code>auto-scaling-group</code>) is 1000.
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  var query_603197 = newJObject()
  add(query_603197, "NextToken", newJString(NextToken))
  add(query_603197, "Action", newJString(Action))
  add(query_603197, "Version", newJString(Version))
  if Filters != nil:
    query_603197.add "Filters", Filters
  add(query_603197, "MaxRecords", newJInt(MaxRecords))
  result = call_603196.call(nil, query_603197, nil, nil, nil)

var getDescribeTags* = Call_GetDescribeTags_603180(name: "getDescribeTags",
    meth: HttpMethod.HttpGet, host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeTags", validator: validate_GetDescribeTags_603181,
    base: "/", url: url_GetDescribeTags_603182, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeTerminationPolicyTypes_603232 = ref object of OpenApiRestCall_601389
proc url_PostDescribeTerminationPolicyTypes_603234(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeTerminationPolicyTypes_603233(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the termination policies supported by Amazon EC2 Auto Scaling.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Auto Scaling Instances Terminate During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603235 = query.getOrDefault("Action")
  valid_603235 = validateParameter(valid_603235, JString, required = true, default = newJString(
      "DescribeTerminationPolicyTypes"))
  if valid_603235 != nil:
    section.add "Action", valid_603235
  var valid_603236 = query.getOrDefault("Version")
  valid_603236 = validateParameter(valid_603236, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603236 != nil:
    section.add "Version", valid_603236
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603237 = header.getOrDefault("X-Amz-Signature")
  valid_603237 = validateParameter(valid_603237, JString, required = false,
                                 default = nil)
  if valid_603237 != nil:
    section.add "X-Amz-Signature", valid_603237
  var valid_603238 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603238 = validateParameter(valid_603238, JString, required = false,
                                 default = nil)
  if valid_603238 != nil:
    section.add "X-Amz-Content-Sha256", valid_603238
  var valid_603239 = header.getOrDefault("X-Amz-Date")
  valid_603239 = validateParameter(valid_603239, JString, required = false,
                                 default = nil)
  if valid_603239 != nil:
    section.add "X-Amz-Date", valid_603239
  var valid_603240 = header.getOrDefault("X-Amz-Credential")
  valid_603240 = validateParameter(valid_603240, JString, required = false,
                                 default = nil)
  if valid_603240 != nil:
    section.add "X-Amz-Credential", valid_603240
  var valid_603241 = header.getOrDefault("X-Amz-Security-Token")
  valid_603241 = validateParameter(valid_603241, JString, required = false,
                                 default = nil)
  if valid_603241 != nil:
    section.add "X-Amz-Security-Token", valid_603241
  var valid_603242 = header.getOrDefault("X-Amz-Algorithm")
  valid_603242 = validateParameter(valid_603242, JString, required = false,
                                 default = nil)
  if valid_603242 != nil:
    section.add "X-Amz-Algorithm", valid_603242
  var valid_603243 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603243 = validateParameter(valid_603243, JString, required = false,
                                 default = nil)
  if valid_603243 != nil:
    section.add "X-Amz-SignedHeaders", valid_603243
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603244: Call_PostDescribeTerminationPolicyTypes_603232;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Describes the termination policies supported by Amazon EC2 Auto Scaling.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Auto Scaling Instances Terminate During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_603244.validator(path, query, header, formData, body)
  let scheme = call_603244.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603244.url(scheme.get, call_603244.host, call_603244.base,
                         call_603244.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603244, url, valid)

proc call*(call_603245: Call_PostDescribeTerminationPolicyTypes_603232;
          Action: string = "DescribeTerminationPolicyTypes";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeTerminationPolicyTypes
  ## <p>Describes the termination policies supported by Amazon EC2 Auto Scaling.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Auto Scaling Instances Terminate During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603246 = newJObject()
  add(query_603246, "Action", newJString(Action))
  add(query_603246, "Version", newJString(Version))
  result = call_603245.call(nil, query_603246, nil, nil, nil)

var postDescribeTerminationPolicyTypes* = Call_PostDescribeTerminationPolicyTypes_603232(
    name: "postDescribeTerminationPolicyTypes", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeTerminationPolicyTypes",
    validator: validate_PostDescribeTerminationPolicyTypes_603233, base: "/",
    url: url_PostDescribeTerminationPolicyTypes_603234,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeTerminationPolicyTypes_603217 = ref object of OpenApiRestCall_601389
proc url_GetDescribeTerminationPolicyTypes_603219(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeTerminationPolicyTypes_603218(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the termination policies supported by Amazon EC2 Auto Scaling.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Auto Scaling Instances Terminate During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603220 = query.getOrDefault("Action")
  valid_603220 = validateParameter(valid_603220, JString, required = true, default = newJString(
      "DescribeTerminationPolicyTypes"))
  if valid_603220 != nil:
    section.add "Action", valid_603220
  var valid_603221 = query.getOrDefault("Version")
  valid_603221 = validateParameter(valid_603221, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603221 != nil:
    section.add "Version", valid_603221
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603222 = header.getOrDefault("X-Amz-Signature")
  valid_603222 = validateParameter(valid_603222, JString, required = false,
                                 default = nil)
  if valid_603222 != nil:
    section.add "X-Amz-Signature", valid_603222
  var valid_603223 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603223 = validateParameter(valid_603223, JString, required = false,
                                 default = nil)
  if valid_603223 != nil:
    section.add "X-Amz-Content-Sha256", valid_603223
  var valid_603224 = header.getOrDefault("X-Amz-Date")
  valid_603224 = validateParameter(valid_603224, JString, required = false,
                                 default = nil)
  if valid_603224 != nil:
    section.add "X-Amz-Date", valid_603224
  var valid_603225 = header.getOrDefault("X-Amz-Credential")
  valid_603225 = validateParameter(valid_603225, JString, required = false,
                                 default = nil)
  if valid_603225 != nil:
    section.add "X-Amz-Credential", valid_603225
  var valid_603226 = header.getOrDefault("X-Amz-Security-Token")
  valid_603226 = validateParameter(valid_603226, JString, required = false,
                                 default = nil)
  if valid_603226 != nil:
    section.add "X-Amz-Security-Token", valid_603226
  var valid_603227 = header.getOrDefault("X-Amz-Algorithm")
  valid_603227 = validateParameter(valid_603227, JString, required = false,
                                 default = nil)
  if valid_603227 != nil:
    section.add "X-Amz-Algorithm", valid_603227
  var valid_603228 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603228 = validateParameter(valid_603228, JString, required = false,
                                 default = nil)
  if valid_603228 != nil:
    section.add "X-Amz-SignedHeaders", valid_603228
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603229: Call_GetDescribeTerminationPolicyTypes_603217;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Describes the termination policies supported by Amazon EC2 Auto Scaling.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Auto Scaling Instances Terminate During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_603229.validator(path, query, header, formData, body)
  let scheme = call_603229.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603229.url(scheme.get, call_603229.host, call_603229.base,
                         call_603229.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603229, url, valid)

proc call*(call_603230: Call_GetDescribeTerminationPolicyTypes_603217;
          Action: string = "DescribeTerminationPolicyTypes";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeTerminationPolicyTypes
  ## <p>Describes the termination policies supported by Amazon EC2 Auto Scaling.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Auto Scaling Instances Terminate During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603231 = newJObject()
  add(query_603231, "Action", newJString(Action))
  add(query_603231, "Version", newJString(Version))
  result = call_603230.call(nil, query_603231, nil, nil, nil)

var getDescribeTerminationPolicyTypes* = Call_GetDescribeTerminationPolicyTypes_603217(
    name: "getDescribeTerminationPolicyTypes", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeTerminationPolicyTypes",
    validator: validate_GetDescribeTerminationPolicyTypes_603218, base: "/",
    url: url_GetDescribeTerminationPolicyTypes_603219,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDetachInstances_603265 = ref object of OpenApiRestCall_601389
proc url_PostDetachInstances_603267(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDetachInstances_603266(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Removes one or more instances from the specified Auto Scaling group.</p> <p>After the instances are detached, you can manage them independent of the Auto Scaling group.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.</p> <p>If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html">Detach EC2 Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603268 = query.getOrDefault("Action")
  valid_603268 = validateParameter(valid_603268, JString, required = true,
                                 default = newJString("DetachInstances"))
  if valid_603268 != nil:
    section.add "Action", valid_603268
  var valid_603269 = query.getOrDefault("Version")
  valid_603269 = validateParameter(valid_603269, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603269 != nil:
    section.add "Version", valid_603269
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603270 = header.getOrDefault("X-Amz-Signature")
  valid_603270 = validateParameter(valid_603270, JString, required = false,
                                 default = nil)
  if valid_603270 != nil:
    section.add "X-Amz-Signature", valid_603270
  var valid_603271 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603271 = validateParameter(valid_603271, JString, required = false,
                                 default = nil)
  if valid_603271 != nil:
    section.add "X-Amz-Content-Sha256", valid_603271
  var valid_603272 = header.getOrDefault("X-Amz-Date")
  valid_603272 = validateParameter(valid_603272, JString, required = false,
                                 default = nil)
  if valid_603272 != nil:
    section.add "X-Amz-Date", valid_603272
  var valid_603273 = header.getOrDefault("X-Amz-Credential")
  valid_603273 = validateParameter(valid_603273, JString, required = false,
                                 default = nil)
  if valid_603273 != nil:
    section.add "X-Amz-Credential", valid_603273
  var valid_603274 = header.getOrDefault("X-Amz-Security-Token")
  valid_603274 = validateParameter(valid_603274, JString, required = false,
                                 default = nil)
  if valid_603274 != nil:
    section.add "X-Amz-Security-Token", valid_603274
  var valid_603275 = header.getOrDefault("X-Amz-Algorithm")
  valid_603275 = validateParameter(valid_603275, JString, required = false,
                                 default = nil)
  if valid_603275 != nil:
    section.add "X-Amz-Algorithm", valid_603275
  var valid_603276 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603276 = validateParameter(valid_603276, JString, required = false,
                                 default = nil)
  if valid_603276 != nil:
    section.add "X-Amz-SignedHeaders", valid_603276
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   ShouldDecrementDesiredCapacity: JBool (required)
  ##                                 : Indicates whether the Auto Scaling group decrements the desired capacity value by the number of instances detached.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_603277 = formData.getOrDefault("AutoScalingGroupName")
  valid_603277 = validateParameter(valid_603277, JString, required = true,
                                 default = nil)
  if valid_603277 != nil:
    section.add "AutoScalingGroupName", valid_603277
  var valid_603278 = formData.getOrDefault("InstanceIds")
  valid_603278 = validateParameter(valid_603278, JArray, required = false,
                                 default = nil)
  if valid_603278 != nil:
    section.add "InstanceIds", valid_603278
  var valid_603279 = formData.getOrDefault("ShouldDecrementDesiredCapacity")
  valid_603279 = validateParameter(valid_603279, JBool, required = true, default = nil)
  if valid_603279 != nil:
    section.add "ShouldDecrementDesiredCapacity", valid_603279
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603280: Call_PostDetachInstances_603265; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes one or more instances from the specified Auto Scaling group.</p> <p>After the instances are detached, you can manage them independent of the Auto Scaling group.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.</p> <p>If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html">Detach EC2 Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_603280.validator(path, query, header, formData, body)
  let scheme = call_603280.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603280.url(scheme.get, call_603280.host, call_603280.base,
                         call_603280.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603280, url, valid)

proc call*(call_603281: Call_PostDetachInstances_603265;
          AutoScalingGroupName: string; ShouldDecrementDesiredCapacity: bool;
          InstanceIds: JsonNode = nil; Action: string = "DetachInstances";
          Version: string = "2011-01-01"): Recallable =
  ## postDetachInstances
  ## <p>Removes one or more instances from the specified Auto Scaling group.</p> <p>After the instances are detached, you can manage them independent of the Auto Scaling group.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.</p> <p>If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html">Detach EC2 Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   ShouldDecrementDesiredCapacity: bool (required)
  ##                                 : Indicates whether the Auto Scaling group decrements the desired capacity value by the number of instances detached.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603282 = newJObject()
  var formData_603283 = newJObject()
  add(formData_603283, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if InstanceIds != nil:
    formData_603283.add "InstanceIds", InstanceIds
  add(formData_603283, "ShouldDecrementDesiredCapacity",
      newJBool(ShouldDecrementDesiredCapacity))
  add(query_603282, "Action", newJString(Action))
  add(query_603282, "Version", newJString(Version))
  result = call_603281.call(nil, query_603282, nil, formData_603283, nil)

var postDetachInstances* = Call_PostDetachInstances_603265(
    name: "postDetachInstances", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DetachInstances",
    validator: validate_PostDetachInstances_603266, base: "/",
    url: url_PostDetachInstances_603267, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDetachInstances_603247 = ref object of OpenApiRestCall_601389
proc url_GetDetachInstances_603249(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDetachInstances_603248(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Removes one or more instances from the specified Auto Scaling group.</p> <p>After the instances are detached, you can manage them independent of the Auto Scaling group.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.</p> <p>If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html">Detach EC2 Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   ShouldDecrementDesiredCapacity: JBool (required)
  ##                                 : Indicates whether the Auto Scaling group decrements the desired capacity value by the number of instances detached.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_603250 = query.getOrDefault("InstanceIds")
  valid_603250 = validateParameter(valid_603250, JArray, required = false,
                                 default = nil)
  if valid_603250 != nil:
    section.add "InstanceIds", valid_603250
  assert query != nil, "query argument is necessary due to required `ShouldDecrementDesiredCapacity` field"
  var valid_603251 = query.getOrDefault("ShouldDecrementDesiredCapacity")
  valid_603251 = validateParameter(valid_603251, JBool, required = true, default = nil)
  if valid_603251 != nil:
    section.add "ShouldDecrementDesiredCapacity", valid_603251
  var valid_603252 = query.getOrDefault("AutoScalingGroupName")
  valid_603252 = validateParameter(valid_603252, JString, required = true,
                                 default = nil)
  if valid_603252 != nil:
    section.add "AutoScalingGroupName", valid_603252
  var valid_603253 = query.getOrDefault("Action")
  valid_603253 = validateParameter(valid_603253, JString, required = true,
                                 default = newJString("DetachInstances"))
  if valid_603253 != nil:
    section.add "Action", valid_603253
  var valid_603254 = query.getOrDefault("Version")
  valid_603254 = validateParameter(valid_603254, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603254 != nil:
    section.add "Version", valid_603254
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603255 = header.getOrDefault("X-Amz-Signature")
  valid_603255 = validateParameter(valid_603255, JString, required = false,
                                 default = nil)
  if valid_603255 != nil:
    section.add "X-Amz-Signature", valid_603255
  var valid_603256 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603256 = validateParameter(valid_603256, JString, required = false,
                                 default = nil)
  if valid_603256 != nil:
    section.add "X-Amz-Content-Sha256", valid_603256
  var valid_603257 = header.getOrDefault("X-Amz-Date")
  valid_603257 = validateParameter(valid_603257, JString, required = false,
                                 default = nil)
  if valid_603257 != nil:
    section.add "X-Amz-Date", valid_603257
  var valid_603258 = header.getOrDefault("X-Amz-Credential")
  valid_603258 = validateParameter(valid_603258, JString, required = false,
                                 default = nil)
  if valid_603258 != nil:
    section.add "X-Amz-Credential", valid_603258
  var valid_603259 = header.getOrDefault("X-Amz-Security-Token")
  valid_603259 = validateParameter(valid_603259, JString, required = false,
                                 default = nil)
  if valid_603259 != nil:
    section.add "X-Amz-Security-Token", valid_603259
  var valid_603260 = header.getOrDefault("X-Amz-Algorithm")
  valid_603260 = validateParameter(valid_603260, JString, required = false,
                                 default = nil)
  if valid_603260 != nil:
    section.add "X-Amz-Algorithm", valid_603260
  var valid_603261 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603261 = validateParameter(valid_603261, JString, required = false,
                                 default = nil)
  if valid_603261 != nil:
    section.add "X-Amz-SignedHeaders", valid_603261
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603262: Call_GetDetachInstances_603247; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes one or more instances from the specified Auto Scaling group.</p> <p>After the instances are detached, you can manage them independent of the Auto Scaling group.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.</p> <p>If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html">Detach EC2 Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_603262.validator(path, query, header, formData, body)
  let scheme = call_603262.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603262.url(scheme.get, call_603262.host, call_603262.base,
                         call_603262.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603262, url, valid)

proc call*(call_603263: Call_GetDetachInstances_603247;
          ShouldDecrementDesiredCapacity: bool; AutoScalingGroupName: string;
          InstanceIds: JsonNode = nil; Action: string = "DetachInstances";
          Version: string = "2011-01-01"): Recallable =
  ## getDetachInstances
  ## <p>Removes one or more instances from the specified Auto Scaling group.</p> <p>After the instances are detached, you can manage them independent of the Auto Scaling group.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.</p> <p>If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html">Detach EC2 Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   ShouldDecrementDesiredCapacity: bool (required)
  ##                                 : Indicates whether the Auto Scaling group decrements the desired capacity value by the number of instances detached.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603264 = newJObject()
  if InstanceIds != nil:
    query_603264.add "InstanceIds", InstanceIds
  add(query_603264, "ShouldDecrementDesiredCapacity",
      newJBool(ShouldDecrementDesiredCapacity))
  add(query_603264, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_603264, "Action", newJString(Action))
  add(query_603264, "Version", newJString(Version))
  result = call_603263.call(nil, query_603264, nil, nil, nil)

var getDetachInstances* = Call_GetDetachInstances_603247(
    name: "getDetachInstances", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DetachInstances",
    validator: validate_GetDetachInstances_603248, base: "/",
    url: url_GetDetachInstances_603249, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDetachLoadBalancerTargetGroups_603301 = ref object of OpenApiRestCall_601389
proc url_PostDetachLoadBalancerTargetGroups_603303(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDetachLoadBalancerTargetGroups_603302(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Detaches one or more target groups from the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603304 = query.getOrDefault("Action")
  valid_603304 = validateParameter(valid_603304, JString, required = true, default = newJString(
      "DetachLoadBalancerTargetGroups"))
  if valid_603304 != nil:
    section.add "Action", valid_603304
  var valid_603305 = query.getOrDefault("Version")
  valid_603305 = validateParameter(valid_603305, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603305 != nil:
    section.add "Version", valid_603305
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603306 = header.getOrDefault("X-Amz-Signature")
  valid_603306 = validateParameter(valid_603306, JString, required = false,
                                 default = nil)
  if valid_603306 != nil:
    section.add "X-Amz-Signature", valid_603306
  var valid_603307 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603307 = validateParameter(valid_603307, JString, required = false,
                                 default = nil)
  if valid_603307 != nil:
    section.add "X-Amz-Content-Sha256", valid_603307
  var valid_603308 = header.getOrDefault("X-Amz-Date")
  valid_603308 = validateParameter(valid_603308, JString, required = false,
                                 default = nil)
  if valid_603308 != nil:
    section.add "X-Amz-Date", valid_603308
  var valid_603309 = header.getOrDefault("X-Amz-Credential")
  valid_603309 = validateParameter(valid_603309, JString, required = false,
                                 default = nil)
  if valid_603309 != nil:
    section.add "X-Amz-Credential", valid_603309
  var valid_603310 = header.getOrDefault("X-Amz-Security-Token")
  valid_603310 = validateParameter(valid_603310, JString, required = false,
                                 default = nil)
  if valid_603310 != nil:
    section.add "X-Amz-Security-Token", valid_603310
  var valid_603311 = header.getOrDefault("X-Amz-Algorithm")
  valid_603311 = validateParameter(valid_603311, JString, required = false,
                                 default = nil)
  if valid_603311 != nil:
    section.add "X-Amz-Algorithm", valid_603311
  var valid_603312 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603312 = validateParameter(valid_603312, JString, required = false,
                                 default = nil)
  if valid_603312 != nil:
    section.add "X-Amz-SignedHeaders", valid_603312
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_603313 = formData.getOrDefault("AutoScalingGroupName")
  valid_603313 = validateParameter(valid_603313, JString, required = true,
                                 default = nil)
  if valid_603313 != nil:
    section.add "AutoScalingGroupName", valid_603313
  var valid_603314 = formData.getOrDefault("TargetGroupARNs")
  valid_603314 = validateParameter(valid_603314, JArray, required = true, default = nil)
  if valid_603314 != nil:
    section.add "TargetGroupARNs", valid_603314
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603315: Call_PostDetachLoadBalancerTargetGroups_603301;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Detaches one or more target groups from the specified Auto Scaling group.
  ## 
  let valid = call_603315.validator(path, query, header, formData, body)
  let scheme = call_603315.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603315.url(scheme.get, call_603315.host, call_603315.base,
                         call_603315.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603315, url, valid)

proc call*(call_603316: Call_PostDetachLoadBalancerTargetGroups_603301;
          AutoScalingGroupName: string; TargetGroupARNs: JsonNode;
          Action: string = "DetachLoadBalancerTargetGroups";
          Version: string = "2011-01-01"): Recallable =
  ## postDetachLoadBalancerTargetGroups
  ## Detaches one or more target groups from the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603317 = newJObject()
  var formData_603318 = newJObject()
  add(formData_603318, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if TargetGroupARNs != nil:
    formData_603318.add "TargetGroupARNs", TargetGroupARNs
  add(query_603317, "Action", newJString(Action))
  add(query_603317, "Version", newJString(Version))
  result = call_603316.call(nil, query_603317, nil, formData_603318, nil)

var postDetachLoadBalancerTargetGroups* = Call_PostDetachLoadBalancerTargetGroups_603301(
    name: "postDetachLoadBalancerTargetGroups", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DetachLoadBalancerTargetGroups",
    validator: validate_PostDetachLoadBalancerTargetGroups_603302, base: "/",
    url: url_PostDetachLoadBalancerTargetGroups_603303,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDetachLoadBalancerTargetGroups_603284 = ref object of OpenApiRestCall_601389
proc url_GetDetachLoadBalancerTargetGroups_603286(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDetachLoadBalancerTargetGroups_603285(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Detaches one or more target groups from the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_603287 = query.getOrDefault("AutoScalingGroupName")
  valid_603287 = validateParameter(valid_603287, JString, required = true,
                                 default = nil)
  if valid_603287 != nil:
    section.add "AutoScalingGroupName", valid_603287
  var valid_603288 = query.getOrDefault("TargetGroupARNs")
  valid_603288 = validateParameter(valid_603288, JArray, required = true, default = nil)
  if valid_603288 != nil:
    section.add "TargetGroupARNs", valid_603288
  var valid_603289 = query.getOrDefault("Action")
  valid_603289 = validateParameter(valid_603289, JString, required = true, default = newJString(
      "DetachLoadBalancerTargetGroups"))
  if valid_603289 != nil:
    section.add "Action", valid_603289
  var valid_603290 = query.getOrDefault("Version")
  valid_603290 = validateParameter(valid_603290, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603290 != nil:
    section.add "Version", valid_603290
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603291 = header.getOrDefault("X-Amz-Signature")
  valid_603291 = validateParameter(valid_603291, JString, required = false,
                                 default = nil)
  if valid_603291 != nil:
    section.add "X-Amz-Signature", valid_603291
  var valid_603292 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603292 = validateParameter(valid_603292, JString, required = false,
                                 default = nil)
  if valid_603292 != nil:
    section.add "X-Amz-Content-Sha256", valid_603292
  var valid_603293 = header.getOrDefault("X-Amz-Date")
  valid_603293 = validateParameter(valid_603293, JString, required = false,
                                 default = nil)
  if valid_603293 != nil:
    section.add "X-Amz-Date", valid_603293
  var valid_603294 = header.getOrDefault("X-Amz-Credential")
  valid_603294 = validateParameter(valid_603294, JString, required = false,
                                 default = nil)
  if valid_603294 != nil:
    section.add "X-Amz-Credential", valid_603294
  var valid_603295 = header.getOrDefault("X-Amz-Security-Token")
  valid_603295 = validateParameter(valid_603295, JString, required = false,
                                 default = nil)
  if valid_603295 != nil:
    section.add "X-Amz-Security-Token", valid_603295
  var valid_603296 = header.getOrDefault("X-Amz-Algorithm")
  valid_603296 = validateParameter(valid_603296, JString, required = false,
                                 default = nil)
  if valid_603296 != nil:
    section.add "X-Amz-Algorithm", valid_603296
  var valid_603297 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603297 = validateParameter(valid_603297, JString, required = false,
                                 default = nil)
  if valid_603297 != nil:
    section.add "X-Amz-SignedHeaders", valid_603297
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603298: Call_GetDetachLoadBalancerTargetGroups_603284;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Detaches one or more target groups from the specified Auto Scaling group.
  ## 
  let valid = call_603298.validator(path, query, header, formData, body)
  let scheme = call_603298.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603298.url(scheme.get, call_603298.host, call_603298.base,
                         call_603298.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603298, url, valid)

proc call*(call_603299: Call_GetDetachLoadBalancerTargetGroups_603284;
          AutoScalingGroupName: string; TargetGroupARNs: JsonNode;
          Action: string = "DetachLoadBalancerTargetGroups";
          Version: string = "2011-01-01"): Recallable =
  ## getDetachLoadBalancerTargetGroups
  ## Detaches one or more target groups from the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603300 = newJObject()
  add(query_603300, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if TargetGroupARNs != nil:
    query_603300.add "TargetGroupARNs", TargetGroupARNs
  add(query_603300, "Action", newJString(Action))
  add(query_603300, "Version", newJString(Version))
  result = call_603299.call(nil, query_603300, nil, nil, nil)

var getDetachLoadBalancerTargetGroups* = Call_GetDetachLoadBalancerTargetGroups_603284(
    name: "getDetachLoadBalancerTargetGroups", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DetachLoadBalancerTargetGroups",
    validator: validate_GetDetachLoadBalancerTargetGroups_603285, base: "/",
    url: url_GetDetachLoadBalancerTargetGroups_603286,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDetachLoadBalancers_603336 = ref object of OpenApiRestCall_601389
proc url_PostDetachLoadBalancers_603338(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDetachLoadBalancers_603337(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Detaches one or more Classic Load Balancers from the specified Auto Scaling group.</p> <p>This operation detaches only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DetachLoadBalancerTargetGroups</a> instead.</p> <p>When you detach a load balancer, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using <a>DescribeLoadBalancers</a>. The instances remain running.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603339 = query.getOrDefault("Action")
  valid_603339 = validateParameter(valid_603339, JString, required = true,
                                 default = newJString("DetachLoadBalancers"))
  if valid_603339 != nil:
    section.add "Action", valid_603339
  var valid_603340 = query.getOrDefault("Version")
  valid_603340 = validateParameter(valid_603340, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603340 != nil:
    section.add "Version", valid_603340
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603341 = header.getOrDefault("X-Amz-Signature")
  valid_603341 = validateParameter(valid_603341, JString, required = false,
                                 default = nil)
  if valid_603341 != nil:
    section.add "X-Amz-Signature", valid_603341
  var valid_603342 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603342 = validateParameter(valid_603342, JString, required = false,
                                 default = nil)
  if valid_603342 != nil:
    section.add "X-Amz-Content-Sha256", valid_603342
  var valid_603343 = header.getOrDefault("X-Amz-Date")
  valid_603343 = validateParameter(valid_603343, JString, required = false,
                                 default = nil)
  if valid_603343 != nil:
    section.add "X-Amz-Date", valid_603343
  var valid_603344 = header.getOrDefault("X-Amz-Credential")
  valid_603344 = validateParameter(valid_603344, JString, required = false,
                                 default = nil)
  if valid_603344 != nil:
    section.add "X-Amz-Credential", valid_603344
  var valid_603345 = header.getOrDefault("X-Amz-Security-Token")
  valid_603345 = validateParameter(valid_603345, JString, required = false,
                                 default = nil)
  if valid_603345 != nil:
    section.add "X-Amz-Security-Token", valid_603345
  var valid_603346 = header.getOrDefault("X-Amz-Algorithm")
  valid_603346 = validateParameter(valid_603346, JString, required = false,
                                 default = nil)
  if valid_603346 != nil:
    section.add "X-Amz-Algorithm", valid_603346
  var valid_603347 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603347 = validateParameter(valid_603347, JString, required = false,
                                 default = nil)
  if valid_603347 != nil:
    section.add "X-Amz-SignedHeaders", valid_603347
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_603348 = formData.getOrDefault("AutoScalingGroupName")
  valid_603348 = validateParameter(valid_603348, JString, required = true,
                                 default = nil)
  if valid_603348 != nil:
    section.add "AutoScalingGroupName", valid_603348
  var valid_603349 = formData.getOrDefault("LoadBalancerNames")
  valid_603349 = validateParameter(valid_603349, JArray, required = true, default = nil)
  if valid_603349 != nil:
    section.add "LoadBalancerNames", valid_603349
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603350: Call_PostDetachLoadBalancers_603336; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Detaches one or more Classic Load Balancers from the specified Auto Scaling group.</p> <p>This operation detaches only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DetachLoadBalancerTargetGroups</a> instead.</p> <p>When you detach a load balancer, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using <a>DescribeLoadBalancers</a>. The instances remain running.</p>
  ## 
  let valid = call_603350.validator(path, query, header, formData, body)
  let scheme = call_603350.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603350.url(scheme.get, call_603350.host, call_603350.base,
                         call_603350.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603350, url, valid)

proc call*(call_603351: Call_PostDetachLoadBalancers_603336;
          AutoScalingGroupName: string; LoadBalancerNames: JsonNode;
          Action: string = "DetachLoadBalancers"; Version: string = "2011-01-01"): Recallable =
  ## postDetachLoadBalancers
  ## <p>Detaches one or more Classic Load Balancers from the specified Auto Scaling group.</p> <p>This operation detaches only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DetachLoadBalancerTargetGroups</a> instead.</p> <p>When you detach a load balancer, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using <a>DescribeLoadBalancers</a>. The instances remain running.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603352 = newJObject()
  var formData_603353 = newJObject()
  add(formData_603353, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if LoadBalancerNames != nil:
    formData_603353.add "LoadBalancerNames", LoadBalancerNames
  add(query_603352, "Action", newJString(Action))
  add(query_603352, "Version", newJString(Version))
  result = call_603351.call(nil, query_603352, nil, formData_603353, nil)

var postDetachLoadBalancers* = Call_PostDetachLoadBalancers_603336(
    name: "postDetachLoadBalancers", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DetachLoadBalancers",
    validator: validate_PostDetachLoadBalancers_603337, base: "/",
    url: url_PostDetachLoadBalancers_603338, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDetachLoadBalancers_603319 = ref object of OpenApiRestCall_601389
proc url_GetDetachLoadBalancers_603321(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDetachLoadBalancers_603320(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Detaches one or more Classic Load Balancers from the specified Auto Scaling group.</p> <p>This operation detaches only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DetachLoadBalancerTargetGroups</a> instead.</p> <p>When you detach a load balancer, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using <a>DescribeLoadBalancers</a>. The instances remain running.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_603322 = query.getOrDefault("AutoScalingGroupName")
  valid_603322 = validateParameter(valid_603322, JString, required = true,
                                 default = nil)
  if valid_603322 != nil:
    section.add "AutoScalingGroupName", valid_603322
  var valid_603323 = query.getOrDefault("Action")
  valid_603323 = validateParameter(valid_603323, JString, required = true,
                                 default = newJString("DetachLoadBalancers"))
  if valid_603323 != nil:
    section.add "Action", valid_603323
  var valid_603324 = query.getOrDefault("Version")
  valid_603324 = validateParameter(valid_603324, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603324 != nil:
    section.add "Version", valid_603324
  var valid_603325 = query.getOrDefault("LoadBalancerNames")
  valid_603325 = validateParameter(valid_603325, JArray, required = true, default = nil)
  if valid_603325 != nil:
    section.add "LoadBalancerNames", valid_603325
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603326 = header.getOrDefault("X-Amz-Signature")
  valid_603326 = validateParameter(valid_603326, JString, required = false,
                                 default = nil)
  if valid_603326 != nil:
    section.add "X-Amz-Signature", valid_603326
  var valid_603327 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603327 = validateParameter(valid_603327, JString, required = false,
                                 default = nil)
  if valid_603327 != nil:
    section.add "X-Amz-Content-Sha256", valid_603327
  var valid_603328 = header.getOrDefault("X-Amz-Date")
  valid_603328 = validateParameter(valid_603328, JString, required = false,
                                 default = nil)
  if valid_603328 != nil:
    section.add "X-Amz-Date", valid_603328
  var valid_603329 = header.getOrDefault("X-Amz-Credential")
  valid_603329 = validateParameter(valid_603329, JString, required = false,
                                 default = nil)
  if valid_603329 != nil:
    section.add "X-Amz-Credential", valid_603329
  var valid_603330 = header.getOrDefault("X-Amz-Security-Token")
  valid_603330 = validateParameter(valid_603330, JString, required = false,
                                 default = nil)
  if valid_603330 != nil:
    section.add "X-Amz-Security-Token", valid_603330
  var valid_603331 = header.getOrDefault("X-Amz-Algorithm")
  valid_603331 = validateParameter(valid_603331, JString, required = false,
                                 default = nil)
  if valid_603331 != nil:
    section.add "X-Amz-Algorithm", valid_603331
  var valid_603332 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603332 = validateParameter(valid_603332, JString, required = false,
                                 default = nil)
  if valid_603332 != nil:
    section.add "X-Amz-SignedHeaders", valid_603332
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603333: Call_GetDetachLoadBalancers_603319; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Detaches one or more Classic Load Balancers from the specified Auto Scaling group.</p> <p>This operation detaches only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DetachLoadBalancerTargetGroups</a> instead.</p> <p>When you detach a load balancer, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using <a>DescribeLoadBalancers</a>. The instances remain running.</p>
  ## 
  let valid = call_603333.validator(path, query, header, formData, body)
  let scheme = call_603333.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603333.url(scheme.get, call_603333.host, call_603333.base,
                         call_603333.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603333, url, valid)

proc call*(call_603334: Call_GetDetachLoadBalancers_603319;
          AutoScalingGroupName: string; LoadBalancerNames: JsonNode;
          Action: string = "DetachLoadBalancers"; Version: string = "2011-01-01"): Recallable =
  ## getDetachLoadBalancers
  ## <p>Detaches one or more Classic Load Balancers from the specified Auto Scaling group.</p> <p>This operation detaches only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DetachLoadBalancerTargetGroups</a> instead.</p> <p>When you detach a load balancer, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using <a>DescribeLoadBalancers</a>. The instances remain running.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  var query_603335 = newJObject()
  add(query_603335, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_603335, "Action", newJString(Action))
  add(query_603335, "Version", newJString(Version))
  if LoadBalancerNames != nil:
    query_603335.add "LoadBalancerNames", LoadBalancerNames
  result = call_603334.call(nil, query_603335, nil, nil, nil)

var getDetachLoadBalancers* = Call_GetDetachLoadBalancers_603319(
    name: "getDetachLoadBalancers", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DetachLoadBalancers",
    validator: validate_GetDetachLoadBalancers_603320, base: "/",
    url: url_GetDetachLoadBalancers_603321, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDisableMetricsCollection_603371 = ref object of OpenApiRestCall_601389
proc url_PostDisableMetricsCollection_603373(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDisableMetricsCollection_603372(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disables group metrics for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603374 = query.getOrDefault("Action")
  valid_603374 = validateParameter(valid_603374, JString, required = true, default = newJString(
      "DisableMetricsCollection"))
  if valid_603374 != nil:
    section.add "Action", valid_603374
  var valid_603375 = query.getOrDefault("Version")
  valid_603375 = validateParameter(valid_603375, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603375 != nil:
    section.add "Version", valid_603375
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603376 = header.getOrDefault("X-Amz-Signature")
  valid_603376 = validateParameter(valid_603376, JString, required = false,
                                 default = nil)
  if valid_603376 != nil:
    section.add "X-Amz-Signature", valid_603376
  var valid_603377 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603377 = validateParameter(valid_603377, JString, required = false,
                                 default = nil)
  if valid_603377 != nil:
    section.add "X-Amz-Content-Sha256", valid_603377
  var valid_603378 = header.getOrDefault("X-Amz-Date")
  valid_603378 = validateParameter(valid_603378, JString, required = false,
                                 default = nil)
  if valid_603378 != nil:
    section.add "X-Amz-Date", valid_603378
  var valid_603379 = header.getOrDefault("X-Amz-Credential")
  valid_603379 = validateParameter(valid_603379, JString, required = false,
                                 default = nil)
  if valid_603379 != nil:
    section.add "X-Amz-Credential", valid_603379
  var valid_603380 = header.getOrDefault("X-Amz-Security-Token")
  valid_603380 = validateParameter(valid_603380, JString, required = false,
                                 default = nil)
  if valid_603380 != nil:
    section.add "X-Amz-Security-Token", valid_603380
  var valid_603381 = header.getOrDefault("X-Amz-Algorithm")
  valid_603381 = validateParameter(valid_603381, JString, required = false,
                                 default = nil)
  if valid_603381 != nil:
    section.add "X-Amz-Algorithm", valid_603381
  var valid_603382 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603382 = validateParameter(valid_603382, JString, required = false,
                                 default = nil)
  if valid_603382 != nil:
    section.add "X-Amz-SignedHeaders", valid_603382
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are disabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_603383 = formData.getOrDefault("AutoScalingGroupName")
  valid_603383 = validateParameter(valid_603383, JString, required = true,
                                 default = nil)
  if valid_603383 != nil:
    section.add "AutoScalingGroupName", valid_603383
  var valid_603384 = formData.getOrDefault("Metrics")
  valid_603384 = validateParameter(valid_603384, JArray, required = false,
                                 default = nil)
  if valid_603384 != nil:
    section.add "Metrics", valid_603384
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603385: Call_PostDisableMetricsCollection_603371; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disables group metrics for the specified Auto Scaling group.
  ## 
  let valid = call_603385.validator(path, query, header, formData, body)
  let scheme = call_603385.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603385.url(scheme.get, call_603385.host, call_603385.base,
                         call_603385.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603385, url, valid)

proc call*(call_603386: Call_PostDisableMetricsCollection_603371;
          AutoScalingGroupName: string;
          Action: string = "DisableMetricsCollection";
          Version: string = "2011-01-01"; Metrics: JsonNode = nil): Recallable =
  ## postDisableMetricsCollection
  ## Disables group metrics for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are disabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  var query_603387 = newJObject()
  var formData_603388 = newJObject()
  add(formData_603388, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_603387, "Action", newJString(Action))
  add(query_603387, "Version", newJString(Version))
  if Metrics != nil:
    formData_603388.add "Metrics", Metrics
  result = call_603386.call(nil, query_603387, nil, formData_603388, nil)

var postDisableMetricsCollection* = Call_PostDisableMetricsCollection_603371(
    name: "postDisableMetricsCollection", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DisableMetricsCollection",
    validator: validate_PostDisableMetricsCollection_603372, base: "/",
    url: url_PostDisableMetricsCollection_603373,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDisableMetricsCollection_603354 = ref object of OpenApiRestCall_601389
proc url_GetDisableMetricsCollection_603356(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDisableMetricsCollection_603355(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disables group metrics for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are disabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_603357 = query.getOrDefault("AutoScalingGroupName")
  valid_603357 = validateParameter(valid_603357, JString, required = true,
                                 default = nil)
  if valid_603357 != nil:
    section.add "AutoScalingGroupName", valid_603357
  var valid_603358 = query.getOrDefault("Action")
  valid_603358 = validateParameter(valid_603358, JString, required = true, default = newJString(
      "DisableMetricsCollection"))
  if valid_603358 != nil:
    section.add "Action", valid_603358
  var valid_603359 = query.getOrDefault("Metrics")
  valid_603359 = validateParameter(valid_603359, JArray, required = false,
                                 default = nil)
  if valid_603359 != nil:
    section.add "Metrics", valid_603359
  var valid_603360 = query.getOrDefault("Version")
  valid_603360 = validateParameter(valid_603360, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603360 != nil:
    section.add "Version", valid_603360
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603361 = header.getOrDefault("X-Amz-Signature")
  valid_603361 = validateParameter(valid_603361, JString, required = false,
                                 default = nil)
  if valid_603361 != nil:
    section.add "X-Amz-Signature", valid_603361
  var valid_603362 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603362 = validateParameter(valid_603362, JString, required = false,
                                 default = nil)
  if valid_603362 != nil:
    section.add "X-Amz-Content-Sha256", valid_603362
  var valid_603363 = header.getOrDefault("X-Amz-Date")
  valid_603363 = validateParameter(valid_603363, JString, required = false,
                                 default = nil)
  if valid_603363 != nil:
    section.add "X-Amz-Date", valid_603363
  var valid_603364 = header.getOrDefault("X-Amz-Credential")
  valid_603364 = validateParameter(valid_603364, JString, required = false,
                                 default = nil)
  if valid_603364 != nil:
    section.add "X-Amz-Credential", valid_603364
  var valid_603365 = header.getOrDefault("X-Amz-Security-Token")
  valid_603365 = validateParameter(valid_603365, JString, required = false,
                                 default = nil)
  if valid_603365 != nil:
    section.add "X-Amz-Security-Token", valid_603365
  var valid_603366 = header.getOrDefault("X-Amz-Algorithm")
  valid_603366 = validateParameter(valid_603366, JString, required = false,
                                 default = nil)
  if valid_603366 != nil:
    section.add "X-Amz-Algorithm", valid_603366
  var valid_603367 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603367 = validateParameter(valid_603367, JString, required = false,
                                 default = nil)
  if valid_603367 != nil:
    section.add "X-Amz-SignedHeaders", valid_603367
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603368: Call_GetDisableMetricsCollection_603354; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disables group metrics for the specified Auto Scaling group.
  ## 
  let valid = call_603368.validator(path, query, header, formData, body)
  let scheme = call_603368.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603368.url(scheme.get, call_603368.host, call_603368.base,
                         call_603368.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603368, url, valid)

proc call*(call_603369: Call_GetDisableMetricsCollection_603354;
          AutoScalingGroupName: string;
          Action: string = "DisableMetricsCollection"; Metrics: JsonNode = nil;
          Version: string = "2011-01-01"): Recallable =
  ## getDisableMetricsCollection
  ## Disables group metrics for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are disabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  ##   Version: string (required)
  var query_603370 = newJObject()
  add(query_603370, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_603370, "Action", newJString(Action))
  if Metrics != nil:
    query_603370.add "Metrics", Metrics
  add(query_603370, "Version", newJString(Version))
  result = call_603369.call(nil, query_603370, nil, nil, nil)

var getDisableMetricsCollection* = Call_GetDisableMetricsCollection_603354(
    name: "getDisableMetricsCollection", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DisableMetricsCollection",
    validator: validate_GetDisableMetricsCollection_603355, base: "/",
    url: url_GetDisableMetricsCollection_603356,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostEnableMetricsCollection_603407 = ref object of OpenApiRestCall_601389
proc url_PostEnableMetricsCollection_603409(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostEnableMetricsCollection_603408(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Enables group metrics for the specified Auto Scaling group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html">Monitoring Your Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603410 = query.getOrDefault("Action")
  valid_603410 = validateParameter(valid_603410, JString, required = true, default = newJString(
      "EnableMetricsCollection"))
  if valid_603410 != nil:
    section.add "Action", valid_603410
  var valid_603411 = query.getOrDefault("Version")
  valid_603411 = validateParameter(valid_603411, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603411 != nil:
    section.add "Version", valid_603411
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603412 = header.getOrDefault("X-Amz-Signature")
  valid_603412 = validateParameter(valid_603412, JString, required = false,
                                 default = nil)
  if valid_603412 != nil:
    section.add "X-Amz-Signature", valid_603412
  var valid_603413 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603413 = validateParameter(valid_603413, JString, required = false,
                                 default = nil)
  if valid_603413 != nil:
    section.add "X-Amz-Content-Sha256", valid_603413
  var valid_603414 = header.getOrDefault("X-Amz-Date")
  valid_603414 = validateParameter(valid_603414, JString, required = false,
                                 default = nil)
  if valid_603414 != nil:
    section.add "X-Amz-Date", valid_603414
  var valid_603415 = header.getOrDefault("X-Amz-Credential")
  valid_603415 = validateParameter(valid_603415, JString, required = false,
                                 default = nil)
  if valid_603415 != nil:
    section.add "X-Amz-Credential", valid_603415
  var valid_603416 = header.getOrDefault("X-Amz-Security-Token")
  valid_603416 = validateParameter(valid_603416, JString, required = false,
                                 default = nil)
  if valid_603416 != nil:
    section.add "X-Amz-Security-Token", valid_603416
  var valid_603417 = header.getOrDefault("X-Amz-Algorithm")
  valid_603417 = validateParameter(valid_603417, JString, required = false,
                                 default = nil)
  if valid_603417 != nil:
    section.add "X-Amz-Algorithm", valid_603417
  var valid_603418 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603418 = validateParameter(valid_603418, JString, required = false,
                                 default = nil)
  if valid_603418 != nil:
    section.add "X-Amz-SignedHeaders", valid_603418
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Granularity: JString (required)
  ##              : The granularity to associate with the metrics to collect. The only valid value is <code>1Minute</code>.
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are enabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_603419 = formData.getOrDefault("AutoScalingGroupName")
  valid_603419 = validateParameter(valid_603419, JString, required = true,
                                 default = nil)
  if valid_603419 != nil:
    section.add "AutoScalingGroupName", valid_603419
  var valid_603420 = formData.getOrDefault("Granularity")
  valid_603420 = validateParameter(valid_603420, JString, required = true,
                                 default = nil)
  if valid_603420 != nil:
    section.add "Granularity", valid_603420
  var valid_603421 = formData.getOrDefault("Metrics")
  valid_603421 = validateParameter(valid_603421, JArray, required = false,
                                 default = nil)
  if valid_603421 != nil:
    section.add "Metrics", valid_603421
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603422: Call_PostEnableMetricsCollection_603407; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Enables group metrics for the specified Auto Scaling group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html">Monitoring Your Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ## 
  let valid = call_603422.validator(path, query, header, formData, body)
  let scheme = call_603422.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603422.url(scheme.get, call_603422.host, call_603422.base,
                         call_603422.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603422, url, valid)

proc call*(call_603423: Call_PostEnableMetricsCollection_603407;
          AutoScalingGroupName: string; Granularity: string;
          Action: string = "EnableMetricsCollection";
          Version: string = "2011-01-01"; Metrics: JsonNode = nil): Recallable =
  ## postEnableMetricsCollection
  ## Enables group metrics for the specified Auto Scaling group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html">Monitoring Your Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Granularity: string (required)
  ##              : The granularity to associate with the metrics to collect. The only valid value is <code>1Minute</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are enabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  var query_603424 = newJObject()
  var formData_603425 = newJObject()
  add(formData_603425, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_603425, "Granularity", newJString(Granularity))
  add(query_603424, "Action", newJString(Action))
  add(query_603424, "Version", newJString(Version))
  if Metrics != nil:
    formData_603425.add "Metrics", Metrics
  result = call_603423.call(nil, query_603424, nil, formData_603425, nil)

var postEnableMetricsCollection* = Call_PostEnableMetricsCollection_603407(
    name: "postEnableMetricsCollection", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=EnableMetricsCollection",
    validator: validate_PostEnableMetricsCollection_603408, base: "/",
    url: url_PostEnableMetricsCollection_603409,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetEnableMetricsCollection_603389 = ref object of OpenApiRestCall_601389
proc url_GetEnableMetricsCollection_603391(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetEnableMetricsCollection_603390(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Enables group metrics for the specified Auto Scaling group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html">Monitoring Your Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Granularity: JString (required)
  ##              : The granularity to associate with the metrics to collect. The only valid value is <code>1Minute</code>.
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are enabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_603392 = query.getOrDefault("AutoScalingGroupName")
  valid_603392 = validateParameter(valid_603392, JString, required = true,
                                 default = nil)
  if valid_603392 != nil:
    section.add "AutoScalingGroupName", valid_603392
  var valid_603393 = query.getOrDefault("Action")
  valid_603393 = validateParameter(valid_603393, JString, required = true, default = newJString(
      "EnableMetricsCollection"))
  if valid_603393 != nil:
    section.add "Action", valid_603393
  var valid_603394 = query.getOrDefault("Granularity")
  valid_603394 = validateParameter(valid_603394, JString, required = true,
                                 default = nil)
  if valid_603394 != nil:
    section.add "Granularity", valid_603394
  var valid_603395 = query.getOrDefault("Metrics")
  valid_603395 = validateParameter(valid_603395, JArray, required = false,
                                 default = nil)
  if valid_603395 != nil:
    section.add "Metrics", valid_603395
  var valid_603396 = query.getOrDefault("Version")
  valid_603396 = validateParameter(valid_603396, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603396 != nil:
    section.add "Version", valid_603396
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603397 = header.getOrDefault("X-Amz-Signature")
  valid_603397 = validateParameter(valid_603397, JString, required = false,
                                 default = nil)
  if valid_603397 != nil:
    section.add "X-Amz-Signature", valid_603397
  var valid_603398 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603398 = validateParameter(valid_603398, JString, required = false,
                                 default = nil)
  if valid_603398 != nil:
    section.add "X-Amz-Content-Sha256", valid_603398
  var valid_603399 = header.getOrDefault("X-Amz-Date")
  valid_603399 = validateParameter(valid_603399, JString, required = false,
                                 default = nil)
  if valid_603399 != nil:
    section.add "X-Amz-Date", valid_603399
  var valid_603400 = header.getOrDefault("X-Amz-Credential")
  valid_603400 = validateParameter(valid_603400, JString, required = false,
                                 default = nil)
  if valid_603400 != nil:
    section.add "X-Amz-Credential", valid_603400
  var valid_603401 = header.getOrDefault("X-Amz-Security-Token")
  valid_603401 = validateParameter(valid_603401, JString, required = false,
                                 default = nil)
  if valid_603401 != nil:
    section.add "X-Amz-Security-Token", valid_603401
  var valid_603402 = header.getOrDefault("X-Amz-Algorithm")
  valid_603402 = validateParameter(valid_603402, JString, required = false,
                                 default = nil)
  if valid_603402 != nil:
    section.add "X-Amz-Algorithm", valid_603402
  var valid_603403 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603403 = validateParameter(valid_603403, JString, required = false,
                                 default = nil)
  if valid_603403 != nil:
    section.add "X-Amz-SignedHeaders", valid_603403
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603404: Call_GetEnableMetricsCollection_603389; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Enables group metrics for the specified Auto Scaling group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html">Monitoring Your Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ## 
  let valid = call_603404.validator(path, query, header, formData, body)
  let scheme = call_603404.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603404.url(scheme.get, call_603404.host, call_603404.base,
                         call_603404.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603404, url, valid)

proc call*(call_603405: Call_GetEnableMetricsCollection_603389;
          AutoScalingGroupName: string; Granularity: string;
          Action: string = "EnableMetricsCollection"; Metrics: JsonNode = nil;
          Version: string = "2011-01-01"): Recallable =
  ## getEnableMetricsCollection
  ## Enables group metrics for the specified Auto Scaling group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html">Monitoring Your Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Granularity: string (required)
  ##              : The granularity to associate with the metrics to collect. The only valid value is <code>1Minute</code>.
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are enabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  ##   Version: string (required)
  var query_603406 = newJObject()
  add(query_603406, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_603406, "Action", newJString(Action))
  add(query_603406, "Granularity", newJString(Granularity))
  if Metrics != nil:
    query_603406.add "Metrics", Metrics
  add(query_603406, "Version", newJString(Version))
  result = call_603405.call(nil, query_603406, nil, nil, nil)

var getEnableMetricsCollection* = Call_GetEnableMetricsCollection_603389(
    name: "getEnableMetricsCollection", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=EnableMetricsCollection",
    validator: validate_GetEnableMetricsCollection_603390, base: "/",
    url: url_GetEnableMetricsCollection_603391,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostEnterStandby_603444 = ref object of OpenApiRestCall_601389
proc url_PostEnterStandby_603446(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostEnterStandby_603445(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Moves the specified instances into the standby state.</p> <p>If you choose to decrement the desired capacity of the Auto Scaling group, the instances can enter standby as long as the desired capacity of the Auto Scaling group after the instances are placed into standby is equal to or greater than the minimum capacity of the group.</p> <p>If you choose not to decrement the desired capacity of the Auto Scaling group, the Auto Scaling group launches new instances to replace the instances on standby.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603447 = query.getOrDefault("Action")
  valid_603447 = validateParameter(valid_603447, JString, required = true,
                                 default = newJString("EnterStandby"))
  if valid_603447 != nil:
    section.add "Action", valid_603447
  var valid_603448 = query.getOrDefault("Version")
  valid_603448 = validateParameter(valid_603448, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603448 != nil:
    section.add "Version", valid_603448
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603449 = header.getOrDefault("X-Amz-Signature")
  valid_603449 = validateParameter(valid_603449, JString, required = false,
                                 default = nil)
  if valid_603449 != nil:
    section.add "X-Amz-Signature", valid_603449
  var valid_603450 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603450 = validateParameter(valid_603450, JString, required = false,
                                 default = nil)
  if valid_603450 != nil:
    section.add "X-Amz-Content-Sha256", valid_603450
  var valid_603451 = header.getOrDefault("X-Amz-Date")
  valid_603451 = validateParameter(valid_603451, JString, required = false,
                                 default = nil)
  if valid_603451 != nil:
    section.add "X-Amz-Date", valid_603451
  var valid_603452 = header.getOrDefault("X-Amz-Credential")
  valid_603452 = validateParameter(valid_603452, JString, required = false,
                                 default = nil)
  if valid_603452 != nil:
    section.add "X-Amz-Credential", valid_603452
  var valid_603453 = header.getOrDefault("X-Amz-Security-Token")
  valid_603453 = validateParameter(valid_603453, JString, required = false,
                                 default = nil)
  if valid_603453 != nil:
    section.add "X-Amz-Security-Token", valid_603453
  var valid_603454 = header.getOrDefault("X-Amz-Algorithm")
  valid_603454 = validateParameter(valid_603454, JString, required = false,
                                 default = nil)
  if valid_603454 != nil:
    section.add "X-Amz-Algorithm", valid_603454
  var valid_603455 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603455 = validateParameter(valid_603455, JString, required = false,
                                 default = nil)
  if valid_603455 != nil:
    section.add "X-Amz-SignedHeaders", valid_603455
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   ShouldDecrementDesiredCapacity: JBool (required)
  ##                                 : Indicates whether to decrement the desired capacity of the Auto Scaling group by the number of instances moved to <code>Standby</code> mode.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_603456 = formData.getOrDefault("AutoScalingGroupName")
  valid_603456 = validateParameter(valid_603456, JString, required = true,
                                 default = nil)
  if valid_603456 != nil:
    section.add "AutoScalingGroupName", valid_603456
  var valid_603457 = formData.getOrDefault("InstanceIds")
  valid_603457 = validateParameter(valid_603457, JArray, required = false,
                                 default = nil)
  if valid_603457 != nil:
    section.add "InstanceIds", valid_603457
  var valid_603458 = formData.getOrDefault("ShouldDecrementDesiredCapacity")
  valid_603458 = validateParameter(valid_603458, JBool, required = true, default = nil)
  if valid_603458 != nil:
    section.add "ShouldDecrementDesiredCapacity", valid_603458
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603459: Call_PostEnterStandby_603444; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Moves the specified instances into the standby state.</p> <p>If you choose to decrement the desired capacity of the Auto Scaling group, the instances can enter standby as long as the desired capacity of the Auto Scaling group after the instances are placed into standby is equal to or greater than the minimum capacity of the group.</p> <p>If you choose not to decrement the desired capacity of the Auto Scaling group, the Auto Scaling group launches new instances to replace the instances on standby.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_603459.validator(path, query, header, formData, body)
  let scheme = call_603459.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603459.url(scheme.get, call_603459.host, call_603459.base,
                         call_603459.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603459, url, valid)

proc call*(call_603460: Call_PostEnterStandby_603444; AutoScalingGroupName: string;
          ShouldDecrementDesiredCapacity: bool; InstanceIds: JsonNode = nil;
          Action: string = "EnterStandby"; Version: string = "2011-01-01"): Recallable =
  ## postEnterStandby
  ## <p>Moves the specified instances into the standby state.</p> <p>If you choose to decrement the desired capacity of the Auto Scaling group, the instances can enter standby as long as the desired capacity of the Auto Scaling group after the instances are placed into standby is equal to or greater than the minimum capacity of the group.</p> <p>If you choose not to decrement the desired capacity of the Auto Scaling group, the Auto Scaling group launches new instances to replace the instances on standby.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   ShouldDecrementDesiredCapacity: bool (required)
  ##                                 : Indicates whether to decrement the desired capacity of the Auto Scaling group by the number of instances moved to <code>Standby</code> mode.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603461 = newJObject()
  var formData_603462 = newJObject()
  add(formData_603462, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if InstanceIds != nil:
    formData_603462.add "InstanceIds", InstanceIds
  add(formData_603462, "ShouldDecrementDesiredCapacity",
      newJBool(ShouldDecrementDesiredCapacity))
  add(query_603461, "Action", newJString(Action))
  add(query_603461, "Version", newJString(Version))
  result = call_603460.call(nil, query_603461, nil, formData_603462, nil)

var postEnterStandby* = Call_PostEnterStandby_603444(name: "postEnterStandby",
    meth: HttpMethod.HttpPost, host: "autoscaling.amazonaws.com",
    route: "/#Action=EnterStandby", validator: validate_PostEnterStandby_603445,
    base: "/", url: url_PostEnterStandby_603446,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetEnterStandby_603426 = ref object of OpenApiRestCall_601389
proc url_GetEnterStandby_603428(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetEnterStandby_603427(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Moves the specified instances into the standby state.</p> <p>If you choose to decrement the desired capacity of the Auto Scaling group, the instances can enter standby as long as the desired capacity of the Auto Scaling group after the instances are placed into standby is equal to or greater than the minimum capacity of the group.</p> <p>If you choose not to decrement the desired capacity of the Auto Scaling group, the Auto Scaling group launches new instances to replace the instances on standby.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   ShouldDecrementDesiredCapacity: JBool (required)
  ##                                 : Indicates whether to decrement the desired capacity of the Auto Scaling group by the number of instances moved to <code>Standby</code> mode.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_603429 = query.getOrDefault("InstanceIds")
  valid_603429 = validateParameter(valid_603429, JArray, required = false,
                                 default = nil)
  if valid_603429 != nil:
    section.add "InstanceIds", valid_603429
  assert query != nil, "query argument is necessary due to required `ShouldDecrementDesiredCapacity` field"
  var valid_603430 = query.getOrDefault("ShouldDecrementDesiredCapacity")
  valid_603430 = validateParameter(valid_603430, JBool, required = true, default = nil)
  if valid_603430 != nil:
    section.add "ShouldDecrementDesiredCapacity", valid_603430
  var valid_603431 = query.getOrDefault("AutoScalingGroupName")
  valid_603431 = validateParameter(valid_603431, JString, required = true,
                                 default = nil)
  if valid_603431 != nil:
    section.add "AutoScalingGroupName", valid_603431
  var valid_603432 = query.getOrDefault("Action")
  valid_603432 = validateParameter(valid_603432, JString, required = true,
                                 default = newJString("EnterStandby"))
  if valid_603432 != nil:
    section.add "Action", valid_603432
  var valid_603433 = query.getOrDefault("Version")
  valid_603433 = validateParameter(valid_603433, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603433 != nil:
    section.add "Version", valid_603433
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603434 = header.getOrDefault("X-Amz-Signature")
  valid_603434 = validateParameter(valid_603434, JString, required = false,
                                 default = nil)
  if valid_603434 != nil:
    section.add "X-Amz-Signature", valid_603434
  var valid_603435 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603435 = validateParameter(valid_603435, JString, required = false,
                                 default = nil)
  if valid_603435 != nil:
    section.add "X-Amz-Content-Sha256", valid_603435
  var valid_603436 = header.getOrDefault("X-Amz-Date")
  valid_603436 = validateParameter(valid_603436, JString, required = false,
                                 default = nil)
  if valid_603436 != nil:
    section.add "X-Amz-Date", valid_603436
  var valid_603437 = header.getOrDefault("X-Amz-Credential")
  valid_603437 = validateParameter(valid_603437, JString, required = false,
                                 default = nil)
  if valid_603437 != nil:
    section.add "X-Amz-Credential", valid_603437
  var valid_603438 = header.getOrDefault("X-Amz-Security-Token")
  valid_603438 = validateParameter(valid_603438, JString, required = false,
                                 default = nil)
  if valid_603438 != nil:
    section.add "X-Amz-Security-Token", valid_603438
  var valid_603439 = header.getOrDefault("X-Amz-Algorithm")
  valid_603439 = validateParameter(valid_603439, JString, required = false,
                                 default = nil)
  if valid_603439 != nil:
    section.add "X-Amz-Algorithm", valid_603439
  var valid_603440 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603440 = validateParameter(valid_603440, JString, required = false,
                                 default = nil)
  if valid_603440 != nil:
    section.add "X-Amz-SignedHeaders", valid_603440
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603441: Call_GetEnterStandby_603426; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Moves the specified instances into the standby state.</p> <p>If you choose to decrement the desired capacity of the Auto Scaling group, the instances can enter standby as long as the desired capacity of the Auto Scaling group after the instances are placed into standby is equal to or greater than the minimum capacity of the group.</p> <p>If you choose not to decrement the desired capacity of the Auto Scaling group, the Auto Scaling group launches new instances to replace the instances on standby.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_603441.validator(path, query, header, formData, body)
  let scheme = call_603441.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603441.url(scheme.get, call_603441.host, call_603441.base,
                         call_603441.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603441, url, valid)

proc call*(call_603442: Call_GetEnterStandby_603426;
          ShouldDecrementDesiredCapacity: bool; AutoScalingGroupName: string;
          InstanceIds: JsonNode = nil; Action: string = "EnterStandby";
          Version: string = "2011-01-01"): Recallable =
  ## getEnterStandby
  ## <p>Moves the specified instances into the standby state.</p> <p>If you choose to decrement the desired capacity of the Auto Scaling group, the instances can enter standby as long as the desired capacity of the Auto Scaling group after the instances are placed into standby is equal to or greater than the minimum capacity of the group.</p> <p>If you choose not to decrement the desired capacity of the Auto Scaling group, the Auto Scaling group launches new instances to replace the instances on standby.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   ShouldDecrementDesiredCapacity: bool (required)
  ##                                 : Indicates whether to decrement the desired capacity of the Auto Scaling group by the number of instances moved to <code>Standby</code> mode.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603443 = newJObject()
  if InstanceIds != nil:
    query_603443.add "InstanceIds", InstanceIds
  add(query_603443, "ShouldDecrementDesiredCapacity",
      newJBool(ShouldDecrementDesiredCapacity))
  add(query_603443, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_603443, "Action", newJString(Action))
  add(query_603443, "Version", newJString(Version))
  result = call_603442.call(nil, query_603443, nil, nil, nil)

var getEnterStandby* = Call_GetEnterStandby_603426(name: "getEnterStandby",
    meth: HttpMethod.HttpGet, host: "autoscaling.amazonaws.com",
    route: "/#Action=EnterStandby", validator: validate_GetEnterStandby_603427,
    base: "/", url: url_GetEnterStandby_603428, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostExecutePolicy_603483 = ref object of OpenApiRestCall_601389
proc url_PostExecutePolicy_603485(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostExecutePolicy_603484(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Executes the specified policy.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603486 = query.getOrDefault("Action")
  valid_603486 = validateParameter(valid_603486, JString, required = true,
                                 default = newJString("ExecutePolicy"))
  if valid_603486 != nil:
    section.add "Action", valid_603486
  var valid_603487 = query.getOrDefault("Version")
  valid_603487 = validateParameter(valid_603487, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603487 != nil:
    section.add "Version", valid_603487
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603488 = header.getOrDefault("X-Amz-Signature")
  valid_603488 = validateParameter(valid_603488, JString, required = false,
                                 default = nil)
  if valid_603488 != nil:
    section.add "X-Amz-Signature", valid_603488
  var valid_603489 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603489 = validateParameter(valid_603489, JString, required = false,
                                 default = nil)
  if valid_603489 != nil:
    section.add "X-Amz-Content-Sha256", valid_603489
  var valid_603490 = header.getOrDefault("X-Amz-Date")
  valid_603490 = validateParameter(valid_603490, JString, required = false,
                                 default = nil)
  if valid_603490 != nil:
    section.add "X-Amz-Date", valid_603490
  var valid_603491 = header.getOrDefault("X-Amz-Credential")
  valid_603491 = validateParameter(valid_603491, JString, required = false,
                                 default = nil)
  if valid_603491 != nil:
    section.add "X-Amz-Credential", valid_603491
  var valid_603492 = header.getOrDefault("X-Amz-Security-Token")
  valid_603492 = validateParameter(valid_603492, JString, required = false,
                                 default = nil)
  if valid_603492 != nil:
    section.add "X-Amz-Security-Token", valid_603492
  var valid_603493 = header.getOrDefault("X-Amz-Algorithm")
  valid_603493 = validateParameter(valid_603493, JString, required = false,
                                 default = nil)
  if valid_603493 != nil:
    section.add "X-Amz-Algorithm", valid_603493
  var valid_603494 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603494 = validateParameter(valid_603494, JString, required = false,
                                 default = nil)
  if valid_603494 != nil:
    section.add "X-Amz-SignedHeaders", valid_603494
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   MetricValue: JFloat
  ##              : <p>The metric value to compare to <code>BreachThreshold</code>. This enables you to execute a policy of type <code>StepScaling</code> and determine which step adjustment to use. For example, if the breach threshold is 50 and you want to use a step adjustment with a lower bound of 0 and an upper bound of 10, you can set the metric value to 59.</p> <p>If you specify a metric value that doesn't correspond to a step adjustment for the policy, the call returns an error.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   BreachThreshold: JFloat
  ##                  : <p>The breach threshold for the alarm.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   HonorCooldown: JBool
  ##                : <p>Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before executing the policy.</p> <p>This parameter is not supported if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   PolicyName: JString (required)
  ##             : The name or ARN of the policy.
  section = newJObject()
  var valid_603495 = formData.getOrDefault("AutoScalingGroupName")
  valid_603495 = validateParameter(valid_603495, JString, required = false,
                                 default = nil)
  if valid_603495 != nil:
    section.add "AutoScalingGroupName", valid_603495
  var valid_603496 = formData.getOrDefault("MetricValue")
  valid_603496 = validateParameter(valid_603496, JFloat, required = false,
                                 default = nil)
  if valid_603496 != nil:
    section.add "MetricValue", valid_603496
  var valid_603497 = formData.getOrDefault("BreachThreshold")
  valid_603497 = validateParameter(valid_603497, JFloat, required = false,
                                 default = nil)
  if valid_603497 != nil:
    section.add "BreachThreshold", valid_603497
  var valid_603498 = formData.getOrDefault("HonorCooldown")
  valid_603498 = validateParameter(valid_603498, JBool, required = false, default = nil)
  if valid_603498 != nil:
    section.add "HonorCooldown", valid_603498
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_603499 = formData.getOrDefault("PolicyName")
  valid_603499 = validateParameter(valid_603499, JString, required = true,
                                 default = nil)
  if valid_603499 != nil:
    section.add "PolicyName", valid_603499
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603500: Call_PostExecutePolicy_603483; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Executes the specified policy.
  ## 
  let valid = call_603500.validator(path, query, header, formData, body)
  let scheme = call_603500.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603500.url(scheme.get, call_603500.host, call_603500.base,
                         call_603500.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603500, url, valid)

proc call*(call_603501: Call_PostExecutePolicy_603483; PolicyName: string;
          AutoScalingGroupName: string = ""; MetricValue: float = 0.0;
          BreachThreshold: float = 0.0; HonorCooldown: bool = false;
          Action: string = "ExecutePolicy"; Version: string = "2011-01-01"): Recallable =
  ## postExecutePolicy
  ## Executes the specified policy.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   MetricValue: float
  ##              : <p>The metric value to compare to <code>BreachThreshold</code>. This enables you to execute a policy of type <code>StepScaling</code> and determine which step adjustment to use. For example, if the breach threshold is 50 and you want to use a step adjustment with a lower bound of 0 and an upper bound of 10, you can set the metric value to 59.</p> <p>If you specify a metric value that doesn't correspond to a step adjustment for the policy, the call returns an error.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   BreachThreshold: float
  ##                  : <p>The breach threshold for the alarm.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   HonorCooldown: bool
  ##                : <p>Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before executing the policy.</p> <p>This parameter is not supported if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : The name or ARN of the policy.
  var query_603502 = newJObject()
  var formData_603503 = newJObject()
  add(formData_603503, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_603503, "MetricValue", newJFloat(MetricValue))
  add(formData_603503, "BreachThreshold", newJFloat(BreachThreshold))
  add(formData_603503, "HonorCooldown", newJBool(HonorCooldown))
  add(query_603502, "Action", newJString(Action))
  add(query_603502, "Version", newJString(Version))
  add(formData_603503, "PolicyName", newJString(PolicyName))
  result = call_603501.call(nil, query_603502, nil, formData_603503, nil)

var postExecutePolicy* = Call_PostExecutePolicy_603483(name: "postExecutePolicy",
    meth: HttpMethod.HttpPost, host: "autoscaling.amazonaws.com",
    route: "/#Action=ExecutePolicy", validator: validate_PostExecutePolicy_603484,
    base: "/", url: url_PostExecutePolicy_603485,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetExecutePolicy_603463 = ref object of OpenApiRestCall_601389
proc url_GetExecutePolicy_603465(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetExecutePolicy_603464(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Executes the specified policy.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MetricValue: JFloat
  ##              : <p>The metric value to compare to <code>BreachThreshold</code>. This enables you to execute a policy of type <code>StepScaling</code> and determine which step adjustment to use. For example, if the breach threshold is 50 and you want to use a step adjustment with a lower bound of 0 and an upper bound of 10, you can set the metric value to 59.</p> <p>If you specify a metric value that doesn't correspond to a step adjustment for the policy, the call returns an error.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   BreachThreshold: JFloat
  ##                  : <p>The breach threshold for the alarm.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   PolicyName: JString (required)
  ##             : The name or ARN of the policy.
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   HonorCooldown: JBool
  ##                : <p>Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before executing the policy.</p> <p>This parameter is not supported if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_603466 = query.getOrDefault("MetricValue")
  valid_603466 = validateParameter(valid_603466, JFloat, required = false,
                                 default = nil)
  if valid_603466 != nil:
    section.add "MetricValue", valid_603466
  var valid_603467 = query.getOrDefault("BreachThreshold")
  valid_603467 = validateParameter(valid_603467, JFloat, required = false,
                                 default = nil)
  if valid_603467 != nil:
    section.add "BreachThreshold", valid_603467
  assert query != nil,
        "query argument is necessary due to required `PolicyName` field"
  var valid_603468 = query.getOrDefault("PolicyName")
  valid_603468 = validateParameter(valid_603468, JString, required = true,
                                 default = nil)
  if valid_603468 != nil:
    section.add "PolicyName", valid_603468
  var valid_603469 = query.getOrDefault("AutoScalingGroupName")
  valid_603469 = validateParameter(valid_603469, JString, required = false,
                                 default = nil)
  if valid_603469 != nil:
    section.add "AutoScalingGroupName", valid_603469
  var valid_603470 = query.getOrDefault("Action")
  valid_603470 = validateParameter(valid_603470, JString, required = true,
                                 default = newJString("ExecutePolicy"))
  if valid_603470 != nil:
    section.add "Action", valid_603470
  var valid_603471 = query.getOrDefault("HonorCooldown")
  valid_603471 = validateParameter(valid_603471, JBool, required = false, default = nil)
  if valid_603471 != nil:
    section.add "HonorCooldown", valid_603471
  var valid_603472 = query.getOrDefault("Version")
  valid_603472 = validateParameter(valid_603472, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603472 != nil:
    section.add "Version", valid_603472
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603473 = header.getOrDefault("X-Amz-Signature")
  valid_603473 = validateParameter(valid_603473, JString, required = false,
                                 default = nil)
  if valid_603473 != nil:
    section.add "X-Amz-Signature", valid_603473
  var valid_603474 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603474 = validateParameter(valid_603474, JString, required = false,
                                 default = nil)
  if valid_603474 != nil:
    section.add "X-Amz-Content-Sha256", valid_603474
  var valid_603475 = header.getOrDefault("X-Amz-Date")
  valid_603475 = validateParameter(valid_603475, JString, required = false,
                                 default = nil)
  if valid_603475 != nil:
    section.add "X-Amz-Date", valid_603475
  var valid_603476 = header.getOrDefault("X-Amz-Credential")
  valid_603476 = validateParameter(valid_603476, JString, required = false,
                                 default = nil)
  if valid_603476 != nil:
    section.add "X-Amz-Credential", valid_603476
  var valid_603477 = header.getOrDefault("X-Amz-Security-Token")
  valid_603477 = validateParameter(valid_603477, JString, required = false,
                                 default = nil)
  if valid_603477 != nil:
    section.add "X-Amz-Security-Token", valid_603477
  var valid_603478 = header.getOrDefault("X-Amz-Algorithm")
  valid_603478 = validateParameter(valid_603478, JString, required = false,
                                 default = nil)
  if valid_603478 != nil:
    section.add "X-Amz-Algorithm", valid_603478
  var valid_603479 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603479 = validateParameter(valid_603479, JString, required = false,
                                 default = nil)
  if valid_603479 != nil:
    section.add "X-Amz-SignedHeaders", valid_603479
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603480: Call_GetExecutePolicy_603463; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Executes the specified policy.
  ## 
  let valid = call_603480.validator(path, query, header, formData, body)
  let scheme = call_603480.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603480.url(scheme.get, call_603480.host, call_603480.base,
                         call_603480.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603480, url, valid)

proc call*(call_603481: Call_GetExecutePolicy_603463; PolicyName: string;
          MetricValue: float = 0.0; BreachThreshold: float = 0.0;
          AutoScalingGroupName: string = ""; Action: string = "ExecutePolicy";
          HonorCooldown: bool = false; Version: string = "2011-01-01"): Recallable =
  ## getExecutePolicy
  ## Executes the specified policy.
  ##   MetricValue: float
  ##              : <p>The metric value to compare to <code>BreachThreshold</code>. This enables you to execute a policy of type <code>StepScaling</code> and determine which step adjustment to use. For example, if the breach threshold is 50 and you want to use a step adjustment with a lower bound of 0 and an upper bound of 10, you can set the metric value to 59.</p> <p>If you specify a metric value that doesn't correspond to a step adjustment for the policy, the call returns an error.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   BreachThreshold: float
  ##                  : <p>The breach threshold for the alarm.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   PolicyName: string (required)
  ##             : The name or ARN of the policy.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   HonorCooldown: bool
  ##                : <p>Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before executing the policy.</p> <p>This parameter is not supported if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Version: string (required)
  var query_603482 = newJObject()
  add(query_603482, "MetricValue", newJFloat(MetricValue))
  add(query_603482, "BreachThreshold", newJFloat(BreachThreshold))
  add(query_603482, "PolicyName", newJString(PolicyName))
  add(query_603482, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_603482, "Action", newJString(Action))
  add(query_603482, "HonorCooldown", newJBool(HonorCooldown))
  add(query_603482, "Version", newJString(Version))
  result = call_603481.call(nil, query_603482, nil, nil, nil)

var getExecutePolicy* = Call_GetExecutePolicy_603463(name: "getExecutePolicy",
    meth: HttpMethod.HttpGet, host: "autoscaling.amazonaws.com",
    route: "/#Action=ExecutePolicy", validator: validate_GetExecutePolicy_603464,
    base: "/", url: url_GetExecutePolicy_603465,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostExitStandby_603521 = ref object of OpenApiRestCall_601389
proc url_PostExitStandby_603523(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostExitStandby_603522(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Moves the specified instances out of the standby state.</p> <p>After you put the instances back in service, the desired capacity is incremented.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603524 = query.getOrDefault("Action")
  valid_603524 = validateParameter(valid_603524, JString, required = true,
                                 default = newJString("ExitStandby"))
  if valid_603524 != nil:
    section.add "Action", valid_603524
  var valid_603525 = query.getOrDefault("Version")
  valid_603525 = validateParameter(valid_603525, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603525 != nil:
    section.add "Version", valid_603525
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603526 = header.getOrDefault("X-Amz-Signature")
  valid_603526 = validateParameter(valid_603526, JString, required = false,
                                 default = nil)
  if valid_603526 != nil:
    section.add "X-Amz-Signature", valid_603526
  var valid_603527 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603527 = validateParameter(valid_603527, JString, required = false,
                                 default = nil)
  if valid_603527 != nil:
    section.add "X-Amz-Content-Sha256", valid_603527
  var valid_603528 = header.getOrDefault("X-Amz-Date")
  valid_603528 = validateParameter(valid_603528, JString, required = false,
                                 default = nil)
  if valid_603528 != nil:
    section.add "X-Amz-Date", valid_603528
  var valid_603529 = header.getOrDefault("X-Amz-Credential")
  valid_603529 = validateParameter(valid_603529, JString, required = false,
                                 default = nil)
  if valid_603529 != nil:
    section.add "X-Amz-Credential", valid_603529
  var valid_603530 = header.getOrDefault("X-Amz-Security-Token")
  valid_603530 = validateParameter(valid_603530, JString, required = false,
                                 default = nil)
  if valid_603530 != nil:
    section.add "X-Amz-Security-Token", valid_603530
  var valid_603531 = header.getOrDefault("X-Amz-Algorithm")
  valid_603531 = validateParameter(valid_603531, JString, required = false,
                                 default = nil)
  if valid_603531 != nil:
    section.add "X-Amz-Algorithm", valid_603531
  var valid_603532 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603532 = validateParameter(valid_603532, JString, required = false,
                                 default = nil)
  if valid_603532 != nil:
    section.add "X-Amz-SignedHeaders", valid_603532
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_603533 = formData.getOrDefault("AutoScalingGroupName")
  valid_603533 = validateParameter(valid_603533, JString, required = true,
                                 default = nil)
  if valid_603533 != nil:
    section.add "AutoScalingGroupName", valid_603533
  var valid_603534 = formData.getOrDefault("InstanceIds")
  valid_603534 = validateParameter(valid_603534, JArray, required = false,
                                 default = nil)
  if valid_603534 != nil:
    section.add "InstanceIds", valid_603534
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603535: Call_PostExitStandby_603521; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Moves the specified instances out of the standby state.</p> <p>After you put the instances back in service, the desired capacity is incremented.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_603535.validator(path, query, header, formData, body)
  let scheme = call_603535.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603535.url(scheme.get, call_603535.host, call_603535.base,
                         call_603535.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603535, url, valid)

proc call*(call_603536: Call_PostExitStandby_603521; AutoScalingGroupName: string;
          InstanceIds: JsonNode = nil; Action: string = "ExitStandby";
          Version: string = "2011-01-01"): Recallable =
  ## postExitStandby
  ## <p>Moves the specified instances out of the standby state.</p> <p>After you put the instances back in service, the desired capacity is incremented.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603537 = newJObject()
  var formData_603538 = newJObject()
  add(formData_603538, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if InstanceIds != nil:
    formData_603538.add "InstanceIds", InstanceIds
  add(query_603537, "Action", newJString(Action))
  add(query_603537, "Version", newJString(Version))
  result = call_603536.call(nil, query_603537, nil, formData_603538, nil)

var postExitStandby* = Call_PostExitStandby_603521(name: "postExitStandby",
    meth: HttpMethod.HttpPost, host: "autoscaling.amazonaws.com",
    route: "/#Action=ExitStandby", validator: validate_PostExitStandby_603522,
    base: "/", url: url_PostExitStandby_603523, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetExitStandby_603504 = ref object of OpenApiRestCall_601389
proc url_GetExitStandby_603506(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetExitStandby_603505(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Moves the specified instances out of the standby state.</p> <p>After you put the instances back in service, the desired capacity is incremented.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_603507 = query.getOrDefault("InstanceIds")
  valid_603507 = validateParameter(valid_603507, JArray, required = false,
                                 default = nil)
  if valid_603507 != nil:
    section.add "InstanceIds", valid_603507
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_603508 = query.getOrDefault("AutoScalingGroupName")
  valid_603508 = validateParameter(valid_603508, JString, required = true,
                                 default = nil)
  if valid_603508 != nil:
    section.add "AutoScalingGroupName", valid_603508
  var valid_603509 = query.getOrDefault("Action")
  valid_603509 = validateParameter(valid_603509, JString, required = true,
                                 default = newJString("ExitStandby"))
  if valid_603509 != nil:
    section.add "Action", valid_603509
  var valid_603510 = query.getOrDefault("Version")
  valid_603510 = validateParameter(valid_603510, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603510 != nil:
    section.add "Version", valid_603510
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603511 = header.getOrDefault("X-Amz-Signature")
  valid_603511 = validateParameter(valid_603511, JString, required = false,
                                 default = nil)
  if valid_603511 != nil:
    section.add "X-Amz-Signature", valid_603511
  var valid_603512 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603512 = validateParameter(valid_603512, JString, required = false,
                                 default = nil)
  if valid_603512 != nil:
    section.add "X-Amz-Content-Sha256", valid_603512
  var valid_603513 = header.getOrDefault("X-Amz-Date")
  valid_603513 = validateParameter(valid_603513, JString, required = false,
                                 default = nil)
  if valid_603513 != nil:
    section.add "X-Amz-Date", valid_603513
  var valid_603514 = header.getOrDefault("X-Amz-Credential")
  valid_603514 = validateParameter(valid_603514, JString, required = false,
                                 default = nil)
  if valid_603514 != nil:
    section.add "X-Amz-Credential", valid_603514
  var valid_603515 = header.getOrDefault("X-Amz-Security-Token")
  valid_603515 = validateParameter(valid_603515, JString, required = false,
                                 default = nil)
  if valid_603515 != nil:
    section.add "X-Amz-Security-Token", valid_603515
  var valid_603516 = header.getOrDefault("X-Amz-Algorithm")
  valid_603516 = validateParameter(valid_603516, JString, required = false,
                                 default = nil)
  if valid_603516 != nil:
    section.add "X-Amz-Algorithm", valid_603516
  var valid_603517 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603517 = validateParameter(valid_603517, JString, required = false,
                                 default = nil)
  if valid_603517 != nil:
    section.add "X-Amz-SignedHeaders", valid_603517
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603518: Call_GetExitStandby_603504; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Moves the specified instances out of the standby state.</p> <p>After you put the instances back in service, the desired capacity is incremented.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_603518.validator(path, query, header, formData, body)
  let scheme = call_603518.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603518.url(scheme.get, call_603518.host, call_603518.base,
                         call_603518.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603518, url, valid)

proc call*(call_603519: Call_GetExitStandby_603504; AutoScalingGroupName: string;
          InstanceIds: JsonNode = nil; Action: string = "ExitStandby";
          Version: string = "2011-01-01"): Recallable =
  ## getExitStandby
  ## <p>Moves the specified instances out of the standby state.</p> <p>After you put the instances back in service, the desired capacity is incremented.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603520 = newJObject()
  if InstanceIds != nil:
    query_603520.add "InstanceIds", InstanceIds
  add(query_603520, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_603520, "Action", newJString(Action))
  add(query_603520, "Version", newJString(Version))
  result = call_603519.call(nil, query_603520, nil, nil, nil)

var getExitStandby* = Call_GetExitStandby_603504(name: "getExitStandby",
    meth: HttpMethod.HttpGet, host: "autoscaling.amazonaws.com",
    route: "/#Action=ExitStandby", validator: validate_GetExitStandby_603505,
    base: "/", url: url_GetExitStandby_603506, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutLifecycleHook_603562 = ref object of OpenApiRestCall_601389
proc url_PostPutLifecycleHook_603564(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPutLifecycleHook_603563(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates or updates a lifecycle hook for the specified Auto Scaling group.</p> <p>A lifecycle hook tells Amazon EC2 Auto Scaling to perform an action on an instance when the instance launches (before it is put into service) or as the instance terminates (before it is fully terminated).</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p> <b>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</b> </p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state using <a>RecordLifecycleActionHeartbeat</a>.</p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action using <a>CompleteLifecycleAction</a>.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.</p> <p>You can view the lifecycle hooks for an Auto Scaling group using <a>DescribeLifecycleHooks</a>. If you are no longer using a lifecycle hook, you can delete it using <a>DeleteLifecycleHook</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603565 = query.getOrDefault("Action")
  valid_603565 = validateParameter(valid_603565, JString, required = true,
                                 default = newJString("PutLifecycleHook"))
  if valid_603565 != nil:
    section.add "Action", valid_603565
  var valid_603566 = query.getOrDefault("Version")
  valid_603566 = validateParameter(valid_603566, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603566 != nil:
    section.add "Version", valid_603566
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603567 = header.getOrDefault("X-Amz-Signature")
  valid_603567 = validateParameter(valid_603567, JString, required = false,
                                 default = nil)
  if valid_603567 != nil:
    section.add "X-Amz-Signature", valid_603567
  var valid_603568 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603568 = validateParameter(valid_603568, JString, required = false,
                                 default = nil)
  if valid_603568 != nil:
    section.add "X-Amz-Content-Sha256", valid_603568
  var valid_603569 = header.getOrDefault("X-Amz-Date")
  valid_603569 = validateParameter(valid_603569, JString, required = false,
                                 default = nil)
  if valid_603569 != nil:
    section.add "X-Amz-Date", valid_603569
  var valid_603570 = header.getOrDefault("X-Amz-Credential")
  valid_603570 = validateParameter(valid_603570, JString, required = false,
                                 default = nil)
  if valid_603570 != nil:
    section.add "X-Amz-Credential", valid_603570
  var valid_603571 = header.getOrDefault("X-Amz-Security-Token")
  valid_603571 = validateParameter(valid_603571, JString, required = false,
                                 default = nil)
  if valid_603571 != nil:
    section.add "X-Amz-Security-Token", valid_603571
  var valid_603572 = header.getOrDefault("X-Amz-Algorithm")
  valid_603572 = validateParameter(valid_603572, JString, required = false,
                                 default = nil)
  if valid_603572 != nil:
    section.add "X-Amz-Algorithm", valid_603572
  var valid_603573 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603573 = validateParameter(valid_603573, JString, required = false,
                                 default = nil)
  if valid_603573 != nil:
    section.add "X-Amz-SignedHeaders", valid_603573
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   HeartbeatTimeout: JInt
  ##                   : <p>The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from <code>30</code> to <code>7200</code> seconds. The default value is <code>3600</code> seconds (1 hour).</p> <p>If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action that you specified in the <code>DefaultResult</code> parameter. You can prevent the lifecycle hook from timing out by calling <a>RecordLifecycleActionHeartbeat</a>.</p>
  ##   NotificationMetadata: JString
  ##                       : Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.
  ##   NotificationTargetARN: JString
  ##                        : <p>The ARN of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in the transition state for the lifecycle hook. This target can be either an SQS queue or an SNS topic.</p> <p>If you specify an empty string, this overrides the current ARN.</p> <p>This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key-value pair format when sending notifications to an Amazon SNS topic.</p> <p>When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test messages contain the following additional key-value pair: <code>"Event": "autoscaling:TEST_NOTIFICATION"</code>.</p>
  ##   LifecycleTransition: JString
  ##                      : <p>The instance state to which you want to attach the lifecycle hook. The valid values are:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   RoleARN: JString
  ##          : <p>The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target, for example, an Amazon SNS topic or an Amazon SQS queue.</p> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  ##   DefaultResult: JString
  ##                : Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>. The default value is <code>ABANDON</code>.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_603574 = formData.getOrDefault("AutoScalingGroupName")
  valid_603574 = validateParameter(valid_603574, JString, required = true,
                                 default = nil)
  if valid_603574 != nil:
    section.add "AutoScalingGroupName", valid_603574
  var valid_603575 = formData.getOrDefault("HeartbeatTimeout")
  valid_603575 = validateParameter(valid_603575, JInt, required = false, default = nil)
  if valid_603575 != nil:
    section.add "HeartbeatTimeout", valid_603575
  var valid_603576 = formData.getOrDefault("NotificationMetadata")
  valid_603576 = validateParameter(valid_603576, JString, required = false,
                                 default = nil)
  if valid_603576 != nil:
    section.add "NotificationMetadata", valid_603576
  var valid_603577 = formData.getOrDefault("NotificationTargetARN")
  valid_603577 = validateParameter(valid_603577, JString, required = false,
                                 default = nil)
  if valid_603577 != nil:
    section.add "NotificationTargetARN", valid_603577
  var valid_603578 = formData.getOrDefault("LifecycleTransition")
  valid_603578 = validateParameter(valid_603578, JString, required = false,
                                 default = nil)
  if valid_603578 != nil:
    section.add "LifecycleTransition", valid_603578
  var valid_603579 = formData.getOrDefault("LifecycleHookName")
  valid_603579 = validateParameter(valid_603579, JString, required = true,
                                 default = nil)
  if valid_603579 != nil:
    section.add "LifecycleHookName", valid_603579
  var valid_603580 = formData.getOrDefault("RoleARN")
  valid_603580 = validateParameter(valid_603580, JString, required = false,
                                 default = nil)
  if valid_603580 != nil:
    section.add "RoleARN", valid_603580
  var valid_603581 = formData.getOrDefault("DefaultResult")
  valid_603581 = validateParameter(valid_603581, JString, required = false,
                                 default = nil)
  if valid_603581 != nil:
    section.add "DefaultResult", valid_603581
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603582: Call_PostPutLifecycleHook_603562; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates or updates a lifecycle hook for the specified Auto Scaling group.</p> <p>A lifecycle hook tells Amazon EC2 Auto Scaling to perform an action on an instance when the instance launches (before it is put into service) or as the instance terminates (before it is fully terminated).</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p> <b>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</b> </p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state using <a>RecordLifecycleActionHeartbeat</a>.</p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action using <a>CompleteLifecycleAction</a>.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.</p> <p>You can view the lifecycle hooks for an Auto Scaling group using <a>DescribeLifecycleHooks</a>. If you are no longer using a lifecycle hook, you can delete it using <a>DeleteLifecycleHook</a>.</p>
  ## 
  let valid = call_603582.validator(path, query, header, formData, body)
  let scheme = call_603582.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603582.url(scheme.get, call_603582.host, call_603582.base,
                         call_603582.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603582, url, valid)

proc call*(call_603583: Call_PostPutLifecycleHook_603562;
          AutoScalingGroupName: string; LifecycleHookName: string;
          HeartbeatTimeout: int = 0; NotificationMetadata: string = "";
          NotificationTargetARN: string = ""; LifecycleTransition: string = "";
          RoleARN: string = ""; Action: string = "PutLifecycleHook";
          Version: string = "2011-01-01"; DefaultResult: string = ""): Recallable =
  ## postPutLifecycleHook
  ## <p>Creates or updates a lifecycle hook for the specified Auto Scaling group.</p> <p>A lifecycle hook tells Amazon EC2 Auto Scaling to perform an action on an instance when the instance launches (before it is put into service) or as the instance terminates (before it is fully terminated).</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p> <b>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</b> </p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state using <a>RecordLifecycleActionHeartbeat</a>.</p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action using <a>CompleteLifecycleAction</a>.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.</p> <p>You can view the lifecycle hooks for an Auto Scaling group using <a>DescribeLifecycleHooks</a>. If you are no longer using a lifecycle hook, you can delete it using <a>DeleteLifecycleHook</a>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   HeartbeatTimeout: int
  ##                   : <p>The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from <code>30</code> to <code>7200</code> seconds. The default value is <code>3600</code> seconds (1 hour).</p> <p>If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action that you specified in the <code>DefaultResult</code> parameter. You can prevent the lifecycle hook from timing out by calling <a>RecordLifecycleActionHeartbeat</a>.</p>
  ##   NotificationMetadata: string
  ##                       : Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.
  ##   NotificationTargetARN: string
  ##                        : <p>The ARN of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in the transition state for the lifecycle hook. This target can be either an SQS queue or an SNS topic.</p> <p>If you specify an empty string, this overrides the current ARN.</p> <p>This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key-value pair format when sending notifications to an Amazon SNS topic.</p> <p>When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test messages contain the following additional key-value pair: <code>"Event": "autoscaling:TEST_NOTIFICATION"</code>.</p>
  ##   LifecycleTransition: string
  ##                      : <p>The instance state to which you want to attach the lifecycle hook. The valid values are:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   RoleARN: string
  ##          : <p>The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target, for example, an Amazon SNS topic or an Amazon SQS queue.</p> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DefaultResult: string
  ##                : Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>. The default value is <code>ABANDON</code>.
  var query_603584 = newJObject()
  var formData_603585 = newJObject()
  add(formData_603585, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_603585, "HeartbeatTimeout", newJInt(HeartbeatTimeout))
  add(formData_603585, "NotificationMetadata", newJString(NotificationMetadata))
  add(formData_603585, "NotificationTargetARN", newJString(NotificationTargetARN))
  add(formData_603585, "LifecycleTransition", newJString(LifecycleTransition))
  add(formData_603585, "LifecycleHookName", newJString(LifecycleHookName))
  add(formData_603585, "RoleARN", newJString(RoleARN))
  add(query_603584, "Action", newJString(Action))
  add(query_603584, "Version", newJString(Version))
  add(formData_603585, "DefaultResult", newJString(DefaultResult))
  result = call_603583.call(nil, query_603584, nil, formData_603585, nil)

var postPutLifecycleHook* = Call_PostPutLifecycleHook_603562(
    name: "postPutLifecycleHook", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=PutLifecycleHook",
    validator: validate_PostPutLifecycleHook_603563, base: "/",
    url: url_PostPutLifecycleHook_603564, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutLifecycleHook_603539 = ref object of OpenApiRestCall_601389
proc url_GetPutLifecycleHook_603541(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPutLifecycleHook_603540(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Creates or updates a lifecycle hook for the specified Auto Scaling group.</p> <p>A lifecycle hook tells Amazon EC2 Auto Scaling to perform an action on an instance when the instance launches (before it is put into service) or as the instance terminates (before it is fully terminated).</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p> <b>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</b> </p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state using <a>RecordLifecycleActionHeartbeat</a>.</p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action using <a>CompleteLifecycleAction</a>.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.</p> <p>You can view the lifecycle hooks for an Auto Scaling group using <a>DescribeLifecycleHooks</a>. If you are no longer using a lifecycle hook, you can delete it using <a>DeleteLifecycleHook</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NotificationTargetARN: JString
  ##                        : <p>The ARN of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in the transition state for the lifecycle hook. This target can be either an SQS queue or an SNS topic.</p> <p>If you specify an empty string, this overrides the current ARN.</p> <p>This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key-value pair format when sending notifications to an Amazon SNS topic.</p> <p>When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test messages contain the following additional key-value pair: <code>"Event": "autoscaling:TEST_NOTIFICATION"</code>.</p>
  ##   LifecycleTransition: JString
  ##                      : <p>The instance state to which you want to attach the lifecycle hook. The valid values are:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  ##   HeartbeatTimeout: JInt
  ##                   : <p>The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from <code>30</code> to <code>7200</code> seconds. The default value is <code>3600</code> seconds (1 hour).</p> <p>If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action that you specified in the <code>DefaultResult</code> parameter. You can prevent the lifecycle hook from timing out by calling <a>RecordLifecycleActionHeartbeat</a>.</p>
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   DefaultResult: JString
  ##                : Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>. The default value is <code>ABANDON</code>.
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   Action: JString (required)
  ##   NotificationMetadata: JString
  ##                       : Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.
  ##   Version: JString (required)
  ##   RoleARN: JString
  ##          : <p>The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target, for example, an Amazon SNS topic or an Amazon SQS queue.</p> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  section = newJObject()
  var valid_603542 = query.getOrDefault("NotificationTargetARN")
  valid_603542 = validateParameter(valid_603542, JString, required = false,
                                 default = nil)
  if valid_603542 != nil:
    section.add "NotificationTargetARN", valid_603542
  var valid_603543 = query.getOrDefault("LifecycleTransition")
  valid_603543 = validateParameter(valid_603543, JString, required = false,
                                 default = nil)
  if valid_603543 != nil:
    section.add "LifecycleTransition", valid_603543
  var valid_603544 = query.getOrDefault("HeartbeatTimeout")
  valid_603544 = validateParameter(valid_603544, JInt, required = false, default = nil)
  if valid_603544 != nil:
    section.add "HeartbeatTimeout", valid_603544
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_603545 = query.getOrDefault("AutoScalingGroupName")
  valid_603545 = validateParameter(valid_603545, JString, required = true,
                                 default = nil)
  if valid_603545 != nil:
    section.add "AutoScalingGroupName", valid_603545
  var valid_603546 = query.getOrDefault("DefaultResult")
  valid_603546 = validateParameter(valid_603546, JString, required = false,
                                 default = nil)
  if valid_603546 != nil:
    section.add "DefaultResult", valid_603546
  var valid_603547 = query.getOrDefault("LifecycleHookName")
  valid_603547 = validateParameter(valid_603547, JString, required = true,
                                 default = nil)
  if valid_603547 != nil:
    section.add "LifecycleHookName", valid_603547
  var valid_603548 = query.getOrDefault("Action")
  valid_603548 = validateParameter(valid_603548, JString, required = true,
                                 default = newJString("PutLifecycleHook"))
  if valid_603548 != nil:
    section.add "Action", valid_603548
  var valid_603549 = query.getOrDefault("NotificationMetadata")
  valid_603549 = validateParameter(valid_603549, JString, required = false,
                                 default = nil)
  if valid_603549 != nil:
    section.add "NotificationMetadata", valid_603549
  var valid_603550 = query.getOrDefault("Version")
  valid_603550 = validateParameter(valid_603550, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603550 != nil:
    section.add "Version", valid_603550
  var valid_603551 = query.getOrDefault("RoleARN")
  valid_603551 = validateParameter(valid_603551, JString, required = false,
                                 default = nil)
  if valid_603551 != nil:
    section.add "RoleARN", valid_603551
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603552 = header.getOrDefault("X-Amz-Signature")
  valid_603552 = validateParameter(valid_603552, JString, required = false,
                                 default = nil)
  if valid_603552 != nil:
    section.add "X-Amz-Signature", valid_603552
  var valid_603553 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603553 = validateParameter(valid_603553, JString, required = false,
                                 default = nil)
  if valid_603553 != nil:
    section.add "X-Amz-Content-Sha256", valid_603553
  var valid_603554 = header.getOrDefault("X-Amz-Date")
  valid_603554 = validateParameter(valid_603554, JString, required = false,
                                 default = nil)
  if valid_603554 != nil:
    section.add "X-Amz-Date", valid_603554
  var valid_603555 = header.getOrDefault("X-Amz-Credential")
  valid_603555 = validateParameter(valid_603555, JString, required = false,
                                 default = nil)
  if valid_603555 != nil:
    section.add "X-Amz-Credential", valid_603555
  var valid_603556 = header.getOrDefault("X-Amz-Security-Token")
  valid_603556 = validateParameter(valid_603556, JString, required = false,
                                 default = nil)
  if valid_603556 != nil:
    section.add "X-Amz-Security-Token", valid_603556
  var valid_603557 = header.getOrDefault("X-Amz-Algorithm")
  valid_603557 = validateParameter(valid_603557, JString, required = false,
                                 default = nil)
  if valid_603557 != nil:
    section.add "X-Amz-Algorithm", valid_603557
  var valid_603558 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603558 = validateParameter(valid_603558, JString, required = false,
                                 default = nil)
  if valid_603558 != nil:
    section.add "X-Amz-SignedHeaders", valid_603558
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603559: Call_GetPutLifecycleHook_603539; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates or updates a lifecycle hook for the specified Auto Scaling group.</p> <p>A lifecycle hook tells Amazon EC2 Auto Scaling to perform an action on an instance when the instance launches (before it is put into service) or as the instance terminates (before it is fully terminated).</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p> <b>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</b> </p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state using <a>RecordLifecycleActionHeartbeat</a>.</p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action using <a>CompleteLifecycleAction</a>.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.</p> <p>You can view the lifecycle hooks for an Auto Scaling group using <a>DescribeLifecycleHooks</a>. If you are no longer using a lifecycle hook, you can delete it using <a>DeleteLifecycleHook</a>.</p>
  ## 
  let valid = call_603559.validator(path, query, header, formData, body)
  let scheme = call_603559.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603559.url(scheme.get, call_603559.host, call_603559.base,
                         call_603559.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603559, url, valid)

proc call*(call_603560: Call_GetPutLifecycleHook_603539;
          AutoScalingGroupName: string; LifecycleHookName: string;
          NotificationTargetARN: string = ""; LifecycleTransition: string = "";
          HeartbeatTimeout: int = 0; DefaultResult: string = "";
          Action: string = "PutLifecycleHook"; NotificationMetadata: string = "";
          Version: string = "2011-01-01"; RoleARN: string = ""): Recallable =
  ## getPutLifecycleHook
  ## <p>Creates or updates a lifecycle hook for the specified Auto Scaling group.</p> <p>A lifecycle hook tells Amazon EC2 Auto Scaling to perform an action on an instance when the instance launches (before it is put into service) or as the instance terminates (before it is fully terminated).</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p> <b>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</b> </p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state using <a>RecordLifecycleActionHeartbeat</a>.</p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action using <a>CompleteLifecycleAction</a>.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.</p> <p>You can view the lifecycle hooks for an Auto Scaling group using <a>DescribeLifecycleHooks</a>. If you are no longer using a lifecycle hook, you can delete it using <a>DeleteLifecycleHook</a>.</p>
  ##   NotificationTargetARN: string
  ##                        : <p>The ARN of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in the transition state for the lifecycle hook. This target can be either an SQS queue or an SNS topic.</p> <p>If you specify an empty string, this overrides the current ARN.</p> <p>This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key-value pair format when sending notifications to an Amazon SNS topic.</p> <p>When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test messages contain the following additional key-value pair: <code>"Event": "autoscaling:TEST_NOTIFICATION"</code>.</p>
  ##   LifecycleTransition: string
  ##                      : <p>The instance state to which you want to attach the lifecycle hook. The valid values are:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  ##   HeartbeatTimeout: int
  ##                   : <p>The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from <code>30</code> to <code>7200</code> seconds. The default value is <code>3600</code> seconds (1 hour).</p> <p>If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action that you specified in the <code>DefaultResult</code> parameter. You can prevent the lifecycle hook from timing out by calling <a>RecordLifecycleActionHeartbeat</a>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   DefaultResult: string
  ##                : Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>. The default value is <code>ABANDON</code>.
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   Action: string (required)
  ##   NotificationMetadata: string
  ##                       : Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.
  ##   Version: string (required)
  ##   RoleARN: string
  ##          : <p>The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target, for example, an Amazon SNS topic or an Amazon SQS queue.</p> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  var query_603561 = newJObject()
  add(query_603561, "NotificationTargetARN", newJString(NotificationTargetARN))
  add(query_603561, "LifecycleTransition", newJString(LifecycleTransition))
  add(query_603561, "HeartbeatTimeout", newJInt(HeartbeatTimeout))
  add(query_603561, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_603561, "DefaultResult", newJString(DefaultResult))
  add(query_603561, "LifecycleHookName", newJString(LifecycleHookName))
  add(query_603561, "Action", newJString(Action))
  add(query_603561, "NotificationMetadata", newJString(NotificationMetadata))
  add(query_603561, "Version", newJString(Version))
  add(query_603561, "RoleARN", newJString(RoleARN))
  result = call_603560.call(nil, query_603561, nil, nil, nil)

var getPutLifecycleHook* = Call_GetPutLifecycleHook_603539(
    name: "getPutLifecycleHook", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=PutLifecycleHook",
    validator: validate_GetPutLifecycleHook_603540, base: "/",
    url: url_GetPutLifecycleHook_603541, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutNotificationConfiguration_603604 = ref object of OpenApiRestCall_601389
proc url_PostPutNotificationConfiguration_603606(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPutNotificationConfiguration_603605(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.</p> <p>This configuration overwrites any existing configuration.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html">Getting Amazon SNS Notifications When Your Auto Scaling Group Scales</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603607 = query.getOrDefault("Action")
  valid_603607 = validateParameter(valid_603607, JString, required = true, default = newJString(
      "PutNotificationConfiguration"))
  if valid_603607 != nil:
    section.add "Action", valid_603607
  var valid_603608 = query.getOrDefault("Version")
  valid_603608 = validateParameter(valid_603608, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603608 != nil:
    section.add "Version", valid_603608
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603609 = header.getOrDefault("X-Amz-Signature")
  valid_603609 = validateParameter(valid_603609, JString, required = false,
                                 default = nil)
  if valid_603609 != nil:
    section.add "X-Amz-Signature", valid_603609
  var valid_603610 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603610 = validateParameter(valid_603610, JString, required = false,
                                 default = nil)
  if valid_603610 != nil:
    section.add "X-Amz-Content-Sha256", valid_603610
  var valid_603611 = header.getOrDefault("X-Amz-Date")
  valid_603611 = validateParameter(valid_603611, JString, required = false,
                                 default = nil)
  if valid_603611 != nil:
    section.add "X-Amz-Date", valid_603611
  var valid_603612 = header.getOrDefault("X-Amz-Credential")
  valid_603612 = validateParameter(valid_603612, JString, required = false,
                                 default = nil)
  if valid_603612 != nil:
    section.add "X-Amz-Credential", valid_603612
  var valid_603613 = header.getOrDefault("X-Amz-Security-Token")
  valid_603613 = validateParameter(valid_603613, JString, required = false,
                                 default = nil)
  if valid_603613 != nil:
    section.add "X-Amz-Security-Token", valid_603613
  var valid_603614 = header.getOrDefault("X-Amz-Algorithm")
  valid_603614 = validateParameter(valid_603614, JString, required = false,
                                 default = nil)
  if valid_603614 != nil:
    section.add "X-Amz-Algorithm", valid_603614
  var valid_603615 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603615 = validateParameter(valid_603615, JString, required = false,
                                 default = nil)
  if valid_603615 != nil:
    section.add "X-Amz-SignedHeaders", valid_603615
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   NotificationTypes: JArray (required)
  ##                    : The type of event that causes the notification to be sent. For more information about notification types supported by Amazon EC2 Auto Scaling, see <a>DescribeAutoScalingNotificationTypes</a>.
  ##   TopicARN: JString (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_603616 = formData.getOrDefault("AutoScalingGroupName")
  valid_603616 = validateParameter(valid_603616, JString, required = true,
                                 default = nil)
  if valid_603616 != nil:
    section.add "AutoScalingGroupName", valid_603616
  var valid_603617 = formData.getOrDefault("NotificationTypes")
  valid_603617 = validateParameter(valid_603617, JArray, required = true, default = nil)
  if valid_603617 != nil:
    section.add "NotificationTypes", valid_603617
  var valid_603618 = formData.getOrDefault("TopicARN")
  valid_603618 = validateParameter(valid_603618, JString, required = true,
                                 default = nil)
  if valid_603618 != nil:
    section.add "TopicARN", valid_603618
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603619: Call_PostPutNotificationConfiguration_603604;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.</p> <p>This configuration overwrites any existing configuration.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html">Getting Amazon SNS Notifications When Your Auto Scaling Group Scales</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_603619.validator(path, query, header, formData, body)
  let scheme = call_603619.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603619.url(scheme.get, call_603619.host, call_603619.base,
                         call_603619.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603619, url, valid)

proc call*(call_603620: Call_PostPutNotificationConfiguration_603604;
          AutoScalingGroupName: string; NotificationTypes: JsonNode;
          TopicARN: string; Action: string = "PutNotificationConfiguration";
          Version: string = "2011-01-01"): Recallable =
  ## postPutNotificationConfiguration
  ## <p>Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.</p> <p>This configuration overwrites any existing configuration.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html">Getting Amazon SNS Notifications When Your Auto Scaling Group Scales</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   NotificationTypes: JArray (required)
  ##                    : The type of event that causes the notification to be sent. For more information about notification types supported by Amazon EC2 Auto Scaling, see <a>DescribeAutoScalingNotificationTypes</a>.
  ##   Action: string (required)
  ##   TopicARN: string (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   Version: string (required)
  var query_603621 = newJObject()
  var formData_603622 = newJObject()
  add(formData_603622, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if NotificationTypes != nil:
    formData_603622.add "NotificationTypes", NotificationTypes
  add(query_603621, "Action", newJString(Action))
  add(formData_603622, "TopicARN", newJString(TopicARN))
  add(query_603621, "Version", newJString(Version))
  result = call_603620.call(nil, query_603621, nil, formData_603622, nil)

var postPutNotificationConfiguration* = Call_PostPutNotificationConfiguration_603604(
    name: "postPutNotificationConfiguration", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=PutNotificationConfiguration",
    validator: validate_PostPutNotificationConfiguration_603605, base: "/",
    url: url_PostPutNotificationConfiguration_603606,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutNotificationConfiguration_603586 = ref object of OpenApiRestCall_601389
proc url_GetPutNotificationConfiguration_603588(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPutNotificationConfiguration_603587(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.</p> <p>This configuration overwrites any existing configuration.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html">Getting Amazon SNS Notifications When Your Auto Scaling Group Scales</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NotificationTypes: JArray (required)
  ##                    : The type of event that causes the notification to be sent. For more information about notification types supported by Amazon EC2 Auto Scaling, see <a>DescribeAutoScalingNotificationTypes</a>.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   TopicARN: JString (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `NotificationTypes` field"
  var valid_603589 = query.getOrDefault("NotificationTypes")
  valid_603589 = validateParameter(valid_603589, JArray, required = true, default = nil)
  if valid_603589 != nil:
    section.add "NotificationTypes", valid_603589
  var valid_603590 = query.getOrDefault("AutoScalingGroupName")
  valid_603590 = validateParameter(valid_603590, JString, required = true,
                                 default = nil)
  if valid_603590 != nil:
    section.add "AutoScalingGroupName", valid_603590
  var valid_603591 = query.getOrDefault("TopicARN")
  valid_603591 = validateParameter(valid_603591, JString, required = true,
                                 default = nil)
  if valid_603591 != nil:
    section.add "TopicARN", valid_603591
  var valid_603592 = query.getOrDefault("Action")
  valid_603592 = validateParameter(valid_603592, JString, required = true, default = newJString(
      "PutNotificationConfiguration"))
  if valid_603592 != nil:
    section.add "Action", valid_603592
  var valid_603593 = query.getOrDefault("Version")
  valid_603593 = validateParameter(valid_603593, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603593 != nil:
    section.add "Version", valid_603593
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603594 = header.getOrDefault("X-Amz-Signature")
  valid_603594 = validateParameter(valid_603594, JString, required = false,
                                 default = nil)
  if valid_603594 != nil:
    section.add "X-Amz-Signature", valid_603594
  var valid_603595 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603595 = validateParameter(valid_603595, JString, required = false,
                                 default = nil)
  if valid_603595 != nil:
    section.add "X-Amz-Content-Sha256", valid_603595
  var valid_603596 = header.getOrDefault("X-Amz-Date")
  valid_603596 = validateParameter(valid_603596, JString, required = false,
                                 default = nil)
  if valid_603596 != nil:
    section.add "X-Amz-Date", valid_603596
  var valid_603597 = header.getOrDefault("X-Amz-Credential")
  valid_603597 = validateParameter(valid_603597, JString, required = false,
                                 default = nil)
  if valid_603597 != nil:
    section.add "X-Amz-Credential", valid_603597
  var valid_603598 = header.getOrDefault("X-Amz-Security-Token")
  valid_603598 = validateParameter(valid_603598, JString, required = false,
                                 default = nil)
  if valid_603598 != nil:
    section.add "X-Amz-Security-Token", valid_603598
  var valid_603599 = header.getOrDefault("X-Amz-Algorithm")
  valid_603599 = validateParameter(valid_603599, JString, required = false,
                                 default = nil)
  if valid_603599 != nil:
    section.add "X-Amz-Algorithm", valid_603599
  var valid_603600 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603600 = validateParameter(valid_603600, JString, required = false,
                                 default = nil)
  if valid_603600 != nil:
    section.add "X-Amz-SignedHeaders", valid_603600
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603601: Call_GetPutNotificationConfiguration_603586;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.</p> <p>This configuration overwrites any existing configuration.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html">Getting Amazon SNS Notifications When Your Auto Scaling Group Scales</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_603601.validator(path, query, header, formData, body)
  let scheme = call_603601.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603601.url(scheme.get, call_603601.host, call_603601.base,
                         call_603601.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603601, url, valid)

proc call*(call_603602: Call_GetPutNotificationConfiguration_603586;
          NotificationTypes: JsonNode; AutoScalingGroupName: string;
          TopicARN: string; Action: string = "PutNotificationConfiguration";
          Version: string = "2011-01-01"): Recallable =
  ## getPutNotificationConfiguration
  ## <p>Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.</p> <p>This configuration overwrites any existing configuration.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html">Getting Amazon SNS Notifications When Your Auto Scaling Group Scales</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   NotificationTypes: JArray (required)
  ##                    : The type of event that causes the notification to be sent. For more information about notification types supported by Amazon EC2 Auto Scaling, see <a>DescribeAutoScalingNotificationTypes</a>.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   TopicARN: string (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603603 = newJObject()
  if NotificationTypes != nil:
    query_603603.add "NotificationTypes", NotificationTypes
  add(query_603603, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_603603, "TopicARN", newJString(TopicARN))
  add(query_603603, "Action", newJString(Action))
  add(query_603603, "Version", newJString(Version))
  result = call_603602.call(nil, query_603603, nil, nil, nil)

var getPutNotificationConfiguration* = Call_GetPutNotificationConfiguration_603586(
    name: "getPutNotificationConfiguration", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=PutNotificationConfiguration",
    validator: validate_GetPutNotificationConfiguration_603587, base: "/",
    url: url_GetPutNotificationConfiguration_603588,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutScalingPolicy_603653 = ref object of OpenApiRestCall_601389
proc url_PostPutScalingPolicy_603655(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPutScalingPolicy_603654(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates or updates a scaling policy for an Auto Scaling group. To update an existing scaling policy, use the existing policy name and set the parameters to change. Any existing parameter not changed in an update to an existing policy is not changed in this update request.</p> <p>For more information about using scaling policies to scale your Auto Scaling group automatically, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scale-based-on-demand.html">Dynamic Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603656 = query.getOrDefault("Action")
  valid_603656 = validateParameter(valid_603656, JString, required = true,
                                 default = newJString("PutScalingPolicy"))
  if valid_603656 != nil:
    section.add "Action", valid_603656
  var valid_603657 = query.getOrDefault("Version")
  valid_603657 = validateParameter(valid_603657, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603657 != nil:
    section.add "Version", valid_603657
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603658 = header.getOrDefault("X-Amz-Signature")
  valid_603658 = validateParameter(valid_603658, JString, required = false,
                                 default = nil)
  if valid_603658 != nil:
    section.add "X-Amz-Signature", valid_603658
  var valid_603659 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603659 = validateParameter(valid_603659, JString, required = false,
                                 default = nil)
  if valid_603659 != nil:
    section.add "X-Amz-Content-Sha256", valid_603659
  var valid_603660 = header.getOrDefault("X-Amz-Date")
  valid_603660 = validateParameter(valid_603660, JString, required = false,
                                 default = nil)
  if valid_603660 != nil:
    section.add "X-Amz-Date", valid_603660
  var valid_603661 = header.getOrDefault("X-Amz-Credential")
  valid_603661 = validateParameter(valid_603661, JString, required = false,
                                 default = nil)
  if valid_603661 != nil:
    section.add "X-Amz-Credential", valid_603661
  var valid_603662 = header.getOrDefault("X-Amz-Security-Token")
  valid_603662 = validateParameter(valid_603662, JString, required = false,
                                 default = nil)
  if valid_603662 != nil:
    section.add "X-Amz-Security-Token", valid_603662
  var valid_603663 = header.getOrDefault("X-Amz-Algorithm")
  valid_603663 = validateParameter(valid_603663, JString, required = false,
                                 default = nil)
  if valid_603663 != nil:
    section.add "X-Amz-Algorithm", valid_603663
  var valid_603664 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603664 = validateParameter(valid_603664, JString, required = false,
                                 default = nil)
  if valid_603664 != nil:
    section.add "X-Amz-SignedHeaders", valid_603664
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   StepAdjustments: JArray
  ##                  : <p>A set of adjustments that enable you to scale based on the size of the alarm breach.</p> <p>Conditional: If you specify <code>StepScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   TargetTrackingConfiguration.DisableScaleIn: JString
  ##                                             : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## Indicates whether scaling in by the target tracking scaling policy is disabled. If scaling in is disabled, the target tracking scaling policy doesn't remove instances from the Auto Scaling group. Otherwise, the target tracking scaling policy can remove instances from the Auto Scaling group. The default is <code>false</code>.
  ##   PolicyType: JString
  ##             : The policy type. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>. If the policy type is null, the value is treated as <code>SimpleScaling</code>.
  ##   ScalingAdjustment: JInt
  ##                    : <p>The amount by which a simple scaling policy scales the Auto Scaling group in response to an alarm breach. The adjustment is based on the value that you specified in the <code>AdjustmentType</code> parameter (either an absolute number or a percentage). A positive value adds to the current capacity and a negative value subtracts from the current capacity. For exact capacity, you must specify a positive value.</p> <p>Conditional: If you specify <code>SimpleScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   TargetTrackingConfiguration.PredefinedMetricSpecification: JString
  ##                                                            : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A predefined metric. You must specify either a predefined metric or a customized metric.
  ##   TargetTrackingConfiguration.CustomizedMetricSpecification: JString
  ##                                                            : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A customized metric. You must specify either a predefined metric or a customized metric.
  ##   TargetTrackingConfiguration.TargetValue: JString
  ##                                          : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## The target value for the metric.
  ##   Cooldown: JInt
  ##           : <p>The amount of time, in seconds, after a scaling activity completes before any further dynamic scaling activities can start. If this parameter is not specified, the default cooldown period for the group applies.</p> <p>Valid only if the policy type is <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MinAdjustmentStep: JInt
  ##                    : Available for backward compatibility. Use <code>MinAdjustmentMagnitude</code> instead.
  ##   AdjustmentType: JString
  ##                 : <p>Specifies whether the <code>ScalingAdjustment</code> parameter is an absolute number or a percentage of the current capacity. The valid values are <code>ChangeInCapacity</code>, <code>ExactCapacity</code>, and <code>PercentChangeInCapacity</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment">Scaling Adjustment Types</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   PolicyName: JString (required)
  ##             : The name of the policy.
  ##   MinAdjustmentMagnitude: JInt
  ##                         : <p>The minimum number of instances to scale. If the value of <code>AdjustmentType</code> is <code>PercentChangeInCapacity</code>, the scaling policy changes the <code>DesiredCapacity</code> of the Auto Scaling group by at least this many instances. Otherwise, the error is <code>ValidationError</code>.</p> <p>This property replaces the <code>MinAdjustmentStep</code> property. For example, suppose that you create a step scaling policy to scale out an Auto Scaling group by 25 percent and you specify a <code>MinAdjustmentMagnitude</code> of 2. If the group has 4 instances and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a <code>MinAdjustmentMagnitude</code> of 2, Amazon EC2 Auto Scaling scales out the group by 2 instances.</p> <p>Valid only if the policy type is <code>SimpleScaling</code> or <code>StepScaling</code>.</p>
  ##   EstimatedInstanceWarmup: JInt
  ##                          : <p>The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. The default is to use the value specified for the default cooldown period for the group.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p>
  ##   MetricAggregationType: JString
  ##                        : <p>The aggregation type for the CloudWatch metrics. The valid values are <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code>. If the aggregation type is null, the value is treated as <code>Average</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code>.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_603665 = formData.getOrDefault("AutoScalingGroupName")
  valid_603665 = validateParameter(valid_603665, JString, required = true,
                                 default = nil)
  if valid_603665 != nil:
    section.add "AutoScalingGroupName", valid_603665
  var valid_603666 = formData.getOrDefault("StepAdjustments")
  valid_603666 = validateParameter(valid_603666, JArray, required = false,
                                 default = nil)
  if valid_603666 != nil:
    section.add "StepAdjustments", valid_603666
  var valid_603667 = formData.getOrDefault("TargetTrackingConfiguration.DisableScaleIn")
  valid_603667 = validateParameter(valid_603667, JString, required = false,
                                 default = nil)
  if valid_603667 != nil:
    section.add "TargetTrackingConfiguration.DisableScaleIn", valid_603667
  var valid_603668 = formData.getOrDefault("PolicyType")
  valid_603668 = validateParameter(valid_603668, JString, required = false,
                                 default = nil)
  if valid_603668 != nil:
    section.add "PolicyType", valid_603668
  var valid_603669 = formData.getOrDefault("ScalingAdjustment")
  valid_603669 = validateParameter(valid_603669, JInt, required = false, default = nil)
  if valid_603669 != nil:
    section.add "ScalingAdjustment", valid_603669
  var valid_603670 = formData.getOrDefault("TargetTrackingConfiguration.PredefinedMetricSpecification")
  valid_603670 = validateParameter(valid_603670, JString, required = false,
                                 default = nil)
  if valid_603670 != nil:
    section.add "TargetTrackingConfiguration.PredefinedMetricSpecification", valid_603670
  var valid_603671 = formData.getOrDefault("TargetTrackingConfiguration.CustomizedMetricSpecification")
  valid_603671 = validateParameter(valid_603671, JString, required = false,
                                 default = nil)
  if valid_603671 != nil:
    section.add "TargetTrackingConfiguration.CustomizedMetricSpecification", valid_603671
  var valid_603672 = formData.getOrDefault("TargetTrackingConfiguration.TargetValue")
  valid_603672 = validateParameter(valid_603672, JString, required = false,
                                 default = nil)
  if valid_603672 != nil:
    section.add "TargetTrackingConfiguration.TargetValue", valid_603672
  var valid_603673 = formData.getOrDefault("Cooldown")
  valid_603673 = validateParameter(valid_603673, JInt, required = false, default = nil)
  if valid_603673 != nil:
    section.add "Cooldown", valid_603673
  var valid_603674 = formData.getOrDefault("MinAdjustmentStep")
  valid_603674 = validateParameter(valid_603674, JInt, required = false, default = nil)
  if valid_603674 != nil:
    section.add "MinAdjustmentStep", valid_603674
  var valid_603675 = formData.getOrDefault("AdjustmentType")
  valid_603675 = validateParameter(valid_603675, JString, required = false,
                                 default = nil)
  if valid_603675 != nil:
    section.add "AdjustmentType", valid_603675
  var valid_603676 = formData.getOrDefault("PolicyName")
  valid_603676 = validateParameter(valid_603676, JString, required = true,
                                 default = nil)
  if valid_603676 != nil:
    section.add "PolicyName", valid_603676
  var valid_603677 = formData.getOrDefault("MinAdjustmentMagnitude")
  valid_603677 = validateParameter(valid_603677, JInt, required = false, default = nil)
  if valid_603677 != nil:
    section.add "MinAdjustmentMagnitude", valid_603677
  var valid_603678 = formData.getOrDefault("EstimatedInstanceWarmup")
  valid_603678 = validateParameter(valid_603678, JInt, required = false, default = nil)
  if valid_603678 != nil:
    section.add "EstimatedInstanceWarmup", valid_603678
  var valid_603679 = formData.getOrDefault("MetricAggregationType")
  valid_603679 = validateParameter(valid_603679, JString, required = false,
                                 default = nil)
  if valid_603679 != nil:
    section.add "MetricAggregationType", valid_603679
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603680: Call_PostPutScalingPolicy_603653; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates or updates a scaling policy for an Auto Scaling group. To update an existing scaling policy, use the existing policy name and set the parameters to change. Any existing parameter not changed in an update to an existing policy is not changed in this update request.</p> <p>For more information about using scaling policies to scale your Auto Scaling group automatically, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scale-based-on-demand.html">Dynamic Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_603680.validator(path, query, header, formData, body)
  let scheme = call_603680.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603680.url(scheme.get, call_603680.host, call_603680.base,
                         call_603680.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603680, url, valid)

proc call*(call_603681: Call_PostPutScalingPolicy_603653;
          AutoScalingGroupName: string; PolicyName: string;
          StepAdjustments: JsonNode = nil;
          TargetTrackingConfigurationDisableScaleIn: string = "";
          PolicyType: string = ""; ScalingAdjustment: int = 0;
    TargetTrackingConfigurationPredefinedMetricSpecification: string = "";
    TargetTrackingConfigurationCustomizedMetricSpecification: string = "";
          TargetTrackingConfigurationTargetValue: string = ""; Cooldown: int = 0;
          Action: string = "PutScalingPolicy"; MinAdjustmentStep: int = 0;
          AdjustmentType: string = ""; Version: string = "2011-01-01";
          MinAdjustmentMagnitude: int = 0; EstimatedInstanceWarmup: int = 0;
          MetricAggregationType: string = ""): Recallable =
  ## postPutScalingPolicy
  ## <p>Creates or updates a scaling policy for an Auto Scaling group. To update an existing scaling policy, use the existing policy name and set the parameters to change. Any existing parameter not changed in an update to an existing policy is not changed in this update request.</p> <p>For more information about using scaling policies to scale your Auto Scaling group automatically, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scale-based-on-demand.html">Dynamic Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   StepAdjustments: JArray
  ##                  : <p>A set of adjustments that enable you to scale based on the size of the alarm breach.</p> <p>Conditional: If you specify <code>StepScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   TargetTrackingConfigurationDisableScaleIn: string
  ##                                            : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## Indicates whether scaling in by the target tracking scaling policy is disabled. If scaling in is disabled, the target tracking scaling policy doesn't remove instances from the Auto Scaling group. Otherwise, the target tracking scaling policy can remove instances from the Auto Scaling group. The default is <code>false</code>.
  ##   PolicyType: string
  ##             : The policy type. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>. If the policy type is null, the value is treated as <code>SimpleScaling</code>.
  ##   ScalingAdjustment: int
  ##                    : <p>The amount by which a simple scaling policy scales the Auto Scaling group in response to an alarm breach. The adjustment is based on the value that you specified in the <code>AdjustmentType</code> parameter (either an absolute number or a percentage). A positive value adds to the current capacity and a negative value subtracts from the current capacity. For exact capacity, you must specify a positive value.</p> <p>Conditional: If you specify <code>SimpleScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   TargetTrackingConfigurationPredefinedMetricSpecification: string
  ##                                                           : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A predefined metric. You must specify either a predefined metric or a customized metric.
  ##   TargetTrackingConfigurationCustomizedMetricSpecification: string
  ##                                                           : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A customized metric. You must specify either a predefined metric or a customized metric.
  ##   TargetTrackingConfigurationTargetValue: string
  ##                                         : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## The target value for the metric.
  ##   Cooldown: int
  ##           : <p>The amount of time, in seconds, after a scaling activity completes before any further dynamic scaling activities can start. If this parameter is not specified, the default cooldown period for the group applies.</p> <p>Valid only if the policy type is <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   MinAdjustmentStep: int
  ##                    : Available for backward compatibility. Use <code>MinAdjustmentMagnitude</code> instead.
  ##   AdjustmentType: string
  ##                 : <p>Specifies whether the <code>ScalingAdjustment</code> parameter is an absolute number or a percentage of the current capacity. The valid values are <code>ChangeInCapacity</code>, <code>ExactCapacity</code>, and <code>PercentChangeInCapacity</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment">Scaling Adjustment Types</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : The name of the policy.
  ##   MinAdjustmentMagnitude: int
  ##                         : <p>The minimum number of instances to scale. If the value of <code>AdjustmentType</code> is <code>PercentChangeInCapacity</code>, the scaling policy changes the <code>DesiredCapacity</code> of the Auto Scaling group by at least this many instances. Otherwise, the error is <code>ValidationError</code>.</p> <p>This property replaces the <code>MinAdjustmentStep</code> property. For example, suppose that you create a step scaling policy to scale out an Auto Scaling group by 25 percent and you specify a <code>MinAdjustmentMagnitude</code> of 2. If the group has 4 instances and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a <code>MinAdjustmentMagnitude</code> of 2, Amazon EC2 Auto Scaling scales out the group by 2 instances.</p> <p>Valid only if the policy type is <code>SimpleScaling</code> or <code>StepScaling</code>.</p>
  ##   EstimatedInstanceWarmup: int
  ##                          : <p>The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. The default is to use the value specified for the default cooldown period for the group.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p>
  ##   MetricAggregationType: string
  ##                        : <p>The aggregation type for the CloudWatch metrics. The valid values are <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code>. If the aggregation type is null, the value is treated as <code>Average</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code>.</p>
  var query_603682 = newJObject()
  var formData_603683 = newJObject()
  add(formData_603683, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if StepAdjustments != nil:
    formData_603683.add "StepAdjustments", StepAdjustments
  add(formData_603683, "TargetTrackingConfiguration.DisableScaleIn",
      newJString(TargetTrackingConfigurationDisableScaleIn))
  add(formData_603683, "PolicyType", newJString(PolicyType))
  add(formData_603683, "ScalingAdjustment", newJInt(ScalingAdjustment))
  add(formData_603683,
      "TargetTrackingConfiguration.PredefinedMetricSpecification",
      newJString(TargetTrackingConfigurationPredefinedMetricSpecification))
  add(formData_603683,
      "TargetTrackingConfiguration.CustomizedMetricSpecification",
      newJString(TargetTrackingConfigurationCustomizedMetricSpecification))
  add(formData_603683, "TargetTrackingConfiguration.TargetValue",
      newJString(TargetTrackingConfigurationTargetValue))
  add(formData_603683, "Cooldown", newJInt(Cooldown))
  add(query_603682, "Action", newJString(Action))
  add(formData_603683, "MinAdjustmentStep", newJInt(MinAdjustmentStep))
  add(formData_603683, "AdjustmentType", newJString(AdjustmentType))
  add(query_603682, "Version", newJString(Version))
  add(formData_603683, "PolicyName", newJString(PolicyName))
  add(formData_603683, "MinAdjustmentMagnitude", newJInt(MinAdjustmentMagnitude))
  add(formData_603683, "EstimatedInstanceWarmup", newJInt(EstimatedInstanceWarmup))
  add(formData_603683, "MetricAggregationType", newJString(MetricAggregationType))
  result = call_603681.call(nil, query_603682, nil, formData_603683, nil)

var postPutScalingPolicy* = Call_PostPutScalingPolicy_603653(
    name: "postPutScalingPolicy", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=PutScalingPolicy",
    validator: validate_PostPutScalingPolicy_603654, base: "/",
    url: url_PostPutScalingPolicy_603655, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutScalingPolicy_603623 = ref object of OpenApiRestCall_601389
proc url_GetPutScalingPolicy_603625(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPutScalingPolicy_603624(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Creates or updates a scaling policy for an Auto Scaling group. To update an existing scaling policy, use the existing policy name and set the parameters to change. Any existing parameter not changed in an update to an existing policy is not changed in this update request.</p> <p>For more information about using scaling policies to scale your Auto Scaling group automatically, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scale-based-on-demand.html">Dynamic Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyType: JString
  ##             : The policy type. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>. If the policy type is null, the value is treated as <code>SimpleScaling</code>.
  ##   MinAdjustmentMagnitude: JInt
  ##                         : <p>The minimum number of instances to scale. If the value of <code>AdjustmentType</code> is <code>PercentChangeInCapacity</code>, the scaling policy changes the <code>DesiredCapacity</code> of the Auto Scaling group by at least this many instances. Otherwise, the error is <code>ValidationError</code>.</p> <p>This property replaces the <code>MinAdjustmentStep</code> property. For example, suppose that you create a step scaling policy to scale out an Auto Scaling group by 25 percent and you specify a <code>MinAdjustmentMagnitude</code> of 2. If the group has 4 instances and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a <code>MinAdjustmentMagnitude</code> of 2, Amazon EC2 Auto Scaling scales out the group by 2 instances.</p> <p>Valid only if the policy type is <code>SimpleScaling</code> or <code>StepScaling</code>.</p>
  ##   StepAdjustments: JArray
  ##                  : <p>A set of adjustments that enable you to scale based on the size of the alarm breach.</p> <p>Conditional: If you specify <code>StepScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   AdjustmentType: JString
  ##                 : <p>Specifies whether the <code>ScalingAdjustment</code> parameter is an absolute number or a percentage of the current capacity. The valid values are <code>ChangeInCapacity</code>, <code>ExactCapacity</code>, and <code>PercentChangeInCapacity</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment">Scaling Adjustment Types</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   TargetTrackingConfiguration.CustomizedMetricSpecification: JString
  ##                                                            : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A customized metric. You must specify either a predefined metric or a customized metric.
  ##   PolicyName: JString (required)
  ##             : The name of the policy.
  ##   Cooldown: JInt
  ##           : <p>The amount of time, in seconds, after a scaling activity completes before any further dynamic scaling activities can start. If this parameter is not specified, the default cooldown period for the group applies.</p> <p>Valid only if the policy type is <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MetricAggregationType: JString
  ##                        : <p>The aggregation type for the CloudWatch metrics. The valid values are <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code>. If the aggregation type is null, the value is treated as <code>Average</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code>.</p>
  ##   TargetTrackingConfiguration.DisableScaleIn: JString
  ##                                             : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## Indicates whether scaling in by the target tracking scaling policy is disabled. If scaling in is disabled, the target tracking scaling policy doesn't remove instances from the Auto Scaling group. Otherwise, the target tracking scaling policy can remove instances from the Auto Scaling group. The default is <code>false</code>.
  ##   ScalingAdjustment: JInt
  ##                    : <p>The amount by which a simple scaling policy scales the Auto Scaling group in response to an alarm breach. The adjustment is based on the value that you specified in the <code>AdjustmentType</code> parameter (either an absolute number or a percentage). A positive value adds to the current capacity and a negative value subtracts from the current capacity. For exact capacity, you must specify a positive value.</p> <p>Conditional: If you specify <code>SimpleScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetTrackingConfiguration.TargetValue: JString
  ##                                          : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## The target value for the metric.
  ##   Action: JString (required)
  ##   EstimatedInstanceWarmup: JInt
  ##                          : <p>The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. The default is to use the value specified for the default cooldown period for the group.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p>
  ##   MinAdjustmentStep: JInt
  ##                    : Available for backward compatibility. Use <code>MinAdjustmentMagnitude</code> instead.
  ##   Version: JString (required)
  ##   TargetTrackingConfiguration.PredefinedMetricSpecification: JString
  ##                                                            : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A predefined metric. You must specify either a predefined metric or a customized metric.
  section = newJObject()
  var valid_603626 = query.getOrDefault("PolicyType")
  valid_603626 = validateParameter(valid_603626, JString, required = false,
                                 default = nil)
  if valid_603626 != nil:
    section.add "PolicyType", valid_603626
  var valid_603627 = query.getOrDefault("MinAdjustmentMagnitude")
  valid_603627 = validateParameter(valid_603627, JInt, required = false, default = nil)
  if valid_603627 != nil:
    section.add "MinAdjustmentMagnitude", valid_603627
  var valid_603628 = query.getOrDefault("StepAdjustments")
  valid_603628 = validateParameter(valid_603628, JArray, required = false,
                                 default = nil)
  if valid_603628 != nil:
    section.add "StepAdjustments", valid_603628
  var valid_603629 = query.getOrDefault("AdjustmentType")
  valid_603629 = validateParameter(valid_603629, JString, required = false,
                                 default = nil)
  if valid_603629 != nil:
    section.add "AdjustmentType", valid_603629
  var valid_603630 = query.getOrDefault("TargetTrackingConfiguration.CustomizedMetricSpecification")
  valid_603630 = validateParameter(valid_603630, JString, required = false,
                                 default = nil)
  if valid_603630 != nil:
    section.add "TargetTrackingConfiguration.CustomizedMetricSpecification", valid_603630
  assert query != nil,
        "query argument is necessary due to required `PolicyName` field"
  var valid_603631 = query.getOrDefault("PolicyName")
  valid_603631 = validateParameter(valid_603631, JString, required = true,
                                 default = nil)
  if valid_603631 != nil:
    section.add "PolicyName", valid_603631
  var valid_603632 = query.getOrDefault("Cooldown")
  valid_603632 = validateParameter(valid_603632, JInt, required = false, default = nil)
  if valid_603632 != nil:
    section.add "Cooldown", valid_603632
  var valid_603633 = query.getOrDefault("MetricAggregationType")
  valid_603633 = validateParameter(valid_603633, JString, required = false,
                                 default = nil)
  if valid_603633 != nil:
    section.add "MetricAggregationType", valid_603633
  var valid_603634 = query.getOrDefault("TargetTrackingConfiguration.DisableScaleIn")
  valid_603634 = validateParameter(valid_603634, JString, required = false,
                                 default = nil)
  if valid_603634 != nil:
    section.add "TargetTrackingConfiguration.DisableScaleIn", valid_603634
  var valid_603635 = query.getOrDefault("ScalingAdjustment")
  valid_603635 = validateParameter(valid_603635, JInt, required = false, default = nil)
  if valid_603635 != nil:
    section.add "ScalingAdjustment", valid_603635
  var valid_603636 = query.getOrDefault("AutoScalingGroupName")
  valid_603636 = validateParameter(valid_603636, JString, required = true,
                                 default = nil)
  if valid_603636 != nil:
    section.add "AutoScalingGroupName", valid_603636
  var valid_603637 = query.getOrDefault("TargetTrackingConfiguration.TargetValue")
  valid_603637 = validateParameter(valid_603637, JString, required = false,
                                 default = nil)
  if valid_603637 != nil:
    section.add "TargetTrackingConfiguration.TargetValue", valid_603637
  var valid_603638 = query.getOrDefault("Action")
  valid_603638 = validateParameter(valid_603638, JString, required = true,
                                 default = newJString("PutScalingPolicy"))
  if valid_603638 != nil:
    section.add "Action", valid_603638
  var valid_603639 = query.getOrDefault("EstimatedInstanceWarmup")
  valid_603639 = validateParameter(valid_603639, JInt, required = false, default = nil)
  if valid_603639 != nil:
    section.add "EstimatedInstanceWarmup", valid_603639
  var valid_603640 = query.getOrDefault("MinAdjustmentStep")
  valid_603640 = validateParameter(valid_603640, JInt, required = false, default = nil)
  if valid_603640 != nil:
    section.add "MinAdjustmentStep", valid_603640
  var valid_603641 = query.getOrDefault("Version")
  valid_603641 = validateParameter(valid_603641, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603641 != nil:
    section.add "Version", valid_603641
  var valid_603642 = query.getOrDefault("TargetTrackingConfiguration.PredefinedMetricSpecification")
  valid_603642 = validateParameter(valid_603642, JString, required = false,
                                 default = nil)
  if valid_603642 != nil:
    section.add "TargetTrackingConfiguration.PredefinedMetricSpecification", valid_603642
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603643 = header.getOrDefault("X-Amz-Signature")
  valid_603643 = validateParameter(valid_603643, JString, required = false,
                                 default = nil)
  if valid_603643 != nil:
    section.add "X-Amz-Signature", valid_603643
  var valid_603644 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603644 = validateParameter(valid_603644, JString, required = false,
                                 default = nil)
  if valid_603644 != nil:
    section.add "X-Amz-Content-Sha256", valid_603644
  var valid_603645 = header.getOrDefault("X-Amz-Date")
  valid_603645 = validateParameter(valid_603645, JString, required = false,
                                 default = nil)
  if valid_603645 != nil:
    section.add "X-Amz-Date", valid_603645
  var valid_603646 = header.getOrDefault("X-Amz-Credential")
  valid_603646 = validateParameter(valid_603646, JString, required = false,
                                 default = nil)
  if valid_603646 != nil:
    section.add "X-Amz-Credential", valid_603646
  var valid_603647 = header.getOrDefault("X-Amz-Security-Token")
  valid_603647 = validateParameter(valid_603647, JString, required = false,
                                 default = nil)
  if valid_603647 != nil:
    section.add "X-Amz-Security-Token", valid_603647
  var valid_603648 = header.getOrDefault("X-Amz-Algorithm")
  valid_603648 = validateParameter(valid_603648, JString, required = false,
                                 default = nil)
  if valid_603648 != nil:
    section.add "X-Amz-Algorithm", valid_603648
  var valid_603649 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603649 = validateParameter(valid_603649, JString, required = false,
                                 default = nil)
  if valid_603649 != nil:
    section.add "X-Amz-SignedHeaders", valid_603649
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603650: Call_GetPutScalingPolicy_603623; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates or updates a scaling policy for an Auto Scaling group. To update an existing scaling policy, use the existing policy name and set the parameters to change. Any existing parameter not changed in an update to an existing policy is not changed in this update request.</p> <p>For more information about using scaling policies to scale your Auto Scaling group automatically, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scale-based-on-demand.html">Dynamic Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_603650.validator(path, query, header, formData, body)
  let scheme = call_603650.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603650.url(scheme.get, call_603650.host, call_603650.base,
                         call_603650.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603650, url, valid)

proc call*(call_603651: Call_GetPutScalingPolicy_603623; PolicyName: string;
          AutoScalingGroupName: string; PolicyType: string = "";
          MinAdjustmentMagnitude: int = 0; StepAdjustments: JsonNode = nil;
          AdjustmentType: string = ""; TargetTrackingConfigurationCustomizedMetricSpecification: string = "";
          Cooldown: int = 0; MetricAggregationType: string = "";
          TargetTrackingConfigurationDisableScaleIn: string = "";
          ScalingAdjustment: int = 0;
          TargetTrackingConfigurationTargetValue: string = "";
          Action: string = "PutScalingPolicy"; EstimatedInstanceWarmup: int = 0;
          MinAdjustmentStep: int = 0; Version: string = "2011-01-01";
          TargetTrackingConfigurationPredefinedMetricSpecification: string = ""): Recallable =
  ## getPutScalingPolicy
  ## <p>Creates or updates a scaling policy for an Auto Scaling group. To update an existing scaling policy, use the existing policy name and set the parameters to change. Any existing parameter not changed in an update to an existing policy is not changed in this update request.</p> <p>For more information about using scaling policies to scale your Auto Scaling group automatically, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scale-based-on-demand.html">Dynamic Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   PolicyType: string
  ##             : The policy type. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>. If the policy type is null, the value is treated as <code>SimpleScaling</code>.
  ##   MinAdjustmentMagnitude: int
  ##                         : <p>The minimum number of instances to scale. If the value of <code>AdjustmentType</code> is <code>PercentChangeInCapacity</code>, the scaling policy changes the <code>DesiredCapacity</code> of the Auto Scaling group by at least this many instances. Otherwise, the error is <code>ValidationError</code>.</p> <p>This property replaces the <code>MinAdjustmentStep</code> property. For example, suppose that you create a step scaling policy to scale out an Auto Scaling group by 25 percent and you specify a <code>MinAdjustmentMagnitude</code> of 2. If the group has 4 instances and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a <code>MinAdjustmentMagnitude</code> of 2, Amazon EC2 Auto Scaling scales out the group by 2 instances.</p> <p>Valid only if the policy type is <code>SimpleScaling</code> or <code>StepScaling</code>.</p>
  ##   StepAdjustments: JArray
  ##                  : <p>A set of adjustments that enable you to scale based on the size of the alarm breach.</p> <p>Conditional: If you specify <code>StepScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   AdjustmentType: string
  ##                 : <p>Specifies whether the <code>ScalingAdjustment</code> parameter is an absolute number or a percentage of the current capacity. The valid values are <code>ChangeInCapacity</code>, <code>ExactCapacity</code>, and <code>PercentChangeInCapacity</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment">Scaling Adjustment Types</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   TargetTrackingConfigurationCustomizedMetricSpecification: string
  ##                                                           : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A customized metric. You must specify either a predefined metric or a customized metric.
  ##   PolicyName: string (required)
  ##             : The name of the policy.
  ##   Cooldown: int
  ##           : <p>The amount of time, in seconds, after a scaling activity completes before any further dynamic scaling activities can start. If this parameter is not specified, the default cooldown period for the group applies.</p> <p>Valid only if the policy type is <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MetricAggregationType: string
  ##                        : <p>The aggregation type for the CloudWatch metrics. The valid values are <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code>. If the aggregation type is null, the value is treated as <code>Average</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code>.</p>
  ##   TargetTrackingConfigurationDisableScaleIn: string
  ##                                            : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## Indicates whether scaling in by the target tracking scaling policy is disabled. If scaling in is disabled, the target tracking scaling policy doesn't remove instances from the Auto Scaling group. Otherwise, the target tracking scaling policy can remove instances from the Auto Scaling group. The default is <code>false</code>.
  ##   ScalingAdjustment: int
  ##                    : <p>The amount by which a simple scaling policy scales the Auto Scaling group in response to an alarm breach. The adjustment is based on the value that you specified in the <code>AdjustmentType</code> parameter (either an absolute number or a percentage). A positive value adds to the current capacity and a negative value subtracts from the current capacity. For exact capacity, you must specify a positive value.</p> <p>Conditional: If you specify <code>SimpleScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetTrackingConfigurationTargetValue: string
  ##                                         : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## The target value for the metric.
  ##   Action: string (required)
  ##   EstimatedInstanceWarmup: int
  ##                          : <p>The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. The default is to use the value specified for the default cooldown period for the group.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p>
  ##   MinAdjustmentStep: int
  ##                    : Available for backward compatibility. Use <code>MinAdjustmentMagnitude</code> instead.
  ##   Version: string (required)
  ##   TargetTrackingConfigurationPredefinedMetricSpecification: string
  ##                                                           : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A predefined metric. You must specify either a predefined metric or a customized metric.
  var query_603652 = newJObject()
  add(query_603652, "PolicyType", newJString(PolicyType))
  add(query_603652, "MinAdjustmentMagnitude", newJInt(MinAdjustmentMagnitude))
  if StepAdjustments != nil:
    query_603652.add "StepAdjustments", StepAdjustments
  add(query_603652, "AdjustmentType", newJString(AdjustmentType))
  add(query_603652, "TargetTrackingConfiguration.CustomizedMetricSpecification",
      newJString(TargetTrackingConfigurationCustomizedMetricSpecification))
  add(query_603652, "PolicyName", newJString(PolicyName))
  add(query_603652, "Cooldown", newJInt(Cooldown))
  add(query_603652, "MetricAggregationType", newJString(MetricAggregationType))
  add(query_603652, "TargetTrackingConfiguration.DisableScaleIn",
      newJString(TargetTrackingConfigurationDisableScaleIn))
  add(query_603652, "ScalingAdjustment", newJInt(ScalingAdjustment))
  add(query_603652, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_603652, "TargetTrackingConfiguration.TargetValue",
      newJString(TargetTrackingConfigurationTargetValue))
  add(query_603652, "Action", newJString(Action))
  add(query_603652, "EstimatedInstanceWarmup", newJInt(EstimatedInstanceWarmup))
  add(query_603652, "MinAdjustmentStep", newJInt(MinAdjustmentStep))
  add(query_603652, "Version", newJString(Version))
  add(query_603652, "TargetTrackingConfiguration.PredefinedMetricSpecification",
      newJString(TargetTrackingConfigurationPredefinedMetricSpecification))
  result = call_603651.call(nil, query_603652, nil, nil, nil)

var getPutScalingPolicy* = Call_GetPutScalingPolicy_603623(
    name: "getPutScalingPolicy", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=PutScalingPolicy",
    validator: validate_GetPutScalingPolicy_603624, base: "/",
    url: url_GetPutScalingPolicy_603625, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutScheduledUpdateGroupAction_603708 = ref object of OpenApiRestCall_601389
proc url_PostPutScheduledUpdateGroupAction_603710(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPutScheduledUpdateGroupAction_603709(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates or updates a scheduled scaling action for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html">Scheduled Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603711 = query.getOrDefault("Action")
  valid_603711 = validateParameter(valid_603711, JString, required = true, default = newJString(
      "PutScheduledUpdateGroupAction"))
  if valid_603711 != nil:
    section.add "Action", valid_603711
  var valid_603712 = query.getOrDefault("Version")
  valid_603712 = validateParameter(valid_603712, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603712 != nil:
    section.add "Version", valid_603712
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603713 = header.getOrDefault("X-Amz-Signature")
  valid_603713 = validateParameter(valid_603713, JString, required = false,
                                 default = nil)
  if valid_603713 != nil:
    section.add "X-Amz-Signature", valid_603713
  var valid_603714 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603714 = validateParameter(valid_603714, JString, required = false,
                                 default = nil)
  if valid_603714 != nil:
    section.add "X-Amz-Content-Sha256", valid_603714
  var valid_603715 = header.getOrDefault("X-Amz-Date")
  valid_603715 = validateParameter(valid_603715, JString, required = false,
                                 default = nil)
  if valid_603715 != nil:
    section.add "X-Amz-Date", valid_603715
  var valid_603716 = header.getOrDefault("X-Amz-Credential")
  valid_603716 = validateParameter(valid_603716, JString, required = false,
                                 default = nil)
  if valid_603716 != nil:
    section.add "X-Amz-Credential", valid_603716
  var valid_603717 = header.getOrDefault("X-Amz-Security-Token")
  valid_603717 = validateParameter(valid_603717, JString, required = false,
                                 default = nil)
  if valid_603717 != nil:
    section.add "X-Amz-Security-Token", valid_603717
  var valid_603718 = header.getOrDefault("X-Amz-Algorithm")
  valid_603718 = validateParameter(valid_603718, JString, required = false,
                                 default = nil)
  if valid_603718 != nil:
    section.add "X-Amz-Algorithm", valid_603718
  var valid_603719 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603719 = validateParameter(valid_603719, JString, required = false,
                                 default = nil)
  if valid_603719 != nil:
    section.add "X-Amz-SignedHeaders", valid_603719
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   MinSize: JInt
  ##          : The minimum number of instances in the Auto Scaling group.
  ##   DesiredCapacity: JInt
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   ScheduledActionName: JString (required)
  ##                      : The name of this scaling action.
  ##   Recurrence: JString
  ##             : <p>The recurring schedule for this action, in Unix cron syntax format. This format consists of five fields separated by white spaces: [Minute] [Hour] [Day_of_Month] [Month_of_Year] [Day_of_Week]. The value must be in quotes (for example, <code>"30 0 1 1,6,12 *"</code>). For more information about this format, see <a href="http://crontab.org">Crontab</a>.</p> <p>When <code>StartTime</code> and <code>EndTime</code> are specified with <code>Recurrence</code>, they form the boundaries of when the recurring action starts and stops.</p>
  ##   EndTime: JString
  ##          : The date and time for the recurring schedule to end. Amazon EC2 Auto Scaling does not perform the action after this time.
  ##   StartTime: JString
  ##            : <p>The date and time for this action to start, in YYYY-MM-DDThh:mm:ssZ format in UTC/GMT only and in quotes (for example, <code>"2019-06-01T00:00:00Z"</code>).</p> <p>If you specify <code>Recurrence</code> and <code>StartTime</code>, Amazon EC2 Auto Scaling performs the action at this time, and then performs the action based on the specified recurrence.</p> <p>If you try to schedule your action in the past, Amazon EC2 Auto Scaling returns an error message.</p>
  ##   Time: JString
  ##       : This parameter is no longer used.
  ##   MaxSize: JInt
  ##          : The maximum number of instances in the Auto Scaling group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_603720 = formData.getOrDefault("AutoScalingGroupName")
  valid_603720 = validateParameter(valid_603720, JString, required = true,
                                 default = nil)
  if valid_603720 != nil:
    section.add "AutoScalingGroupName", valid_603720
  var valid_603721 = formData.getOrDefault("MinSize")
  valid_603721 = validateParameter(valid_603721, JInt, required = false, default = nil)
  if valid_603721 != nil:
    section.add "MinSize", valid_603721
  var valid_603722 = formData.getOrDefault("DesiredCapacity")
  valid_603722 = validateParameter(valid_603722, JInt, required = false, default = nil)
  if valid_603722 != nil:
    section.add "DesiredCapacity", valid_603722
  var valid_603723 = formData.getOrDefault("ScheduledActionName")
  valid_603723 = validateParameter(valid_603723, JString, required = true,
                                 default = nil)
  if valid_603723 != nil:
    section.add "ScheduledActionName", valid_603723
  var valid_603724 = formData.getOrDefault("Recurrence")
  valid_603724 = validateParameter(valid_603724, JString, required = false,
                                 default = nil)
  if valid_603724 != nil:
    section.add "Recurrence", valid_603724
  var valid_603725 = formData.getOrDefault("EndTime")
  valid_603725 = validateParameter(valid_603725, JString, required = false,
                                 default = nil)
  if valid_603725 != nil:
    section.add "EndTime", valid_603725
  var valid_603726 = formData.getOrDefault("StartTime")
  valid_603726 = validateParameter(valid_603726, JString, required = false,
                                 default = nil)
  if valid_603726 != nil:
    section.add "StartTime", valid_603726
  var valid_603727 = formData.getOrDefault("Time")
  valid_603727 = validateParameter(valid_603727, JString, required = false,
                                 default = nil)
  if valid_603727 != nil:
    section.add "Time", valid_603727
  var valid_603728 = formData.getOrDefault("MaxSize")
  valid_603728 = validateParameter(valid_603728, JInt, required = false, default = nil)
  if valid_603728 != nil:
    section.add "MaxSize", valid_603728
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603729: Call_PostPutScheduledUpdateGroupAction_603708;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates or updates a scheduled scaling action for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html">Scheduled Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_603729.validator(path, query, header, formData, body)
  let scheme = call_603729.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603729.url(scheme.get, call_603729.host, call_603729.base,
                         call_603729.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603729, url, valid)

proc call*(call_603730: Call_PostPutScheduledUpdateGroupAction_603708;
          AutoScalingGroupName: string; ScheduledActionName: string;
          MinSize: int = 0; DesiredCapacity: int = 0; Recurrence: string = "";
          EndTime: string = ""; StartTime: string = "";
          Action: string = "PutScheduledUpdateGroupAction"; Time: string = "";
          MaxSize: int = 0; Version: string = "2011-01-01"): Recallable =
  ## postPutScheduledUpdateGroupAction
  ## <p>Creates or updates a scheduled scaling action for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html">Scheduled Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   MinSize: int
  ##          : The minimum number of instances in the Auto Scaling group.
  ##   DesiredCapacity: int
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   ScheduledActionName: string (required)
  ##                      : The name of this scaling action.
  ##   Recurrence: string
  ##             : <p>The recurring schedule for this action, in Unix cron syntax format. This format consists of five fields separated by white spaces: [Minute] [Hour] [Day_of_Month] [Month_of_Year] [Day_of_Week]. The value must be in quotes (for example, <code>"30 0 1 1,6,12 *"</code>). For more information about this format, see <a href="http://crontab.org">Crontab</a>.</p> <p>When <code>StartTime</code> and <code>EndTime</code> are specified with <code>Recurrence</code>, they form the boundaries of when the recurring action starts and stops.</p>
  ##   EndTime: string
  ##          : The date and time for the recurring schedule to end. Amazon EC2 Auto Scaling does not perform the action after this time.
  ##   StartTime: string
  ##            : <p>The date and time for this action to start, in YYYY-MM-DDThh:mm:ssZ format in UTC/GMT only and in quotes (for example, <code>"2019-06-01T00:00:00Z"</code>).</p> <p>If you specify <code>Recurrence</code> and <code>StartTime</code>, Amazon EC2 Auto Scaling performs the action at this time, and then performs the action based on the specified recurrence.</p> <p>If you try to schedule your action in the past, Amazon EC2 Auto Scaling returns an error message.</p>
  ##   Action: string (required)
  ##   Time: string
  ##       : This parameter is no longer used.
  ##   MaxSize: int
  ##          : The maximum number of instances in the Auto Scaling group.
  ##   Version: string (required)
  var query_603731 = newJObject()
  var formData_603732 = newJObject()
  add(formData_603732, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_603732, "MinSize", newJInt(MinSize))
  add(formData_603732, "DesiredCapacity", newJInt(DesiredCapacity))
  add(formData_603732, "ScheduledActionName", newJString(ScheduledActionName))
  add(formData_603732, "Recurrence", newJString(Recurrence))
  add(formData_603732, "EndTime", newJString(EndTime))
  add(formData_603732, "StartTime", newJString(StartTime))
  add(query_603731, "Action", newJString(Action))
  add(formData_603732, "Time", newJString(Time))
  add(formData_603732, "MaxSize", newJInt(MaxSize))
  add(query_603731, "Version", newJString(Version))
  result = call_603730.call(nil, query_603731, nil, formData_603732, nil)

var postPutScheduledUpdateGroupAction* = Call_PostPutScheduledUpdateGroupAction_603708(
    name: "postPutScheduledUpdateGroupAction", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=PutScheduledUpdateGroupAction",
    validator: validate_PostPutScheduledUpdateGroupAction_603709, base: "/",
    url: url_PostPutScheduledUpdateGroupAction_603710,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutScheduledUpdateGroupAction_603684 = ref object of OpenApiRestCall_601389
proc url_GetPutScheduledUpdateGroupAction_603686(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPutScheduledUpdateGroupAction_603685(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates or updates a scheduled scaling action for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html">Scheduled Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Recurrence: JString
  ##             : <p>The recurring schedule for this action, in Unix cron syntax format. This format consists of five fields separated by white spaces: [Minute] [Hour] [Day_of_Month] [Month_of_Year] [Day_of_Week]. The value must be in quotes (for example, <code>"30 0 1 1,6,12 *"</code>). For more information about this format, see <a href="http://crontab.org">Crontab</a>.</p> <p>When <code>StartTime</code> and <code>EndTime</code> are specified with <code>Recurrence</code>, they form the boundaries of when the recurring action starts and stops.</p>
  ##   MaxSize: JInt
  ##          : The maximum number of instances in the Auto Scaling group.
  ##   ScheduledActionName: JString (required)
  ##                      : The name of this scaling action.
  ##   DesiredCapacity: JInt
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   StartTime: JString
  ##            : <p>The date and time for this action to start, in YYYY-MM-DDThh:mm:ssZ format in UTC/GMT only and in quotes (for example, <code>"2019-06-01T00:00:00Z"</code>).</p> <p>If you specify <code>Recurrence</code> and <code>StartTime</code>, Amazon EC2 Auto Scaling performs the action at this time, and then performs the action based on the specified recurrence.</p> <p>If you try to schedule your action in the past, Amazon EC2 Auto Scaling returns an error message.</p>
  ##   MinSize: JInt
  ##          : The minimum number of instances in the Auto Scaling group.
  ##   EndTime: JString
  ##          : The date and time for the recurring schedule to end. Amazon EC2 Auto Scaling does not perform the action after this time.
  ##   Version: JString (required)
  ##   Time: JString
  ##       : This parameter is no longer used.
  section = newJObject()
  var valid_603687 = query.getOrDefault("Recurrence")
  valid_603687 = validateParameter(valid_603687, JString, required = false,
                                 default = nil)
  if valid_603687 != nil:
    section.add "Recurrence", valid_603687
  var valid_603688 = query.getOrDefault("MaxSize")
  valid_603688 = validateParameter(valid_603688, JInt, required = false, default = nil)
  if valid_603688 != nil:
    section.add "MaxSize", valid_603688
  assert query != nil, "query argument is necessary due to required `ScheduledActionName` field"
  var valid_603689 = query.getOrDefault("ScheduledActionName")
  valid_603689 = validateParameter(valid_603689, JString, required = true,
                                 default = nil)
  if valid_603689 != nil:
    section.add "ScheduledActionName", valid_603689
  var valid_603690 = query.getOrDefault("DesiredCapacity")
  valid_603690 = validateParameter(valid_603690, JInt, required = false, default = nil)
  if valid_603690 != nil:
    section.add "DesiredCapacity", valid_603690
  var valid_603691 = query.getOrDefault("AutoScalingGroupName")
  valid_603691 = validateParameter(valid_603691, JString, required = true,
                                 default = nil)
  if valid_603691 != nil:
    section.add "AutoScalingGroupName", valid_603691
  var valid_603692 = query.getOrDefault("Action")
  valid_603692 = validateParameter(valid_603692, JString, required = true, default = newJString(
      "PutScheduledUpdateGroupAction"))
  if valid_603692 != nil:
    section.add "Action", valid_603692
  var valid_603693 = query.getOrDefault("StartTime")
  valid_603693 = validateParameter(valid_603693, JString, required = false,
                                 default = nil)
  if valid_603693 != nil:
    section.add "StartTime", valid_603693
  var valid_603694 = query.getOrDefault("MinSize")
  valid_603694 = validateParameter(valid_603694, JInt, required = false, default = nil)
  if valid_603694 != nil:
    section.add "MinSize", valid_603694
  var valid_603695 = query.getOrDefault("EndTime")
  valid_603695 = validateParameter(valid_603695, JString, required = false,
                                 default = nil)
  if valid_603695 != nil:
    section.add "EndTime", valid_603695
  var valid_603696 = query.getOrDefault("Version")
  valid_603696 = validateParameter(valid_603696, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603696 != nil:
    section.add "Version", valid_603696
  var valid_603697 = query.getOrDefault("Time")
  valid_603697 = validateParameter(valid_603697, JString, required = false,
                                 default = nil)
  if valid_603697 != nil:
    section.add "Time", valid_603697
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603698 = header.getOrDefault("X-Amz-Signature")
  valid_603698 = validateParameter(valid_603698, JString, required = false,
                                 default = nil)
  if valid_603698 != nil:
    section.add "X-Amz-Signature", valid_603698
  var valid_603699 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603699 = validateParameter(valid_603699, JString, required = false,
                                 default = nil)
  if valid_603699 != nil:
    section.add "X-Amz-Content-Sha256", valid_603699
  var valid_603700 = header.getOrDefault("X-Amz-Date")
  valid_603700 = validateParameter(valid_603700, JString, required = false,
                                 default = nil)
  if valid_603700 != nil:
    section.add "X-Amz-Date", valid_603700
  var valid_603701 = header.getOrDefault("X-Amz-Credential")
  valid_603701 = validateParameter(valid_603701, JString, required = false,
                                 default = nil)
  if valid_603701 != nil:
    section.add "X-Amz-Credential", valid_603701
  var valid_603702 = header.getOrDefault("X-Amz-Security-Token")
  valid_603702 = validateParameter(valid_603702, JString, required = false,
                                 default = nil)
  if valid_603702 != nil:
    section.add "X-Amz-Security-Token", valid_603702
  var valid_603703 = header.getOrDefault("X-Amz-Algorithm")
  valid_603703 = validateParameter(valid_603703, JString, required = false,
                                 default = nil)
  if valid_603703 != nil:
    section.add "X-Amz-Algorithm", valid_603703
  var valid_603704 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603704 = validateParameter(valid_603704, JString, required = false,
                                 default = nil)
  if valid_603704 != nil:
    section.add "X-Amz-SignedHeaders", valid_603704
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603705: Call_GetPutScheduledUpdateGroupAction_603684;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates or updates a scheduled scaling action for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html">Scheduled Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_603705.validator(path, query, header, formData, body)
  let scheme = call_603705.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603705.url(scheme.get, call_603705.host, call_603705.base,
                         call_603705.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603705, url, valid)

proc call*(call_603706: Call_GetPutScheduledUpdateGroupAction_603684;
          ScheduledActionName: string; AutoScalingGroupName: string;
          Recurrence: string = ""; MaxSize: int = 0; DesiredCapacity: int = 0;
          Action: string = "PutScheduledUpdateGroupAction"; StartTime: string = "";
          MinSize: int = 0; EndTime: string = ""; Version: string = "2011-01-01";
          Time: string = ""): Recallable =
  ## getPutScheduledUpdateGroupAction
  ## <p>Creates or updates a scheduled scaling action for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html">Scheduled Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Recurrence: string
  ##             : <p>The recurring schedule for this action, in Unix cron syntax format. This format consists of five fields separated by white spaces: [Minute] [Hour] [Day_of_Month] [Month_of_Year] [Day_of_Week]. The value must be in quotes (for example, <code>"30 0 1 1,6,12 *"</code>). For more information about this format, see <a href="http://crontab.org">Crontab</a>.</p> <p>When <code>StartTime</code> and <code>EndTime</code> are specified with <code>Recurrence</code>, they form the boundaries of when the recurring action starts and stops.</p>
  ##   MaxSize: int
  ##          : The maximum number of instances in the Auto Scaling group.
  ##   ScheduledActionName: string (required)
  ##                      : The name of this scaling action.
  ##   DesiredCapacity: int
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   StartTime: string
  ##            : <p>The date and time for this action to start, in YYYY-MM-DDThh:mm:ssZ format in UTC/GMT only and in quotes (for example, <code>"2019-06-01T00:00:00Z"</code>).</p> <p>If you specify <code>Recurrence</code> and <code>StartTime</code>, Amazon EC2 Auto Scaling performs the action at this time, and then performs the action based on the specified recurrence.</p> <p>If you try to schedule your action in the past, Amazon EC2 Auto Scaling returns an error message.</p>
  ##   MinSize: int
  ##          : The minimum number of instances in the Auto Scaling group.
  ##   EndTime: string
  ##          : The date and time for the recurring schedule to end. Amazon EC2 Auto Scaling does not perform the action after this time.
  ##   Version: string (required)
  ##   Time: string
  ##       : This parameter is no longer used.
  var query_603707 = newJObject()
  add(query_603707, "Recurrence", newJString(Recurrence))
  add(query_603707, "MaxSize", newJInt(MaxSize))
  add(query_603707, "ScheduledActionName", newJString(ScheduledActionName))
  add(query_603707, "DesiredCapacity", newJInt(DesiredCapacity))
  add(query_603707, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_603707, "Action", newJString(Action))
  add(query_603707, "StartTime", newJString(StartTime))
  add(query_603707, "MinSize", newJInt(MinSize))
  add(query_603707, "EndTime", newJString(EndTime))
  add(query_603707, "Version", newJString(Version))
  add(query_603707, "Time", newJString(Time))
  result = call_603706.call(nil, query_603707, nil, nil, nil)

var getPutScheduledUpdateGroupAction* = Call_GetPutScheduledUpdateGroupAction_603684(
    name: "getPutScheduledUpdateGroupAction", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=PutScheduledUpdateGroupAction",
    validator: validate_GetPutScheduledUpdateGroupAction_603685, base: "/",
    url: url_GetPutScheduledUpdateGroupAction_603686,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRecordLifecycleActionHeartbeat_603752 = ref object of OpenApiRestCall_601389
proc url_PostRecordLifecycleActionHeartbeat_603754(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRecordLifecycleActionHeartbeat_603753(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using <a>PutLifecycleHook</a>.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p> <b>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</b> </p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html">Auto Scaling Lifecycle</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603755 = query.getOrDefault("Action")
  valid_603755 = validateParameter(valid_603755, JString, required = true, default = newJString(
      "RecordLifecycleActionHeartbeat"))
  if valid_603755 != nil:
    section.add "Action", valid_603755
  var valid_603756 = query.getOrDefault("Version")
  valid_603756 = validateParameter(valid_603756, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603756 != nil:
    section.add "Version", valid_603756
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603757 = header.getOrDefault("X-Amz-Signature")
  valid_603757 = validateParameter(valid_603757, JString, required = false,
                                 default = nil)
  if valid_603757 != nil:
    section.add "X-Amz-Signature", valid_603757
  var valid_603758 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603758 = validateParameter(valid_603758, JString, required = false,
                                 default = nil)
  if valid_603758 != nil:
    section.add "X-Amz-Content-Sha256", valid_603758
  var valid_603759 = header.getOrDefault("X-Amz-Date")
  valid_603759 = validateParameter(valid_603759, JString, required = false,
                                 default = nil)
  if valid_603759 != nil:
    section.add "X-Amz-Date", valid_603759
  var valid_603760 = header.getOrDefault("X-Amz-Credential")
  valid_603760 = validateParameter(valid_603760, JString, required = false,
                                 default = nil)
  if valid_603760 != nil:
    section.add "X-Amz-Credential", valid_603760
  var valid_603761 = header.getOrDefault("X-Amz-Security-Token")
  valid_603761 = validateParameter(valid_603761, JString, required = false,
                                 default = nil)
  if valid_603761 != nil:
    section.add "X-Amz-Security-Token", valid_603761
  var valid_603762 = header.getOrDefault("X-Amz-Algorithm")
  valid_603762 = validateParameter(valid_603762, JString, required = false,
                                 default = nil)
  if valid_603762 != nil:
    section.add "X-Amz-Algorithm", valid_603762
  var valid_603763 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603763 = validateParameter(valid_603763, JString, required = false,
                                 default = nil)
  if valid_603763 != nil:
    section.add "X-Amz-SignedHeaders", valid_603763
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   LifecycleActionToken: JString
  ##                       : A token that uniquely identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target that you specified when you created the lifecycle hook.
  ##   InstanceId: JString
  ##             : The ID of the instance.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_603764 = formData.getOrDefault("AutoScalingGroupName")
  valid_603764 = validateParameter(valid_603764, JString, required = true,
                                 default = nil)
  if valid_603764 != nil:
    section.add "AutoScalingGroupName", valid_603764
  var valid_603765 = formData.getOrDefault("LifecycleHookName")
  valid_603765 = validateParameter(valid_603765, JString, required = true,
                                 default = nil)
  if valid_603765 != nil:
    section.add "LifecycleHookName", valid_603765
  var valid_603766 = formData.getOrDefault("LifecycleActionToken")
  valid_603766 = validateParameter(valid_603766, JString, required = false,
                                 default = nil)
  if valid_603766 != nil:
    section.add "LifecycleActionToken", valid_603766
  var valid_603767 = formData.getOrDefault("InstanceId")
  valid_603767 = validateParameter(valid_603767, JString, required = false,
                                 default = nil)
  if valid_603767 != nil:
    section.add "InstanceId", valid_603767
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603768: Call_PostRecordLifecycleActionHeartbeat_603752;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using <a>PutLifecycleHook</a>.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p> <b>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</b> </p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html">Auto Scaling Lifecycle</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_603768.validator(path, query, header, formData, body)
  let scheme = call_603768.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603768.url(scheme.get, call_603768.host, call_603768.base,
                         call_603768.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603768, url, valid)

proc call*(call_603769: Call_PostRecordLifecycleActionHeartbeat_603752;
          AutoScalingGroupName: string; LifecycleHookName: string;
          LifecycleActionToken: string = ""; InstanceId: string = "";
          Action: string = "RecordLifecycleActionHeartbeat";
          Version: string = "2011-01-01"): Recallable =
  ## postRecordLifecycleActionHeartbeat
  ## <p>Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using <a>PutLifecycleHook</a>.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p> <b>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</b> </p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html">Auto Scaling Lifecycle</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   LifecycleActionToken: string
  ##                       : A token that uniquely identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target that you specified when you created the lifecycle hook.
  ##   InstanceId: string
  ##             : The ID of the instance.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603770 = newJObject()
  var formData_603771 = newJObject()
  add(formData_603771, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_603771, "LifecycleHookName", newJString(LifecycleHookName))
  add(formData_603771, "LifecycleActionToken", newJString(LifecycleActionToken))
  add(formData_603771, "InstanceId", newJString(InstanceId))
  add(query_603770, "Action", newJString(Action))
  add(query_603770, "Version", newJString(Version))
  result = call_603769.call(nil, query_603770, nil, formData_603771, nil)

var postRecordLifecycleActionHeartbeat* = Call_PostRecordLifecycleActionHeartbeat_603752(
    name: "postRecordLifecycleActionHeartbeat", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=RecordLifecycleActionHeartbeat",
    validator: validate_PostRecordLifecycleActionHeartbeat_603753, base: "/",
    url: url_PostRecordLifecycleActionHeartbeat_603754,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRecordLifecycleActionHeartbeat_603733 = ref object of OpenApiRestCall_601389
proc url_GetRecordLifecycleActionHeartbeat_603735(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRecordLifecycleActionHeartbeat_603734(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using <a>PutLifecycleHook</a>.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p> <b>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</b> </p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html">Auto Scaling Lifecycle</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   InstanceId: JString
  ##             : The ID of the instance.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   Action: JString (required)
  ##   LifecycleActionToken: JString
  ##                       : A token that uniquely identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target that you specified when you created the lifecycle hook.
  ##   Version: JString (required)
  section = newJObject()
  var valid_603736 = query.getOrDefault("InstanceId")
  valid_603736 = validateParameter(valid_603736, JString, required = false,
                                 default = nil)
  if valid_603736 != nil:
    section.add "InstanceId", valid_603736
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_603737 = query.getOrDefault("AutoScalingGroupName")
  valid_603737 = validateParameter(valid_603737, JString, required = true,
                                 default = nil)
  if valid_603737 != nil:
    section.add "AutoScalingGroupName", valid_603737
  var valid_603738 = query.getOrDefault("LifecycleHookName")
  valid_603738 = validateParameter(valid_603738, JString, required = true,
                                 default = nil)
  if valid_603738 != nil:
    section.add "LifecycleHookName", valid_603738
  var valid_603739 = query.getOrDefault("Action")
  valid_603739 = validateParameter(valid_603739, JString, required = true, default = newJString(
      "RecordLifecycleActionHeartbeat"))
  if valid_603739 != nil:
    section.add "Action", valid_603739
  var valid_603740 = query.getOrDefault("LifecycleActionToken")
  valid_603740 = validateParameter(valid_603740, JString, required = false,
                                 default = nil)
  if valid_603740 != nil:
    section.add "LifecycleActionToken", valid_603740
  var valid_603741 = query.getOrDefault("Version")
  valid_603741 = validateParameter(valid_603741, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603741 != nil:
    section.add "Version", valid_603741
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603742 = header.getOrDefault("X-Amz-Signature")
  valid_603742 = validateParameter(valid_603742, JString, required = false,
                                 default = nil)
  if valid_603742 != nil:
    section.add "X-Amz-Signature", valid_603742
  var valid_603743 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603743 = validateParameter(valid_603743, JString, required = false,
                                 default = nil)
  if valid_603743 != nil:
    section.add "X-Amz-Content-Sha256", valid_603743
  var valid_603744 = header.getOrDefault("X-Amz-Date")
  valid_603744 = validateParameter(valid_603744, JString, required = false,
                                 default = nil)
  if valid_603744 != nil:
    section.add "X-Amz-Date", valid_603744
  var valid_603745 = header.getOrDefault("X-Amz-Credential")
  valid_603745 = validateParameter(valid_603745, JString, required = false,
                                 default = nil)
  if valid_603745 != nil:
    section.add "X-Amz-Credential", valid_603745
  var valid_603746 = header.getOrDefault("X-Amz-Security-Token")
  valid_603746 = validateParameter(valid_603746, JString, required = false,
                                 default = nil)
  if valid_603746 != nil:
    section.add "X-Amz-Security-Token", valid_603746
  var valid_603747 = header.getOrDefault("X-Amz-Algorithm")
  valid_603747 = validateParameter(valid_603747, JString, required = false,
                                 default = nil)
  if valid_603747 != nil:
    section.add "X-Amz-Algorithm", valid_603747
  var valid_603748 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603748 = validateParameter(valid_603748, JString, required = false,
                                 default = nil)
  if valid_603748 != nil:
    section.add "X-Amz-SignedHeaders", valid_603748
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603749: Call_GetRecordLifecycleActionHeartbeat_603733;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using <a>PutLifecycleHook</a>.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p> <b>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</b> </p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html">Auto Scaling Lifecycle</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_603749.validator(path, query, header, formData, body)
  let scheme = call_603749.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603749.url(scheme.get, call_603749.host, call_603749.base,
                         call_603749.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603749, url, valid)

proc call*(call_603750: Call_GetRecordLifecycleActionHeartbeat_603733;
          AutoScalingGroupName: string; LifecycleHookName: string;
          InstanceId: string = "";
          Action: string = "RecordLifecycleActionHeartbeat";
          LifecycleActionToken: string = ""; Version: string = "2011-01-01"): Recallable =
  ## getRecordLifecycleActionHeartbeat
  ## <p>Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using <a>PutLifecycleHook</a>.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p> <b>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</b> </p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html">Auto Scaling Lifecycle</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   InstanceId: string
  ##             : The ID of the instance.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   Action: string (required)
  ##   LifecycleActionToken: string
  ##                       : A token that uniquely identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target that you specified when you created the lifecycle hook.
  ##   Version: string (required)
  var query_603751 = newJObject()
  add(query_603751, "InstanceId", newJString(InstanceId))
  add(query_603751, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_603751, "LifecycleHookName", newJString(LifecycleHookName))
  add(query_603751, "Action", newJString(Action))
  add(query_603751, "LifecycleActionToken", newJString(LifecycleActionToken))
  add(query_603751, "Version", newJString(Version))
  result = call_603750.call(nil, query_603751, nil, nil, nil)

var getRecordLifecycleActionHeartbeat* = Call_GetRecordLifecycleActionHeartbeat_603733(
    name: "getRecordLifecycleActionHeartbeat", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=RecordLifecycleActionHeartbeat",
    validator: validate_GetRecordLifecycleActionHeartbeat_603734, base: "/",
    url: url_GetRecordLifecycleActionHeartbeat_603735,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResumeProcesses_603789 = ref object of OpenApiRestCall_601389
proc url_PostResumeProcesses_603791(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostResumeProcesses_603790(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Resumes the specified suspended automatic scaling processes, or all suspended process, for the specified Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603792 = query.getOrDefault("Action")
  valid_603792 = validateParameter(valid_603792, JString, required = true,
                                 default = newJString("ResumeProcesses"))
  if valid_603792 != nil:
    section.add "Action", valid_603792
  var valid_603793 = query.getOrDefault("Version")
  valid_603793 = validateParameter(valid_603793, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603793 != nil:
    section.add "Version", valid_603793
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603794 = header.getOrDefault("X-Amz-Signature")
  valid_603794 = validateParameter(valid_603794, JString, required = false,
                                 default = nil)
  if valid_603794 != nil:
    section.add "X-Amz-Signature", valid_603794
  var valid_603795 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603795 = validateParameter(valid_603795, JString, required = false,
                                 default = nil)
  if valid_603795 != nil:
    section.add "X-Amz-Content-Sha256", valid_603795
  var valid_603796 = header.getOrDefault("X-Amz-Date")
  valid_603796 = validateParameter(valid_603796, JString, required = false,
                                 default = nil)
  if valid_603796 != nil:
    section.add "X-Amz-Date", valid_603796
  var valid_603797 = header.getOrDefault("X-Amz-Credential")
  valid_603797 = validateParameter(valid_603797, JString, required = false,
                                 default = nil)
  if valid_603797 != nil:
    section.add "X-Amz-Credential", valid_603797
  var valid_603798 = header.getOrDefault("X-Amz-Security-Token")
  valid_603798 = validateParameter(valid_603798, JString, required = false,
                                 default = nil)
  if valid_603798 != nil:
    section.add "X-Amz-Security-Token", valid_603798
  var valid_603799 = header.getOrDefault("X-Amz-Algorithm")
  valid_603799 = validateParameter(valid_603799, JString, required = false,
                                 default = nil)
  if valid_603799 != nil:
    section.add "X-Amz-Algorithm", valid_603799
  var valid_603800 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603800 = validateParameter(valid_603800, JString, required = false,
                                 default = nil)
  if valid_603800 != nil:
    section.add "X-Amz-SignedHeaders", valid_603800
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_603801 = formData.getOrDefault("AutoScalingGroupName")
  valid_603801 = validateParameter(valid_603801, JString, required = true,
                                 default = nil)
  if valid_603801 != nil:
    section.add "AutoScalingGroupName", valid_603801
  var valid_603802 = formData.getOrDefault("ScalingProcesses")
  valid_603802 = validateParameter(valid_603802, JArray, required = false,
                                 default = nil)
  if valid_603802 != nil:
    section.add "ScalingProcesses", valid_603802
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603803: Call_PostResumeProcesses_603789; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Resumes the specified suspended automatic scaling processes, or all suspended process, for the specified Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_603803.validator(path, query, header, formData, body)
  let scheme = call_603803.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603803.url(scheme.get, call_603803.host, call_603803.base,
                         call_603803.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603803, url, valid)

proc call*(call_603804: Call_PostResumeProcesses_603789;
          AutoScalingGroupName: string; Action: string = "ResumeProcesses";
          ScalingProcesses: JsonNode = nil; Version: string = "2011-01-01"): Recallable =
  ## postResumeProcesses
  ## <p>Resumes the specified suspended automatic scaling processes, or all suspended process, for the specified Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  ##   Version: string (required)
  var query_603805 = newJObject()
  var formData_603806 = newJObject()
  add(formData_603806, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_603805, "Action", newJString(Action))
  if ScalingProcesses != nil:
    formData_603806.add "ScalingProcesses", ScalingProcesses
  add(query_603805, "Version", newJString(Version))
  result = call_603804.call(nil, query_603805, nil, formData_603806, nil)

var postResumeProcesses* = Call_PostResumeProcesses_603789(
    name: "postResumeProcesses", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=ResumeProcesses",
    validator: validate_PostResumeProcesses_603790, base: "/",
    url: url_PostResumeProcesses_603791, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResumeProcesses_603772 = ref object of OpenApiRestCall_601389
proc url_GetResumeProcesses_603774(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetResumeProcesses_603773(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Resumes the specified suspended automatic scaling processes, or all suspended process, for the specified Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_603775 = query.getOrDefault("ScalingProcesses")
  valid_603775 = validateParameter(valid_603775, JArray, required = false,
                                 default = nil)
  if valid_603775 != nil:
    section.add "ScalingProcesses", valid_603775
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_603776 = query.getOrDefault("AutoScalingGroupName")
  valid_603776 = validateParameter(valid_603776, JString, required = true,
                                 default = nil)
  if valid_603776 != nil:
    section.add "AutoScalingGroupName", valid_603776
  var valid_603777 = query.getOrDefault("Action")
  valid_603777 = validateParameter(valid_603777, JString, required = true,
                                 default = newJString("ResumeProcesses"))
  if valid_603777 != nil:
    section.add "Action", valid_603777
  var valid_603778 = query.getOrDefault("Version")
  valid_603778 = validateParameter(valid_603778, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603778 != nil:
    section.add "Version", valid_603778
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603779 = header.getOrDefault("X-Amz-Signature")
  valid_603779 = validateParameter(valid_603779, JString, required = false,
                                 default = nil)
  if valid_603779 != nil:
    section.add "X-Amz-Signature", valid_603779
  var valid_603780 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603780 = validateParameter(valid_603780, JString, required = false,
                                 default = nil)
  if valid_603780 != nil:
    section.add "X-Amz-Content-Sha256", valid_603780
  var valid_603781 = header.getOrDefault("X-Amz-Date")
  valid_603781 = validateParameter(valid_603781, JString, required = false,
                                 default = nil)
  if valid_603781 != nil:
    section.add "X-Amz-Date", valid_603781
  var valid_603782 = header.getOrDefault("X-Amz-Credential")
  valid_603782 = validateParameter(valid_603782, JString, required = false,
                                 default = nil)
  if valid_603782 != nil:
    section.add "X-Amz-Credential", valid_603782
  var valid_603783 = header.getOrDefault("X-Amz-Security-Token")
  valid_603783 = validateParameter(valid_603783, JString, required = false,
                                 default = nil)
  if valid_603783 != nil:
    section.add "X-Amz-Security-Token", valid_603783
  var valid_603784 = header.getOrDefault("X-Amz-Algorithm")
  valid_603784 = validateParameter(valid_603784, JString, required = false,
                                 default = nil)
  if valid_603784 != nil:
    section.add "X-Amz-Algorithm", valid_603784
  var valid_603785 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603785 = validateParameter(valid_603785, JString, required = false,
                                 default = nil)
  if valid_603785 != nil:
    section.add "X-Amz-SignedHeaders", valid_603785
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603786: Call_GetResumeProcesses_603772; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Resumes the specified suspended automatic scaling processes, or all suspended process, for the specified Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_603786.validator(path, query, header, formData, body)
  let scheme = call_603786.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603786.url(scheme.get, call_603786.host, call_603786.base,
                         call_603786.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603786, url, valid)

proc call*(call_603787: Call_GetResumeProcesses_603772;
          AutoScalingGroupName: string; ScalingProcesses: JsonNode = nil;
          Action: string = "ResumeProcesses"; Version: string = "2011-01-01"): Recallable =
  ## getResumeProcesses
  ## <p>Resumes the specified suspended automatic scaling processes, or all suspended process, for the specified Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603788 = newJObject()
  if ScalingProcesses != nil:
    query_603788.add "ScalingProcesses", ScalingProcesses
  add(query_603788, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_603788, "Action", newJString(Action))
  add(query_603788, "Version", newJString(Version))
  result = call_603787.call(nil, query_603788, nil, nil, nil)

var getResumeProcesses* = Call_GetResumeProcesses_603772(
    name: "getResumeProcesses", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=ResumeProcesses",
    validator: validate_GetResumeProcesses_603773, base: "/",
    url: url_GetResumeProcesses_603774, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetDesiredCapacity_603825 = ref object of OpenApiRestCall_601389
proc url_PostSetDesiredCapacity_603827(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSetDesiredCapacity_603826(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the size of the specified Auto Scaling group.</p> <p>For more information about desired capacity, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">What Is Amazon EC2 Auto Scaling?</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603828 = query.getOrDefault("Action")
  valid_603828 = validateParameter(valid_603828, JString, required = true,
                                 default = newJString("SetDesiredCapacity"))
  if valid_603828 != nil:
    section.add "Action", valid_603828
  var valid_603829 = query.getOrDefault("Version")
  valid_603829 = validateParameter(valid_603829, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603829 != nil:
    section.add "Version", valid_603829
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603830 = header.getOrDefault("X-Amz-Signature")
  valid_603830 = validateParameter(valid_603830, JString, required = false,
                                 default = nil)
  if valid_603830 != nil:
    section.add "X-Amz-Signature", valid_603830
  var valid_603831 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603831 = validateParameter(valid_603831, JString, required = false,
                                 default = nil)
  if valid_603831 != nil:
    section.add "X-Amz-Content-Sha256", valid_603831
  var valid_603832 = header.getOrDefault("X-Amz-Date")
  valid_603832 = validateParameter(valid_603832, JString, required = false,
                                 default = nil)
  if valid_603832 != nil:
    section.add "X-Amz-Date", valid_603832
  var valid_603833 = header.getOrDefault("X-Amz-Credential")
  valid_603833 = validateParameter(valid_603833, JString, required = false,
                                 default = nil)
  if valid_603833 != nil:
    section.add "X-Amz-Credential", valid_603833
  var valid_603834 = header.getOrDefault("X-Amz-Security-Token")
  valid_603834 = validateParameter(valid_603834, JString, required = false,
                                 default = nil)
  if valid_603834 != nil:
    section.add "X-Amz-Security-Token", valid_603834
  var valid_603835 = header.getOrDefault("X-Amz-Algorithm")
  valid_603835 = validateParameter(valid_603835, JString, required = false,
                                 default = nil)
  if valid_603835 != nil:
    section.add "X-Amz-Algorithm", valid_603835
  var valid_603836 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603836 = validateParameter(valid_603836, JString, required = false,
                                 default = nil)
  if valid_603836 != nil:
    section.add "X-Amz-SignedHeaders", valid_603836
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   DesiredCapacity: JInt (required)
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   HonorCooldown: JBool
  ##                : Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before initiating a scaling activity to set your Auto Scaling group to its new capacity. By default, Amazon EC2 Auto Scaling does not honor the cooldown period during manual scaling activities.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_603837 = formData.getOrDefault("AutoScalingGroupName")
  valid_603837 = validateParameter(valid_603837, JString, required = true,
                                 default = nil)
  if valid_603837 != nil:
    section.add "AutoScalingGroupName", valid_603837
  var valid_603838 = formData.getOrDefault("DesiredCapacity")
  valid_603838 = validateParameter(valid_603838, JInt, required = true, default = nil)
  if valid_603838 != nil:
    section.add "DesiredCapacity", valid_603838
  var valid_603839 = formData.getOrDefault("HonorCooldown")
  valid_603839 = validateParameter(valid_603839, JBool, required = false, default = nil)
  if valid_603839 != nil:
    section.add "HonorCooldown", valid_603839
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603840: Call_PostSetDesiredCapacity_603825; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the size of the specified Auto Scaling group.</p> <p>For more information about desired capacity, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">What Is Amazon EC2 Auto Scaling?</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_603840.validator(path, query, header, formData, body)
  let scheme = call_603840.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603840.url(scheme.get, call_603840.host, call_603840.base,
                         call_603840.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603840, url, valid)

proc call*(call_603841: Call_PostSetDesiredCapacity_603825;
          AutoScalingGroupName: string; DesiredCapacity: int;
          HonorCooldown: bool = false; Action: string = "SetDesiredCapacity";
          Version: string = "2011-01-01"): Recallable =
  ## postSetDesiredCapacity
  ## <p>Sets the size of the specified Auto Scaling group.</p> <p>For more information about desired capacity, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">What Is Amazon EC2 Auto Scaling?</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   DesiredCapacity: int (required)
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   HonorCooldown: bool
  ##                : Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before initiating a scaling activity to set your Auto Scaling group to its new capacity. By default, Amazon EC2 Auto Scaling does not honor the cooldown period during manual scaling activities.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603842 = newJObject()
  var formData_603843 = newJObject()
  add(formData_603843, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_603843, "DesiredCapacity", newJInt(DesiredCapacity))
  add(formData_603843, "HonorCooldown", newJBool(HonorCooldown))
  add(query_603842, "Action", newJString(Action))
  add(query_603842, "Version", newJString(Version))
  result = call_603841.call(nil, query_603842, nil, formData_603843, nil)

var postSetDesiredCapacity* = Call_PostSetDesiredCapacity_603825(
    name: "postSetDesiredCapacity", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=SetDesiredCapacity",
    validator: validate_PostSetDesiredCapacity_603826, base: "/",
    url: url_PostSetDesiredCapacity_603827, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetDesiredCapacity_603807 = ref object of OpenApiRestCall_601389
proc url_GetSetDesiredCapacity_603809(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSetDesiredCapacity_603808(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the size of the specified Auto Scaling group.</p> <p>For more information about desired capacity, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">What Is Amazon EC2 Auto Scaling?</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DesiredCapacity: JInt (required)
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   HonorCooldown: JBool
  ##                : Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before initiating a scaling activity to set your Auto Scaling group to its new capacity. By default, Amazon EC2 Auto Scaling does not honor the cooldown period during manual scaling activities.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `DesiredCapacity` field"
  var valid_603810 = query.getOrDefault("DesiredCapacity")
  valid_603810 = validateParameter(valid_603810, JInt, required = true, default = nil)
  if valid_603810 != nil:
    section.add "DesiredCapacity", valid_603810
  var valid_603811 = query.getOrDefault("AutoScalingGroupName")
  valid_603811 = validateParameter(valid_603811, JString, required = true,
                                 default = nil)
  if valid_603811 != nil:
    section.add "AutoScalingGroupName", valid_603811
  var valid_603812 = query.getOrDefault("Action")
  valid_603812 = validateParameter(valid_603812, JString, required = true,
                                 default = newJString("SetDesiredCapacity"))
  if valid_603812 != nil:
    section.add "Action", valid_603812
  var valid_603813 = query.getOrDefault("HonorCooldown")
  valid_603813 = validateParameter(valid_603813, JBool, required = false, default = nil)
  if valid_603813 != nil:
    section.add "HonorCooldown", valid_603813
  var valid_603814 = query.getOrDefault("Version")
  valid_603814 = validateParameter(valid_603814, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603814 != nil:
    section.add "Version", valid_603814
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603815 = header.getOrDefault("X-Amz-Signature")
  valid_603815 = validateParameter(valid_603815, JString, required = false,
                                 default = nil)
  if valid_603815 != nil:
    section.add "X-Amz-Signature", valid_603815
  var valid_603816 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603816 = validateParameter(valid_603816, JString, required = false,
                                 default = nil)
  if valid_603816 != nil:
    section.add "X-Amz-Content-Sha256", valid_603816
  var valid_603817 = header.getOrDefault("X-Amz-Date")
  valid_603817 = validateParameter(valid_603817, JString, required = false,
                                 default = nil)
  if valid_603817 != nil:
    section.add "X-Amz-Date", valid_603817
  var valid_603818 = header.getOrDefault("X-Amz-Credential")
  valid_603818 = validateParameter(valid_603818, JString, required = false,
                                 default = nil)
  if valid_603818 != nil:
    section.add "X-Amz-Credential", valid_603818
  var valid_603819 = header.getOrDefault("X-Amz-Security-Token")
  valid_603819 = validateParameter(valid_603819, JString, required = false,
                                 default = nil)
  if valid_603819 != nil:
    section.add "X-Amz-Security-Token", valid_603819
  var valid_603820 = header.getOrDefault("X-Amz-Algorithm")
  valid_603820 = validateParameter(valid_603820, JString, required = false,
                                 default = nil)
  if valid_603820 != nil:
    section.add "X-Amz-Algorithm", valid_603820
  var valid_603821 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603821 = validateParameter(valid_603821, JString, required = false,
                                 default = nil)
  if valid_603821 != nil:
    section.add "X-Amz-SignedHeaders", valid_603821
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603822: Call_GetSetDesiredCapacity_603807; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the size of the specified Auto Scaling group.</p> <p>For more information about desired capacity, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">What Is Amazon EC2 Auto Scaling?</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_603822.validator(path, query, header, formData, body)
  let scheme = call_603822.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603822.url(scheme.get, call_603822.host, call_603822.base,
                         call_603822.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603822, url, valid)

proc call*(call_603823: Call_GetSetDesiredCapacity_603807; DesiredCapacity: int;
          AutoScalingGroupName: string; Action: string = "SetDesiredCapacity";
          HonorCooldown: bool = false; Version: string = "2011-01-01"): Recallable =
  ## getSetDesiredCapacity
  ## <p>Sets the size of the specified Auto Scaling group.</p> <p>For more information about desired capacity, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">What Is Amazon EC2 Auto Scaling?</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   DesiredCapacity: int (required)
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   HonorCooldown: bool
  ##                : Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before initiating a scaling activity to set your Auto Scaling group to its new capacity. By default, Amazon EC2 Auto Scaling does not honor the cooldown period during manual scaling activities.
  ##   Version: string (required)
  var query_603824 = newJObject()
  add(query_603824, "DesiredCapacity", newJInt(DesiredCapacity))
  add(query_603824, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_603824, "Action", newJString(Action))
  add(query_603824, "HonorCooldown", newJBool(HonorCooldown))
  add(query_603824, "Version", newJString(Version))
  result = call_603823.call(nil, query_603824, nil, nil, nil)

var getSetDesiredCapacity* = Call_GetSetDesiredCapacity_603807(
    name: "getSetDesiredCapacity", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=SetDesiredCapacity",
    validator: validate_GetSetDesiredCapacity_603808, base: "/",
    url: url_GetSetDesiredCapacity_603809, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetInstanceHealth_603862 = ref object of OpenApiRestCall_601389
proc url_PostSetInstanceHealth_603864(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSetInstanceHealth_603863(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the health status of the specified instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603865 = query.getOrDefault("Action")
  valid_603865 = validateParameter(valid_603865, JString, required = true,
                                 default = newJString("SetInstanceHealth"))
  if valid_603865 != nil:
    section.add "Action", valid_603865
  var valid_603866 = query.getOrDefault("Version")
  valid_603866 = validateParameter(valid_603866, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603866 != nil:
    section.add "Version", valid_603866
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603867 = header.getOrDefault("X-Amz-Signature")
  valid_603867 = validateParameter(valid_603867, JString, required = false,
                                 default = nil)
  if valid_603867 != nil:
    section.add "X-Amz-Signature", valid_603867
  var valid_603868 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603868 = validateParameter(valid_603868, JString, required = false,
                                 default = nil)
  if valid_603868 != nil:
    section.add "X-Amz-Content-Sha256", valid_603868
  var valid_603869 = header.getOrDefault("X-Amz-Date")
  valid_603869 = validateParameter(valid_603869, JString, required = false,
                                 default = nil)
  if valid_603869 != nil:
    section.add "X-Amz-Date", valid_603869
  var valid_603870 = header.getOrDefault("X-Amz-Credential")
  valid_603870 = validateParameter(valid_603870, JString, required = false,
                                 default = nil)
  if valid_603870 != nil:
    section.add "X-Amz-Credential", valid_603870
  var valid_603871 = header.getOrDefault("X-Amz-Security-Token")
  valid_603871 = validateParameter(valid_603871, JString, required = false,
                                 default = nil)
  if valid_603871 != nil:
    section.add "X-Amz-Security-Token", valid_603871
  var valid_603872 = header.getOrDefault("X-Amz-Algorithm")
  valid_603872 = validateParameter(valid_603872, JString, required = false,
                                 default = nil)
  if valid_603872 != nil:
    section.add "X-Amz-Algorithm", valid_603872
  var valid_603873 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603873 = validateParameter(valid_603873, JString, required = false,
                                 default = nil)
  if valid_603873 != nil:
    section.add "X-Amz-SignedHeaders", valid_603873
  result.add "header", section
  ## parameters in `formData` object:
  ##   ShouldRespectGracePeriod: JBool
  ##                           : <p>If the Auto Scaling group of the specified instance has a <code>HealthCheckGracePeriod</code> specified for the group, by default, this call respects the grace period. Set this to <code>False</code>, to have the call not respect the grace period associated with the group.</p> <p>For more information about the health check grace period, see <a>CreateAutoScalingGroup</a>.</p>
  ##   HealthStatus: JString (required)
  ##               : The health status of the instance. Set to <code>Healthy</code> to have the instance remain in service. Set to <code>Unhealthy</code> to have the instance be out of service. Amazon EC2 Auto Scaling terminates and replaces the unhealthy instance.
  ##   InstanceId: JString (required)
  ##             : The ID of the instance.
  section = newJObject()
  var valid_603874 = formData.getOrDefault("ShouldRespectGracePeriod")
  valid_603874 = validateParameter(valid_603874, JBool, required = false, default = nil)
  if valid_603874 != nil:
    section.add "ShouldRespectGracePeriod", valid_603874
  assert formData != nil,
        "formData argument is necessary due to required `HealthStatus` field"
  var valid_603875 = formData.getOrDefault("HealthStatus")
  valid_603875 = validateParameter(valid_603875, JString, required = true,
                                 default = nil)
  if valid_603875 != nil:
    section.add "HealthStatus", valid_603875
  var valid_603876 = formData.getOrDefault("InstanceId")
  valid_603876 = validateParameter(valid_603876, JString, required = true,
                                 default = nil)
  if valid_603876 != nil:
    section.add "InstanceId", valid_603876
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603877: Call_PostSetInstanceHealth_603862; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the health status of the specified instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_603877.validator(path, query, header, formData, body)
  let scheme = call_603877.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603877.url(scheme.get, call_603877.host, call_603877.base,
                         call_603877.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603877, url, valid)

proc call*(call_603878: Call_PostSetInstanceHealth_603862; HealthStatus: string;
          InstanceId: string; ShouldRespectGracePeriod: bool = false;
          Action: string = "SetInstanceHealth"; Version: string = "2011-01-01"): Recallable =
  ## postSetInstanceHealth
  ## <p>Sets the health status of the specified instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   ShouldRespectGracePeriod: bool
  ##                           : <p>If the Auto Scaling group of the specified instance has a <code>HealthCheckGracePeriod</code> specified for the group, by default, this call respects the grace period. Set this to <code>False</code>, to have the call not respect the grace period associated with the group.</p> <p>For more information about the health check grace period, see <a>CreateAutoScalingGroup</a>.</p>
  ##   HealthStatus: string (required)
  ##               : The health status of the instance. Set to <code>Healthy</code> to have the instance remain in service. Set to <code>Unhealthy</code> to have the instance be out of service. Amazon EC2 Auto Scaling terminates and replaces the unhealthy instance.
  ##   InstanceId: string (required)
  ##             : The ID of the instance.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603879 = newJObject()
  var formData_603880 = newJObject()
  add(formData_603880, "ShouldRespectGracePeriod",
      newJBool(ShouldRespectGracePeriod))
  add(formData_603880, "HealthStatus", newJString(HealthStatus))
  add(formData_603880, "InstanceId", newJString(InstanceId))
  add(query_603879, "Action", newJString(Action))
  add(query_603879, "Version", newJString(Version))
  result = call_603878.call(nil, query_603879, nil, formData_603880, nil)

var postSetInstanceHealth* = Call_PostSetInstanceHealth_603862(
    name: "postSetInstanceHealth", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=SetInstanceHealth",
    validator: validate_PostSetInstanceHealth_603863, base: "/",
    url: url_PostSetInstanceHealth_603864, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetInstanceHealth_603844 = ref object of OpenApiRestCall_601389
proc url_GetSetInstanceHealth_603846(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSetInstanceHealth_603845(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the health status of the specified instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ShouldRespectGracePeriod: JBool
  ##                           : <p>If the Auto Scaling group of the specified instance has a <code>HealthCheckGracePeriod</code> specified for the group, by default, this call respects the grace period. Set this to <code>False</code>, to have the call not respect the grace period associated with the group.</p> <p>For more information about the health check grace period, see <a>CreateAutoScalingGroup</a>.</p>
  ##   InstanceId: JString (required)
  ##             : The ID of the instance.
  ##   HealthStatus: JString (required)
  ##               : The health status of the instance. Set to <code>Healthy</code> to have the instance remain in service. Set to <code>Unhealthy</code> to have the instance be out of service. Amazon EC2 Auto Scaling terminates and replaces the unhealthy instance.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_603847 = query.getOrDefault("ShouldRespectGracePeriod")
  valid_603847 = validateParameter(valid_603847, JBool, required = false, default = nil)
  if valid_603847 != nil:
    section.add "ShouldRespectGracePeriod", valid_603847
  assert query != nil,
        "query argument is necessary due to required `InstanceId` field"
  var valid_603848 = query.getOrDefault("InstanceId")
  valid_603848 = validateParameter(valid_603848, JString, required = true,
                                 default = nil)
  if valid_603848 != nil:
    section.add "InstanceId", valid_603848
  var valid_603849 = query.getOrDefault("HealthStatus")
  valid_603849 = validateParameter(valid_603849, JString, required = true,
                                 default = nil)
  if valid_603849 != nil:
    section.add "HealthStatus", valid_603849
  var valid_603850 = query.getOrDefault("Action")
  valid_603850 = validateParameter(valid_603850, JString, required = true,
                                 default = newJString("SetInstanceHealth"))
  if valid_603850 != nil:
    section.add "Action", valid_603850
  var valid_603851 = query.getOrDefault("Version")
  valid_603851 = validateParameter(valid_603851, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603851 != nil:
    section.add "Version", valid_603851
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603852 = header.getOrDefault("X-Amz-Signature")
  valid_603852 = validateParameter(valid_603852, JString, required = false,
                                 default = nil)
  if valid_603852 != nil:
    section.add "X-Amz-Signature", valid_603852
  var valid_603853 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603853 = validateParameter(valid_603853, JString, required = false,
                                 default = nil)
  if valid_603853 != nil:
    section.add "X-Amz-Content-Sha256", valid_603853
  var valid_603854 = header.getOrDefault("X-Amz-Date")
  valid_603854 = validateParameter(valid_603854, JString, required = false,
                                 default = nil)
  if valid_603854 != nil:
    section.add "X-Amz-Date", valid_603854
  var valid_603855 = header.getOrDefault("X-Amz-Credential")
  valid_603855 = validateParameter(valid_603855, JString, required = false,
                                 default = nil)
  if valid_603855 != nil:
    section.add "X-Amz-Credential", valid_603855
  var valid_603856 = header.getOrDefault("X-Amz-Security-Token")
  valid_603856 = validateParameter(valid_603856, JString, required = false,
                                 default = nil)
  if valid_603856 != nil:
    section.add "X-Amz-Security-Token", valid_603856
  var valid_603857 = header.getOrDefault("X-Amz-Algorithm")
  valid_603857 = validateParameter(valid_603857, JString, required = false,
                                 default = nil)
  if valid_603857 != nil:
    section.add "X-Amz-Algorithm", valid_603857
  var valid_603858 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603858 = validateParameter(valid_603858, JString, required = false,
                                 default = nil)
  if valid_603858 != nil:
    section.add "X-Amz-SignedHeaders", valid_603858
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603859: Call_GetSetInstanceHealth_603844; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the health status of the specified instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_603859.validator(path, query, header, formData, body)
  let scheme = call_603859.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603859.url(scheme.get, call_603859.host, call_603859.base,
                         call_603859.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603859, url, valid)

proc call*(call_603860: Call_GetSetInstanceHealth_603844; InstanceId: string;
          HealthStatus: string; ShouldRespectGracePeriod: bool = false;
          Action: string = "SetInstanceHealth"; Version: string = "2011-01-01"): Recallable =
  ## getSetInstanceHealth
  ## <p>Sets the health status of the specified instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   ShouldRespectGracePeriod: bool
  ##                           : <p>If the Auto Scaling group of the specified instance has a <code>HealthCheckGracePeriod</code> specified for the group, by default, this call respects the grace period. Set this to <code>False</code>, to have the call not respect the grace period associated with the group.</p> <p>For more information about the health check grace period, see <a>CreateAutoScalingGroup</a>.</p>
  ##   InstanceId: string (required)
  ##             : The ID of the instance.
  ##   HealthStatus: string (required)
  ##               : The health status of the instance. Set to <code>Healthy</code> to have the instance remain in service. Set to <code>Unhealthy</code> to have the instance be out of service. Amazon EC2 Auto Scaling terminates and replaces the unhealthy instance.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603861 = newJObject()
  add(query_603861, "ShouldRespectGracePeriod", newJBool(ShouldRespectGracePeriod))
  add(query_603861, "InstanceId", newJString(InstanceId))
  add(query_603861, "HealthStatus", newJString(HealthStatus))
  add(query_603861, "Action", newJString(Action))
  add(query_603861, "Version", newJString(Version))
  result = call_603860.call(nil, query_603861, nil, nil, nil)

var getSetInstanceHealth* = Call_GetSetInstanceHealth_603844(
    name: "getSetInstanceHealth", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=SetInstanceHealth",
    validator: validate_GetSetInstanceHealth_603845, base: "/",
    url: url_GetSetInstanceHealth_603846, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetInstanceProtection_603899 = ref object of OpenApiRestCall_601389
proc url_PostSetInstanceProtection_603901(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSetInstanceProtection_603900(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the instance protection settings of the specified instances.</p> <p>For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603902 = query.getOrDefault("Action")
  valid_603902 = validateParameter(valid_603902, JString, required = true,
                                 default = newJString("SetInstanceProtection"))
  if valid_603902 != nil:
    section.add "Action", valid_603902
  var valid_603903 = query.getOrDefault("Version")
  valid_603903 = validateParameter(valid_603903, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603903 != nil:
    section.add "Version", valid_603903
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603904 = header.getOrDefault("X-Amz-Signature")
  valid_603904 = validateParameter(valid_603904, JString, required = false,
                                 default = nil)
  if valid_603904 != nil:
    section.add "X-Amz-Signature", valid_603904
  var valid_603905 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603905 = validateParameter(valid_603905, JString, required = false,
                                 default = nil)
  if valid_603905 != nil:
    section.add "X-Amz-Content-Sha256", valid_603905
  var valid_603906 = header.getOrDefault("X-Amz-Date")
  valid_603906 = validateParameter(valid_603906, JString, required = false,
                                 default = nil)
  if valid_603906 != nil:
    section.add "X-Amz-Date", valid_603906
  var valid_603907 = header.getOrDefault("X-Amz-Credential")
  valid_603907 = validateParameter(valid_603907, JString, required = false,
                                 default = nil)
  if valid_603907 != nil:
    section.add "X-Amz-Credential", valid_603907
  var valid_603908 = header.getOrDefault("X-Amz-Security-Token")
  valid_603908 = validateParameter(valid_603908, JString, required = false,
                                 default = nil)
  if valid_603908 != nil:
    section.add "X-Amz-Security-Token", valid_603908
  var valid_603909 = header.getOrDefault("X-Amz-Algorithm")
  valid_603909 = validateParameter(valid_603909, JString, required = false,
                                 default = nil)
  if valid_603909 != nil:
    section.add "X-Amz-Algorithm", valid_603909
  var valid_603910 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603910 = validateParameter(valid_603910, JString, required = false,
                                 default = nil)
  if valid_603910 != nil:
    section.add "X-Amz-SignedHeaders", valid_603910
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   ProtectedFromScaleIn: JBool (required)
  ##                       : Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling in.
  ##   InstanceIds: JArray (required)
  ##              : One or more instance IDs.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_603911 = formData.getOrDefault("AutoScalingGroupName")
  valid_603911 = validateParameter(valid_603911, JString, required = true,
                                 default = nil)
  if valid_603911 != nil:
    section.add "AutoScalingGroupName", valid_603911
  var valid_603912 = formData.getOrDefault("ProtectedFromScaleIn")
  valid_603912 = validateParameter(valid_603912, JBool, required = true, default = nil)
  if valid_603912 != nil:
    section.add "ProtectedFromScaleIn", valid_603912
  var valid_603913 = formData.getOrDefault("InstanceIds")
  valid_603913 = validateParameter(valid_603913, JArray, required = true, default = nil)
  if valid_603913 != nil:
    section.add "InstanceIds", valid_603913
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603914: Call_PostSetInstanceProtection_603899; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the instance protection settings of the specified instances.</p> <p>For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_603914.validator(path, query, header, formData, body)
  let scheme = call_603914.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603914.url(scheme.get, call_603914.host, call_603914.base,
                         call_603914.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603914, url, valid)

proc call*(call_603915: Call_PostSetInstanceProtection_603899;
          AutoScalingGroupName: string; ProtectedFromScaleIn: bool;
          InstanceIds: JsonNode; Action: string = "SetInstanceProtection";
          Version: string = "2011-01-01"): Recallable =
  ## postSetInstanceProtection
  ## <p>Updates the instance protection settings of the specified instances.</p> <p>For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   ProtectedFromScaleIn: bool (required)
  ##                       : Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling in.
  ##   InstanceIds: JArray (required)
  ##              : One or more instance IDs.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603916 = newJObject()
  var formData_603917 = newJObject()
  add(formData_603917, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_603917, "ProtectedFromScaleIn", newJBool(ProtectedFromScaleIn))
  if InstanceIds != nil:
    formData_603917.add "InstanceIds", InstanceIds
  add(query_603916, "Action", newJString(Action))
  add(query_603916, "Version", newJString(Version))
  result = call_603915.call(nil, query_603916, nil, formData_603917, nil)

var postSetInstanceProtection* = Call_PostSetInstanceProtection_603899(
    name: "postSetInstanceProtection", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=SetInstanceProtection",
    validator: validate_PostSetInstanceProtection_603900, base: "/",
    url: url_PostSetInstanceProtection_603901,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetInstanceProtection_603881 = ref object of OpenApiRestCall_601389
proc url_GetSetInstanceProtection_603883(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSetInstanceProtection_603882(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the instance protection settings of the specified instances.</p> <p>For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   InstanceIds: JArray (required)
  ##              : One or more instance IDs.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   ProtectedFromScaleIn: JBool (required)
  ##                       : Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling in.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `InstanceIds` field"
  var valid_603884 = query.getOrDefault("InstanceIds")
  valid_603884 = validateParameter(valid_603884, JArray, required = true, default = nil)
  if valid_603884 != nil:
    section.add "InstanceIds", valid_603884
  var valid_603885 = query.getOrDefault("AutoScalingGroupName")
  valid_603885 = validateParameter(valid_603885, JString, required = true,
                                 default = nil)
  if valid_603885 != nil:
    section.add "AutoScalingGroupName", valid_603885
  var valid_603886 = query.getOrDefault("Action")
  valid_603886 = validateParameter(valid_603886, JString, required = true,
                                 default = newJString("SetInstanceProtection"))
  if valid_603886 != nil:
    section.add "Action", valid_603886
  var valid_603887 = query.getOrDefault("ProtectedFromScaleIn")
  valid_603887 = validateParameter(valid_603887, JBool, required = true, default = nil)
  if valid_603887 != nil:
    section.add "ProtectedFromScaleIn", valid_603887
  var valid_603888 = query.getOrDefault("Version")
  valid_603888 = validateParameter(valid_603888, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603888 != nil:
    section.add "Version", valid_603888
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603889 = header.getOrDefault("X-Amz-Signature")
  valid_603889 = validateParameter(valid_603889, JString, required = false,
                                 default = nil)
  if valid_603889 != nil:
    section.add "X-Amz-Signature", valid_603889
  var valid_603890 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603890 = validateParameter(valid_603890, JString, required = false,
                                 default = nil)
  if valid_603890 != nil:
    section.add "X-Amz-Content-Sha256", valid_603890
  var valid_603891 = header.getOrDefault("X-Amz-Date")
  valid_603891 = validateParameter(valid_603891, JString, required = false,
                                 default = nil)
  if valid_603891 != nil:
    section.add "X-Amz-Date", valid_603891
  var valid_603892 = header.getOrDefault("X-Amz-Credential")
  valid_603892 = validateParameter(valid_603892, JString, required = false,
                                 default = nil)
  if valid_603892 != nil:
    section.add "X-Amz-Credential", valid_603892
  var valid_603893 = header.getOrDefault("X-Amz-Security-Token")
  valid_603893 = validateParameter(valid_603893, JString, required = false,
                                 default = nil)
  if valid_603893 != nil:
    section.add "X-Amz-Security-Token", valid_603893
  var valid_603894 = header.getOrDefault("X-Amz-Algorithm")
  valid_603894 = validateParameter(valid_603894, JString, required = false,
                                 default = nil)
  if valid_603894 != nil:
    section.add "X-Amz-Algorithm", valid_603894
  var valid_603895 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603895 = validateParameter(valid_603895, JString, required = false,
                                 default = nil)
  if valid_603895 != nil:
    section.add "X-Amz-SignedHeaders", valid_603895
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603896: Call_GetSetInstanceProtection_603881; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the instance protection settings of the specified instances.</p> <p>For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_603896.validator(path, query, header, formData, body)
  let scheme = call_603896.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603896.url(scheme.get, call_603896.host, call_603896.base,
                         call_603896.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603896, url, valid)

proc call*(call_603897: Call_GetSetInstanceProtection_603881;
          InstanceIds: JsonNode; AutoScalingGroupName: string;
          ProtectedFromScaleIn: bool; Action: string = "SetInstanceProtection";
          Version: string = "2011-01-01"): Recallable =
  ## getSetInstanceProtection
  ## <p>Updates the instance protection settings of the specified instances.</p> <p>For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   InstanceIds: JArray (required)
  ##              : One or more instance IDs.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   ProtectedFromScaleIn: bool (required)
  ##                       : Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling in.
  ##   Version: string (required)
  var query_603898 = newJObject()
  if InstanceIds != nil:
    query_603898.add "InstanceIds", InstanceIds
  add(query_603898, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_603898, "Action", newJString(Action))
  add(query_603898, "ProtectedFromScaleIn", newJBool(ProtectedFromScaleIn))
  add(query_603898, "Version", newJString(Version))
  result = call_603897.call(nil, query_603898, nil, nil, nil)

var getSetInstanceProtection* = Call_GetSetInstanceProtection_603881(
    name: "getSetInstanceProtection", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=SetInstanceProtection",
    validator: validate_GetSetInstanceProtection_603882, base: "/",
    url: url_GetSetInstanceProtection_603883, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSuspendProcesses_603935 = ref object of OpenApiRestCall_601389
proc url_PostSuspendProcesses_603937(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSuspendProcesses_603936(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Suspends the specified automatic scaling processes, or all processes, for the specified Auto Scaling group.</p> <p>If you suspend either the <code>Launch</code> or <code>Terminate</code> process types, it can prevent other process types from functioning properly.</p> <p>To resume processes that have been suspended, use <a>ResumeProcesses</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603938 = query.getOrDefault("Action")
  valid_603938 = validateParameter(valid_603938, JString, required = true,
                                 default = newJString("SuspendProcesses"))
  if valid_603938 != nil:
    section.add "Action", valid_603938
  var valid_603939 = query.getOrDefault("Version")
  valid_603939 = validateParameter(valid_603939, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603939 != nil:
    section.add "Version", valid_603939
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603940 = header.getOrDefault("X-Amz-Signature")
  valid_603940 = validateParameter(valid_603940, JString, required = false,
                                 default = nil)
  if valid_603940 != nil:
    section.add "X-Amz-Signature", valid_603940
  var valid_603941 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603941 = validateParameter(valid_603941, JString, required = false,
                                 default = nil)
  if valid_603941 != nil:
    section.add "X-Amz-Content-Sha256", valid_603941
  var valid_603942 = header.getOrDefault("X-Amz-Date")
  valid_603942 = validateParameter(valid_603942, JString, required = false,
                                 default = nil)
  if valid_603942 != nil:
    section.add "X-Amz-Date", valid_603942
  var valid_603943 = header.getOrDefault("X-Amz-Credential")
  valid_603943 = validateParameter(valid_603943, JString, required = false,
                                 default = nil)
  if valid_603943 != nil:
    section.add "X-Amz-Credential", valid_603943
  var valid_603944 = header.getOrDefault("X-Amz-Security-Token")
  valid_603944 = validateParameter(valid_603944, JString, required = false,
                                 default = nil)
  if valid_603944 != nil:
    section.add "X-Amz-Security-Token", valid_603944
  var valid_603945 = header.getOrDefault("X-Amz-Algorithm")
  valid_603945 = validateParameter(valid_603945, JString, required = false,
                                 default = nil)
  if valid_603945 != nil:
    section.add "X-Amz-Algorithm", valid_603945
  var valid_603946 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603946 = validateParameter(valid_603946, JString, required = false,
                                 default = nil)
  if valid_603946 != nil:
    section.add "X-Amz-SignedHeaders", valid_603946
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_603947 = formData.getOrDefault("AutoScalingGroupName")
  valid_603947 = validateParameter(valid_603947, JString, required = true,
                                 default = nil)
  if valid_603947 != nil:
    section.add "AutoScalingGroupName", valid_603947
  var valid_603948 = formData.getOrDefault("ScalingProcesses")
  valid_603948 = validateParameter(valid_603948, JArray, required = false,
                                 default = nil)
  if valid_603948 != nil:
    section.add "ScalingProcesses", valid_603948
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603949: Call_PostSuspendProcesses_603935; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Suspends the specified automatic scaling processes, or all processes, for the specified Auto Scaling group.</p> <p>If you suspend either the <code>Launch</code> or <code>Terminate</code> process types, it can prevent other process types from functioning properly.</p> <p>To resume processes that have been suspended, use <a>ResumeProcesses</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_603949.validator(path, query, header, formData, body)
  let scheme = call_603949.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603949.url(scheme.get, call_603949.host, call_603949.base,
                         call_603949.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603949, url, valid)

proc call*(call_603950: Call_PostSuspendProcesses_603935;
          AutoScalingGroupName: string; Action: string = "SuspendProcesses";
          ScalingProcesses: JsonNode = nil; Version: string = "2011-01-01"): Recallable =
  ## postSuspendProcesses
  ## <p>Suspends the specified automatic scaling processes, or all processes, for the specified Auto Scaling group.</p> <p>If you suspend either the <code>Launch</code> or <code>Terminate</code> process types, it can prevent other process types from functioning properly.</p> <p>To resume processes that have been suspended, use <a>ResumeProcesses</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  ##   Version: string (required)
  var query_603951 = newJObject()
  var formData_603952 = newJObject()
  add(formData_603952, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_603951, "Action", newJString(Action))
  if ScalingProcesses != nil:
    formData_603952.add "ScalingProcesses", ScalingProcesses
  add(query_603951, "Version", newJString(Version))
  result = call_603950.call(nil, query_603951, nil, formData_603952, nil)

var postSuspendProcesses* = Call_PostSuspendProcesses_603935(
    name: "postSuspendProcesses", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=SuspendProcesses",
    validator: validate_PostSuspendProcesses_603936, base: "/",
    url: url_PostSuspendProcesses_603937, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSuspendProcesses_603918 = ref object of OpenApiRestCall_601389
proc url_GetSuspendProcesses_603920(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSuspendProcesses_603919(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Suspends the specified automatic scaling processes, or all processes, for the specified Auto Scaling group.</p> <p>If you suspend either the <code>Launch</code> or <code>Terminate</code> process types, it can prevent other process types from functioning properly.</p> <p>To resume processes that have been suspended, use <a>ResumeProcesses</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_603921 = query.getOrDefault("ScalingProcesses")
  valid_603921 = validateParameter(valid_603921, JArray, required = false,
                                 default = nil)
  if valid_603921 != nil:
    section.add "ScalingProcesses", valid_603921
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_603922 = query.getOrDefault("AutoScalingGroupName")
  valid_603922 = validateParameter(valid_603922, JString, required = true,
                                 default = nil)
  if valid_603922 != nil:
    section.add "AutoScalingGroupName", valid_603922
  var valid_603923 = query.getOrDefault("Action")
  valid_603923 = validateParameter(valid_603923, JString, required = true,
                                 default = newJString("SuspendProcesses"))
  if valid_603923 != nil:
    section.add "Action", valid_603923
  var valid_603924 = query.getOrDefault("Version")
  valid_603924 = validateParameter(valid_603924, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603924 != nil:
    section.add "Version", valid_603924
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603925 = header.getOrDefault("X-Amz-Signature")
  valid_603925 = validateParameter(valid_603925, JString, required = false,
                                 default = nil)
  if valid_603925 != nil:
    section.add "X-Amz-Signature", valid_603925
  var valid_603926 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603926 = validateParameter(valid_603926, JString, required = false,
                                 default = nil)
  if valid_603926 != nil:
    section.add "X-Amz-Content-Sha256", valid_603926
  var valid_603927 = header.getOrDefault("X-Amz-Date")
  valid_603927 = validateParameter(valid_603927, JString, required = false,
                                 default = nil)
  if valid_603927 != nil:
    section.add "X-Amz-Date", valid_603927
  var valid_603928 = header.getOrDefault("X-Amz-Credential")
  valid_603928 = validateParameter(valid_603928, JString, required = false,
                                 default = nil)
  if valid_603928 != nil:
    section.add "X-Amz-Credential", valid_603928
  var valid_603929 = header.getOrDefault("X-Amz-Security-Token")
  valid_603929 = validateParameter(valid_603929, JString, required = false,
                                 default = nil)
  if valid_603929 != nil:
    section.add "X-Amz-Security-Token", valid_603929
  var valid_603930 = header.getOrDefault("X-Amz-Algorithm")
  valid_603930 = validateParameter(valid_603930, JString, required = false,
                                 default = nil)
  if valid_603930 != nil:
    section.add "X-Amz-Algorithm", valid_603930
  var valid_603931 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603931 = validateParameter(valid_603931, JString, required = false,
                                 default = nil)
  if valid_603931 != nil:
    section.add "X-Amz-SignedHeaders", valid_603931
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603932: Call_GetSuspendProcesses_603918; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Suspends the specified automatic scaling processes, or all processes, for the specified Auto Scaling group.</p> <p>If you suspend either the <code>Launch</code> or <code>Terminate</code> process types, it can prevent other process types from functioning properly.</p> <p>To resume processes that have been suspended, use <a>ResumeProcesses</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_603932.validator(path, query, header, formData, body)
  let scheme = call_603932.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603932.url(scheme.get, call_603932.host, call_603932.base,
                         call_603932.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603932, url, valid)

proc call*(call_603933: Call_GetSuspendProcesses_603918;
          AutoScalingGroupName: string; ScalingProcesses: JsonNode = nil;
          Action: string = "SuspendProcesses"; Version: string = "2011-01-01"): Recallable =
  ## getSuspendProcesses
  ## <p>Suspends the specified automatic scaling processes, or all processes, for the specified Auto Scaling group.</p> <p>If you suspend either the <code>Launch</code> or <code>Terminate</code> process types, it can prevent other process types from functioning properly.</p> <p>To resume processes that have been suspended, use <a>ResumeProcesses</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603934 = newJObject()
  if ScalingProcesses != nil:
    query_603934.add "ScalingProcesses", ScalingProcesses
  add(query_603934, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_603934, "Action", newJString(Action))
  add(query_603934, "Version", newJString(Version))
  result = call_603933.call(nil, query_603934, nil, nil, nil)

var getSuspendProcesses* = Call_GetSuspendProcesses_603918(
    name: "getSuspendProcesses", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=SuspendProcesses",
    validator: validate_GetSuspendProcesses_603919, base: "/",
    url: url_GetSuspendProcesses_603920, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostTerminateInstanceInAutoScalingGroup_603970 = ref object of OpenApiRestCall_601389
proc url_PostTerminateInstanceInAutoScalingGroup_603972(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostTerminateInstanceInAutoScalingGroup_603971(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Terminates the specified instance and optionally adjusts the desired group size.</p> <p>This call simply makes a termination request. The instance is not terminated immediately.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603973 = query.getOrDefault("Action")
  valid_603973 = validateParameter(valid_603973, JString, required = true, default = newJString(
      "TerminateInstanceInAutoScalingGroup"))
  if valid_603973 != nil:
    section.add "Action", valid_603973
  var valid_603974 = query.getOrDefault("Version")
  valid_603974 = validateParameter(valid_603974, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603974 != nil:
    section.add "Version", valid_603974
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603975 = header.getOrDefault("X-Amz-Signature")
  valid_603975 = validateParameter(valid_603975, JString, required = false,
                                 default = nil)
  if valid_603975 != nil:
    section.add "X-Amz-Signature", valid_603975
  var valid_603976 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603976 = validateParameter(valid_603976, JString, required = false,
                                 default = nil)
  if valid_603976 != nil:
    section.add "X-Amz-Content-Sha256", valid_603976
  var valid_603977 = header.getOrDefault("X-Amz-Date")
  valid_603977 = validateParameter(valid_603977, JString, required = false,
                                 default = nil)
  if valid_603977 != nil:
    section.add "X-Amz-Date", valid_603977
  var valid_603978 = header.getOrDefault("X-Amz-Credential")
  valid_603978 = validateParameter(valid_603978, JString, required = false,
                                 default = nil)
  if valid_603978 != nil:
    section.add "X-Amz-Credential", valid_603978
  var valid_603979 = header.getOrDefault("X-Amz-Security-Token")
  valid_603979 = validateParameter(valid_603979, JString, required = false,
                                 default = nil)
  if valid_603979 != nil:
    section.add "X-Amz-Security-Token", valid_603979
  var valid_603980 = header.getOrDefault("X-Amz-Algorithm")
  valid_603980 = validateParameter(valid_603980, JString, required = false,
                                 default = nil)
  if valid_603980 != nil:
    section.add "X-Amz-Algorithm", valid_603980
  var valid_603981 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603981 = validateParameter(valid_603981, JString, required = false,
                                 default = nil)
  if valid_603981 != nil:
    section.add "X-Amz-SignedHeaders", valid_603981
  result.add "header", section
  ## parameters in `formData` object:
  ##   ShouldDecrementDesiredCapacity: JBool (required)
  ##                                 : Indicates whether terminating the instance also decrements the size of the Auto Scaling group.
  ##   InstanceId: JString (required)
  ##             : The ID of the instance.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ShouldDecrementDesiredCapacity` field"
  var valid_603982 = formData.getOrDefault("ShouldDecrementDesiredCapacity")
  valid_603982 = validateParameter(valid_603982, JBool, required = true, default = nil)
  if valid_603982 != nil:
    section.add "ShouldDecrementDesiredCapacity", valid_603982
  var valid_603983 = formData.getOrDefault("InstanceId")
  valid_603983 = validateParameter(valid_603983, JString, required = true,
                                 default = nil)
  if valid_603983 != nil:
    section.add "InstanceId", valid_603983
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603984: Call_PostTerminateInstanceInAutoScalingGroup_603970;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Terminates the specified instance and optionally adjusts the desired group size.</p> <p>This call simply makes a termination request. The instance is not terminated immediately.</p>
  ## 
  let valid = call_603984.validator(path, query, header, formData, body)
  let scheme = call_603984.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603984.url(scheme.get, call_603984.host, call_603984.base,
                         call_603984.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603984, url, valid)

proc call*(call_603985: Call_PostTerminateInstanceInAutoScalingGroup_603970;
          ShouldDecrementDesiredCapacity: bool; InstanceId: string;
          Action: string = "TerminateInstanceInAutoScalingGroup";
          Version: string = "2011-01-01"): Recallable =
  ## postTerminateInstanceInAutoScalingGroup
  ## <p>Terminates the specified instance and optionally adjusts the desired group size.</p> <p>This call simply makes a termination request. The instance is not terminated immediately.</p>
  ##   ShouldDecrementDesiredCapacity: bool (required)
  ##                                 : Indicates whether terminating the instance also decrements the size of the Auto Scaling group.
  ##   InstanceId: string (required)
  ##             : The ID of the instance.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603986 = newJObject()
  var formData_603987 = newJObject()
  add(formData_603987, "ShouldDecrementDesiredCapacity",
      newJBool(ShouldDecrementDesiredCapacity))
  add(formData_603987, "InstanceId", newJString(InstanceId))
  add(query_603986, "Action", newJString(Action))
  add(query_603986, "Version", newJString(Version))
  result = call_603985.call(nil, query_603986, nil, formData_603987, nil)

var postTerminateInstanceInAutoScalingGroup* = Call_PostTerminateInstanceInAutoScalingGroup_603970(
    name: "postTerminateInstanceInAutoScalingGroup", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=TerminateInstanceInAutoScalingGroup",
    validator: validate_PostTerminateInstanceInAutoScalingGroup_603971, base: "/",
    url: url_PostTerminateInstanceInAutoScalingGroup_603972,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetTerminateInstanceInAutoScalingGroup_603953 = ref object of OpenApiRestCall_601389
proc url_GetTerminateInstanceInAutoScalingGroup_603955(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetTerminateInstanceInAutoScalingGroup_603954(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Terminates the specified instance and optionally adjusts the desired group size.</p> <p>This call simply makes a termination request. The instance is not terminated immediately.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ShouldDecrementDesiredCapacity: JBool (required)
  ##                                 : Indicates whether terminating the instance also decrements the size of the Auto Scaling group.
  ##   InstanceId: JString (required)
  ##             : The ID of the instance.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ShouldDecrementDesiredCapacity` field"
  var valid_603956 = query.getOrDefault("ShouldDecrementDesiredCapacity")
  valid_603956 = validateParameter(valid_603956, JBool, required = true, default = nil)
  if valid_603956 != nil:
    section.add "ShouldDecrementDesiredCapacity", valid_603956
  var valid_603957 = query.getOrDefault("InstanceId")
  valid_603957 = validateParameter(valid_603957, JString, required = true,
                                 default = nil)
  if valid_603957 != nil:
    section.add "InstanceId", valid_603957
  var valid_603958 = query.getOrDefault("Action")
  valid_603958 = validateParameter(valid_603958, JString, required = true, default = newJString(
      "TerminateInstanceInAutoScalingGroup"))
  if valid_603958 != nil:
    section.add "Action", valid_603958
  var valid_603959 = query.getOrDefault("Version")
  valid_603959 = validateParameter(valid_603959, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_603959 != nil:
    section.add "Version", valid_603959
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603960 = header.getOrDefault("X-Amz-Signature")
  valid_603960 = validateParameter(valid_603960, JString, required = false,
                                 default = nil)
  if valid_603960 != nil:
    section.add "X-Amz-Signature", valid_603960
  var valid_603961 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603961 = validateParameter(valid_603961, JString, required = false,
                                 default = nil)
  if valid_603961 != nil:
    section.add "X-Amz-Content-Sha256", valid_603961
  var valid_603962 = header.getOrDefault("X-Amz-Date")
  valid_603962 = validateParameter(valid_603962, JString, required = false,
                                 default = nil)
  if valid_603962 != nil:
    section.add "X-Amz-Date", valid_603962
  var valid_603963 = header.getOrDefault("X-Amz-Credential")
  valid_603963 = validateParameter(valid_603963, JString, required = false,
                                 default = nil)
  if valid_603963 != nil:
    section.add "X-Amz-Credential", valid_603963
  var valid_603964 = header.getOrDefault("X-Amz-Security-Token")
  valid_603964 = validateParameter(valid_603964, JString, required = false,
                                 default = nil)
  if valid_603964 != nil:
    section.add "X-Amz-Security-Token", valid_603964
  var valid_603965 = header.getOrDefault("X-Amz-Algorithm")
  valid_603965 = validateParameter(valid_603965, JString, required = false,
                                 default = nil)
  if valid_603965 != nil:
    section.add "X-Amz-Algorithm", valid_603965
  var valid_603966 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603966 = validateParameter(valid_603966, JString, required = false,
                                 default = nil)
  if valid_603966 != nil:
    section.add "X-Amz-SignedHeaders", valid_603966
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603967: Call_GetTerminateInstanceInAutoScalingGroup_603953;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Terminates the specified instance and optionally adjusts the desired group size.</p> <p>This call simply makes a termination request. The instance is not terminated immediately.</p>
  ## 
  let valid = call_603967.validator(path, query, header, formData, body)
  let scheme = call_603967.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603967.url(scheme.get, call_603967.host, call_603967.base,
                         call_603967.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603967, url, valid)

proc call*(call_603968: Call_GetTerminateInstanceInAutoScalingGroup_603953;
          ShouldDecrementDesiredCapacity: bool; InstanceId: string;
          Action: string = "TerminateInstanceInAutoScalingGroup";
          Version: string = "2011-01-01"): Recallable =
  ## getTerminateInstanceInAutoScalingGroup
  ## <p>Terminates the specified instance and optionally adjusts the desired group size.</p> <p>This call simply makes a termination request. The instance is not terminated immediately.</p>
  ##   ShouldDecrementDesiredCapacity: bool (required)
  ##                                 : Indicates whether terminating the instance also decrements the size of the Auto Scaling group.
  ##   InstanceId: string (required)
  ##             : The ID of the instance.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603969 = newJObject()
  add(query_603969, "ShouldDecrementDesiredCapacity",
      newJBool(ShouldDecrementDesiredCapacity))
  add(query_603969, "InstanceId", newJString(InstanceId))
  add(query_603969, "Action", newJString(Action))
  add(query_603969, "Version", newJString(Version))
  result = call_603968.call(nil, query_603969, nil, nil, nil)

var getTerminateInstanceInAutoScalingGroup* = Call_GetTerminateInstanceInAutoScalingGroup_603953(
    name: "getTerminateInstanceInAutoScalingGroup", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=TerminateInstanceInAutoScalingGroup",
    validator: validate_GetTerminateInstanceInAutoScalingGroup_603954, base: "/",
    url: url_GetTerminateInstanceInAutoScalingGroup_603955,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateAutoScalingGroup_604023 = ref object of OpenApiRestCall_601389
proc url_PostUpdateAutoScalingGroup_604025(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateAutoScalingGroup_604024(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the configuration for the specified Auto Scaling group.</p> <p>To update an Auto Scaling group, specify the name of the group and the parameter that you want to change. Any parameters that you don't specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. </p> <p>If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.</p> <p>Note the following about changing <code>DesiredCapacity</code>, <code>MaxSize</code>, or <code>MinSize</code>:</p> <ul> <li> <p>If a scale-in event occurs as a result of a new <code>DesiredCapacity</code> value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.</p> </li> <li> <p>If you specify a new value for <code>MinSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MinSize</code> is larger than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MinSize</code> value.</p> </li> <li> <p>If you specify a new value for <code>MaxSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MaxSize</code> is smaller than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MaxSize</code> value.</p> </li> </ul> <p>To see which parameters have been set, use <a>DescribeAutoScalingGroups</a>. You can also view the scaling policies for an Auto Scaling group using <a>DescribePolicies</a>. If the group has scaling policies, you can update them using <a>PutScalingPolicy</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604026 = query.getOrDefault("Action")
  valid_604026 = validateParameter(valid_604026, JString, required = true,
                                 default = newJString("UpdateAutoScalingGroup"))
  if valid_604026 != nil:
    section.add "Action", valid_604026
  var valid_604027 = query.getOrDefault("Version")
  valid_604027 = validateParameter(valid_604027, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604027 != nil:
    section.add "Version", valid_604027
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_604028 = header.getOrDefault("X-Amz-Signature")
  valid_604028 = validateParameter(valid_604028, JString, required = false,
                                 default = nil)
  if valid_604028 != nil:
    section.add "X-Amz-Signature", valid_604028
  var valid_604029 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604029 = validateParameter(valid_604029, JString, required = false,
                                 default = nil)
  if valid_604029 != nil:
    section.add "X-Amz-Content-Sha256", valid_604029
  var valid_604030 = header.getOrDefault("X-Amz-Date")
  valid_604030 = validateParameter(valid_604030, JString, required = false,
                                 default = nil)
  if valid_604030 != nil:
    section.add "X-Amz-Date", valid_604030
  var valid_604031 = header.getOrDefault("X-Amz-Credential")
  valid_604031 = validateParameter(valid_604031, JString, required = false,
                                 default = nil)
  if valid_604031 != nil:
    section.add "X-Amz-Credential", valid_604031
  var valid_604032 = header.getOrDefault("X-Amz-Security-Token")
  valid_604032 = validateParameter(valid_604032, JString, required = false,
                                 default = nil)
  if valid_604032 != nil:
    section.add "X-Amz-Security-Token", valid_604032
  var valid_604033 = header.getOrDefault("X-Amz-Algorithm")
  valid_604033 = validateParameter(valid_604033, JString, required = false,
                                 default = nil)
  if valid_604033 != nil:
    section.add "X-Amz-Algorithm", valid_604033
  var valid_604034 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604034 = validateParameter(valid_604034, JString, required = false,
                                 default = nil)
  if valid_604034 != nil:
    section.add "X-Amz-SignedHeaders", valid_604034
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   MinSize: JInt
  ##          : The minimum size of the Auto Scaling group.
  ##   MixedInstancesPolicy.InstancesDistribution: JString
  ##                                             : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified, the value for each parameter in <code>InstancesDistribution</code> uses a default value.</p>
  ##   DesiredCapacity: JInt
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group.
  ##   DefaultCooldown: JInt
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>. This cooldown period is not used when a scaling-specific cooldown is specified.</p> <p>Cooldown periods are not supported for target tracking scaling policies, step scaling policies, or scheduled scaling. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   NewInstancesProtectedFromScaleIn: JBool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MaxInstanceLifetime: JInt
  ##                      : <p>The maximum amount of time, in seconds, that an instance can be in service.</p> <p>Valid Range: Minimum value of 604800.</p>
  ##   TerminationPolicies: JArray
  ##                      : <p>A standalone termination policy or a list of termination policies used to select the instance to terminate. The policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AvailabilityZones: JArray
  ##                    : One or more Availability Zones for the group.
  ##   LaunchTemplate.Version: JString
  ##                         : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   HealthCheckType: JString
  ##                  : The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.
  ##   PlacementGroup: JString
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   LaunchTemplate.LaunchTemplateName: JString
  ##                                    : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   LaunchTemplate.LaunchTemplateId: JString
  ##                                  : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  ##   MaxSize: JInt
  ##          : The maximum size of the Auto Scaling group.
  ##   HealthCheckGracePeriod: JInt
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   ServiceLinkedRoleARN: JString
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   LaunchConfigurationName: JString
  ##                          : The name of the launch configuration. If you specify <code>LaunchConfigurationName</code> in your update request, you can't specify <code>LaunchTemplate</code> or <code>MixedInstancesPolicy</code>.
  ##   MixedInstancesPolicy.LaunchTemplate: JString
  ##                                      : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   VPCZoneIdentifier: JString
  ##                    : <p>A comma-separated list of subnet IDs for virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_604035 = formData.getOrDefault("AutoScalingGroupName")
  valid_604035 = validateParameter(valid_604035, JString, required = true,
                                 default = nil)
  if valid_604035 != nil:
    section.add "AutoScalingGroupName", valid_604035
  var valid_604036 = formData.getOrDefault("MinSize")
  valid_604036 = validateParameter(valid_604036, JInt, required = false, default = nil)
  if valid_604036 != nil:
    section.add "MinSize", valid_604036
  var valid_604037 = formData.getOrDefault("MixedInstancesPolicy.InstancesDistribution")
  valid_604037 = validateParameter(valid_604037, JString, required = false,
                                 default = nil)
  if valid_604037 != nil:
    section.add "MixedInstancesPolicy.InstancesDistribution", valid_604037
  var valid_604038 = formData.getOrDefault("DesiredCapacity")
  valid_604038 = validateParameter(valid_604038, JInt, required = false, default = nil)
  if valid_604038 != nil:
    section.add "DesiredCapacity", valid_604038
  var valid_604039 = formData.getOrDefault("DefaultCooldown")
  valid_604039 = validateParameter(valid_604039, JInt, required = false, default = nil)
  if valid_604039 != nil:
    section.add "DefaultCooldown", valid_604039
  var valid_604040 = formData.getOrDefault("NewInstancesProtectedFromScaleIn")
  valid_604040 = validateParameter(valid_604040, JBool, required = false, default = nil)
  if valid_604040 != nil:
    section.add "NewInstancesProtectedFromScaleIn", valid_604040
  var valid_604041 = formData.getOrDefault("MaxInstanceLifetime")
  valid_604041 = validateParameter(valid_604041, JInt, required = false, default = nil)
  if valid_604041 != nil:
    section.add "MaxInstanceLifetime", valid_604041
  var valid_604042 = formData.getOrDefault("TerminationPolicies")
  valid_604042 = validateParameter(valid_604042, JArray, required = false,
                                 default = nil)
  if valid_604042 != nil:
    section.add "TerminationPolicies", valid_604042
  var valid_604043 = formData.getOrDefault("AvailabilityZones")
  valid_604043 = validateParameter(valid_604043, JArray, required = false,
                                 default = nil)
  if valid_604043 != nil:
    section.add "AvailabilityZones", valid_604043
  var valid_604044 = formData.getOrDefault("LaunchTemplate.Version")
  valid_604044 = validateParameter(valid_604044, JString, required = false,
                                 default = nil)
  if valid_604044 != nil:
    section.add "LaunchTemplate.Version", valid_604044
  var valid_604045 = formData.getOrDefault("HealthCheckType")
  valid_604045 = validateParameter(valid_604045, JString, required = false,
                                 default = nil)
  if valid_604045 != nil:
    section.add "HealthCheckType", valid_604045
  var valid_604046 = formData.getOrDefault("PlacementGroup")
  valid_604046 = validateParameter(valid_604046, JString, required = false,
                                 default = nil)
  if valid_604046 != nil:
    section.add "PlacementGroup", valid_604046
  var valid_604047 = formData.getOrDefault("LaunchTemplate.LaunchTemplateName")
  valid_604047 = validateParameter(valid_604047, JString, required = false,
                                 default = nil)
  if valid_604047 != nil:
    section.add "LaunchTemplate.LaunchTemplateName", valid_604047
  var valid_604048 = formData.getOrDefault("LaunchTemplate.LaunchTemplateId")
  valid_604048 = validateParameter(valid_604048, JString, required = false,
                                 default = nil)
  if valid_604048 != nil:
    section.add "LaunchTemplate.LaunchTemplateId", valid_604048
  var valid_604049 = formData.getOrDefault("MaxSize")
  valid_604049 = validateParameter(valid_604049, JInt, required = false, default = nil)
  if valid_604049 != nil:
    section.add "MaxSize", valid_604049
  var valid_604050 = formData.getOrDefault("HealthCheckGracePeriod")
  valid_604050 = validateParameter(valid_604050, JInt, required = false, default = nil)
  if valid_604050 != nil:
    section.add "HealthCheckGracePeriod", valid_604050
  var valid_604051 = formData.getOrDefault("ServiceLinkedRoleARN")
  valid_604051 = validateParameter(valid_604051, JString, required = false,
                                 default = nil)
  if valid_604051 != nil:
    section.add "ServiceLinkedRoleARN", valid_604051
  var valid_604052 = formData.getOrDefault("LaunchConfigurationName")
  valid_604052 = validateParameter(valid_604052, JString, required = false,
                                 default = nil)
  if valid_604052 != nil:
    section.add "LaunchConfigurationName", valid_604052
  var valid_604053 = formData.getOrDefault("MixedInstancesPolicy.LaunchTemplate")
  valid_604053 = validateParameter(valid_604053, JString, required = false,
                                 default = nil)
  if valid_604053 != nil:
    section.add "MixedInstancesPolicy.LaunchTemplate", valid_604053
  var valid_604054 = formData.getOrDefault("VPCZoneIdentifier")
  valid_604054 = validateParameter(valid_604054, JString, required = false,
                                 default = nil)
  if valid_604054 != nil:
    section.add "VPCZoneIdentifier", valid_604054
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604055: Call_PostUpdateAutoScalingGroup_604023; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the configuration for the specified Auto Scaling group.</p> <p>To update an Auto Scaling group, specify the name of the group and the parameter that you want to change. Any parameters that you don't specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. </p> <p>If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.</p> <p>Note the following about changing <code>DesiredCapacity</code>, <code>MaxSize</code>, or <code>MinSize</code>:</p> <ul> <li> <p>If a scale-in event occurs as a result of a new <code>DesiredCapacity</code> value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.</p> </li> <li> <p>If you specify a new value for <code>MinSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MinSize</code> is larger than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MinSize</code> value.</p> </li> <li> <p>If you specify a new value for <code>MaxSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MaxSize</code> is smaller than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MaxSize</code> value.</p> </li> </ul> <p>To see which parameters have been set, use <a>DescribeAutoScalingGroups</a>. You can also view the scaling policies for an Auto Scaling group using <a>DescribePolicies</a>. If the group has scaling policies, you can update them using <a>PutScalingPolicy</a>.</p>
  ## 
  let valid = call_604055.validator(path, query, header, formData, body)
  let scheme = call_604055.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604055.url(scheme.get, call_604055.host, call_604055.base,
                         call_604055.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_604055, url, valid)

proc call*(call_604056: Call_PostUpdateAutoScalingGroup_604023;
          AutoScalingGroupName: string; MinSize: int = 0;
          MixedInstancesPolicyInstancesDistribution: string = "";
          DesiredCapacity: int = 0; DefaultCooldown: int = 0;
          NewInstancesProtectedFromScaleIn: bool = false;
          MaxInstanceLifetime: int = 0; TerminationPolicies: JsonNode = nil;
          AvailabilityZones: JsonNode = nil; LaunchTemplateVersion: string = "";
          HealthCheckType: string = ""; PlacementGroup: string = "";
          LaunchTemplateLaunchTemplateName: string = "";
          Action: string = "UpdateAutoScalingGroup";
          LaunchTemplateLaunchTemplateId: string = ""; MaxSize: int = 0;
          HealthCheckGracePeriod: int = 0; ServiceLinkedRoleARN: string = "";
          LaunchConfigurationName: string = ""; Version: string = "2011-01-01";
          MixedInstancesPolicyLaunchTemplate: string = "";
          VPCZoneIdentifier: string = ""): Recallable =
  ## postUpdateAutoScalingGroup
  ## <p>Updates the configuration for the specified Auto Scaling group.</p> <p>To update an Auto Scaling group, specify the name of the group and the parameter that you want to change. Any parameters that you don't specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. </p> <p>If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.</p> <p>Note the following about changing <code>DesiredCapacity</code>, <code>MaxSize</code>, or <code>MinSize</code>:</p> <ul> <li> <p>If a scale-in event occurs as a result of a new <code>DesiredCapacity</code> value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.</p> </li> <li> <p>If you specify a new value for <code>MinSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MinSize</code> is larger than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MinSize</code> value.</p> </li> <li> <p>If you specify a new value for <code>MaxSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MaxSize</code> is smaller than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MaxSize</code> value.</p> </li> </ul> <p>To see which parameters have been set, use <a>DescribeAutoScalingGroups</a>. You can also view the scaling policies for an Auto Scaling group using <a>DescribePolicies</a>. If the group has scaling policies, you can update them using <a>PutScalingPolicy</a>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   MinSize: int
  ##          : The minimum size of the Auto Scaling group.
  ##   MixedInstancesPolicyInstancesDistribution: string
  ##                                            : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified, the value for each parameter in <code>InstancesDistribution</code> uses a default value.</p>
  ##   DesiredCapacity: int
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group.
  ##   DefaultCooldown: int
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>. This cooldown period is not used when a scaling-specific cooldown is specified.</p> <p>Cooldown periods are not supported for target tracking scaling policies, step scaling policies, or scheduled scaling. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   NewInstancesProtectedFromScaleIn: bool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MaxInstanceLifetime: int
  ##                      : <p>The maximum amount of time, in seconds, that an instance can be in service.</p> <p>Valid Range: Minimum value of 604800.</p>
  ##   TerminationPolicies: JArray
  ##                      : <p>A standalone termination policy or a list of termination policies used to select the instance to terminate. The policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AvailabilityZones: JArray
  ##                    : One or more Availability Zones for the group.
  ##   LaunchTemplateVersion: string
  ##                        : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   HealthCheckType: string
  ##                  : The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.
  ##   PlacementGroup: string
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   LaunchTemplateLaunchTemplateName: string
  ##                                   : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   Action: string (required)
  ##   LaunchTemplateLaunchTemplateId: string
  ##                                 : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  ##   MaxSize: int
  ##          : The maximum size of the Auto Scaling group.
  ##   HealthCheckGracePeriod: int
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   ServiceLinkedRoleARN: string
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   LaunchConfigurationName: string
  ##                          : The name of the launch configuration. If you specify <code>LaunchConfigurationName</code> in your update request, you can't specify <code>LaunchTemplate</code> or <code>MixedInstancesPolicy</code>.
  ##   Version: string (required)
  ##   MixedInstancesPolicyLaunchTemplate: string
  ##                                     : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   VPCZoneIdentifier: string
  ##                    : <p>A comma-separated list of subnet IDs for virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p>
  var query_604057 = newJObject()
  var formData_604058 = newJObject()
  add(formData_604058, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_604058, "MinSize", newJInt(MinSize))
  add(formData_604058, "MixedInstancesPolicy.InstancesDistribution",
      newJString(MixedInstancesPolicyInstancesDistribution))
  add(formData_604058, "DesiredCapacity", newJInt(DesiredCapacity))
  add(formData_604058, "DefaultCooldown", newJInt(DefaultCooldown))
  add(formData_604058, "NewInstancesProtectedFromScaleIn",
      newJBool(NewInstancesProtectedFromScaleIn))
  add(formData_604058, "MaxInstanceLifetime", newJInt(MaxInstanceLifetime))
  if TerminationPolicies != nil:
    formData_604058.add "TerminationPolicies", TerminationPolicies
  if AvailabilityZones != nil:
    formData_604058.add "AvailabilityZones", AvailabilityZones
  add(formData_604058, "LaunchTemplate.Version", newJString(LaunchTemplateVersion))
  add(formData_604058, "HealthCheckType", newJString(HealthCheckType))
  add(formData_604058, "PlacementGroup", newJString(PlacementGroup))
  add(formData_604058, "LaunchTemplate.LaunchTemplateName",
      newJString(LaunchTemplateLaunchTemplateName))
  add(query_604057, "Action", newJString(Action))
  add(formData_604058, "LaunchTemplate.LaunchTemplateId",
      newJString(LaunchTemplateLaunchTemplateId))
  add(formData_604058, "MaxSize", newJInt(MaxSize))
  add(formData_604058, "HealthCheckGracePeriod", newJInt(HealthCheckGracePeriod))
  add(formData_604058, "ServiceLinkedRoleARN", newJString(ServiceLinkedRoleARN))
  add(formData_604058, "LaunchConfigurationName",
      newJString(LaunchConfigurationName))
  add(query_604057, "Version", newJString(Version))
  add(formData_604058, "MixedInstancesPolicy.LaunchTemplate",
      newJString(MixedInstancesPolicyLaunchTemplate))
  add(formData_604058, "VPCZoneIdentifier", newJString(VPCZoneIdentifier))
  result = call_604056.call(nil, query_604057, nil, formData_604058, nil)

var postUpdateAutoScalingGroup* = Call_PostUpdateAutoScalingGroup_604023(
    name: "postUpdateAutoScalingGroup", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=UpdateAutoScalingGroup",
    validator: validate_PostUpdateAutoScalingGroup_604024, base: "/",
    url: url_PostUpdateAutoScalingGroup_604025,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateAutoScalingGroup_603988 = ref object of OpenApiRestCall_601389
proc url_GetUpdateAutoScalingGroup_603990(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateAutoScalingGroup_603989(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the configuration for the specified Auto Scaling group.</p> <p>To update an Auto Scaling group, specify the name of the group and the parameter that you want to change. Any parameters that you don't specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. </p> <p>If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.</p> <p>Note the following about changing <code>DesiredCapacity</code>, <code>MaxSize</code>, or <code>MinSize</code>:</p> <ul> <li> <p>If a scale-in event occurs as a result of a new <code>DesiredCapacity</code> value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.</p> </li> <li> <p>If you specify a new value for <code>MinSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MinSize</code> is larger than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MinSize</code> value.</p> </li> <li> <p>If you specify a new value for <code>MaxSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MaxSize</code> is smaller than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MaxSize</code> value.</p> </li> </ul> <p>To see which parameters have been set, use <a>DescribeAutoScalingGroups</a>. You can also view the scaling policies for an Auto Scaling group using <a>DescribePolicies</a>. If the group has scaling policies, you can update them using <a>PutScalingPolicy</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MixedInstancesPolicy.InstancesDistribution: JString
  ##                                             : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified, the value for each parameter in <code>InstancesDistribution</code> uses a default value.</p>
  ##   LaunchTemplate.LaunchTemplateName: JString
  ##                                    : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   MaxSize: JInt
  ##          : The maximum size of the Auto Scaling group.
  ##   LaunchConfigurationName: JString
  ##                          : The name of the launch configuration. If you specify <code>LaunchConfigurationName</code> in your update request, you can't specify <code>LaunchTemplate</code> or <code>MixedInstancesPolicy</code>.
  ##   HealthCheckGracePeriod: JInt
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   MixedInstancesPolicy.LaunchTemplate: JString
  ##                                      : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   NewInstancesProtectedFromScaleIn: JBool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AvailabilityZones: JArray
  ##                    : One or more Availability Zones for the group.
  ##   HealthCheckType: JString
  ##                  : The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.
  ##   TerminationPolicies: JArray
  ##                      : <p>A standalone termination policy or a list of termination policies used to select the instance to terminate. The policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   DesiredCapacity: JInt
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   DefaultCooldown: JInt
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>. This cooldown period is not used when a scaling-specific cooldown is specified.</p> <p>Cooldown periods are not supported for target tracking scaling policies, step scaling policies, or scheduled scaling. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: JString (required)
  ##   MinSize: JInt
  ##          : The minimum size of the Auto Scaling group.
  ##   PlacementGroup: JString
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   LaunchTemplate.Version: JString
  ##                         : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   MaxInstanceLifetime: JInt
  ##                      : <p>The maximum amount of time, in seconds, that an instance can be in service.</p> <p>Valid Range: Minimum value of 604800.</p>
  ##   Version: JString (required)
  ##   VPCZoneIdentifier: JString
  ##                    : <p>A comma-separated list of subnet IDs for virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p>
  ##   ServiceLinkedRoleARN: JString
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   LaunchTemplate.LaunchTemplateId: JString
  ##                                  : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  section = newJObject()
  var valid_603991 = query.getOrDefault("MixedInstancesPolicy.InstancesDistribution")
  valid_603991 = validateParameter(valid_603991, JString, required = false,
                                 default = nil)
  if valid_603991 != nil:
    section.add "MixedInstancesPolicy.InstancesDistribution", valid_603991
  var valid_603992 = query.getOrDefault("LaunchTemplate.LaunchTemplateName")
  valid_603992 = validateParameter(valid_603992, JString, required = false,
                                 default = nil)
  if valid_603992 != nil:
    section.add "LaunchTemplate.LaunchTemplateName", valid_603992
  var valid_603993 = query.getOrDefault("MaxSize")
  valid_603993 = validateParameter(valid_603993, JInt, required = false, default = nil)
  if valid_603993 != nil:
    section.add "MaxSize", valid_603993
  var valid_603994 = query.getOrDefault("LaunchConfigurationName")
  valid_603994 = validateParameter(valid_603994, JString, required = false,
                                 default = nil)
  if valid_603994 != nil:
    section.add "LaunchConfigurationName", valid_603994
  var valid_603995 = query.getOrDefault("HealthCheckGracePeriod")
  valid_603995 = validateParameter(valid_603995, JInt, required = false, default = nil)
  if valid_603995 != nil:
    section.add "HealthCheckGracePeriod", valid_603995
  var valid_603996 = query.getOrDefault("MixedInstancesPolicy.LaunchTemplate")
  valid_603996 = validateParameter(valid_603996, JString, required = false,
                                 default = nil)
  if valid_603996 != nil:
    section.add "MixedInstancesPolicy.LaunchTemplate", valid_603996
  var valid_603997 = query.getOrDefault("NewInstancesProtectedFromScaleIn")
  valid_603997 = validateParameter(valid_603997, JBool, required = false, default = nil)
  if valid_603997 != nil:
    section.add "NewInstancesProtectedFromScaleIn", valid_603997
  var valid_603998 = query.getOrDefault("AvailabilityZones")
  valid_603998 = validateParameter(valid_603998, JArray, required = false,
                                 default = nil)
  if valid_603998 != nil:
    section.add "AvailabilityZones", valid_603998
  var valid_603999 = query.getOrDefault("HealthCheckType")
  valid_603999 = validateParameter(valid_603999, JString, required = false,
                                 default = nil)
  if valid_603999 != nil:
    section.add "HealthCheckType", valid_603999
  var valid_604000 = query.getOrDefault("TerminationPolicies")
  valid_604000 = validateParameter(valid_604000, JArray, required = false,
                                 default = nil)
  if valid_604000 != nil:
    section.add "TerminationPolicies", valid_604000
  var valid_604001 = query.getOrDefault("DesiredCapacity")
  valid_604001 = validateParameter(valid_604001, JInt, required = false, default = nil)
  if valid_604001 != nil:
    section.add "DesiredCapacity", valid_604001
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_604002 = query.getOrDefault("AutoScalingGroupName")
  valid_604002 = validateParameter(valid_604002, JString, required = true,
                                 default = nil)
  if valid_604002 != nil:
    section.add "AutoScalingGroupName", valid_604002
  var valid_604003 = query.getOrDefault("DefaultCooldown")
  valid_604003 = validateParameter(valid_604003, JInt, required = false, default = nil)
  if valid_604003 != nil:
    section.add "DefaultCooldown", valid_604003
  var valid_604004 = query.getOrDefault("Action")
  valid_604004 = validateParameter(valid_604004, JString, required = true,
                                 default = newJString("UpdateAutoScalingGroup"))
  if valid_604004 != nil:
    section.add "Action", valid_604004
  var valid_604005 = query.getOrDefault("MinSize")
  valid_604005 = validateParameter(valid_604005, JInt, required = false, default = nil)
  if valid_604005 != nil:
    section.add "MinSize", valid_604005
  var valid_604006 = query.getOrDefault("PlacementGroup")
  valid_604006 = validateParameter(valid_604006, JString, required = false,
                                 default = nil)
  if valid_604006 != nil:
    section.add "PlacementGroup", valid_604006
  var valid_604007 = query.getOrDefault("LaunchTemplate.Version")
  valid_604007 = validateParameter(valid_604007, JString, required = false,
                                 default = nil)
  if valid_604007 != nil:
    section.add "LaunchTemplate.Version", valid_604007
  var valid_604008 = query.getOrDefault("MaxInstanceLifetime")
  valid_604008 = validateParameter(valid_604008, JInt, required = false, default = nil)
  if valid_604008 != nil:
    section.add "MaxInstanceLifetime", valid_604008
  var valid_604009 = query.getOrDefault("Version")
  valid_604009 = validateParameter(valid_604009, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_604009 != nil:
    section.add "Version", valid_604009
  var valid_604010 = query.getOrDefault("VPCZoneIdentifier")
  valid_604010 = validateParameter(valid_604010, JString, required = false,
                                 default = nil)
  if valid_604010 != nil:
    section.add "VPCZoneIdentifier", valid_604010
  var valid_604011 = query.getOrDefault("ServiceLinkedRoleARN")
  valid_604011 = validateParameter(valid_604011, JString, required = false,
                                 default = nil)
  if valid_604011 != nil:
    section.add "ServiceLinkedRoleARN", valid_604011
  var valid_604012 = query.getOrDefault("LaunchTemplate.LaunchTemplateId")
  valid_604012 = validateParameter(valid_604012, JString, required = false,
                                 default = nil)
  if valid_604012 != nil:
    section.add "LaunchTemplate.LaunchTemplateId", valid_604012
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_604013 = header.getOrDefault("X-Amz-Signature")
  valid_604013 = validateParameter(valid_604013, JString, required = false,
                                 default = nil)
  if valid_604013 != nil:
    section.add "X-Amz-Signature", valid_604013
  var valid_604014 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604014 = validateParameter(valid_604014, JString, required = false,
                                 default = nil)
  if valid_604014 != nil:
    section.add "X-Amz-Content-Sha256", valid_604014
  var valid_604015 = header.getOrDefault("X-Amz-Date")
  valid_604015 = validateParameter(valid_604015, JString, required = false,
                                 default = nil)
  if valid_604015 != nil:
    section.add "X-Amz-Date", valid_604015
  var valid_604016 = header.getOrDefault("X-Amz-Credential")
  valid_604016 = validateParameter(valid_604016, JString, required = false,
                                 default = nil)
  if valid_604016 != nil:
    section.add "X-Amz-Credential", valid_604016
  var valid_604017 = header.getOrDefault("X-Amz-Security-Token")
  valid_604017 = validateParameter(valid_604017, JString, required = false,
                                 default = nil)
  if valid_604017 != nil:
    section.add "X-Amz-Security-Token", valid_604017
  var valid_604018 = header.getOrDefault("X-Amz-Algorithm")
  valid_604018 = validateParameter(valid_604018, JString, required = false,
                                 default = nil)
  if valid_604018 != nil:
    section.add "X-Amz-Algorithm", valid_604018
  var valid_604019 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604019 = validateParameter(valid_604019, JString, required = false,
                                 default = nil)
  if valid_604019 != nil:
    section.add "X-Amz-SignedHeaders", valid_604019
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604020: Call_GetUpdateAutoScalingGroup_603988; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the configuration for the specified Auto Scaling group.</p> <p>To update an Auto Scaling group, specify the name of the group and the parameter that you want to change. Any parameters that you don't specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. </p> <p>If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.</p> <p>Note the following about changing <code>DesiredCapacity</code>, <code>MaxSize</code>, or <code>MinSize</code>:</p> <ul> <li> <p>If a scale-in event occurs as a result of a new <code>DesiredCapacity</code> value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.</p> </li> <li> <p>If you specify a new value for <code>MinSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MinSize</code> is larger than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MinSize</code> value.</p> </li> <li> <p>If you specify a new value for <code>MaxSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MaxSize</code> is smaller than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MaxSize</code> value.</p> </li> </ul> <p>To see which parameters have been set, use <a>DescribeAutoScalingGroups</a>. You can also view the scaling policies for an Auto Scaling group using <a>DescribePolicies</a>. If the group has scaling policies, you can update them using <a>PutScalingPolicy</a>.</p>
  ## 
  let valid = call_604020.validator(path, query, header, formData, body)
  let scheme = call_604020.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604020.url(scheme.get, call_604020.host, call_604020.base,
                         call_604020.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_604020, url, valid)

proc call*(call_604021: Call_GetUpdateAutoScalingGroup_603988;
          AutoScalingGroupName: string;
          MixedInstancesPolicyInstancesDistribution: string = "";
          LaunchTemplateLaunchTemplateName: string = ""; MaxSize: int = 0;
          LaunchConfigurationName: string = ""; HealthCheckGracePeriod: int = 0;
          MixedInstancesPolicyLaunchTemplate: string = "";
          NewInstancesProtectedFromScaleIn: bool = false;
          AvailabilityZones: JsonNode = nil; HealthCheckType: string = "";
          TerminationPolicies: JsonNode = nil; DesiredCapacity: int = 0;
          DefaultCooldown: int = 0; Action: string = "UpdateAutoScalingGroup";
          MinSize: int = 0; PlacementGroup: string = "";
          LaunchTemplateVersion: string = ""; MaxInstanceLifetime: int = 0;
          Version: string = "2011-01-01"; VPCZoneIdentifier: string = "";
          ServiceLinkedRoleARN: string = "";
          LaunchTemplateLaunchTemplateId: string = ""): Recallable =
  ## getUpdateAutoScalingGroup
  ## <p>Updates the configuration for the specified Auto Scaling group.</p> <p>To update an Auto Scaling group, specify the name of the group and the parameter that you want to change. Any parameters that you don't specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. </p> <p>If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.</p> <p>Note the following about changing <code>DesiredCapacity</code>, <code>MaxSize</code>, or <code>MinSize</code>:</p> <ul> <li> <p>If a scale-in event occurs as a result of a new <code>DesiredCapacity</code> value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.</p> </li> <li> <p>If you specify a new value for <code>MinSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MinSize</code> is larger than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MinSize</code> value.</p> </li> <li> <p>If you specify a new value for <code>MaxSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MaxSize</code> is smaller than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MaxSize</code> value.</p> </li> </ul> <p>To see which parameters have been set, use <a>DescribeAutoScalingGroups</a>. You can also view the scaling policies for an Auto Scaling group using <a>DescribePolicies</a>. If the group has scaling policies, you can update them using <a>PutScalingPolicy</a>.</p>
  ##   MixedInstancesPolicyInstancesDistribution: string
  ##                                            : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified, the value for each parameter in <code>InstancesDistribution</code> uses a default value.</p>
  ##   LaunchTemplateLaunchTemplateName: string
  ##                                   : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   MaxSize: int
  ##          : The maximum size of the Auto Scaling group.
  ##   LaunchConfigurationName: string
  ##                          : The name of the launch configuration. If you specify <code>LaunchConfigurationName</code> in your update request, you can't specify <code>LaunchTemplate</code> or <code>MixedInstancesPolicy</code>.
  ##   HealthCheckGracePeriod: int
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   MixedInstancesPolicyLaunchTemplate: string
  ##                                     : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   NewInstancesProtectedFromScaleIn: bool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AvailabilityZones: JArray
  ##                    : One or more Availability Zones for the group.
  ##   HealthCheckType: string
  ##                  : The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.
  ##   TerminationPolicies: JArray
  ##                      : <p>A standalone termination policy or a list of termination policies used to select the instance to terminate. The policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   DesiredCapacity: int
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   DefaultCooldown: int
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>. This cooldown period is not used when a scaling-specific cooldown is specified.</p> <p>Cooldown periods are not supported for target tracking scaling policies, step scaling policies, or scheduled scaling. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   MinSize: int
  ##          : The minimum size of the Auto Scaling group.
  ##   PlacementGroup: string
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   LaunchTemplateVersion: string
  ##                        : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   MaxInstanceLifetime: int
  ##                      : <p>The maximum amount of time, in seconds, that an instance can be in service.</p> <p>Valid Range: Minimum value of 604800.</p>
  ##   Version: string (required)
  ##   VPCZoneIdentifier: string
  ##                    : <p>A comma-separated list of subnet IDs for virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p>
  ##   ServiceLinkedRoleARN: string
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   LaunchTemplateLaunchTemplateId: string
  ##                                 : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  var query_604022 = newJObject()
  add(query_604022, "MixedInstancesPolicy.InstancesDistribution",
      newJString(MixedInstancesPolicyInstancesDistribution))
  add(query_604022, "LaunchTemplate.LaunchTemplateName",
      newJString(LaunchTemplateLaunchTemplateName))
  add(query_604022, "MaxSize", newJInt(MaxSize))
  add(query_604022, "LaunchConfigurationName", newJString(LaunchConfigurationName))
  add(query_604022, "HealthCheckGracePeriod", newJInt(HealthCheckGracePeriod))
  add(query_604022, "MixedInstancesPolicy.LaunchTemplate",
      newJString(MixedInstancesPolicyLaunchTemplate))
  add(query_604022, "NewInstancesProtectedFromScaleIn",
      newJBool(NewInstancesProtectedFromScaleIn))
  if AvailabilityZones != nil:
    query_604022.add "AvailabilityZones", AvailabilityZones
  add(query_604022, "HealthCheckType", newJString(HealthCheckType))
  if TerminationPolicies != nil:
    query_604022.add "TerminationPolicies", TerminationPolicies
  add(query_604022, "DesiredCapacity", newJInt(DesiredCapacity))
  add(query_604022, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_604022, "DefaultCooldown", newJInt(DefaultCooldown))
  add(query_604022, "Action", newJString(Action))
  add(query_604022, "MinSize", newJInt(MinSize))
  add(query_604022, "PlacementGroup", newJString(PlacementGroup))
  add(query_604022, "LaunchTemplate.Version", newJString(LaunchTemplateVersion))
  add(query_604022, "MaxInstanceLifetime", newJInt(MaxInstanceLifetime))
  add(query_604022, "Version", newJString(Version))
  add(query_604022, "VPCZoneIdentifier", newJString(VPCZoneIdentifier))
  add(query_604022, "ServiceLinkedRoleARN", newJString(ServiceLinkedRoleARN))
  add(query_604022, "LaunchTemplate.LaunchTemplateId",
      newJString(LaunchTemplateLaunchTemplateId))
  result = call_604021.call(nil, query_604022, nil, nil, nil)

var getUpdateAutoScalingGroup* = Call_GetUpdateAutoScalingGroup_603988(
    name: "getUpdateAutoScalingGroup", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=UpdateAutoScalingGroup",
    validator: validate_GetUpdateAutoScalingGroup_603989, base: "/",
    url: url_GetUpdateAutoScalingGroup_603990,
    schemes: {Scheme.Https, Scheme.Http})
export
  rest

proc atozSign(recall: var Recallable; query: JsonNode; algo: SigningAlgo = SHA256) =
  let
    date = makeDateTime()
    access = os.getEnv("AWS_ACCESS_KEY_ID", "")
    secret = os.getEnv("AWS_SECRET_ACCESS_KEY", "")
    region = os.getEnv("AWS_REGION", "")
  assert secret != "", "need secret key in env"
  assert access != "", "need access key in env"
  assert region != "", "need region in env"
  var
    normal: PathNormal
    url = normalizeUrl(recall.url, query, normalize = normal)
    scheme = parseEnum[Scheme](url.scheme)
  assert scheme in awsServers, "unknown scheme `" & $scheme & "`"
  assert region in awsServers[scheme], "unknown region `" & region & "`"
  url.hostname = awsServers[scheme][region]
  case awsServiceName.toLowerAscii
  of "s3":
    normal = PathNormal.S3
  else:
    normal = PathNormal.Default
  recall.headers["Host"] = url.hostname
  recall.headers["X-Amz-Date"] = date
  let
    algo = SHA256
    scope = credentialScope(region = region, service = awsServiceName, date = date)
    request = canonicalRequest(recall.meth, $url, query, recall.headers, recall.body,
                             normalize = normal, digest = algo)
    sts = stringToSign(request.hash(algo), scope, date = date, digest = algo)
    signature = calculateSignature(secret = secret, date = date, region = region,
                                 service = awsServiceName, sts, digest = algo)
  var auth = $algo & " "
  auth &= "Credential=" & access / scope & ", "
  auth &= "SignedHeaders=" & recall.headers.signedHeaders & ", "
  auth &= "Signature=" & signature
  recall.headers["Authorization"] = auth
  recall.headers.del "Host"
  recall.url = $url

method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  let headers = massageHeaders(input.getOrDefault("header"))
  result = newRecallable(call, url, headers, input.getOrDefault("body").getStr)
  result.atozSign(input.getOrDefault("query"), SHA256)
