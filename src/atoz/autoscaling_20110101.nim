
import
  json, options, hashes, uri, tables, rest, os, uri, strutils, httpcore, sigv4

## auto-generated via openapi macro
## title: Auto Scaling
## version: 2011-01-01
## termsOfService: https://aws.amazon.com/service-terms/
## license:
##     name: Apache 2.0 License
##     url: http://www.apache.org/licenses/
## 
## <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch or terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks. Use this service with AWS Auto Scaling, Amazon CloudWatch, and Elastic Load Balancing.</p> <p>For more information, including information about granting IAM users required permissions for Amazon EC2 Auto Scaling actions, see the <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">Amazon EC2 Auto Scaling User Guide</a>.</p>
## 
## Amazon Web Services documentation
## https://docs.aws.amazon.com/autoscaling/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_593437 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_593437](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_593437): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    if js.kind notin {JString, JInt, JFloat, JNull, JBool}:
      return
    head = $js
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  awsServers = {Scheme.Http: {"ap-northeast-1": "autoscaling.ap-northeast-1.amazonaws.com", "ap-southeast-1": "autoscaling.ap-southeast-1.amazonaws.com",
                           "us-west-2": "autoscaling.us-west-2.amazonaws.com",
                           "eu-west-2": "autoscaling.eu-west-2.amazonaws.com", "ap-northeast-3": "autoscaling.ap-northeast-3.amazonaws.com", "eu-central-1": "autoscaling.eu-central-1.amazonaws.com",
                           "us-east-2": "autoscaling.us-east-2.amazonaws.com",
                           "us-east-1": "autoscaling.us-east-1.amazonaws.com", "cn-northwest-1": "autoscaling.cn-northwest-1.amazonaws.com.cn", "ap-south-1": "autoscaling.ap-south-1.amazonaws.com", "eu-north-1": "autoscaling.eu-north-1.amazonaws.com", "ap-northeast-2": "autoscaling.ap-northeast-2.amazonaws.com",
                           "us-west-1": "autoscaling.us-west-1.amazonaws.com", "us-gov-east-1": "autoscaling.us-gov-east-1.amazonaws.com",
                           "eu-west-3": "autoscaling.eu-west-3.amazonaws.com", "cn-north-1": "autoscaling.cn-north-1.amazonaws.com.cn",
                           "sa-east-1": "autoscaling.sa-east-1.amazonaws.com",
                           "eu-west-1": "autoscaling.eu-west-1.amazonaws.com", "us-gov-west-1": "autoscaling.us-gov-west-1.amazonaws.com", "ap-southeast-2": "autoscaling.ap-southeast-2.amazonaws.com", "ca-central-1": "autoscaling.ca-central-1.amazonaws.com"}.toTable, Scheme.Https: {
      "ap-northeast-1": "autoscaling.ap-northeast-1.amazonaws.com",
      "ap-southeast-1": "autoscaling.ap-southeast-1.amazonaws.com",
      "us-west-2": "autoscaling.us-west-2.amazonaws.com",
      "eu-west-2": "autoscaling.eu-west-2.amazonaws.com",
      "ap-northeast-3": "autoscaling.ap-northeast-3.amazonaws.com",
      "eu-central-1": "autoscaling.eu-central-1.amazonaws.com",
      "us-east-2": "autoscaling.us-east-2.amazonaws.com",
      "us-east-1": "autoscaling.us-east-1.amazonaws.com",
      "cn-northwest-1": "autoscaling.cn-northwest-1.amazonaws.com.cn",
      "ap-south-1": "autoscaling.ap-south-1.amazonaws.com",
      "eu-north-1": "autoscaling.eu-north-1.amazonaws.com",
      "ap-northeast-2": "autoscaling.ap-northeast-2.amazonaws.com",
      "us-west-1": "autoscaling.us-west-1.amazonaws.com",
      "us-gov-east-1": "autoscaling.us-gov-east-1.amazonaws.com",
      "eu-west-3": "autoscaling.eu-west-3.amazonaws.com",
      "cn-north-1": "autoscaling.cn-north-1.amazonaws.com.cn",
      "sa-east-1": "autoscaling.sa-east-1.amazonaws.com",
      "eu-west-1": "autoscaling.eu-west-1.amazonaws.com",
      "us-gov-west-1": "autoscaling.us-gov-west-1.amazonaws.com",
      "ap-southeast-2": "autoscaling.ap-southeast-2.amazonaws.com",
      "ca-central-1": "autoscaling.ca-central-1.amazonaws.com"}.toTable}.toTable
const
  awsServiceName = "autoscaling"
method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_PostAttachInstances_594046 = ref object of OpenApiRestCall_593437
proc url_PostAttachInstances_594048(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostAttachInstances_594047(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Attaches one or more EC2 instances to the specified Auto Scaling group.</p> <p>When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.</p> <p>If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html">Attach EC2 Instances to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594049 = query.getOrDefault("Action")
  valid_594049 = validateParameter(valid_594049, JString, required = true,
                                 default = newJString("AttachInstances"))
  if valid_594049 != nil:
    section.add "Action", valid_594049
  var valid_594050 = query.getOrDefault("Version")
  valid_594050 = validateParameter(valid_594050, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_594050 != nil:
    section.add "Version", valid_594050
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594051 = header.getOrDefault("X-Amz-Date")
  valid_594051 = validateParameter(valid_594051, JString, required = false,
                                 default = nil)
  if valid_594051 != nil:
    section.add "X-Amz-Date", valid_594051
  var valid_594052 = header.getOrDefault("X-Amz-Security-Token")
  valid_594052 = validateParameter(valid_594052, JString, required = false,
                                 default = nil)
  if valid_594052 != nil:
    section.add "X-Amz-Security-Token", valid_594052
  var valid_594053 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594053 = validateParameter(valid_594053, JString, required = false,
                                 default = nil)
  if valid_594053 != nil:
    section.add "X-Amz-Content-Sha256", valid_594053
  var valid_594054 = header.getOrDefault("X-Amz-Algorithm")
  valid_594054 = validateParameter(valid_594054, JString, required = false,
                                 default = nil)
  if valid_594054 != nil:
    section.add "X-Amz-Algorithm", valid_594054
  var valid_594055 = header.getOrDefault("X-Amz-Signature")
  valid_594055 = validateParameter(valid_594055, JString, required = false,
                                 default = nil)
  if valid_594055 != nil:
    section.add "X-Amz-Signature", valid_594055
  var valid_594056 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594056 = validateParameter(valid_594056, JString, required = false,
                                 default = nil)
  if valid_594056 != nil:
    section.add "X-Amz-SignedHeaders", valid_594056
  var valid_594057 = header.getOrDefault("X-Amz-Credential")
  valid_594057 = validateParameter(valid_594057, JString, required = false,
                                 default = nil)
  if valid_594057 != nil:
    section.add "X-Amz-Credential", valid_594057
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_594058 = formData.getOrDefault("AutoScalingGroupName")
  valid_594058 = validateParameter(valid_594058, JString, required = true,
                                 default = nil)
  if valid_594058 != nil:
    section.add "AutoScalingGroupName", valid_594058
  var valid_594059 = formData.getOrDefault("InstanceIds")
  valid_594059 = validateParameter(valid_594059, JArray, required = false,
                                 default = nil)
  if valid_594059 != nil:
    section.add "InstanceIds", valid_594059
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594060: Call_PostAttachInstances_594046; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches one or more EC2 instances to the specified Auto Scaling group.</p> <p>When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.</p> <p>If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html">Attach EC2 Instances to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_594060.validator(path, query, header, formData, body)
  let scheme = call_594060.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594060.url(scheme.get, call_594060.host, call_594060.base,
                         call_594060.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594060, url, valid)

proc call*(call_594061: Call_PostAttachInstances_594046;
          AutoScalingGroupName: string; InstanceIds: JsonNode = nil;
          Action: string = "AttachInstances"; Version: string = "2011-01-01"): Recallable =
  ## postAttachInstances
  ## <p>Attaches one or more EC2 instances to the specified Auto Scaling group.</p> <p>When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.</p> <p>If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html">Attach EC2 Instances to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594062 = newJObject()
  var formData_594063 = newJObject()
  add(formData_594063, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if InstanceIds != nil:
    formData_594063.add "InstanceIds", InstanceIds
  add(query_594062, "Action", newJString(Action))
  add(query_594062, "Version", newJString(Version))
  result = call_594061.call(nil, query_594062, nil, formData_594063, nil)

var postAttachInstances* = Call_PostAttachInstances_594046(
    name: "postAttachInstances", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=AttachInstances",
    validator: validate_PostAttachInstances_594047, base: "/",
    url: url_PostAttachInstances_594048, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAttachInstances_593774 = ref object of OpenApiRestCall_593437
proc url_GetAttachInstances_593776(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetAttachInstances_593775(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Attaches one or more EC2 instances to the specified Auto Scaling group.</p> <p>When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.</p> <p>If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html">Attach EC2 Instances to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_593888 = query.getOrDefault("AutoScalingGroupName")
  valid_593888 = validateParameter(valid_593888, JString, required = true,
                                 default = nil)
  if valid_593888 != nil:
    section.add "AutoScalingGroupName", valid_593888
  var valid_593902 = query.getOrDefault("Action")
  valid_593902 = validateParameter(valid_593902, JString, required = true,
                                 default = newJString("AttachInstances"))
  if valid_593902 != nil:
    section.add "Action", valid_593902
  var valid_593903 = query.getOrDefault("InstanceIds")
  valid_593903 = validateParameter(valid_593903, JArray, required = false,
                                 default = nil)
  if valid_593903 != nil:
    section.add "InstanceIds", valid_593903
  var valid_593904 = query.getOrDefault("Version")
  valid_593904 = validateParameter(valid_593904, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_593904 != nil:
    section.add "Version", valid_593904
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_593905 = header.getOrDefault("X-Amz-Date")
  valid_593905 = validateParameter(valid_593905, JString, required = false,
                                 default = nil)
  if valid_593905 != nil:
    section.add "X-Amz-Date", valid_593905
  var valid_593906 = header.getOrDefault("X-Amz-Security-Token")
  valid_593906 = validateParameter(valid_593906, JString, required = false,
                                 default = nil)
  if valid_593906 != nil:
    section.add "X-Amz-Security-Token", valid_593906
  var valid_593907 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593907 = validateParameter(valid_593907, JString, required = false,
                                 default = nil)
  if valid_593907 != nil:
    section.add "X-Amz-Content-Sha256", valid_593907
  var valid_593908 = header.getOrDefault("X-Amz-Algorithm")
  valid_593908 = validateParameter(valid_593908, JString, required = false,
                                 default = nil)
  if valid_593908 != nil:
    section.add "X-Amz-Algorithm", valid_593908
  var valid_593909 = header.getOrDefault("X-Amz-Signature")
  valid_593909 = validateParameter(valid_593909, JString, required = false,
                                 default = nil)
  if valid_593909 != nil:
    section.add "X-Amz-Signature", valid_593909
  var valid_593910 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593910 = validateParameter(valid_593910, JString, required = false,
                                 default = nil)
  if valid_593910 != nil:
    section.add "X-Amz-SignedHeaders", valid_593910
  var valid_593911 = header.getOrDefault("X-Amz-Credential")
  valid_593911 = validateParameter(valid_593911, JString, required = false,
                                 default = nil)
  if valid_593911 != nil:
    section.add "X-Amz-Credential", valid_593911
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593934: Call_GetAttachInstances_593774; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches one or more EC2 instances to the specified Auto Scaling group.</p> <p>When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.</p> <p>If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html">Attach EC2 Instances to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_593934.validator(path, query, header, formData, body)
  let scheme = call_593934.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593934.url(scheme.get, call_593934.host, call_593934.base,
                         call_593934.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593934, url, valid)

proc call*(call_594005: Call_GetAttachInstances_593774;
          AutoScalingGroupName: string; Action: string = "AttachInstances";
          InstanceIds: JsonNode = nil; Version: string = "2011-01-01"): Recallable =
  ## getAttachInstances
  ## <p>Attaches one or more EC2 instances to the specified Auto Scaling group.</p> <p>When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.</p> <p>If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html">Attach EC2 Instances to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Version: string (required)
  var query_594006 = newJObject()
  add(query_594006, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_594006, "Action", newJString(Action))
  if InstanceIds != nil:
    query_594006.add "InstanceIds", InstanceIds
  add(query_594006, "Version", newJString(Version))
  result = call_594005.call(nil, query_594006, nil, nil, nil)

var getAttachInstances* = Call_GetAttachInstances_593774(
    name: "getAttachInstances", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=AttachInstances",
    validator: validate_GetAttachInstances_593775, base: "/",
    url: url_GetAttachInstances_593776, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAttachLoadBalancerTargetGroups_594081 = ref object of OpenApiRestCall_593437
proc url_PostAttachLoadBalancerTargetGroups_594083(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostAttachLoadBalancerTargetGroups_594082(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches one or more target groups to the specified Auto Scaling group. </p> <p>To describe the target groups for an Auto Scaling group, use <a>DescribeLoadBalancerTargetGroups</a>. To detach the target group from the Auto Scaling group, use <a>DetachLoadBalancerTargetGroups</a>.</p> <p>With Application Load Balancers and Network Load Balancers, instances are registered as targets with a target group. With Classic Load Balancers, instances are registered with the load balancer. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594084 = query.getOrDefault("Action")
  valid_594084 = validateParameter(valid_594084, JString, required = true, default = newJString(
      "AttachLoadBalancerTargetGroups"))
  if valid_594084 != nil:
    section.add "Action", valid_594084
  var valid_594085 = query.getOrDefault("Version")
  valid_594085 = validateParameter(valid_594085, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_594085 != nil:
    section.add "Version", valid_594085
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594086 = header.getOrDefault("X-Amz-Date")
  valid_594086 = validateParameter(valid_594086, JString, required = false,
                                 default = nil)
  if valid_594086 != nil:
    section.add "X-Amz-Date", valid_594086
  var valid_594087 = header.getOrDefault("X-Amz-Security-Token")
  valid_594087 = validateParameter(valid_594087, JString, required = false,
                                 default = nil)
  if valid_594087 != nil:
    section.add "X-Amz-Security-Token", valid_594087
  var valid_594088 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594088 = validateParameter(valid_594088, JString, required = false,
                                 default = nil)
  if valid_594088 != nil:
    section.add "X-Amz-Content-Sha256", valid_594088
  var valid_594089 = header.getOrDefault("X-Amz-Algorithm")
  valid_594089 = validateParameter(valid_594089, JString, required = false,
                                 default = nil)
  if valid_594089 != nil:
    section.add "X-Amz-Algorithm", valid_594089
  var valid_594090 = header.getOrDefault("X-Amz-Signature")
  valid_594090 = validateParameter(valid_594090, JString, required = false,
                                 default = nil)
  if valid_594090 != nil:
    section.add "X-Amz-Signature", valid_594090
  var valid_594091 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594091 = validateParameter(valid_594091, JString, required = false,
                                 default = nil)
  if valid_594091 != nil:
    section.add "X-Amz-SignedHeaders", valid_594091
  var valid_594092 = header.getOrDefault("X-Amz-Credential")
  valid_594092 = validateParameter(valid_594092, JString, required = false,
                                 default = nil)
  if valid_594092 != nil:
    section.add "X-Amz-Credential", valid_594092
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_594093 = formData.getOrDefault("AutoScalingGroupName")
  valid_594093 = validateParameter(valid_594093, JString, required = true,
                                 default = nil)
  if valid_594093 != nil:
    section.add "AutoScalingGroupName", valid_594093
  var valid_594094 = formData.getOrDefault("TargetGroupARNs")
  valid_594094 = validateParameter(valid_594094, JArray, required = true, default = nil)
  if valid_594094 != nil:
    section.add "TargetGroupARNs", valid_594094
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594095: Call_PostAttachLoadBalancerTargetGroups_594081;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Attaches one or more target groups to the specified Auto Scaling group. </p> <p>To describe the target groups for an Auto Scaling group, use <a>DescribeLoadBalancerTargetGroups</a>. To detach the target group from the Auto Scaling group, use <a>DetachLoadBalancerTargetGroups</a>.</p> <p>With Application Load Balancers and Network Load Balancers, instances are registered as targets with a target group. With Classic Load Balancers, instances are registered with the load balancer. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_594095.validator(path, query, header, formData, body)
  let scheme = call_594095.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594095.url(scheme.get, call_594095.host, call_594095.base,
                         call_594095.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594095, url, valid)

proc call*(call_594096: Call_PostAttachLoadBalancerTargetGroups_594081;
          AutoScalingGroupName: string; TargetGroupARNs: JsonNode;
          Action: string = "AttachLoadBalancerTargetGroups";
          Version: string = "2011-01-01"): Recallable =
  ## postAttachLoadBalancerTargetGroups
  ## <p>Attaches one or more target groups to the specified Auto Scaling group. </p> <p>To describe the target groups for an Auto Scaling group, use <a>DescribeLoadBalancerTargetGroups</a>. To detach the target group from the Auto Scaling group, use <a>DetachLoadBalancerTargetGroups</a>.</p> <p>With Application Load Balancers and Network Load Balancers, instances are registered as targets with a target group. With Classic Load Balancers, instances are registered with the load balancer. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594097 = newJObject()
  var formData_594098 = newJObject()
  add(formData_594098, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if TargetGroupARNs != nil:
    formData_594098.add "TargetGroupARNs", TargetGroupARNs
  add(query_594097, "Action", newJString(Action))
  add(query_594097, "Version", newJString(Version))
  result = call_594096.call(nil, query_594097, nil, formData_594098, nil)

var postAttachLoadBalancerTargetGroups* = Call_PostAttachLoadBalancerTargetGroups_594081(
    name: "postAttachLoadBalancerTargetGroups", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=AttachLoadBalancerTargetGroups",
    validator: validate_PostAttachLoadBalancerTargetGroups_594082, base: "/",
    url: url_PostAttachLoadBalancerTargetGroups_594083,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAttachLoadBalancerTargetGroups_594064 = ref object of OpenApiRestCall_593437
proc url_GetAttachLoadBalancerTargetGroups_594066(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetAttachLoadBalancerTargetGroups_594065(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches one or more target groups to the specified Auto Scaling group. </p> <p>To describe the target groups for an Auto Scaling group, use <a>DescribeLoadBalancerTargetGroups</a>. To detach the target group from the Auto Scaling group, use <a>DetachLoadBalancerTargetGroups</a>.</p> <p>With Application Load Balancers and Network Load Balancers, instances are registered as targets with a target group. With Classic Load Balancers, instances are registered with the load balancer. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_594067 = query.getOrDefault("AutoScalingGroupName")
  valid_594067 = validateParameter(valid_594067, JString, required = true,
                                 default = nil)
  if valid_594067 != nil:
    section.add "AutoScalingGroupName", valid_594067
  var valid_594068 = query.getOrDefault("Action")
  valid_594068 = validateParameter(valid_594068, JString, required = true, default = newJString(
      "AttachLoadBalancerTargetGroups"))
  if valid_594068 != nil:
    section.add "Action", valid_594068
  var valid_594069 = query.getOrDefault("TargetGroupARNs")
  valid_594069 = validateParameter(valid_594069, JArray, required = true, default = nil)
  if valid_594069 != nil:
    section.add "TargetGroupARNs", valid_594069
  var valid_594070 = query.getOrDefault("Version")
  valid_594070 = validateParameter(valid_594070, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_594070 != nil:
    section.add "Version", valid_594070
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594071 = header.getOrDefault("X-Amz-Date")
  valid_594071 = validateParameter(valid_594071, JString, required = false,
                                 default = nil)
  if valid_594071 != nil:
    section.add "X-Amz-Date", valid_594071
  var valid_594072 = header.getOrDefault("X-Amz-Security-Token")
  valid_594072 = validateParameter(valid_594072, JString, required = false,
                                 default = nil)
  if valid_594072 != nil:
    section.add "X-Amz-Security-Token", valid_594072
  var valid_594073 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594073 = validateParameter(valid_594073, JString, required = false,
                                 default = nil)
  if valid_594073 != nil:
    section.add "X-Amz-Content-Sha256", valid_594073
  var valid_594074 = header.getOrDefault("X-Amz-Algorithm")
  valid_594074 = validateParameter(valid_594074, JString, required = false,
                                 default = nil)
  if valid_594074 != nil:
    section.add "X-Amz-Algorithm", valid_594074
  var valid_594075 = header.getOrDefault("X-Amz-Signature")
  valid_594075 = validateParameter(valid_594075, JString, required = false,
                                 default = nil)
  if valid_594075 != nil:
    section.add "X-Amz-Signature", valid_594075
  var valid_594076 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594076 = validateParameter(valid_594076, JString, required = false,
                                 default = nil)
  if valid_594076 != nil:
    section.add "X-Amz-SignedHeaders", valid_594076
  var valid_594077 = header.getOrDefault("X-Amz-Credential")
  valid_594077 = validateParameter(valid_594077, JString, required = false,
                                 default = nil)
  if valid_594077 != nil:
    section.add "X-Amz-Credential", valid_594077
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594078: Call_GetAttachLoadBalancerTargetGroups_594064;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Attaches one or more target groups to the specified Auto Scaling group. </p> <p>To describe the target groups for an Auto Scaling group, use <a>DescribeLoadBalancerTargetGroups</a>. To detach the target group from the Auto Scaling group, use <a>DetachLoadBalancerTargetGroups</a>.</p> <p>With Application Load Balancers and Network Load Balancers, instances are registered as targets with a target group. With Classic Load Balancers, instances are registered with the load balancer. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_594078.validator(path, query, header, formData, body)
  let scheme = call_594078.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594078.url(scheme.get, call_594078.host, call_594078.base,
                         call_594078.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594078, url, valid)

proc call*(call_594079: Call_GetAttachLoadBalancerTargetGroups_594064;
          AutoScalingGroupName: string; TargetGroupARNs: JsonNode;
          Action: string = "AttachLoadBalancerTargetGroups";
          Version: string = "2011-01-01"): Recallable =
  ## getAttachLoadBalancerTargetGroups
  ## <p>Attaches one or more target groups to the specified Auto Scaling group. </p> <p>To describe the target groups for an Auto Scaling group, use <a>DescribeLoadBalancerTargetGroups</a>. To detach the target group from the Auto Scaling group, use <a>DetachLoadBalancerTargetGroups</a>.</p> <p>With Application Load Balancers and Network Load Balancers, instances are registered as targets with a target group. With Classic Load Balancers, instances are registered with the load balancer. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  ##   Version: string (required)
  var query_594080 = newJObject()
  add(query_594080, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_594080, "Action", newJString(Action))
  if TargetGroupARNs != nil:
    query_594080.add "TargetGroupARNs", TargetGroupARNs
  add(query_594080, "Version", newJString(Version))
  result = call_594079.call(nil, query_594080, nil, nil, nil)

var getAttachLoadBalancerTargetGroups* = Call_GetAttachLoadBalancerTargetGroups_594064(
    name: "getAttachLoadBalancerTargetGroups", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=AttachLoadBalancerTargetGroups",
    validator: validate_GetAttachLoadBalancerTargetGroups_594065, base: "/",
    url: url_GetAttachLoadBalancerTargetGroups_594066,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAttachLoadBalancers_594116 = ref object of OpenApiRestCall_593437
proc url_PostAttachLoadBalancers_594118(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostAttachLoadBalancers_594117(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches one or more Classic Load Balancers to the specified Auto Scaling group.</p> <p>To attach an Application Load Balancer or a Network Load Balancer instead, see <a>AttachLoadBalancerTargetGroups</a>.</p> <p>To describe the load balancers for an Auto Scaling group, use <a>DescribeLoadBalancers</a>. To detach the load balancer from the Auto Scaling group, use <a>DetachLoadBalancers</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594119 = query.getOrDefault("Action")
  valid_594119 = validateParameter(valid_594119, JString, required = true,
                                 default = newJString("AttachLoadBalancers"))
  if valid_594119 != nil:
    section.add "Action", valid_594119
  var valid_594120 = query.getOrDefault("Version")
  valid_594120 = validateParameter(valid_594120, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_594120 != nil:
    section.add "Version", valid_594120
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594121 = header.getOrDefault("X-Amz-Date")
  valid_594121 = validateParameter(valid_594121, JString, required = false,
                                 default = nil)
  if valid_594121 != nil:
    section.add "X-Amz-Date", valid_594121
  var valid_594122 = header.getOrDefault("X-Amz-Security-Token")
  valid_594122 = validateParameter(valid_594122, JString, required = false,
                                 default = nil)
  if valid_594122 != nil:
    section.add "X-Amz-Security-Token", valid_594122
  var valid_594123 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594123 = validateParameter(valid_594123, JString, required = false,
                                 default = nil)
  if valid_594123 != nil:
    section.add "X-Amz-Content-Sha256", valid_594123
  var valid_594124 = header.getOrDefault("X-Amz-Algorithm")
  valid_594124 = validateParameter(valid_594124, JString, required = false,
                                 default = nil)
  if valid_594124 != nil:
    section.add "X-Amz-Algorithm", valid_594124
  var valid_594125 = header.getOrDefault("X-Amz-Signature")
  valid_594125 = validateParameter(valid_594125, JString, required = false,
                                 default = nil)
  if valid_594125 != nil:
    section.add "X-Amz-Signature", valid_594125
  var valid_594126 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594126 = validateParameter(valid_594126, JString, required = false,
                                 default = nil)
  if valid_594126 != nil:
    section.add "X-Amz-SignedHeaders", valid_594126
  var valid_594127 = header.getOrDefault("X-Amz-Credential")
  valid_594127 = validateParameter(valid_594127, JString, required = false,
                                 default = nil)
  if valid_594127 != nil:
    section.add "X-Amz-Credential", valid_594127
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_594128 = formData.getOrDefault("AutoScalingGroupName")
  valid_594128 = validateParameter(valid_594128, JString, required = true,
                                 default = nil)
  if valid_594128 != nil:
    section.add "AutoScalingGroupName", valid_594128
  var valid_594129 = formData.getOrDefault("LoadBalancerNames")
  valid_594129 = validateParameter(valid_594129, JArray, required = true, default = nil)
  if valid_594129 != nil:
    section.add "LoadBalancerNames", valid_594129
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594130: Call_PostAttachLoadBalancers_594116; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches one or more Classic Load Balancers to the specified Auto Scaling group.</p> <p>To attach an Application Load Balancer or a Network Load Balancer instead, see <a>AttachLoadBalancerTargetGroups</a>.</p> <p>To describe the load balancers for an Auto Scaling group, use <a>DescribeLoadBalancers</a>. To detach the load balancer from the Auto Scaling group, use <a>DetachLoadBalancers</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_594130.validator(path, query, header, formData, body)
  let scheme = call_594130.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594130.url(scheme.get, call_594130.host, call_594130.base,
                         call_594130.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594130, url, valid)

proc call*(call_594131: Call_PostAttachLoadBalancers_594116;
          AutoScalingGroupName: string; LoadBalancerNames: JsonNode;
          Action: string = "AttachLoadBalancers"; Version: string = "2011-01-01"): Recallable =
  ## postAttachLoadBalancers
  ## <p>Attaches one or more Classic Load Balancers to the specified Auto Scaling group.</p> <p>To attach an Application Load Balancer or a Network Load Balancer instead, see <a>AttachLoadBalancerTargetGroups</a>.</p> <p>To describe the load balancers for an Auto Scaling group, use <a>DescribeLoadBalancers</a>. To detach the load balancer from the Auto Scaling group, use <a>DetachLoadBalancers</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  ##   Version: string (required)
  var query_594132 = newJObject()
  var formData_594133 = newJObject()
  add(formData_594133, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_594132, "Action", newJString(Action))
  if LoadBalancerNames != nil:
    formData_594133.add "LoadBalancerNames", LoadBalancerNames
  add(query_594132, "Version", newJString(Version))
  result = call_594131.call(nil, query_594132, nil, formData_594133, nil)

var postAttachLoadBalancers* = Call_PostAttachLoadBalancers_594116(
    name: "postAttachLoadBalancers", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=AttachLoadBalancers",
    validator: validate_PostAttachLoadBalancers_594117, base: "/",
    url: url_PostAttachLoadBalancers_594118, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAttachLoadBalancers_594099 = ref object of OpenApiRestCall_593437
proc url_GetAttachLoadBalancers_594101(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetAttachLoadBalancers_594100(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches one or more Classic Load Balancers to the specified Auto Scaling group.</p> <p>To attach an Application Load Balancer or a Network Load Balancer instead, see <a>AttachLoadBalancerTargetGroups</a>.</p> <p>To describe the load balancers for an Auto Scaling group, use <a>DescribeLoadBalancers</a>. To detach the load balancer from the Auto Scaling group, use <a>DetachLoadBalancers</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_594102 = query.getOrDefault("AutoScalingGroupName")
  valid_594102 = validateParameter(valid_594102, JString, required = true,
                                 default = nil)
  if valid_594102 != nil:
    section.add "AutoScalingGroupName", valid_594102
  var valid_594103 = query.getOrDefault("Action")
  valid_594103 = validateParameter(valid_594103, JString, required = true,
                                 default = newJString("AttachLoadBalancers"))
  if valid_594103 != nil:
    section.add "Action", valid_594103
  var valid_594104 = query.getOrDefault("LoadBalancerNames")
  valid_594104 = validateParameter(valid_594104, JArray, required = true, default = nil)
  if valid_594104 != nil:
    section.add "LoadBalancerNames", valid_594104
  var valid_594105 = query.getOrDefault("Version")
  valid_594105 = validateParameter(valid_594105, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_594105 != nil:
    section.add "Version", valid_594105
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594106 = header.getOrDefault("X-Amz-Date")
  valid_594106 = validateParameter(valid_594106, JString, required = false,
                                 default = nil)
  if valid_594106 != nil:
    section.add "X-Amz-Date", valid_594106
  var valid_594107 = header.getOrDefault("X-Amz-Security-Token")
  valid_594107 = validateParameter(valid_594107, JString, required = false,
                                 default = nil)
  if valid_594107 != nil:
    section.add "X-Amz-Security-Token", valid_594107
  var valid_594108 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594108 = validateParameter(valid_594108, JString, required = false,
                                 default = nil)
  if valid_594108 != nil:
    section.add "X-Amz-Content-Sha256", valid_594108
  var valid_594109 = header.getOrDefault("X-Amz-Algorithm")
  valid_594109 = validateParameter(valid_594109, JString, required = false,
                                 default = nil)
  if valid_594109 != nil:
    section.add "X-Amz-Algorithm", valid_594109
  var valid_594110 = header.getOrDefault("X-Amz-Signature")
  valid_594110 = validateParameter(valid_594110, JString, required = false,
                                 default = nil)
  if valid_594110 != nil:
    section.add "X-Amz-Signature", valid_594110
  var valid_594111 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594111 = validateParameter(valid_594111, JString, required = false,
                                 default = nil)
  if valid_594111 != nil:
    section.add "X-Amz-SignedHeaders", valid_594111
  var valid_594112 = header.getOrDefault("X-Amz-Credential")
  valid_594112 = validateParameter(valid_594112, JString, required = false,
                                 default = nil)
  if valid_594112 != nil:
    section.add "X-Amz-Credential", valid_594112
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594113: Call_GetAttachLoadBalancers_594099; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches one or more Classic Load Balancers to the specified Auto Scaling group.</p> <p>To attach an Application Load Balancer or a Network Load Balancer instead, see <a>AttachLoadBalancerTargetGroups</a>.</p> <p>To describe the load balancers for an Auto Scaling group, use <a>DescribeLoadBalancers</a>. To detach the load balancer from the Auto Scaling group, use <a>DetachLoadBalancers</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_594113.validator(path, query, header, formData, body)
  let scheme = call_594113.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594113.url(scheme.get, call_594113.host, call_594113.base,
                         call_594113.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594113, url, valid)

proc call*(call_594114: Call_GetAttachLoadBalancers_594099;
          AutoScalingGroupName: string; LoadBalancerNames: JsonNode;
          Action: string = "AttachLoadBalancers"; Version: string = "2011-01-01"): Recallable =
  ## getAttachLoadBalancers
  ## <p>Attaches one or more Classic Load Balancers to the specified Auto Scaling group.</p> <p>To attach an Application Load Balancer or a Network Load Balancer instead, see <a>AttachLoadBalancerTargetGroups</a>.</p> <p>To describe the load balancers for an Auto Scaling group, use <a>DescribeLoadBalancers</a>. To detach the load balancer from the Auto Scaling group, use <a>DetachLoadBalancers</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  ##   Version: string (required)
  var query_594115 = newJObject()
  add(query_594115, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_594115, "Action", newJString(Action))
  if LoadBalancerNames != nil:
    query_594115.add "LoadBalancerNames", LoadBalancerNames
  add(query_594115, "Version", newJString(Version))
  result = call_594114.call(nil, query_594115, nil, nil, nil)

var getAttachLoadBalancers* = Call_GetAttachLoadBalancers_594099(
    name: "getAttachLoadBalancers", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=AttachLoadBalancers",
    validator: validate_GetAttachLoadBalancers_594100, base: "/",
    url: url_GetAttachLoadBalancers_594101, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostBatchDeleteScheduledAction_594151 = ref object of OpenApiRestCall_593437
proc url_PostBatchDeleteScheduledAction_594153(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostBatchDeleteScheduledAction_594152(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes one or more scheduled actions for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594154 = query.getOrDefault("Action")
  valid_594154 = validateParameter(valid_594154, JString, required = true, default = newJString(
      "BatchDeleteScheduledAction"))
  if valid_594154 != nil:
    section.add "Action", valid_594154
  var valid_594155 = query.getOrDefault("Version")
  valid_594155 = validateParameter(valid_594155, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_594155 != nil:
    section.add "Version", valid_594155
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594156 = header.getOrDefault("X-Amz-Date")
  valid_594156 = validateParameter(valid_594156, JString, required = false,
                                 default = nil)
  if valid_594156 != nil:
    section.add "X-Amz-Date", valid_594156
  var valid_594157 = header.getOrDefault("X-Amz-Security-Token")
  valid_594157 = validateParameter(valid_594157, JString, required = false,
                                 default = nil)
  if valid_594157 != nil:
    section.add "X-Amz-Security-Token", valid_594157
  var valid_594158 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594158 = validateParameter(valid_594158, JString, required = false,
                                 default = nil)
  if valid_594158 != nil:
    section.add "X-Amz-Content-Sha256", valid_594158
  var valid_594159 = header.getOrDefault("X-Amz-Algorithm")
  valid_594159 = validateParameter(valid_594159, JString, required = false,
                                 default = nil)
  if valid_594159 != nil:
    section.add "X-Amz-Algorithm", valid_594159
  var valid_594160 = header.getOrDefault("X-Amz-Signature")
  valid_594160 = validateParameter(valid_594160, JString, required = false,
                                 default = nil)
  if valid_594160 != nil:
    section.add "X-Amz-Signature", valid_594160
  var valid_594161 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594161 = validateParameter(valid_594161, JString, required = false,
                                 default = nil)
  if valid_594161 != nil:
    section.add "X-Amz-SignedHeaders", valid_594161
  var valid_594162 = header.getOrDefault("X-Amz-Credential")
  valid_594162 = validateParameter(valid_594162, JString, required = false,
                                 default = nil)
  if valid_594162 != nil:
    section.add "X-Amz-Credential", valid_594162
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScheduledActionNames: JArray (required)
  ##                       : The names of the scheduled actions to delete. The maximum number allowed is 50. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_594163 = formData.getOrDefault("AutoScalingGroupName")
  valid_594163 = validateParameter(valid_594163, JString, required = true,
                                 default = nil)
  if valid_594163 != nil:
    section.add "AutoScalingGroupName", valid_594163
  var valid_594164 = formData.getOrDefault("ScheduledActionNames")
  valid_594164 = validateParameter(valid_594164, JArray, required = true, default = nil)
  if valid_594164 != nil:
    section.add "ScheduledActionNames", valid_594164
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594165: Call_PostBatchDeleteScheduledAction_594151; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes one or more scheduled actions for the specified Auto Scaling group.
  ## 
  let valid = call_594165.validator(path, query, header, formData, body)
  let scheme = call_594165.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594165.url(scheme.get, call_594165.host, call_594165.base,
                         call_594165.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594165, url, valid)

proc call*(call_594166: Call_PostBatchDeleteScheduledAction_594151;
          AutoScalingGroupName: string; ScheduledActionNames: JsonNode;
          Action: string = "BatchDeleteScheduledAction";
          Version: string = "2011-01-01"): Recallable =
  ## postBatchDeleteScheduledAction
  ## Deletes one or more scheduled actions for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ScheduledActionNames: JArray (required)
  ##                       : The names of the scheduled actions to delete. The maximum number allowed is 50. 
  var query_594167 = newJObject()
  var formData_594168 = newJObject()
  add(formData_594168, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_594167, "Action", newJString(Action))
  add(query_594167, "Version", newJString(Version))
  if ScheduledActionNames != nil:
    formData_594168.add "ScheduledActionNames", ScheduledActionNames
  result = call_594166.call(nil, query_594167, nil, formData_594168, nil)

var postBatchDeleteScheduledAction* = Call_PostBatchDeleteScheduledAction_594151(
    name: "postBatchDeleteScheduledAction", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=BatchDeleteScheduledAction",
    validator: validate_PostBatchDeleteScheduledAction_594152, base: "/",
    url: url_PostBatchDeleteScheduledAction_594153,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBatchDeleteScheduledAction_594134 = ref object of OpenApiRestCall_593437
proc url_GetBatchDeleteScheduledAction_594136(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetBatchDeleteScheduledAction_594135(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes one or more scheduled actions for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   ScheduledActionNames: JArray (required)
  ##                       : The names of the scheduled actions to delete. The maximum number allowed is 50. 
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_594137 = query.getOrDefault("AutoScalingGroupName")
  valid_594137 = validateParameter(valid_594137, JString, required = true,
                                 default = nil)
  if valid_594137 != nil:
    section.add "AutoScalingGroupName", valid_594137
  var valid_594138 = query.getOrDefault("Action")
  valid_594138 = validateParameter(valid_594138, JString, required = true, default = newJString(
      "BatchDeleteScheduledAction"))
  if valid_594138 != nil:
    section.add "Action", valid_594138
  var valid_594139 = query.getOrDefault("ScheduledActionNames")
  valid_594139 = validateParameter(valid_594139, JArray, required = true, default = nil)
  if valid_594139 != nil:
    section.add "ScheduledActionNames", valid_594139
  var valid_594140 = query.getOrDefault("Version")
  valid_594140 = validateParameter(valid_594140, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_594140 != nil:
    section.add "Version", valid_594140
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594141 = header.getOrDefault("X-Amz-Date")
  valid_594141 = validateParameter(valid_594141, JString, required = false,
                                 default = nil)
  if valid_594141 != nil:
    section.add "X-Amz-Date", valid_594141
  var valid_594142 = header.getOrDefault("X-Amz-Security-Token")
  valid_594142 = validateParameter(valid_594142, JString, required = false,
                                 default = nil)
  if valid_594142 != nil:
    section.add "X-Amz-Security-Token", valid_594142
  var valid_594143 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594143 = validateParameter(valid_594143, JString, required = false,
                                 default = nil)
  if valid_594143 != nil:
    section.add "X-Amz-Content-Sha256", valid_594143
  var valid_594144 = header.getOrDefault("X-Amz-Algorithm")
  valid_594144 = validateParameter(valid_594144, JString, required = false,
                                 default = nil)
  if valid_594144 != nil:
    section.add "X-Amz-Algorithm", valid_594144
  var valid_594145 = header.getOrDefault("X-Amz-Signature")
  valid_594145 = validateParameter(valid_594145, JString, required = false,
                                 default = nil)
  if valid_594145 != nil:
    section.add "X-Amz-Signature", valid_594145
  var valid_594146 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594146 = validateParameter(valid_594146, JString, required = false,
                                 default = nil)
  if valid_594146 != nil:
    section.add "X-Amz-SignedHeaders", valid_594146
  var valid_594147 = header.getOrDefault("X-Amz-Credential")
  valid_594147 = validateParameter(valid_594147, JString, required = false,
                                 default = nil)
  if valid_594147 != nil:
    section.add "X-Amz-Credential", valid_594147
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594148: Call_GetBatchDeleteScheduledAction_594134; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes one or more scheduled actions for the specified Auto Scaling group.
  ## 
  let valid = call_594148.validator(path, query, header, formData, body)
  let scheme = call_594148.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594148.url(scheme.get, call_594148.host, call_594148.base,
                         call_594148.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594148, url, valid)

proc call*(call_594149: Call_GetBatchDeleteScheduledAction_594134;
          AutoScalingGroupName: string; ScheduledActionNames: JsonNode;
          Action: string = "BatchDeleteScheduledAction";
          Version: string = "2011-01-01"): Recallable =
  ## getBatchDeleteScheduledAction
  ## Deletes one or more scheduled actions for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   ScheduledActionNames: JArray (required)
  ##                       : The names of the scheduled actions to delete. The maximum number allowed is 50. 
  ##   Version: string (required)
  var query_594150 = newJObject()
  add(query_594150, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_594150, "Action", newJString(Action))
  if ScheduledActionNames != nil:
    query_594150.add "ScheduledActionNames", ScheduledActionNames
  add(query_594150, "Version", newJString(Version))
  result = call_594149.call(nil, query_594150, nil, nil, nil)

var getBatchDeleteScheduledAction* = Call_GetBatchDeleteScheduledAction_594134(
    name: "getBatchDeleteScheduledAction", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=BatchDeleteScheduledAction",
    validator: validate_GetBatchDeleteScheduledAction_594135, base: "/",
    url: url_GetBatchDeleteScheduledAction_594136,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostBatchPutScheduledUpdateGroupAction_594186 = ref object of OpenApiRestCall_593437
proc url_PostBatchPutScheduledUpdateGroupAction_594188(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostBatchPutScheduledUpdateGroupAction_594187(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates or updates one or more scheduled scaling actions for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594189 = query.getOrDefault("Action")
  valid_594189 = validateParameter(valid_594189, JString, required = true, default = newJString(
      "BatchPutScheduledUpdateGroupAction"))
  if valid_594189 != nil:
    section.add "Action", valid_594189
  var valid_594190 = query.getOrDefault("Version")
  valid_594190 = validateParameter(valid_594190, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_594190 != nil:
    section.add "Version", valid_594190
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594191 = header.getOrDefault("X-Amz-Date")
  valid_594191 = validateParameter(valid_594191, JString, required = false,
                                 default = nil)
  if valid_594191 != nil:
    section.add "X-Amz-Date", valid_594191
  var valid_594192 = header.getOrDefault("X-Amz-Security-Token")
  valid_594192 = validateParameter(valid_594192, JString, required = false,
                                 default = nil)
  if valid_594192 != nil:
    section.add "X-Amz-Security-Token", valid_594192
  var valid_594193 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594193 = validateParameter(valid_594193, JString, required = false,
                                 default = nil)
  if valid_594193 != nil:
    section.add "X-Amz-Content-Sha256", valid_594193
  var valid_594194 = header.getOrDefault("X-Amz-Algorithm")
  valid_594194 = validateParameter(valid_594194, JString, required = false,
                                 default = nil)
  if valid_594194 != nil:
    section.add "X-Amz-Algorithm", valid_594194
  var valid_594195 = header.getOrDefault("X-Amz-Signature")
  valid_594195 = validateParameter(valid_594195, JString, required = false,
                                 default = nil)
  if valid_594195 != nil:
    section.add "X-Amz-Signature", valid_594195
  var valid_594196 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594196 = validateParameter(valid_594196, JString, required = false,
                                 default = nil)
  if valid_594196 != nil:
    section.add "X-Amz-SignedHeaders", valid_594196
  var valid_594197 = header.getOrDefault("X-Amz-Credential")
  valid_594197 = validateParameter(valid_594197, JString, required = false,
                                 default = nil)
  if valid_594197 != nil:
    section.add "X-Amz-Credential", valid_594197
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScheduledUpdateGroupActions: JArray (required)
  ##                              : One or more scheduled actions. The maximum number allowed is 50. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_594198 = formData.getOrDefault("AutoScalingGroupName")
  valid_594198 = validateParameter(valid_594198, JString, required = true,
                                 default = nil)
  if valid_594198 != nil:
    section.add "AutoScalingGroupName", valid_594198
  var valid_594199 = formData.getOrDefault("ScheduledUpdateGroupActions")
  valid_594199 = validateParameter(valid_594199, JArray, required = true, default = nil)
  if valid_594199 != nil:
    section.add "ScheduledUpdateGroupActions", valid_594199
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594200: Call_PostBatchPutScheduledUpdateGroupAction_594186;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates or updates one or more scheduled scaling actions for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.
  ## 
  let valid = call_594200.validator(path, query, header, formData, body)
  let scheme = call_594200.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594200.url(scheme.get, call_594200.host, call_594200.base,
                         call_594200.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594200, url, valid)

proc call*(call_594201: Call_PostBatchPutScheduledUpdateGroupAction_594186;
          AutoScalingGroupName: string; ScheduledUpdateGroupActions: JsonNode;
          Action: string = "BatchPutScheduledUpdateGroupAction";
          Version: string = "2011-01-01"): Recallable =
  ## postBatchPutScheduledUpdateGroupAction
  ## Creates or updates one or more scheduled scaling actions for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScheduledUpdateGroupActions: JArray (required)
  ##                              : One or more scheduled actions. The maximum number allowed is 50. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594202 = newJObject()
  var formData_594203 = newJObject()
  add(formData_594203, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if ScheduledUpdateGroupActions != nil:
    formData_594203.add "ScheduledUpdateGroupActions", ScheduledUpdateGroupActions
  add(query_594202, "Action", newJString(Action))
  add(query_594202, "Version", newJString(Version))
  result = call_594201.call(nil, query_594202, nil, formData_594203, nil)

var postBatchPutScheduledUpdateGroupAction* = Call_PostBatchPutScheduledUpdateGroupAction_594186(
    name: "postBatchPutScheduledUpdateGroupAction", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=BatchPutScheduledUpdateGroupAction",
    validator: validate_PostBatchPutScheduledUpdateGroupAction_594187, base: "/",
    url: url_PostBatchPutScheduledUpdateGroupAction_594188,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBatchPutScheduledUpdateGroupAction_594169 = ref object of OpenApiRestCall_593437
proc url_GetBatchPutScheduledUpdateGroupAction_594171(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetBatchPutScheduledUpdateGroupAction_594170(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates or updates one or more scheduled scaling actions for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   ScheduledUpdateGroupActions: JArray (required)
  ##                              : One or more scheduled actions. The maximum number allowed is 50. 
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_594172 = query.getOrDefault("AutoScalingGroupName")
  valid_594172 = validateParameter(valid_594172, JString, required = true,
                                 default = nil)
  if valid_594172 != nil:
    section.add "AutoScalingGroupName", valid_594172
  var valid_594173 = query.getOrDefault("Action")
  valid_594173 = validateParameter(valid_594173, JString, required = true, default = newJString(
      "BatchPutScheduledUpdateGroupAction"))
  if valid_594173 != nil:
    section.add "Action", valid_594173
  var valid_594174 = query.getOrDefault("ScheduledUpdateGroupActions")
  valid_594174 = validateParameter(valid_594174, JArray, required = true, default = nil)
  if valid_594174 != nil:
    section.add "ScheduledUpdateGroupActions", valid_594174
  var valid_594175 = query.getOrDefault("Version")
  valid_594175 = validateParameter(valid_594175, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_594175 != nil:
    section.add "Version", valid_594175
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594176 = header.getOrDefault("X-Amz-Date")
  valid_594176 = validateParameter(valid_594176, JString, required = false,
                                 default = nil)
  if valid_594176 != nil:
    section.add "X-Amz-Date", valid_594176
  var valid_594177 = header.getOrDefault("X-Amz-Security-Token")
  valid_594177 = validateParameter(valid_594177, JString, required = false,
                                 default = nil)
  if valid_594177 != nil:
    section.add "X-Amz-Security-Token", valid_594177
  var valid_594178 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594178 = validateParameter(valid_594178, JString, required = false,
                                 default = nil)
  if valid_594178 != nil:
    section.add "X-Amz-Content-Sha256", valid_594178
  var valid_594179 = header.getOrDefault("X-Amz-Algorithm")
  valid_594179 = validateParameter(valid_594179, JString, required = false,
                                 default = nil)
  if valid_594179 != nil:
    section.add "X-Amz-Algorithm", valid_594179
  var valid_594180 = header.getOrDefault("X-Amz-Signature")
  valid_594180 = validateParameter(valid_594180, JString, required = false,
                                 default = nil)
  if valid_594180 != nil:
    section.add "X-Amz-Signature", valid_594180
  var valid_594181 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594181 = validateParameter(valid_594181, JString, required = false,
                                 default = nil)
  if valid_594181 != nil:
    section.add "X-Amz-SignedHeaders", valid_594181
  var valid_594182 = header.getOrDefault("X-Amz-Credential")
  valid_594182 = validateParameter(valid_594182, JString, required = false,
                                 default = nil)
  if valid_594182 != nil:
    section.add "X-Amz-Credential", valid_594182
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594183: Call_GetBatchPutScheduledUpdateGroupAction_594169;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates or updates one or more scheduled scaling actions for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.
  ## 
  let valid = call_594183.validator(path, query, header, formData, body)
  let scheme = call_594183.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594183.url(scheme.get, call_594183.host, call_594183.base,
                         call_594183.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594183, url, valid)

proc call*(call_594184: Call_GetBatchPutScheduledUpdateGroupAction_594169;
          AutoScalingGroupName: string; ScheduledUpdateGroupActions: JsonNode;
          Action: string = "BatchPutScheduledUpdateGroupAction";
          Version: string = "2011-01-01"): Recallable =
  ## getBatchPutScheduledUpdateGroupAction
  ## Creates or updates one or more scheduled scaling actions for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   ScheduledUpdateGroupActions: JArray (required)
  ##                              : One or more scheduled actions. The maximum number allowed is 50. 
  ##   Version: string (required)
  var query_594185 = newJObject()
  add(query_594185, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_594185, "Action", newJString(Action))
  if ScheduledUpdateGroupActions != nil:
    query_594185.add "ScheduledUpdateGroupActions", ScheduledUpdateGroupActions
  add(query_594185, "Version", newJString(Version))
  result = call_594184.call(nil, query_594185, nil, nil, nil)

var getBatchPutScheduledUpdateGroupAction* = Call_GetBatchPutScheduledUpdateGroupAction_594169(
    name: "getBatchPutScheduledUpdateGroupAction", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=BatchPutScheduledUpdateGroupAction",
    validator: validate_GetBatchPutScheduledUpdateGroupAction_594170, base: "/",
    url: url_GetBatchPutScheduledUpdateGroupAction_594171,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCompleteLifecycleAction_594224 = ref object of OpenApiRestCall_593437
proc url_PostCompleteLifecycleAction_594226(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCompleteLifecycleAction_594225(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Completes the lifecycle action for the specified token or instance with the specified result.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</p> </li> <li> <p> <b>If you finish before the timeout period ends, complete the lifecycle action.</b> </p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594227 = query.getOrDefault("Action")
  valid_594227 = validateParameter(valid_594227, JString, required = true, default = newJString(
      "CompleteLifecycleAction"))
  if valid_594227 != nil:
    section.add "Action", valid_594227
  var valid_594228 = query.getOrDefault("Version")
  valid_594228 = validateParameter(valid_594228, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_594228 != nil:
    section.add "Version", valid_594228
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594229 = header.getOrDefault("X-Amz-Date")
  valid_594229 = validateParameter(valid_594229, JString, required = false,
                                 default = nil)
  if valid_594229 != nil:
    section.add "X-Amz-Date", valid_594229
  var valid_594230 = header.getOrDefault("X-Amz-Security-Token")
  valid_594230 = validateParameter(valid_594230, JString, required = false,
                                 default = nil)
  if valid_594230 != nil:
    section.add "X-Amz-Security-Token", valid_594230
  var valid_594231 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594231 = validateParameter(valid_594231, JString, required = false,
                                 default = nil)
  if valid_594231 != nil:
    section.add "X-Amz-Content-Sha256", valid_594231
  var valid_594232 = header.getOrDefault("X-Amz-Algorithm")
  valid_594232 = validateParameter(valid_594232, JString, required = false,
                                 default = nil)
  if valid_594232 != nil:
    section.add "X-Amz-Algorithm", valid_594232
  var valid_594233 = header.getOrDefault("X-Amz-Signature")
  valid_594233 = validateParameter(valid_594233, JString, required = false,
                                 default = nil)
  if valid_594233 != nil:
    section.add "X-Amz-Signature", valid_594233
  var valid_594234 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594234 = validateParameter(valid_594234, JString, required = false,
                                 default = nil)
  if valid_594234 != nil:
    section.add "X-Amz-SignedHeaders", valid_594234
  var valid_594235 = header.getOrDefault("X-Amz-Credential")
  valid_594235 = validateParameter(valid_594235, JString, required = false,
                                 default = nil)
  if valid_594235 != nil:
    section.add "X-Amz-Credential", valid_594235
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceId: JString
  ##             : The ID of the instance.
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   LifecycleActionResult: JString (required)
  ##                        : The action for the group to take. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>.
  ##   LifecycleActionToken: JString
  ##                       : A universally unique identifier (UUID) that identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target you specified when you created the lifecycle hook.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_594236 = formData.getOrDefault("AutoScalingGroupName")
  valid_594236 = validateParameter(valid_594236, JString, required = true,
                                 default = nil)
  if valid_594236 != nil:
    section.add "AutoScalingGroupName", valid_594236
  var valid_594237 = formData.getOrDefault("InstanceId")
  valid_594237 = validateParameter(valid_594237, JString, required = false,
                                 default = nil)
  if valid_594237 != nil:
    section.add "InstanceId", valid_594237
  var valid_594238 = formData.getOrDefault("LifecycleHookName")
  valid_594238 = validateParameter(valid_594238, JString, required = true,
                                 default = nil)
  if valid_594238 != nil:
    section.add "LifecycleHookName", valid_594238
  var valid_594239 = formData.getOrDefault("LifecycleActionResult")
  valid_594239 = validateParameter(valid_594239, JString, required = true,
                                 default = nil)
  if valid_594239 != nil:
    section.add "LifecycleActionResult", valid_594239
  var valid_594240 = formData.getOrDefault("LifecycleActionToken")
  valid_594240 = validateParameter(valid_594240, JString, required = false,
                                 default = nil)
  if valid_594240 != nil:
    section.add "LifecycleActionToken", valid_594240
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594241: Call_PostCompleteLifecycleAction_594224; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Completes the lifecycle action for the specified token or instance with the specified result.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</p> </li> <li> <p> <b>If you finish before the timeout period ends, complete the lifecycle action.</b> </p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_594241.validator(path, query, header, formData, body)
  let scheme = call_594241.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594241.url(scheme.get, call_594241.host, call_594241.base,
                         call_594241.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594241, url, valid)

proc call*(call_594242: Call_PostCompleteLifecycleAction_594224;
          AutoScalingGroupName: string; LifecycleHookName: string;
          LifecycleActionResult: string;
          Action: string = "CompleteLifecycleAction"; InstanceId: string = "";
          Version: string = "2011-01-01"; LifecycleActionToken: string = ""): Recallable =
  ## postCompleteLifecycleAction
  ## <p>Completes the lifecycle action for the specified token or instance with the specified result.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</p> </li> <li> <p> <b>If you finish before the timeout period ends, complete the lifecycle action.</b> </p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   InstanceId: string
  ##             : The ID of the instance.
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   LifecycleActionResult: string (required)
  ##                        : The action for the group to take. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>.
  ##   Version: string (required)
  ##   LifecycleActionToken: string
  ##                       : A universally unique identifier (UUID) that identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target you specified when you created the lifecycle hook.
  var query_594243 = newJObject()
  var formData_594244 = newJObject()
  add(formData_594244, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_594243, "Action", newJString(Action))
  add(formData_594244, "InstanceId", newJString(InstanceId))
  add(formData_594244, "LifecycleHookName", newJString(LifecycleHookName))
  add(formData_594244, "LifecycleActionResult", newJString(LifecycleActionResult))
  add(query_594243, "Version", newJString(Version))
  add(formData_594244, "LifecycleActionToken", newJString(LifecycleActionToken))
  result = call_594242.call(nil, query_594243, nil, formData_594244, nil)

var postCompleteLifecycleAction* = Call_PostCompleteLifecycleAction_594224(
    name: "postCompleteLifecycleAction", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=CompleteLifecycleAction",
    validator: validate_PostCompleteLifecycleAction_594225, base: "/",
    url: url_PostCompleteLifecycleAction_594226,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCompleteLifecycleAction_594204 = ref object of OpenApiRestCall_593437
proc url_GetCompleteLifecycleAction_594206(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCompleteLifecycleAction_594205(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Completes the lifecycle action for the specified token or instance with the specified result.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</p> </li> <li> <p> <b>If you finish before the timeout period ends, complete the lifecycle action.</b> </p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleActionResult: JString (required)
  ##                        : The action for the group to take. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>.
  ##   Action: JString (required)
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   InstanceId: JString
  ##             : The ID of the instance.
  ##   Version: JString (required)
  ##   LifecycleActionToken: JString
  ##                       : A universally unique identifier (UUID) that identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target you specified when you created the lifecycle hook.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_594207 = query.getOrDefault("AutoScalingGroupName")
  valid_594207 = validateParameter(valid_594207, JString, required = true,
                                 default = nil)
  if valid_594207 != nil:
    section.add "AutoScalingGroupName", valid_594207
  var valid_594208 = query.getOrDefault("LifecycleActionResult")
  valid_594208 = validateParameter(valid_594208, JString, required = true,
                                 default = nil)
  if valid_594208 != nil:
    section.add "LifecycleActionResult", valid_594208
  var valid_594209 = query.getOrDefault("Action")
  valid_594209 = validateParameter(valid_594209, JString, required = true, default = newJString(
      "CompleteLifecycleAction"))
  if valid_594209 != nil:
    section.add "Action", valid_594209
  var valid_594210 = query.getOrDefault("LifecycleHookName")
  valid_594210 = validateParameter(valid_594210, JString, required = true,
                                 default = nil)
  if valid_594210 != nil:
    section.add "LifecycleHookName", valid_594210
  var valid_594211 = query.getOrDefault("InstanceId")
  valid_594211 = validateParameter(valid_594211, JString, required = false,
                                 default = nil)
  if valid_594211 != nil:
    section.add "InstanceId", valid_594211
  var valid_594212 = query.getOrDefault("Version")
  valid_594212 = validateParameter(valid_594212, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_594212 != nil:
    section.add "Version", valid_594212
  var valid_594213 = query.getOrDefault("LifecycleActionToken")
  valid_594213 = validateParameter(valid_594213, JString, required = false,
                                 default = nil)
  if valid_594213 != nil:
    section.add "LifecycleActionToken", valid_594213
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594214 = header.getOrDefault("X-Amz-Date")
  valid_594214 = validateParameter(valid_594214, JString, required = false,
                                 default = nil)
  if valid_594214 != nil:
    section.add "X-Amz-Date", valid_594214
  var valid_594215 = header.getOrDefault("X-Amz-Security-Token")
  valid_594215 = validateParameter(valid_594215, JString, required = false,
                                 default = nil)
  if valid_594215 != nil:
    section.add "X-Amz-Security-Token", valid_594215
  var valid_594216 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594216 = validateParameter(valid_594216, JString, required = false,
                                 default = nil)
  if valid_594216 != nil:
    section.add "X-Amz-Content-Sha256", valid_594216
  var valid_594217 = header.getOrDefault("X-Amz-Algorithm")
  valid_594217 = validateParameter(valid_594217, JString, required = false,
                                 default = nil)
  if valid_594217 != nil:
    section.add "X-Amz-Algorithm", valid_594217
  var valid_594218 = header.getOrDefault("X-Amz-Signature")
  valid_594218 = validateParameter(valid_594218, JString, required = false,
                                 default = nil)
  if valid_594218 != nil:
    section.add "X-Amz-Signature", valid_594218
  var valid_594219 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594219 = validateParameter(valid_594219, JString, required = false,
                                 default = nil)
  if valid_594219 != nil:
    section.add "X-Amz-SignedHeaders", valid_594219
  var valid_594220 = header.getOrDefault("X-Amz-Credential")
  valid_594220 = validateParameter(valid_594220, JString, required = false,
                                 default = nil)
  if valid_594220 != nil:
    section.add "X-Amz-Credential", valid_594220
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594221: Call_GetCompleteLifecycleAction_594204; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Completes the lifecycle action for the specified token or instance with the specified result.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</p> </li> <li> <p> <b>If you finish before the timeout period ends, complete the lifecycle action.</b> </p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_594221.validator(path, query, header, formData, body)
  let scheme = call_594221.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594221.url(scheme.get, call_594221.host, call_594221.base,
                         call_594221.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594221, url, valid)

proc call*(call_594222: Call_GetCompleteLifecycleAction_594204;
          AutoScalingGroupName: string; LifecycleActionResult: string;
          LifecycleHookName: string; Action: string = "CompleteLifecycleAction";
          InstanceId: string = ""; Version: string = "2011-01-01";
          LifecycleActionToken: string = ""): Recallable =
  ## getCompleteLifecycleAction
  ## <p>Completes the lifecycle action for the specified token or instance with the specified result.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</p> </li> <li> <p> <b>If you finish before the timeout period ends, complete the lifecycle action.</b> </p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleActionResult: string (required)
  ##                        : The action for the group to take. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>.
  ##   Action: string (required)
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   InstanceId: string
  ##             : The ID of the instance.
  ##   Version: string (required)
  ##   LifecycleActionToken: string
  ##                       : A universally unique identifier (UUID) that identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target you specified when you created the lifecycle hook.
  var query_594223 = newJObject()
  add(query_594223, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_594223, "LifecycleActionResult", newJString(LifecycleActionResult))
  add(query_594223, "Action", newJString(Action))
  add(query_594223, "LifecycleHookName", newJString(LifecycleHookName))
  add(query_594223, "InstanceId", newJString(InstanceId))
  add(query_594223, "Version", newJString(Version))
  add(query_594223, "LifecycleActionToken", newJString(LifecycleActionToken))
  result = call_594222.call(nil, query_594223, nil, nil, nil)

var getCompleteLifecycleAction* = Call_GetCompleteLifecycleAction_594204(
    name: "getCompleteLifecycleAction", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=CompleteLifecycleAction",
    validator: validate_GetCompleteLifecycleAction_594205, base: "/",
    url: url_GetCompleteLifecycleAction_594206,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateAutoScalingGroup_594284 = ref object of OpenApiRestCall_593437
proc url_PostCreateAutoScalingGroup_594286(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateAutoScalingGroup_594285(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an Auto Scaling group with the specified name and attributes.</p> <p>If you exceed your maximum limit of Auto Scaling groups, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594287 = query.getOrDefault("Action")
  valid_594287 = validateParameter(valid_594287, JString, required = true,
                                 default = newJString("CreateAutoScalingGroup"))
  if valid_594287 != nil:
    section.add "Action", valid_594287
  var valid_594288 = query.getOrDefault("Version")
  valid_594288 = validateParameter(valid_594288, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_594288 != nil:
    section.add "Version", valid_594288
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594289 = header.getOrDefault("X-Amz-Date")
  valid_594289 = validateParameter(valid_594289, JString, required = false,
                                 default = nil)
  if valid_594289 != nil:
    section.add "X-Amz-Date", valid_594289
  var valid_594290 = header.getOrDefault("X-Amz-Security-Token")
  valid_594290 = validateParameter(valid_594290, JString, required = false,
                                 default = nil)
  if valid_594290 != nil:
    section.add "X-Amz-Security-Token", valid_594290
  var valid_594291 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594291 = validateParameter(valid_594291, JString, required = false,
                                 default = nil)
  if valid_594291 != nil:
    section.add "X-Amz-Content-Sha256", valid_594291
  var valid_594292 = header.getOrDefault("X-Amz-Algorithm")
  valid_594292 = validateParameter(valid_594292, JString, required = false,
                                 default = nil)
  if valid_594292 != nil:
    section.add "X-Amz-Algorithm", valid_594292
  var valid_594293 = header.getOrDefault("X-Amz-Signature")
  valid_594293 = validateParameter(valid_594293, JString, required = false,
                                 default = nil)
  if valid_594293 != nil:
    section.add "X-Amz-Signature", valid_594293
  var valid_594294 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594294 = validateParameter(valid_594294, JString, required = false,
                                 default = nil)
  if valid_594294 != nil:
    section.add "X-Amz-SignedHeaders", valid_594294
  var valid_594295 = header.getOrDefault("X-Amz-Credential")
  valid_594295 = validateParameter(valid_594295, JString, required = false,
                                 default = nil)
  if valid_594295 != nil:
    section.add "X-Amz-Credential", valid_594295
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group. This name must be unique per Region per account.
  ##   LaunchTemplate.LaunchTemplateId: JString
  ##                                  : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  ##   LaunchConfigurationName: JString
  ##                          : <p>The name of the launch configuration.</p> <p>If you do not specify <code>LaunchConfigurationName</code>, you must specify one of the following parameters: <code>InstanceId</code>, <code>LaunchTemplate</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   HealthCheckType: JString
  ##                  : <p>The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. The default value is <code>EC2</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   ServiceLinkedRoleARN: JString
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. By default, Amazon EC2 Auto Scaling uses a service-linked role named AWSServiceRoleForAutoScaling, which it creates if it does not exist. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   DesiredCapacity: JInt
  ##                  : The number of Amazon EC2 instances that the Auto Scaling group attempts to maintain. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group. If you do not specify a desired capacity, the default is the minimum size of the group.
  ##   HealthCheckGracePeriod: JInt
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. During this time, any health check failures for the instance are ignored. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   VPCZoneIdentifier: JString
  ##                    : <p>A comma-separated list of subnet IDs for your virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into a VPC.</p>
  ##   Tags: JArray
  ##       : <p>One or more tags.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   TargetGroupARNs: JArray
  ##                  : <p>The Amazon Resource Names (ARN) of the target groups to associate with the Auto Scaling group. Instances are registered as targets in a target group, and traffic is routed to the target group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AvailabilityZones: JArray
  ##                    : <p>One or more Availability Zones for the group. This parameter is optional if you specify one or more subnets for <code>VPCZoneIdentifier</code>.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into EC2-Classic.</p>
  ##   InstanceId: JString
  ##             : <p>The ID of the instance used to create a launch configuration for the group.</p> <p>When you specify an ID of an instance, Amazon EC2 Auto Scaling creates a new launch configuration and associates it with the group. This launch configuration derives its attributes from the specified instance, except for the block device mapping.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-from-instance.html">Create an Auto Scaling Group Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You must specify one of the following parameters in your request: <code>LaunchConfigurationName</code>, <code>LaunchTemplate</code>, <code>InstanceId</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   MinSize: JInt (required)
  ##          : The minimum size of the group.
  ##   DefaultCooldown: JInt
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MixedInstancesPolicy.LaunchTemplate: JString
  ##                                      : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   LoadBalancerNames: JArray
  ##                    : <p>A list of Classic Load Balancers associated with this Auto Scaling group. For Application Load Balancers and Network Load Balancers, specify a list of target groups using the <code>TargetGroupARNs</code> property instead.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MaxSize: JInt (required)
  ##          : The maximum size of the group.
  ##   MixedInstancesPolicy.InstancesDistribution: JString
  ##                                             : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified when creating a mixed instances policy, the default values are used.</p>
  ##   PlacementGroup: JString
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   NewInstancesProtectedFromScaleIn: JBool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LaunchTemplate.Version: JString
  ##                         : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   TerminationPolicies: JArray
  ##                      : <p>One or more termination policies used to select the instance to terminate. These policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LaunchTemplate.LaunchTemplateName: JString
  ##                                    : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   LifecycleHookSpecificationList: JArray
  ##                                 : One or more lifecycle hooks.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_594296 = formData.getOrDefault("AutoScalingGroupName")
  valid_594296 = validateParameter(valid_594296, JString, required = true,
                                 default = nil)
  if valid_594296 != nil:
    section.add "AutoScalingGroupName", valid_594296
  var valid_594297 = formData.getOrDefault("LaunchTemplate.LaunchTemplateId")
  valid_594297 = validateParameter(valid_594297, JString, required = false,
                                 default = nil)
  if valid_594297 != nil:
    section.add "LaunchTemplate.LaunchTemplateId", valid_594297
  var valid_594298 = formData.getOrDefault("LaunchConfigurationName")
  valid_594298 = validateParameter(valid_594298, JString, required = false,
                                 default = nil)
  if valid_594298 != nil:
    section.add "LaunchConfigurationName", valid_594298
  var valid_594299 = formData.getOrDefault("HealthCheckType")
  valid_594299 = validateParameter(valid_594299, JString, required = false,
                                 default = nil)
  if valid_594299 != nil:
    section.add "HealthCheckType", valid_594299
  var valid_594300 = formData.getOrDefault("ServiceLinkedRoleARN")
  valid_594300 = validateParameter(valid_594300, JString, required = false,
                                 default = nil)
  if valid_594300 != nil:
    section.add "ServiceLinkedRoleARN", valid_594300
  var valid_594301 = formData.getOrDefault("DesiredCapacity")
  valid_594301 = validateParameter(valid_594301, JInt, required = false, default = nil)
  if valid_594301 != nil:
    section.add "DesiredCapacity", valid_594301
  var valid_594302 = formData.getOrDefault("HealthCheckGracePeriod")
  valid_594302 = validateParameter(valid_594302, JInt, required = false, default = nil)
  if valid_594302 != nil:
    section.add "HealthCheckGracePeriod", valid_594302
  var valid_594303 = formData.getOrDefault("VPCZoneIdentifier")
  valid_594303 = validateParameter(valid_594303, JString, required = false,
                                 default = nil)
  if valid_594303 != nil:
    section.add "VPCZoneIdentifier", valid_594303
  var valid_594304 = formData.getOrDefault("Tags")
  valid_594304 = validateParameter(valid_594304, JArray, required = false,
                                 default = nil)
  if valid_594304 != nil:
    section.add "Tags", valid_594304
  var valid_594305 = formData.getOrDefault("TargetGroupARNs")
  valid_594305 = validateParameter(valid_594305, JArray, required = false,
                                 default = nil)
  if valid_594305 != nil:
    section.add "TargetGroupARNs", valid_594305
  var valid_594306 = formData.getOrDefault("AvailabilityZones")
  valid_594306 = validateParameter(valid_594306, JArray, required = false,
                                 default = nil)
  if valid_594306 != nil:
    section.add "AvailabilityZones", valid_594306
  var valid_594307 = formData.getOrDefault("InstanceId")
  valid_594307 = validateParameter(valid_594307, JString, required = false,
                                 default = nil)
  if valid_594307 != nil:
    section.add "InstanceId", valid_594307
  var valid_594308 = formData.getOrDefault("MinSize")
  valid_594308 = validateParameter(valid_594308, JInt, required = true, default = nil)
  if valid_594308 != nil:
    section.add "MinSize", valid_594308
  var valid_594309 = formData.getOrDefault("DefaultCooldown")
  valid_594309 = validateParameter(valid_594309, JInt, required = false, default = nil)
  if valid_594309 != nil:
    section.add "DefaultCooldown", valid_594309
  var valid_594310 = formData.getOrDefault("MixedInstancesPolicy.LaunchTemplate")
  valid_594310 = validateParameter(valid_594310, JString, required = false,
                                 default = nil)
  if valid_594310 != nil:
    section.add "MixedInstancesPolicy.LaunchTemplate", valid_594310
  var valid_594311 = formData.getOrDefault("LoadBalancerNames")
  valid_594311 = validateParameter(valid_594311, JArray, required = false,
                                 default = nil)
  if valid_594311 != nil:
    section.add "LoadBalancerNames", valid_594311
  var valid_594312 = formData.getOrDefault("MaxSize")
  valid_594312 = validateParameter(valid_594312, JInt, required = true, default = nil)
  if valid_594312 != nil:
    section.add "MaxSize", valid_594312
  var valid_594313 = formData.getOrDefault("MixedInstancesPolicy.InstancesDistribution")
  valid_594313 = validateParameter(valid_594313, JString, required = false,
                                 default = nil)
  if valid_594313 != nil:
    section.add "MixedInstancesPolicy.InstancesDistribution", valid_594313
  var valid_594314 = formData.getOrDefault("PlacementGroup")
  valid_594314 = validateParameter(valid_594314, JString, required = false,
                                 default = nil)
  if valid_594314 != nil:
    section.add "PlacementGroup", valid_594314
  var valid_594315 = formData.getOrDefault("NewInstancesProtectedFromScaleIn")
  valid_594315 = validateParameter(valid_594315, JBool, required = false, default = nil)
  if valid_594315 != nil:
    section.add "NewInstancesProtectedFromScaleIn", valid_594315
  var valid_594316 = formData.getOrDefault("LaunchTemplate.Version")
  valid_594316 = validateParameter(valid_594316, JString, required = false,
                                 default = nil)
  if valid_594316 != nil:
    section.add "LaunchTemplate.Version", valid_594316
  var valid_594317 = formData.getOrDefault("TerminationPolicies")
  valid_594317 = validateParameter(valid_594317, JArray, required = false,
                                 default = nil)
  if valid_594317 != nil:
    section.add "TerminationPolicies", valid_594317
  var valid_594318 = formData.getOrDefault("LaunchTemplate.LaunchTemplateName")
  valid_594318 = validateParameter(valid_594318, JString, required = false,
                                 default = nil)
  if valid_594318 != nil:
    section.add "LaunchTemplate.LaunchTemplateName", valid_594318
  var valid_594319 = formData.getOrDefault("LifecycleHookSpecificationList")
  valid_594319 = validateParameter(valid_594319, JArray, required = false,
                                 default = nil)
  if valid_594319 != nil:
    section.add "LifecycleHookSpecificationList", valid_594319
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594320: Call_PostCreateAutoScalingGroup_594284; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an Auto Scaling group with the specified name and attributes.</p> <p>If you exceed your maximum limit of Auto Scaling groups, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_594320.validator(path, query, header, formData, body)
  let scheme = call_594320.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594320.url(scheme.get, call_594320.host, call_594320.base,
                         call_594320.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594320, url, valid)

proc call*(call_594321: Call_PostCreateAutoScalingGroup_594284;
          AutoScalingGroupName: string; MinSize: int; MaxSize: int;
          LaunchTemplateLaunchTemplateId: string = "";
          LaunchConfigurationName: string = ""; HealthCheckType: string = "";
          ServiceLinkedRoleARN: string = ""; DesiredCapacity: int = 0;
          HealthCheckGracePeriod: int = 0; VPCZoneIdentifier: string = "";
          Tags: JsonNode = nil; TargetGroupARNs: JsonNode = nil;
          Action: string = "CreateAutoScalingGroup";
          AvailabilityZones: JsonNode = nil; InstanceId: string = "";
          DefaultCooldown: int = 0; MixedInstancesPolicyLaunchTemplate: string = "";
          LoadBalancerNames: JsonNode = nil;
          MixedInstancesPolicyInstancesDistribution: string = "";
          PlacementGroup: string = "";
          NewInstancesProtectedFromScaleIn: bool = false;
          LaunchTemplateVersion: string = ""; TerminationPolicies: JsonNode = nil;
          Version: string = "2011-01-01";
          LaunchTemplateLaunchTemplateName: string = "";
          LifecycleHookSpecificationList: JsonNode = nil): Recallable =
  ## postCreateAutoScalingGroup
  ## <p>Creates an Auto Scaling group with the specified name and attributes.</p> <p>If you exceed your maximum limit of Auto Scaling groups, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group. This name must be unique per Region per account.
  ##   LaunchTemplateLaunchTemplateId: string
  ##                                 : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  ##   LaunchConfigurationName: string
  ##                          : <p>The name of the launch configuration.</p> <p>If you do not specify <code>LaunchConfigurationName</code>, you must specify one of the following parameters: <code>InstanceId</code>, <code>LaunchTemplate</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   HealthCheckType: string
  ##                  : <p>The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. The default value is <code>EC2</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   ServiceLinkedRoleARN: string
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. By default, Amazon EC2 Auto Scaling uses a service-linked role named AWSServiceRoleForAutoScaling, which it creates if it does not exist. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   DesiredCapacity: int
  ##                  : The number of Amazon EC2 instances that the Auto Scaling group attempts to maintain. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group. If you do not specify a desired capacity, the default is the minimum size of the group.
  ##   HealthCheckGracePeriod: int
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. During this time, any health check failures for the instance are ignored. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   VPCZoneIdentifier: string
  ##                    : <p>A comma-separated list of subnet IDs for your virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into a VPC.</p>
  ##   Tags: JArray
  ##       : <p>One or more tags.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   TargetGroupARNs: JArray
  ##                  : <p>The Amazon Resource Names (ARN) of the target groups to associate with the Auto Scaling group. Instances are registered as targets in a target group, and traffic is routed to the target group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   AvailabilityZones: JArray
  ##                    : <p>One or more Availability Zones for the group. This parameter is optional if you specify one or more subnets for <code>VPCZoneIdentifier</code>.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into EC2-Classic.</p>
  ##   InstanceId: string
  ##             : <p>The ID of the instance used to create a launch configuration for the group.</p> <p>When you specify an ID of an instance, Amazon EC2 Auto Scaling creates a new launch configuration and associates it with the group. This launch configuration derives its attributes from the specified instance, except for the block device mapping.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-from-instance.html">Create an Auto Scaling Group Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You must specify one of the following parameters in your request: <code>LaunchConfigurationName</code>, <code>LaunchTemplate</code>, <code>InstanceId</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   MinSize: int (required)
  ##          : The minimum size of the group.
  ##   DefaultCooldown: int
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MixedInstancesPolicyLaunchTemplate: string
  ##                                     : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   LoadBalancerNames: JArray
  ##                    : <p>A list of Classic Load Balancers associated with this Auto Scaling group. For Application Load Balancers and Network Load Balancers, specify a list of target groups using the <code>TargetGroupARNs</code> property instead.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MaxSize: int (required)
  ##          : The maximum size of the group.
  ##   MixedInstancesPolicyInstancesDistribution: string
  ##                                            : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified when creating a mixed instances policy, the default values are used.</p>
  ##   PlacementGroup: string
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   NewInstancesProtectedFromScaleIn: bool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LaunchTemplateVersion: string
  ##                        : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   TerminationPolicies: JArray
  ##                      : <p>One or more termination policies used to select the instance to terminate. These policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Version: string (required)
  ##   LaunchTemplateLaunchTemplateName: string
  ##                                   : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   LifecycleHookSpecificationList: JArray
  ##                                 : One or more lifecycle hooks.
  var query_594322 = newJObject()
  var formData_594323 = newJObject()
  add(formData_594323, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_594323, "LaunchTemplate.LaunchTemplateId",
      newJString(LaunchTemplateLaunchTemplateId))
  add(formData_594323, "LaunchConfigurationName",
      newJString(LaunchConfigurationName))
  add(formData_594323, "HealthCheckType", newJString(HealthCheckType))
  add(formData_594323, "ServiceLinkedRoleARN", newJString(ServiceLinkedRoleARN))
  add(formData_594323, "DesiredCapacity", newJInt(DesiredCapacity))
  add(formData_594323, "HealthCheckGracePeriod", newJInt(HealthCheckGracePeriod))
  add(formData_594323, "VPCZoneIdentifier", newJString(VPCZoneIdentifier))
  if Tags != nil:
    formData_594323.add "Tags", Tags
  if TargetGroupARNs != nil:
    formData_594323.add "TargetGroupARNs", TargetGroupARNs
  add(query_594322, "Action", newJString(Action))
  if AvailabilityZones != nil:
    formData_594323.add "AvailabilityZones", AvailabilityZones
  add(formData_594323, "InstanceId", newJString(InstanceId))
  add(formData_594323, "MinSize", newJInt(MinSize))
  add(formData_594323, "DefaultCooldown", newJInt(DefaultCooldown))
  add(formData_594323, "MixedInstancesPolicy.LaunchTemplate",
      newJString(MixedInstancesPolicyLaunchTemplate))
  if LoadBalancerNames != nil:
    formData_594323.add "LoadBalancerNames", LoadBalancerNames
  add(formData_594323, "MaxSize", newJInt(MaxSize))
  add(formData_594323, "MixedInstancesPolicy.InstancesDistribution",
      newJString(MixedInstancesPolicyInstancesDistribution))
  add(formData_594323, "PlacementGroup", newJString(PlacementGroup))
  add(formData_594323, "NewInstancesProtectedFromScaleIn",
      newJBool(NewInstancesProtectedFromScaleIn))
  add(formData_594323, "LaunchTemplate.Version", newJString(LaunchTemplateVersion))
  if TerminationPolicies != nil:
    formData_594323.add "TerminationPolicies", TerminationPolicies
  add(query_594322, "Version", newJString(Version))
  add(formData_594323, "LaunchTemplate.LaunchTemplateName",
      newJString(LaunchTemplateLaunchTemplateName))
  if LifecycleHookSpecificationList != nil:
    formData_594323.add "LifecycleHookSpecificationList",
                       LifecycleHookSpecificationList
  result = call_594321.call(nil, query_594322, nil, formData_594323, nil)

var postCreateAutoScalingGroup* = Call_PostCreateAutoScalingGroup_594284(
    name: "postCreateAutoScalingGroup", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=CreateAutoScalingGroup",
    validator: validate_PostCreateAutoScalingGroup_594285, base: "/",
    url: url_PostCreateAutoScalingGroup_594286,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateAutoScalingGroup_594245 = ref object of OpenApiRestCall_593437
proc url_GetCreateAutoScalingGroup_594247(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateAutoScalingGroup_594246(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an Auto Scaling group with the specified name and attributes.</p> <p>If you exceed your maximum limit of Auto Scaling groups, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   HealthCheckGracePeriod: JInt
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. During this time, any health check failures for the instance are ignored. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   TerminationPolicies: JArray
  ##                      : <p>One or more termination policies used to select the instance to terminate. These policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   HealthCheckType: JString
  ##                  : <p>The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. The default value is <code>EC2</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   DesiredCapacity: JInt
  ##                  : The number of Amazon EC2 instances that the Auto Scaling group attempts to maintain. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group. If you do not specify a desired capacity, the default is the minimum size of the group.
  ##   DefaultCooldown: JInt
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LaunchTemplate.LaunchTemplateId: JString
  ##                                  : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  ##   LaunchTemplate.LaunchTemplateName: JString
  ##                                    : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   LifecycleHookSpecificationList: JArray
  ##                                 : One or more lifecycle hooks.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group. This name must be unique per Region per account.
  ##   AvailabilityZones: JArray
  ##                    : <p>One or more Availability Zones for the group. This parameter is optional if you specify one or more subnets for <code>VPCZoneIdentifier</code>.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into EC2-Classic.</p>
  ##   VPCZoneIdentifier: JString
  ##                    : <p>A comma-separated list of subnet IDs for your virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into a VPC.</p>
  ##   NewInstancesProtectedFromScaleIn: JBool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MixedInstancesPolicy.LaunchTemplate: JString
  ##                                      : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   LaunchConfigurationName: JString
  ##                          : <p>The name of the launch configuration.</p> <p>If you do not specify <code>LaunchConfigurationName</code>, you must specify one of the following parameters: <code>InstanceId</code>, <code>LaunchTemplate</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   Tags: JArray
  ##       : <p>One or more tags.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: JString (required)
  ##   PlacementGroup: JString
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   MixedInstancesPolicy.InstancesDistribution: JString
  ##                                             : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified when creating a mixed instances policy, the default values are used.</p>
  ##   LaunchTemplate.Version: JString
  ##                         : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   TargetGroupARNs: JArray
  ##                  : <p>The Amazon Resource Names (ARN) of the target groups to associate with the Auto Scaling group. Instances are registered as targets in a target group, and traffic is routed to the target group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LoadBalancerNames: JArray
  ##                    : <p>A list of Classic Load Balancers associated with this Auto Scaling group. For Application Load Balancers and Network Load Balancers, specify a list of target groups using the <code>TargetGroupARNs</code> property instead.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   InstanceId: JString
  ##             : <p>The ID of the instance used to create a launch configuration for the group.</p> <p>When you specify an ID of an instance, Amazon EC2 Auto Scaling creates a new launch configuration and associates it with the group. This launch configuration derives its attributes from the specified instance, except for the block device mapping.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-from-instance.html">Create an Auto Scaling Group Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You must specify one of the following parameters in your request: <code>LaunchConfigurationName</code>, <code>LaunchTemplate</code>, <code>InstanceId</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   MaxSize: JInt (required)
  ##          : The maximum size of the group.
  ##   MinSize: JInt (required)
  ##          : The minimum size of the group.
  ##   Version: JString (required)
  ##   ServiceLinkedRoleARN: JString
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. By default, Amazon EC2 Auto Scaling uses a service-linked role named AWSServiceRoleForAutoScaling, which it creates if it does not exist. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  section = newJObject()
  var valid_594248 = query.getOrDefault("HealthCheckGracePeriod")
  valid_594248 = validateParameter(valid_594248, JInt, required = false, default = nil)
  if valid_594248 != nil:
    section.add "HealthCheckGracePeriod", valid_594248
  var valid_594249 = query.getOrDefault("TerminationPolicies")
  valid_594249 = validateParameter(valid_594249, JArray, required = false,
                                 default = nil)
  if valid_594249 != nil:
    section.add "TerminationPolicies", valid_594249
  var valid_594250 = query.getOrDefault("HealthCheckType")
  valid_594250 = validateParameter(valid_594250, JString, required = false,
                                 default = nil)
  if valid_594250 != nil:
    section.add "HealthCheckType", valid_594250
  var valid_594251 = query.getOrDefault("DesiredCapacity")
  valid_594251 = validateParameter(valid_594251, JInt, required = false, default = nil)
  if valid_594251 != nil:
    section.add "DesiredCapacity", valid_594251
  var valid_594252 = query.getOrDefault("DefaultCooldown")
  valid_594252 = validateParameter(valid_594252, JInt, required = false, default = nil)
  if valid_594252 != nil:
    section.add "DefaultCooldown", valid_594252
  var valid_594253 = query.getOrDefault("LaunchTemplate.LaunchTemplateId")
  valid_594253 = validateParameter(valid_594253, JString, required = false,
                                 default = nil)
  if valid_594253 != nil:
    section.add "LaunchTemplate.LaunchTemplateId", valid_594253
  var valid_594254 = query.getOrDefault("LaunchTemplate.LaunchTemplateName")
  valid_594254 = validateParameter(valid_594254, JString, required = false,
                                 default = nil)
  if valid_594254 != nil:
    section.add "LaunchTemplate.LaunchTemplateName", valid_594254
  var valid_594255 = query.getOrDefault("LifecycleHookSpecificationList")
  valid_594255 = validateParameter(valid_594255, JArray, required = false,
                                 default = nil)
  if valid_594255 != nil:
    section.add "LifecycleHookSpecificationList", valid_594255
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_594256 = query.getOrDefault("AutoScalingGroupName")
  valid_594256 = validateParameter(valid_594256, JString, required = true,
                                 default = nil)
  if valid_594256 != nil:
    section.add "AutoScalingGroupName", valid_594256
  var valid_594257 = query.getOrDefault("AvailabilityZones")
  valid_594257 = validateParameter(valid_594257, JArray, required = false,
                                 default = nil)
  if valid_594257 != nil:
    section.add "AvailabilityZones", valid_594257
  var valid_594258 = query.getOrDefault("VPCZoneIdentifier")
  valid_594258 = validateParameter(valid_594258, JString, required = false,
                                 default = nil)
  if valid_594258 != nil:
    section.add "VPCZoneIdentifier", valid_594258
  var valid_594259 = query.getOrDefault("NewInstancesProtectedFromScaleIn")
  valid_594259 = validateParameter(valid_594259, JBool, required = false, default = nil)
  if valid_594259 != nil:
    section.add "NewInstancesProtectedFromScaleIn", valid_594259
  var valid_594260 = query.getOrDefault("MixedInstancesPolicy.LaunchTemplate")
  valid_594260 = validateParameter(valid_594260, JString, required = false,
                                 default = nil)
  if valid_594260 != nil:
    section.add "MixedInstancesPolicy.LaunchTemplate", valid_594260
  var valid_594261 = query.getOrDefault("LaunchConfigurationName")
  valid_594261 = validateParameter(valid_594261, JString, required = false,
                                 default = nil)
  if valid_594261 != nil:
    section.add "LaunchConfigurationName", valid_594261
  var valid_594262 = query.getOrDefault("Tags")
  valid_594262 = validateParameter(valid_594262, JArray, required = false,
                                 default = nil)
  if valid_594262 != nil:
    section.add "Tags", valid_594262
  var valid_594263 = query.getOrDefault("Action")
  valid_594263 = validateParameter(valid_594263, JString, required = true,
                                 default = newJString("CreateAutoScalingGroup"))
  if valid_594263 != nil:
    section.add "Action", valid_594263
  var valid_594264 = query.getOrDefault("PlacementGroup")
  valid_594264 = validateParameter(valid_594264, JString, required = false,
                                 default = nil)
  if valid_594264 != nil:
    section.add "PlacementGroup", valid_594264
  var valid_594265 = query.getOrDefault("MixedInstancesPolicy.InstancesDistribution")
  valid_594265 = validateParameter(valid_594265, JString, required = false,
                                 default = nil)
  if valid_594265 != nil:
    section.add "MixedInstancesPolicy.InstancesDistribution", valid_594265
  var valid_594266 = query.getOrDefault("LaunchTemplate.Version")
  valid_594266 = validateParameter(valid_594266, JString, required = false,
                                 default = nil)
  if valid_594266 != nil:
    section.add "LaunchTemplate.Version", valid_594266
  var valid_594267 = query.getOrDefault("TargetGroupARNs")
  valid_594267 = validateParameter(valid_594267, JArray, required = false,
                                 default = nil)
  if valid_594267 != nil:
    section.add "TargetGroupARNs", valid_594267
  var valid_594268 = query.getOrDefault("LoadBalancerNames")
  valid_594268 = validateParameter(valid_594268, JArray, required = false,
                                 default = nil)
  if valid_594268 != nil:
    section.add "LoadBalancerNames", valid_594268
  var valid_594269 = query.getOrDefault("InstanceId")
  valid_594269 = validateParameter(valid_594269, JString, required = false,
                                 default = nil)
  if valid_594269 != nil:
    section.add "InstanceId", valid_594269
  var valid_594270 = query.getOrDefault("MaxSize")
  valid_594270 = validateParameter(valid_594270, JInt, required = true, default = nil)
  if valid_594270 != nil:
    section.add "MaxSize", valid_594270
  var valid_594271 = query.getOrDefault("MinSize")
  valid_594271 = validateParameter(valid_594271, JInt, required = true, default = nil)
  if valid_594271 != nil:
    section.add "MinSize", valid_594271
  var valid_594272 = query.getOrDefault("Version")
  valid_594272 = validateParameter(valid_594272, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_594272 != nil:
    section.add "Version", valid_594272
  var valid_594273 = query.getOrDefault("ServiceLinkedRoleARN")
  valid_594273 = validateParameter(valid_594273, JString, required = false,
                                 default = nil)
  if valid_594273 != nil:
    section.add "ServiceLinkedRoleARN", valid_594273
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594274 = header.getOrDefault("X-Amz-Date")
  valid_594274 = validateParameter(valid_594274, JString, required = false,
                                 default = nil)
  if valid_594274 != nil:
    section.add "X-Amz-Date", valid_594274
  var valid_594275 = header.getOrDefault("X-Amz-Security-Token")
  valid_594275 = validateParameter(valid_594275, JString, required = false,
                                 default = nil)
  if valid_594275 != nil:
    section.add "X-Amz-Security-Token", valid_594275
  var valid_594276 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594276 = validateParameter(valid_594276, JString, required = false,
                                 default = nil)
  if valid_594276 != nil:
    section.add "X-Amz-Content-Sha256", valid_594276
  var valid_594277 = header.getOrDefault("X-Amz-Algorithm")
  valid_594277 = validateParameter(valid_594277, JString, required = false,
                                 default = nil)
  if valid_594277 != nil:
    section.add "X-Amz-Algorithm", valid_594277
  var valid_594278 = header.getOrDefault("X-Amz-Signature")
  valid_594278 = validateParameter(valid_594278, JString, required = false,
                                 default = nil)
  if valid_594278 != nil:
    section.add "X-Amz-Signature", valid_594278
  var valid_594279 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594279 = validateParameter(valid_594279, JString, required = false,
                                 default = nil)
  if valid_594279 != nil:
    section.add "X-Amz-SignedHeaders", valid_594279
  var valid_594280 = header.getOrDefault("X-Amz-Credential")
  valid_594280 = validateParameter(valid_594280, JString, required = false,
                                 default = nil)
  if valid_594280 != nil:
    section.add "X-Amz-Credential", valid_594280
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594281: Call_GetCreateAutoScalingGroup_594245; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an Auto Scaling group with the specified name and attributes.</p> <p>If you exceed your maximum limit of Auto Scaling groups, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_594281.validator(path, query, header, formData, body)
  let scheme = call_594281.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594281.url(scheme.get, call_594281.host, call_594281.base,
                         call_594281.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594281, url, valid)

proc call*(call_594282: Call_GetCreateAutoScalingGroup_594245;
          AutoScalingGroupName: string; MaxSize: int; MinSize: int;
          HealthCheckGracePeriod: int = 0; TerminationPolicies: JsonNode = nil;
          HealthCheckType: string = ""; DesiredCapacity: int = 0;
          DefaultCooldown: int = 0; LaunchTemplateLaunchTemplateId: string = "";
          LaunchTemplateLaunchTemplateName: string = "";
          LifecycleHookSpecificationList: JsonNode = nil;
          AvailabilityZones: JsonNode = nil; VPCZoneIdentifier: string = "";
          NewInstancesProtectedFromScaleIn: bool = false;
          MixedInstancesPolicyLaunchTemplate: string = "";
          LaunchConfigurationName: string = ""; Tags: JsonNode = nil;
          Action: string = "CreateAutoScalingGroup"; PlacementGroup: string = "";
          MixedInstancesPolicyInstancesDistribution: string = "";
          LaunchTemplateVersion: string = ""; TargetGroupARNs: JsonNode = nil;
          LoadBalancerNames: JsonNode = nil; InstanceId: string = "";
          Version: string = "2011-01-01"; ServiceLinkedRoleARN: string = ""): Recallable =
  ## getCreateAutoScalingGroup
  ## <p>Creates an Auto Scaling group with the specified name and attributes.</p> <p>If you exceed your maximum limit of Auto Scaling groups, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   HealthCheckGracePeriod: int
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. During this time, any health check failures for the instance are ignored. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   TerminationPolicies: JArray
  ##                      : <p>One or more termination policies used to select the instance to terminate. These policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   HealthCheckType: string
  ##                  : <p>The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. The default value is <code>EC2</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   DesiredCapacity: int
  ##                  : The number of Amazon EC2 instances that the Auto Scaling group attempts to maintain. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group. If you do not specify a desired capacity, the default is the minimum size of the group.
  ##   DefaultCooldown: int
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LaunchTemplateLaunchTemplateId: string
  ##                                 : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  ##   LaunchTemplateLaunchTemplateName: string
  ##                                   : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   LifecycleHookSpecificationList: JArray
  ##                                 : One or more lifecycle hooks.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group. This name must be unique per Region per account.
  ##   AvailabilityZones: JArray
  ##                    : <p>One or more Availability Zones for the group. This parameter is optional if you specify one or more subnets for <code>VPCZoneIdentifier</code>.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into EC2-Classic.</p>
  ##   VPCZoneIdentifier: string
  ##                    : <p>A comma-separated list of subnet IDs for your virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into a VPC.</p>
  ##   NewInstancesProtectedFromScaleIn: bool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MixedInstancesPolicyLaunchTemplate: string
  ##                                     : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   LaunchConfigurationName: string
  ##                          : <p>The name of the launch configuration.</p> <p>If you do not specify <code>LaunchConfigurationName</code>, you must specify one of the following parameters: <code>InstanceId</code>, <code>LaunchTemplate</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   Tags: JArray
  ##       : <p>One or more tags.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   PlacementGroup: string
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   MixedInstancesPolicyInstancesDistribution: string
  ##                                            : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified when creating a mixed instances policy, the default values are used.</p>
  ##   LaunchTemplateVersion: string
  ##                        : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   TargetGroupARNs: JArray
  ##                  : <p>The Amazon Resource Names (ARN) of the target groups to associate with the Auto Scaling group. Instances are registered as targets in a target group, and traffic is routed to the target group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LoadBalancerNames: JArray
  ##                    : <p>A list of Classic Load Balancers associated with this Auto Scaling group. For Application Load Balancers and Network Load Balancers, specify a list of target groups using the <code>TargetGroupARNs</code> property instead.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   InstanceId: string
  ##             : <p>The ID of the instance used to create a launch configuration for the group.</p> <p>When you specify an ID of an instance, Amazon EC2 Auto Scaling creates a new launch configuration and associates it with the group. This launch configuration derives its attributes from the specified instance, except for the block device mapping.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-from-instance.html">Create an Auto Scaling Group Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You must specify one of the following parameters in your request: <code>LaunchConfigurationName</code>, <code>LaunchTemplate</code>, <code>InstanceId</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   MaxSize: int (required)
  ##          : The maximum size of the group.
  ##   MinSize: int (required)
  ##          : The minimum size of the group.
  ##   Version: string (required)
  ##   ServiceLinkedRoleARN: string
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. By default, Amazon EC2 Auto Scaling uses a service-linked role named AWSServiceRoleForAutoScaling, which it creates if it does not exist. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  var query_594283 = newJObject()
  add(query_594283, "HealthCheckGracePeriod", newJInt(HealthCheckGracePeriod))
  if TerminationPolicies != nil:
    query_594283.add "TerminationPolicies", TerminationPolicies
  add(query_594283, "HealthCheckType", newJString(HealthCheckType))
  add(query_594283, "DesiredCapacity", newJInt(DesiredCapacity))
  add(query_594283, "DefaultCooldown", newJInt(DefaultCooldown))
  add(query_594283, "LaunchTemplate.LaunchTemplateId",
      newJString(LaunchTemplateLaunchTemplateId))
  add(query_594283, "LaunchTemplate.LaunchTemplateName",
      newJString(LaunchTemplateLaunchTemplateName))
  if LifecycleHookSpecificationList != nil:
    query_594283.add "LifecycleHookSpecificationList",
                    LifecycleHookSpecificationList
  add(query_594283, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if AvailabilityZones != nil:
    query_594283.add "AvailabilityZones", AvailabilityZones
  add(query_594283, "VPCZoneIdentifier", newJString(VPCZoneIdentifier))
  add(query_594283, "NewInstancesProtectedFromScaleIn",
      newJBool(NewInstancesProtectedFromScaleIn))
  add(query_594283, "MixedInstancesPolicy.LaunchTemplate",
      newJString(MixedInstancesPolicyLaunchTemplate))
  add(query_594283, "LaunchConfigurationName", newJString(LaunchConfigurationName))
  if Tags != nil:
    query_594283.add "Tags", Tags
  add(query_594283, "Action", newJString(Action))
  add(query_594283, "PlacementGroup", newJString(PlacementGroup))
  add(query_594283, "MixedInstancesPolicy.InstancesDistribution",
      newJString(MixedInstancesPolicyInstancesDistribution))
  add(query_594283, "LaunchTemplate.Version", newJString(LaunchTemplateVersion))
  if TargetGroupARNs != nil:
    query_594283.add "TargetGroupARNs", TargetGroupARNs
  if LoadBalancerNames != nil:
    query_594283.add "LoadBalancerNames", LoadBalancerNames
  add(query_594283, "InstanceId", newJString(InstanceId))
  add(query_594283, "MaxSize", newJInt(MaxSize))
  add(query_594283, "MinSize", newJInt(MinSize))
  add(query_594283, "Version", newJString(Version))
  add(query_594283, "ServiceLinkedRoleARN", newJString(ServiceLinkedRoleARN))
  result = call_594282.call(nil, query_594283, nil, nil, nil)

var getCreateAutoScalingGroup* = Call_GetCreateAutoScalingGroup_594245(
    name: "getCreateAutoScalingGroup", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=CreateAutoScalingGroup",
    validator: validate_GetCreateAutoScalingGroup_594246, base: "/",
    url: url_GetCreateAutoScalingGroup_594247,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateLaunchConfiguration_594357 = ref object of OpenApiRestCall_593437
proc url_PostCreateLaunchConfiguration_594359(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateLaunchConfiguration_594358(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a launch configuration.</p> <p>If you exceed your maximum limit of launch configurations, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html">Launch Configurations</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594360 = query.getOrDefault("Action")
  valid_594360 = validateParameter(valid_594360, JString, required = true, default = newJString(
      "CreateLaunchConfiguration"))
  if valid_594360 != nil:
    section.add "Action", valid_594360
  var valid_594361 = query.getOrDefault("Version")
  valid_594361 = validateParameter(valid_594361, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_594361 != nil:
    section.add "Version", valid_594361
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594362 = header.getOrDefault("X-Amz-Date")
  valid_594362 = validateParameter(valid_594362, JString, required = false,
                                 default = nil)
  if valid_594362 != nil:
    section.add "X-Amz-Date", valid_594362
  var valid_594363 = header.getOrDefault("X-Amz-Security-Token")
  valid_594363 = validateParameter(valid_594363, JString, required = false,
                                 default = nil)
  if valid_594363 != nil:
    section.add "X-Amz-Security-Token", valid_594363
  var valid_594364 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594364 = validateParameter(valid_594364, JString, required = false,
                                 default = nil)
  if valid_594364 != nil:
    section.add "X-Amz-Content-Sha256", valid_594364
  var valid_594365 = header.getOrDefault("X-Amz-Algorithm")
  valid_594365 = validateParameter(valid_594365, JString, required = false,
                                 default = nil)
  if valid_594365 != nil:
    section.add "X-Amz-Algorithm", valid_594365
  var valid_594366 = header.getOrDefault("X-Amz-Signature")
  valid_594366 = validateParameter(valid_594366, JString, required = false,
                                 default = nil)
  if valid_594366 != nil:
    section.add "X-Amz-Signature", valid_594366
  var valid_594367 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594367 = validateParameter(valid_594367, JString, required = false,
                                 default = nil)
  if valid_594367 != nil:
    section.add "X-Amz-SignedHeaders", valid_594367
  var valid_594368 = header.getOrDefault("X-Amz-Credential")
  valid_594368 = validateParameter(valid_594368, JString, required = false,
                                 default = nil)
  if valid_594368 != nil:
    section.add "X-Amz-Credential", valid_594368
  result.add "header", section
  ## parameters in `formData` object:
  ##   PlacementTenancy: JString
  ##                   : <p>The tenancy of the instance. An instance with <code>dedicated</code> tenancy runs on isolated, single-tenant hardware and can only be launched into a VPC.</p> <p>To launch dedicated instances into a shared tenancy VPC (a VPC with the instance placement tenancy attribute set to <code>default</code>), you must set the value of this parameter to <code>dedicated</code>.</p> <p>If you specify <code>PlacementTenancy</code>, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-vpc-tenancy">Instance Placement Tenancy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Valid values: <code>default</code> | <code>dedicated</code> </p>
  ##   BlockDeviceMappings: JArray
  ##                      : A block device mapping, which specifies the block devices for the instance. You can specify virtual devices and EBS volumes. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html">Block Device Mapping</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   AssociatePublicIpAddress: JBool
  ##                           : <p>For Auto Scaling groups that are running in a virtual private cloud (VPC), specifies whether to assign a public IP address to the group's instances. If you specify <code>true</code>, each instance in the Auto Scaling group receives a unique public IP address. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html">Launching Auto Scaling Instances in a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify this parameter, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <note> <p>If the instance is launched into a default subnet, the default is to assign a public IP address, unless you disabled the option to assign a public IP address on the subnet. If the instance is launched into a nondefault subnet, the default is not to assign a public IP address, unless you enabled the option to assign a public IP address on the subnet.</p> </note>
  ##   ClassicLinkVPCSecurityGroups: JArray
  ##                               : <p>The IDs of one or more security groups for the specified ClassicLink-enabled VPC. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify the <code>ClassicLinkVPCId</code> parameter, you must specify this parameter. </p>
  ##   KernelId: JString
  ##           : The ID of the kernel associated with the AMI.
  ##   KeyName: JString
  ##          : The name of the key pair. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Amazon EC2 Key Pairs</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   ImageId: JString
  ##          : <p>The ID of the Amazon Machine Image (AMI) that was assigned during registration. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html">Finding an AMI</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>ImageId</code>.</p>
  ##   LaunchConfigurationName: JString (required)
  ##                          : The name of the launch configuration. This name must be unique per Region per account.
  ##   ClassicLinkVPCId: JString
  ##                   : <p>The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>This parameter can only be used if you are launching EC2-Classic instances. </p>
  ##   InstanceMonitoring.Enabled: JString
  ##                             : Describes whether detailed monitoring is enabled for the Auto Scaling instances.
  ## If <code>true</code>, detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
  ##   IamInstanceProfile: JString
  ##                     : <p>The name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/us-iam-role.html">IAM Role for Applications That Run on Amazon EC2 Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   InstanceId: JString
  ##             : <p>The ID of the instance to use to create the launch configuration. The new launch configuration derives attributes from the instance, except for the block device mapping.</p> <p>To create a launch configuration with a block device mapping or override any other instance attributes, specify them as part of the same request.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-lc-with-instanceID.html">Create a Launch Configuration Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify both <code>ImageId</code> and <code>InstanceType</code>.</p>
  ##   UserData: JString
  ##           : The Base64-encoded user data to make available to the launched EC2 instances. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance Metadata and User Data</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   SecurityGroups: JArray
  ##                 : <p>A list that contains the security groups to assign to the instances in the Auto Scaling group.</p> <p>[EC2-VPC] Specify the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security Groups for Your VPC</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>[EC2-Classic] Specify either the security group names or the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon EC2 Security Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
  ##   RamdiskId: JString
  ##            : The ID of the RAM disk to select.
  ##   EbsOptimized: JBool
  ##               : <p>Specifies whether the launch configuration is optimized for EBS I/O (<code>true</code>) or not (<code>false</code>). The optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization is not available with all instance types. Additional fees are incurred when you enable EBS optimization for an instance type that is not EBS-optimized by default. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html">Amazon EBS-Optimized Instances</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>The default value is <code>false</code>. </p>
  ##   InstanceType: JString
  ##               : <p>Specifies the instance type of the EC2 instance.</p> <p>For information about available instance types, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes">Available Instance Types</a> in the <i>Amazon EC2 User Guide for Linux Instances.</i> </p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>InstanceType</code>.</p>
  ##   SpotPrice: JString
  ##            : <p>The maximum hourly price to be paid for any Spot Instance launched to fulfill the request. Spot Instances are launched when the price you specify exceeds the current Spot market price. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-launch-spot-instances.html">Launching Spot Instances in Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If a Spot price is set, then the Auto Scaling group will only launch instances when the Spot price has been met, regardless of the setting in the Auto Scaling group's <code>DesiredCapacity</code>. </p> <note> <p>When you change your Spot price by creating a new launch configuration, running instances will continue to run as long as the Spot price for those running instances is higher than the current Spot market price. </p> </note>
  section = newJObject()
  var valid_594369 = formData.getOrDefault("PlacementTenancy")
  valid_594369 = validateParameter(valid_594369, JString, required = false,
                                 default = nil)
  if valid_594369 != nil:
    section.add "PlacementTenancy", valid_594369
  var valid_594370 = formData.getOrDefault("BlockDeviceMappings")
  valid_594370 = validateParameter(valid_594370, JArray, required = false,
                                 default = nil)
  if valid_594370 != nil:
    section.add "BlockDeviceMappings", valid_594370
  var valid_594371 = formData.getOrDefault("AssociatePublicIpAddress")
  valid_594371 = validateParameter(valid_594371, JBool, required = false, default = nil)
  if valid_594371 != nil:
    section.add "AssociatePublicIpAddress", valid_594371
  var valid_594372 = formData.getOrDefault("ClassicLinkVPCSecurityGroups")
  valid_594372 = validateParameter(valid_594372, JArray, required = false,
                                 default = nil)
  if valid_594372 != nil:
    section.add "ClassicLinkVPCSecurityGroups", valid_594372
  var valid_594373 = formData.getOrDefault("KernelId")
  valid_594373 = validateParameter(valid_594373, JString, required = false,
                                 default = nil)
  if valid_594373 != nil:
    section.add "KernelId", valid_594373
  var valid_594374 = formData.getOrDefault("KeyName")
  valid_594374 = validateParameter(valid_594374, JString, required = false,
                                 default = nil)
  if valid_594374 != nil:
    section.add "KeyName", valid_594374
  var valid_594375 = formData.getOrDefault("ImageId")
  valid_594375 = validateParameter(valid_594375, JString, required = false,
                                 default = nil)
  if valid_594375 != nil:
    section.add "ImageId", valid_594375
  assert formData != nil, "formData argument is necessary due to required `LaunchConfigurationName` field"
  var valid_594376 = formData.getOrDefault("LaunchConfigurationName")
  valid_594376 = validateParameter(valid_594376, JString, required = true,
                                 default = nil)
  if valid_594376 != nil:
    section.add "LaunchConfigurationName", valid_594376
  var valid_594377 = formData.getOrDefault("ClassicLinkVPCId")
  valid_594377 = validateParameter(valid_594377, JString, required = false,
                                 default = nil)
  if valid_594377 != nil:
    section.add "ClassicLinkVPCId", valid_594377
  var valid_594378 = formData.getOrDefault("InstanceMonitoring.Enabled")
  valid_594378 = validateParameter(valid_594378, JString, required = false,
                                 default = nil)
  if valid_594378 != nil:
    section.add "InstanceMonitoring.Enabled", valid_594378
  var valid_594379 = formData.getOrDefault("IamInstanceProfile")
  valid_594379 = validateParameter(valid_594379, JString, required = false,
                                 default = nil)
  if valid_594379 != nil:
    section.add "IamInstanceProfile", valid_594379
  var valid_594380 = formData.getOrDefault("InstanceId")
  valid_594380 = validateParameter(valid_594380, JString, required = false,
                                 default = nil)
  if valid_594380 != nil:
    section.add "InstanceId", valid_594380
  var valid_594381 = formData.getOrDefault("UserData")
  valid_594381 = validateParameter(valid_594381, JString, required = false,
                                 default = nil)
  if valid_594381 != nil:
    section.add "UserData", valid_594381
  var valid_594382 = formData.getOrDefault("SecurityGroups")
  valid_594382 = validateParameter(valid_594382, JArray, required = false,
                                 default = nil)
  if valid_594382 != nil:
    section.add "SecurityGroups", valid_594382
  var valid_594383 = formData.getOrDefault("RamdiskId")
  valid_594383 = validateParameter(valid_594383, JString, required = false,
                                 default = nil)
  if valid_594383 != nil:
    section.add "RamdiskId", valid_594383
  var valid_594384 = formData.getOrDefault("EbsOptimized")
  valid_594384 = validateParameter(valid_594384, JBool, required = false, default = nil)
  if valid_594384 != nil:
    section.add "EbsOptimized", valid_594384
  var valid_594385 = formData.getOrDefault("InstanceType")
  valid_594385 = validateParameter(valid_594385, JString, required = false,
                                 default = nil)
  if valid_594385 != nil:
    section.add "InstanceType", valid_594385
  var valid_594386 = formData.getOrDefault("SpotPrice")
  valid_594386 = validateParameter(valid_594386, JString, required = false,
                                 default = nil)
  if valid_594386 != nil:
    section.add "SpotPrice", valid_594386
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594387: Call_PostCreateLaunchConfiguration_594357; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a launch configuration.</p> <p>If you exceed your maximum limit of launch configurations, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html">Launch Configurations</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_594387.validator(path, query, header, formData, body)
  let scheme = call_594387.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594387.url(scheme.get, call_594387.host, call_594387.base,
                         call_594387.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594387, url, valid)

proc call*(call_594388: Call_PostCreateLaunchConfiguration_594357;
          LaunchConfigurationName: string; PlacementTenancy: string = "";
          BlockDeviceMappings: JsonNode = nil;
          AssociatePublicIpAddress: bool = false;
          ClassicLinkVPCSecurityGroups: JsonNode = nil; KernelId: string = "";
          KeyName: string = ""; ImageId: string = ""; ClassicLinkVPCId: string = "";
          InstanceMonitoringEnabled: string = ""; IamInstanceProfile: string = "";
          Action: string = "CreateLaunchConfiguration"; InstanceId: string = "";
          UserData: string = ""; SecurityGroups: JsonNode = nil; RamdiskId: string = "";
          EbsOptimized: bool = false; InstanceType: string = ""; SpotPrice: string = "";
          Version: string = "2011-01-01"): Recallable =
  ## postCreateLaunchConfiguration
  ## <p>Creates a launch configuration.</p> <p>If you exceed your maximum limit of launch configurations, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html">Launch Configurations</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   PlacementTenancy: string
  ##                   : <p>The tenancy of the instance. An instance with <code>dedicated</code> tenancy runs on isolated, single-tenant hardware and can only be launched into a VPC.</p> <p>To launch dedicated instances into a shared tenancy VPC (a VPC with the instance placement tenancy attribute set to <code>default</code>), you must set the value of this parameter to <code>dedicated</code>.</p> <p>If you specify <code>PlacementTenancy</code>, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-vpc-tenancy">Instance Placement Tenancy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Valid values: <code>default</code> | <code>dedicated</code> </p>
  ##   BlockDeviceMappings: JArray
  ##                      : A block device mapping, which specifies the block devices for the instance. You can specify virtual devices and EBS volumes. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html">Block Device Mapping</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   AssociatePublicIpAddress: bool
  ##                           : <p>For Auto Scaling groups that are running in a virtual private cloud (VPC), specifies whether to assign a public IP address to the group's instances. If you specify <code>true</code>, each instance in the Auto Scaling group receives a unique public IP address. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html">Launching Auto Scaling Instances in a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify this parameter, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <note> <p>If the instance is launched into a default subnet, the default is to assign a public IP address, unless you disabled the option to assign a public IP address on the subnet. If the instance is launched into a nondefault subnet, the default is not to assign a public IP address, unless you enabled the option to assign a public IP address on the subnet.</p> </note>
  ##   ClassicLinkVPCSecurityGroups: JArray
  ##                               : <p>The IDs of one or more security groups for the specified ClassicLink-enabled VPC. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify the <code>ClassicLinkVPCId</code> parameter, you must specify this parameter. </p>
  ##   KernelId: string
  ##           : The ID of the kernel associated with the AMI.
  ##   KeyName: string
  ##          : The name of the key pair. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Amazon EC2 Key Pairs</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   ImageId: string
  ##          : <p>The ID of the Amazon Machine Image (AMI) that was assigned during registration. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html">Finding an AMI</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>ImageId</code>.</p>
  ##   LaunchConfigurationName: string (required)
  ##                          : The name of the launch configuration. This name must be unique per Region per account.
  ##   ClassicLinkVPCId: string
  ##                   : <p>The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>This parameter can only be used if you are launching EC2-Classic instances. </p>
  ##   InstanceMonitoringEnabled: string
  ##                            : Describes whether detailed monitoring is enabled for the Auto Scaling instances.
  ## If <code>true</code>, detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
  ##   IamInstanceProfile: string
  ##                     : <p>The name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/us-iam-role.html">IAM Role for Applications That Run on Amazon EC2 Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   InstanceId: string
  ##             : <p>The ID of the instance to use to create the launch configuration. The new launch configuration derives attributes from the instance, except for the block device mapping.</p> <p>To create a launch configuration with a block device mapping or override any other instance attributes, specify them as part of the same request.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-lc-with-instanceID.html">Create a Launch Configuration Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify both <code>ImageId</code> and <code>InstanceType</code>.</p>
  ##   UserData: string
  ##           : The Base64-encoded user data to make available to the launched EC2 instances. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance Metadata and User Data</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   SecurityGroups: JArray
  ##                 : <p>A list that contains the security groups to assign to the instances in the Auto Scaling group.</p> <p>[EC2-VPC] Specify the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security Groups for Your VPC</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>[EC2-Classic] Specify either the security group names or the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon EC2 Security Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
  ##   RamdiskId: string
  ##            : The ID of the RAM disk to select.
  ##   EbsOptimized: bool
  ##               : <p>Specifies whether the launch configuration is optimized for EBS I/O (<code>true</code>) or not (<code>false</code>). The optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization is not available with all instance types. Additional fees are incurred when you enable EBS optimization for an instance type that is not EBS-optimized by default. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html">Amazon EBS-Optimized Instances</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>The default value is <code>false</code>. </p>
  ##   InstanceType: string
  ##               : <p>Specifies the instance type of the EC2 instance.</p> <p>For information about available instance types, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes">Available Instance Types</a> in the <i>Amazon EC2 User Guide for Linux Instances.</i> </p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>InstanceType</code>.</p>
  ##   SpotPrice: string
  ##            : <p>The maximum hourly price to be paid for any Spot Instance launched to fulfill the request. Spot Instances are launched when the price you specify exceeds the current Spot market price. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-launch-spot-instances.html">Launching Spot Instances in Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If a Spot price is set, then the Auto Scaling group will only launch instances when the Spot price has been met, regardless of the setting in the Auto Scaling group's <code>DesiredCapacity</code>. </p> <note> <p>When you change your Spot price by creating a new launch configuration, running instances will continue to run as long as the Spot price for those running instances is higher than the current Spot market price. </p> </note>
  ##   Version: string (required)
  var query_594389 = newJObject()
  var formData_594390 = newJObject()
  add(formData_594390, "PlacementTenancy", newJString(PlacementTenancy))
  if BlockDeviceMappings != nil:
    formData_594390.add "BlockDeviceMappings", BlockDeviceMappings
  add(formData_594390, "AssociatePublicIpAddress",
      newJBool(AssociatePublicIpAddress))
  if ClassicLinkVPCSecurityGroups != nil:
    formData_594390.add "ClassicLinkVPCSecurityGroups",
                       ClassicLinkVPCSecurityGroups
  add(formData_594390, "KernelId", newJString(KernelId))
  add(formData_594390, "KeyName", newJString(KeyName))
  add(formData_594390, "ImageId", newJString(ImageId))
  add(formData_594390, "LaunchConfigurationName",
      newJString(LaunchConfigurationName))
  add(formData_594390, "ClassicLinkVPCId", newJString(ClassicLinkVPCId))
  add(formData_594390, "InstanceMonitoring.Enabled",
      newJString(InstanceMonitoringEnabled))
  add(formData_594390, "IamInstanceProfile", newJString(IamInstanceProfile))
  add(query_594389, "Action", newJString(Action))
  add(formData_594390, "InstanceId", newJString(InstanceId))
  add(formData_594390, "UserData", newJString(UserData))
  if SecurityGroups != nil:
    formData_594390.add "SecurityGroups", SecurityGroups
  add(formData_594390, "RamdiskId", newJString(RamdiskId))
  add(formData_594390, "EbsOptimized", newJBool(EbsOptimized))
  add(formData_594390, "InstanceType", newJString(InstanceType))
  add(formData_594390, "SpotPrice", newJString(SpotPrice))
  add(query_594389, "Version", newJString(Version))
  result = call_594388.call(nil, query_594389, nil, formData_594390, nil)

var postCreateLaunchConfiguration* = Call_PostCreateLaunchConfiguration_594357(
    name: "postCreateLaunchConfiguration", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=CreateLaunchConfiguration",
    validator: validate_PostCreateLaunchConfiguration_594358, base: "/",
    url: url_PostCreateLaunchConfiguration_594359,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateLaunchConfiguration_594324 = ref object of OpenApiRestCall_593437
proc url_GetCreateLaunchConfiguration_594326(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateLaunchConfiguration_594325(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a launch configuration.</p> <p>If you exceed your maximum limit of launch configurations, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html">Launch Configurations</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PlacementTenancy: JString
  ##                   : <p>The tenancy of the instance. An instance with <code>dedicated</code> tenancy runs on isolated, single-tenant hardware and can only be launched into a VPC.</p> <p>To launch dedicated instances into a shared tenancy VPC (a VPC with the instance placement tenancy attribute set to <code>default</code>), you must set the value of this parameter to <code>dedicated</code>.</p> <p>If you specify <code>PlacementTenancy</code>, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-vpc-tenancy">Instance Placement Tenancy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Valid values: <code>default</code> | <code>dedicated</code> </p>
  ##   KeyName: JString
  ##          : The name of the key pair. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Amazon EC2 Key Pairs</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   KernelId: JString
  ##           : The ID of the kernel associated with the AMI.
  ##   UserData: JString
  ##           : The Base64-encoded user data to make available to the launched EC2 instances. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance Metadata and User Data</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   LaunchConfigurationName: JString (required)
  ##                          : The name of the launch configuration. This name must be unique per Region per account.
  ##   AssociatePublicIpAddress: JBool
  ##                           : <p>For Auto Scaling groups that are running in a virtual private cloud (VPC), specifies whether to assign a public IP address to the group's instances. If you specify <code>true</code>, each instance in the Auto Scaling group receives a unique public IP address. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html">Launching Auto Scaling Instances in a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify this parameter, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <note> <p>If the instance is launched into a default subnet, the default is to assign a public IP address, unless you disabled the option to assign a public IP address on the subnet. If the instance is launched into a nondefault subnet, the default is not to assign a public IP address, unless you enabled the option to assign a public IP address on the subnet.</p> </note>
  ##   EbsOptimized: JBool
  ##               : <p>Specifies whether the launch configuration is optimized for EBS I/O (<code>true</code>) or not (<code>false</code>). The optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization is not available with all instance types. Additional fees are incurred when you enable EBS optimization for an instance type that is not EBS-optimized by default. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html">Amazon EBS-Optimized Instances</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>The default value is <code>false</code>. </p>
  ##   ImageId: JString
  ##          : <p>The ID of the Amazon Machine Image (AMI) that was assigned during registration. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html">Finding an AMI</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>ImageId</code>.</p>
  ##   Action: JString (required)
  ##   InstanceMonitoring.Enabled: JString
  ##                             : Describes whether detailed monitoring is enabled for the Auto Scaling instances.
  ## If <code>true</code>, detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
  ##   BlockDeviceMappings: JArray
  ##                      : A block device mapping, which specifies the block devices for the instance. You can specify virtual devices and EBS volumes. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html">Block Device Mapping</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   RamdiskId: JString
  ##            : The ID of the RAM disk to select.
  ##   ClassicLinkVPCSecurityGroups: JArray
  ##                               : <p>The IDs of one or more security groups for the specified ClassicLink-enabled VPC. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify the <code>ClassicLinkVPCId</code> parameter, you must specify this parameter. </p>
  ##   InstanceType: JString
  ##               : <p>Specifies the instance type of the EC2 instance.</p> <p>For information about available instance types, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes">Available Instance Types</a> in the <i>Amazon EC2 User Guide for Linux Instances.</i> </p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>InstanceType</code>.</p>
  ##   ClassicLinkVPCId: JString
  ##                   : <p>The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>This parameter can only be used if you are launching EC2-Classic instances. </p>
  ##   InstanceId: JString
  ##             : <p>The ID of the instance to use to create the launch configuration. The new launch configuration derives attributes from the instance, except for the block device mapping.</p> <p>To create a launch configuration with a block device mapping or override any other instance attributes, specify them as part of the same request.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-lc-with-instanceID.html">Create a Launch Configuration Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify both <code>ImageId</code> and <code>InstanceType</code>.</p>
  ##   IamInstanceProfile: JString
  ##                     : <p>The name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/us-iam-role.html">IAM Role for Applications That Run on Amazon EC2 Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Version: JString (required)
  ##   SecurityGroups: JArray
  ##                 : <p>A list that contains the security groups to assign to the instances in the Auto Scaling group.</p> <p>[EC2-VPC] Specify the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security Groups for Your VPC</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>[EC2-Classic] Specify either the security group names or the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon EC2 Security Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
  ##   SpotPrice: JString
  ##            : <p>The maximum hourly price to be paid for any Spot Instance launched to fulfill the request. Spot Instances are launched when the price you specify exceeds the current Spot market price. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-launch-spot-instances.html">Launching Spot Instances in Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If a Spot price is set, then the Auto Scaling group will only launch instances when the Spot price has been met, regardless of the setting in the Auto Scaling group's <code>DesiredCapacity</code>. </p> <note> <p>When you change your Spot price by creating a new launch configuration, running instances will continue to run as long as the Spot price for those running instances is higher than the current Spot market price. </p> </note>
  section = newJObject()
  var valid_594327 = query.getOrDefault("PlacementTenancy")
  valid_594327 = validateParameter(valid_594327, JString, required = false,
                                 default = nil)
  if valid_594327 != nil:
    section.add "PlacementTenancy", valid_594327
  var valid_594328 = query.getOrDefault("KeyName")
  valid_594328 = validateParameter(valid_594328, JString, required = false,
                                 default = nil)
  if valid_594328 != nil:
    section.add "KeyName", valid_594328
  var valid_594329 = query.getOrDefault("KernelId")
  valid_594329 = validateParameter(valid_594329, JString, required = false,
                                 default = nil)
  if valid_594329 != nil:
    section.add "KernelId", valid_594329
  var valid_594330 = query.getOrDefault("UserData")
  valid_594330 = validateParameter(valid_594330, JString, required = false,
                                 default = nil)
  if valid_594330 != nil:
    section.add "UserData", valid_594330
  assert query != nil, "query argument is necessary due to required `LaunchConfigurationName` field"
  var valid_594331 = query.getOrDefault("LaunchConfigurationName")
  valid_594331 = validateParameter(valid_594331, JString, required = true,
                                 default = nil)
  if valid_594331 != nil:
    section.add "LaunchConfigurationName", valid_594331
  var valid_594332 = query.getOrDefault("AssociatePublicIpAddress")
  valid_594332 = validateParameter(valid_594332, JBool, required = false, default = nil)
  if valid_594332 != nil:
    section.add "AssociatePublicIpAddress", valid_594332
  var valid_594333 = query.getOrDefault("EbsOptimized")
  valid_594333 = validateParameter(valid_594333, JBool, required = false, default = nil)
  if valid_594333 != nil:
    section.add "EbsOptimized", valid_594333
  var valid_594334 = query.getOrDefault("ImageId")
  valid_594334 = validateParameter(valid_594334, JString, required = false,
                                 default = nil)
  if valid_594334 != nil:
    section.add "ImageId", valid_594334
  var valid_594335 = query.getOrDefault("Action")
  valid_594335 = validateParameter(valid_594335, JString, required = true, default = newJString(
      "CreateLaunchConfiguration"))
  if valid_594335 != nil:
    section.add "Action", valid_594335
  var valid_594336 = query.getOrDefault("InstanceMonitoring.Enabled")
  valid_594336 = validateParameter(valid_594336, JString, required = false,
                                 default = nil)
  if valid_594336 != nil:
    section.add "InstanceMonitoring.Enabled", valid_594336
  var valid_594337 = query.getOrDefault("BlockDeviceMappings")
  valid_594337 = validateParameter(valid_594337, JArray, required = false,
                                 default = nil)
  if valid_594337 != nil:
    section.add "BlockDeviceMappings", valid_594337
  var valid_594338 = query.getOrDefault("RamdiskId")
  valid_594338 = validateParameter(valid_594338, JString, required = false,
                                 default = nil)
  if valid_594338 != nil:
    section.add "RamdiskId", valid_594338
  var valid_594339 = query.getOrDefault("ClassicLinkVPCSecurityGroups")
  valid_594339 = validateParameter(valid_594339, JArray, required = false,
                                 default = nil)
  if valid_594339 != nil:
    section.add "ClassicLinkVPCSecurityGroups", valid_594339
  var valid_594340 = query.getOrDefault("InstanceType")
  valid_594340 = validateParameter(valid_594340, JString, required = false,
                                 default = nil)
  if valid_594340 != nil:
    section.add "InstanceType", valid_594340
  var valid_594341 = query.getOrDefault("ClassicLinkVPCId")
  valid_594341 = validateParameter(valid_594341, JString, required = false,
                                 default = nil)
  if valid_594341 != nil:
    section.add "ClassicLinkVPCId", valid_594341
  var valid_594342 = query.getOrDefault("InstanceId")
  valid_594342 = validateParameter(valid_594342, JString, required = false,
                                 default = nil)
  if valid_594342 != nil:
    section.add "InstanceId", valid_594342
  var valid_594343 = query.getOrDefault("IamInstanceProfile")
  valid_594343 = validateParameter(valid_594343, JString, required = false,
                                 default = nil)
  if valid_594343 != nil:
    section.add "IamInstanceProfile", valid_594343
  var valid_594344 = query.getOrDefault("Version")
  valid_594344 = validateParameter(valid_594344, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_594344 != nil:
    section.add "Version", valid_594344
  var valid_594345 = query.getOrDefault("SecurityGroups")
  valid_594345 = validateParameter(valid_594345, JArray, required = false,
                                 default = nil)
  if valid_594345 != nil:
    section.add "SecurityGroups", valid_594345
  var valid_594346 = query.getOrDefault("SpotPrice")
  valid_594346 = validateParameter(valid_594346, JString, required = false,
                                 default = nil)
  if valid_594346 != nil:
    section.add "SpotPrice", valid_594346
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594347 = header.getOrDefault("X-Amz-Date")
  valid_594347 = validateParameter(valid_594347, JString, required = false,
                                 default = nil)
  if valid_594347 != nil:
    section.add "X-Amz-Date", valid_594347
  var valid_594348 = header.getOrDefault("X-Amz-Security-Token")
  valid_594348 = validateParameter(valid_594348, JString, required = false,
                                 default = nil)
  if valid_594348 != nil:
    section.add "X-Amz-Security-Token", valid_594348
  var valid_594349 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594349 = validateParameter(valid_594349, JString, required = false,
                                 default = nil)
  if valid_594349 != nil:
    section.add "X-Amz-Content-Sha256", valid_594349
  var valid_594350 = header.getOrDefault("X-Amz-Algorithm")
  valid_594350 = validateParameter(valid_594350, JString, required = false,
                                 default = nil)
  if valid_594350 != nil:
    section.add "X-Amz-Algorithm", valid_594350
  var valid_594351 = header.getOrDefault("X-Amz-Signature")
  valid_594351 = validateParameter(valid_594351, JString, required = false,
                                 default = nil)
  if valid_594351 != nil:
    section.add "X-Amz-Signature", valid_594351
  var valid_594352 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594352 = validateParameter(valid_594352, JString, required = false,
                                 default = nil)
  if valid_594352 != nil:
    section.add "X-Amz-SignedHeaders", valid_594352
  var valid_594353 = header.getOrDefault("X-Amz-Credential")
  valid_594353 = validateParameter(valid_594353, JString, required = false,
                                 default = nil)
  if valid_594353 != nil:
    section.add "X-Amz-Credential", valid_594353
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594354: Call_GetCreateLaunchConfiguration_594324; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a launch configuration.</p> <p>If you exceed your maximum limit of launch configurations, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html">Launch Configurations</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_594354.validator(path, query, header, formData, body)
  let scheme = call_594354.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594354.url(scheme.get, call_594354.host, call_594354.base,
                         call_594354.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594354, url, valid)

proc call*(call_594355: Call_GetCreateLaunchConfiguration_594324;
          LaunchConfigurationName: string; PlacementTenancy: string = "";
          KeyName: string = ""; KernelId: string = ""; UserData: string = "";
          AssociatePublicIpAddress: bool = false; EbsOptimized: bool = false;
          ImageId: string = ""; Action: string = "CreateLaunchConfiguration";
          InstanceMonitoringEnabled: string = "";
          BlockDeviceMappings: JsonNode = nil; RamdiskId: string = "";
          ClassicLinkVPCSecurityGroups: JsonNode = nil; InstanceType: string = "";
          ClassicLinkVPCId: string = ""; InstanceId: string = "";
          IamInstanceProfile: string = ""; Version: string = "2011-01-01";
          SecurityGroups: JsonNode = nil; SpotPrice: string = ""): Recallable =
  ## getCreateLaunchConfiguration
  ## <p>Creates a launch configuration.</p> <p>If you exceed your maximum limit of launch configurations, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html">Launch Configurations</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   PlacementTenancy: string
  ##                   : <p>The tenancy of the instance. An instance with <code>dedicated</code> tenancy runs on isolated, single-tenant hardware and can only be launched into a VPC.</p> <p>To launch dedicated instances into a shared tenancy VPC (a VPC with the instance placement tenancy attribute set to <code>default</code>), you must set the value of this parameter to <code>dedicated</code>.</p> <p>If you specify <code>PlacementTenancy</code>, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-vpc-tenancy">Instance Placement Tenancy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Valid values: <code>default</code> | <code>dedicated</code> </p>
  ##   KeyName: string
  ##          : The name of the key pair. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Amazon EC2 Key Pairs</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   KernelId: string
  ##           : The ID of the kernel associated with the AMI.
  ##   UserData: string
  ##           : The Base64-encoded user data to make available to the launched EC2 instances. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance Metadata and User Data</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   LaunchConfigurationName: string (required)
  ##                          : The name of the launch configuration. This name must be unique per Region per account.
  ##   AssociatePublicIpAddress: bool
  ##                           : <p>For Auto Scaling groups that are running in a virtual private cloud (VPC), specifies whether to assign a public IP address to the group's instances. If you specify <code>true</code>, each instance in the Auto Scaling group receives a unique public IP address. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html">Launching Auto Scaling Instances in a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify this parameter, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <note> <p>If the instance is launched into a default subnet, the default is to assign a public IP address, unless you disabled the option to assign a public IP address on the subnet. If the instance is launched into a nondefault subnet, the default is not to assign a public IP address, unless you enabled the option to assign a public IP address on the subnet.</p> </note>
  ##   EbsOptimized: bool
  ##               : <p>Specifies whether the launch configuration is optimized for EBS I/O (<code>true</code>) or not (<code>false</code>). The optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization is not available with all instance types. Additional fees are incurred when you enable EBS optimization for an instance type that is not EBS-optimized by default. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html">Amazon EBS-Optimized Instances</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>The default value is <code>false</code>. </p>
  ##   ImageId: string
  ##          : <p>The ID of the Amazon Machine Image (AMI) that was assigned during registration. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html">Finding an AMI</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>ImageId</code>.</p>
  ##   Action: string (required)
  ##   InstanceMonitoringEnabled: string
  ##                            : Describes whether detailed monitoring is enabled for the Auto Scaling instances.
  ## If <code>true</code>, detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
  ##   BlockDeviceMappings: JArray
  ##                      : A block device mapping, which specifies the block devices for the instance. You can specify virtual devices and EBS volumes. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html">Block Device Mapping</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   RamdiskId: string
  ##            : The ID of the RAM disk to select.
  ##   ClassicLinkVPCSecurityGroups: JArray
  ##                               : <p>The IDs of one or more security groups for the specified ClassicLink-enabled VPC. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify the <code>ClassicLinkVPCId</code> parameter, you must specify this parameter. </p>
  ##   InstanceType: string
  ##               : <p>Specifies the instance type of the EC2 instance.</p> <p>For information about available instance types, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes">Available Instance Types</a> in the <i>Amazon EC2 User Guide for Linux Instances.</i> </p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>InstanceType</code>.</p>
  ##   ClassicLinkVPCId: string
  ##                   : <p>The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>This parameter can only be used if you are launching EC2-Classic instances. </p>
  ##   InstanceId: string
  ##             : <p>The ID of the instance to use to create the launch configuration. The new launch configuration derives attributes from the instance, except for the block device mapping.</p> <p>To create a launch configuration with a block device mapping or override any other instance attributes, specify them as part of the same request.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-lc-with-instanceID.html">Create a Launch Configuration Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify both <code>ImageId</code> and <code>InstanceType</code>.</p>
  ##   IamInstanceProfile: string
  ##                     : <p>The name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/us-iam-role.html">IAM Role for Applications That Run on Amazon EC2 Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Version: string (required)
  ##   SecurityGroups: JArray
  ##                 : <p>A list that contains the security groups to assign to the instances in the Auto Scaling group.</p> <p>[EC2-VPC] Specify the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security Groups for Your VPC</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>[EC2-Classic] Specify either the security group names or the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon EC2 Security Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
  ##   SpotPrice: string
  ##            : <p>The maximum hourly price to be paid for any Spot Instance launched to fulfill the request. Spot Instances are launched when the price you specify exceeds the current Spot market price. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-launch-spot-instances.html">Launching Spot Instances in Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If a Spot price is set, then the Auto Scaling group will only launch instances when the Spot price has been met, regardless of the setting in the Auto Scaling group's <code>DesiredCapacity</code>. </p> <note> <p>When you change your Spot price by creating a new launch configuration, running instances will continue to run as long as the Spot price for those running instances is higher than the current Spot market price. </p> </note>
  var query_594356 = newJObject()
  add(query_594356, "PlacementTenancy", newJString(PlacementTenancy))
  add(query_594356, "KeyName", newJString(KeyName))
  add(query_594356, "KernelId", newJString(KernelId))
  add(query_594356, "UserData", newJString(UserData))
  add(query_594356, "LaunchConfigurationName", newJString(LaunchConfigurationName))
  add(query_594356, "AssociatePublicIpAddress", newJBool(AssociatePublicIpAddress))
  add(query_594356, "EbsOptimized", newJBool(EbsOptimized))
  add(query_594356, "ImageId", newJString(ImageId))
  add(query_594356, "Action", newJString(Action))
  add(query_594356, "InstanceMonitoring.Enabled",
      newJString(InstanceMonitoringEnabled))
  if BlockDeviceMappings != nil:
    query_594356.add "BlockDeviceMappings", BlockDeviceMappings
  add(query_594356, "RamdiskId", newJString(RamdiskId))
  if ClassicLinkVPCSecurityGroups != nil:
    query_594356.add "ClassicLinkVPCSecurityGroups", ClassicLinkVPCSecurityGroups
  add(query_594356, "InstanceType", newJString(InstanceType))
  add(query_594356, "ClassicLinkVPCId", newJString(ClassicLinkVPCId))
  add(query_594356, "InstanceId", newJString(InstanceId))
  add(query_594356, "IamInstanceProfile", newJString(IamInstanceProfile))
  add(query_594356, "Version", newJString(Version))
  if SecurityGroups != nil:
    query_594356.add "SecurityGroups", SecurityGroups
  add(query_594356, "SpotPrice", newJString(SpotPrice))
  result = call_594355.call(nil, query_594356, nil, nil, nil)

var getCreateLaunchConfiguration* = Call_GetCreateLaunchConfiguration_594324(
    name: "getCreateLaunchConfiguration", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=CreateLaunchConfiguration",
    validator: validate_GetCreateLaunchConfiguration_594325, base: "/",
    url: url_GetCreateLaunchConfiguration_594326,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateOrUpdateTags_594407 = ref object of OpenApiRestCall_593437
proc url_PostCreateOrUpdateTags_594409(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateOrUpdateTags_594408(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates or updates tags for the specified Auto Scaling group.</p> <p>When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594410 = query.getOrDefault("Action")
  valid_594410 = validateParameter(valid_594410, JString, required = true,
                                 default = newJString("CreateOrUpdateTags"))
  if valid_594410 != nil:
    section.add "Action", valid_594410
  var valid_594411 = query.getOrDefault("Version")
  valid_594411 = validateParameter(valid_594411, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_594411 != nil:
    section.add "Version", valid_594411
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594412 = header.getOrDefault("X-Amz-Date")
  valid_594412 = validateParameter(valid_594412, JString, required = false,
                                 default = nil)
  if valid_594412 != nil:
    section.add "X-Amz-Date", valid_594412
  var valid_594413 = header.getOrDefault("X-Amz-Security-Token")
  valid_594413 = validateParameter(valid_594413, JString, required = false,
                                 default = nil)
  if valid_594413 != nil:
    section.add "X-Amz-Security-Token", valid_594413
  var valid_594414 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594414 = validateParameter(valid_594414, JString, required = false,
                                 default = nil)
  if valid_594414 != nil:
    section.add "X-Amz-Content-Sha256", valid_594414
  var valid_594415 = header.getOrDefault("X-Amz-Algorithm")
  valid_594415 = validateParameter(valid_594415, JString, required = false,
                                 default = nil)
  if valid_594415 != nil:
    section.add "X-Amz-Algorithm", valid_594415
  var valid_594416 = header.getOrDefault("X-Amz-Signature")
  valid_594416 = validateParameter(valid_594416, JString, required = false,
                                 default = nil)
  if valid_594416 != nil:
    section.add "X-Amz-Signature", valid_594416
  var valid_594417 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594417 = validateParameter(valid_594417, JString, required = false,
                                 default = nil)
  if valid_594417 != nil:
    section.add "X-Amz-SignedHeaders", valid_594417
  var valid_594418 = header.getOrDefault("X-Amz-Credential")
  valid_594418 = validateParameter(valid_594418, JString, required = false,
                                 default = nil)
  if valid_594418 != nil:
    section.add "X-Amz-Credential", valid_594418
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray (required)
  ##       : One or more tags.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Tags` field"
  var valid_594419 = formData.getOrDefault("Tags")
  valid_594419 = validateParameter(valid_594419, JArray, required = true, default = nil)
  if valid_594419 != nil:
    section.add "Tags", valid_594419
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594420: Call_PostCreateOrUpdateTags_594407; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates or updates tags for the specified Auto Scaling group.</p> <p>When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_594420.validator(path, query, header, formData, body)
  let scheme = call_594420.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594420.url(scheme.get, call_594420.host, call_594420.base,
                         call_594420.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594420, url, valid)

proc call*(call_594421: Call_PostCreateOrUpdateTags_594407; Tags: JsonNode;
          Action: string = "CreateOrUpdateTags"; Version: string = "2011-01-01"): Recallable =
  ## postCreateOrUpdateTags
  ## <p>Creates or updates tags for the specified Auto Scaling group.</p> <p>When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Tags: JArray (required)
  ##       : One or more tags.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594422 = newJObject()
  var formData_594423 = newJObject()
  if Tags != nil:
    formData_594423.add "Tags", Tags
  add(query_594422, "Action", newJString(Action))
  add(query_594422, "Version", newJString(Version))
  result = call_594421.call(nil, query_594422, nil, formData_594423, nil)

var postCreateOrUpdateTags* = Call_PostCreateOrUpdateTags_594407(
    name: "postCreateOrUpdateTags", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=CreateOrUpdateTags",
    validator: validate_PostCreateOrUpdateTags_594408, base: "/",
    url: url_PostCreateOrUpdateTags_594409, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateOrUpdateTags_594391 = ref object of OpenApiRestCall_593437
proc url_GetCreateOrUpdateTags_594393(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateOrUpdateTags_594392(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates or updates tags for the specified Auto Scaling group.</p> <p>When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : One or more tags.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_594394 = query.getOrDefault("Tags")
  valid_594394 = validateParameter(valid_594394, JArray, required = true, default = nil)
  if valid_594394 != nil:
    section.add "Tags", valid_594394
  var valid_594395 = query.getOrDefault("Action")
  valid_594395 = validateParameter(valid_594395, JString, required = true,
                                 default = newJString("CreateOrUpdateTags"))
  if valid_594395 != nil:
    section.add "Action", valid_594395
  var valid_594396 = query.getOrDefault("Version")
  valid_594396 = validateParameter(valid_594396, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_594396 != nil:
    section.add "Version", valid_594396
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594397 = header.getOrDefault("X-Amz-Date")
  valid_594397 = validateParameter(valid_594397, JString, required = false,
                                 default = nil)
  if valid_594397 != nil:
    section.add "X-Amz-Date", valid_594397
  var valid_594398 = header.getOrDefault("X-Amz-Security-Token")
  valid_594398 = validateParameter(valid_594398, JString, required = false,
                                 default = nil)
  if valid_594398 != nil:
    section.add "X-Amz-Security-Token", valid_594398
  var valid_594399 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594399 = validateParameter(valid_594399, JString, required = false,
                                 default = nil)
  if valid_594399 != nil:
    section.add "X-Amz-Content-Sha256", valid_594399
  var valid_594400 = header.getOrDefault("X-Amz-Algorithm")
  valid_594400 = validateParameter(valid_594400, JString, required = false,
                                 default = nil)
  if valid_594400 != nil:
    section.add "X-Amz-Algorithm", valid_594400
  var valid_594401 = header.getOrDefault("X-Amz-Signature")
  valid_594401 = validateParameter(valid_594401, JString, required = false,
                                 default = nil)
  if valid_594401 != nil:
    section.add "X-Amz-Signature", valid_594401
  var valid_594402 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594402 = validateParameter(valid_594402, JString, required = false,
                                 default = nil)
  if valid_594402 != nil:
    section.add "X-Amz-SignedHeaders", valid_594402
  var valid_594403 = header.getOrDefault("X-Amz-Credential")
  valid_594403 = validateParameter(valid_594403, JString, required = false,
                                 default = nil)
  if valid_594403 != nil:
    section.add "X-Amz-Credential", valid_594403
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594404: Call_GetCreateOrUpdateTags_594391; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates or updates tags for the specified Auto Scaling group.</p> <p>When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_594404.validator(path, query, header, formData, body)
  let scheme = call_594404.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594404.url(scheme.get, call_594404.host, call_594404.base,
                         call_594404.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594404, url, valid)

proc call*(call_594405: Call_GetCreateOrUpdateTags_594391; Tags: JsonNode;
          Action: string = "CreateOrUpdateTags"; Version: string = "2011-01-01"): Recallable =
  ## getCreateOrUpdateTags
  ## <p>Creates or updates tags for the specified Auto Scaling group.</p> <p>When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Tags: JArray (required)
  ##       : One or more tags.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594406 = newJObject()
  if Tags != nil:
    query_594406.add "Tags", Tags
  add(query_594406, "Action", newJString(Action))
  add(query_594406, "Version", newJString(Version))
  result = call_594405.call(nil, query_594406, nil, nil, nil)

var getCreateOrUpdateTags* = Call_GetCreateOrUpdateTags_594391(
    name: "getCreateOrUpdateTags", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=CreateOrUpdateTags",
    validator: validate_GetCreateOrUpdateTags_594392, base: "/",
    url: url_GetCreateOrUpdateTags_594393, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteAutoScalingGroup_594441 = ref object of OpenApiRestCall_593437
proc url_PostDeleteAutoScalingGroup_594443(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteAutoScalingGroup_594442(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified Auto Scaling group.</p> <p>If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed.</p> <p>If the group has policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.</p> <p>To remove instances from the Auto Scaling group before deleting it, call <a>DetachInstances</a> with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.</p> <p>To terminate all instances before deleting the Auto Scaling group, call <a>UpdateAutoScalingGroup</a> and set the minimum size and desired capacity of the Auto Scaling group to zero.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594444 = query.getOrDefault("Action")
  valid_594444 = validateParameter(valid_594444, JString, required = true,
                                 default = newJString("DeleteAutoScalingGroup"))
  if valid_594444 != nil:
    section.add "Action", valid_594444
  var valid_594445 = query.getOrDefault("Version")
  valid_594445 = validateParameter(valid_594445, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_594445 != nil:
    section.add "Version", valid_594445
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594446 = header.getOrDefault("X-Amz-Date")
  valid_594446 = validateParameter(valid_594446, JString, required = false,
                                 default = nil)
  if valid_594446 != nil:
    section.add "X-Amz-Date", valid_594446
  var valid_594447 = header.getOrDefault("X-Amz-Security-Token")
  valid_594447 = validateParameter(valid_594447, JString, required = false,
                                 default = nil)
  if valid_594447 != nil:
    section.add "X-Amz-Security-Token", valid_594447
  var valid_594448 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594448 = validateParameter(valid_594448, JString, required = false,
                                 default = nil)
  if valid_594448 != nil:
    section.add "X-Amz-Content-Sha256", valid_594448
  var valid_594449 = header.getOrDefault("X-Amz-Algorithm")
  valid_594449 = validateParameter(valid_594449, JString, required = false,
                                 default = nil)
  if valid_594449 != nil:
    section.add "X-Amz-Algorithm", valid_594449
  var valid_594450 = header.getOrDefault("X-Amz-Signature")
  valid_594450 = validateParameter(valid_594450, JString, required = false,
                                 default = nil)
  if valid_594450 != nil:
    section.add "X-Amz-Signature", valid_594450
  var valid_594451 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594451 = validateParameter(valid_594451, JString, required = false,
                                 default = nil)
  if valid_594451 != nil:
    section.add "X-Amz-SignedHeaders", valid_594451
  var valid_594452 = header.getOrDefault("X-Amz-Credential")
  valid_594452 = validateParameter(valid_594452, JString, required = false,
                                 default = nil)
  if valid_594452 != nil:
    section.add "X-Amz-Credential", valid_594452
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   ForceDelete: JBool
  ##              : Specifies that the group is to be deleted along with all instances associated with the group, without waiting for all instances to be terminated. This parameter also deletes any lifecycle actions associated with the group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_594453 = formData.getOrDefault("AutoScalingGroupName")
  valid_594453 = validateParameter(valid_594453, JString, required = true,
                                 default = nil)
  if valid_594453 != nil:
    section.add "AutoScalingGroupName", valid_594453
  var valid_594454 = formData.getOrDefault("ForceDelete")
  valid_594454 = validateParameter(valid_594454, JBool, required = false, default = nil)
  if valid_594454 != nil:
    section.add "ForceDelete", valid_594454
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594455: Call_PostDeleteAutoScalingGroup_594441; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified Auto Scaling group.</p> <p>If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed.</p> <p>If the group has policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.</p> <p>To remove instances from the Auto Scaling group before deleting it, call <a>DetachInstances</a> with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.</p> <p>To terminate all instances before deleting the Auto Scaling group, call <a>UpdateAutoScalingGroup</a> and set the minimum size and desired capacity of the Auto Scaling group to zero.</p>
  ## 
  let valid = call_594455.validator(path, query, header, formData, body)
  let scheme = call_594455.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594455.url(scheme.get, call_594455.host, call_594455.base,
                         call_594455.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594455, url, valid)

proc call*(call_594456: Call_PostDeleteAutoScalingGroup_594441;
          AutoScalingGroupName: string; ForceDelete: bool = false;
          Action: string = "DeleteAutoScalingGroup"; Version: string = "2011-01-01"): Recallable =
  ## postDeleteAutoScalingGroup
  ## <p>Deletes the specified Auto Scaling group.</p> <p>If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed.</p> <p>If the group has policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.</p> <p>To remove instances from the Auto Scaling group before deleting it, call <a>DetachInstances</a> with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.</p> <p>To terminate all instances before deleting the Auto Scaling group, call <a>UpdateAutoScalingGroup</a> and set the minimum size and desired capacity of the Auto Scaling group to zero.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   ForceDelete: bool
  ##              : Specifies that the group is to be deleted along with all instances associated with the group, without waiting for all instances to be terminated. This parameter also deletes any lifecycle actions associated with the group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594457 = newJObject()
  var formData_594458 = newJObject()
  add(formData_594458, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_594458, "ForceDelete", newJBool(ForceDelete))
  add(query_594457, "Action", newJString(Action))
  add(query_594457, "Version", newJString(Version))
  result = call_594456.call(nil, query_594457, nil, formData_594458, nil)

var postDeleteAutoScalingGroup* = Call_PostDeleteAutoScalingGroup_594441(
    name: "postDeleteAutoScalingGroup", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DeleteAutoScalingGroup",
    validator: validate_PostDeleteAutoScalingGroup_594442, base: "/",
    url: url_PostDeleteAutoScalingGroup_594443,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteAutoScalingGroup_594424 = ref object of OpenApiRestCall_593437
proc url_GetDeleteAutoScalingGroup_594426(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteAutoScalingGroup_594425(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified Auto Scaling group.</p> <p>If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed.</p> <p>If the group has policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.</p> <p>To remove instances from the Auto Scaling group before deleting it, call <a>DetachInstances</a> with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.</p> <p>To terminate all instances before deleting the Auto Scaling group, call <a>UpdateAutoScalingGroup</a> and set the minimum size and desired capacity of the Auto Scaling group to zero.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   ForceDelete: JBool
  ##              : Specifies that the group is to be deleted along with all instances associated with the group, without waiting for all instances to be terminated. This parameter also deletes any lifecycle actions associated with the group.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_594427 = query.getOrDefault("AutoScalingGroupName")
  valid_594427 = validateParameter(valid_594427, JString, required = true,
                                 default = nil)
  if valid_594427 != nil:
    section.add "AutoScalingGroupName", valid_594427
  var valid_594428 = query.getOrDefault("Action")
  valid_594428 = validateParameter(valid_594428, JString, required = true,
                                 default = newJString("DeleteAutoScalingGroup"))
  if valid_594428 != nil:
    section.add "Action", valid_594428
  var valid_594429 = query.getOrDefault("ForceDelete")
  valid_594429 = validateParameter(valid_594429, JBool, required = false, default = nil)
  if valid_594429 != nil:
    section.add "ForceDelete", valid_594429
  var valid_594430 = query.getOrDefault("Version")
  valid_594430 = validateParameter(valid_594430, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_594430 != nil:
    section.add "Version", valid_594430
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594431 = header.getOrDefault("X-Amz-Date")
  valid_594431 = validateParameter(valid_594431, JString, required = false,
                                 default = nil)
  if valid_594431 != nil:
    section.add "X-Amz-Date", valid_594431
  var valid_594432 = header.getOrDefault("X-Amz-Security-Token")
  valid_594432 = validateParameter(valid_594432, JString, required = false,
                                 default = nil)
  if valid_594432 != nil:
    section.add "X-Amz-Security-Token", valid_594432
  var valid_594433 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594433 = validateParameter(valid_594433, JString, required = false,
                                 default = nil)
  if valid_594433 != nil:
    section.add "X-Amz-Content-Sha256", valid_594433
  var valid_594434 = header.getOrDefault("X-Amz-Algorithm")
  valid_594434 = validateParameter(valid_594434, JString, required = false,
                                 default = nil)
  if valid_594434 != nil:
    section.add "X-Amz-Algorithm", valid_594434
  var valid_594435 = header.getOrDefault("X-Amz-Signature")
  valid_594435 = validateParameter(valid_594435, JString, required = false,
                                 default = nil)
  if valid_594435 != nil:
    section.add "X-Amz-Signature", valid_594435
  var valid_594436 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594436 = validateParameter(valid_594436, JString, required = false,
                                 default = nil)
  if valid_594436 != nil:
    section.add "X-Amz-SignedHeaders", valid_594436
  var valid_594437 = header.getOrDefault("X-Amz-Credential")
  valid_594437 = validateParameter(valid_594437, JString, required = false,
                                 default = nil)
  if valid_594437 != nil:
    section.add "X-Amz-Credential", valid_594437
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594438: Call_GetDeleteAutoScalingGroup_594424; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified Auto Scaling group.</p> <p>If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed.</p> <p>If the group has policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.</p> <p>To remove instances from the Auto Scaling group before deleting it, call <a>DetachInstances</a> with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.</p> <p>To terminate all instances before deleting the Auto Scaling group, call <a>UpdateAutoScalingGroup</a> and set the minimum size and desired capacity of the Auto Scaling group to zero.</p>
  ## 
  let valid = call_594438.validator(path, query, header, formData, body)
  let scheme = call_594438.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594438.url(scheme.get, call_594438.host, call_594438.base,
                         call_594438.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594438, url, valid)

proc call*(call_594439: Call_GetDeleteAutoScalingGroup_594424;
          AutoScalingGroupName: string; Action: string = "DeleteAutoScalingGroup";
          ForceDelete: bool = false; Version: string = "2011-01-01"): Recallable =
  ## getDeleteAutoScalingGroup
  ## <p>Deletes the specified Auto Scaling group.</p> <p>If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed.</p> <p>If the group has policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.</p> <p>To remove instances from the Auto Scaling group before deleting it, call <a>DetachInstances</a> with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.</p> <p>To terminate all instances before deleting the Auto Scaling group, call <a>UpdateAutoScalingGroup</a> and set the minimum size and desired capacity of the Auto Scaling group to zero.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   ForceDelete: bool
  ##              : Specifies that the group is to be deleted along with all instances associated with the group, without waiting for all instances to be terminated. This parameter also deletes any lifecycle actions associated with the group.
  ##   Version: string (required)
  var query_594440 = newJObject()
  add(query_594440, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_594440, "Action", newJString(Action))
  add(query_594440, "ForceDelete", newJBool(ForceDelete))
  add(query_594440, "Version", newJString(Version))
  result = call_594439.call(nil, query_594440, nil, nil, nil)

var getDeleteAutoScalingGroup* = Call_GetDeleteAutoScalingGroup_594424(
    name: "getDeleteAutoScalingGroup", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DeleteAutoScalingGroup",
    validator: validate_GetDeleteAutoScalingGroup_594425, base: "/",
    url: url_GetDeleteAutoScalingGroup_594426,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteLaunchConfiguration_594475 = ref object of OpenApiRestCall_593437
proc url_PostDeleteLaunchConfiguration_594477(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteLaunchConfiguration_594476(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified launch configuration.</p> <p>The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594478 = query.getOrDefault("Action")
  valid_594478 = validateParameter(valid_594478, JString, required = true, default = newJString(
      "DeleteLaunchConfiguration"))
  if valid_594478 != nil:
    section.add "Action", valid_594478
  var valid_594479 = query.getOrDefault("Version")
  valid_594479 = validateParameter(valid_594479, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_594479 != nil:
    section.add "Version", valid_594479
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594480 = header.getOrDefault("X-Amz-Date")
  valid_594480 = validateParameter(valid_594480, JString, required = false,
                                 default = nil)
  if valid_594480 != nil:
    section.add "X-Amz-Date", valid_594480
  var valid_594481 = header.getOrDefault("X-Amz-Security-Token")
  valid_594481 = validateParameter(valid_594481, JString, required = false,
                                 default = nil)
  if valid_594481 != nil:
    section.add "X-Amz-Security-Token", valid_594481
  var valid_594482 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594482 = validateParameter(valid_594482, JString, required = false,
                                 default = nil)
  if valid_594482 != nil:
    section.add "X-Amz-Content-Sha256", valid_594482
  var valid_594483 = header.getOrDefault("X-Amz-Algorithm")
  valid_594483 = validateParameter(valid_594483, JString, required = false,
                                 default = nil)
  if valid_594483 != nil:
    section.add "X-Amz-Algorithm", valid_594483
  var valid_594484 = header.getOrDefault("X-Amz-Signature")
  valid_594484 = validateParameter(valid_594484, JString, required = false,
                                 default = nil)
  if valid_594484 != nil:
    section.add "X-Amz-Signature", valid_594484
  var valid_594485 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594485 = validateParameter(valid_594485, JString, required = false,
                                 default = nil)
  if valid_594485 != nil:
    section.add "X-Amz-SignedHeaders", valid_594485
  var valid_594486 = header.getOrDefault("X-Amz-Credential")
  valid_594486 = validateParameter(valid_594486, JString, required = false,
                                 default = nil)
  if valid_594486 != nil:
    section.add "X-Amz-Credential", valid_594486
  result.add "header", section
  ## parameters in `formData` object:
  ##   LaunchConfigurationName: JString (required)
  ##                          : The name of the launch configuration.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `LaunchConfigurationName` field"
  var valid_594487 = formData.getOrDefault("LaunchConfigurationName")
  valid_594487 = validateParameter(valid_594487, JString, required = true,
                                 default = nil)
  if valid_594487 != nil:
    section.add "LaunchConfigurationName", valid_594487
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594488: Call_PostDeleteLaunchConfiguration_594475; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified launch configuration.</p> <p>The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.</p>
  ## 
  let valid = call_594488.validator(path, query, header, formData, body)
  let scheme = call_594488.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594488.url(scheme.get, call_594488.host, call_594488.base,
                         call_594488.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594488, url, valid)

proc call*(call_594489: Call_PostDeleteLaunchConfiguration_594475;
          LaunchConfigurationName: string;
          Action: string = "DeleteLaunchConfiguration";
          Version: string = "2011-01-01"): Recallable =
  ## postDeleteLaunchConfiguration
  ## <p>Deletes the specified launch configuration.</p> <p>The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.</p>
  ##   LaunchConfigurationName: string (required)
  ##                          : The name of the launch configuration.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594490 = newJObject()
  var formData_594491 = newJObject()
  add(formData_594491, "LaunchConfigurationName",
      newJString(LaunchConfigurationName))
  add(query_594490, "Action", newJString(Action))
  add(query_594490, "Version", newJString(Version))
  result = call_594489.call(nil, query_594490, nil, formData_594491, nil)

var postDeleteLaunchConfiguration* = Call_PostDeleteLaunchConfiguration_594475(
    name: "postDeleteLaunchConfiguration", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DeleteLaunchConfiguration",
    validator: validate_PostDeleteLaunchConfiguration_594476, base: "/",
    url: url_PostDeleteLaunchConfiguration_594477,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteLaunchConfiguration_594459 = ref object of OpenApiRestCall_593437
proc url_GetDeleteLaunchConfiguration_594461(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteLaunchConfiguration_594460(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified launch configuration.</p> <p>The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   LaunchConfigurationName: JString (required)
  ##                          : The name of the launch configuration.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `LaunchConfigurationName` field"
  var valid_594462 = query.getOrDefault("LaunchConfigurationName")
  valid_594462 = validateParameter(valid_594462, JString, required = true,
                                 default = nil)
  if valid_594462 != nil:
    section.add "LaunchConfigurationName", valid_594462
  var valid_594463 = query.getOrDefault("Action")
  valid_594463 = validateParameter(valid_594463, JString, required = true, default = newJString(
      "DeleteLaunchConfiguration"))
  if valid_594463 != nil:
    section.add "Action", valid_594463
  var valid_594464 = query.getOrDefault("Version")
  valid_594464 = validateParameter(valid_594464, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_594464 != nil:
    section.add "Version", valid_594464
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594465 = header.getOrDefault("X-Amz-Date")
  valid_594465 = validateParameter(valid_594465, JString, required = false,
                                 default = nil)
  if valid_594465 != nil:
    section.add "X-Amz-Date", valid_594465
  var valid_594466 = header.getOrDefault("X-Amz-Security-Token")
  valid_594466 = validateParameter(valid_594466, JString, required = false,
                                 default = nil)
  if valid_594466 != nil:
    section.add "X-Amz-Security-Token", valid_594466
  var valid_594467 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594467 = validateParameter(valid_594467, JString, required = false,
                                 default = nil)
  if valid_594467 != nil:
    section.add "X-Amz-Content-Sha256", valid_594467
  var valid_594468 = header.getOrDefault("X-Amz-Algorithm")
  valid_594468 = validateParameter(valid_594468, JString, required = false,
                                 default = nil)
  if valid_594468 != nil:
    section.add "X-Amz-Algorithm", valid_594468
  var valid_594469 = header.getOrDefault("X-Amz-Signature")
  valid_594469 = validateParameter(valid_594469, JString, required = false,
                                 default = nil)
  if valid_594469 != nil:
    section.add "X-Amz-Signature", valid_594469
  var valid_594470 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594470 = validateParameter(valid_594470, JString, required = false,
                                 default = nil)
  if valid_594470 != nil:
    section.add "X-Amz-SignedHeaders", valid_594470
  var valid_594471 = header.getOrDefault("X-Amz-Credential")
  valid_594471 = validateParameter(valid_594471, JString, required = false,
                                 default = nil)
  if valid_594471 != nil:
    section.add "X-Amz-Credential", valid_594471
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594472: Call_GetDeleteLaunchConfiguration_594459; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified launch configuration.</p> <p>The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.</p>
  ## 
  let valid = call_594472.validator(path, query, header, formData, body)
  let scheme = call_594472.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594472.url(scheme.get, call_594472.host, call_594472.base,
                         call_594472.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594472, url, valid)

proc call*(call_594473: Call_GetDeleteLaunchConfiguration_594459;
          LaunchConfigurationName: string;
          Action: string = "DeleteLaunchConfiguration";
          Version: string = "2011-01-01"): Recallable =
  ## getDeleteLaunchConfiguration
  ## <p>Deletes the specified launch configuration.</p> <p>The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.</p>
  ##   LaunchConfigurationName: string (required)
  ##                          : The name of the launch configuration.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594474 = newJObject()
  add(query_594474, "LaunchConfigurationName", newJString(LaunchConfigurationName))
  add(query_594474, "Action", newJString(Action))
  add(query_594474, "Version", newJString(Version))
  result = call_594473.call(nil, query_594474, nil, nil, nil)

var getDeleteLaunchConfiguration* = Call_GetDeleteLaunchConfiguration_594459(
    name: "getDeleteLaunchConfiguration", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DeleteLaunchConfiguration",
    validator: validate_GetDeleteLaunchConfiguration_594460, base: "/",
    url: url_GetDeleteLaunchConfiguration_594461,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteLifecycleHook_594509 = ref object of OpenApiRestCall_593437
proc url_PostDeleteLifecycleHook_594511(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteLifecycleHook_594510(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified lifecycle hook.</p> <p>If there are any outstanding lifecycle actions, they are completed first (<code>ABANDON</code> for launching instances, <code>CONTINUE</code> for terminating instances).</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594512 = query.getOrDefault("Action")
  valid_594512 = validateParameter(valid_594512, JString, required = true,
                                 default = newJString("DeleteLifecycleHook"))
  if valid_594512 != nil:
    section.add "Action", valid_594512
  var valid_594513 = query.getOrDefault("Version")
  valid_594513 = validateParameter(valid_594513, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_594513 != nil:
    section.add "Version", valid_594513
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594514 = header.getOrDefault("X-Amz-Date")
  valid_594514 = validateParameter(valid_594514, JString, required = false,
                                 default = nil)
  if valid_594514 != nil:
    section.add "X-Amz-Date", valid_594514
  var valid_594515 = header.getOrDefault("X-Amz-Security-Token")
  valid_594515 = validateParameter(valid_594515, JString, required = false,
                                 default = nil)
  if valid_594515 != nil:
    section.add "X-Amz-Security-Token", valid_594515
  var valid_594516 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594516 = validateParameter(valid_594516, JString, required = false,
                                 default = nil)
  if valid_594516 != nil:
    section.add "X-Amz-Content-Sha256", valid_594516
  var valid_594517 = header.getOrDefault("X-Amz-Algorithm")
  valid_594517 = validateParameter(valid_594517, JString, required = false,
                                 default = nil)
  if valid_594517 != nil:
    section.add "X-Amz-Algorithm", valid_594517
  var valid_594518 = header.getOrDefault("X-Amz-Signature")
  valid_594518 = validateParameter(valid_594518, JString, required = false,
                                 default = nil)
  if valid_594518 != nil:
    section.add "X-Amz-Signature", valid_594518
  var valid_594519 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594519 = validateParameter(valid_594519, JString, required = false,
                                 default = nil)
  if valid_594519 != nil:
    section.add "X-Amz-SignedHeaders", valid_594519
  var valid_594520 = header.getOrDefault("X-Amz-Credential")
  valid_594520 = validateParameter(valid_594520, JString, required = false,
                                 default = nil)
  if valid_594520 != nil:
    section.add "X-Amz-Credential", valid_594520
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_594521 = formData.getOrDefault("AutoScalingGroupName")
  valid_594521 = validateParameter(valid_594521, JString, required = true,
                                 default = nil)
  if valid_594521 != nil:
    section.add "AutoScalingGroupName", valid_594521
  var valid_594522 = formData.getOrDefault("LifecycleHookName")
  valid_594522 = validateParameter(valid_594522, JString, required = true,
                                 default = nil)
  if valid_594522 != nil:
    section.add "LifecycleHookName", valid_594522
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594523: Call_PostDeleteLifecycleHook_594509; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified lifecycle hook.</p> <p>If there are any outstanding lifecycle actions, they are completed first (<code>ABANDON</code> for launching instances, <code>CONTINUE</code> for terminating instances).</p>
  ## 
  let valid = call_594523.validator(path, query, header, formData, body)
  let scheme = call_594523.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594523.url(scheme.get, call_594523.host, call_594523.base,
                         call_594523.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594523, url, valid)

proc call*(call_594524: Call_PostDeleteLifecycleHook_594509;
          AutoScalingGroupName: string; LifecycleHookName: string;
          Action: string = "DeleteLifecycleHook"; Version: string = "2011-01-01"): Recallable =
  ## postDeleteLifecycleHook
  ## <p>Deletes the specified lifecycle hook.</p> <p>If there are any outstanding lifecycle actions, they are completed first (<code>ABANDON</code> for launching instances, <code>CONTINUE</code> for terminating instances).</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   Version: string (required)
  var query_594525 = newJObject()
  var formData_594526 = newJObject()
  add(formData_594526, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_594525, "Action", newJString(Action))
  add(formData_594526, "LifecycleHookName", newJString(LifecycleHookName))
  add(query_594525, "Version", newJString(Version))
  result = call_594524.call(nil, query_594525, nil, formData_594526, nil)

var postDeleteLifecycleHook* = Call_PostDeleteLifecycleHook_594509(
    name: "postDeleteLifecycleHook", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DeleteLifecycleHook",
    validator: validate_PostDeleteLifecycleHook_594510, base: "/",
    url: url_PostDeleteLifecycleHook_594511, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteLifecycleHook_594492 = ref object of OpenApiRestCall_593437
proc url_GetDeleteLifecycleHook_594494(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteLifecycleHook_594493(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified lifecycle hook.</p> <p>If there are any outstanding lifecycle actions, they are completed first (<code>ABANDON</code> for launching instances, <code>CONTINUE</code> for terminating instances).</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_594495 = query.getOrDefault("AutoScalingGroupName")
  valid_594495 = validateParameter(valid_594495, JString, required = true,
                                 default = nil)
  if valid_594495 != nil:
    section.add "AutoScalingGroupName", valid_594495
  var valid_594496 = query.getOrDefault("Action")
  valid_594496 = validateParameter(valid_594496, JString, required = true,
                                 default = newJString("DeleteLifecycleHook"))
  if valid_594496 != nil:
    section.add "Action", valid_594496
  var valid_594497 = query.getOrDefault("LifecycleHookName")
  valid_594497 = validateParameter(valid_594497, JString, required = true,
                                 default = nil)
  if valid_594497 != nil:
    section.add "LifecycleHookName", valid_594497
  var valid_594498 = query.getOrDefault("Version")
  valid_594498 = validateParameter(valid_594498, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_594498 != nil:
    section.add "Version", valid_594498
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594499 = header.getOrDefault("X-Amz-Date")
  valid_594499 = validateParameter(valid_594499, JString, required = false,
                                 default = nil)
  if valid_594499 != nil:
    section.add "X-Amz-Date", valid_594499
  var valid_594500 = header.getOrDefault("X-Amz-Security-Token")
  valid_594500 = validateParameter(valid_594500, JString, required = false,
                                 default = nil)
  if valid_594500 != nil:
    section.add "X-Amz-Security-Token", valid_594500
  var valid_594501 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594501 = validateParameter(valid_594501, JString, required = false,
                                 default = nil)
  if valid_594501 != nil:
    section.add "X-Amz-Content-Sha256", valid_594501
  var valid_594502 = header.getOrDefault("X-Amz-Algorithm")
  valid_594502 = validateParameter(valid_594502, JString, required = false,
                                 default = nil)
  if valid_594502 != nil:
    section.add "X-Amz-Algorithm", valid_594502
  var valid_594503 = header.getOrDefault("X-Amz-Signature")
  valid_594503 = validateParameter(valid_594503, JString, required = false,
                                 default = nil)
  if valid_594503 != nil:
    section.add "X-Amz-Signature", valid_594503
  var valid_594504 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594504 = validateParameter(valid_594504, JString, required = false,
                                 default = nil)
  if valid_594504 != nil:
    section.add "X-Amz-SignedHeaders", valid_594504
  var valid_594505 = header.getOrDefault("X-Amz-Credential")
  valid_594505 = validateParameter(valid_594505, JString, required = false,
                                 default = nil)
  if valid_594505 != nil:
    section.add "X-Amz-Credential", valid_594505
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594506: Call_GetDeleteLifecycleHook_594492; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified lifecycle hook.</p> <p>If there are any outstanding lifecycle actions, they are completed first (<code>ABANDON</code> for launching instances, <code>CONTINUE</code> for terminating instances).</p>
  ## 
  let valid = call_594506.validator(path, query, header, formData, body)
  let scheme = call_594506.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594506.url(scheme.get, call_594506.host, call_594506.base,
                         call_594506.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594506, url, valid)

proc call*(call_594507: Call_GetDeleteLifecycleHook_594492;
          AutoScalingGroupName: string; LifecycleHookName: string;
          Action: string = "DeleteLifecycleHook"; Version: string = "2011-01-01"): Recallable =
  ## getDeleteLifecycleHook
  ## <p>Deletes the specified lifecycle hook.</p> <p>If there are any outstanding lifecycle actions, they are completed first (<code>ABANDON</code> for launching instances, <code>CONTINUE</code> for terminating instances).</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   Version: string (required)
  var query_594508 = newJObject()
  add(query_594508, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_594508, "Action", newJString(Action))
  add(query_594508, "LifecycleHookName", newJString(LifecycleHookName))
  add(query_594508, "Version", newJString(Version))
  result = call_594507.call(nil, query_594508, nil, nil, nil)

var getDeleteLifecycleHook* = Call_GetDeleteLifecycleHook_594492(
    name: "getDeleteLifecycleHook", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DeleteLifecycleHook",
    validator: validate_GetDeleteLifecycleHook_594493, base: "/",
    url: url_GetDeleteLifecycleHook_594494, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteNotificationConfiguration_594544 = ref object of OpenApiRestCall_593437
proc url_PostDeleteNotificationConfiguration_594546(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteNotificationConfiguration_594545(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified notification.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594547 = query.getOrDefault("Action")
  valid_594547 = validateParameter(valid_594547, JString, required = true, default = newJString(
      "DeleteNotificationConfiguration"))
  if valid_594547 != nil:
    section.add "Action", valid_594547
  var valid_594548 = query.getOrDefault("Version")
  valid_594548 = validateParameter(valid_594548, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_594548 != nil:
    section.add "Version", valid_594548
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594549 = header.getOrDefault("X-Amz-Date")
  valid_594549 = validateParameter(valid_594549, JString, required = false,
                                 default = nil)
  if valid_594549 != nil:
    section.add "X-Amz-Date", valid_594549
  var valid_594550 = header.getOrDefault("X-Amz-Security-Token")
  valid_594550 = validateParameter(valid_594550, JString, required = false,
                                 default = nil)
  if valid_594550 != nil:
    section.add "X-Amz-Security-Token", valid_594550
  var valid_594551 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594551 = validateParameter(valid_594551, JString, required = false,
                                 default = nil)
  if valid_594551 != nil:
    section.add "X-Amz-Content-Sha256", valid_594551
  var valid_594552 = header.getOrDefault("X-Amz-Algorithm")
  valid_594552 = validateParameter(valid_594552, JString, required = false,
                                 default = nil)
  if valid_594552 != nil:
    section.add "X-Amz-Algorithm", valid_594552
  var valid_594553 = header.getOrDefault("X-Amz-Signature")
  valid_594553 = validateParameter(valid_594553, JString, required = false,
                                 default = nil)
  if valid_594553 != nil:
    section.add "X-Amz-Signature", valid_594553
  var valid_594554 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594554 = validateParameter(valid_594554, JString, required = false,
                                 default = nil)
  if valid_594554 != nil:
    section.add "X-Amz-SignedHeaders", valid_594554
  var valid_594555 = header.getOrDefault("X-Amz-Credential")
  valid_594555 = validateParameter(valid_594555, JString, required = false,
                                 default = nil)
  if valid_594555 != nil:
    section.add "X-Amz-Credential", valid_594555
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   TopicARN: JString (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_594556 = formData.getOrDefault("AutoScalingGroupName")
  valid_594556 = validateParameter(valid_594556, JString, required = true,
                                 default = nil)
  if valid_594556 != nil:
    section.add "AutoScalingGroupName", valid_594556
  var valid_594557 = formData.getOrDefault("TopicARN")
  valid_594557 = validateParameter(valid_594557, JString, required = true,
                                 default = nil)
  if valid_594557 != nil:
    section.add "TopicARN", valid_594557
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594558: Call_PostDeleteNotificationConfiguration_594544;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes the specified notification.
  ## 
  let valid = call_594558.validator(path, query, header, formData, body)
  let scheme = call_594558.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594558.url(scheme.get, call_594558.host, call_594558.base,
                         call_594558.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594558, url, valid)

proc call*(call_594559: Call_PostDeleteNotificationConfiguration_594544;
          AutoScalingGroupName: string; TopicARN: string;
          Action: string = "DeleteNotificationConfiguration";
          Version: string = "2011-01-01"): Recallable =
  ## postDeleteNotificationConfiguration
  ## Deletes the specified notification.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   TopicARN: string (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594560 = newJObject()
  var formData_594561 = newJObject()
  add(formData_594561, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_594561, "TopicARN", newJString(TopicARN))
  add(query_594560, "Action", newJString(Action))
  add(query_594560, "Version", newJString(Version))
  result = call_594559.call(nil, query_594560, nil, formData_594561, nil)

var postDeleteNotificationConfiguration* = Call_PostDeleteNotificationConfiguration_594544(
    name: "postDeleteNotificationConfiguration", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DeleteNotificationConfiguration",
    validator: validate_PostDeleteNotificationConfiguration_594545, base: "/",
    url: url_PostDeleteNotificationConfiguration_594546,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteNotificationConfiguration_594527 = ref object of OpenApiRestCall_593437
proc url_GetDeleteNotificationConfiguration_594529(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteNotificationConfiguration_594528(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified notification.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   TopicARN: JString (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_594530 = query.getOrDefault("AutoScalingGroupName")
  valid_594530 = validateParameter(valid_594530, JString, required = true,
                                 default = nil)
  if valid_594530 != nil:
    section.add "AutoScalingGroupName", valid_594530
  var valid_594531 = query.getOrDefault("Action")
  valid_594531 = validateParameter(valid_594531, JString, required = true, default = newJString(
      "DeleteNotificationConfiguration"))
  if valid_594531 != nil:
    section.add "Action", valid_594531
  var valid_594532 = query.getOrDefault("TopicARN")
  valid_594532 = validateParameter(valid_594532, JString, required = true,
                                 default = nil)
  if valid_594532 != nil:
    section.add "TopicARN", valid_594532
  var valid_594533 = query.getOrDefault("Version")
  valid_594533 = validateParameter(valid_594533, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_594533 != nil:
    section.add "Version", valid_594533
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594534 = header.getOrDefault("X-Amz-Date")
  valid_594534 = validateParameter(valid_594534, JString, required = false,
                                 default = nil)
  if valid_594534 != nil:
    section.add "X-Amz-Date", valid_594534
  var valid_594535 = header.getOrDefault("X-Amz-Security-Token")
  valid_594535 = validateParameter(valid_594535, JString, required = false,
                                 default = nil)
  if valid_594535 != nil:
    section.add "X-Amz-Security-Token", valid_594535
  var valid_594536 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594536 = validateParameter(valid_594536, JString, required = false,
                                 default = nil)
  if valid_594536 != nil:
    section.add "X-Amz-Content-Sha256", valid_594536
  var valid_594537 = header.getOrDefault("X-Amz-Algorithm")
  valid_594537 = validateParameter(valid_594537, JString, required = false,
                                 default = nil)
  if valid_594537 != nil:
    section.add "X-Amz-Algorithm", valid_594537
  var valid_594538 = header.getOrDefault("X-Amz-Signature")
  valid_594538 = validateParameter(valid_594538, JString, required = false,
                                 default = nil)
  if valid_594538 != nil:
    section.add "X-Amz-Signature", valid_594538
  var valid_594539 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594539 = validateParameter(valid_594539, JString, required = false,
                                 default = nil)
  if valid_594539 != nil:
    section.add "X-Amz-SignedHeaders", valid_594539
  var valid_594540 = header.getOrDefault("X-Amz-Credential")
  valid_594540 = validateParameter(valid_594540, JString, required = false,
                                 default = nil)
  if valid_594540 != nil:
    section.add "X-Amz-Credential", valid_594540
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594541: Call_GetDeleteNotificationConfiguration_594527;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes the specified notification.
  ## 
  let valid = call_594541.validator(path, query, header, formData, body)
  let scheme = call_594541.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594541.url(scheme.get, call_594541.host, call_594541.base,
                         call_594541.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594541, url, valid)

proc call*(call_594542: Call_GetDeleteNotificationConfiguration_594527;
          AutoScalingGroupName: string; TopicARN: string;
          Action: string = "DeleteNotificationConfiguration";
          Version: string = "2011-01-01"): Recallable =
  ## getDeleteNotificationConfiguration
  ## Deletes the specified notification.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   TopicARN: string (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   Version: string (required)
  var query_594543 = newJObject()
  add(query_594543, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_594543, "Action", newJString(Action))
  add(query_594543, "TopicARN", newJString(TopicARN))
  add(query_594543, "Version", newJString(Version))
  result = call_594542.call(nil, query_594543, nil, nil, nil)

var getDeleteNotificationConfiguration* = Call_GetDeleteNotificationConfiguration_594527(
    name: "getDeleteNotificationConfiguration", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DeleteNotificationConfiguration",
    validator: validate_GetDeleteNotificationConfiguration_594528, base: "/",
    url: url_GetDeleteNotificationConfiguration_594529,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeletePolicy_594579 = ref object of OpenApiRestCall_593437
proc url_PostDeletePolicy_594581(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeletePolicy_594580(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Deletes the specified scaling policy.</p> <p>Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html">Deleting a Scaling Policy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594582 = query.getOrDefault("Action")
  valid_594582 = validateParameter(valid_594582, JString, required = true,
                                 default = newJString("DeletePolicy"))
  if valid_594582 != nil:
    section.add "Action", valid_594582
  var valid_594583 = query.getOrDefault("Version")
  valid_594583 = validateParameter(valid_594583, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_594583 != nil:
    section.add "Version", valid_594583
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594584 = header.getOrDefault("X-Amz-Date")
  valid_594584 = validateParameter(valid_594584, JString, required = false,
                                 default = nil)
  if valid_594584 != nil:
    section.add "X-Amz-Date", valid_594584
  var valid_594585 = header.getOrDefault("X-Amz-Security-Token")
  valid_594585 = validateParameter(valid_594585, JString, required = false,
                                 default = nil)
  if valid_594585 != nil:
    section.add "X-Amz-Security-Token", valid_594585
  var valid_594586 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594586 = validateParameter(valid_594586, JString, required = false,
                                 default = nil)
  if valid_594586 != nil:
    section.add "X-Amz-Content-Sha256", valid_594586
  var valid_594587 = header.getOrDefault("X-Amz-Algorithm")
  valid_594587 = validateParameter(valid_594587, JString, required = false,
                                 default = nil)
  if valid_594587 != nil:
    section.add "X-Amz-Algorithm", valid_594587
  var valid_594588 = header.getOrDefault("X-Amz-Signature")
  valid_594588 = validateParameter(valid_594588, JString, required = false,
                                 default = nil)
  if valid_594588 != nil:
    section.add "X-Amz-Signature", valid_594588
  var valid_594589 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594589 = validateParameter(valid_594589, JString, required = false,
                                 default = nil)
  if valid_594589 != nil:
    section.add "X-Amz-SignedHeaders", valid_594589
  var valid_594590 = header.getOrDefault("X-Amz-Credential")
  valid_594590 = validateParameter(valid_594590, JString, required = false,
                                 default = nil)
  if valid_594590 != nil:
    section.add "X-Amz-Credential", valid_594590
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   PolicyName: JString (required)
  ##             : The name or Amazon Resource Name (ARN) of the policy.
  section = newJObject()
  var valid_594591 = formData.getOrDefault("AutoScalingGroupName")
  valid_594591 = validateParameter(valid_594591, JString, required = false,
                                 default = nil)
  if valid_594591 != nil:
    section.add "AutoScalingGroupName", valid_594591
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_594592 = formData.getOrDefault("PolicyName")
  valid_594592 = validateParameter(valid_594592, JString, required = true,
                                 default = nil)
  if valid_594592 != nil:
    section.add "PolicyName", valid_594592
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594593: Call_PostDeletePolicy_594579; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified scaling policy.</p> <p>Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html">Deleting a Scaling Policy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_594593.validator(path, query, header, formData, body)
  let scheme = call_594593.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594593.url(scheme.get, call_594593.host, call_594593.base,
                         call_594593.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594593, url, valid)

proc call*(call_594594: Call_PostDeletePolicy_594579; PolicyName: string;
          AutoScalingGroupName: string = ""; Action: string = "DeletePolicy";
          Version: string = "2011-01-01"): Recallable =
  ## postDeletePolicy
  ## <p>Deletes the specified scaling policy.</p> <p>Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html">Deleting a Scaling Policy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   PolicyName: string (required)
  ##             : The name or Amazon Resource Name (ARN) of the policy.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594595 = newJObject()
  var formData_594596 = newJObject()
  add(formData_594596, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_594596, "PolicyName", newJString(PolicyName))
  add(query_594595, "Action", newJString(Action))
  add(query_594595, "Version", newJString(Version))
  result = call_594594.call(nil, query_594595, nil, formData_594596, nil)

var postDeletePolicy* = Call_PostDeletePolicy_594579(name: "postDeletePolicy",
    meth: HttpMethod.HttpPost, host: "autoscaling.amazonaws.com",
    route: "/#Action=DeletePolicy", validator: validate_PostDeletePolicy_594580,
    base: "/", url: url_PostDeletePolicy_594581,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeletePolicy_594562 = ref object of OpenApiRestCall_593437
proc url_GetDeletePolicy_594564(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeletePolicy_594563(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Deletes the specified scaling policy.</p> <p>Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html">Deleting a Scaling Policy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : The name or Amazon Resource Name (ARN) of the policy.
  section = newJObject()
  var valid_594565 = query.getOrDefault("AutoScalingGroupName")
  valid_594565 = validateParameter(valid_594565, JString, required = false,
                                 default = nil)
  if valid_594565 != nil:
    section.add "AutoScalingGroupName", valid_594565
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594566 = query.getOrDefault("Action")
  valid_594566 = validateParameter(valid_594566, JString, required = true,
                                 default = newJString("DeletePolicy"))
  if valid_594566 != nil:
    section.add "Action", valid_594566
  var valid_594567 = query.getOrDefault("Version")
  valid_594567 = validateParameter(valid_594567, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_594567 != nil:
    section.add "Version", valid_594567
  var valid_594568 = query.getOrDefault("PolicyName")
  valid_594568 = validateParameter(valid_594568, JString, required = true,
                                 default = nil)
  if valid_594568 != nil:
    section.add "PolicyName", valid_594568
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594569 = header.getOrDefault("X-Amz-Date")
  valid_594569 = validateParameter(valid_594569, JString, required = false,
                                 default = nil)
  if valid_594569 != nil:
    section.add "X-Amz-Date", valid_594569
  var valid_594570 = header.getOrDefault("X-Amz-Security-Token")
  valid_594570 = validateParameter(valid_594570, JString, required = false,
                                 default = nil)
  if valid_594570 != nil:
    section.add "X-Amz-Security-Token", valid_594570
  var valid_594571 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594571 = validateParameter(valid_594571, JString, required = false,
                                 default = nil)
  if valid_594571 != nil:
    section.add "X-Amz-Content-Sha256", valid_594571
  var valid_594572 = header.getOrDefault("X-Amz-Algorithm")
  valid_594572 = validateParameter(valid_594572, JString, required = false,
                                 default = nil)
  if valid_594572 != nil:
    section.add "X-Amz-Algorithm", valid_594572
  var valid_594573 = header.getOrDefault("X-Amz-Signature")
  valid_594573 = validateParameter(valid_594573, JString, required = false,
                                 default = nil)
  if valid_594573 != nil:
    section.add "X-Amz-Signature", valid_594573
  var valid_594574 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594574 = validateParameter(valid_594574, JString, required = false,
                                 default = nil)
  if valid_594574 != nil:
    section.add "X-Amz-SignedHeaders", valid_594574
  var valid_594575 = header.getOrDefault("X-Amz-Credential")
  valid_594575 = validateParameter(valid_594575, JString, required = false,
                                 default = nil)
  if valid_594575 != nil:
    section.add "X-Amz-Credential", valid_594575
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594576: Call_GetDeletePolicy_594562; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified scaling policy.</p> <p>Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html">Deleting a Scaling Policy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_594576.validator(path, query, header, formData, body)
  let scheme = call_594576.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594576.url(scheme.get, call_594576.host, call_594576.base,
                         call_594576.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594576, url, valid)

proc call*(call_594577: Call_GetDeletePolicy_594562; PolicyName: string;
          AutoScalingGroupName: string = ""; Action: string = "DeletePolicy";
          Version: string = "2011-01-01"): Recallable =
  ## getDeletePolicy
  ## <p>Deletes the specified scaling policy.</p> <p>Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html">Deleting a Scaling Policy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : The name or Amazon Resource Name (ARN) of the policy.
  var query_594578 = newJObject()
  add(query_594578, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_594578, "Action", newJString(Action))
  add(query_594578, "Version", newJString(Version))
  add(query_594578, "PolicyName", newJString(PolicyName))
  result = call_594577.call(nil, query_594578, nil, nil, nil)

var getDeletePolicy* = Call_GetDeletePolicy_594562(name: "getDeletePolicy",
    meth: HttpMethod.HttpGet, host: "autoscaling.amazonaws.com",
    route: "/#Action=DeletePolicy", validator: validate_GetDeletePolicy_594563,
    base: "/", url: url_GetDeletePolicy_594564, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteScheduledAction_594614 = ref object of OpenApiRestCall_593437
proc url_PostDeleteScheduledAction_594616(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteScheduledAction_594615(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified scheduled action.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594617 = query.getOrDefault("Action")
  valid_594617 = validateParameter(valid_594617, JString, required = true,
                                 default = newJString("DeleteScheduledAction"))
  if valid_594617 != nil:
    section.add "Action", valid_594617
  var valid_594618 = query.getOrDefault("Version")
  valid_594618 = validateParameter(valid_594618, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_594618 != nil:
    section.add "Version", valid_594618
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594619 = header.getOrDefault("X-Amz-Date")
  valid_594619 = validateParameter(valid_594619, JString, required = false,
                                 default = nil)
  if valid_594619 != nil:
    section.add "X-Amz-Date", valid_594619
  var valid_594620 = header.getOrDefault("X-Amz-Security-Token")
  valid_594620 = validateParameter(valid_594620, JString, required = false,
                                 default = nil)
  if valid_594620 != nil:
    section.add "X-Amz-Security-Token", valid_594620
  var valid_594621 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594621 = validateParameter(valid_594621, JString, required = false,
                                 default = nil)
  if valid_594621 != nil:
    section.add "X-Amz-Content-Sha256", valid_594621
  var valid_594622 = header.getOrDefault("X-Amz-Algorithm")
  valid_594622 = validateParameter(valid_594622, JString, required = false,
                                 default = nil)
  if valid_594622 != nil:
    section.add "X-Amz-Algorithm", valid_594622
  var valid_594623 = header.getOrDefault("X-Amz-Signature")
  valid_594623 = validateParameter(valid_594623, JString, required = false,
                                 default = nil)
  if valid_594623 != nil:
    section.add "X-Amz-Signature", valid_594623
  var valid_594624 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594624 = validateParameter(valid_594624, JString, required = false,
                                 default = nil)
  if valid_594624 != nil:
    section.add "X-Amz-SignedHeaders", valid_594624
  var valid_594625 = header.getOrDefault("X-Amz-Credential")
  valid_594625 = validateParameter(valid_594625, JString, required = false,
                                 default = nil)
  if valid_594625 != nil:
    section.add "X-Amz-Credential", valid_594625
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScheduledActionName: JString (required)
  ##                      : The name of the action to delete.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_594626 = formData.getOrDefault("AutoScalingGroupName")
  valid_594626 = validateParameter(valid_594626, JString, required = true,
                                 default = nil)
  if valid_594626 != nil:
    section.add "AutoScalingGroupName", valid_594626
  var valid_594627 = formData.getOrDefault("ScheduledActionName")
  valid_594627 = validateParameter(valid_594627, JString, required = true,
                                 default = nil)
  if valid_594627 != nil:
    section.add "ScheduledActionName", valid_594627
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594628: Call_PostDeleteScheduledAction_594614; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified scheduled action.
  ## 
  let valid = call_594628.validator(path, query, header, formData, body)
  let scheme = call_594628.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594628.url(scheme.get, call_594628.host, call_594628.base,
                         call_594628.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594628, url, valid)

proc call*(call_594629: Call_PostDeleteScheduledAction_594614;
          AutoScalingGroupName: string; ScheduledActionName: string;
          Action: string = "DeleteScheduledAction"; Version: string = "2011-01-01"): Recallable =
  ## postDeleteScheduledAction
  ## Deletes the specified scheduled action.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   ScheduledActionName: string (required)
  ##                      : The name of the action to delete.
  ##   Version: string (required)
  var query_594630 = newJObject()
  var formData_594631 = newJObject()
  add(formData_594631, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_594630, "Action", newJString(Action))
  add(formData_594631, "ScheduledActionName", newJString(ScheduledActionName))
  add(query_594630, "Version", newJString(Version))
  result = call_594629.call(nil, query_594630, nil, formData_594631, nil)

var postDeleteScheduledAction* = Call_PostDeleteScheduledAction_594614(
    name: "postDeleteScheduledAction", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DeleteScheduledAction",
    validator: validate_PostDeleteScheduledAction_594615, base: "/",
    url: url_PostDeleteScheduledAction_594616,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteScheduledAction_594597 = ref object of OpenApiRestCall_593437
proc url_GetDeleteScheduledAction_594599(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteScheduledAction_594598(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified scheduled action.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ScheduledActionName: JString (required)
  ##                      : The name of the action to delete.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ScheduledActionName` field"
  var valid_594600 = query.getOrDefault("ScheduledActionName")
  valid_594600 = validateParameter(valid_594600, JString, required = true,
                                 default = nil)
  if valid_594600 != nil:
    section.add "ScheduledActionName", valid_594600
  var valid_594601 = query.getOrDefault("AutoScalingGroupName")
  valid_594601 = validateParameter(valid_594601, JString, required = true,
                                 default = nil)
  if valid_594601 != nil:
    section.add "AutoScalingGroupName", valid_594601
  var valid_594602 = query.getOrDefault("Action")
  valid_594602 = validateParameter(valid_594602, JString, required = true,
                                 default = newJString("DeleteScheduledAction"))
  if valid_594602 != nil:
    section.add "Action", valid_594602
  var valid_594603 = query.getOrDefault("Version")
  valid_594603 = validateParameter(valid_594603, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_594603 != nil:
    section.add "Version", valid_594603
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594604 = header.getOrDefault("X-Amz-Date")
  valid_594604 = validateParameter(valid_594604, JString, required = false,
                                 default = nil)
  if valid_594604 != nil:
    section.add "X-Amz-Date", valid_594604
  var valid_594605 = header.getOrDefault("X-Amz-Security-Token")
  valid_594605 = validateParameter(valid_594605, JString, required = false,
                                 default = nil)
  if valid_594605 != nil:
    section.add "X-Amz-Security-Token", valid_594605
  var valid_594606 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594606 = validateParameter(valid_594606, JString, required = false,
                                 default = nil)
  if valid_594606 != nil:
    section.add "X-Amz-Content-Sha256", valid_594606
  var valid_594607 = header.getOrDefault("X-Amz-Algorithm")
  valid_594607 = validateParameter(valid_594607, JString, required = false,
                                 default = nil)
  if valid_594607 != nil:
    section.add "X-Amz-Algorithm", valid_594607
  var valid_594608 = header.getOrDefault("X-Amz-Signature")
  valid_594608 = validateParameter(valid_594608, JString, required = false,
                                 default = nil)
  if valid_594608 != nil:
    section.add "X-Amz-Signature", valid_594608
  var valid_594609 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594609 = validateParameter(valid_594609, JString, required = false,
                                 default = nil)
  if valid_594609 != nil:
    section.add "X-Amz-SignedHeaders", valid_594609
  var valid_594610 = header.getOrDefault("X-Amz-Credential")
  valid_594610 = validateParameter(valid_594610, JString, required = false,
                                 default = nil)
  if valid_594610 != nil:
    section.add "X-Amz-Credential", valid_594610
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594611: Call_GetDeleteScheduledAction_594597; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified scheduled action.
  ## 
  let valid = call_594611.validator(path, query, header, formData, body)
  let scheme = call_594611.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594611.url(scheme.get, call_594611.host, call_594611.base,
                         call_594611.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594611, url, valid)

proc call*(call_594612: Call_GetDeleteScheduledAction_594597;
          ScheduledActionName: string; AutoScalingGroupName: string;
          Action: string = "DeleteScheduledAction"; Version: string = "2011-01-01"): Recallable =
  ## getDeleteScheduledAction
  ## Deletes the specified scheduled action.
  ##   ScheduledActionName: string (required)
  ##                      : The name of the action to delete.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594613 = newJObject()
  add(query_594613, "ScheduledActionName", newJString(ScheduledActionName))
  add(query_594613, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_594613, "Action", newJString(Action))
  add(query_594613, "Version", newJString(Version))
  result = call_594612.call(nil, query_594613, nil, nil, nil)

var getDeleteScheduledAction* = Call_GetDeleteScheduledAction_594597(
    name: "getDeleteScheduledAction", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DeleteScheduledAction",
    validator: validate_GetDeleteScheduledAction_594598, base: "/",
    url: url_GetDeleteScheduledAction_594599, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteTags_594648 = ref object of OpenApiRestCall_593437
proc url_PostDeleteTags_594650(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteTags_594649(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Deletes the specified tags.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594651 = query.getOrDefault("Action")
  valid_594651 = validateParameter(valid_594651, JString, required = true,
                                 default = newJString("DeleteTags"))
  if valid_594651 != nil:
    section.add "Action", valid_594651
  var valid_594652 = query.getOrDefault("Version")
  valid_594652 = validateParameter(valid_594652, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_594652 != nil:
    section.add "Version", valid_594652
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594653 = header.getOrDefault("X-Amz-Date")
  valid_594653 = validateParameter(valid_594653, JString, required = false,
                                 default = nil)
  if valid_594653 != nil:
    section.add "X-Amz-Date", valid_594653
  var valid_594654 = header.getOrDefault("X-Amz-Security-Token")
  valid_594654 = validateParameter(valid_594654, JString, required = false,
                                 default = nil)
  if valid_594654 != nil:
    section.add "X-Amz-Security-Token", valid_594654
  var valid_594655 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594655 = validateParameter(valid_594655, JString, required = false,
                                 default = nil)
  if valid_594655 != nil:
    section.add "X-Amz-Content-Sha256", valid_594655
  var valid_594656 = header.getOrDefault("X-Amz-Algorithm")
  valid_594656 = validateParameter(valid_594656, JString, required = false,
                                 default = nil)
  if valid_594656 != nil:
    section.add "X-Amz-Algorithm", valid_594656
  var valid_594657 = header.getOrDefault("X-Amz-Signature")
  valid_594657 = validateParameter(valid_594657, JString, required = false,
                                 default = nil)
  if valid_594657 != nil:
    section.add "X-Amz-Signature", valid_594657
  var valid_594658 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594658 = validateParameter(valid_594658, JString, required = false,
                                 default = nil)
  if valid_594658 != nil:
    section.add "X-Amz-SignedHeaders", valid_594658
  var valid_594659 = header.getOrDefault("X-Amz-Credential")
  valid_594659 = validateParameter(valid_594659, JString, required = false,
                                 default = nil)
  if valid_594659 != nil:
    section.add "X-Amz-Credential", valid_594659
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray (required)
  ##       : One or more tags.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Tags` field"
  var valid_594660 = formData.getOrDefault("Tags")
  valid_594660 = validateParameter(valid_594660, JArray, required = true, default = nil)
  if valid_594660 != nil:
    section.add "Tags", valid_594660
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594661: Call_PostDeleteTags_594648; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified tags.
  ## 
  let valid = call_594661.validator(path, query, header, formData, body)
  let scheme = call_594661.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594661.url(scheme.get, call_594661.host, call_594661.base,
                         call_594661.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594661, url, valid)

proc call*(call_594662: Call_PostDeleteTags_594648; Tags: JsonNode;
          Action: string = "DeleteTags"; Version: string = "2011-01-01"): Recallable =
  ## postDeleteTags
  ## Deletes the specified tags.
  ##   Tags: JArray (required)
  ##       : One or more tags.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594663 = newJObject()
  var formData_594664 = newJObject()
  if Tags != nil:
    formData_594664.add "Tags", Tags
  add(query_594663, "Action", newJString(Action))
  add(query_594663, "Version", newJString(Version))
  result = call_594662.call(nil, query_594663, nil, formData_594664, nil)

var postDeleteTags* = Call_PostDeleteTags_594648(name: "postDeleteTags",
    meth: HttpMethod.HttpPost, host: "autoscaling.amazonaws.com",
    route: "/#Action=DeleteTags", validator: validate_PostDeleteTags_594649,
    base: "/", url: url_PostDeleteTags_594650, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteTags_594632 = ref object of OpenApiRestCall_593437
proc url_GetDeleteTags_594634(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteTags_594633(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified tags.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : One or more tags.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_594635 = query.getOrDefault("Tags")
  valid_594635 = validateParameter(valid_594635, JArray, required = true, default = nil)
  if valid_594635 != nil:
    section.add "Tags", valid_594635
  var valid_594636 = query.getOrDefault("Action")
  valid_594636 = validateParameter(valid_594636, JString, required = true,
                                 default = newJString("DeleteTags"))
  if valid_594636 != nil:
    section.add "Action", valid_594636
  var valid_594637 = query.getOrDefault("Version")
  valid_594637 = validateParameter(valid_594637, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_594637 != nil:
    section.add "Version", valid_594637
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594638 = header.getOrDefault("X-Amz-Date")
  valid_594638 = validateParameter(valid_594638, JString, required = false,
                                 default = nil)
  if valid_594638 != nil:
    section.add "X-Amz-Date", valid_594638
  var valid_594639 = header.getOrDefault("X-Amz-Security-Token")
  valid_594639 = validateParameter(valid_594639, JString, required = false,
                                 default = nil)
  if valid_594639 != nil:
    section.add "X-Amz-Security-Token", valid_594639
  var valid_594640 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594640 = validateParameter(valid_594640, JString, required = false,
                                 default = nil)
  if valid_594640 != nil:
    section.add "X-Amz-Content-Sha256", valid_594640
  var valid_594641 = header.getOrDefault("X-Amz-Algorithm")
  valid_594641 = validateParameter(valid_594641, JString, required = false,
                                 default = nil)
  if valid_594641 != nil:
    section.add "X-Amz-Algorithm", valid_594641
  var valid_594642 = header.getOrDefault("X-Amz-Signature")
  valid_594642 = validateParameter(valid_594642, JString, required = false,
                                 default = nil)
  if valid_594642 != nil:
    section.add "X-Amz-Signature", valid_594642
  var valid_594643 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594643 = validateParameter(valid_594643, JString, required = false,
                                 default = nil)
  if valid_594643 != nil:
    section.add "X-Amz-SignedHeaders", valid_594643
  var valid_594644 = header.getOrDefault("X-Amz-Credential")
  valid_594644 = validateParameter(valid_594644, JString, required = false,
                                 default = nil)
  if valid_594644 != nil:
    section.add "X-Amz-Credential", valid_594644
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594645: Call_GetDeleteTags_594632; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified tags.
  ## 
  let valid = call_594645.validator(path, query, header, formData, body)
  let scheme = call_594645.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594645.url(scheme.get, call_594645.host, call_594645.base,
                         call_594645.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594645, url, valid)

proc call*(call_594646: Call_GetDeleteTags_594632; Tags: JsonNode;
          Action: string = "DeleteTags"; Version: string = "2011-01-01"): Recallable =
  ## getDeleteTags
  ## Deletes the specified tags.
  ##   Tags: JArray (required)
  ##       : One or more tags.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594647 = newJObject()
  if Tags != nil:
    query_594647.add "Tags", Tags
  add(query_594647, "Action", newJString(Action))
  add(query_594647, "Version", newJString(Version))
  result = call_594646.call(nil, query_594647, nil, nil, nil)

var getDeleteTags* = Call_GetDeleteTags_594632(name: "getDeleteTags",
    meth: HttpMethod.HttpGet, host: "autoscaling.amazonaws.com",
    route: "/#Action=DeleteTags", validator: validate_GetDeleteTags_594633,
    base: "/", url: url_GetDeleteTags_594634, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeAccountLimits_594680 = ref object of OpenApiRestCall_593437
proc url_PostDescribeAccountLimits_594682(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeAccountLimits_594681(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the current Amazon EC2 Auto Scaling resource limits for your AWS account.</p> <p>For information about requesting an increase in these limits, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594683 = query.getOrDefault("Action")
  valid_594683 = validateParameter(valid_594683, JString, required = true,
                                 default = newJString("DescribeAccountLimits"))
  if valid_594683 != nil:
    section.add "Action", valid_594683
  var valid_594684 = query.getOrDefault("Version")
  valid_594684 = validateParameter(valid_594684, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_594684 != nil:
    section.add "Version", valid_594684
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594685 = header.getOrDefault("X-Amz-Date")
  valid_594685 = validateParameter(valid_594685, JString, required = false,
                                 default = nil)
  if valid_594685 != nil:
    section.add "X-Amz-Date", valid_594685
  var valid_594686 = header.getOrDefault("X-Amz-Security-Token")
  valid_594686 = validateParameter(valid_594686, JString, required = false,
                                 default = nil)
  if valid_594686 != nil:
    section.add "X-Amz-Security-Token", valid_594686
  var valid_594687 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594687 = validateParameter(valid_594687, JString, required = false,
                                 default = nil)
  if valid_594687 != nil:
    section.add "X-Amz-Content-Sha256", valid_594687
  var valid_594688 = header.getOrDefault("X-Amz-Algorithm")
  valid_594688 = validateParameter(valid_594688, JString, required = false,
                                 default = nil)
  if valid_594688 != nil:
    section.add "X-Amz-Algorithm", valid_594688
  var valid_594689 = header.getOrDefault("X-Amz-Signature")
  valid_594689 = validateParameter(valid_594689, JString, required = false,
                                 default = nil)
  if valid_594689 != nil:
    section.add "X-Amz-Signature", valid_594689
  var valid_594690 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594690 = validateParameter(valid_594690, JString, required = false,
                                 default = nil)
  if valid_594690 != nil:
    section.add "X-Amz-SignedHeaders", valid_594690
  var valid_594691 = header.getOrDefault("X-Amz-Credential")
  valid_594691 = validateParameter(valid_594691, JString, required = false,
                                 default = nil)
  if valid_594691 != nil:
    section.add "X-Amz-Credential", valid_594691
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594692: Call_PostDescribeAccountLimits_594680; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the current Amazon EC2 Auto Scaling resource limits for your AWS account.</p> <p>For information about requesting an increase in these limits, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_594692.validator(path, query, header, formData, body)
  let scheme = call_594692.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594692.url(scheme.get, call_594692.host, call_594692.base,
                         call_594692.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594692, url, valid)

proc call*(call_594693: Call_PostDescribeAccountLimits_594680;
          Action: string = "DescribeAccountLimits"; Version: string = "2011-01-01"): Recallable =
  ## postDescribeAccountLimits
  ## <p>Describes the current Amazon EC2 Auto Scaling resource limits for your AWS account.</p> <p>For information about requesting an increase in these limits, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594694 = newJObject()
  add(query_594694, "Action", newJString(Action))
  add(query_594694, "Version", newJString(Version))
  result = call_594693.call(nil, query_594694, nil, nil, nil)

var postDescribeAccountLimits* = Call_PostDescribeAccountLimits_594680(
    name: "postDescribeAccountLimits", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeAccountLimits",
    validator: validate_PostDescribeAccountLimits_594681, base: "/",
    url: url_PostDescribeAccountLimits_594682,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeAccountLimits_594665 = ref object of OpenApiRestCall_593437
proc url_GetDescribeAccountLimits_594667(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeAccountLimits_594666(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the current Amazon EC2 Auto Scaling resource limits for your AWS account.</p> <p>For information about requesting an increase in these limits, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594668 = query.getOrDefault("Action")
  valid_594668 = validateParameter(valid_594668, JString, required = true,
                                 default = newJString("DescribeAccountLimits"))
  if valid_594668 != nil:
    section.add "Action", valid_594668
  var valid_594669 = query.getOrDefault("Version")
  valid_594669 = validateParameter(valid_594669, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_594669 != nil:
    section.add "Version", valid_594669
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594670 = header.getOrDefault("X-Amz-Date")
  valid_594670 = validateParameter(valid_594670, JString, required = false,
                                 default = nil)
  if valid_594670 != nil:
    section.add "X-Amz-Date", valid_594670
  var valid_594671 = header.getOrDefault("X-Amz-Security-Token")
  valid_594671 = validateParameter(valid_594671, JString, required = false,
                                 default = nil)
  if valid_594671 != nil:
    section.add "X-Amz-Security-Token", valid_594671
  var valid_594672 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594672 = validateParameter(valid_594672, JString, required = false,
                                 default = nil)
  if valid_594672 != nil:
    section.add "X-Amz-Content-Sha256", valid_594672
  var valid_594673 = header.getOrDefault("X-Amz-Algorithm")
  valid_594673 = validateParameter(valid_594673, JString, required = false,
                                 default = nil)
  if valid_594673 != nil:
    section.add "X-Amz-Algorithm", valid_594673
  var valid_594674 = header.getOrDefault("X-Amz-Signature")
  valid_594674 = validateParameter(valid_594674, JString, required = false,
                                 default = nil)
  if valid_594674 != nil:
    section.add "X-Amz-Signature", valid_594674
  var valid_594675 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594675 = validateParameter(valid_594675, JString, required = false,
                                 default = nil)
  if valid_594675 != nil:
    section.add "X-Amz-SignedHeaders", valid_594675
  var valid_594676 = header.getOrDefault("X-Amz-Credential")
  valid_594676 = validateParameter(valid_594676, JString, required = false,
                                 default = nil)
  if valid_594676 != nil:
    section.add "X-Amz-Credential", valid_594676
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594677: Call_GetDescribeAccountLimits_594665; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the current Amazon EC2 Auto Scaling resource limits for your AWS account.</p> <p>For information about requesting an increase in these limits, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_594677.validator(path, query, header, formData, body)
  let scheme = call_594677.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594677.url(scheme.get, call_594677.host, call_594677.base,
                         call_594677.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594677, url, valid)

proc call*(call_594678: Call_GetDescribeAccountLimits_594665;
          Action: string = "DescribeAccountLimits"; Version: string = "2011-01-01"): Recallable =
  ## getDescribeAccountLimits
  ## <p>Describes the current Amazon EC2 Auto Scaling resource limits for your AWS account.</p> <p>For information about requesting an increase in these limits, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594679 = newJObject()
  add(query_594679, "Action", newJString(Action))
  add(query_594679, "Version", newJString(Version))
  result = call_594678.call(nil, query_594679, nil, nil, nil)

var getDescribeAccountLimits* = Call_GetDescribeAccountLimits_594665(
    name: "getDescribeAccountLimits", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeAccountLimits",
    validator: validate_GetDescribeAccountLimits_594666, base: "/",
    url: url_GetDescribeAccountLimits_594667, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeAdjustmentTypes_594710 = ref object of OpenApiRestCall_593437
proc url_PostDescribeAdjustmentTypes_594712(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeAdjustmentTypes_594711(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the policy adjustment types for use with <a>PutScalingPolicy</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594713 = query.getOrDefault("Action")
  valid_594713 = validateParameter(valid_594713, JString, required = true, default = newJString(
      "DescribeAdjustmentTypes"))
  if valid_594713 != nil:
    section.add "Action", valid_594713
  var valid_594714 = query.getOrDefault("Version")
  valid_594714 = validateParameter(valid_594714, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_594714 != nil:
    section.add "Version", valid_594714
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594715 = header.getOrDefault("X-Amz-Date")
  valid_594715 = validateParameter(valid_594715, JString, required = false,
                                 default = nil)
  if valid_594715 != nil:
    section.add "X-Amz-Date", valid_594715
  var valid_594716 = header.getOrDefault("X-Amz-Security-Token")
  valid_594716 = validateParameter(valid_594716, JString, required = false,
                                 default = nil)
  if valid_594716 != nil:
    section.add "X-Amz-Security-Token", valid_594716
  var valid_594717 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594717 = validateParameter(valid_594717, JString, required = false,
                                 default = nil)
  if valid_594717 != nil:
    section.add "X-Amz-Content-Sha256", valid_594717
  var valid_594718 = header.getOrDefault("X-Amz-Algorithm")
  valid_594718 = validateParameter(valid_594718, JString, required = false,
                                 default = nil)
  if valid_594718 != nil:
    section.add "X-Amz-Algorithm", valid_594718
  var valid_594719 = header.getOrDefault("X-Amz-Signature")
  valid_594719 = validateParameter(valid_594719, JString, required = false,
                                 default = nil)
  if valid_594719 != nil:
    section.add "X-Amz-Signature", valid_594719
  var valid_594720 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594720 = validateParameter(valid_594720, JString, required = false,
                                 default = nil)
  if valid_594720 != nil:
    section.add "X-Amz-SignedHeaders", valid_594720
  var valid_594721 = header.getOrDefault("X-Amz-Credential")
  valid_594721 = validateParameter(valid_594721, JString, required = false,
                                 default = nil)
  if valid_594721 != nil:
    section.add "X-Amz-Credential", valid_594721
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594722: Call_PostDescribeAdjustmentTypes_594710; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the policy adjustment types for use with <a>PutScalingPolicy</a>.
  ## 
  let valid = call_594722.validator(path, query, header, formData, body)
  let scheme = call_594722.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594722.url(scheme.get, call_594722.host, call_594722.base,
                         call_594722.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594722, url, valid)

proc call*(call_594723: Call_PostDescribeAdjustmentTypes_594710;
          Action: string = "DescribeAdjustmentTypes"; Version: string = "2011-01-01"): Recallable =
  ## postDescribeAdjustmentTypes
  ## Describes the policy adjustment types for use with <a>PutScalingPolicy</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594724 = newJObject()
  add(query_594724, "Action", newJString(Action))
  add(query_594724, "Version", newJString(Version))
  result = call_594723.call(nil, query_594724, nil, nil, nil)

var postDescribeAdjustmentTypes* = Call_PostDescribeAdjustmentTypes_594710(
    name: "postDescribeAdjustmentTypes", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeAdjustmentTypes",
    validator: validate_PostDescribeAdjustmentTypes_594711, base: "/",
    url: url_PostDescribeAdjustmentTypes_594712,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeAdjustmentTypes_594695 = ref object of OpenApiRestCall_593437
proc url_GetDescribeAdjustmentTypes_594697(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeAdjustmentTypes_594696(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the policy adjustment types for use with <a>PutScalingPolicy</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594698 = query.getOrDefault("Action")
  valid_594698 = validateParameter(valid_594698, JString, required = true, default = newJString(
      "DescribeAdjustmentTypes"))
  if valid_594698 != nil:
    section.add "Action", valid_594698
  var valid_594699 = query.getOrDefault("Version")
  valid_594699 = validateParameter(valid_594699, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_594699 != nil:
    section.add "Version", valid_594699
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594700 = header.getOrDefault("X-Amz-Date")
  valid_594700 = validateParameter(valid_594700, JString, required = false,
                                 default = nil)
  if valid_594700 != nil:
    section.add "X-Amz-Date", valid_594700
  var valid_594701 = header.getOrDefault("X-Amz-Security-Token")
  valid_594701 = validateParameter(valid_594701, JString, required = false,
                                 default = nil)
  if valid_594701 != nil:
    section.add "X-Amz-Security-Token", valid_594701
  var valid_594702 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594702 = validateParameter(valid_594702, JString, required = false,
                                 default = nil)
  if valid_594702 != nil:
    section.add "X-Amz-Content-Sha256", valid_594702
  var valid_594703 = header.getOrDefault("X-Amz-Algorithm")
  valid_594703 = validateParameter(valid_594703, JString, required = false,
                                 default = nil)
  if valid_594703 != nil:
    section.add "X-Amz-Algorithm", valid_594703
  var valid_594704 = header.getOrDefault("X-Amz-Signature")
  valid_594704 = validateParameter(valid_594704, JString, required = false,
                                 default = nil)
  if valid_594704 != nil:
    section.add "X-Amz-Signature", valid_594704
  var valid_594705 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594705 = validateParameter(valid_594705, JString, required = false,
                                 default = nil)
  if valid_594705 != nil:
    section.add "X-Amz-SignedHeaders", valid_594705
  var valid_594706 = header.getOrDefault("X-Amz-Credential")
  valid_594706 = validateParameter(valid_594706, JString, required = false,
                                 default = nil)
  if valid_594706 != nil:
    section.add "X-Amz-Credential", valid_594706
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594707: Call_GetDescribeAdjustmentTypes_594695; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the policy adjustment types for use with <a>PutScalingPolicy</a>.
  ## 
  let valid = call_594707.validator(path, query, header, formData, body)
  let scheme = call_594707.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594707.url(scheme.get, call_594707.host, call_594707.base,
                         call_594707.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594707, url, valid)

proc call*(call_594708: Call_GetDescribeAdjustmentTypes_594695;
          Action: string = "DescribeAdjustmentTypes"; Version: string = "2011-01-01"): Recallable =
  ## getDescribeAdjustmentTypes
  ## Describes the policy adjustment types for use with <a>PutScalingPolicy</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594709 = newJObject()
  add(query_594709, "Action", newJString(Action))
  add(query_594709, "Version", newJString(Version))
  result = call_594708.call(nil, query_594709, nil, nil, nil)

var getDescribeAdjustmentTypes* = Call_GetDescribeAdjustmentTypes_594695(
    name: "getDescribeAdjustmentTypes", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeAdjustmentTypes",
    validator: validate_GetDescribeAdjustmentTypes_594696, base: "/",
    url: url_GetDescribeAdjustmentTypes_594697,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeAutoScalingGroups_594743 = ref object of OpenApiRestCall_593437
proc url_PostDescribeAutoScalingGroups_594745(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeAutoScalingGroups_594744(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more Auto Scaling groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594746 = query.getOrDefault("Action")
  valid_594746 = validateParameter(valid_594746, JString, required = true, default = newJString(
      "DescribeAutoScalingGroups"))
  if valid_594746 != nil:
    section.add "Action", valid_594746
  var valid_594747 = query.getOrDefault("Version")
  valid_594747 = validateParameter(valid_594747, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_594747 != nil:
    section.add "Version", valid_594747
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594748 = header.getOrDefault("X-Amz-Date")
  valid_594748 = validateParameter(valid_594748, JString, required = false,
                                 default = nil)
  if valid_594748 != nil:
    section.add "X-Amz-Date", valid_594748
  var valid_594749 = header.getOrDefault("X-Amz-Security-Token")
  valid_594749 = validateParameter(valid_594749, JString, required = false,
                                 default = nil)
  if valid_594749 != nil:
    section.add "X-Amz-Security-Token", valid_594749
  var valid_594750 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594750 = validateParameter(valid_594750, JString, required = false,
                                 default = nil)
  if valid_594750 != nil:
    section.add "X-Amz-Content-Sha256", valid_594750
  var valid_594751 = header.getOrDefault("X-Amz-Algorithm")
  valid_594751 = validateParameter(valid_594751, JString, required = false,
                                 default = nil)
  if valid_594751 != nil:
    section.add "X-Amz-Algorithm", valid_594751
  var valid_594752 = header.getOrDefault("X-Amz-Signature")
  valid_594752 = validateParameter(valid_594752, JString, required = false,
                                 default = nil)
  if valid_594752 != nil:
    section.add "X-Amz-Signature", valid_594752
  var valid_594753 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594753 = validateParameter(valid_594753, JString, required = false,
                                 default = nil)
  if valid_594753 != nil:
    section.add "X-Amz-SignedHeaders", valid_594753
  var valid_594754 = header.getOrDefault("X-Amz-Credential")
  valid_594754 = validateParameter(valid_594754, JString, required = false,
                                 default = nil)
  if valid_594754 != nil:
    section.add "X-Amz-Credential", valid_594754
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>. 
  ##   AutoScalingGroupNames: JArray
  ##                        : <p>The names of the Auto Scaling groups. Each name can be a maximum of 1600 characters. By default, you can only specify up to 50 names. You can optionally increase this limit using the <code>MaxRecords</code> parameter. </p> <p>If you omit this parameter, all Auto Scaling groups are described.</p>
  section = newJObject()
  var valid_594755 = formData.getOrDefault("NextToken")
  valid_594755 = validateParameter(valid_594755, JString, required = false,
                                 default = nil)
  if valid_594755 != nil:
    section.add "NextToken", valid_594755
  var valid_594756 = formData.getOrDefault("MaxRecords")
  valid_594756 = validateParameter(valid_594756, JInt, required = false, default = nil)
  if valid_594756 != nil:
    section.add "MaxRecords", valid_594756
  var valid_594757 = formData.getOrDefault("AutoScalingGroupNames")
  valid_594757 = validateParameter(valid_594757, JArray, required = false,
                                 default = nil)
  if valid_594757 != nil:
    section.add "AutoScalingGroupNames", valid_594757
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594758: Call_PostDescribeAutoScalingGroups_594743; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes one or more Auto Scaling groups.
  ## 
  let valid = call_594758.validator(path, query, header, formData, body)
  let scheme = call_594758.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594758.url(scheme.get, call_594758.host, call_594758.base,
                         call_594758.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594758, url, valid)

proc call*(call_594759: Call_PostDescribeAutoScalingGroups_594743;
          NextToken: string = ""; Action: string = "DescribeAutoScalingGroups";
          MaxRecords: int = 0; Version: string = "2011-01-01";
          AutoScalingGroupNames: JsonNode = nil): Recallable =
  ## postDescribeAutoScalingGroups
  ## Describes one or more Auto Scaling groups.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>. 
  ##   Version: string (required)
  ##   AutoScalingGroupNames: JArray
  ##                        : <p>The names of the Auto Scaling groups. Each name can be a maximum of 1600 characters. By default, you can only specify up to 50 names. You can optionally increase this limit using the <code>MaxRecords</code> parameter. </p> <p>If you omit this parameter, all Auto Scaling groups are described.</p>
  var query_594760 = newJObject()
  var formData_594761 = newJObject()
  add(formData_594761, "NextToken", newJString(NextToken))
  add(query_594760, "Action", newJString(Action))
  add(formData_594761, "MaxRecords", newJInt(MaxRecords))
  add(query_594760, "Version", newJString(Version))
  if AutoScalingGroupNames != nil:
    formData_594761.add "AutoScalingGroupNames", AutoScalingGroupNames
  result = call_594759.call(nil, query_594760, nil, formData_594761, nil)

var postDescribeAutoScalingGroups* = Call_PostDescribeAutoScalingGroups_594743(
    name: "postDescribeAutoScalingGroups", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeAutoScalingGroups",
    validator: validate_PostDescribeAutoScalingGroups_594744, base: "/",
    url: url_PostDescribeAutoScalingGroups_594745,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeAutoScalingGroups_594725 = ref object of OpenApiRestCall_593437
proc url_GetDescribeAutoScalingGroups_594727(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeAutoScalingGroups_594726(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more Auto Scaling groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>. 
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: JString (required)
  ##   AutoScalingGroupNames: JArray
  ##                        : <p>The names of the Auto Scaling groups. Each name can be a maximum of 1600 characters. By default, you can only specify up to 50 names. You can optionally increase this limit using the <code>MaxRecords</code> parameter. </p> <p>If you omit this parameter, all Auto Scaling groups are described.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_594728 = query.getOrDefault("MaxRecords")
  valid_594728 = validateParameter(valid_594728, JInt, required = false, default = nil)
  if valid_594728 != nil:
    section.add "MaxRecords", valid_594728
  var valid_594729 = query.getOrDefault("NextToken")
  valid_594729 = validateParameter(valid_594729, JString, required = false,
                                 default = nil)
  if valid_594729 != nil:
    section.add "NextToken", valid_594729
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594730 = query.getOrDefault("Action")
  valid_594730 = validateParameter(valid_594730, JString, required = true, default = newJString(
      "DescribeAutoScalingGroups"))
  if valid_594730 != nil:
    section.add "Action", valid_594730
  var valid_594731 = query.getOrDefault("AutoScalingGroupNames")
  valid_594731 = validateParameter(valid_594731, JArray, required = false,
                                 default = nil)
  if valid_594731 != nil:
    section.add "AutoScalingGroupNames", valid_594731
  var valid_594732 = query.getOrDefault("Version")
  valid_594732 = validateParameter(valid_594732, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_594732 != nil:
    section.add "Version", valid_594732
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594733 = header.getOrDefault("X-Amz-Date")
  valid_594733 = validateParameter(valid_594733, JString, required = false,
                                 default = nil)
  if valid_594733 != nil:
    section.add "X-Amz-Date", valid_594733
  var valid_594734 = header.getOrDefault("X-Amz-Security-Token")
  valid_594734 = validateParameter(valid_594734, JString, required = false,
                                 default = nil)
  if valid_594734 != nil:
    section.add "X-Amz-Security-Token", valid_594734
  var valid_594735 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594735 = validateParameter(valid_594735, JString, required = false,
                                 default = nil)
  if valid_594735 != nil:
    section.add "X-Amz-Content-Sha256", valid_594735
  var valid_594736 = header.getOrDefault("X-Amz-Algorithm")
  valid_594736 = validateParameter(valid_594736, JString, required = false,
                                 default = nil)
  if valid_594736 != nil:
    section.add "X-Amz-Algorithm", valid_594736
  var valid_594737 = header.getOrDefault("X-Amz-Signature")
  valid_594737 = validateParameter(valid_594737, JString, required = false,
                                 default = nil)
  if valid_594737 != nil:
    section.add "X-Amz-Signature", valid_594737
  var valid_594738 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594738 = validateParameter(valid_594738, JString, required = false,
                                 default = nil)
  if valid_594738 != nil:
    section.add "X-Amz-SignedHeaders", valid_594738
  var valid_594739 = header.getOrDefault("X-Amz-Credential")
  valid_594739 = validateParameter(valid_594739, JString, required = false,
                                 default = nil)
  if valid_594739 != nil:
    section.add "X-Amz-Credential", valid_594739
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594740: Call_GetDescribeAutoScalingGroups_594725; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes one or more Auto Scaling groups.
  ## 
  let valid = call_594740.validator(path, query, header, formData, body)
  let scheme = call_594740.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594740.url(scheme.get, call_594740.host, call_594740.base,
                         call_594740.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594740, url, valid)

proc call*(call_594741: Call_GetDescribeAutoScalingGroups_594725;
          MaxRecords: int = 0; NextToken: string = "";
          Action: string = "DescribeAutoScalingGroups";
          AutoScalingGroupNames: JsonNode = nil; Version: string = "2011-01-01"): Recallable =
  ## getDescribeAutoScalingGroups
  ## Describes one or more Auto Scaling groups.
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>. 
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   AutoScalingGroupNames: JArray
  ##                        : <p>The names of the Auto Scaling groups. Each name can be a maximum of 1600 characters. By default, you can only specify up to 50 names. You can optionally increase this limit using the <code>MaxRecords</code> parameter. </p> <p>If you omit this parameter, all Auto Scaling groups are described.</p>
  ##   Version: string (required)
  var query_594742 = newJObject()
  add(query_594742, "MaxRecords", newJInt(MaxRecords))
  add(query_594742, "NextToken", newJString(NextToken))
  add(query_594742, "Action", newJString(Action))
  if AutoScalingGroupNames != nil:
    query_594742.add "AutoScalingGroupNames", AutoScalingGroupNames
  add(query_594742, "Version", newJString(Version))
  result = call_594741.call(nil, query_594742, nil, nil, nil)

var getDescribeAutoScalingGroups* = Call_GetDescribeAutoScalingGroups_594725(
    name: "getDescribeAutoScalingGroups", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeAutoScalingGroups",
    validator: validate_GetDescribeAutoScalingGroups_594726, base: "/",
    url: url_GetDescribeAutoScalingGroups_594727,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeAutoScalingInstances_594780 = ref object of OpenApiRestCall_593437
proc url_PostDescribeAutoScalingInstances_594782(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeAutoScalingInstances_594781(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more Auto Scaling instances.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594783 = query.getOrDefault("Action")
  valid_594783 = validateParameter(valid_594783, JString, required = true, default = newJString(
      "DescribeAutoScalingInstances"))
  if valid_594783 != nil:
    section.add "Action", valid_594783
  var valid_594784 = query.getOrDefault("Version")
  valid_594784 = validateParameter(valid_594784, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_594784 != nil:
    section.add "Version", valid_594784
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594785 = header.getOrDefault("X-Amz-Date")
  valid_594785 = validateParameter(valid_594785, JString, required = false,
                                 default = nil)
  if valid_594785 != nil:
    section.add "X-Amz-Date", valid_594785
  var valid_594786 = header.getOrDefault("X-Amz-Security-Token")
  valid_594786 = validateParameter(valid_594786, JString, required = false,
                                 default = nil)
  if valid_594786 != nil:
    section.add "X-Amz-Security-Token", valid_594786
  var valid_594787 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594787 = validateParameter(valid_594787, JString, required = false,
                                 default = nil)
  if valid_594787 != nil:
    section.add "X-Amz-Content-Sha256", valid_594787
  var valid_594788 = header.getOrDefault("X-Amz-Algorithm")
  valid_594788 = validateParameter(valid_594788, JString, required = false,
                                 default = nil)
  if valid_594788 != nil:
    section.add "X-Amz-Algorithm", valid_594788
  var valid_594789 = header.getOrDefault("X-Amz-Signature")
  valid_594789 = validateParameter(valid_594789, JString, required = false,
                                 default = nil)
  if valid_594789 != nil:
    section.add "X-Amz-Signature", valid_594789
  var valid_594790 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594790 = validateParameter(valid_594790, JString, required = false,
                                 default = nil)
  if valid_594790 != nil:
    section.add "X-Amz-SignedHeaders", valid_594790
  var valid_594791 = header.getOrDefault("X-Amz-Credential")
  valid_594791 = validateParameter(valid_594791, JString, required = false,
                                 default = nil)
  if valid_594791 != nil:
    section.add "X-Amz-Credential", valid_594791
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to <code>MaxRecords</code> IDs. If you omit this parameter, all Auto Scaling instances are described. If you specify an ID that does not exist, it is ignored with no error.
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>50</code>.
  section = newJObject()
  var valid_594792 = formData.getOrDefault("NextToken")
  valid_594792 = validateParameter(valid_594792, JString, required = false,
                                 default = nil)
  if valid_594792 != nil:
    section.add "NextToken", valid_594792
  var valid_594793 = formData.getOrDefault("InstanceIds")
  valid_594793 = validateParameter(valid_594793, JArray, required = false,
                                 default = nil)
  if valid_594793 != nil:
    section.add "InstanceIds", valid_594793
  var valid_594794 = formData.getOrDefault("MaxRecords")
  valid_594794 = validateParameter(valid_594794, JInt, required = false, default = nil)
  if valid_594794 != nil:
    section.add "MaxRecords", valid_594794
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594795: Call_PostDescribeAutoScalingInstances_594780;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes one or more Auto Scaling instances.
  ## 
  let valid = call_594795.validator(path, query, header, formData, body)
  let scheme = call_594795.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594795.url(scheme.get, call_594795.host, call_594795.base,
                         call_594795.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594795, url, valid)

proc call*(call_594796: Call_PostDescribeAutoScalingInstances_594780;
          NextToken: string = ""; InstanceIds: JsonNode = nil;
          Action: string = "DescribeAutoScalingInstances"; MaxRecords: int = 0;
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeAutoScalingInstances
  ## Describes one or more Auto Scaling instances.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to <code>MaxRecords</code> IDs. If you omit this parameter, all Auto Scaling instances are described. If you specify an ID that does not exist, it is ignored with no error.
  ##   Action: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>50</code>.
  ##   Version: string (required)
  var query_594797 = newJObject()
  var formData_594798 = newJObject()
  add(formData_594798, "NextToken", newJString(NextToken))
  if InstanceIds != nil:
    formData_594798.add "InstanceIds", InstanceIds
  add(query_594797, "Action", newJString(Action))
  add(formData_594798, "MaxRecords", newJInt(MaxRecords))
  add(query_594797, "Version", newJString(Version))
  result = call_594796.call(nil, query_594797, nil, formData_594798, nil)

var postDescribeAutoScalingInstances* = Call_PostDescribeAutoScalingInstances_594780(
    name: "postDescribeAutoScalingInstances", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeAutoScalingInstances",
    validator: validate_PostDescribeAutoScalingInstances_594781, base: "/",
    url: url_PostDescribeAutoScalingInstances_594782,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeAutoScalingInstances_594762 = ref object of OpenApiRestCall_593437
proc url_GetDescribeAutoScalingInstances_594764(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeAutoScalingInstances_594763(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more Auto Scaling instances.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>50</code>.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: JString (required)
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to <code>MaxRecords</code> IDs. If you omit this parameter, all Auto Scaling instances are described. If you specify an ID that does not exist, it is ignored with no error.
  ##   Version: JString (required)
  section = newJObject()
  var valid_594765 = query.getOrDefault("MaxRecords")
  valid_594765 = validateParameter(valid_594765, JInt, required = false, default = nil)
  if valid_594765 != nil:
    section.add "MaxRecords", valid_594765
  var valid_594766 = query.getOrDefault("NextToken")
  valid_594766 = validateParameter(valid_594766, JString, required = false,
                                 default = nil)
  if valid_594766 != nil:
    section.add "NextToken", valid_594766
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594767 = query.getOrDefault("Action")
  valid_594767 = validateParameter(valid_594767, JString, required = true, default = newJString(
      "DescribeAutoScalingInstances"))
  if valid_594767 != nil:
    section.add "Action", valid_594767
  var valid_594768 = query.getOrDefault("InstanceIds")
  valid_594768 = validateParameter(valid_594768, JArray, required = false,
                                 default = nil)
  if valid_594768 != nil:
    section.add "InstanceIds", valid_594768
  var valid_594769 = query.getOrDefault("Version")
  valid_594769 = validateParameter(valid_594769, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_594769 != nil:
    section.add "Version", valid_594769
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594770 = header.getOrDefault("X-Amz-Date")
  valid_594770 = validateParameter(valid_594770, JString, required = false,
                                 default = nil)
  if valid_594770 != nil:
    section.add "X-Amz-Date", valid_594770
  var valid_594771 = header.getOrDefault("X-Amz-Security-Token")
  valid_594771 = validateParameter(valid_594771, JString, required = false,
                                 default = nil)
  if valid_594771 != nil:
    section.add "X-Amz-Security-Token", valid_594771
  var valid_594772 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594772 = validateParameter(valid_594772, JString, required = false,
                                 default = nil)
  if valid_594772 != nil:
    section.add "X-Amz-Content-Sha256", valid_594772
  var valid_594773 = header.getOrDefault("X-Amz-Algorithm")
  valid_594773 = validateParameter(valid_594773, JString, required = false,
                                 default = nil)
  if valid_594773 != nil:
    section.add "X-Amz-Algorithm", valid_594773
  var valid_594774 = header.getOrDefault("X-Amz-Signature")
  valid_594774 = validateParameter(valid_594774, JString, required = false,
                                 default = nil)
  if valid_594774 != nil:
    section.add "X-Amz-Signature", valid_594774
  var valid_594775 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594775 = validateParameter(valid_594775, JString, required = false,
                                 default = nil)
  if valid_594775 != nil:
    section.add "X-Amz-SignedHeaders", valid_594775
  var valid_594776 = header.getOrDefault("X-Amz-Credential")
  valid_594776 = validateParameter(valid_594776, JString, required = false,
                                 default = nil)
  if valid_594776 != nil:
    section.add "X-Amz-Credential", valid_594776
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594777: Call_GetDescribeAutoScalingInstances_594762;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes one or more Auto Scaling instances.
  ## 
  let valid = call_594777.validator(path, query, header, formData, body)
  let scheme = call_594777.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594777.url(scheme.get, call_594777.host, call_594777.base,
                         call_594777.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594777, url, valid)

proc call*(call_594778: Call_GetDescribeAutoScalingInstances_594762;
          MaxRecords: int = 0; NextToken: string = "";
          Action: string = "DescribeAutoScalingInstances";
          InstanceIds: JsonNode = nil; Version: string = "2011-01-01"): Recallable =
  ## getDescribeAutoScalingInstances
  ## Describes one or more Auto Scaling instances.
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>50</code>.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to <code>MaxRecords</code> IDs. If you omit this parameter, all Auto Scaling instances are described. If you specify an ID that does not exist, it is ignored with no error.
  ##   Version: string (required)
  var query_594779 = newJObject()
  add(query_594779, "MaxRecords", newJInt(MaxRecords))
  add(query_594779, "NextToken", newJString(NextToken))
  add(query_594779, "Action", newJString(Action))
  if InstanceIds != nil:
    query_594779.add "InstanceIds", InstanceIds
  add(query_594779, "Version", newJString(Version))
  result = call_594778.call(nil, query_594779, nil, nil, nil)

var getDescribeAutoScalingInstances* = Call_GetDescribeAutoScalingInstances_594762(
    name: "getDescribeAutoScalingInstances", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeAutoScalingInstances",
    validator: validate_GetDescribeAutoScalingInstances_594763, base: "/",
    url: url_GetDescribeAutoScalingInstances_594764,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeAutoScalingNotificationTypes_594814 = ref object of OpenApiRestCall_593437
proc url_PostDescribeAutoScalingNotificationTypes_594816(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeAutoScalingNotificationTypes_594815(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the notification types that are supported by Amazon EC2 Auto Scaling.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594817 = query.getOrDefault("Action")
  valid_594817 = validateParameter(valid_594817, JString, required = true, default = newJString(
      "DescribeAutoScalingNotificationTypes"))
  if valid_594817 != nil:
    section.add "Action", valid_594817
  var valid_594818 = query.getOrDefault("Version")
  valid_594818 = validateParameter(valid_594818, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_594818 != nil:
    section.add "Version", valid_594818
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594819 = header.getOrDefault("X-Amz-Date")
  valid_594819 = validateParameter(valid_594819, JString, required = false,
                                 default = nil)
  if valid_594819 != nil:
    section.add "X-Amz-Date", valid_594819
  var valid_594820 = header.getOrDefault("X-Amz-Security-Token")
  valid_594820 = validateParameter(valid_594820, JString, required = false,
                                 default = nil)
  if valid_594820 != nil:
    section.add "X-Amz-Security-Token", valid_594820
  var valid_594821 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594821 = validateParameter(valid_594821, JString, required = false,
                                 default = nil)
  if valid_594821 != nil:
    section.add "X-Amz-Content-Sha256", valid_594821
  var valid_594822 = header.getOrDefault("X-Amz-Algorithm")
  valid_594822 = validateParameter(valid_594822, JString, required = false,
                                 default = nil)
  if valid_594822 != nil:
    section.add "X-Amz-Algorithm", valid_594822
  var valid_594823 = header.getOrDefault("X-Amz-Signature")
  valid_594823 = validateParameter(valid_594823, JString, required = false,
                                 default = nil)
  if valid_594823 != nil:
    section.add "X-Amz-Signature", valid_594823
  var valid_594824 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594824 = validateParameter(valid_594824, JString, required = false,
                                 default = nil)
  if valid_594824 != nil:
    section.add "X-Amz-SignedHeaders", valid_594824
  var valid_594825 = header.getOrDefault("X-Amz-Credential")
  valid_594825 = validateParameter(valid_594825, JString, required = false,
                                 default = nil)
  if valid_594825 != nil:
    section.add "X-Amz-Credential", valid_594825
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594826: Call_PostDescribeAutoScalingNotificationTypes_594814;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the notification types that are supported by Amazon EC2 Auto Scaling.
  ## 
  let valid = call_594826.validator(path, query, header, formData, body)
  let scheme = call_594826.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594826.url(scheme.get, call_594826.host, call_594826.base,
                         call_594826.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594826, url, valid)

proc call*(call_594827: Call_PostDescribeAutoScalingNotificationTypes_594814;
          Action: string = "DescribeAutoScalingNotificationTypes";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeAutoScalingNotificationTypes
  ## Describes the notification types that are supported by Amazon EC2 Auto Scaling.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594828 = newJObject()
  add(query_594828, "Action", newJString(Action))
  add(query_594828, "Version", newJString(Version))
  result = call_594827.call(nil, query_594828, nil, nil, nil)

var postDescribeAutoScalingNotificationTypes* = Call_PostDescribeAutoScalingNotificationTypes_594814(
    name: "postDescribeAutoScalingNotificationTypes", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeAutoScalingNotificationTypes",
    validator: validate_PostDescribeAutoScalingNotificationTypes_594815,
    base: "/", url: url_PostDescribeAutoScalingNotificationTypes_594816,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeAutoScalingNotificationTypes_594799 = ref object of OpenApiRestCall_593437
proc url_GetDescribeAutoScalingNotificationTypes_594801(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeAutoScalingNotificationTypes_594800(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the notification types that are supported by Amazon EC2 Auto Scaling.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594802 = query.getOrDefault("Action")
  valid_594802 = validateParameter(valid_594802, JString, required = true, default = newJString(
      "DescribeAutoScalingNotificationTypes"))
  if valid_594802 != nil:
    section.add "Action", valid_594802
  var valid_594803 = query.getOrDefault("Version")
  valid_594803 = validateParameter(valid_594803, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_594803 != nil:
    section.add "Version", valid_594803
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594804 = header.getOrDefault("X-Amz-Date")
  valid_594804 = validateParameter(valid_594804, JString, required = false,
                                 default = nil)
  if valid_594804 != nil:
    section.add "X-Amz-Date", valid_594804
  var valid_594805 = header.getOrDefault("X-Amz-Security-Token")
  valid_594805 = validateParameter(valid_594805, JString, required = false,
                                 default = nil)
  if valid_594805 != nil:
    section.add "X-Amz-Security-Token", valid_594805
  var valid_594806 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594806 = validateParameter(valid_594806, JString, required = false,
                                 default = nil)
  if valid_594806 != nil:
    section.add "X-Amz-Content-Sha256", valid_594806
  var valid_594807 = header.getOrDefault("X-Amz-Algorithm")
  valid_594807 = validateParameter(valid_594807, JString, required = false,
                                 default = nil)
  if valid_594807 != nil:
    section.add "X-Amz-Algorithm", valid_594807
  var valid_594808 = header.getOrDefault("X-Amz-Signature")
  valid_594808 = validateParameter(valid_594808, JString, required = false,
                                 default = nil)
  if valid_594808 != nil:
    section.add "X-Amz-Signature", valid_594808
  var valid_594809 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594809 = validateParameter(valid_594809, JString, required = false,
                                 default = nil)
  if valid_594809 != nil:
    section.add "X-Amz-SignedHeaders", valid_594809
  var valid_594810 = header.getOrDefault("X-Amz-Credential")
  valid_594810 = validateParameter(valid_594810, JString, required = false,
                                 default = nil)
  if valid_594810 != nil:
    section.add "X-Amz-Credential", valid_594810
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594811: Call_GetDescribeAutoScalingNotificationTypes_594799;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the notification types that are supported by Amazon EC2 Auto Scaling.
  ## 
  let valid = call_594811.validator(path, query, header, formData, body)
  let scheme = call_594811.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594811.url(scheme.get, call_594811.host, call_594811.base,
                         call_594811.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594811, url, valid)

proc call*(call_594812: Call_GetDescribeAutoScalingNotificationTypes_594799;
          Action: string = "DescribeAutoScalingNotificationTypes";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeAutoScalingNotificationTypes
  ## Describes the notification types that are supported by Amazon EC2 Auto Scaling.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594813 = newJObject()
  add(query_594813, "Action", newJString(Action))
  add(query_594813, "Version", newJString(Version))
  result = call_594812.call(nil, query_594813, nil, nil, nil)

var getDescribeAutoScalingNotificationTypes* = Call_GetDescribeAutoScalingNotificationTypes_594799(
    name: "getDescribeAutoScalingNotificationTypes", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeAutoScalingNotificationTypes",
    validator: validate_GetDescribeAutoScalingNotificationTypes_594800, base: "/",
    url: url_GetDescribeAutoScalingNotificationTypes_594801,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeLaunchConfigurations_594847 = ref object of OpenApiRestCall_593437
proc url_PostDescribeLaunchConfigurations_594849(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeLaunchConfigurations_594848(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more launch configurations.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594850 = query.getOrDefault("Action")
  valid_594850 = validateParameter(valid_594850, JString, required = true, default = newJString(
      "DescribeLaunchConfigurations"))
  if valid_594850 != nil:
    section.add "Action", valid_594850
  var valid_594851 = query.getOrDefault("Version")
  valid_594851 = validateParameter(valid_594851, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_594851 != nil:
    section.add "Version", valid_594851
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594852 = header.getOrDefault("X-Amz-Date")
  valid_594852 = validateParameter(valid_594852, JString, required = false,
                                 default = nil)
  if valid_594852 != nil:
    section.add "X-Amz-Date", valid_594852
  var valid_594853 = header.getOrDefault("X-Amz-Security-Token")
  valid_594853 = validateParameter(valid_594853, JString, required = false,
                                 default = nil)
  if valid_594853 != nil:
    section.add "X-Amz-Security-Token", valid_594853
  var valid_594854 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594854 = validateParameter(valid_594854, JString, required = false,
                                 default = nil)
  if valid_594854 != nil:
    section.add "X-Amz-Content-Sha256", valid_594854
  var valid_594855 = header.getOrDefault("X-Amz-Algorithm")
  valid_594855 = validateParameter(valid_594855, JString, required = false,
                                 default = nil)
  if valid_594855 != nil:
    section.add "X-Amz-Algorithm", valid_594855
  var valid_594856 = header.getOrDefault("X-Amz-Signature")
  valid_594856 = validateParameter(valid_594856, JString, required = false,
                                 default = nil)
  if valid_594856 != nil:
    section.add "X-Amz-Signature", valid_594856
  var valid_594857 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594857 = validateParameter(valid_594857, JString, required = false,
                                 default = nil)
  if valid_594857 != nil:
    section.add "X-Amz-SignedHeaders", valid_594857
  var valid_594858 = header.getOrDefault("X-Amz-Credential")
  valid_594858 = validateParameter(valid_594858, JString, required = false,
                                 default = nil)
  if valid_594858 != nil:
    section.add "X-Amz-Credential", valid_594858
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   LaunchConfigurationNames: JArray
  ##                           : The launch configuration names. If you omit this parameter, all launch configurations are described.
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  section = newJObject()
  var valid_594859 = formData.getOrDefault("NextToken")
  valid_594859 = validateParameter(valid_594859, JString, required = false,
                                 default = nil)
  if valid_594859 != nil:
    section.add "NextToken", valid_594859
  var valid_594860 = formData.getOrDefault("LaunchConfigurationNames")
  valid_594860 = validateParameter(valid_594860, JArray, required = false,
                                 default = nil)
  if valid_594860 != nil:
    section.add "LaunchConfigurationNames", valid_594860
  var valid_594861 = formData.getOrDefault("MaxRecords")
  valid_594861 = validateParameter(valid_594861, JInt, required = false, default = nil)
  if valid_594861 != nil:
    section.add "MaxRecords", valid_594861
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594862: Call_PostDescribeLaunchConfigurations_594847;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes one or more launch configurations.
  ## 
  let valid = call_594862.validator(path, query, header, formData, body)
  let scheme = call_594862.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594862.url(scheme.get, call_594862.host, call_594862.base,
                         call_594862.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594862, url, valid)

proc call*(call_594863: Call_PostDescribeLaunchConfigurations_594847;
          NextToken: string = ""; LaunchConfigurationNames: JsonNode = nil;
          Action: string = "DescribeLaunchConfigurations"; MaxRecords: int = 0;
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeLaunchConfigurations
  ## Describes one or more launch configurations.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   LaunchConfigurationNames: JArray
  ##                           : The launch configuration names. If you omit this parameter, all launch configurations are described.
  ##   Action: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   Version: string (required)
  var query_594864 = newJObject()
  var formData_594865 = newJObject()
  add(formData_594865, "NextToken", newJString(NextToken))
  if LaunchConfigurationNames != nil:
    formData_594865.add "LaunchConfigurationNames", LaunchConfigurationNames
  add(query_594864, "Action", newJString(Action))
  add(formData_594865, "MaxRecords", newJInt(MaxRecords))
  add(query_594864, "Version", newJString(Version))
  result = call_594863.call(nil, query_594864, nil, formData_594865, nil)

var postDescribeLaunchConfigurations* = Call_PostDescribeLaunchConfigurations_594847(
    name: "postDescribeLaunchConfigurations", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeLaunchConfigurations",
    validator: validate_PostDescribeLaunchConfigurations_594848, base: "/",
    url: url_PostDescribeLaunchConfigurations_594849,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeLaunchConfigurations_594829 = ref object of OpenApiRestCall_593437
proc url_GetDescribeLaunchConfigurations_594831(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeLaunchConfigurations_594830(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more launch configurations.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   LaunchConfigurationNames: JArray
  ##                           : The launch configuration names. If you omit this parameter, all launch configurations are described.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_594832 = query.getOrDefault("MaxRecords")
  valid_594832 = validateParameter(valid_594832, JInt, required = false, default = nil)
  if valid_594832 != nil:
    section.add "MaxRecords", valid_594832
  var valid_594833 = query.getOrDefault("NextToken")
  valid_594833 = validateParameter(valid_594833, JString, required = false,
                                 default = nil)
  if valid_594833 != nil:
    section.add "NextToken", valid_594833
  var valid_594834 = query.getOrDefault("LaunchConfigurationNames")
  valid_594834 = validateParameter(valid_594834, JArray, required = false,
                                 default = nil)
  if valid_594834 != nil:
    section.add "LaunchConfigurationNames", valid_594834
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594835 = query.getOrDefault("Action")
  valid_594835 = validateParameter(valid_594835, JString, required = true, default = newJString(
      "DescribeLaunchConfigurations"))
  if valid_594835 != nil:
    section.add "Action", valid_594835
  var valid_594836 = query.getOrDefault("Version")
  valid_594836 = validateParameter(valid_594836, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_594836 != nil:
    section.add "Version", valid_594836
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594837 = header.getOrDefault("X-Amz-Date")
  valid_594837 = validateParameter(valid_594837, JString, required = false,
                                 default = nil)
  if valid_594837 != nil:
    section.add "X-Amz-Date", valid_594837
  var valid_594838 = header.getOrDefault("X-Amz-Security-Token")
  valid_594838 = validateParameter(valid_594838, JString, required = false,
                                 default = nil)
  if valid_594838 != nil:
    section.add "X-Amz-Security-Token", valid_594838
  var valid_594839 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594839 = validateParameter(valid_594839, JString, required = false,
                                 default = nil)
  if valid_594839 != nil:
    section.add "X-Amz-Content-Sha256", valid_594839
  var valid_594840 = header.getOrDefault("X-Amz-Algorithm")
  valid_594840 = validateParameter(valid_594840, JString, required = false,
                                 default = nil)
  if valid_594840 != nil:
    section.add "X-Amz-Algorithm", valid_594840
  var valid_594841 = header.getOrDefault("X-Amz-Signature")
  valid_594841 = validateParameter(valid_594841, JString, required = false,
                                 default = nil)
  if valid_594841 != nil:
    section.add "X-Amz-Signature", valid_594841
  var valid_594842 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594842 = validateParameter(valid_594842, JString, required = false,
                                 default = nil)
  if valid_594842 != nil:
    section.add "X-Amz-SignedHeaders", valid_594842
  var valid_594843 = header.getOrDefault("X-Amz-Credential")
  valid_594843 = validateParameter(valid_594843, JString, required = false,
                                 default = nil)
  if valid_594843 != nil:
    section.add "X-Amz-Credential", valid_594843
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594844: Call_GetDescribeLaunchConfigurations_594829;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes one or more launch configurations.
  ## 
  let valid = call_594844.validator(path, query, header, formData, body)
  let scheme = call_594844.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594844.url(scheme.get, call_594844.host, call_594844.base,
                         call_594844.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594844, url, valid)

proc call*(call_594845: Call_GetDescribeLaunchConfigurations_594829;
          MaxRecords: int = 0; NextToken: string = "";
          LaunchConfigurationNames: JsonNode = nil;
          Action: string = "DescribeLaunchConfigurations";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeLaunchConfigurations
  ## Describes one or more launch configurations.
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   LaunchConfigurationNames: JArray
  ##                           : The launch configuration names. If you omit this parameter, all launch configurations are described.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594846 = newJObject()
  add(query_594846, "MaxRecords", newJInt(MaxRecords))
  add(query_594846, "NextToken", newJString(NextToken))
  if LaunchConfigurationNames != nil:
    query_594846.add "LaunchConfigurationNames", LaunchConfigurationNames
  add(query_594846, "Action", newJString(Action))
  add(query_594846, "Version", newJString(Version))
  result = call_594845.call(nil, query_594846, nil, nil, nil)

var getDescribeLaunchConfigurations* = Call_GetDescribeLaunchConfigurations_594829(
    name: "getDescribeLaunchConfigurations", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeLaunchConfigurations",
    validator: validate_GetDescribeLaunchConfigurations_594830, base: "/",
    url: url_GetDescribeLaunchConfigurations_594831,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeLifecycleHookTypes_594881 = ref object of OpenApiRestCall_593437
proc url_PostDescribeLifecycleHookTypes_594883(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeLifecycleHookTypes_594882(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the available types of lifecycle hooks.</p> <p>The following hook types are supported:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594884 = query.getOrDefault("Action")
  valid_594884 = validateParameter(valid_594884, JString, required = true, default = newJString(
      "DescribeLifecycleHookTypes"))
  if valid_594884 != nil:
    section.add "Action", valid_594884
  var valid_594885 = query.getOrDefault("Version")
  valid_594885 = validateParameter(valid_594885, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_594885 != nil:
    section.add "Version", valid_594885
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594886 = header.getOrDefault("X-Amz-Date")
  valid_594886 = validateParameter(valid_594886, JString, required = false,
                                 default = nil)
  if valid_594886 != nil:
    section.add "X-Amz-Date", valid_594886
  var valid_594887 = header.getOrDefault("X-Amz-Security-Token")
  valid_594887 = validateParameter(valid_594887, JString, required = false,
                                 default = nil)
  if valid_594887 != nil:
    section.add "X-Amz-Security-Token", valid_594887
  var valid_594888 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594888 = validateParameter(valid_594888, JString, required = false,
                                 default = nil)
  if valid_594888 != nil:
    section.add "X-Amz-Content-Sha256", valid_594888
  var valid_594889 = header.getOrDefault("X-Amz-Algorithm")
  valid_594889 = validateParameter(valid_594889, JString, required = false,
                                 default = nil)
  if valid_594889 != nil:
    section.add "X-Amz-Algorithm", valid_594889
  var valid_594890 = header.getOrDefault("X-Amz-Signature")
  valid_594890 = validateParameter(valid_594890, JString, required = false,
                                 default = nil)
  if valid_594890 != nil:
    section.add "X-Amz-Signature", valid_594890
  var valid_594891 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594891 = validateParameter(valid_594891, JString, required = false,
                                 default = nil)
  if valid_594891 != nil:
    section.add "X-Amz-SignedHeaders", valid_594891
  var valid_594892 = header.getOrDefault("X-Amz-Credential")
  valid_594892 = validateParameter(valid_594892, JString, required = false,
                                 default = nil)
  if valid_594892 != nil:
    section.add "X-Amz-Credential", valid_594892
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594893: Call_PostDescribeLifecycleHookTypes_594881; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the available types of lifecycle hooks.</p> <p>The following hook types are supported:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul>
  ## 
  let valid = call_594893.validator(path, query, header, formData, body)
  let scheme = call_594893.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594893.url(scheme.get, call_594893.host, call_594893.base,
                         call_594893.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594893, url, valid)

proc call*(call_594894: Call_PostDescribeLifecycleHookTypes_594881;
          Action: string = "DescribeLifecycleHookTypes";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeLifecycleHookTypes
  ## <p>Describes the available types of lifecycle hooks.</p> <p>The following hook types are supported:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594895 = newJObject()
  add(query_594895, "Action", newJString(Action))
  add(query_594895, "Version", newJString(Version))
  result = call_594894.call(nil, query_594895, nil, nil, nil)

var postDescribeLifecycleHookTypes* = Call_PostDescribeLifecycleHookTypes_594881(
    name: "postDescribeLifecycleHookTypes", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeLifecycleHookTypes",
    validator: validate_PostDescribeLifecycleHookTypes_594882, base: "/",
    url: url_PostDescribeLifecycleHookTypes_594883,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeLifecycleHookTypes_594866 = ref object of OpenApiRestCall_593437
proc url_GetDescribeLifecycleHookTypes_594868(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeLifecycleHookTypes_594867(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the available types of lifecycle hooks.</p> <p>The following hook types are supported:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594869 = query.getOrDefault("Action")
  valid_594869 = validateParameter(valid_594869, JString, required = true, default = newJString(
      "DescribeLifecycleHookTypes"))
  if valid_594869 != nil:
    section.add "Action", valid_594869
  var valid_594870 = query.getOrDefault("Version")
  valid_594870 = validateParameter(valid_594870, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_594870 != nil:
    section.add "Version", valid_594870
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594871 = header.getOrDefault("X-Amz-Date")
  valid_594871 = validateParameter(valid_594871, JString, required = false,
                                 default = nil)
  if valid_594871 != nil:
    section.add "X-Amz-Date", valid_594871
  var valid_594872 = header.getOrDefault("X-Amz-Security-Token")
  valid_594872 = validateParameter(valid_594872, JString, required = false,
                                 default = nil)
  if valid_594872 != nil:
    section.add "X-Amz-Security-Token", valid_594872
  var valid_594873 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594873 = validateParameter(valid_594873, JString, required = false,
                                 default = nil)
  if valid_594873 != nil:
    section.add "X-Amz-Content-Sha256", valid_594873
  var valid_594874 = header.getOrDefault("X-Amz-Algorithm")
  valid_594874 = validateParameter(valid_594874, JString, required = false,
                                 default = nil)
  if valid_594874 != nil:
    section.add "X-Amz-Algorithm", valid_594874
  var valid_594875 = header.getOrDefault("X-Amz-Signature")
  valid_594875 = validateParameter(valid_594875, JString, required = false,
                                 default = nil)
  if valid_594875 != nil:
    section.add "X-Amz-Signature", valid_594875
  var valid_594876 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594876 = validateParameter(valid_594876, JString, required = false,
                                 default = nil)
  if valid_594876 != nil:
    section.add "X-Amz-SignedHeaders", valid_594876
  var valid_594877 = header.getOrDefault("X-Amz-Credential")
  valid_594877 = validateParameter(valid_594877, JString, required = false,
                                 default = nil)
  if valid_594877 != nil:
    section.add "X-Amz-Credential", valid_594877
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594878: Call_GetDescribeLifecycleHookTypes_594866; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the available types of lifecycle hooks.</p> <p>The following hook types are supported:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul>
  ## 
  let valid = call_594878.validator(path, query, header, formData, body)
  let scheme = call_594878.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594878.url(scheme.get, call_594878.host, call_594878.base,
                         call_594878.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594878, url, valid)

proc call*(call_594879: Call_GetDescribeLifecycleHookTypes_594866;
          Action: string = "DescribeLifecycleHookTypes";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeLifecycleHookTypes
  ## <p>Describes the available types of lifecycle hooks.</p> <p>The following hook types are supported:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594880 = newJObject()
  add(query_594880, "Action", newJString(Action))
  add(query_594880, "Version", newJString(Version))
  result = call_594879.call(nil, query_594880, nil, nil, nil)

var getDescribeLifecycleHookTypes* = Call_GetDescribeLifecycleHookTypes_594866(
    name: "getDescribeLifecycleHookTypes", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeLifecycleHookTypes",
    validator: validate_GetDescribeLifecycleHookTypes_594867, base: "/",
    url: url_GetDescribeLifecycleHookTypes_594868,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeLifecycleHooks_594913 = ref object of OpenApiRestCall_593437
proc url_PostDescribeLifecycleHooks_594915(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeLifecycleHooks_594914(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the lifecycle hooks for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594916 = query.getOrDefault("Action")
  valid_594916 = validateParameter(valid_594916, JString, required = true,
                                 default = newJString("DescribeLifecycleHooks"))
  if valid_594916 != nil:
    section.add "Action", valid_594916
  var valid_594917 = query.getOrDefault("Version")
  valid_594917 = validateParameter(valid_594917, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_594917 != nil:
    section.add "Version", valid_594917
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594918 = header.getOrDefault("X-Amz-Date")
  valid_594918 = validateParameter(valid_594918, JString, required = false,
                                 default = nil)
  if valid_594918 != nil:
    section.add "X-Amz-Date", valid_594918
  var valid_594919 = header.getOrDefault("X-Amz-Security-Token")
  valid_594919 = validateParameter(valid_594919, JString, required = false,
                                 default = nil)
  if valid_594919 != nil:
    section.add "X-Amz-Security-Token", valid_594919
  var valid_594920 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594920 = validateParameter(valid_594920, JString, required = false,
                                 default = nil)
  if valid_594920 != nil:
    section.add "X-Amz-Content-Sha256", valid_594920
  var valid_594921 = header.getOrDefault("X-Amz-Algorithm")
  valid_594921 = validateParameter(valid_594921, JString, required = false,
                                 default = nil)
  if valid_594921 != nil:
    section.add "X-Amz-Algorithm", valid_594921
  var valid_594922 = header.getOrDefault("X-Amz-Signature")
  valid_594922 = validateParameter(valid_594922, JString, required = false,
                                 default = nil)
  if valid_594922 != nil:
    section.add "X-Amz-Signature", valid_594922
  var valid_594923 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594923 = validateParameter(valid_594923, JString, required = false,
                                 default = nil)
  if valid_594923 != nil:
    section.add "X-Amz-SignedHeaders", valid_594923
  var valid_594924 = header.getOrDefault("X-Amz-Credential")
  valid_594924 = validateParameter(valid_594924, JString, required = false,
                                 default = nil)
  if valid_594924 != nil:
    section.add "X-Amz-Credential", valid_594924
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookNames: JArray
  ##                     : The names of one or more lifecycle hooks. If you omit this parameter, all lifecycle hooks are described.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_594925 = formData.getOrDefault("AutoScalingGroupName")
  valid_594925 = validateParameter(valid_594925, JString, required = true,
                                 default = nil)
  if valid_594925 != nil:
    section.add "AutoScalingGroupName", valid_594925
  var valid_594926 = formData.getOrDefault("LifecycleHookNames")
  valid_594926 = validateParameter(valid_594926, JArray, required = false,
                                 default = nil)
  if valid_594926 != nil:
    section.add "LifecycleHookNames", valid_594926
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594927: Call_PostDescribeLifecycleHooks_594913; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the lifecycle hooks for the specified Auto Scaling group.
  ## 
  let valid = call_594927.validator(path, query, header, formData, body)
  let scheme = call_594927.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594927.url(scheme.get, call_594927.host, call_594927.base,
                         call_594927.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594927, url, valid)

proc call*(call_594928: Call_PostDescribeLifecycleHooks_594913;
          AutoScalingGroupName: string; LifecycleHookNames: JsonNode = nil;
          Action: string = "DescribeLifecycleHooks"; Version: string = "2011-01-01"): Recallable =
  ## postDescribeLifecycleHooks
  ## Describes the lifecycle hooks for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookNames: JArray
  ##                     : The names of one or more lifecycle hooks. If you omit this parameter, all lifecycle hooks are described.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594929 = newJObject()
  var formData_594930 = newJObject()
  add(formData_594930, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if LifecycleHookNames != nil:
    formData_594930.add "LifecycleHookNames", LifecycleHookNames
  add(query_594929, "Action", newJString(Action))
  add(query_594929, "Version", newJString(Version))
  result = call_594928.call(nil, query_594929, nil, formData_594930, nil)

var postDescribeLifecycleHooks* = Call_PostDescribeLifecycleHooks_594913(
    name: "postDescribeLifecycleHooks", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeLifecycleHooks",
    validator: validate_PostDescribeLifecycleHooks_594914, base: "/",
    url: url_PostDescribeLifecycleHooks_594915,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeLifecycleHooks_594896 = ref object of OpenApiRestCall_593437
proc url_GetDescribeLifecycleHooks_594898(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeLifecycleHooks_594897(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the lifecycle hooks for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookNames: JArray
  ##                     : The names of one or more lifecycle hooks. If you omit this parameter, all lifecycle hooks are described.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_594899 = query.getOrDefault("AutoScalingGroupName")
  valid_594899 = validateParameter(valid_594899, JString, required = true,
                                 default = nil)
  if valid_594899 != nil:
    section.add "AutoScalingGroupName", valid_594899
  var valid_594900 = query.getOrDefault("LifecycleHookNames")
  valid_594900 = validateParameter(valid_594900, JArray, required = false,
                                 default = nil)
  if valid_594900 != nil:
    section.add "LifecycleHookNames", valid_594900
  var valid_594901 = query.getOrDefault("Action")
  valid_594901 = validateParameter(valid_594901, JString, required = true,
                                 default = newJString("DescribeLifecycleHooks"))
  if valid_594901 != nil:
    section.add "Action", valid_594901
  var valid_594902 = query.getOrDefault("Version")
  valid_594902 = validateParameter(valid_594902, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_594902 != nil:
    section.add "Version", valid_594902
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594903 = header.getOrDefault("X-Amz-Date")
  valid_594903 = validateParameter(valid_594903, JString, required = false,
                                 default = nil)
  if valid_594903 != nil:
    section.add "X-Amz-Date", valid_594903
  var valid_594904 = header.getOrDefault("X-Amz-Security-Token")
  valid_594904 = validateParameter(valid_594904, JString, required = false,
                                 default = nil)
  if valid_594904 != nil:
    section.add "X-Amz-Security-Token", valid_594904
  var valid_594905 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594905 = validateParameter(valid_594905, JString, required = false,
                                 default = nil)
  if valid_594905 != nil:
    section.add "X-Amz-Content-Sha256", valid_594905
  var valid_594906 = header.getOrDefault("X-Amz-Algorithm")
  valid_594906 = validateParameter(valid_594906, JString, required = false,
                                 default = nil)
  if valid_594906 != nil:
    section.add "X-Amz-Algorithm", valid_594906
  var valid_594907 = header.getOrDefault("X-Amz-Signature")
  valid_594907 = validateParameter(valid_594907, JString, required = false,
                                 default = nil)
  if valid_594907 != nil:
    section.add "X-Amz-Signature", valid_594907
  var valid_594908 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594908 = validateParameter(valid_594908, JString, required = false,
                                 default = nil)
  if valid_594908 != nil:
    section.add "X-Amz-SignedHeaders", valid_594908
  var valid_594909 = header.getOrDefault("X-Amz-Credential")
  valid_594909 = validateParameter(valid_594909, JString, required = false,
                                 default = nil)
  if valid_594909 != nil:
    section.add "X-Amz-Credential", valid_594909
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594910: Call_GetDescribeLifecycleHooks_594896; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the lifecycle hooks for the specified Auto Scaling group.
  ## 
  let valid = call_594910.validator(path, query, header, formData, body)
  let scheme = call_594910.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594910.url(scheme.get, call_594910.host, call_594910.base,
                         call_594910.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594910, url, valid)

proc call*(call_594911: Call_GetDescribeLifecycleHooks_594896;
          AutoScalingGroupName: string; LifecycleHookNames: JsonNode = nil;
          Action: string = "DescribeLifecycleHooks"; Version: string = "2011-01-01"): Recallable =
  ## getDescribeLifecycleHooks
  ## Describes the lifecycle hooks for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookNames: JArray
  ##                     : The names of one or more lifecycle hooks. If you omit this parameter, all lifecycle hooks are described.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594912 = newJObject()
  add(query_594912, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if LifecycleHookNames != nil:
    query_594912.add "LifecycleHookNames", LifecycleHookNames
  add(query_594912, "Action", newJString(Action))
  add(query_594912, "Version", newJString(Version))
  result = call_594911.call(nil, query_594912, nil, nil, nil)

var getDescribeLifecycleHooks* = Call_GetDescribeLifecycleHooks_594896(
    name: "getDescribeLifecycleHooks", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeLifecycleHooks",
    validator: validate_GetDescribeLifecycleHooks_594897, base: "/",
    url: url_GetDescribeLifecycleHooks_594898,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeLoadBalancerTargetGroups_594949 = ref object of OpenApiRestCall_593437
proc url_PostDescribeLoadBalancerTargetGroups_594951(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeLoadBalancerTargetGroups_594950(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the target groups for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594952 = query.getOrDefault("Action")
  valid_594952 = validateParameter(valid_594952, JString, required = true, default = newJString(
      "DescribeLoadBalancerTargetGroups"))
  if valid_594952 != nil:
    section.add "Action", valid_594952
  var valid_594953 = query.getOrDefault("Version")
  valid_594953 = validateParameter(valid_594953, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_594953 != nil:
    section.add "Version", valid_594953
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594954 = header.getOrDefault("X-Amz-Date")
  valid_594954 = validateParameter(valid_594954, JString, required = false,
                                 default = nil)
  if valid_594954 != nil:
    section.add "X-Amz-Date", valid_594954
  var valid_594955 = header.getOrDefault("X-Amz-Security-Token")
  valid_594955 = validateParameter(valid_594955, JString, required = false,
                                 default = nil)
  if valid_594955 != nil:
    section.add "X-Amz-Security-Token", valid_594955
  var valid_594956 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594956 = validateParameter(valid_594956, JString, required = false,
                                 default = nil)
  if valid_594956 != nil:
    section.add "X-Amz-Content-Sha256", valid_594956
  var valid_594957 = header.getOrDefault("X-Amz-Algorithm")
  valid_594957 = validateParameter(valid_594957, JString, required = false,
                                 default = nil)
  if valid_594957 != nil:
    section.add "X-Amz-Algorithm", valid_594957
  var valid_594958 = header.getOrDefault("X-Amz-Signature")
  valid_594958 = validateParameter(valid_594958, JString, required = false,
                                 default = nil)
  if valid_594958 != nil:
    section.add "X-Amz-Signature", valid_594958
  var valid_594959 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594959 = validateParameter(valid_594959, JString, required = false,
                                 default = nil)
  if valid_594959 != nil:
    section.add "X-Amz-SignedHeaders", valid_594959
  var valid_594960 = header.getOrDefault("X-Amz-Credential")
  valid_594960 = validateParameter(valid_594960, JString, required = false,
                                 default = nil)
  if valid_594960 != nil:
    section.add "X-Amz-Credential", valid_594960
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_594961 = formData.getOrDefault("AutoScalingGroupName")
  valid_594961 = validateParameter(valid_594961, JString, required = true,
                                 default = nil)
  if valid_594961 != nil:
    section.add "AutoScalingGroupName", valid_594961
  var valid_594962 = formData.getOrDefault("NextToken")
  valid_594962 = validateParameter(valid_594962, JString, required = false,
                                 default = nil)
  if valid_594962 != nil:
    section.add "NextToken", valid_594962
  var valid_594963 = formData.getOrDefault("MaxRecords")
  valid_594963 = validateParameter(valid_594963, JInt, required = false, default = nil)
  if valid_594963 != nil:
    section.add "MaxRecords", valid_594963
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594964: Call_PostDescribeLoadBalancerTargetGroups_594949;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the target groups for the specified Auto Scaling group.
  ## 
  let valid = call_594964.validator(path, query, header, formData, body)
  let scheme = call_594964.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594964.url(scheme.get, call_594964.host, call_594964.base,
                         call_594964.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594964, url, valid)

proc call*(call_594965: Call_PostDescribeLoadBalancerTargetGroups_594949;
          AutoScalingGroupName: string; NextToken: string = "";
          Action: string = "DescribeLoadBalancerTargetGroups"; MaxRecords: int = 0;
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeLoadBalancerTargetGroups
  ## Describes the target groups for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   Version: string (required)
  var query_594966 = newJObject()
  var formData_594967 = newJObject()
  add(formData_594967, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_594967, "NextToken", newJString(NextToken))
  add(query_594966, "Action", newJString(Action))
  add(formData_594967, "MaxRecords", newJInt(MaxRecords))
  add(query_594966, "Version", newJString(Version))
  result = call_594965.call(nil, query_594966, nil, formData_594967, nil)

var postDescribeLoadBalancerTargetGroups* = Call_PostDescribeLoadBalancerTargetGroups_594949(
    name: "postDescribeLoadBalancerTargetGroups", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeLoadBalancerTargetGroups",
    validator: validate_PostDescribeLoadBalancerTargetGroups_594950, base: "/",
    url: url_PostDescribeLoadBalancerTargetGroups_594951,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeLoadBalancerTargetGroups_594931 = ref object of OpenApiRestCall_593437
proc url_GetDescribeLoadBalancerTargetGroups_594933(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeLoadBalancerTargetGroups_594932(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the target groups for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_594934 = query.getOrDefault("MaxRecords")
  valid_594934 = validateParameter(valid_594934, JInt, required = false, default = nil)
  if valid_594934 != nil:
    section.add "MaxRecords", valid_594934
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_594935 = query.getOrDefault("AutoScalingGroupName")
  valid_594935 = validateParameter(valid_594935, JString, required = true,
                                 default = nil)
  if valid_594935 != nil:
    section.add "AutoScalingGroupName", valid_594935
  var valid_594936 = query.getOrDefault("NextToken")
  valid_594936 = validateParameter(valid_594936, JString, required = false,
                                 default = nil)
  if valid_594936 != nil:
    section.add "NextToken", valid_594936
  var valid_594937 = query.getOrDefault("Action")
  valid_594937 = validateParameter(valid_594937, JString, required = true, default = newJString(
      "DescribeLoadBalancerTargetGroups"))
  if valid_594937 != nil:
    section.add "Action", valid_594937
  var valid_594938 = query.getOrDefault("Version")
  valid_594938 = validateParameter(valid_594938, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_594938 != nil:
    section.add "Version", valid_594938
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594939 = header.getOrDefault("X-Amz-Date")
  valid_594939 = validateParameter(valid_594939, JString, required = false,
                                 default = nil)
  if valid_594939 != nil:
    section.add "X-Amz-Date", valid_594939
  var valid_594940 = header.getOrDefault("X-Amz-Security-Token")
  valid_594940 = validateParameter(valid_594940, JString, required = false,
                                 default = nil)
  if valid_594940 != nil:
    section.add "X-Amz-Security-Token", valid_594940
  var valid_594941 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594941 = validateParameter(valid_594941, JString, required = false,
                                 default = nil)
  if valid_594941 != nil:
    section.add "X-Amz-Content-Sha256", valid_594941
  var valid_594942 = header.getOrDefault("X-Amz-Algorithm")
  valid_594942 = validateParameter(valid_594942, JString, required = false,
                                 default = nil)
  if valid_594942 != nil:
    section.add "X-Amz-Algorithm", valid_594942
  var valid_594943 = header.getOrDefault("X-Amz-Signature")
  valid_594943 = validateParameter(valid_594943, JString, required = false,
                                 default = nil)
  if valid_594943 != nil:
    section.add "X-Amz-Signature", valid_594943
  var valid_594944 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594944 = validateParameter(valid_594944, JString, required = false,
                                 default = nil)
  if valid_594944 != nil:
    section.add "X-Amz-SignedHeaders", valid_594944
  var valid_594945 = header.getOrDefault("X-Amz-Credential")
  valid_594945 = validateParameter(valid_594945, JString, required = false,
                                 default = nil)
  if valid_594945 != nil:
    section.add "X-Amz-Credential", valid_594945
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594946: Call_GetDescribeLoadBalancerTargetGroups_594931;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the target groups for the specified Auto Scaling group.
  ## 
  let valid = call_594946.validator(path, query, header, formData, body)
  let scheme = call_594946.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594946.url(scheme.get, call_594946.host, call_594946.base,
                         call_594946.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594946, url, valid)

proc call*(call_594947: Call_GetDescribeLoadBalancerTargetGroups_594931;
          AutoScalingGroupName: string; MaxRecords: int = 0; NextToken: string = "";
          Action: string = "DescribeLoadBalancerTargetGroups";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeLoadBalancerTargetGroups
  ## Describes the target groups for the specified Auto Scaling group.
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594948 = newJObject()
  add(query_594948, "MaxRecords", newJInt(MaxRecords))
  add(query_594948, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_594948, "NextToken", newJString(NextToken))
  add(query_594948, "Action", newJString(Action))
  add(query_594948, "Version", newJString(Version))
  result = call_594947.call(nil, query_594948, nil, nil, nil)

var getDescribeLoadBalancerTargetGroups* = Call_GetDescribeLoadBalancerTargetGroups_594931(
    name: "getDescribeLoadBalancerTargetGroups", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeLoadBalancerTargetGroups",
    validator: validate_GetDescribeLoadBalancerTargetGroups_594932, base: "/",
    url: url_GetDescribeLoadBalancerTargetGroups_594933,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeLoadBalancers_594986 = ref object of OpenApiRestCall_593437
proc url_PostDescribeLoadBalancers_594988(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeLoadBalancers_594987(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the load balancers for the specified Auto Scaling group.</p> <p>This operation describes only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DescribeLoadBalancerTargetGroups</a> instead.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594989 = query.getOrDefault("Action")
  valid_594989 = validateParameter(valid_594989, JString, required = true,
                                 default = newJString("DescribeLoadBalancers"))
  if valid_594989 != nil:
    section.add "Action", valid_594989
  var valid_594990 = query.getOrDefault("Version")
  valid_594990 = validateParameter(valid_594990, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_594990 != nil:
    section.add "Version", valid_594990
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594991 = header.getOrDefault("X-Amz-Date")
  valid_594991 = validateParameter(valid_594991, JString, required = false,
                                 default = nil)
  if valid_594991 != nil:
    section.add "X-Amz-Date", valid_594991
  var valid_594992 = header.getOrDefault("X-Amz-Security-Token")
  valid_594992 = validateParameter(valid_594992, JString, required = false,
                                 default = nil)
  if valid_594992 != nil:
    section.add "X-Amz-Security-Token", valid_594992
  var valid_594993 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594993 = validateParameter(valid_594993, JString, required = false,
                                 default = nil)
  if valid_594993 != nil:
    section.add "X-Amz-Content-Sha256", valid_594993
  var valid_594994 = header.getOrDefault("X-Amz-Algorithm")
  valid_594994 = validateParameter(valid_594994, JString, required = false,
                                 default = nil)
  if valid_594994 != nil:
    section.add "X-Amz-Algorithm", valid_594994
  var valid_594995 = header.getOrDefault("X-Amz-Signature")
  valid_594995 = validateParameter(valid_594995, JString, required = false,
                                 default = nil)
  if valid_594995 != nil:
    section.add "X-Amz-Signature", valid_594995
  var valid_594996 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594996 = validateParameter(valid_594996, JString, required = false,
                                 default = nil)
  if valid_594996 != nil:
    section.add "X-Amz-SignedHeaders", valid_594996
  var valid_594997 = header.getOrDefault("X-Amz-Credential")
  valid_594997 = validateParameter(valid_594997, JString, required = false,
                                 default = nil)
  if valid_594997 != nil:
    section.add "X-Amz-Credential", valid_594997
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_594998 = formData.getOrDefault("AutoScalingGroupName")
  valid_594998 = validateParameter(valid_594998, JString, required = true,
                                 default = nil)
  if valid_594998 != nil:
    section.add "AutoScalingGroupName", valid_594998
  var valid_594999 = formData.getOrDefault("NextToken")
  valid_594999 = validateParameter(valid_594999, JString, required = false,
                                 default = nil)
  if valid_594999 != nil:
    section.add "NextToken", valid_594999
  var valid_595000 = formData.getOrDefault("MaxRecords")
  valid_595000 = validateParameter(valid_595000, JInt, required = false, default = nil)
  if valid_595000 != nil:
    section.add "MaxRecords", valid_595000
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595001: Call_PostDescribeLoadBalancers_594986; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the load balancers for the specified Auto Scaling group.</p> <p>This operation describes only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DescribeLoadBalancerTargetGroups</a> instead.</p>
  ## 
  let valid = call_595001.validator(path, query, header, formData, body)
  let scheme = call_595001.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595001.url(scheme.get, call_595001.host, call_595001.base,
                         call_595001.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595001, url, valid)

proc call*(call_595002: Call_PostDescribeLoadBalancers_594986;
          AutoScalingGroupName: string; NextToken: string = "";
          Action: string = "DescribeLoadBalancers"; MaxRecords: int = 0;
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeLoadBalancers
  ## <p>Describes the load balancers for the specified Auto Scaling group.</p> <p>This operation describes only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DescribeLoadBalancerTargetGroups</a> instead.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   Version: string (required)
  var query_595003 = newJObject()
  var formData_595004 = newJObject()
  add(formData_595004, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_595004, "NextToken", newJString(NextToken))
  add(query_595003, "Action", newJString(Action))
  add(formData_595004, "MaxRecords", newJInt(MaxRecords))
  add(query_595003, "Version", newJString(Version))
  result = call_595002.call(nil, query_595003, nil, formData_595004, nil)

var postDescribeLoadBalancers* = Call_PostDescribeLoadBalancers_594986(
    name: "postDescribeLoadBalancers", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeLoadBalancers",
    validator: validate_PostDescribeLoadBalancers_594987, base: "/",
    url: url_PostDescribeLoadBalancers_594988,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeLoadBalancers_594968 = ref object of OpenApiRestCall_593437
proc url_GetDescribeLoadBalancers_594970(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeLoadBalancers_594969(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the load balancers for the specified Auto Scaling group.</p> <p>This operation describes only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DescribeLoadBalancerTargetGroups</a> instead.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_594971 = query.getOrDefault("MaxRecords")
  valid_594971 = validateParameter(valid_594971, JInt, required = false, default = nil)
  if valid_594971 != nil:
    section.add "MaxRecords", valid_594971
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_594972 = query.getOrDefault("AutoScalingGroupName")
  valid_594972 = validateParameter(valid_594972, JString, required = true,
                                 default = nil)
  if valid_594972 != nil:
    section.add "AutoScalingGroupName", valid_594972
  var valid_594973 = query.getOrDefault("NextToken")
  valid_594973 = validateParameter(valid_594973, JString, required = false,
                                 default = nil)
  if valid_594973 != nil:
    section.add "NextToken", valid_594973
  var valid_594974 = query.getOrDefault("Action")
  valid_594974 = validateParameter(valid_594974, JString, required = true,
                                 default = newJString("DescribeLoadBalancers"))
  if valid_594974 != nil:
    section.add "Action", valid_594974
  var valid_594975 = query.getOrDefault("Version")
  valid_594975 = validateParameter(valid_594975, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_594975 != nil:
    section.add "Version", valid_594975
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594976 = header.getOrDefault("X-Amz-Date")
  valid_594976 = validateParameter(valid_594976, JString, required = false,
                                 default = nil)
  if valid_594976 != nil:
    section.add "X-Amz-Date", valid_594976
  var valid_594977 = header.getOrDefault("X-Amz-Security-Token")
  valid_594977 = validateParameter(valid_594977, JString, required = false,
                                 default = nil)
  if valid_594977 != nil:
    section.add "X-Amz-Security-Token", valid_594977
  var valid_594978 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594978 = validateParameter(valid_594978, JString, required = false,
                                 default = nil)
  if valid_594978 != nil:
    section.add "X-Amz-Content-Sha256", valid_594978
  var valid_594979 = header.getOrDefault("X-Amz-Algorithm")
  valid_594979 = validateParameter(valid_594979, JString, required = false,
                                 default = nil)
  if valid_594979 != nil:
    section.add "X-Amz-Algorithm", valid_594979
  var valid_594980 = header.getOrDefault("X-Amz-Signature")
  valid_594980 = validateParameter(valid_594980, JString, required = false,
                                 default = nil)
  if valid_594980 != nil:
    section.add "X-Amz-Signature", valid_594980
  var valid_594981 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594981 = validateParameter(valid_594981, JString, required = false,
                                 default = nil)
  if valid_594981 != nil:
    section.add "X-Amz-SignedHeaders", valid_594981
  var valid_594982 = header.getOrDefault("X-Amz-Credential")
  valid_594982 = validateParameter(valid_594982, JString, required = false,
                                 default = nil)
  if valid_594982 != nil:
    section.add "X-Amz-Credential", valid_594982
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594983: Call_GetDescribeLoadBalancers_594968; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the load balancers for the specified Auto Scaling group.</p> <p>This operation describes only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DescribeLoadBalancerTargetGroups</a> instead.</p>
  ## 
  let valid = call_594983.validator(path, query, header, formData, body)
  let scheme = call_594983.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594983.url(scheme.get, call_594983.host, call_594983.base,
                         call_594983.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594983, url, valid)

proc call*(call_594984: Call_GetDescribeLoadBalancers_594968;
          AutoScalingGroupName: string; MaxRecords: int = 0; NextToken: string = "";
          Action: string = "DescribeLoadBalancers"; Version: string = "2011-01-01"): Recallable =
  ## getDescribeLoadBalancers
  ## <p>Describes the load balancers for the specified Auto Scaling group.</p> <p>This operation describes only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DescribeLoadBalancerTargetGroups</a> instead.</p>
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594985 = newJObject()
  add(query_594985, "MaxRecords", newJInt(MaxRecords))
  add(query_594985, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_594985, "NextToken", newJString(NextToken))
  add(query_594985, "Action", newJString(Action))
  add(query_594985, "Version", newJString(Version))
  result = call_594984.call(nil, query_594985, nil, nil, nil)

var getDescribeLoadBalancers* = Call_GetDescribeLoadBalancers_594968(
    name: "getDescribeLoadBalancers", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeLoadBalancers",
    validator: validate_GetDescribeLoadBalancers_594969, base: "/",
    url: url_GetDescribeLoadBalancers_594970, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeMetricCollectionTypes_595020 = ref object of OpenApiRestCall_593437
proc url_PostDescribeMetricCollectionTypes_595022(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeMetricCollectionTypes_595021(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.</p> <p>The <code>GroupStandbyInstances</code> metric is not returned by default. You must explicitly request this metric when calling <a>EnableMetricsCollection</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595023 = query.getOrDefault("Action")
  valid_595023 = validateParameter(valid_595023, JString, required = true, default = newJString(
      "DescribeMetricCollectionTypes"))
  if valid_595023 != nil:
    section.add "Action", valid_595023
  var valid_595024 = query.getOrDefault("Version")
  valid_595024 = validateParameter(valid_595024, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_595024 != nil:
    section.add "Version", valid_595024
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595025 = header.getOrDefault("X-Amz-Date")
  valid_595025 = validateParameter(valid_595025, JString, required = false,
                                 default = nil)
  if valid_595025 != nil:
    section.add "X-Amz-Date", valid_595025
  var valid_595026 = header.getOrDefault("X-Amz-Security-Token")
  valid_595026 = validateParameter(valid_595026, JString, required = false,
                                 default = nil)
  if valid_595026 != nil:
    section.add "X-Amz-Security-Token", valid_595026
  var valid_595027 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595027 = validateParameter(valid_595027, JString, required = false,
                                 default = nil)
  if valid_595027 != nil:
    section.add "X-Amz-Content-Sha256", valid_595027
  var valid_595028 = header.getOrDefault("X-Amz-Algorithm")
  valid_595028 = validateParameter(valid_595028, JString, required = false,
                                 default = nil)
  if valid_595028 != nil:
    section.add "X-Amz-Algorithm", valid_595028
  var valid_595029 = header.getOrDefault("X-Amz-Signature")
  valid_595029 = validateParameter(valid_595029, JString, required = false,
                                 default = nil)
  if valid_595029 != nil:
    section.add "X-Amz-Signature", valid_595029
  var valid_595030 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595030 = validateParameter(valid_595030, JString, required = false,
                                 default = nil)
  if valid_595030 != nil:
    section.add "X-Amz-SignedHeaders", valid_595030
  var valid_595031 = header.getOrDefault("X-Amz-Credential")
  valid_595031 = validateParameter(valid_595031, JString, required = false,
                                 default = nil)
  if valid_595031 != nil:
    section.add "X-Amz-Credential", valid_595031
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595032: Call_PostDescribeMetricCollectionTypes_595020;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.</p> <p>The <code>GroupStandbyInstances</code> metric is not returned by default. You must explicitly request this metric when calling <a>EnableMetricsCollection</a>.</p>
  ## 
  let valid = call_595032.validator(path, query, header, formData, body)
  let scheme = call_595032.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595032.url(scheme.get, call_595032.host, call_595032.base,
                         call_595032.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595032, url, valid)

proc call*(call_595033: Call_PostDescribeMetricCollectionTypes_595020;
          Action: string = "DescribeMetricCollectionTypes";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeMetricCollectionTypes
  ## <p>Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.</p> <p>The <code>GroupStandbyInstances</code> metric is not returned by default. You must explicitly request this metric when calling <a>EnableMetricsCollection</a>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595034 = newJObject()
  add(query_595034, "Action", newJString(Action))
  add(query_595034, "Version", newJString(Version))
  result = call_595033.call(nil, query_595034, nil, nil, nil)

var postDescribeMetricCollectionTypes* = Call_PostDescribeMetricCollectionTypes_595020(
    name: "postDescribeMetricCollectionTypes", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeMetricCollectionTypes",
    validator: validate_PostDescribeMetricCollectionTypes_595021, base: "/",
    url: url_PostDescribeMetricCollectionTypes_595022,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeMetricCollectionTypes_595005 = ref object of OpenApiRestCall_593437
proc url_GetDescribeMetricCollectionTypes_595007(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeMetricCollectionTypes_595006(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.</p> <p>The <code>GroupStandbyInstances</code> metric is not returned by default. You must explicitly request this metric when calling <a>EnableMetricsCollection</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595008 = query.getOrDefault("Action")
  valid_595008 = validateParameter(valid_595008, JString, required = true, default = newJString(
      "DescribeMetricCollectionTypes"))
  if valid_595008 != nil:
    section.add "Action", valid_595008
  var valid_595009 = query.getOrDefault("Version")
  valid_595009 = validateParameter(valid_595009, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_595009 != nil:
    section.add "Version", valid_595009
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595010 = header.getOrDefault("X-Amz-Date")
  valid_595010 = validateParameter(valid_595010, JString, required = false,
                                 default = nil)
  if valid_595010 != nil:
    section.add "X-Amz-Date", valid_595010
  var valid_595011 = header.getOrDefault("X-Amz-Security-Token")
  valid_595011 = validateParameter(valid_595011, JString, required = false,
                                 default = nil)
  if valid_595011 != nil:
    section.add "X-Amz-Security-Token", valid_595011
  var valid_595012 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595012 = validateParameter(valid_595012, JString, required = false,
                                 default = nil)
  if valid_595012 != nil:
    section.add "X-Amz-Content-Sha256", valid_595012
  var valid_595013 = header.getOrDefault("X-Amz-Algorithm")
  valid_595013 = validateParameter(valid_595013, JString, required = false,
                                 default = nil)
  if valid_595013 != nil:
    section.add "X-Amz-Algorithm", valid_595013
  var valid_595014 = header.getOrDefault("X-Amz-Signature")
  valid_595014 = validateParameter(valid_595014, JString, required = false,
                                 default = nil)
  if valid_595014 != nil:
    section.add "X-Amz-Signature", valid_595014
  var valid_595015 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595015 = validateParameter(valid_595015, JString, required = false,
                                 default = nil)
  if valid_595015 != nil:
    section.add "X-Amz-SignedHeaders", valid_595015
  var valid_595016 = header.getOrDefault("X-Amz-Credential")
  valid_595016 = validateParameter(valid_595016, JString, required = false,
                                 default = nil)
  if valid_595016 != nil:
    section.add "X-Amz-Credential", valid_595016
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595017: Call_GetDescribeMetricCollectionTypes_595005;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.</p> <p>The <code>GroupStandbyInstances</code> metric is not returned by default. You must explicitly request this metric when calling <a>EnableMetricsCollection</a>.</p>
  ## 
  let valid = call_595017.validator(path, query, header, formData, body)
  let scheme = call_595017.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595017.url(scheme.get, call_595017.host, call_595017.base,
                         call_595017.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595017, url, valid)

proc call*(call_595018: Call_GetDescribeMetricCollectionTypes_595005;
          Action: string = "DescribeMetricCollectionTypes";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeMetricCollectionTypes
  ## <p>Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.</p> <p>The <code>GroupStandbyInstances</code> metric is not returned by default. You must explicitly request this metric when calling <a>EnableMetricsCollection</a>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595019 = newJObject()
  add(query_595019, "Action", newJString(Action))
  add(query_595019, "Version", newJString(Version))
  result = call_595018.call(nil, query_595019, nil, nil, nil)

var getDescribeMetricCollectionTypes* = Call_GetDescribeMetricCollectionTypes_595005(
    name: "getDescribeMetricCollectionTypes", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeMetricCollectionTypes",
    validator: validate_GetDescribeMetricCollectionTypes_595006, base: "/",
    url: url_GetDescribeMetricCollectionTypes_595007,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeNotificationConfigurations_595053 = ref object of OpenApiRestCall_593437
proc url_PostDescribeNotificationConfigurations_595055(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeNotificationConfigurations_595054(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the notification actions associated with the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595056 = query.getOrDefault("Action")
  valid_595056 = validateParameter(valid_595056, JString, required = true, default = newJString(
      "DescribeNotificationConfigurations"))
  if valid_595056 != nil:
    section.add "Action", valid_595056
  var valid_595057 = query.getOrDefault("Version")
  valid_595057 = validateParameter(valid_595057, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_595057 != nil:
    section.add "Version", valid_595057
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595058 = header.getOrDefault("X-Amz-Date")
  valid_595058 = validateParameter(valid_595058, JString, required = false,
                                 default = nil)
  if valid_595058 != nil:
    section.add "X-Amz-Date", valid_595058
  var valid_595059 = header.getOrDefault("X-Amz-Security-Token")
  valid_595059 = validateParameter(valid_595059, JString, required = false,
                                 default = nil)
  if valid_595059 != nil:
    section.add "X-Amz-Security-Token", valid_595059
  var valid_595060 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595060 = validateParameter(valid_595060, JString, required = false,
                                 default = nil)
  if valid_595060 != nil:
    section.add "X-Amz-Content-Sha256", valid_595060
  var valid_595061 = header.getOrDefault("X-Amz-Algorithm")
  valid_595061 = validateParameter(valid_595061, JString, required = false,
                                 default = nil)
  if valid_595061 != nil:
    section.add "X-Amz-Algorithm", valid_595061
  var valid_595062 = header.getOrDefault("X-Amz-Signature")
  valid_595062 = validateParameter(valid_595062, JString, required = false,
                                 default = nil)
  if valid_595062 != nil:
    section.add "X-Amz-Signature", valid_595062
  var valid_595063 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595063 = validateParameter(valid_595063, JString, required = false,
                                 default = nil)
  if valid_595063 != nil:
    section.add "X-Amz-SignedHeaders", valid_595063
  var valid_595064 = header.getOrDefault("X-Amz-Credential")
  valid_595064 = validateParameter(valid_595064, JString, required = false,
                                 default = nil)
  if valid_595064 != nil:
    section.add "X-Amz-Credential", valid_595064
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupNames: JArray
  ##                        : The name of the Auto Scaling group.
  section = newJObject()
  var valid_595065 = formData.getOrDefault("NextToken")
  valid_595065 = validateParameter(valid_595065, JString, required = false,
                                 default = nil)
  if valid_595065 != nil:
    section.add "NextToken", valid_595065
  var valid_595066 = formData.getOrDefault("MaxRecords")
  valid_595066 = validateParameter(valid_595066, JInt, required = false, default = nil)
  if valid_595066 != nil:
    section.add "MaxRecords", valid_595066
  var valid_595067 = formData.getOrDefault("AutoScalingGroupNames")
  valid_595067 = validateParameter(valid_595067, JArray, required = false,
                                 default = nil)
  if valid_595067 != nil:
    section.add "AutoScalingGroupNames", valid_595067
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595068: Call_PostDescribeNotificationConfigurations_595053;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the notification actions associated with the specified Auto Scaling group.
  ## 
  let valid = call_595068.validator(path, query, header, formData, body)
  let scheme = call_595068.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595068.url(scheme.get, call_595068.host, call_595068.base,
                         call_595068.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595068, url, valid)

proc call*(call_595069: Call_PostDescribeNotificationConfigurations_595053;
          NextToken: string = "";
          Action: string = "DescribeNotificationConfigurations";
          MaxRecords: int = 0; Version: string = "2011-01-01";
          AutoScalingGroupNames: JsonNode = nil): Recallable =
  ## postDescribeNotificationConfigurations
  ## Describes the notification actions associated with the specified Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   Version: string (required)
  ##   AutoScalingGroupNames: JArray
  ##                        : The name of the Auto Scaling group.
  var query_595070 = newJObject()
  var formData_595071 = newJObject()
  add(formData_595071, "NextToken", newJString(NextToken))
  add(query_595070, "Action", newJString(Action))
  add(formData_595071, "MaxRecords", newJInt(MaxRecords))
  add(query_595070, "Version", newJString(Version))
  if AutoScalingGroupNames != nil:
    formData_595071.add "AutoScalingGroupNames", AutoScalingGroupNames
  result = call_595069.call(nil, query_595070, nil, formData_595071, nil)

var postDescribeNotificationConfigurations* = Call_PostDescribeNotificationConfigurations_595053(
    name: "postDescribeNotificationConfigurations", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeNotificationConfigurations",
    validator: validate_PostDescribeNotificationConfigurations_595054, base: "/",
    url: url_PostDescribeNotificationConfigurations_595055,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeNotificationConfigurations_595035 = ref object of OpenApiRestCall_593437
proc url_GetDescribeNotificationConfigurations_595037(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeNotificationConfigurations_595036(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the notification actions associated with the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: JString (required)
  ##   AutoScalingGroupNames: JArray
  ##                        : The name of the Auto Scaling group.
  ##   Version: JString (required)
  section = newJObject()
  var valid_595038 = query.getOrDefault("MaxRecords")
  valid_595038 = validateParameter(valid_595038, JInt, required = false, default = nil)
  if valid_595038 != nil:
    section.add "MaxRecords", valid_595038
  var valid_595039 = query.getOrDefault("NextToken")
  valid_595039 = validateParameter(valid_595039, JString, required = false,
                                 default = nil)
  if valid_595039 != nil:
    section.add "NextToken", valid_595039
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595040 = query.getOrDefault("Action")
  valid_595040 = validateParameter(valid_595040, JString, required = true, default = newJString(
      "DescribeNotificationConfigurations"))
  if valid_595040 != nil:
    section.add "Action", valid_595040
  var valid_595041 = query.getOrDefault("AutoScalingGroupNames")
  valid_595041 = validateParameter(valid_595041, JArray, required = false,
                                 default = nil)
  if valid_595041 != nil:
    section.add "AutoScalingGroupNames", valid_595041
  var valid_595042 = query.getOrDefault("Version")
  valid_595042 = validateParameter(valid_595042, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_595042 != nil:
    section.add "Version", valid_595042
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595043 = header.getOrDefault("X-Amz-Date")
  valid_595043 = validateParameter(valid_595043, JString, required = false,
                                 default = nil)
  if valid_595043 != nil:
    section.add "X-Amz-Date", valid_595043
  var valid_595044 = header.getOrDefault("X-Amz-Security-Token")
  valid_595044 = validateParameter(valid_595044, JString, required = false,
                                 default = nil)
  if valid_595044 != nil:
    section.add "X-Amz-Security-Token", valid_595044
  var valid_595045 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595045 = validateParameter(valid_595045, JString, required = false,
                                 default = nil)
  if valid_595045 != nil:
    section.add "X-Amz-Content-Sha256", valid_595045
  var valid_595046 = header.getOrDefault("X-Amz-Algorithm")
  valid_595046 = validateParameter(valid_595046, JString, required = false,
                                 default = nil)
  if valid_595046 != nil:
    section.add "X-Amz-Algorithm", valid_595046
  var valid_595047 = header.getOrDefault("X-Amz-Signature")
  valid_595047 = validateParameter(valid_595047, JString, required = false,
                                 default = nil)
  if valid_595047 != nil:
    section.add "X-Amz-Signature", valid_595047
  var valid_595048 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595048 = validateParameter(valid_595048, JString, required = false,
                                 default = nil)
  if valid_595048 != nil:
    section.add "X-Amz-SignedHeaders", valid_595048
  var valid_595049 = header.getOrDefault("X-Amz-Credential")
  valid_595049 = validateParameter(valid_595049, JString, required = false,
                                 default = nil)
  if valid_595049 != nil:
    section.add "X-Amz-Credential", valid_595049
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595050: Call_GetDescribeNotificationConfigurations_595035;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the notification actions associated with the specified Auto Scaling group.
  ## 
  let valid = call_595050.validator(path, query, header, formData, body)
  let scheme = call_595050.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595050.url(scheme.get, call_595050.host, call_595050.base,
                         call_595050.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595050, url, valid)

proc call*(call_595051: Call_GetDescribeNotificationConfigurations_595035;
          MaxRecords: int = 0; NextToken: string = "";
          Action: string = "DescribeNotificationConfigurations";
          AutoScalingGroupNames: JsonNode = nil; Version: string = "2011-01-01"): Recallable =
  ## getDescribeNotificationConfigurations
  ## Describes the notification actions associated with the specified Auto Scaling group.
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   AutoScalingGroupNames: JArray
  ##                        : The name of the Auto Scaling group.
  ##   Version: string (required)
  var query_595052 = newJObject()
  add(query_595052, "MaxRecords", newJInt(MaxRecords))
  add(query_595052, "NextToken", newJString(NextToken))
  add(query_595052, "Action", newJString(Action))
  if AutoScalingGroupNames != nil:
    query_595052.add "AutoScalingGroupNames", AutoScalingGroupNames
  add(query_595052, "Version", newJString(Version))
  result = call_595051.call(nil, query_595052, nil, nil, nil)

var getDescribeNotificationConfigurations* = Call_GetDescribeNotificationConfigurations_595035(
    name: "getDescribeNotificationConfigurations", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeNotificationConfigurations",
    validator: validate_GetDescribeNotificationConfigurations_595036, base: "/",
    url: url_GetDescribeNotificationConfigurations_595037,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribePolicies_595092 = ref object of OpenApiRestCall_593437
proc url_PostDescribePolicies_595094(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribePolicies_595093(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the policies for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595095 = query.getOrDefault("Action")
  valid_595095 = validateParameter(valid_595095, JString, required = true,
                                 default = newJString("DescribePolicies"))
  if valid_595095 != nil:
    section.add "Action", valid_595095
  var valid_595096 = query.getOrDefault("Version")
  valid_595096 = validateParameter(valid_595096, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_595096 != nil:
    section.add "Version", valid_595096
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595097 = header.getOrDefault("X-Amz-Date")
  valid_595097 = validateParameter(valid_595097, JString, required = false,
                                 default = nil)
  if valid_595097 != nil:
    section.add "X-Amz-Date", valid_595097
  var valid_595098 = header.getOrDefault("X-Amz-Security-Token")
  valid_595098 = validateParameter(valid_595098, JString, required = false,
                                 default = nil)
  if valid_595098 != nil:
    section.add "X-Amz-Security-Token", valid_595098
  var valid_595099 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595099 = validateParameter(valid_595099, JString, required = false,
                                 default = nil)
  if valid_595099 != nil:
    section.add "X-Amz-Content-Sha256", valid_595099
  var valid_595100 = header.getOrDefault("X-Amz-Algorithm")
  valid_595100 = validateParameter(valid_595100, JString, required = false,
                                 default = nil)
  if valid_595100 != nil:
    section.add "X-Amz-Algorithm", valid_595100
  var valid_595101 = header.getOrDefault("X-Amz-Signature")
  valid_595101 = validateParameter(valid_595101, JString, required = false,
                                 default = nil)
  if valid_595101 != nil:
    section.add "X-Amz-Signature", valid_595101
  var valid_595102 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595102 = validateParameter(valid_595102, JString, required = false,
                                 default = nil)
  if valid_595102 != nil:
    section.add "X-Amz-SignedHeaders", valid_595102
  var valid_595103 = header.getOrDefault("X-Amz-Credential")
  valid_595103 = validateParameter(valid_595103, JString, required = false,
                                 default = nil)
  if valid_595103 != nil:
    section.add "X-Amz-Credential", valid_595103
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   PolicyNames: JArray
  ##              : The names of one or more policies. If you omit this parameter, all policies are described. If a group name is provided, the results are limited to that group. This list is limited to 50 items. If you specify an unknown policy name, it is ignored with no error.
  ##   PolicyTypes: JArray
  ##              : One or more policy types. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>.
  ##   MaxRecords: JInt
  ##             : The maximum number of items to be returned with each call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  section = newJObject()
  var valid_595104 = formData.getOrDefault("AutoScalingGroupName")
  valid_595104 = validateParameter(valid_595104, JString, required = false,
                                 default = nil)
  if valid_595104 != nil:
    section.add "AutoScalingGroupName", valid_595104
  var valid_595105 = formData.getOrDefault("NextToken")
  valid_595105 = validateParameter(valid_595105, JString, required = false,
                                 default = nil)
  if valid_595105 != nil:
    section.add "NextToken", valid_595105
  var valid_595106 = formData.getOrDefault("PolicyNames")
  valid_595106 = validateParameter(valid_595106, JArray, required = false,
                                 default = nil)
  if valid_595106 != nil:
    section.add "PolicyNames", valid_595106
  var valid_595107 = formData.getOrDefault("PolicyTypes")
  valid_595107 = validateParameter(valid_595107, JArray, required = false,
                                 default = nil)
  if valid_595107 != nil:
    section.add "PolicyTypes", valid_595107
  var valid_595108 = formData.getOrDefault("MaxRecords")
  valid_595108 = validateParameter(valid_595108, JInt, required = false, default = nil)
  if valid_595108 != nil:
    section.add "MaxRecords", valid_595108
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595109: Call_PostDescribePolicies_595092; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the policies for the specified Auto Scaling group.
  ## 
  let valid = call_595109.validator(path, query, header, formData, body)
  let scheme = call_595109.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595109.url(scheme.get, call_595109.host, call_595109.base,
                         call_595109.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595109, url, valid)

proc call*(call_595110: Call_PostDescribePolicies_595092;
          AutoScalingGroupName: string = ""; NextToken: string = "";
          PolicyNames: JsonNode = nil; Action: string = "DescribePolicies";
          PolicyTypes: JsonNode = nil; MaxRecords: int = 0;
          Version: string = "2011-01-01"): Recallable =
  ## postDescribePolicies
  ## Describes the policies for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   PolicyNames: JArray
  ##              : The names of one or more policies. If you omit this parameter, all policies are described. If a group name is provided, the results are limited to that group. This list is limited to 50 items. If you specify an unknown policy name, it is ignored with no error.
  ##   Action: string (required)
  ##   PolicyTypes: JArray
  ##              : One or more policy types. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>.
  ##   MaxRecords: int
  ##             : The maximum number of items to be returned with each call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   Version: string (required)
  var query_595111 = newJObject()
  var formData_595112 = newJObject()
  add(formData_595112, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_595112, "NextToken", newJString(NextToken))
  if PolicyNames != nil:
    formData_595112.add "PolicyNames", PolicyNames
  add(query_595111, "Action", newJString(Action))
  if PolicyTypes != nil:
    formData_595112.add "PolicyTypes", PolicyTypes
  add(formData_595112, "MaxRecords", newJInt(MaxRecords))
  add(query_595111, "Version", newJString(Version))
  result = call_595110.call(nil, query_595111, nil, formData_595112, nil)

var postDescribePolicies* = Call_PostDescribePolicies_595092(
    name: "postDescribePolicies", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribePolicies",
    validator: validate_PostDescribePolicies_595093, base: "/",
    url: url_PostDescribePolicies_595094, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribePolicies_595072 = ref object of OpenApiRestCall_593437
proc url_GetDescribePolicies_595074(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribePolicies_595073(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Describes the policies for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of items to be returned with each call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: JString (required)
  ##   PolicyNames: JArray
  ##              : The names of one or more policies. If you omit this parameter, all policies are described. If a group name is provided, the results are limited to that group. This list is limited to 50 items. If you specify an unknown policy name, it is ignored with no error.
  ##   Version: JString (required)
  ##   PolicyTypes: JArray
  ##              : One or more policy types. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>.
  section = newJObject()
  var valid_595075 = query.getOrDefault("MaxRecords")
  valid_595075 = validateParameter(valid_595075, JInt, required = false, default = nil)
  if valid_595075 != nil:
    section.add "MaxRecords", valid_595075
  var valid_595076 = query.getOrDefault("AutoScalingGroupName")
  valid_595076 = validateParameter(valid_595076, JString, required = false,
                                 default = nil)
  if valid_595076 != nil:
    section.add "AutoScalingGroupName", valid_595076
  var valid_595077 = query.getOrDefault("NextToken")
  valid_595077 = validateParameter(valid_595077, JString, required = false,
                                 default = nil)
  if valid_595077 != nil:
    section.add "NextToken", valid_595077
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595078 = query.getOrDefault("Action")
  valid_595078 = validateParameter(valid_595078, JString, required = true,
                                 default = newJString("DescribePolicies"))
  if valid_595078 != nil:
    section.add "Action", valid_595078
  var valid_595079 = query.getOrDefault("PolicyNames")
  valid_595079 = validateParameter(valid_595079, JArray, required = false,
                                 default = nil)
  if valid_595079 != nil:
    section.add "PolicyNames", valid_595079
  var valid_595080 = query.getOrDefault("Version")
  valid_595080 = validateParameter(valid_595080, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_595080 != nil:
    section.add "Version", valid_595080
  var valid_595081 = query.getOrDefault("PolicyTypes")
  valid_595081 = validateParameter(valid_595081, JArray, required = false,
                                 default = nil)
  if valid_595081 != nil:
    section.add "PolicyTypes", valid_595081
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595082 = header.getOrDefault("X-Amz-Date")
  valid_595082 = validateParameter(valid_595082, JString, required = false,
                                 default = nil)
  if valid_595082 != nil:
    section.add "X-Amz-Date", valid_595082
  var valid_595083 = header.getOrDefault("X-Amz-Security-Token")
  valid_595083 = validateParameter(valid_595083, JString, required = false,
                                 default = nil)
  if valid_595083 != nil:
    section.add "X-Amz-Security-Token", valid_595083
  var valid_595084 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595084 = validateParameter(valid_595084, JString, required = false,
                                 default = nil)
  if valid_595084 != nil:
    section.add "X-Amz-Content-Sha256", valid_595084
  var valid_595085 = header.getOrDefault("X-Amz-Algorithm")
  valid_595085 = validateParameter(valid_595085, JString, required = false,
                                 default = nil)
  if valid_595085 != nil:
    section.add "X-Amz-Algorithm", valid_595085
  var valid_595086 = header.getOrDefault("X-Amz-Signature")
  valid_595086 = validateParameter(valid_595086, JString, required = false,
                                 default = nil)
  if valid_595086 != nil:
    section.add "X-Amz-Signature", valid_595086
  var valid_595087 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595087 = validateParameter(valid_595087, JString, required = false,
                                 default = nil)
  if valid_595087 != nil:
    section.add "X-Amz-SignedHeaders", valid_595087
  var valid_595088 = header.getOrDefault("X-Amz-Credential")
  valid_595088 = validateParameter(valid_595088, JString, required = false,
                                 default = nil)
  if valid_595088 != nil:
    section.add "X-Amz-Credential", valid_595088
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595089: Call_GetDescribePolicies_595072; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the policies for the specified Auto Scaling group.
  ## 
  let valid = call_595089.validator(path, query, header, formData, body)
  let scheme = call_595089.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595089.url(scheme.get, call_595089.host, call_595089.base,
                         call_595089.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595089, url, valid)

proc call*(call_595090: Call_GetDescribePolicies_595072; MaxRecords: int = 0;
          AutoScalingGroupName: string = ""; NextToken: string = "";
          Action: string = "DescribePolicies"; PolicyNames: JsonNode = nil;
          Version: string = "2011-01-01"; PolicyTypes: JsonNode = nil): Recallable =
  ## getDescribePolicies
  ## Describes the policies for the specified Auto Scaling group.
  ##   MaxRecords: int
  ##             : The maximum number of items to be returned with each call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   PolicyNames: JArray
  ##              : The names of one or more policies. If you omit this parameter, all policies are described. If a group name is provided, the results are limited to that group. This list is limited to 50 items. If you specify an unknown policy name, it is ignored with no error.
  ##   Version: string (required)
  ##   PolicyTypes: JArray
  ##              : One or more policy types. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>.
  var query_595091 = newJObject()
  add(query_595091, "MaxRecords", newJInt(MaxRecords))
  add(query_595091, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_595091, "NextToken", newJString(NextToken))
  add(query_595091, "Action", newJString(Action))
  if PolicyNames != nil:
    query_595091.add "PolicyNames", PolicyNames
  add(query_595091, "Version", newJString(Version))
  if PolicyTypes != nil:
    query_595091.add "PolicyTypes", PolicyTypes
  result = call_595090.call(nil, query_595091, nil, nil, nil)

var getDescribePolicies* = Call_GetDescribePolicies_595072(
    name: "getDescribePolicies", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribePolicies",
    validator: validate_GetDescribePolicies_595073, base: "/",
    url: url_GetDescribePolicies_595074, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeScalingActivities_595132 = ref object of OpenApiRestCall_593437
proc url_PostDescribeScalingActivities_595134(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeScalingActivities_595133(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more scaling activities for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595135 = query.getOrDefault("Action")
  valid_595135 = validateParameter(valid_595135, JString, required = true, default = newJString(
      "DescribeScalingActivities"))
  if valid_595135 != nil:
    section.add "Action", valid_595135
  var valid_595136 = query.getOrDefault("Version")
  valid_595136 = validateParameter(valid_595136, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_595136 != nil:
    section.add "Version", valid_595136
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595137 = header.getOrDefault("X-Amz-Date")
  valid_595137 = validateParameter(valid_595137, JString, required = false,
                                 default = nil)
  if valid_595137 != nil:
    section.add "X-Amz-Date", valid_595137
  var valid_595138 = header.getOrDefault("X-Amz-Security-Token")
  valid_595138 = validateParameter(valid_595138, JString, required = false,
                                 default = nil)
  if valid_595138 != nil:
    section.add "X-Amz-Security-Token", valid_595138
  var valid_595139 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595139 = validateParameter(valid_595139, JString, required = false,
                                 default = nil)
  if valid_595139 != nil:
    section.add "X-Amz-Content-Sha256", valid_595139
  var valid_595140 = header.getOrDefault("X-Amz-Algorithm")
  valid_595140 = validateParameter(valid_595140, JString, required = false,
                                 default = nil)
  if valid_595140 != nil:
    section.add "X-Amz-Algorithm", valid_595140
  var valid_595141 = header.getOrDefault("X-Amz-Signature")
  valid_595141 = validateParameter(valid_595141, JString, required = false,
                                 default = nil)
  if valid_595141 != nil:
    section.add "X-Amz-Signature", valid_595141
  var valid_595142 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595142 = validateParameter(valid_595142, JString, required = false,
                                 default = nil)
  if valid_595142 != nil:
    section.add "X-Amz-SignedHeaders", valid_595142
  var valid_595143 = header.getOrDefault("X-Amz-Credential")
  valid_595143 = validateParameter(valid_595143, JString, required = false,
                                 default = nil)
  if valid_595143 != nil:
    section.add "X-Amz-Credential", valid_595143
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   ActivityIds: JArray
  ##              : The activity IDs of the desired scaling activities. You can specify up to 50 IDs. If you omit this parameter, all activities for the past six weeks are described. If unknown activities are requested, they are ignored with no error. If you specify an Auto Scaling group, the results are limited to that group.
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  section = newJObject()
  var valid_595144 = formData.getOrDefault("AutoScalingGroupName")
  valid_595144 = validateParameter(valid_595144, JString, required = false,
                                 default = nil)
  if valid_595144 != nil:
    section.add "AutoScalingGroupName", valid_595144
  var valid_595145 = formData.getOrDefault("NextToken")
  valid_595145 = validateParameter(valid_595145, JString, required = false,
                                 default = nil)
  if valid_595145 != nil:
    section.add "NextToken", valid_595145
  var valid_595146 = formData.getOrDefault("ActivityIds")
  valid_595146 = validateParameter(valid_595146, JArray, required = false,
                                 default = nil)
  if valid_595146 != nil:
    section.add "ActivityIds", valid_595146
  var valid_595147 = formData.getOrDefault("MaxRecords")
  valid_595147 = validateParameter(valid_595147, JInt, required = false, default = nil)
  if valid_595147 != nil:
    section.add "MaxRecords", valid_595147
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595148: Call_PostDescribeScalingActivities_595132; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes one or more scaling activities for the specified Auto Scaling group.
  ## 
  let valid = call_595148.validator(path, query, header, formData, body)
  let scheme = call_595148.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595148.url(scheme.get, call_595148.host, call_595148.base,
                         call_595148.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595148, url, valid)

proc call*(call_595149: Call_PostDescribeScalingActivities_595132;
          AutoScalingGroupName: string = ""; NextToken: string = "";
          ActivityIds: JsonNode = nil; Action: string = "DescribeScalingActivities";
          MaxRecords: int = 0; Version: string = "2011-01-01"): Recallable =
  ## postDescribeScalingActivities
  ## Describes one or more scaling activities for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   ActivityIds: JArray
  ##              : The activity IDs of the desired scaling activities. You can specify up to 50 IDs. If you omit this parameter, all activities for the past six weeks are described. If unknown activities are requested, they are ignored with no error. If you specify an Auto Scaling group, the results are limited to that group.
  ##   Action: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   Version: string (required)
  var query_595150 = newJObject()
  var formData_595151 = newJObject()
  add(formData_595151, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_595151, "NextToken", newJString(NextToken))
  if ActivityIds != nil:
    formData_595151.add "ActivityIds", ActivityIds
  add(query_595150, "Action", newJString(Action))
  add(formData_595151, "MaxRecords", newJInt(MaxRecords))
  add(query_595150, "Version", newJString(Version))
  result = call_595149.call(nil, query_595150, nil, formData_595151, nil)

var postDescribeScalingActivities* = Call_PostDescribeScalingActivities_595132(
    name: "postDescribeScalingActivities", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeScalingActivities",
    validator: validate_PostDescribeScalingActivities_595133, base: "/",
    url: url_PostDescribeScalingActivities_595134,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeScalingActivities_595113 = ref object of OpenApiRestCall_593437
proc url_GetDescribeScalingActivities_595115(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeScalingActivities_595114(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more scaling activities for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: JString (required)
  ##   ActivityIds: JArray
  ##              : The activity IDs of the desired scaling activities. You can specify up to 50 IDs. If you omit this parameter, all activities for the past six weeks are described. If unknown activities are requested, they are ignored with no error. If you specify an Auto Scaling group, the results are limited to that group.
  ##   Version: JString (required)
  section = newJObject()
  var valid_595116 = query.getOrDefault("MaxRecords")
  valid_595116 = validateParameter(valid_595116, JInt, required = false, default = nil)
  if valid_595116 != nil:
    section.add "MaxRecords", valid_595116
  var valid_595117 = query.getOrDefault("AutoScalingGroupName")
  valid_595117 = validateParameter(valid_595117, JString, required = false,
                                 default = nil)
  if valid_595117 != nil:
    section.add "AutoScalingGroupName", valid_595117
  var valid_595118 = query.getOrDefault("NextToken")
  valid_595118 = validateParameter(valid_595118, JString, required = false,
                                 default = nil)
  if valid_595118 != nil:
    section.add "NextToken", valid_595118
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595119 = query.getOrDefault("Action")
  valid_595119 = validateParameter(valid_595119, JString, required = true, default = newJString(
      "DescribeScalingActivities"))
  if valid_595119 != nil:
    section.add "Action", valid_595119
  var valid_595120 = query.getOrDefault("ActivityIds")
  valid_595120 = validateParameter(valid_595120, JArray, required = false,
                                 default = nil)
  if valid_595120 != nil:
    section.add "ActivityIds", valid_595120
  var valid_595121 = query.getOrDefault("Version")
  valid_595121 = validateParameter(valid_595121, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_595121 != nil:
    section.add "Version", valid_595121
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595122 = header.getOrDefault("X-Amz-Date")
  valid_595122 = validateParameter(valid_595122, JString, required = false,
                                 default = nil)
  if valid_595122 != nil:
    section.add "X-Amz-Date", valid_595122
  var valid_595123 = header.getOrDefault("X-Amz-Security-Token")
  valid_595123 = validateParameter(valid_595123, JString, required = false,
                                 default = nil)
  if valid_595123 != nil:
    section.add "X-Amz-Security-Token", valid_595123
  var valid_595124 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595124 = validateParameter(valid_595124, JString, required = false,
                                 default = nil)
  if valid_595124 != nil:
    section.add "X-Amz-Content-Sha256", valid_595124
  var valid_595125 = header.getOrDefault("X-Amz-Algorithm")
  valid_595125 = validateParameter(valid_595125, JString, required = false,
                                 default = nil)
  if valid_595125 != nil:
    section.add "X-Amz-Algorithm", valid_595125
  var valid_595126 = header.getOrDefault("X-Amz-Signature")
  valid_595126 = validateParameter(valid_595126, JString, required = false,
                                 default = nil)
  if valid_595126 != nil:
    section.add "X-Amz-Signature", valid_595126
  var valid_595127 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595127 = validateParameter(valid_595127, JString, required = false,
                                 default = nil)
  if valid_595127 != nil:
    section.add "X-Amz-SignedHeaders", valid_595127
  var valid_595128 = header.getOrDefault("X-Amz-Credential")
  valid_595128 = validateParameter(valid_595128, JString, required = false,
                                 default = nil)
  if valid_595128 != nil:
    section.add "X-Amz-Credential", valid_595128
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595129: Call_GetDescribeScalingActivities_595113; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes one or more scaling activities for the specified Auto Scaling group.
  ## 
  let valid = call_595129.validator(path, query, header, formData, body)
  let scheme = call_595129.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595129.url(scheme.get, call_595129.host, call_595129.base,
                         call_595129.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595129, url, valid)

proc call*(call_595130: Call_GetDescribeScalingActivities_595113;
          MaxRecords: int = 0; AutoScalingGroupName: string = "";
          NextToken: string = ""; Action: string = "DescribeScalingActivities";
          ActivityIds: JsonNode = nil; Version: string = "2011-01-01"): Recallable =
  ## getDescribeScalingActivities
  ## Describes one or more scaling activities for the specified Auto Scaling group.
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   ActivityIds: JArray
  ##              : The activity IDs of the desired scaling activities. You can specify up to 50 IDs. If you omit this parameter, all activities for the past six weeks are described. If unknown activities are requested, they are ignored with no error. If you specify an Auto Scaling group, the results are limited to that group.
  ##   Version: string (required)
  var query_595131 = newJObject()
  add(query_595131, "MaxRecords", newJInt(MaxRecords))
  add(query_595131, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_595131, "NextToken", newJString(NextToken))
  add(query_595131, "Action", newJString(Action))
  if ActivityIds != nil:
    query_595131.add "ActivityIds", ActivityIds
  add(query_595131, "Version", newJString(Version))
  result = call_595130.call(nil, query_595131, nil, nil, nil)

var getDescribeScalingActivities* = Call_GetDescribeScalingActivities_595113(
    name: "getDescribeScalingActivities", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeScalingActivities",
    validator: validate_GetDescribeScalingActivities_595114, base: "/",
    url: url_GetDescribeScalingActivities_595115,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeScalingProcessTypes_595167 = ref object of OpenApiRestCall_593437
proc url_PostDescribeScalingProcessTypes_595169(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeScalingProcessTypes_595168(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the scaling process types for use with <a>ResumeProcesses</a> and <a>SuspendProcesses</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595170 = query.getOrDefault("Action")
  valid_595170 = validateParameter(valid_595170, JString, required = true, default = newJString(
      "DescribeScalingProcessTypes"))
  if valid_595170 != nil:
    section.add "Action", valid_595170
  var valid_595171 = query.getOrDefault("Version")
  valid_595171 = validateParameter(valid_595171, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_595171 != nil:
    section.add "Version", valid_595171
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595172 = header.getOrDefault("X-Amz-Date")
  valid_595172 = validateParameter(valid_595172, JString, required = false,
                                 default = nil)
  if valid_595172 != nil:
    section.add "X-Amz-Date", valid_595172
  var valid_595173 = header.getOrDefault("X-Amz-Security-Token")
  valid_595173 = validateParameter(valid_595173, JString, required = false,
                                 default = nil)
  if valid_595173 != nil:
    section.add "X-Amz-Security-Token", valid_595173
  var valid_595174 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595174 = validateParameter(valid_595174, JString, required = false,
                                 default = nil)
  if valid_595174 != nil:
    section.add "X-Amz-Content-Sha256", valid_595174
  var valid_595175 = header.getOrDefault("X-Amz-Algorithm")
  valid_595175 = validateParameter(valid_595175, JString, required = false,
                                 default = nil)
  if valid_595175 != nil:
    section.add "X-Amz-Algorithm", valid_595175
  var valid_595176 = header.getOrDefault("X-Amz-Signature")
  valid_595176 = validateParameter(valid_595176, JString, required = false,
                                 default = nil)
  if valid_595176 != nil:
    section.add "X-Amz-Signature", valid_595176
  var valid_595177 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595177 = validateParameter(valid_595177, JString, required = false,
                                 default = nil)
  if valid_595177 != nil:
    section.add "X-Amz-SignedHeaders", valid_595177
  var valid_595178 = header.getOrDefault("X-Amz-Credential")
  valid_595178 = validateParameter(valid_595178, JString, required = false,
                                 default = nil)
  if valid_595178 != nil:
    section.add "X-Amz-Credential", valid_595178
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595179: Call_PostDescribeScalingProcessTypes_595167;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the scaling process types for use with <a>ResumeProcesses</a> and <a>SuspendProcesses</a>.
  ## 
  let valid = call_595179.validator(path, query, header, formData, body)
  let scheme = call_595179.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595179.url(scheme.get, call_595179.host, call_595179.base,
                         call_595179.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595179, url, valid)

proc call*(call_595180: Call_PostDescribeScalingProcessTypes_595167;
          Action: string = "DescribeScalingProcessTypes";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeScalingProcessTypes
  ## Describes the scaling process types for use with <a>ResumeProcesses</a> and <a>SuspendProcesses</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595181 = newJObject()
  add(query_595181, "Action", newJString(Action))
  add(query_595181, "Version", newJString(Version))
  result = call_595180.call(nil, query_595181, nil, nil, nil)

var postDescribeScalingProcessTypes* = Call_PostDescribeScalingProcessTypes_595167(
    name: "postDescribeScalingProcessTypes", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeScalingProcessTypes",
    validator: validate_PostDescribeScalingProcessTypes_595168, base: "/",
    url: url_PostDescribeScalingProcessTypes_595169,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeScalingProcessTypes_595152 = ref object of OpenApiRestCall_593437
proc url_GetDescribeScalingProcessTypes_595154(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeScalingProcessTypes_595153(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the scaling process types for use with <a>ResumeProcesses</a> and <a>SuspendProcesses</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595155 = query.getOrDefault("Action")
  valid_595155 = validateParameter(valid_595155, JString, required = true, default = newJString(
      "DescribeScalingProcessTypes"))
  if valid_595155 != nil:
    section.add "Action", valid_595155
  var valid_595156 = query.getOrDefault("Version")
  valid_595156 = validateParameter(valid_595156, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_595156 != nil:
    section.add "Version", valid_595156
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595157 = header.getOrDefault("X-Amz-Date")
  valid_595157 = validateParameter(valid_595157, JString, required = false,
                                 default = nil)
  if valid_595157 != nil:
    section.add "X-Amz-Date", valid_595157
  var valid_595158 = header.getOrDefault("X-Amz-Security-Token")
  valid_595158 = validateParameter(valid_595158, JString, required = false,
                                 default = nil)
  if valid_595158 != nil:
    section.add "X-Amz-Security-Token", valid_595158
  var valid_595159 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595159 = validateParameter(valid_595159, JString, required = false,
                                 default = nil)
  if valid_595159 != nil:
    section.add "X-Amz-Content-Sha256", valid_595159
  var valid_595160 = header.getOrDefault("X-Amz-Algorithm")
  valid_595160 = validateParameter(valid_595160, JString, required = false,
                                 default = nil)
  if valid_595160 != nil:
    section.add "X-Amz-Algorithm", valid_595160
  var valid_595161 = header.getOrDefault("X-Amz-Signature")
  valid_595161 = validateParameter(valid_595161, JString, required = false,
                                 default = nil)
  if valid_595161 != nil:
    section.add "X-Amz-Signature", valid_595161
  var valid_595162 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595162 = validateParameter(valid_595162, JString, required = false,
                                 default = nil)
  if valid_595162 != nil:
    section.add "X-Amz-SignedHeaders", valid_595162
  var valid_595163 = header.getOrDefault("X-Amz-Credential")
  valid_595163 = validateParameter(valid_595163, JString, required = false,
                                 default = nil)
  if valid_595163 != nil:
    section.add "X-Amz-Credential", valid_595163
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595164: Call_GetDescribeScalingProcessTypes_595152; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the scaling process types for use with <a>ResumeProcesses</a> and <a>SuspendProcesses</a>.
  ## 
  let valid = call_595164.validator(path, query, header, formData, body)
  let scheme = call_595164.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595164.url(scheme.get, call_595164.host, call_595164.base,
                         call_595164.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595164, url, valid)

proc call*(call_595165: Call_GetDescribeScalingProcessTypes_595152;
          Action: string = "DescribeScalingProcessTypes";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeScalingProcessTypes
  ## Describes the scaling process types for use with <a>ResumeProcesses</a> and <a>SuspendProcesses</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595166 = newJObject()
  add(query_595166, "Action", newJString(Action))
  add(query_595166, "Version", newJString(Version))
  result = call_595165.call(nil, query_595166, nil, nil, nil)

var getDescribeScalingProcessTypes* = Call_GetDescribeScalingProcessTypes_595152(
    name: "getDescribeScalingProcessTypes", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeScalingProcessTypes",
    validator: validate_GetDescribeScalingProcessTypes_595153, base: "/",
    url: url_GetDescribeScalingProcessTypes_595154,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeScheduledActions_595203 = ref object of OpenApiRestCall_593437
proc url_PostDescribeScheduledActions_595205(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeScheduledActions_595204(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the actions scheduled for your Auto Scaling group that haven't run or that have not reached their end time. To describe the actions that have already run, use <a>DescribeScalingActivities</a>. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595206 = query.getOrDefault("Action")
  valid_595206 = validateParameter(valid_595206, JString, required = true, default = newJString(
      "DescribeScheduledActions"))
  if valid_595206 != nil:
    section.add "Action", valid_595206
  var valid_595207 = query.getOrDefault("Version")
  valid_595207 = validateParameter(valid_595207, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_595207 != nil:
    section.add "Version", valid_595207
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595208 = header.getOrDefault("X-Amz-Date")
  valid_595208 = validateParameter(valid_595208, JString, required = false,
                                 default = nil)
  if valid_595208 != nil:
    section.add "X-Amz-Date", valid_595208
  var valid_595209 = header.getOrDefault("X-Amz-Security-Token")
  valid_595209 = validateParameter(valid_595209, JString, required = false,
                                 default = nil)
  if valid_595209 != nil:
    section.add "X-Amz-Security-Token", valid_595209
  var valid_595210 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595210 = validateParameter(valid_595210, JString, required = false,
                                 default = nil)
  if valid_595210 != nil:
    section.add "X-Amz-Content-Sha256", valid_595210
  var valid_595211 = header.getOrDefault("X-Amz-Algorithm")
  valid_595211 = validateParameter(valid_595211, JString, required = false,
                                 default = nil)
  if valid_595211 != nil:
    section.add "X-Amz-Algorithm", valid_595211
  var valid_595212 = header.getOrDefault("X-Amz-Signature")
  valid_595212 = validateParameter(valid_595212, JString, required = false,
                                 default = nil)
  if valid_595212 != nil:
    section.add "X-Amz-Signature", valid_595212
  var valid_595213 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595213 = validateParameter(valid_595213, JString, required = false,
                                 default = nil)
  if valid_595213 != nil:
    section.add "X-Amz-SignedHeaders", valid_595213
  var valid_595214 = header.getOrDefault("X-Amz-Credential")
  valid_595214 = validateParameter(valid_595214, JString, required = false,
                                 default = nil)
  if valid_595214 != nil:
    section.add "X-Amz-Credential", valid_595214
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   StartTime: JString
  ##            : The earliest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   EndTime: JString
  ##          : The latest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   ScheduledActionNames: JArray
  ##                       : The names of one or more scheduled actions. You can specify up to 50 actions. If you omit this parameter, all scheduled actions are described. If you specify an unknown scheduled action, it is ignored with no error.
  section = newJObject()
  var valid_595215 = formData.getOrDefault("AutoScalingGroupName")
  valid_595215 = validateParameter(valid_595215, JString, required = false,
                                 default = nil)
  if valid_595215 != nil:
    section.add "AutoScalingGroupName", valid_595215
  var valid_595216 = formData.getOrDefault("NextToken")
  valid_595216 = validateParameter(valid_595216, JString, required = false,
                                 default = nil)
  if valid_595216 != nil:
    section.add "NextToken", valid_595216
  var valid_595217 = formData.getOrDefault("StartTime")
  valid_595217 = validateParameter(valid_595217, JString, required = false,
                                 default = nil)
  if valid_595217 != nil:
    section.add "StartTime", valid_595217
  var valid_595218 = formData.getOrDefault("EndTime")
  valid_595218 = validateParameter(valid_595218, JString, required = false,
                                 default = nil)
  if valid_595218 != nil:
    section.add "EndTime", valid_595218
  var valid_595219 = formData.getOrDefault("MaxRecords")
  valid_595219 = validateParameter(valid_595219, JInt, required = false, default = nil)
  if valid_595219 != nil:
    section.add "MaxRecords", valid_595219
  var valid_595220 = formData.getOrDefault("ScheduledActionNames")
  valid_595220 = validateParameter(valid_595220, JArray, required = false,
                                 default = nil)
  if valid_595220 != nil:
    section.add "ScheduledActionNames", valid_595220
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595221: Call_PostDescribeScheduledActions_595203; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the actions scheduled for your Auto Scaling group that haven't run or that have not reached their end time. To describe the actions that have already run, use <a>DescribeScalingActivities</a>. 
  ## 
  let valid = call_595221.validator(path, query, header, formData, body)
  let scheme = call_595221.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595221.url(scheme.get, call_595221.host, call_595221.base,
                         call_595221.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595221, url, valid)

proc call*(call_595222: Call_PostDescribeScheduledActions_595203;
          AutoScalingGroupName: string = ""; NextToken: string = "";
          StartTime: string = ""; Action: string = "DescribeScheduledActions";
          EndTime: string = ""; MaxRecords: int = 0; Version: string = "2011-01-01";
          ScheduledActionNames: JsonNode = nil): Recallable =
  ## postDescribeScheduledActions
  ## Describes the actions scheduled for your Auto Scaling group that haven't run or that have not reached their end time. To describe the actions that have already run, use <a>DescribeScalingActivities</a>. 
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   StartTime: string
  ##            : The earliest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   Action: string (required)
  ##   EndTime: string
  ##          : The latest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   Version: string (required)
  ##   ScheduledActionNames: JArray
  ##                       : The names of one or more scheduled actions. You can specify up to 50 actions. If you omit this parameter, all scheduled actions are described. If you specify an unknown scheduled action, it is ignored with no error.
  var query_595223 = newJObject()
  var formData_595224 = newJObject()
  add(formData_595224, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_595224, "NextToken", newJString(NextToken))
  add(formData_595224, "StartTime", newJString(StartTime))
  add(query_595223, "Action", newJString(Action))
  add(formData_595224, "EndTime", newJString(EndTime))
  add(formData_595224, "MaxRecords", newJInt(MaxRecords))
  add(query_595223, "Version", newJString(Version))
  if ScheduledActionNames != nil:
    formData_595224.add "ScheduledActionNames", ScheduledActionNames
  result = call_595222.call(nil, query_595223, nil, formData_595224, nil)

var postDescribeScheduledActions* = Call_PostDescribeScheduledActions_595203(
    name: "postDescribeScheduledActions", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeScheduledActions",
    validator: validate_PostDescribeScheduledActions_595204, base: "/",
    url: url_PostDescribeScheduledActions_595205,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeScheduledActions_595182 = ref object of OpenApiRestCall_593437
proc url_GetDescribeScheduledActions_595184(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeScheduledActions_595183(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the actions scheduled for your Auto Scaling group that haven't run or that have not reached their end time. To describe the actions that have already run, use <a>DescribeScalingActivities</a>. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   StartTime: JString
  ##            : The earliest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: JString (required)
  ##   ScheduledActionNames: JArray
  ##                       : The names of one or more scheduled actions. You can specify up to 50 actions. If you omit this parameter, all scheduled actions are described. If you specify an unknown scheduled action, it is ignored with no error.
  ##   EndTime: JString
  ##          : The latest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   Version: JString (required)
  section = newJObject()
  var valid_595185 = query.getOrDefault("MaxRecords")
  valid_595185 = validateParameter(valid_595185, JInt, required = false, default = nil)
  if valid_595185 != nil:
    section.add "MaxRecords", valid_595185
  var valid_595186 = query.getOrDefault("AutoScalingGroupName")
  valid_595186 = validateParameter(valid_595186, JString, required = false,
                                 default = nil)
  if valid_595186 != nil:
    section.add "AutoScalingGroupName", valid_595186
  var valid_595187 = query.getOrDefault("StartTime")
  valid_595187 = validateParameter(valid_595187, JString, required = false,
                                 default = nil)
  if valid_595187 != nil:
    section.add "StartTime", valid_595187
  var valid_595188 = query.getOrDefault("NextToken")
  valid_595188 = validateParameter(valid_595188, JString, required = false,
                                 default = nil)
  if valid_595188 != nil:
    section.add "NextToken", valid_595188
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595189 = query.getOrDefault("Action")
  valid_595189 = validateParameter(valid_595189, JString, required = true, default = newJString(
      "DescribeScheduledActions"))
  if valid_595189 != nil:
    section.add "Action", valid_595189
  var valid_595190 = query.getOrDefault("ScheduledActionNames")
  valid_595190 = validateParameter(valid_595190, JArray, required = false,
                                 default = nil)
  if valid_595190 != nil:
    section.add "ScheduledActionNames", valid_595190
  var valid_595191 = query.getOrDefault("EndTime")
  valid_595191 = validateParameter(valid_595191, JString, required = false,
                                 default = nil)
  if valid_595191 != nil:
    section.add "EndTime", valid_595191
  var valid_595192 = query.getOrDefault("Version")
  valid_595192 = validateParameter(valid_595192, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_595192 != nil:
    section.add "Version", valid_595192
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595193 = header.getOrDefault("X-Amz-Date")
  valid_595193 = validateParameter(valid_595193, JString, required = false,
                                 default = nil)
  if valid_595193 != nil:
    section.add "X-Amz-Date", valid_595193
  var valid_595194 = header.getOrDefault("X-Amz-Security-Token")
  valid_595194 = validateParameter(valid_595194, JString, required = false,
                                 default = nil)
  if valid_595194 != nil:
    section.add "X-Amz-Security-Token", valid_595194
  var valid_595195 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595195 = validateParameter(valid_595195, JString, required = false,
                                 default = nil)
  if valid_595195 != nil:
    section.add "X-Amz-Content-Sha256", valid_595195
  var valid_595196 = header.getOrDefault("X-Amz-Algorithm")
  valid_595196 = validateParameter(valid_595196, JString, required = false,
                                 default = nil)
  if valid_595196 != nil:
    section.add "X-Amz-Algorithm", valid_595196
  var valid_595197 = header.getOrDefault("X-Amz-Signature")
  valid_595197 = validateParameter(valid_595197, JString, required = false,
                                 default = nil)
  if valid_595197 != nil:
    section.add "X-Amz-Signature", valid_595197
  var valid_595198 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595198 = validateParameter(valid_595198, JString, required = false,
                                 default = nil)
  if valid_595198 != nil:
    section.add "X-Amz-SignedHeaders", valid_595198
  var valid_595199 = header.getOrDefault("X-Amz-Credential")
  valid_595199 = validateParameter(valid_595199, JString, required = false,
                                 default = nil)
  if valid_595199 != nil:
    section.add "X-Amz-Credential", valid_595199
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595200: Call_GetDescribeScheduledActions_595182; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the actions scheduled for your Auto Scaling group that haven't run or that have not reached their end time. To describe the actions that have already run, use <a>DescribeScalingActivities</a>. 
  ## 
  let valid = call_595200.validator(path, query, header, formData, body)
  let scheme = call_595200.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595200.url(scheme.get, call_595200.host, call_595200.base,
                         call_595200.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595200, url, valid)

proc call*(call_595201: Call_GetDescribeScheduledActions_595182;
          MaxRecords: int = 0; AutoScalingGroupName: string = "";
          StartTime: string = ""; NextToken: string = "";
          Action: string = "DescribeScheduledActions";
          ScheduledActionNames: JsonNode = nil; EndTime: string = "";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeScheduledActions
  ## Describes the actions scheduled for your Auto Scaling group that haven't run or that have not reached their end time. To describe the actions that have already run, use <a>DescribeScalingActivities</a>. 
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   StartTime: string
  ##            : The earliest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   ScheduledActionNames: JArray
  ##                       : The names of one or more scheduled actions. You can specify up to 50 actions. If you omit this parameter, all scheduled actions are described. If you specify an unknown scheduled action, it is ignored with no error.
  ##   EndTime: string
  ##          : The latest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   Version: string (required)
  var query_595202 = newJObject()
  add(query_595202, "MaxRecords", newJInt(MaxRecords))
  add(query_595202, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_595202, "StartTime", newJString(StartTime))
  add(query_595202, "NextToken", newJString(NextToken))
  add(query_595202, "Action", newJString(Action))
  if ScheduledActionNames != nil:
    query_595202.add "ScheduledActionNames", ScheduledActionNames
  add(query_595202, "EndTime", newJString(EndTime))
  add(query_595202, "Version", newJString(Version))
  result = call_595201.call(nil, query_595202, nil, nil, nil)

var getDescribeScheduledActions* = Call_GetDescribeScheduledActions_595182(
    name: "getDescribeScheduledActions", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeScheduledActions",
    validator: validate_GetDescribeScheduledActions_595183, base: "/",
    url: url_GetDescribeScheduledActions_595184,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeTags_595243 = ref object of OpenApiRestCall_593437
proc url_PostDescribeTags_595245(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeTags_595244(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Describes the specified tags.</p> <p>You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.</p> <p>You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there's no match, no special message is returned.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595246 = query.getOrDefault("Action")
  valid_595246 = validateParameter(valid_595246, JString, required = true,
                                 default = newJString("DescribeTags"))
  if valid_595246 != nil:
    section.add "Action", valid_595246
  var valid_595247 = query.getOrDefault("Version")
  valid_595247 = validateParameter(valid_595247, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_595247 != nil:
    section.add "Version", valid_595247
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595248 = header.getOrDefault("X-Amz-Date")
  valid_595248 = validateParameter(valid_595248, JString, required = false,
                                 default = nil)
  if valid_595248 != nil:
    section.add "X-Amz-Date", valid_595248
  var valid_595249 = header.getOrDefault("X-Amz-Security-Token")
  valid_595249 = validateParameter(valid_595249, JString, required = false,
                                 default = nil)
  if valid_595249 != nil:
    section.add "X-Amz-Security-Token", valid_595249
  var valid_595250 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595250 = validateParameter(valid_595250, JString, required = false,
                                 default = nil)
  if valid_595250 != nil:
    section.add "X-Amz-Content-Sha256", valid_595250
  var valid_595251 = header.getOrDefault("X-Amz-Algorithm")
  valid_595251 = validateParameter(valid_595251, JString, required = false,
                                 default = nil)
  if valid_595251 != nil:
    section.add "X-Amz-Algorithm", valid_595251
  var valid_595252 = header.getOrDefault("X-Amz-Signature")
  valid_595252 = validateParameter(valid_595252, JString, required = false,
                                 default = nil)
  if valid_595252 != nil:
    section.add "X-Amz-Signature", valid_595252
  var valid_595253 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595253 = validateParameter(valid_595253, JString, required = false,
                                 default = nil)
  if valid_595253 != nil:
    section.add "X-Amz-SignedHeaders", valid_595253
  var valid_595254 = header.getOrDefault("X-Amz-Credential")
  valid_595254 = validateParameter(valid_595254, JString, required = false,
                                 default = nil)
  if valid_595254 != nil:
    section.add "X-Amz-Credential", valid_595254
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Filters: JArray
  ##          : One or more filters to scope the tags to return. The maximum number of filters per filter type (for example, <code>auto-scaling-group</code>) is 1000.
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  section = newJObject()
  var valid_595255 = formData.getOrDefault("NextToken")
  valid_595255 = validateParameter(valid_595255, JString, required = false,
                                 default = nil)
  if valid_595255 != nil:
    section.add "NextToken", valid_595255
  var valid_595256 = formData.getOrDefault("Filters")
  valid_595256 = validateParameter(valid_595256, JArray, required = false,
                                 default = nil)
  if valid_595256 != nil:
    section.add "Filters", valid_595256
  var valid_595257 = formData.getOrDefault("MaxRecords")
  valid_595257 = validateParameter(valid_595257, JInt, required = false, default = nil)
  if valid_595257 != nil:
    section.add "MaxRecords", valid_595257
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595258: Call_PostDescribeTags_595243; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the specified tags.</p> <p>You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.</p> <p>You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there's no match, no special message is returned.</p>
  ## 
  let valid = call_595258.validator(path, query, header, formData, body)
  let scheme = call_595258.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595258.url(scheme.get, call_595258.host, call_595258.base,
                         call_595258.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595258, url, valid)

proc call*(call_595259: Call_PostDescribeTags_595243; NextToken: string = "";
          Action: string = "DescribeTags"; Filters: JsonNode = nil; MaxRecords: int = 0;
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeTags
  ## <p>Describes the specified tags.</p> <p>You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.</p> <p>You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there's no match, no special message is returned.</p>
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : One or more filters to scope the tags to return. The maximum number of filters per filter type (for example, <code>auto-scaling-group</code>) is 1000.
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   Version: string (required)
  var query_595260 = newJObject()
  var formData_595261 = newJObject()
  add(formData_595261, "NextToken", newJString(NextToken))
  add(query_595260, "Action", newJString(Action))
  if Filters != nil:
    formData_595261.add "Filters", Filters
  add(formData_595261, "MaxRecords", newJInt(MaxRecords))
  add(query_595260, "Version", newJString(Version))
  result = call_595259.call(nil, query_595260, nil, formData_595261, nil)

var postDescribeTags* = Call_PostDescribeTags_595243(name: "postDescribeTags",
    meth: HttpMethod.HttpPost, host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeTags", validator: validate_PostDescribeTags_595244,
    base: "/", url: url_PostDescribeTags_595245,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeTags_595225 = ref object of OpenApiRestCall_593437
proc url_GetDescribeTags_595227(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeTags_595226(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Describes the specified tags.</p> <p>You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.</p> <p>You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there's no match, no special message is returned.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   Filters: JArray
  ##          : One or more filters to scope the tags to return. The maximum number of filters per filter type (for example, <code>auto-scaling-group</code>) is 1000.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_595228 = query.getOrDefault("MaxRecords")
  valid_595228 = validateParameter(valid_595228, JInt, required = false, default = nil)
  if valid_595228 != nil:
    section.add "MaxRecords", valid_595228
  var valid_595229 = query.getOrDefault("Filters")
  valid_595229 = validateParameter(valid_595229, JArray, required = false,
                                 default = nil)
  if valid_595229 != nil:
    section.add "Filters", valid_595229
  var valid_595230 = query.getOrDefault("NextToken")
  valid_595230 = validateParameter(valid_595230, JString, required = false,
                                 default = nil)
  if valid_595230 != nil:
    section.add "NextToken", valid_595230
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595231 = query.getOrDefault("Action")
  valid_595231 = validateParameter(valid_595231, JString, required = true,
                                 default = newJString("DescribeTags"))
  if valid_595231 != nil:
    section.add "Action", valid_595231
  var valid_595232 = query.getOrDefault("Version")
  valid_595232 = validateParameter(valid_595232, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_595232 != nil:
    section.add "Version", valid_595232
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595233 = header.getOrDefault("X-Amz-Date")
  valid_595233 = validateParameter(valid_595233, JString, required = false,
                                 default = nil)
  if valid_595233 != nil:
    section.add "X-Amz-Date", valid_595233
  var valid_595234 = header.getOrDefault("X-Amz-Security-Token")
  valid_595234 = validateParameter(valid_595234, JString, required = false,
                                 default = nil)
  if valid_595234 != nil:
    section.add "X-Amz-Security-Token", valid_595234
  var valid_595235 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595235 = validateParameter(valid_595235, JString, required = false,
                                 default = nil)
  if valid_595235 != nil:
    section.add "X-Amz-Content-Sha256", valid_595235
  var valid_595236 = header.getOrDefault("X-Amz-Algorithm")
  valid_595236 = validateParameter(valid_595236, JString, required = false,
                                 default = nil)
  if valid_595236 != nil:
    section.add "X-Amz-Algorithm", valid_595236
  var valid_595237 = header.getOrDefault("X-Amz-Signature")
  valid_595237 = validateParameter(valid_595237, JString, required = false,
                                 default = nil)
  if valid_595237 != nil:
    section.add "X-Amz-Signature", valid_595237
  var valid_595238 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595238 = validateParameter(valid_595238, JString, required = false,
                                 default = nil)
  if valid_595238 != nil:
    section.add "X-Amz-SignedHeaders", valid_595238
  var valid_595239 = header.getOrDefault("X-Amz-Credential")
  valid_595239 = validateParameter(valid_595239, JString, required = false,
                                 default = nil)
  if valid_595239 != nil:
    section.add "X-Amz-Credential", valid_595239
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595240: Call_GetDescribeTags_595225; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the specified tags.</p> <p>You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.</p> <p>You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there's no match, no special message is returned.</p>
  ## 
  let valid = call_595240.validator(path, query, header, formData, body)
  let scheme = call_595240.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595240.url(scheme.get, call_595240.host, call_595240.base,
                         call_595240.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595240, url, valid)

proc call*(call_595241: Call_GetDescribeTags_595225; MaxRecords: int = 0;
          Filters: JsonNode = nil; NextToken: string = "";
          Action: string = "DescribeTags"; Version: string = "2011-01-01"): Recallable =
  ## getDescribeTags
  ## <p>Describes the specified tags.</p> <p>You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.</p> <p>You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there's no match, no special message is returned.</p>
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   Filters: JArray
  ##          : One or more filters to scope the tags to return. The maximum number of filters per filter type (for example, <code>auto-scaling-group</code>) is 1000.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595242 = newJObject()
  add(query_595242, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_595242.add "Filters", Filters
  add(query_595242, "NextToken", newJString(NextToken))
  add(query_595242, "Action", newJString(Action))
  add(query_595242, "Version", newJString(Version))
  result = call_595241.call(nil, query_595242, nil, nil, nil)

var getDescribeTags* = Call_GetDescribeTags_595225(name: "getDescribeTags",
    meth: HttpMethod.HttpGet, host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeTags", validator: validate_GetDescribeTags_595226,
    base: "/", url: url_GetDescribeTags_595227, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeTerminationPolicyTypes_595277 = ref object of OpenApiRestCall_593437
proc url_PostDescribeTerminationPolicyTypes_595279(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeTerminationPolicyTypes_595278(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the termination policies supported by Amazon EC2 Auto Scaling.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Auto Scaling Instances Terminate During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595280 = query.getOrDefault("Action")
  valid_595280 = validateParameter(valid_595280, JString, required = true, default = newJString(
      "DescribeTerminationPolicyTypes"))
  if valid_595280 != nil:
    section.add "Action", valid_595280
  var valid_595281 = query.getOrDefault("Version")
  valid_595281 = validateParameter(valid_595281, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_595281 != nil:
    section.add "Version", valid_595281
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595282 = header.getOrDefault("X-Amz-Date")
  valid_595282 = validateParameter(valid_595282, JString, required = false,
                                 default = nil)
  if valid_595282 != nil:
    section.add "X-Amz-Date", valid_595282
  var valid_595283 = header.getOrDefault("X-Amz-Security-Token")
  valid_595283 = validateParameter(valid_595283, JString, required = false,
                                 default = nil)
  if valid_595283 != nil:
    section.add "X-Amz-Security-Token", valid_595283
  var valid_595284 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595284 = validateParameter(valid_595284, JString, required = false,
                                 default = nil)
  if valid_595284 != nil:
    section.add "X-Amz-Content-Sha256", valid_595284
  var valid_595285 = header.getOrDefault("X-Amz-Algorithm")
  valid_595285 = validateParameter(valid_595285, JString, required = false,
                                 default = nil)
  if valid_595285 != nil:
    section.add "X-Amz-Algorithm", valid_595285
  var valid_595286 = header.getOrDefault("X-Amz-Signature")
  valid_595286 = validateParameter(valid_595286, JString, required = false,
                                 default = nil)
  if valid_595286 != nil:
    section.add "X-Amz-Signature", valid_595286
  var valid_595287 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595287 = validateParameter(valid_595287, JString, required = false,
                                 default = nil)
  if valid_595287 != nil:
    section.add "X-Amz-SignedHeaders", valid_595287
  var valid_595288 = header.getOrDefault("X-Amz-Credential")
  valid_595288 = validateParameter(valid_595288, JString, required = false,
                                 default = nil)
  if valid_595288 != nil:
    section.add "X-Amz-Credential", valid_595288
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595289: Call_PostDescribeTerminationPolicyTypes_595277;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Describes the termination policies supported by Amazon EC2 Auto Scaling.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Auto Scaling Instances Terminate During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_595289.validator(path, query, header, formData, body)
  let scheme = call_595289.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595289.url(scheme.get, call_595289.host, call_595289.base,
                         call_595289.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595289, url, valid)

proc call*(call_595290: Call_PostDescribeTerminationPolicyTypes_595277;
          Action: string = "DescribeTerminationPolicyTypes";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeTerminationPolicyTypes
  ## <p>Describes the termination policies supported by Amazon EC2 Auto Scaling.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Auto Scaling Instances Terminate During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595291 = newJObject()
  add(query_595291, "Action", newJString(Action))
  add(query_595291, "Version", newJString(Version))
  result = call_595290.call(nil, query_595291, nil, nil, nil)

var postDescribeTerminationPolicyTypes* = Call_PostDescribeTerminationPolicyTypes_595277(
    name: "postDescribeTerminationPolicyTypes", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeTerminationPolicyTypes",
    validator: validate_PostDescribeTerminationPolicyTypes_595278, base: "/",
    url: url_PostDescribeTerminationPolicyTypes_595279,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeTerminationPolicyTypes_595262 = ref object of OpenApiRestCall_593437
proc url_GetDescribeTerminationPolicyTypes_595264(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeTerminationPolicyTypes_595263(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the termination policies supported by Amazon EC2 Auto Scaling.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Auto Scaling Instances Terminate During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595265 = query.getOrDefault("Action")
  valid_595265 = validateParameter(valid_595265, JString, required = true, default = newJString(
      "DescribeTerminationPolicyTypes"))
  if valid_595265 != nil:
    section.add "Action", valid_595265
  var valid_595266 = query.getOrDefault("Version")
  valid_595266 = validateParameter(valid_595266, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_595266 != nil:
    section.add "Version", valid_595266
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595267 = header.getOrDefault("X-Amz-Date")
  valid_595267 = validateParameter(valid_595267, JString, required = false,
                                 default = nil)
  if valid_595267 != nil:
    section.add "X-Amz-Date", valid_595267
  var valid_595268 = header.getOrDefault("X-Amz-Security-Token")
  valid_595268 = validateParameter(valid_595268, JString, required = false,
                                 default = nil)
  if valid_595268 != nil:
    section.add "X-Amz-Security-Token", valid_595268
  var valid_595269 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595269 = validateParameter(valid_595269, JString, required = false,
                                 default = nil)
  if valid_595269 != nil:
    section.add "X-Amz-Content-Sha256", valid_595269
  var valid_595270 = header.getOrDefault("X-Amz-Algorithm")
  valid_595270 = validateParameter(valid_595270, JString, required = false,
                                 default = nil)
  if valid_595270 != nil:
    section.add "X-Amz-Algorithm", valid_595270
  var valid_595271 = header.getOrDefault("X-Amz-Signature")
  valid_595271 = validateParameter(valid_595271, JString, required = false,
                                 default = nil)
  if valid_595271 != nil:
    section.add "X-Amz-Signature", valid_595271
  var valid_595272 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595272 = validateParameter(valid_595272, JString, required = false,
                                 default = nil)
  if valid_595272 != nil:
    section.add "X-Amz-SignedHeaders", valid_595272
  var valid_595273 = header.getOrDefault("X-Amz-Credential")
  valid_595273 = validateParameter(valid_595273, JString, required = false,
                                 default = nil)
  if valid_595273 != nil:
    section.add "X-Amz-Credential", valid_595273
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595274: Call_GetDescribeTerminationPolicyTypes_595262;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Describes the termination policies supported by Amazon EC2 Auto Scaling.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Auto Scaling Instances Terminate During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_595274.validator(path, query, header, formData, body)
  let scheme = call_595274.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595274.url(scheme.get, call_595274.host, call_595274.base,
                         call_595274.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595274, url, valid)

proc call*(call_595275: Call_GetDescribeTerminationPolicyTypes_595262;
          Action: string = "DescribeTerminationPolicyTypes";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeTerminationPolicyTypes
  ## <p>Describes the termination policies supported by Amazon EC2 Auto Scaling.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Auto Scaling Instances Terminate During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595276 = newJObject()
  add(query_595276, "Action", newJString(Action))
  add(query_595276, "Version", newJString(Version))
  result = call_595275.call(nil, query_595276, nil, nil, nil)

var getDescribeTerminationPolicyTypes* = Call_GetDescribeTerminationPolicyTypes_595262(
    name: "getDescribeTerminationPolicyTypes", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeTerminationPolicyTypes",
    validator: validate_GetDescribeTerminationPolicyTypes_595263, base: "/",
    url: url_GetDescribeTerminationPolicyTypes_595264,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDetachInstances_595310 = ref object of OpenApiRestCall_593437
proc url_PostDetachInstances_595312(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDetachInstances_595311(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Removes one or more instances from the specified Auto Scaling group.</p> <p>After the instances are detached, you can manage them independent of the Auto Scaling group.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.</p> <p>If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html">Detach EC2 Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595313 = query.getOrDefault("Action")
  valid_595313 = validateParameter(valid_595313, JString, required = true,
                                 default = newJString("DetachInstances"))
  if valid_595313 != nil:
    section.add "Action", valid_595313
  var valid_595314 = query.getOrDefault("Version")
  valid_595314 = validateParameter(valid_595314, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_595314 != nil:
    section.add "Version", valid_595314
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595315 = header.getOrDefault("X-Amz-Date")
  valid_595315 = validateParameter(valid_595315, JString, required = false,
                                 default = nil)
  if valid_595315 != nil:
    section.add "X-Amz-Date", valid_595315
  var valid_595316 = header.getOrDefault("X-Amz-Security-Token")
  valid_595316 = validateParameter(valid_595316, JString, required = false,
                                 default = nil)
  if valid_595316 != nil:
    section.add "X-Amz-Security-Token", valid_595316
  var valid_595317 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595317 = validateParameter(valid_595317, JString, required = false,
                                 default = nil)
  if valid_595317 != nil:
    section.add "X-Amz-Content-Sha256", valid_595317
  var valid_595318 = header.getOrDefault("X-Amz-Algorithm")
  valid_595318 = validateParameter(valid_595318, JString, required = false,
                                 default = nil)
  if valid_595318 != nil:
    section.add "X-Amz-Algorithm", valid_595318
  var valid_595319 = header.getOrDefault("X-Amz-Signature")
  valid_595319 = validateParameter(valid_595319, JString, required = false,
                                 default = nil)
  if valid_595319 != nil:
    section.add "X-Amz-Signature", valid_595319
  var valid_595320 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595320 = validateParameter(valid_595320, JString, required = false,
                                 default = nil)
  if valid_595320 != nil:
    section.add "X-Amz-SignedHeaders", valid_595320
  var valid_595321 = header.getOrDefault("X-Amz-Credential")
  valid_595321 = validateParameter(valid_595321, JString, required = false,
                                 default = nil)
  if valid_595321 != nil:
    section.add "X-Amz-Credential", valid_595321
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   ShouldDecrementDesiredCapacity: JBool (required)
  ##                                 : Indicates whether the Auto Scaling group decrements the desired capacity value by the number of instances detached.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_595322 = formData.getOrDefault("AutoScalingGroupName")
  valid_595322 = validateParameter(valid_595322, JString, required = true,
                                 default = nil)
  if valid_595322 != nil:
    section.add "AutoScalingGroupName", valid_595322
  var valid_595323 = formData.getOrDefault("InstanceIds")
  valid_595323 = validateParameter(valid_595323, JArray, required = false,
                                 default = nil)
  if valid_595323 != nil:
    section.add "InstanceIds", valid_595323
  var valid_595324 = formData.getOrDefault("ShouldDecrementDesiredCapacity")
  valid_595324 = validateParameter(valid_595324, JBool, required = true, default = nil)
  if valid_595324 != nil:
    section.add "ShouldDecrementDesiredCapacity", valid_595324
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595325: Call_PostDetachInstances_595310; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes one or more instances from the specified Auto Scaling group.</p> <p>After the instances are detached, you can manage them independent of the Auto Scaling group.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.</p> <p>If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html">Detach EC2 Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_595325.validator(path, query, header, formData, body)
  let scheme = call_595325.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595325.url(scheme.get, call_595325.host, call_595325.base,
                         call_595325.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595325, url, valid)

proc call*(call_595326: Call_PostDetachInstances_595310;
          AutoScalingGroupName: string; ShouldDecrementDesiredCapacity: bool;
          InstanceIds: JsonNode = nil; Action: string = "DetachInstances";
          Version: string = "2011-01-01"): Recallable =
  ## postDetachInstances
  ## <p>Removes one or more instances from the specified Auto Scaling group.</p> <p>After the instances are detached, you can manage them independent of the Auto Scaling group.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.</p> <p>If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html">Detach EC2 Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   ShouldDecrementDesiredCapacity: bool (required)
  ##                                 : Indicates whether the Auto Scaling group decrements the desired capacity value by the number of instances detached.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595327 = newJObject()
  var formData_595328 = newJObject()
  add(formData_595328, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if InstanceIds != nil:
    formData_595328.add "InstanceIds", InstanceIds
  add(formData_595328, "ShouldDecrementDesiredCapacity",
      newJBool(ShouldDecrementDesiredCapacity))
  add(query_595327, "Action", newJString(Action))
  add(query_595327, "Version", newJString(Version))
  result = call_595326.call(nil, query_595327, nil, formData_595328, nil)

var postDetachInstances* = Call_PostDetachInstances_595310(
    name: "postDetachInstances", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DetachInstances",
    validator: validate_PostDetachInstances_595311, base: "/",
    url: url_PostDetachInstances_595312, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDetachInstances_595292 = ref object of OpenApiRestCall_593437
proc url_GetDetachInstances_595294(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDetachInstances_595293(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Removes one or more instances from the specified Auto Scaling group.</p> <p>After the instances are detached, you can manage them independent of the Auto Scaling group.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.</p> <p>If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html">Detach EC2 Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   ShouldDecrementDesiredCapacity: JBool (required)
  ##                                 : Indicates whether the Auto Scaling group decrements the desired capacity value by the number of instances detached.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_595295 = query.getOrDefault("AutoScalingGroupName")
  valid_595295 = validateParameter(valid_595295, JString, required = true,
                                 default = nil)
  if valid_595295 != nil:
    section.add "AutoScalingGroupName", valid_595295
  var valid_595296 = query.getOrDefault("Action")
  valid_595296 = validateParameter(valid_595296, JString, required = true,
                                 default = newJString("DetachInstances"))
  if valid_595296 != nil:
    section.add "Action", valid_595296
  var valid_595297 = query.getOrDefault("ShouldDecrementDesiredCapacity")
  valid_595297 = validateParameter(valid_595297, JBool, required = true, default = nil)
  if valid_595297 != nil:
    section.add "ShouldDecrementDesiredCapacity", valid_595297
  var valid_595298 = query.getOrDefault("InstanceIds")
  valid_595298 = validateParameter(valid_595298, JArray, required = false,
                                 default = nil)
  if valid_595298 != nil:
    section.add "InstanceIds", valid_595298
  var valid_595299 = query.getOrDefault("Version")
  valid_595299 = validateParameter(valid_595299, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_595299 != nil:
    section.add "Version", valid_595299
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595300 = header.getOrDefault("X-Amz-Date")
  valid_595300 = validateParameter(valid_595300, JString, required = false,
                                 default = nil)
  if valid_595300 != nil:
    section.add "X-Amz-Date", valid_595300
  var valid_595301 = header.getOrDefault("X-Amz-Security-Token")
  valid_595301 = validateParameter(valid_595301, JString, required = false,
                                 default = nil)
  if valid_595301 != nil:
    section.add "X-Amz-Security-Token", valid_595301
  var valid_595302 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595302 = validateParameter(valid_595302, JString, required = false,
                                 default = nil)
  if valid_595302 != nil:
    section.add "X-Amz-Content-Sha256", valid_595302
  var valid_595303 = header.getOrDefault("X-Amz-Algorithm")
  valid_595303 = validateParameter(valid_595303, JString, required = false,
                                 default = nil)
  if valid_595303 != nil:
    section.add "X-Amz-Algorithm", valid_595303
  var valid_595304 = header.getOrDefault("X-Amz-Signature")
  valid_595304 = validateParameter(valid_595304, JString, required = false,
                                 default = nil)
  if valid_595304 != nil:
    section.add "X-Amz-Signature", valid_595304
  var valid_595305 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595305 = validateParameter(valid_595305, JString, required = false,
                                 default = nil)
  if valid_595305 != nil:
    section.add "X-Amz-SignedHeaders", valid_595305
  var valid_595306 = header.getOrDefault("X-Amz-Credential")
  valid_595306 = validateParameter(valid_595306, JString, required = false,
                                 default = nil)
  if valid_595306 != nil:
    section.add "X-Amz-Credential", valid_595306
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595307: Call_GetDetachInstances_595292; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes one or more instances from the specified Auto Scaling group.</p> <p>After the instances are detached, you can manage them independent of the Auto Scaling group.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.</p> <p>If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html">Detach EC2 Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_595307.validator(path, query, header, formData, body)
  let scheme = call_595307.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595307.url(scheme.get, call_595307.host, call_595307.base,
                         call_595307.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595307, url, valid)

proc call*(call_595308: Call_GetDetachInstances_595292;
          AutoScalingGroupName: string; ShouldDecrementDesiredCapacity: bool;
          Action: string = "DetachInstances"; InstanceIds: JsonNode = nil;
          Version: string = "2011-01-01"): Recallable =
  ## getDetachInstances
  ## <p>Removes one or more instances from the specified Auto Scaling group.</p> <p>After the instances are detached, you can manage them independent of the Auto Scaling group.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.</p> <p>If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html">Detach EC2 Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   ShouldDecrementDesiredCapacity: bool (required)
  ##                                 : Indicates whether the Auto Scaling group decrements the desired capacity value by the number of instances detached.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Version: string (required)
  var query_595309 = newJObject()
  add(query_595309, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_595309, "Action", newJString(Action))
  add(query_595309, "ShouldDecrementDesiredCapacity",
      newJBool(ShouldDecrementDesiredCapacity))
  if InstanceIds != nil:
    query_595309.add "InstanceIds", InstanceIds
  add(query_595309, "Version", newJString(Version))
  result = call_595308.call(nil, query_595309, nil, nil, nil)

var getDetachInstances* = Call_GetDetachInstances_595292(
    name: "getDetachInstances", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DetachInstances",
    validator: validate_GetDetachInstances_595293, base: "/",
    url: url_GetDetachInstances_595294, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDetachLoadBalancerTargetGroups_595346 = ref object of OpenApiRestCall_593437
proc url_PostDetachLoadBalancerTargetGroups_595348(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDetachLoadBalancerTargetGroups_595347(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Detaches one or more target groups from the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595349 = query.getOrDefault("Action")
  valid_595349 = validateParameter(valid_595349, JString, required = true, default = newJString(
      "DetachLoadBalancerTargetGroups"))
  if valid_595349 != nil:
    section.add "Action", valid_595349
  var valid_595350 = query.getOrDefault("Version")
  valid_595350 = validateParameter(valid_595350, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_595350 != nil:
    section.add "Version", valid_595350
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595351 = header.getOrDefault("X-Amz-Date")
  valid_595351 = validateParameter(valid_595351, JString, required = false,
                                 default = nil)
  if valid_595351 != nil:
    section.add "X-Amz-Date", valid_595351
  var valid_595352 = header.getOrDefault("X-Amz-Security-Token")
  valid_595352 = validateParameter(valid_595352, JString, required = false,
                                 default = nil)
  if valid_595352 != nil:
    section.add "X-Amz-Security-Token", valid_595352
  var valid_595353 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595353 = validateParameter(valid_595353, JString, required = false,
                                 default = nil)
  if valid_595353 != nil:
    section.add "X-Amz-Content-Sha256", valid_595353
  var valid_595354 = header.getOrDefault("X-Amz-Algorithm")
  valid_595354 = validateParameter(valid_595354, JString, required = false,
                                 default = nil)
  if valid_595354 != nil:
    section.add "X-Amz-Algorithm", valid_595354
  var valid_595355 = header.getOrDefault("X-Amz-Signature")
  valid_595355 = validateParameter(valid_595355, JString, required = false,
                                 default = nil)
  if valid_595355 != nil:
    section.add "X-Amz-Signature", valid_595355
  var valid_595356 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595356 = validateParameter(valid_595356, JString, required = false,
                                 default = nil)
  if valid_595356 != nil:
    section.add "X-Amz-SignedHeaders", valid_595356
  var valid_595357 = header.getOrDefault("X-Amz-Credential")
  valid_595357 = validateParameter(valid_595357, JString, required = false,
                                 default = nil)
  if valid_595357 != nil:
    section.add "X-Amz-Credential", valid_595357
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_595358 = formData.getOrDefault("AutoScalingGroupName")
  valid_595358 = validateParameter(valid_595358, JString, required = true,
                                 default = nil)
  if valid_595358 != nil:
    section.add "AutoScalingGroupName", valid_595358
  var valid_595359 = formData.getOrDefault("TargetGroupARNs")
  valid_595359 = validateParameter(valid_595359, JArray, required = true, default = nil)
  if valid_595359 != nil:
    section.add "TargetGroupARNs", valid_595359
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595360: Call_PostDetachLoadBalancerTargetGroups_595346;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Detaches one or more target groups from the specified Auto Scaling group.
  ## 
  let valid = call_595360.validator(path, query, header, formData, body)
  let scheme = call_595360.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595360.url(scheme.get, call_595360.host, call_595360.base,
                         call_595360.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595360, url, valid)

proc call*(call_595361: Call_PostDetachLoadBalancerTargetGroups_595346;
          AutoScalingGroupName: string; TargetGroupARNs: JsonNode;
          Action: string = "DetachLoadBalancerTargetGroups";
          Version: string = "2011-01-01"): Recallable =
  ## postDetachLoadBalancerTargetGroups
  ## Detaches one or more target groups from the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595362 = newJObject()
  var formData_595363 = newJObject()
  add(formData_595363, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if TargetGroupARNs != nil:
    formData_595363.add "TargetGroupARNs", TargetGroupARNs
  add(query_595362, "Action", newJString(Action))
  add(query_595362, "Version", newJString(Version))
  result = call_595361.call(nil, query_595362, nil, formData_595363, nil)

var postDetachLoadBalancerTargetGroups* = Call_PostDetachLoadBalancerTargetGroups_595346(
    name: "postDetachLoadBalancerTargetGroups", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DetachLoadBalancerTargetGroups",
    validator: validate_PostDetachLoadBalancerTargetGroups_595347, base: "/",
    url: url_PostDetachLoadBalancerTargetGroups_595348,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDetachLoadBalancerTargetGroups_595329 = ref object of OpenApiRestCall_593437
proc url_GetDetachLoadBalancerTargetGroups_595331(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDetachLoadBalancerTargetGroups_595330(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Detaches one or more target groups from the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_595332 = query.getOrDefault("AutoScalingGroupName")
  valid_595332 = validateParameter(valid_595332, JString, required = true,
                                 default = nil)
  if valid_595332 != nil:
    section.add "AutoScalingGroupName", valid_595332
  var valid_595333 = query.getOrDefault("Action")
  valid_595333 = validateParameter(valid_595333, JString, required = true, default = newJString(
      "DetachLoadBalancerTargetGroups"))
  if valid_595333 != nil:
    section.add "Action", valid_595333
  var valid_595334 = query.getOrDefault("TargetGroupARNs")
  valid_595334 = validateParameter(valid_595334, JArray, required = true, default = nil)
  if valid_595334 != nil:
    section.add "TargetGroupARNs", valid_595334
  var valid_595335 = query.getOrDefault("Version")
  valid_595335 = validateParameter(valid_595335, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_595335 != nil:
    section.add "Version", valid_595335
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595336 = header.getOrDefault("X-Amz-Date")
  valid_595336 = validateParameter(valid_595336, JString, required = false,
                                 default = nil)
  if valid_595336 != nil:
    section.add "X-Amz-Date", valid_595336
  var valid_595337 = header.getOrDefault("X-Amz-Security-Token")
  valid_595337 = validateParameter(valid_595337, JString, required = false,
                                 default = nil)
  if valid_595337 != nil:
    section.add "X-Amz-Security-Token", valid_595337
  var valid_595338 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595338 = validateParameter(valid_595338, JString, required = false,
                                 default = nil)
  if valid_595338 != nil:
    section.add "X-Amz-Content-Sha256", valid_595338
  var valid_595339 = header.getOrDefault("X-Amz-Algorithm")
  valid_595339 = validateParameter(valid_595339, JString, required = false,
                                 default = nil)
  if valid_595339 != nil:
    section.add "X-Amz-Algorithm", valid_595339
  var valid_595340 = header.getOrDefault("X-Amz-Signature")
  valid_595340 = validateParameter(valid_595340, JString, required = false,
                                 default = nil)
  if valid_595340 != nil:
    section.add "X-Amz-Signature", valid_595340
  var valid_595341 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595341 = validateParameter(valid_595341, JString, required = false,
                                 default = nil)
  if valid_595341 != nil:
    section.add "X-Amz-SignedHeaders", valid_595341
  var valid_595342 = header.getOrDefault("X-Amz-Credential")
  valid_595342 = validateParameter(valid_595342, JString, required = false,
                                 default = nil)
  if valid_595342 != nil:
    section.add "X-Amz-Credential", valid_595342
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595343: Call_GetDetachLoadBalancerTargetGroups_595329;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Detaches one or more target groups from the specified Auto Scaling group.
  ## 
  let valid = call_595343.validator(path, query, header, formData, body)
  let scheme = call_595343.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595343.url(scheme.get, call_595343.host, call_595343.base,
                         call_595343.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595343, url, valid)

proc call*(call_595344: Call_GetDetachLoadBalancerTargetGroups_595329;
          AutoScalingGroupName: string; TargetGroupARNs: JsonNode;
          Action: string = "DetachLoadBalancerTargetGroups";
          Version: string = "2011-01-01"): Recallable =
  ## getDetachLoadBalancerTargetGroups
  ## Detaches one or more target groups from the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  ##   Version: string (required)
  var query_595345 = newJObject()
  add(query_595345, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_595345, "Action", newJString(Action))
  if TargetGroupARNs != nil:
    query_595345.add "TargetGroupARNs", TargetGroupARNs
  add(query_595345, "Version", newJString(Version))
  result = call_595344.call(nil, query_595345, nil, nil, nil)

var getDetachLoadBalancerTargetGroups* = Call_GetDetachLoadBalancerTargetGroups_595329(
    name: "getDetachLoadBalancerTargetGroups", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DetachLoadBalancerTargetGroups",
    validator: validate_GetDetachLoadBalancerTargetGroups_595330, base: "/",
    url: url_GetDetachLoadBalancerTargetGroups_595331,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDetachLoadBalancers_595381 = ref object of OpenApiRestCall_593437
proc url_PostDetachLoadBalancers_595383(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDetachLoadBalancers_595382(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Detaches one or more Classic Load Balancers from the specified Auto Scaling group.</p> <p>This operation detaches only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DetachLoadBalancerTargetGroups</a> instead.</p> <p>When you detach a load balancer, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using <a>DescribeLoadBalancers</a>. The instances remain running.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595384 = query.getOrDefault("Action")
  valid_595384 = validateParameter(valid_595384, JString, required = true,
                                 default = newJString("DetachLoadBalancers"))
  if valid_595384 != nil:
    section.add "Action", valid_595384
  var valid_595385 = query.getOrDefault("Version")
  valid_595385 = validateParameter(valid_595385, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_595385 != nil:
    section.add "Version", valid_595385
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595386 = header.getOrDefault("X-Amz-Date")
  valid_595386 = validateParameter(valid_595386, JString, required = false,
                                 default = nil)
  if valid_595386 != nil:
    section.add "X-Amz-Date", valid_595386
  var valid_595387 = header.getOrDefault("X-Amz-Security-Token")
  valid_595387 = validateParameter(valid_595387, JString, required = false,
                                 default = nil)
  if valid_595387 != nil:
    section.add "X-Amz-Security-Token", valid_595387
  var valid_595388 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595388 = validateParameter(valid_595388, JString, required = false,
                                 default = nil)
  if valid_595388 != nil:
    section.add "X-Amz-Content-Sha256", valid_595388
  var valid_595389 = header.getOrDefault("X-Amz-Algorithm")
  valid_595389 = validateParameter(valid_595389, JString, required = false,
                                 default = nil)
  if valid_595389 != nil:
    section.add "X-Amz-Algorithm", valid_595389
  var valid_595390 = header.getOrDefault("X-Amz-Signature")
  valid_595390 = validateParameter(valid_595390, JString, required = false,
                                 default = nil)
  if valid_595390 != nil:
    section.add "X-Amz-Signature", valid_595390
  var valid_595391 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595391 = validateParameter(valid_595391, JString, required = false,
                                 default = nil)
  if valid_595391 != nil:
    section.add "X-Amz-SignedHeaders", valid_595391
  var valid_595392 = header.getOrDefault("X-Amz-Credential")
  valid_595392 = validateParameter(valid_595392, JString, required = false,
                                 default = nil)
  if valid_595392 != nil:
    section.add "X-Amz-Credential", valid_595392
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_595393 = formData.getOrDefault("AutoScalingGroupName")
  valid_595393 = validateParameter(valid_595393, JString, required = true,
                                 default = nil)
  if valid_595393 != nil:
    section.add "AutoScalingGroupName", valid_595393
  var valid_595394 = formData.getOrDefault("LoadBalancerNames")
  valid_595394 = validateParameter(valid_595394, JArray, required = true, default = nil)
  if valid_595394 != nil:
    section.add "LoadBalancerNames", valid_595394
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595395: Call_PostDetachLoadBalancers_595381; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Detaches one or more Classic Load Balancers from the specified Auto Scaling group.</p> <p>This operation detaches only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DetachLoadBalancerTargetGroups</a> instead.</p> <p>When you detach a load balancer, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using <a>DescribeLoadBalancers</a>. The instances remain running.</p>
  ## 
  let valid = call_595395.validator(path, query, header, formData, body)
  let scheme = call_595395.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595395.url(scheme.get, call_595395.host, call_595395.base,
                         call_595395.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595395, url, valid)

proc call*(call_595396: Call_PostDetachLoadBalancers_595381;
          AutoScalingGroupName: string; LoadBalancerNames: JsonNode;
          Action: string = "DetachLoadBalancers"; Version: string = "2011-01-01"): Recallable =
  ## postDetachLoadBalancers
  ## <p>Detaches one or more Classic Load Balancers from the specified Auto Scaling group.</p> <p>This operation detaches only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DetachLoadBalancerTargetGroups</a> instead.</p> <p>When you detach a load balancer, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using <a>DescribeLoadBalancers</a>. The instances remain running.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  ##   Version: string (required)
  var query_595397 = newJObject()
  var formData_595398 = newJObject()
  add(formData_595398, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_595397, "Action", newJString(Action))
  if LoadBalancerNames != nil:
    formData_595398.add "LoadBalancerNames", LoadBalancerNames
  add(query_595397, "Version", newJString(Version))
  result = call_595396.call(nil, query_595397, nil, formData_595398, nil)

var postDetachLoadBalancers* = Call_PostDetachLoadBalancers_595381(
    name: "postDetachLoadBalancers", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DetachLoadBalancers",
    validator: validate_PostDetachLoadBalancers_595382, base: "/",
    url: url_PostDetachLoadBalancers_595383, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDetachLoadBalancers_595364 = ref object of OpenApiRestCall_593437
proc url_GetDetachLoadBalancers_595366(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDetachLoadBalancers_595365(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Detaches one or more Classic Load Balancers from the specified Auto Scaling group.</p> <p>This operation detaches only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DetachLoadBalancerTargetGroups</a> instead.</p> <p>When you detach a load balancer, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using <a>DescribeLoadBalancers</a>. The instances remain running.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_595367 = query.getOrDefault("AutoScalingGroupName")
  valid_595367 = validateParameter(valid_595367, JString, required = true,
                                 default = nil)
  if valid_595367 != nil:
    section.add "AutoScalingGroupName", valid_595367
  var valid_595368 = query.getOrDefault("Action")
  valid_595368 = validateParameter(valid_595368, JString, required = true,
                                 default = newJString("DetachLoadBalancers"))
  if valid_595368 != nil:
    section.add "Action", valid_595368
  var valid_595369 = query.getOrDefault("LoadBalancerNames")
  valid_595369 = validateParameter(valid_595369, JArray, required = true, default = nil)
  if valid_595369 != nil:
    section.add "LoadBalancerNames", valid_595369
  var valid_595370 = query.getOrDefault("Version")
  valid_595370 = validateParameter(valid_595370, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_595370 != nil:
    section.add "Version", valid_595370
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595371 = header.getOrDefault("X-Amz-Date")
  valid_595371 = validateParameter(valid_595371, JString, required = false,
                                 default = nil)
  if valid_595371 != nil:
    section.add "X-Amz-Date", valid_595371
  var valid_595372 = header.getOrDefault("X-Amz-Security-Token")
  valid_595372 = validateParameter(valid_595372, JString, required = false,
                                 default = nil)
  if valid_595372 != nil:
    section.add "X-Amz-Security-Token", valid_595372
  var valid_595373 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595373 = validateParameter(valid_595373, JString, required = false,
                                 default = nil)
  if valid_595373 != nil:
    section.add "X-Amz-Content-Sha256", valid_595373
  var valid_595374 = header.getOrDefault("X-Amz-Algorithm")
  valid_595374 = validateParameter(valid_595374, JString, required = false,
                                 default = nil)
  if valid_595374 != nil:
    section.add "X-Amz-Algorithm", valid_595374
  var valid_595375 = header.getOrDefault("X-Amz-Signature")
  valid_595375 = validateParameter(valid_595375, JString, required = false,
                                 default = nil)
  if valid_595375 != nil:
    section.add "X-Amz-Signature", valid_595375
  var valid_595376 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595376 = validateParameter(valid_595376, JString, required = false,
                                 default = nil)
  if valid_595376 != nil:
    section.add "X-Amz-SignedHeaders", valid_595376
  var valid_595377 = header.getOrDefault("X-Amz-Credential")
  valid_595377 = validateParameter(valid_595377, JString, required = false,
                                 default = nil)
  if valid_595377 != nil:
    section.add "X-Amz-Credential", valid_595377
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595378: Call_GetDetachLoadBalancers_595364; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Detaches one or more Classic Load Balancers from the specified Auto Scaling group.</p> <p>This operation detaches only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DetachLoadBalancerTargetGroups</a> instead.</p> <p>When you detach a load balancer, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using <a>DescribeLoadBalancers</a>. The instances remain running.</p>
  ## 
  let valid = call_595378.validator(path, query, header, formData, body)
  let scheme = call_595378.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595378.url(scheme.get, call_595378.host, call_595378.base,
                         call_595378.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595378, url, valid)

proc call*(call_595379: Call_GetDetachLoadBalancers_595364;
          AutoScalingGroupName: string; LoadBalancerNames: JsonNode;
          Action: string = "DetachLoadBalancers"; Version: string = "2011-01-01"): Recallable =
  ## getDetachLoadBalancers
  ## <p>Detaches one or more Classic Load Balancers from the specified Auto Scaling group.</p> <p>This operation detaches only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DetachLoadBalancerTargetGroups</a> instead.</p> <p>When you detach a load balancer, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using <a>DescribeLoadBalancers</a>. The instances remain running.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  ##   Version: string (required)
  var query_595380 = newJObject()
  add(query_595380, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_595380, "Action", newJString(Action))
  if LoadBalancerNames != nil:
    query_595380.add "LoadBalancerNames", LoadBalancerNames
  add(query_595380, "Version", newJString(Version))
  result = call_595379.call(nil, query_595380, nil, nil, nil)

var getDetachLoadBalancers* = Call_GetDetachLoadBalancers_595364(
    name: "getDetachLoadBalancers", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DetachLoadBalancers",
    validator: validate_GetDetachLoadBalancers_595365, base: "/",
    url: url_GetDetachLoadBalancers_595366, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDisableMetricsCollection_595416 = ref object of OpenApiRestCall_593437
proc url_PostDisableMetricsCollection_595418(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDisableMetricsCollection_595417(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disables group metrics for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595419 = query.getOrDefault("Action")
  valid_595419 = validateParameter(valid_595419, JString, required = true, default = newJString(
      "DisableMetricsCollection"))
  if valid_595419 != nil:
    section.add "Action", valid_595419
  var valid_595420 = query.getOrDefault("Version")
  valid_595420 = validateParameter(valid_595420, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_595420 != nil:
    section.add "Version", valid_595420
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595421 = header.getOrDefault("X-Amz-Date")
  valid_595421 = validateParameter(valid_595421, JString, required = false,
                                 default = nil)
  if valid_595421 != nil:
    section.add "X-Amz-Date", valid_595421
  var valid_595422 = header.getOrDefault("X-Amz-Security-Token")
  valid_595422 = validateParameter(valid_595422, JString, required = false,
                                 default = nil)
  if valid_595422 != nil:
    section.add "X-Amz-Security-Token", valid_595422
  var valid_595423 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595423 = validateParameter(valid_595423, JString, required = false,
                                 default = nil)
  if valid_595423 != nil:
    section.add "X-Amz-Content-Sha256", valid_595423
  var valid_595424 = header.getOrDefault("X-Amz-Algorithm")
  valid_595424 = validateParameter(valid_595424, JString, required = false,
                                 default = nil)
  if valid_595424 != nil:
    section.add "X-Amz-Algorithm", valid_595424
  var valid_595425 = header.getOrDefault("X-Amz-Signature")
  valid_595425 = validateParameter(valid_595425, JString, required = false,
                                 default = nil)
  if valid_595425 != nil:
    section.add "X-Amz-Signature", valid_595425
  var valid_595426 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595426 = validateParameter(valid_595426, JString, required = false,
                                 default = nil)
  if valid_595426 != nil:
    section.add "X-Amz-SignedHeaders", valid_595426
  var valid_595427 = header.getOrDefault("X-Amz-Credential")
  valid_595427 = validateParameter(valid_595427, JString, required = false,
                                 default = nil)
  if valid_595427 != nil:
    section.add "X-Amz-Credential", valid_595427
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are disabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_595428 = formData.getOrDefault("AutoScalingGroupName")
  valid_595428 = validateParameter(valid_595428, JString, required = true,
                                 default = nil)
  if valid_595428 != nil:
    section.add "AutoScalingGroupName", valid_595428
  var valid_595429 = formData.getOrDefault("Metrics")
  valid_595429 = validateParameter(valid_595429, JArray, required = false,
                                 default = nil)
  if valid_595429 != nil:
    section.add "Metrics", valid_595429
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595430: Call_PostDisableMetricsCollection_595416; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disables group metrics for the specified Auto Scaling group.
  ## 
  let valid = call_595430.validator(path, query, header, formData, body)
  let scheme = call_595430.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595430.url(scheme.get, call_595430.host, call_595430.base,
                         call_595430.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595430, url, valid)

proc call*(call_595431: Call_PostDisableMetricsCollection_595416;
          AutoScalingGroupName: string; Metrics: JsonNode = nil;
          Action: string = "DisableMetricsCollection";
          Version: string = "2011-01-01"): Recallable =
  ## postDisableMetricsCollection
  ## Disables group metrics for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are disabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595432 = newJObject()
  var formData_595433 = newJObject()
  add(formData_595433, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if Metrics != nil:
    formData_595433.add "Metrics", Metrics
  add(query_595432, "Action", newJString(Action))
  add(query_595432, "Version", newJString(Version))
  result = call_595431.call(nil, query_595432, nil, formData_595433, nil)

var postDisableMetricsCollection* = Call_PostDisableMetricsCollection_595416(
    name: "postDisableMetricsCollection", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DisableMetricsCollection",
    validator: validate_PostDisableMetricsCollection_595417, base: "/",
    url: url_PostDisableMetricsCollection_595418,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDisableMetricsCollection_595399 = ref object of OpenApiRestCall_593437
proc url_GetDisableMetricsCollection_595401(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDisableMetricsCollection_595400(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disables group metrics for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are disabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_595402 = query.getOrDefault("AutoScalingGroupName")
  valid_595402 = validateParameter(valid_595402, JString, required = true,
                                 default = nil)
  if valid_595402 != nil:
    section.add "AutoScalingGroupName", valid_595402
  var valid_595403 = query.getOrDefault("Action")
  valid_595403 = validateParameter(valid_595403, JString, required = true, default = newJString(
      "DisableMetricsCollection"))
  if valid_595403 != nil:
    section.add "Action", valid_595403
  var valid_595404 = query.getOrDefault("Metrics")
  valid_595404 = validateParameter(valid_595404, JArray, required = false,
                                 default = nil)
  if valid_595404 != nil:
    section.add "Metrics", valid_595404
  var valid_595405 = query.getOrDefault("Version")
  valid_595405 = validateParameter(valid_595405, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_595405 != nil:
    section.add "Version", valid_595405
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595406 = header.getOrDefault("X-Amz-Date")
  valid_595406 = validateParameter(valid_595406, JString, required = false,
                                 default = nil)
  if valid_595406 != nil:
    section.add "X-Amz-Date", valid_595406
  var valid_595407 = header.getOrDefault("X-Amz-Security-Token")
  valid_595407 = validateParameter(valid_595407, JString, required = false,
                                 default = nil)
  if valid_595407 != nil:
    section.add "X-Amz-Security-Token", valid_595407
  var valid_595408 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595408 = validateParameter(valid_595408, JString, required = false,
                                 default = nil)
  if valid_595408 != nil:
    section.add "X-Amz-Content-Sha256", valid_595408
  var valid_595409 = header.getOrDefault("X-Amz-Algorithm")
  valid_595409 = validateParameter(valid_595409, JString, required = false,
                                 default = nil)
  if valid_595409 != nil:
    section.add "X-Amz-Algorithm", valid_595409
  var valid_595410 = header.getOrDefault("X-Amz-Signature")
  valid_595410 = validateParameter(valid_595410, JString, required = false,
                                 default = nil)
  if valid_595410 != nil:
    section.add "X-Amz-Signature", valid_595410
  var valid_595411 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595411 = validateParameter(valid_595411, JString, required = false,
                                 default = nil)
  if valid_595411 != nil:
    section.add "X-Amz-SignedHeaders", valid_595411
  var valid_595412 = header.getOrDefault("X-Amz-Credential")
  valid_595412 = validateParameter(valid_595412, JString, required = false,
                                 default = nil)
  if valid_595412 != nil:
    section.add "X-Amz-Credential", valid_595412
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595413: Call_GetDisableMetricsCollection_595399; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disables group metrics for the specified Auto Scaling group.
  ## 
  let valid = call_595413.validator(path, query, header, formData, body)
  let scheme = call_595413.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595413.url(scheme.get, call_595413.host, call_595413.base,
                         call_595413.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595413, url, valid)

proc call*(call_595414: Call_GetDisableMetricsCollection_595399;
          AutoScalingGroupName: string;
          Action: string = "DisableMetricsCollection"; Metrics: JsonNode = nil;
          Version: string = "2011-01-01"): Recallable =
  ## getDisableMetricsCollection
  ## Disables group metrics for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are disabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  ##   Version: string (required)
  var query_595415 = newJObject()
  add(query_595415, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_595415, "Action", newJString(Action))
  if Metrics != nil:
    query_595415.add "Metrics", Metrics
  add(query_595415, "Version", newJString(Version))
  result = call_595414.call(nil, query_595415, nil, nil, nil)

var getDisableMetricsCollection* = Call_GetDisableMetricsCollection_595399(
    name: "getDisableMetricsCollection", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DisableMetricsCollection",
    validator: validate_GetDisableMetricsCollection_595400, base: "/",
    url: url_GetDisableMetricsCollection_595401,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostEnableMetricsCollection_595452 = ref object of OpenApiRestCall_593437
proc url_PostEnableMetricsCollection_595454(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostEnableMetricsCollection_595453(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Enables group metrics for the specified Auto Scaling group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html">Monitoring Your Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595455 = query.getOrDefault("Action")
  valid_595455 = validateParameter(valid_595455, JString, required = true, default = newJString(
      "EnableMetricsCollection"))
  if valid_595455 != nil:
    section.add "Action", valid_595455
  var valid_595456 = query.getOrDefault("Version")
  valid_595456 = validateParameter(valid_595456, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_595456 != nil:
    section.add "Version", valid_595456
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595457 = header.getOrDefault("X-Amz-Date")
  valid_595457 = validateParameter(valid_595457, JString, required = false,
                                 default = nil)
  if valid_595457 != nil:
    section.add "X-Amz-Date", valid_595457
  var valid_595458 = header.getOrDefault("X-Amz-Security-Token")
  valid_595458 = validateParameter(valid_595458, JString, required = false,
                                 default = nil)
  if valid_595458 != nil:
    section.add "X-Amz-Security-Token", valid_595458
  var valid_595459 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595459 = validateParameter(valid_595459, JString, required = false,
                                 default = nil)
  if valid_595459 != nil:
    section.add "X-Amz-Content-Sha256", valid_595459
  var valid_595460 = header.getOrDefault("X-Amz-Algorithm")
  valid_595460 = validateParameter(valid_595460, JString, required = false,
                                 default = nil)
  if valid_595460 != nil:
    section.add "X-Amz-Algorithm", valid_595460
  var valid_595461 = header.getOrDefault("X-Amz-Signature")
  valid_595461 = validateParameter(valid_595461, JString, required = false,
                                 default = nil)
  if valid_595461 != nil:
    section.add "X-Amz-Signature", valid_595461
  var valid_595462 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595462 = validateParameter(valid_595462, JString, required = false,
                                 default = nil)
  if valid_595462 != nil:
    section.add "X-Amz-SignedHeaders", valid_595462
  var valid_595463 = header.getOrDefault("X-Amz-Credential")
  valid_595463 = validateParameter(valid_595463, JString, required = false,
                                 default = nil)
  if valid_595463 != nil:
    section.add "X-Amz-Credential", valid_595463
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are enabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  ##   Granularity: JString (required)
  ##              : The granularity to associate with the metrics to collect. The only valid value is <code>1Minute</code>.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_595464 = formData.getOrDefault("AutoScalingGroupName")
  valid_595464 = validateParameter(valid_595464, JString, required = true,
                                 default = nil)
  if valid_595464 != nil:
    section.add "AutoScalingGroupName", valid_595464
  var valid_595465 = formData.getOrDefault("Metrics")
  valid_595465 = validateParameter(valid_595465, JArray, required = false,
                                 default = nil)
  if valid_595465 != nil:
    section.add "Metrics", valid_595465
  var valid_595466 = formData.getOrDefault("Granularity")
  valid_595466 = validateParameter(valid_595466, JString, required = true,
                                 default = nil)
  if valid_595466 != nil:
    section.add "Granularity", valid_595466
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595467: Call_PostEnableMetricsCollection_595452; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Enables group metrics for the specified Auto Scaling group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html">Monitoring Your Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ## 
  let valid = call_595467.validator(path, query, header, formData, body)
  let scheme = call_595467.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595467.url(scheme.get, call_595467.host, call_595467.base,
                         call_595467.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595467, url, valid)

proc call*(call_595468: Call_PostEnableMetricsCollection_595452;
          AutoScalingGroupName: string; Granularity: string;
          Metrics: JsonNode = nil; Action: string = "EnableMetricsCollection";
          Version: string = "2011-01-01"): Recallable =
  ## postEnableMetricsCollection
  ## Enables group metrics for the specified Auto Scaling group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html">Monitoring Your Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are enabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  ##   Granularity: string (required)
  ##              : The granularity to associate with the metrics to collect. The only valid value is <code>1Minute</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595469 = newJObject()
  var formData_595470 = newJObject()
  add(formData_595470, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if Metrics != nil:
    formData_595470.add "Metrics", Metrics
  add(formData_595470, "Granularity", newJString(Granularity))
  add(query_595469, "Action", newJString(Action))
  add(query_595469, "Version", newJString(Version))
  result = call_595468.call(nil, query_595469, nil, formData_595470, nil)

var postEnableMetricsCollection* = Call_PostEnableMetricsCollection_595452(
    name: "postEnableMetricsCollection", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=EnableMetricsCollection",
    validator: validate_PostEnableMetricsCollection_595453, base: "/",
    url: url_PostEnableMetricsCollection_595454,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetEnableMetricsCollection_595434 = ref object of OpenApiRestCall_593437
proc url_GetEnableMetricsCollection_595436(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetEnableMetricsCollection_595435(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Enables group metrics for the specified Auto Scaling group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html">Monitoring Your Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Granularity: JString (required)
  ##              : The granularity to associate with the metrics to collect. The only valid value is <code>1Minute</code>.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are enabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Granularity` field"
  var valid_595437 = query.getOrDefault("Granularity")
  valid_595437 = validateParameter(valid_595437, JString, required = true,
                                 default = nil)
  if valid_595437 != nil:
    section.add "Granularity", valid_595437
  var valid_595438 = query.getOrDefault("AutoScalingGroupName")
  valid_595438 = validateParameter(valid_595438, JString, required = true,
                                 default = nil)
  if valid_595438 != nil:
    section.add "AutoScalingGroupName", valid_595438
  var valid_595439 = query.getOrDefault("Action")
  valid_595439 = validateParameter(valid_595439, JString, required = true, default = newJString(
      "EnableMetricsCollection"))
  if valid_595439 != nil:
    section.add "Action", valid_595439
  var valid_595440 = query.getOrDefault("Metrics")
  valid_595440 = validateParameter(valid_595440, JArray, required = false,
                                 default = nil)
  if valid_595440 != nil:
    section.add "Metrics", valid_595440
  var valid_595441 = query.getOrDefault("Version")
  valid_595441 = validateParameter(valid_595441, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_595441 != nil:
    section.add "Version", valid_595441
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595442 = header.getOrDefault("X-Amz-Date")
  valid_595442 = validateParameter(valid_595442, JString, required = false,
                                 default = nil)
  if valid_595442 != nil:
    section.add "X-Amz-Date", valid_595442
  var valid_595443 = header.getOrDefault("X-Amz-Security-Token")
  valid_595443 = validateParameter(valid_595443, JString, required = false,
                                 default = nil)
  if valid_595443 != nil:
    section.add "X-Amz-Security-Token", valid_595443
  var valid_595444 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595444 = validateParameter(valid_595444, JString, required = false,
                                 default = nil)
  if valid_595444 != nil:
    section.add "X-Amz-Content-Sha256", valid_595444
  var valid_595445 = header.getOrDefault("X-Amz-Algorithm")
  valid_595445 = validateParameter(valid_595445, JString, required = false,
                                 default = nil)
  if valid_595445 != nil:
    section.add "X-Amz-Algorithm", valid_595445
  var valid_595446 = header.getOrDefault("X-Amz-Signature")
  valid_595446 = validateParameter(valid_595446, JString, required = false,
                                 default = nil)
  if valid_595446 != nil:
    section.add "X-Amz-Signature", valid_595446
  var valid_595447 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595447 = validateParameter(valid_595447, JString, required = false,
                                 default = nil)
  if valid_595447 != nil:
    section.add "X-Amz-SignedHeaders", valid_595447
  var valid_595448 = header.getOrDefault("X-Amz-Credential")
  valid_595448 = validateParameter(valid_595448, JString, required = false,
                                 default = nil)
  if valid_595448 != nil:
    section.add "X-Amz-Credential", valid_595448
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595449: Call_GetEnableMetricsCollection_595434; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Enables group metrics for the specified Auto Scaling group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html">Monitoring Your Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ## 
  let valid = call_595449.validator(path, query, header, formData, body)
  let scheme = call_595449.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595449.url(scheme.get, call_595449.host, call_595449.base,
                         call_595449.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595449, url, valid)

proc call*(call_595450: Call_GetEnableMetricsCollection_595434;
          Granularity: string; AutoScalingGroupName: string;
          Action: string = "EnableMetricsCollection"; Metrics: JsonNode = nil;
          Version: string = "2011-01-01"): Recallable =
  ## getEnableMetricsCollection
  ## Enables group metrics for the specified Auto Scaling group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html">Monitoring Your Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   Granularity: string (required)
  ##              : The granularity to associate with the metrics to collect. The only valid value is <code>1Minute</code>.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are enabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  ##   Version: string (required)
  var query_595451 = newJObject()
  add(query_595451, "Granularity", newJString(Granularity))
  add(query_595451, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_595451, "Action", newJString(Action))
  if Metrics != nil:
    query_595451.add "Metrics", Metrics
  add(query_595451, "Version", newJString(Version))
  result = call_595450.call(nil, query_595451, nil, nil, nil)

var getEnableMetricsCollection* = Call_GetEnableMetricsCollection_595434(
    name: "getEnableMetricsCollection", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=EnableMetricsCollection",
    validator: validate_GetEnableMetricsCollection_595435, base: "/",
    url: url_GetEnableMetricsCollection_595436,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostEnterStandby_595489 = ref object of OpenApiRestCall_593437
proc url_PostEnterStandby_595491(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostEnterStandby_595490(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Moves the specified instances into the standby state.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595492 = query.getOrDefault("Action")
  valid_595492 = validateParameter(valid_595492, JString, required = true,
                                 default = newJString("EnterStandby"))
  if valid_595492 != nil:
    section.add "Action", valid_595492
  var valid_595493 = query.getOrDefault("Version")
  valid_595493 = validateParameter(valid_595493, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_595493 != nil:
    section.add "Version", valid_595493
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595494 = header.getOrDefault("X-Amz-Date")
  valid_595494 = validateParameter(valid_595494, JString, required = false,
                                 default = nil)
  if valid_595494 != nil:
    section.add "X-Amz-Date", valid_595494
  var valid_595495 = header.getOrDefault("X-Amz-Security-Token")
  valid_595495 = validateParameter(valid_595495, JString, required = false,
                                 default = nil)
  if valid_595495 != nil:
    section.add "X-Amz-Security-Token", valid_595495
  var valid_595496 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595496 = validateParameter(valid_595496, JString, required = false,
                                 default = nil)
  if valid_595496 != nil:
    section.add "X-Amz-Content-Sha256", valid_595496
  var valid_595497 = header.getOrDefault("X-Amz-Algorithm")
  valid_595497 = validateParameter(valid_595497, JString, required = false,
                                 default = nil)
  if valid_595497 != nil:
    section.add "X-Amz-Algorithm", valid_595497
  var valid_595498 = header.getOrDefault("X-Amz-Signature")
  valid_595498 = validateParameter(valid_595498, JString, required = false,
                                 default = nil)
  if valid_595498 != nil:
    section.add "X-Amz-Signature", valid_595498
  var valid_595499 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595499 = validateParameter(valid_595499, JString, required = false,
                                 default = nil)
  if valid_595499 != nil:
    section.add "X-Amz-SignedHeaders", valid_595499
  var valid_595500 = header.getOrDefault("X-Amz-Credential")
  valid_595500 = validateParameter(valid_595500, JString, required = false,
                                 default = nil)
  if valid_595500 != nil:
    section.add "X-Amz-Credential", valid_595500
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   ShouldDecrementDesiredCapacity: JBool (required)
  ##                                 : Indicates whether to decrement the desired capacity of the Auto Scaling group by the number of instances moved to <code>Standby</code> mode.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_595501 = formData.getOrDefault("AutoScalingGroupName")
  valid_595501 = validateParameter(valid_595501, JString, required = true,
                                 default = nil)
  if valid_595501 != nil:
    section.add "AutoScalingGroupName", valid_595501
  var valid_595502 = formData.getOrDefault("InstanceIds")
  valid_595502 = validateParameter(valid_595502, JArray, required = false,
                                 default = nil)
  if valid_595502 != nil:
    section.add "InstanceIds", valid_595502
  var valid_595503 = formData.getOrDefault("ShouldDecrementDesiredCapacity")
  valid_595503 = validateParameter(valid_595503, JBool, required = true, default = nil)
  if valid_595503 != nil:
    section.add "ShouldDecrementDesiredCapacity", valid_595503
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595504: Call_PostEnterStandby_595489; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Moves the specified instances into the standby state.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_595504.validator(path, query, header, formData, body)
  let scheme = call_595504.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595504.url(scheme.get, call_595504.host, call_595504.base,
                         call_595504.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595504, url, valid)

proc call*(call_595505: Call_PostEnterStandby_595489; AutoScalingGroupName: string;
          ShouldDecrementDesiredCapacity: bool; InstanceIds: JsonNode = nil;
          Action: string = "EnterStandby"; Version: string = "2011-01-01"): Recallable =
  ## postEnterStandby
  ## <p>Moves the specified instances into the standby state.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   ShouldDecrementDesiredCapacity: bool (required)
  ##                                 : Indicates whether to decrement the desired capacity of the Auto Scaling group by the number of instances moved to <code>Standby</code> mode.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595506 = newJObject()
  var formData_595507 = newJObject()
  add(formData_595507, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if InstanceIds != nil:
    formData_595507.add "InstanceIds", InstanceIds
  add(formData_595507, "ShouldDecrementDesiredCapacity",
      newJBool(ShouldDecrementDesiredCapacity))
  add(query_595506, "Action", newJString(Action))
  add(query_595506, "Version", newJString(Version))
  result = call_595505.call(nil, query_595506, nil, formData_595507, nil)

var postEnterStandby* = Call_PostEnterStandby_595489(name: "postEnterStandby",
    meth: HttpMethod.HttpPost, host: "autoscaling.amazonaws.com",
    route: "/#Action=EnterStandby", validator: validate_PostEnterStandby_595490,
    base: "/", url: url_PostEnterStandby_595491,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetEnterStandby_595471 = ref object of OpenApiRestCall_593437
proc url_GetEnterStandby_595473(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetEnterStandby_595472(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Moves the specified instances into the standby state.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   ShouldDecrementDesiredCapacity: JBool (required)
  ##                                 : Indicates whether to decrement the desired capacity of the Auto Scaling group by the number of instances moved to <code>Standby</code> mode.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_595474 = query.getOrDefault("AutoScalingGroupName")
  valid_595474 = validateParameter(valid_595474, JString, required = true,
                                 default = nil)
  if valid_595474 != nil:
    section.add "AutoScalingGroupName", valid_595474
  var valid_595475 = query.getOrDefault("Action")
  valid_595475 = validateParameter(valid_595475, JString, required = true,
                                 default = newJString("EnterStandby"))
  if valid_595475 != nil:
    section.add "Action", valid_595475
  var valid_595476 = query.getOrDefault("ShouldDecrementDesiredCapacity")
  valid_595476 = validateParameter(valid_595476, JBool, required = true, default = nil)
  if valid_595476 != nil:
    section.add "ShouldDecrementDesiredCapacity", valid_595476
  var valid_595477 = query.getOrDefault("InstanceIds")
  valid_595477 = validateParameter(valid_595477, JArray, required = false,
                                 default = nil)
  if valid_595477 != nil:
    section.add "InstanceIds", valid_595477
  var valid_595478 = query.getOrDefault("Version")
  valid_595478 = validateParameter(valid_595478, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_595478 != nil:
    section.add "Version", valid_595478
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595479 = header.getOrDefault("X-Amz-Date")
  valid_595479 = validateParameter(valid_595479, JString, required = false,
                                 default = nil)
  if valid_595479 != nil:
    section.add "X-Amz-Date", valid_595479
  var valid_595480 = header.getOrDefault("X-Amz-Security-Token")
  valid_595480 = validateParameter(valid_595480, JString, required = false,
                                 default = nil)
  if valid_595480 != nil:
    section.add "X-Amz-Security-Token", valid_595480
  var valid_595481 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595481 = validateParameter(valid_595481, JString, required = false,
                                 default = nil)
  if valid_595481 != nil:
    section.add "X-Amz-Content-Sha256", valid_595481
  var valid_595482 = header.getOrDefault("X-Amz-Algorithm")
  valid_595482 = validateParameter(valid_595482, JString, required = false,
                                 default = nil)
  if valid_595482 != nil:
    section.add "X-Amz-Algorithm", valid_595482
  var valid_595483 = header.getOrDefault("X-Amz-Signature")
  valid_595483 = validateParameter(valid_595483, JString, required = false,
                                 default = nil)
  if valid_595483 != nil:
    section.add "X-Amz-Signature", valid_595483
  var valid_595484 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595484 = validateParameter(valid_595484, JString, required = false,
                                 default = nil)
  if valid_595484 != nil:
    section.add "X-Amz-SignedHeaders", valid_595484
  var valid_595485 = header.getOrDefault("X-Amz-Credential")
  valid_595485 = validateParameter(valid_595485, JString, required = false,
                                 default = nil)
  if valid_595485 != nil:
    section.add "X-Amz-Credential", valid_595485
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595486: Call_GetEnterStandby_595471; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Moves the specified instances into the standby state.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_595486.validator(path, query, header, formData, body)
  let scheme = call_595486.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595486.url(scheme.get, call_595486.host, call_595486.base,
                         call_595486.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595486, url, valid)

proc call*(call_595487: Call_GetEnterStandby_595471; AutoScalingGroupName: string;
          ShouldDecrementDesiredCapacity: bool; Action: string = "EnterStandby";
          InstanceIds: JsonNode = nil; Version: string = "2011-01-01"): Recallable =
  ## getEnterStandby
  ## <p>Moves the specified instances into the standby state.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   ShouldDecrementDesiredCapacity: bool (required)
  ##                                 : Indicates whether to decrement the desired capacity of the Auto Scaling group by the number of instances moved to <code>Standby</code> mode.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Version: string (required)
  var query_595488 = newJObject()
  add(query_595488, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_595488, "Action", newJString(Action))
  add(query_595488, "ShouldDecrementDesiredCapacity",
      newJBool(ShouldDecrementDesiredCapacity))
  if InstanceIds != nil:
    query_595488.add "InstanceIds", InstanceIds
  add(query_595488, "Version", newJString(Version))
  result = call_595487.call(nil, query_595488, nil, nil, nil)

var getEnterStandby* = Call_GetEnterStandby_595471(name: "getEnterStandby",
    meth: HttpMethod.HttpGet, host: "autoscaling.amazonaws.com",
    route: "/#Action=EnterStandby", validator: validate_GetEnterStandby_595472,
    base: "/", url: url_GetEnterStandby_595473, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostExecutePolicy_595528 = ref object of OpenApiRestCall_593437
proc url_PostExecutePolicy_595530(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostExecutePolicy_595529(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Executes the specified policy.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595531 = query.getOrDefault("Action")
  valid_595531 = validateParameter(valid_595531, JString, required = true,
                                 default = newJString("ExecutePolicy"))
  if valid_595531 != nil:
    section.add "Action", valid_595531
  var valid_595532 = query.getOrDefault("Version")
  valid_595532 = validateParameter(valid_595532, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_595532 != nil:
    section.add "Version", valid_595532
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595533 = header.getOrDefault("X-Amz-Date")
  valid_595533 = validateParameter(valid_595533, JString, required = false,
                                 default = nil)
  if valid_595533 != nil:
    section.add "X-Amz-Date", valid_595533
  var valid_595534 = header.getOrDefault("X-Amz-Security-Token")
  valid_595534 = validateParameter(valid_595534, JString, required = false,
                                 default = nil)
  if valid_595534 != nil:
    section.add "X-Amz-Security-Token", valid_595534
  var valid_595535 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595535 = validateParameter(valid_595535, JString, required = false,
                                 default = nil)
  if valid_595535 != nil:
    section.add "X-Amz-Content-Sha256", valid_595535
  var valid_595536 = header.getOrDefault("X-Amz-Algorithm")
  valid_595536 = validateParameter(valid_595536, JString, required = false,
                                 default = nil)
  if valid_595536 != nil:
    section.add "X-Amz-Algorithm", valid_595536
  var valid_595537 = header.getOrDefault("X-Amz-Signature")
  valid_595537 = validateParameter(valid_595537, JString, required = false,
                                 default = nil)
  if valid_595537 != nil:
    section.add "X-Amz-Signature", valid_595537
  var valid_595538 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595538 = validateParameter(valid_595538, JString, required = false,
                                 default = nil)
  if valid_595538 != nil:
    section.add "X-Amz-SignedHeaders", valid_595538
  var valid_595539 = header.getOrDefault("X-Amz-Credential")
  valid_595539 = validateParameter(valid_595539, JString, required = false,
                                 default = nil)
  if valid_595539 != nil:
    section.add "X-Amz-Credential", valid_595539
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   PolicyName: JString (required)
  ##             : The name or ARN of the policy.
  ##   MetricValue: JFloat
  ##              : <p>The metric value to compare to <code>BreachThreshold</code>. This enables you to execute a policy of type <code>StepScaling</code> and determine which step adjustment to use. For example, if the breach threshold is 50 and you want to use a step adjustment with a lower bound of 0 and an upper bound of 10, you can set the metric value to 59.</p> <p>If you specify a metric value that doesn't correspond to a step adjustment for the policy, the call returns an error.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   HonorCooldown: JBool
  ##                : <p>Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before executing the policy.</p> <p>This parameter is not supported if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   BreachThreshold: JFloat
  ##                  : <p>The breach threshold for the alarm.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  section = newJObject()
  var valid_595540 = formData.getOrDefault("AutoScalingGroupName")
  valid_595540 = validateParameter(valid_595540, JString, required = false,
                                 default = nil)
  if valid_595540 != nil:
    section.add "AutoScalingGroupName", valid_595540
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_595541 = formData.getOrDefault("PolicyName")
  valid_595541 = validateParameter(valid_595541, JString, required = true,
                                 default = nil)
  if valid_595541 != nil:
    section.add "PolicyName", valid_595541
  var valid_595542 = formData.getOrDefault("MetricValue")
  valid_595542 = validateParameter(valid_595542, JFloat, required = false,
                                 default = nil)
  if valid_595542 != nil:
    section.add "MetricValue", valid_595542
  var valid_595543 = formData.getOrDefault("HonorCooldown")
  valid_595543 = validateParameter(valid_595543, JBool, required = false, default = nil)
  if valid_595543 != nil:
    section.add "HonorCooldown", valid_595543
  var valid_595544 = formData.getOrDefault("BreachThreshold")
  valid_595544 = validateParameter(valid_595544, JFloat, required = false,
                                 default = nil)
  if valid_595544 != nil:
    section.add "BreachThreshold", valid_595544
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595545: Call_PostExecutePolicy_595528; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Executes the specified policy.
  ## 
  let valid = call_595545.validator(path, query, header, formData, body)
  let scheme = call_595545.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595545.url(scheme.get, call_595545.host, call_595545.base,
                         call_595545.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595545, url, valid)

proc call*(call_595546: Call_PostExecutePolicy_595528; PolicyName: string;
          AutoScalingGroupName: string = ""; MetricValue: float = 0.0;
          HonorCooldown: bool = false; BreachThreshold: float = 0.0;
          Action: string = "ExecutePolicy"; Version: string = "2011-01-01"): Recallable =
  ## postExecutePolicy
  ## Executes the specified policy.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   PolicyName: string (required)
  ##             : The name or ARN of the policy.
  ##   MetricValue: float
  ##              : <p>The metric value to compare to <code>BreachThreshold</code>. This enables you to execute a policy of type <code>StepScaling</code> and determine which step adjustment to use. For example, if the breach threshold is 50 and you want to use a step adjustment with a lower bound of 0 and an upper bound of 10, you can set the metric value to 59.</p> <p>If you specify a metric value that doesn't correspond to a step adjustment for the policy, the call returns an error.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   HonorCooldown: bool
  ##                : <p>Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before executing the policy.</p> <p>This parameter is not supported if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   BreachThreshold: float
  ##                  : <p>The breach threshold for the alarm.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595547 = newJObject()
  var formData_595548 = newJObject()
  add(formData_595548, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_595548, "PolicyName", newJString(PolicyName))
  add(formData_595548, "MetricValue", newJFloat(MetricValue))
  add(formData_595548, "HonorCooldown", newJBool(HonorCooldown))
  add(formData_595548, "BreachThreshold", newJFloat(BreachThreshold))
  add(query_595547, "Action", newJString(Action))
  add(query_595547, "Version", newJString(Version))
  result = call_595546.call(nil, query_595547, nil, formData_595548, nil)

var postExecutePolicy* = Call_PostExecutePolicy_595528(name: "postExecutePolicy",
    meth: HttpMethod.HttpPost, host: "autoscaling.amazonaws.com",
    route: "/#Action=ExecutePolicy", validator: validate_PostExecutePolicy_595529,
    base: "/", url: url_PostExecutePolicy_595530,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetExecutePolicy_595508 = ref object of OpenApiRestCall_593437
proc url_GetExecutePolicy_595510(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetExecutePolicy_595509(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Executes the specified policy.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   MetricValue: JFloat
  ##              : <p>The metric value to compare to <code>BreachThreshold</code>. This enables you to execute a policy of type <code>StepScaling</code> and determine which step adjustment to use. For example, if the breach threshold is 50 and you want to use a step adjustment with a lower bound of 0 and an upper bound of 10, you can set the metric value to 59.</p> <p>If you specify a metric value that doesn't correspond to a step adjustment for the policy, the call returns an error.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   BreachThreshold: JFloat
  ##                  : <p>The breach threshold for the alarm.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   Action: JString (required)
  ##   HonorCooldown: JBool
  ##                : <p>Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before executing the policy.</p> <p>This parameter is not supported if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : The name or ARN of the policy.
  section = newJObject()
  var valid_595511 = query.getOrDefault("AutoScalingGroupName")
  valid_595511 = validateParameter(valid_595511, JString, required = false,
                                 default = nil)
  if valid_595511 != nil:
    section.add "AutoScalingGroupName", valid_595511
  var valid_595512 = query.getOrDefault("MetricValue")
  valid_595512 = validateParameter(valid_595512, JFloat, required = false,
                                 default = nil)
  if valid_595512 != nil:
    section.add "MetricValue", valid_595512
  var valid_595513 = query.getOrDefault("BreachThreshold")
  valid_595513 = validateParameter(valid_595513, JFloat, required = false,
                                 default = nil)
  if valid_595513 != nil:
    section.add "BreachThreshold", valid_595513
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595514 = query.getOrDefault("Action")
  valid_595514 = validateParameter(valid_595514, JString, required = true,
                                 default = newJString("ExecutePolicy"))
  if valid_595514 != nil:
    section.add "Action", valid_595514
  var valid_595515 = query.getOrDefault("HonorCooldown")
  valid_595515 = validateParameter(valid_595515, JBool, required = false, default = nil)
  if valid_595515 != nil:
    section.add "HonorCooldown", valid_595515
  var valid_595516 = query.getOrDefault("Version")
  valid_595516 = validateParameter(valid_595516, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_595516 != nil:
    section.add "Version", valid_595516
  var valid_595517 = query.getOrDefault("PolicyName")
  valid_595517 = validateParameter(valid_595517, JString, required = true,
                                 default = nil)
  if valid_595517 != nil:
    section.add "PolicyName", valid_595517
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595518 = header.getOrDefault("X-Amz-Date")
  valid_595518 = validateParameter(valid_595518, JString, required = false,
                                 default = nil)
  if valid_595518 != nil:
    section.add "X-Amz-Date", valid_595518
  var valid_595519 = header.getOrDefault("X-Amz-Security-Token")
  valid_595519 = validateParameter(valid_595519, JString, required = false,
                                 default = nil)
  if valid_595519 != nil:
    section.add "X-Amz-Security-Token", valid_595519
  var valid_595520 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595520 = validateParameter(valid_595520, JString, required = false,
                                 default = nil)
  if valid_595520 != nil:
    section.add "X-Amz-Content-Sha256", valid_595520
  var valid_595521 = header.getOrDefault("X-Amz-Algorithm")
  valid_595521 = validateParameter(valid_595521, JString, required = false,
                                 default = nil)
  if valid_595521 != nil:
    section.add "X-Amz-Algorithm", valid_595521
  var valid_595522 = header.getOrDefault("X-Amz-Signature")
  valid_595522 = validateParameter(valid_595522, JString, required = false,
                                 default = nil)
  if valid_595522 != nil:
    section.add "X-Amz-Signature", valid_595522
  var valid_595523 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595523 = validateParameter(valid_595523, JString, required = false,
                                 default = nil)
  if valid_595523 != nil:
    section.add "X-Amz-SignedHeaders", valid_595523
  var valid_595524 = header.getOrDefault("X-Amz-Credential")
  valid_595524 = validateParameter(valid_595524, JString, required = false,
                                 default = nil)
  if valid_595524 != nil:
    section.add "X-Amz-Credential", valid_595524
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595525: Call_GetExecutePolicy_595508; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Executes the specified policy.
  ## 
  let valid = call_595525.validator(path, query, header, formData, body)
  let scheme = call_595525.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595525.url(scheme.get, call_595525.host, call_595525.base,
                         call_595525.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595525, url, valid)

proc call*(call_595526: Call_GetExecutePolicy_595508; PolicyName: string;
          AutoScalingGroupName: string = ""; MetricValue: float = 0.0;
          BreachThreshold: float = 0.0; Action: string = "ExecutePolicy";
          HonorCooldown: bool = false; Version: string = "2011-01-01"): Recallable =
  ## getExecutePolicy
  ## Executes the specified policy.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   MetricValue: float
  ##              : <p>The metric value to compare to <code>BreachThreshold</code>. This enables you to execute a policy of type <code>StepScaling</code> and determine which step adjustment to use. For example, if the breach threshold is 50 and you want to use a step adjustment with a lower bound of 0 and an upper bound of 10, you can set the metric value to 59.</p> <p>If you specify a metric value that doesn't correspond to a step adjustment for the policy, the call returns an error.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   BreachThreshold: float
  ##                  : <p>The breach threshold for the alarm.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   Action: string (required)
  ##   HonorCooldown: bool
  ##                : <p>Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before executing the policy.</p> <p>This parameter is not supported if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : The name or ARN of the policy.
  var query_595527 = newJObject()
  add(query_595527, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_595527, "MetricValue", newJFloat(MetricValue))
  add(query_595527, "BreachThreshold", newJFloat(BreachThreshold))
  add(query_595527, "Action", newJString(Action))
  add(query_595527, "HonorCooldown", newJBool(HonorCooldown))
  add(query_595527, "Version", newJString(Version))
  add(query_595527, "PolicyName", newJString(PolicyName))
  result = call_595526.call(nil, query_595527, nil, nil, nil)

var getExecutePolicy* = Call_GetExecutePolicy_595508(name: "getExecutePolicy",
    meth: HttpMethod.HttpGet, host: "autoscaling.amazonaws.com",
    route: "/#Action=ExecutePolicy", validator: validate_GetExecutePolicy_595509,
    base: "/", url: url_GetExecutePolicy_595510,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostExitStandby_595566 = ref object of OpenApiRestCall_593437
proc url_PostExitStandby_595568(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostExitStandby_595567(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Moves the specified instances out of the standby state.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595569 = query.getOrDefault("Action")
  valid_595569 = validateParameter(valid_595569, JString, required = true,
                                 default = newJString("ExitStandby"))
  if valid_595569 != nil:
    section.add "Action", valid_595569
  var valid_595570 = query.getOrDefault("Version")
  valid_595570 = validateParameter(valid_595570, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_595570 != nil:
    section.add "Version", valid_595570
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595571 = header.getOrDefault("X-Amz-Date")
  valid_595571 = validateParameter(valid_595571, JString, required = false,
                                 default = nil)
  if valid_595571 != nil:
    section.add "X-Amz-Date", valid_595571
  var valid_595572 = header.getOrDefault("X-Amz-Security-Token")
  valid_595572 = validateParameter(valid_595572, JString, required = false,
                                 default = nil)
  if valid_595572 != nil:
    section.add "X-Amz-Security-Token", valid_595572
  var valid_595573 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595573 = validateParameter(valid_595573, JString, required = false,
                                 default = nil)
  if valid_595573 != nil:
    section.add "X-Amz-Content-Sha256", valid_595573
  var valid_595574 = header.getOrDefault("X-Amz-Algorithm")
  valid_595574 = validateParameter(valid_595574, JString, required = false,
                                 default = nil)
  if valid_595574 != nil:
    section.add "X-Amz-Algorithm", valid_595574
  var valid_595575 = header.getOrDefault("X-Amz-Signature")
  valid_595575 = validateParameter(valid_595575, JString, required = false,
                                 default = nil)
  if valid_595575 != nil:
    section.add "X-Amz-Signature", valid_595575
  var valid_595576 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595576 = validateParameter(valid_595576, JString, required = false,
                                 default = nil)
  if valid_595576 != nil:
    section.add "X-Amz-SignedHeaders", valid_595576
  var valid_595577 = header.getOrDefault("X-Amz-Credential")
  valid_595577 = validateParameter(valid_595577, JString, required = false,
                                 default = nil)
  if valid_595577 != nil:
    section.add "X-Amz-Credential", valid_595577
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_595578 = formData.getOrDefault("AutoScalingGroupName")
  valid_595578 = validateParameter(valid_595578, JString, required = true,
                                 default = nil)
  if valid_595578 != nil:
    section.add "AutoScalingGroupName", valid_595578
  var valid_595579 = formData.getOrDefault("InstanceIds")
  valid_595579 = validateParameter(valid_595579, JArray, required = false,
                                 default = nil)
  if valid_595579 != nil:
    section.add "InstanceIds", valid_595579
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595580: Call_PostExitStandby_595566; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Moves the specified instances out of the standby state.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_595580.validator(path, query, header, formData, body)
  let scheme = call_595580.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595580.url(scheme.get, call_595580.host, call_595580.base,
                         call_595580.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595580, url, valid)

proc call*(call_595581: Call_PostExitStandby_595566; AutoScalingGroupName: string;
          InstanceIds: JsonNode = nil; Action: string = "ExitStandby";
          Version: string = "2011-01-01"): Recallable =
  ## postExitStandby
  ## <p>Moves the specified instances out of the standby state.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595582 = newJObject()
  var formData_595583 = newJObject()
  add(formData_595583, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if InstanceIds != nil:
    formData_595583.add "InstanceIds", InstanceIds
  add(query_595582, "Action", newJString(Action))
  add(query_595582, "Version", newJString(Version))
  result = call_595581.call(nil, query_595582, nil, formData_595583, nil)

var postExitStandby* = Call_PostExitStandby_595566(name: "postExitStandby",
    meth: HttpMethod.HttpPost, host: "autoscaling.amazonaws.com",
    route: "/#Action=ExitStandby", validator: validate_PostExitStandby_595567,
    base: "/", url: url_PostExitStandby_595568, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetExitStandby_595549 = ref object of OpenApiRestCall_593437
proc url_GetExitStandby_595551(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetExitStandby_595550(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Moves the specified instances out of the standby state.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_595552 = query.getOrDefault("AutoScalingGroupName")
  valid_595552 = validateParameter(valid_595552, JString, required = true,
                                 default = nil)
  if valid_595552 != nil:
    section.add "AutoScalingGroupName", valid_595552
  var valid_595553 = query.getOrDefault("Action")
  valid_595553 = validateParameter(valid_595553, JString, required = true,
                                 default = newJString("ExitStandby"))
  if valid_595553 != nil:
    section.add "Action", valid_595553
  var valid_595554 = query.getOrDefault("InstanceIds")
  valid_595554 = validateParameter(valid_595554, JArray, required = false,
                                 default = nil)
  if valid_595554 != nil:
    section.add "InstanceIds", valid_595554
  var valid_595555 = query.getOrDefault("Version")
  valid_595555 = validateParameter(valid_595555, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_595555 != nil:
    section.add "Version", valid_595555
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595556 = header.getOrDefault("X-Amz-Date")
  valid_595556 = validateParameter(valid_595556, JString, required = false,
                                 default = nil)
  if valid_595556 != nil:
    section.add "X-Amz-Date", valid_595556
  var valid_595557 = header.getOrDefault("X-Amz-Security-Token")
  valid_595557 = validateParameter(valid_595557, JString, required = false,
                                 default = nil)
  if valid_595557 != nil:
    section.add "X-Amz-Security-Token", valid_595557
  var valid_595558 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595558 = validateParameter(valid_595558, JString, required = false,
                                 default = nil)
  if valid_595558 != nil:
    section.add "X-Amz-Content-Sha256", valid_595558
  var valid_595559 = header.getOrDefault("X-Amz-Algorithm")
  valid_595559 = validateParameter(valid_595559, JString, required = false,
                                 default = nil)
  if valid_595559 != nil:
    section.add "X-Amz-Algorithm", valid_595559
  var valid_595560 = header.getOrDefault("X-Amz-Signature")
  valid_595560 = validateParameter(valid_595560, JString, required = false,
                                 default = nil)
  if valid_595560 != nil:
    section.add "X-Amz-Signature", valid_595560
  var valid_595561 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595561 = validateParameter(valid_595561, JString, required = false,
                                 default = nil)
  if valid_595561 != nil:
    section.add "X-Amz-SignedHeaders", valid_595561
  var valid_595562 = header.getOrDefault("X-Amz-Credential")
  valid_595562 = validateParameter(valid_595562, JString, required = false,
                                 default = nil)
  if valid_595562 != nil:
    section.add "X-Amz-Credential", valid_595562
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595563: Call_GetExitStandby_595549; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Moves the specified instances out of the standby state.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_595563.validator(path, query, header, formData, body)
  let scheme = call_595563.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595563.url(scheme.get, call_595563.host, call_595563.base,
                         call_595563.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595563, url, valid)

proc call*(call_595564: Call_GetExitStandby_595549; AutoScalingGroupName: string;
          Action: string = "ExitStandby"; InstanceIds: JsonNode = nil;
          Version: string = "2011-01-01"): Recallable =
  ## getExitStandby
  ## <p>Moves the specified instances out of the standby state.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Version: string (required)
  var query_595565 = newJObject()
  add(query_595565, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_595565, "Action", newJString(Action))
  if InstanceIds != nil:
    query_595565.add "InstanceIds", InstanceIds
  add(query_595565, "Version", newJString(Version))
  result = call_595564.call(nil, query_595565, nil, nil, nil)

var getExitStandby* = Call_GetExitStandby_595549(name: "getExitStandby",
    meth: HttpMethod.HttpGet, host: "autoscaling.amazonaws.com",
    route: "/#Action=ExitStandby", validator: validate_GetExitStandby_595550,
    base: "/", url: url_GetExitStandby_595551, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutLifecycleHook_595607 = ref object of OpenApiRestCall_593437
proc url_PostPutLifecycleHook_595609(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostPutLifecycleHook_595608(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates or updates a lifecycle hook for the specified Auto Scaling group.</p> <p>A lifecycle hook tells Amazon EC2 Auto Scaling to perform an action on an instance when the instance launches (before it is put into service) or as the instance terminates (before it is fully terminated).</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p> <b>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</b> </p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state using <a>RecordLifecycleActionHeartbeat</a>.</p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action using <a>CompleteLifecycleAction</a>.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.</p> <p>You can view the lifecycle hooks for an Auto Scaling group using <a>DescribeLifecycleHooks</a>. If you are no longer using a lifecycle hook, you can delete it using <a>DeleteLifecycleHook</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595610 = query.getOrDefault("Action")
  valid_595610 = validateParameter(valid_595610, JString, required = true,
                                 default = newJString("PutLifecycleHook"))
  if valid_595610 != nil:
    section.add "Action", valid_595610
  var valid_595611 = query.getOrDefault("Version")
  valid_595611 = validateParameter(valid_595611, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_595611 != nil:
    section.add "Version", valid_595611
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595612 = header.getOrDefault("X-Amz-Date")
  valid_595612 = validateParameter(valid_595612, JString, required = false,
                                 default = nil)
  if valid_595612 != nil:
    section.add "X-Amz-Date", valid_595612
  var valid_595613 = header.getOrDefault("X-Amz-Security-Token")
  valid_595613 = validateParameter(valid_595613, JString, required = false,
                                 default = nil)
  if valid_595613 != nil:
    section.add "X-Amz-Security-Token", valid_595613
  var valid_595614 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595614 = validateParameter(valid_595614, JString, required = false,
                                 default = nil)
  if valid_595614 != nil:
    section.add "X-Amz-Content-Sha256", valid_595614
  var valid_595615 = header.getOrDefault("X-Amz-Algorithm")
  valid_595615 = validateParameter(valid_595615, JString, required = false,
                                 default = nil)
  if valid_595615 != nil:
    section.add "X-Amz-Algorithm", valid_595615
  var valid_595616 = header.getOrDefault("X-Amz-Signature")
  valid_595616 = validateParameter(valid_595616, JString, required = false,
                                 default = nil)
  if valid_595616 != nil:
    section.add "X-Amz-Signature", valid_595616
  var valid_595617 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595617 = validateParameter(valid_595617, JString, required = false,
                                 default = nil)
  if valid_595617 != nil:
    section.add "X-Amz-SignedHeaders", valid_595617
  var valid_595618 = header.getOrDefault("X-Amz-Credential")
  valid_595618 = validateParameter(valid_595618, JString, required = false,
                                 default = nil)
  if valid_595618 != nil:
    section.add "X-Amz-Credential", valid_595618
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleTransition: JString
  ##                      : <p>The instance state to which you want to attach the lifecycle hook. The valid values are:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  ##   DefaultResult: JString
  ##                : Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>. The default value is <code>ABANDON</code>.
  ##   NotificationTargetARN: JString
  ##                        : <p>The ARN of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in the transition state for the lifecycle hook. This target can be either an SQS queue or an SNS topic.</p> <p>If you specify an empty string, this overrides the current ARN.</p> <p>This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key-value pair format when sending notifications to an Amazon SNS topic.</p> <p>When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test messages contain the following additional key-value pair: <code>"Event": "autoscaling:TEST_NOTIFICATION"</code>.</p>
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   NotificationMetadata: JString
  ##                       : Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.
  ##   HeartbeatTimeout: JInt
  ##                   : <p>The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from <code>30</code> to <code>7200</code> seconds. The default value is <code>3600</code> seconds (1 hour).</p> <p>If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action that you specified in the <code>DefaultResult</code> parameter. You can prevent the lifecycle hook from timing out by calling <a>RecordLifecycleActionHeartbeat</a>.</p>
  ##   RoleARN: JString
  ##          : <p>The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target, for example, an Amazon SNS topic or an Amazon SQS queue.</p> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_595619 = formData.getOrDefault("AutoScalingGroupName")
  valid_595619 = validateParameter(valid_595619, JString, required = true,
                                 default = nil)
  if valid_595619 != nil:
    section.add "AutoScalingGroupName", valid_595619
  var valid_595620 = formData.getOrDefault("LifecycleTransition")
  valid_595620 = validateParameter(valid_595620, JString, required = false,
                                 default = nil)
  if valid_595620 != nil:
    section.add "LifecycleTransition", valid_595620
  var valid_595621 = formData.getOrDefault("DefaultResult")
  valid_595621 = validateParameter(valid_595621, JString, required = false,
                                 default = nil)
  if valid_595621 != nil:
    section.add "DefaultResult", valid_595621
  var valid_595622 = formData.getOrDefault("NotificationTargetARN")
  valid_595622 = validateParameter(valid_595622, JString, required = false,
                                 default = nil)
  if valid_595622 != nil:
    section.add "NotificationTargetARN", valid_595622
  var valid_595623 = formData.getOrDefault("LifecycleHookName")
  valid_595623 = validateParameter(valid_595623, JString, required = true,
                                 default = nil)
  if valid_595623 != nil:
    section.add "LifecycleHookName", valid_595623
  var valid_595624 = formData.getOrDefault("NotificationMetadata")
  valid_595624 = validateParameter(valid_595624, JString, required = false,
                                 default = nil)
  if valid_595624 != nil:
    section.add "NotificationMetadata", valid_595624
  var valid_595625 = formData.getOrDefault("HeartbeatTimeout")
  valid_595625 = validateParameter(valid_595625, JInt, required = false, default = nil)
  if valid_595625 != nil:
    section.add "HeartbeatTimeout", valid_595625
  var valid_595626 = formData.getOrDefault("RoleARN")
  valid_595626 = validateParameter(valid_595626, JString, required = false,
                                 default = nil)
  if valid_595626 != nil:
    section.add "RoleARN", valid_595626
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595627: Call_PostPutLifecycleHook_595607; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates or updates a lifecycle hook for the specified Auto Scaling group.</p> <p>A lifecycle hook tells Amazon EC2 Auto Scaling to perform an action on an instance when the instance launches (before it is put into service) or as the instance terminates (before it is fully terminated).</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p> <b>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</b> </p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state using <a>RecordLifecycleActionHeartbeat</a>.</p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action using <a>CompleteLifecycleAction</a>.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.</p> <p>You can view the lifecycle hooks for an Auto Scaling group using <a>DescribeLifecycleHooks</a>. If you are no longer using a lifecycle hook, you can delete it using <a>DeleteLifecycleHook</a>.</p>
  ## 
  let valid = call_595627.validator(path, query, header, formData, body)
  let scheme = call_595627.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595627.url(scheme.get, call_595627.host, call_595627.base,
                         call_595627.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595627, url, valid)

proc call*(call_595628: Call_PostPutLifecycleHook_595607;
          AutoScalingGroupName: string; LifecycleHookName: string;
          LifecycleTransition: string = ""; DefaultResult: string = "";
          Action: string = "PutLifecycleHook"; NotificationTargetARN: string = "";
          NotificationMetadata: string = ""; HeartbeatTimeout: int = 0;
          Version: string = "2011-01-01"; RoleARN: string = ""): Recallable =
  ## postPutLifecycleHook
  ## <p>Creates or updates a lifecycle hook for the specified Auto Scaling group.</p> <p>A lifecycle hook tells Amazon EC2 Auto Scaling to perform an action on an instance when the instance launches (before it is put into service) or as the instance terminates (before it is fully terminated).</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p> <b>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</b> </p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state using <a>RecordLifecycleActionHeartbeat</a>.</p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action using <a>CompleteLifecycleAction</a>.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.</p> <p>You can view the lifecycle hooks for an Auto Scaling group using <a>DescribeLifecycleHooks</a>. If you are no longer using a lifecycle hook, you can delete it using <a>DeleteLifecycleHook</a>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleTransition: string
  ##                      : <p>The instance state to which you want to attach the lifecycle hook. The valid values are:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  ##   DefaultResult: string
  ##                : Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>. The default value is <code>ABANDON</code>.
  ##   Action: string (required)
  ##   NotificationTargetARN: string
  ##                        : <p>The ARN of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in the transition state for the lifecycle hook. This target can be either an SQS queue or an SNS topic.</p> <p>If you specify an empty string, this overrides the current ARN.</p> <p>This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key-value pair format when sending notifications to an Amazon SNS topic.</p> <p>When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test messages contain the following additional key-value pair: <code>"Event": "autoscaling:TEST_NOTIFICATION"</code>.</p>
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   NotificationMetadata: string
  ##                       : Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.
  ##   HeartbeatTimeout: int
  ##                   : <p>The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from <code>30</code> to <code>7200</code> seconds. The default value is <code>3600</code> seconds (1 hour).</p> <p>If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action that you specified in the <code>DefaultResult</code> parameter. You can prevent the lifecycle hook from timing out by calling <a>RecordLifecycleActionHeartbeat</a>.</p>
  ##   Version: string (required)
  ##   RoleARN: string
  ##          : <p>The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target, for example, an Amazon SNS topic or an Amazon SQS queue.</p> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  var query_595629 = newJObject()
  var formData_595630 = newJObject()
  add(formData_595630, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_595630, "LifecycleTransition", newJString(LifecycleTransition))
  add(formData_595630, "DefaultResult", newJString(DefaultResult))
  add(query_595629, "Action", newJString(Action))
  add(formData_595630, "NotificationTargetARN", newJString(NotificationTargetARN))
  add(formData_595630, "LifecycleHookName", newJString(LifecycleHookName))
  add(formData_595630, "NotificationMetadata", newJString(NotificationMetadata))
  add(formData_595630, "HeartbeatTimeout", newJInt(HeartbeatTimeout))
  add(query_595629, "Version", newJString(Version))
  add(formData_595630, "RoleARN", newJString(RoleARN))
  result = call_595628.call(nil, query_595629, nil, formData_595630, nil)

var postPutLifecycleHook* = Call_PostPutLifecycleHook_595607(
    name: "postPutLifecycleHook", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=PutLifecycleHook",
    validator: validate_PostPutLifecycleHook_595608, base: "/",
    url: url_PostPutLifecycleHook_595609, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutLifecycleHook_595584 = ref object of OpenApiRestCall_593437
proc url_GetPutLifecycleHook_595586(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetPutLifecycleHook_595585(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Creates or updates a lifecycle hook for the specified Auto Scaling group.</p> <p>A lifecycle hook tells Amazon EC2 Auto Scaling to perform an action on an instance when the instance launches (before it is put into service) or as the instance terminates (before it is fully terminated).</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p> <b>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</b> </p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state using <a>RecordLifecycleActionHeartbeat</a>.</p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action using <a>CompleteLifecycleAction</a>.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.</p> <p>You can view the lifecycle hooks for an Auto Scaling group using <a>DescribeLifecycleHooks</a>. If you are no longer using a lifecycle hook, you can delete it using <a>DeleteLifecycleHook</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   NotificationTargetARN: JString
  ##                        : <p>The ARN of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in the transition state for the lifecycle hook. This target can be either an SQS queue or an SNS topic.</p> <p>If you specify an empty string, this overrides the current ARN.</p> <p>This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key-value pair format when sending notifications to an Amazon SNS topic.</p> <p>When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test messages contain the following additional key-value pair: <code>"Event": "autoscaling:TEST_NOTIFICATION"</code>.</p>
  ##   DefaultResult: JString
  ##                : Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>. The default value is <code>ABANDON</code>.
  ##   Action: JString (required)
  ##   RoleARN: JString
  ##          : <p>The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target, for example, an Amazon SNS topic or an Amazon SQS queue.</p> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  ##   LifecycleTransition: JString
  ##                      : <p>The instance state to which you want to attach the lifecycle hook. The valid values are:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  ##   NotificationMetadata: JString
  ##                       : Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.
  ##   HeartbeatTimeout: JInt
  ##                   : <p>The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from <code>30</code> to <code>7200</code> seconds. The default value is <code>3600</code> seconds (1 hour).</p> <p>If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action that you specified in the <code>DefaultResult</code> parameter. You can prevent the lifecycle hook from timing out by calling <a>RecordLifecycleActionHeartbeat</a>.</p>
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_595587 = query.getOrDefault("AutoScalingGroupName")
  valid_595587 = validateParameter(valid_595587, JString, required = true,
                                 default = nil)
  if valid_595587 != nil:
    section.add "AutoScalingGroupName", valid_595587
  var valid_595588 = query.getOrDefault("NotificationTargetARN")
  valid_595588 = validateParameter(valid_595588, JString, required = false,
                                 default = nil)
  if valid_595588 != nil:
    section.add "NotificationTargetARN", valid_595588
  var valid_595589 = query.getOrDefault("DefaultResult")
  valid_595589 = validateParameter(valid_595589, JString, required = false,
                                 default = nil)
  if valid_595589 != nil:
    section.add "DefaultResult", valid_595589
  var valid_595590 = query.getOrDefault("Action")
  valid_595590 = validateParameter(valid_595590, JString, required = true,
                                 default = newJString("PutLifecycleHook"))
  if valid_595590 != nil:
    section.add "Action", valid_595590
  var valid_595591 = query.getOrDefault("RoleARN")
  valid_595591 = validateParameter(valid_595591, JString, required = false,
                                 default = nil)
  if valid_595591 != nil:
    section.add "RoleARN", valid_595591
  var valid_595592 = query.getOrDefault("LifecycleTransition")
  valid_595592 = validateParameter(valid_595592, JString, required = false,
                                 default = nil)
  if valid_595592 != nil:
    section.add "LifecycleTransition", valid_595592
  var valid_595593 = query.getOrDefault("NotificationMetadata")
  valid_595593 = validateParameter(valid_595593, JString, required = false,
                                 default = nil)
  if valid_595593 != nil:
    section.add "NotificationMetadata", valid_595593
  var valid_595594 = query.getOrDefault("HeartbeatTimeout")
  valid_595594 = validateParameter(valid_595594, JInt, required = false, default = nil)
  if valid_595594 != nil:
    section.add "HeartbeatTimeout", valid_595594
  var valid_595595 = query.getOrDefault("LifecycleHookName")
  valid_595595 = validateParameter(valid_595595, JString, required = true,
                                 default = nil)
  if valid_595595 != nil:
    section.add "LifecycleHookName", valid_595595
  var valid_595596 = query.getOrDefault("Version")
  valid_595596 = validateParameter(valid_595596, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_595596 != nil:
    section.add "Version", valid_595596
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595597 = header.getOrDefault("X-Amz-Date")
  valid_595597 = validateParameter(valid_595597, JString, required = false,
                                 default = nil)
  if valid_595597 != nil:
    section.add "X-Amz-Date", valid_595597
  var valid_595598 = header.getOrDefault("X-Amz-Security-Token")
  valid_595598 = validateParameter(valid_595598, JString, required = false,
                                 default = nil)
  if valid_595598 != nil:
    section.add "X-Amz-Security-Token", valid_595598
  var valid_595599 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595599 = validateParameter(valid_595599, JString, required = false,
                                 default = nil)
  if valid_595599 != nil:
    section.add "X-Amz-Content-Sha256", valid_595599
  var valid_595600 = header.getOrDefault("X-Amz-Algorithm")
  valid_595600 = validateParameter(valid_595600, JString, required = false,
                                 default = nil)
  if valid_595600 != nil:
    section.add "X-Amz-Algorithm", valid_595600
  var valid_595601 = header.getOrDefault("X-Amz-Signature")
  valid_595601 = validateParameter(valid_595601, JString, required = false,
                                 default = nil)
  if valid_595601 != nil:
    section.add "X-Amz-Signature", valid_595601
  var valid_595602 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595602 = validateParameter(valid_595602, JString, required = false,
                                 default = nil)
  if valid_595602 != nil:
    section.add "X-Amz-SignedHeaders", valid_595602
  var valid_595603 = header.getOrDefault("X-Amz-Credential")
  valid_595603 = validateParameter(valid_595603, JString, required = false,
                                 default = nil)
  if valid_595603 != nil:
    section.add "X-Amz-Credential", valid_595603
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595604: Call_GetPutLifecycleHook_595584; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates or updates a lifecycle hook for the specified Auto Scaling group.</p> <p>A lifecycle hook tells Amazon EC2 Auto Scaling to perform an action on an instance when the instance launches (before it is put into service) or as the instance terminates (before it is fully terminated).</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p> <b>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</b> </p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state using <a>RecordLifecycleActionHeartbeat</a>.</p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action using <a>CompleteLifecycleAction</a>.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.</p> <p>You can view the lifecycle hooks for an Auto Scaling group using <a>DescribeLifecycleHooks</a>. If you are no longer using a lifecycle hook, you can delete it using <a>DeleteLifecycleHook</a>.</p>
  ## 
  let valid = call_595604.validator(path, query, header, formData, body)
  let scheme = call_595604.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595604.url(scheme.get, call_595604.host, call_595604.base,
                         call_595604.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595604, url, valid)

proc call*(call_595605: Call_GetPutLifecycleHook_595584;
          AutoScalingGroupName: string; LifecycleHookName: string;
          NotificationTargetARN: string = ""; DefaultResult: string = "";
          Action: string = "PutLifecycleHook"; RoleARN: string = "";
          LifecycleTransition: string = ""; NotificationMetadata: string = "";
          HeartbeatTimeout: int = 0; Version: string = "2011-01-01"): Recallable =
  ## getPutLifecycleHook
  ## <p>Creates or updates a lifecycle hook for the specified Auto Scaling group.</p> <p>A lifecycle hook tells Amazon EC2 Auto Scaling to perform an action on an instance when the instance launches (before it is put into service) or as the instance terminates (before it is fully terminated).</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p> <b>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</b> </p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state using <a>RecordLifecycleActionHeartbeat</a>.</p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action using <a>CompleteLifecycleAction</a>.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.</p> <p>You can view the lifecycle hooks for an Auto Scaling group using <a>DescribeLifecycleHooks</a>. If you are no longer using a lifecycle hook, you can delete it using <a>DeleteLifecycleHook</a>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   NotificationTargetARN: string
  ##                        : <p>The ARN of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in the transition state for the lifecycle hook. This target can be either an SQS queue or an SNS topic.</p> <p>If you specify an empty string, this overrides the current ARN.</p> <p>This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key-value pair format when sending notifications to an Amazon SNS topic.</p> <p>When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test messages contain the following additional key-value pair: <code>"Event": "autoscaling:TEST_NOTIFICATION"</code>.</p>
  ##   DefaultResult: string
  ##                : Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>. The default value is <code>ABANDON</code>.
  ##   Action: string (required)
  ##   RoleARN: string
  ##          : <p>The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target, for example, an Amazon SNS topic or an Amazon SQS queue.</p> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  ##   LifecycleTransition: string
  ##                      : <p>The instance state to which you want to attach the lifecycle hook. The valid values are:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  ##   NotificationMetadata: string
  ##                       : Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.
  ##   HeartbeatTimeout: int
  ##                   : <p>The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from <code>30</code> to <code>7200</code> seconds. The default value is <code>3600</code> seconds (1 hour).</p> <p>If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action that you specified in the <code>DefaultResult</code> parameter. You can prevent the lifecycle hook from timing out by calling <a>RecordLifecycleActionHeartbeat</a>.</p>
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   Version: string (required)
  var query_595606 = newJObject()
  add(query_595606, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_595606, "NotificationTargetARN", newJString(NotificationTargetARN))
  add(query_595606, "DefaultResult", newJString(DefaultResult))
  add(query_595606, "Action", newJString(Action))
  add(query_595606, "RoleARN", newJString(RoleARN))
  add(query_595606, "LifecycleTransition", newJString(LifecycleTransition))
  add(query_595606, "NotificationMetadata", newJString(NotificationMetadata))
  add(query_595606, "HeartbeatTimeout", newJInt(HeartbeatTimeout))
  add(query_595606, "LifecycleHookName", newJString(LifecycleHookName))
  add(query_595606, "Version", newJString(Version))
  result = call_595605.call(nil, query_595606, nil, nil, nil)

var getPutLifecycleHook* = Call_GetPutLifecycleHook_595584(
    name: "getPutLifecycleHook", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=PutLifecycleHook",
    validator: validate_GetPutLifecycleHook_595585, base: "/",
    url: url_GetPutLifecycleHook_595586, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutNotificationConfiguration_595649 = ref object of OpenApiRestCall_593437
proc url_PostPutNotificationConfiguration_595651(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostPutNotificationConfiguration_595650(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.</p> <p>This configuration overwrites any existing configuration.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html">Getting Amazon SNS Notifications When Your Auto Scaling Group Scales</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595652 = query.getOrDefault("Action")
  valid_595652 = validateParameter(valid_595652, JString, required = true, default = newJString(
      "PutNotificationConfiguration"))
  if valid_595652 != nil:
    section.add "Action", valid_595652
  var valid_595653 = query.getOrDefault("Version")
  valid_595653 = validateParameter(valid_595653, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_595653 != nil:
    section.add "Version", valid_595653
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595654 = header.getOrDefault("X-Amz-Date")
  valid_595654 = validateParameter(valid_595654, JString, required = false,
                                 default = nil)
  if valid_595654 != nil:
    section.add "X-Amz-Date", valid_595654
  var valid_595655 = header.getOrDefault("X-Amz-Security-Token")
  valid_595655 = validateParameter(valid_595655, JString, required = false,
                                 default = nil)
  if valid_595655 != nil:
    section.add "X-Amz-Security-Token", valid_595655
  var valid_595656 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595656 = validateParameter(valid_595656, JString, required = false,
                                 default = nil)
  if valid_595656 != nil:
    section.add "X-Amz-Content-Sha256", valid_595656
  var valid_595657 = header.getOrDefault("X-Amz-Algorithm")
  valid_595657 = validateParameter(valid_595657, JString, required = false,
                                 default = nil)
  if valid_595657 != nil:
    section.add "X-Amz-Algorithm", valid_595657
  var valid_595658 = header.getOrDefault("X-Amz-Signature")
  valid_595658 = validateParameter(valid_595658, JString, required = false,
                                 default = nil)
  if valid_595658 != nil:
    section.add "X-Amz-Signature", valid_595658
  var valid_595659 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595659 = validateParameter(valid_595659, JString, required = false,
                                 default = nil)
  if valid_595659 != nil:
    section.add "X-Amz-SignedHeaders", valid_595659
  var valid_595660 = header.getOrDefault("X-Amz-Credential")
  valid_595660 = validateParameter(valid_595660, JString, required = false,
                                 default = nil)
  if valid_595660 != nil:
    section.add "X-Amz-Credential", valid_595660
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   TopicARN: JString (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   NotificationTypes: JArray (required)
  ##                    : The type of event that causes the notification to be sent. For more information about notification types supported by Amazon EC2 Auto Scaling, see <a>DescribeAutoScalingNotificationTypes</a>.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_595661 = formData.getOrDefault("AutoScalingGroupName")
  valid_595661 = validateParameter(valid_595661, JString, required = true,
                                 default = nil)
  if valid_595661 != nil:
    section.add "AutoScalingGroupName", valid_595661
  var valid_595662 = formData.getOrDefault("TopicARN")
  valid_595662 = validateParameter(valid_595662, JString, required = true,
                                 default = nil)
  if valid_595662 != nil:
    section.add "TopicARN", valid_595662
  var valid_595663 = formData.getOrDefault("NotificationTypes")
  valid_595663 = validateParameter(valid_595663, JArray, required = true, default = nil)
  if valid_595663 != nil:
    section.add "NotificationTypes", valid_595663
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595664: Call_PostPutNotificationConfiguration_595649;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.</p> <p>This configuration overwrites any existing configuration.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html">Getting Amazon SNS Notifications When Your Auto Scaling Group Scales</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_595664.validator(path, query, header, formData, body)
  let scheme = call_595664.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595664.url(scheme.get, call_595664.host, call_595664.base,
                         call_595664.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595664, url, valid)

proc call*(call_595665: Call_PostPutNotificationConfiguration_595649;
          AutoScalingGroupName: string; TopicARN: string;
          NotificationTypes: JsonNode;
          Action: string = "PutNotificationConfiguration";
          Version: string = "2011-01-01"): Recallable =
  ## postPutNotificationConfiguration
  ## <p>Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.</p> <p>This configuration overwrites any existing configuration.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html">Getting Amazon SNS Notifications When Your Auto Scaling Group Scales</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   TopicARN: string (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   Action: string (required)
  ##   NotificationTypes: JArray (required)
  ##                    : The type of event that causes the notification to be sent. For more information about notification types supported by Amazon EC2 Auto Scaling, see <a>DescribeAutoScalingNotificationTypes</a>.
  ##   Version: string (required)
  var query_595666 = newJObject()
  var formData_595667 = newJObject()
  add(formData_595667, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_595667, "TopicARN", newJString(TopicARN))
  add(query_595666, "Action", newJString(Action))
  if NotificationTypes != nil:
    formData_595667.add "NotificationTypes", NotificationTypes
  add(query_595666, "Version", newJString(Version))
  result = call_595665.call(nil, query_595666, nil, formData_595667, nil)

var postPutNotificationConfiguration* = Call_PostPutNotificationConfiguration_595649(
    name: "postPutNotificationConfiguration", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=PutNotificationConfiguration",
    validator: validate_PostPutNotificationConfiguration_595650, base: "/",
    url: url_PostPutNotificationConfiguration_595651,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutNotificationConfiguration_595631 = ref object of OpenApiRestCall_593437
proc url_GetPutNotificationConfiguration_595633(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetPutNotificationConfiguration_595632(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.</p> <p>This configuration overwrites any existing configuration.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html">Getting Amazon SNS Notifications When Your Auto Scaling Group Scales</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   NotificationTypes: JArray (required)
  ##                    : The type of event that causes the notification to be sent. For more information about notification types supported by Amazon EC2 Auto Scaling, see <a>DescribeAutoScalingNotificationTypes</a>.
  ##   TopicARN: JString (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_595634 = query.getOrDefault("AutoScalingGroupName")
  valid_595634 = validateParameter(valid_595634, JString, required = true,
                                 default = nil)
  if valid_595634 != nil:
    section.add "AutoScalingGroupName", valid_595634
  var valid_595635 = query.getOrDefault("Action")
  valid_595635 = validateParameter(valid_595635, JString, required = true, default = newJString(
      "PutNotificationConfiguration"))
  if valid_595635 != nil:
    section.add "Action", valid_595635
  var valid_595636 = query.getOrDefault("NotificationTypes")
  valid_595636 = validateParameter(valid_595636, JArray, required = true, default = nil)
  if valid_595636 != nil:
    section.add "NotificationTypes", valid_595636
  var valid_595637 = query.getOrDefault("TopicARN")
  valid_595637 = validateParameter(valid_595637, JString, required = true,
                                 default = nil)
  if valid_595637 != nil:
    section.add "TopicARN", valid_595637
  var valid_595638 = query.getOrDefault("Version")
  valid_595638 = validateParameter(valid_595638, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_595638 != nil:
    section.add "Version", valid_595638
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595639 = header.getOrDefault("X-Amz-Date")
  valid_595639 = validateParameter(valid_595639, JString, required = false,
                                 default = nil)
  if valid_595639 != nil:
    section.add "X-Amz-Date", valid_595639
  var valid_595640 = header.getOrDefault("X-Amz-Security-Token")
  valid_595640 = validateParameter(valid_595640, JString, required = false,
                                 default = nil)
  if valid_595640 != nil:
    section.add "X-Amz-Security-Token", valid_595640
  var valid_595641 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595641 = validateParameter(valid_595641, JString, required = false,
                                 default = nil)
  if valid_595641 != nil:
    section.add "X-Amz-Content-Sha256", valid_595641
  var valid_595642 = header.getOrDefault("X-Amz-Algorithm")
  valid_595642 = validateParameter(valid_595642, JString, required = false,
                                 default = nil)
  if valid_595642 != nil:
    section.add "X-Amz-Algorithm", valid_595642
  var valid_595643 = header.getOrDefault("X-Amz-Signature")
  valid_595643 = validateParameter(valid_595643, JString, required = false,
                                 default = nil)
  if valid_595643 != nil:
    section.add "X-Amz-Signature", valid_595643
  var valid_595644 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595644 = validateParameter(valid_595644, JString, required = false,
                                 default = nil)
  if valid_595644 != nil:
    section.add "X-Amz-SignedHeaders", valid_595644
  var valid_595645 = header.getOrDefault("X-Amz-Credential")
  valid_595645 = validateParameter(valid_595645, JString, required = false,
                                 default = nil)
  if valid_595645 != nil:
    section.add "X-Amz-Credential", valid_595645
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595646: Call_GetPutNotificationConfiguration_595631;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.</p> <p>This configuration overwrites any existing configuration.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html">Getting Amazon SNS Notifications When Your Auto Scaling Group Scales</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_595646.validator(path, query, header, formData, body)
  let scheme = call_595646.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595646.url(scheme.get, call_595646.host, call_595646.base,
                         call_595646.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595646, url, valid)

proc call*(call_595647: Call_GetPutNotificationConfiguration_595631;
          AutoScalingGroupName: string; NotificationTypes: JsonNode;
          TopicARN: string; Action: string = "PutNotificationConfiguration";
          Version: string = "2011-01-01"): Recallable =
  ## getPutNotificationConfiguration
  ## <p>Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.</p> <p>This configuration overwrites any existing configuration.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html">Getting Amazon SNS Notifications When Your Auto Scaling Group Scales</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   NotificationTypes: JArray (required)
  ##                    : The type of event that causes the notification to be sent. For more information about notification types supported by Amazon EC2 Auto Scaling, see <a>DescribeAutoScalingNotificationTypes</a>.
  ##   TopicARN: string (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   Version: string (required)
  var query_595648 = newJObject()
  add(query_595648, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_595648, "Action", newJString(Action))
  if NotificationTypes != nil:
    query_595648.add "NotificationTypes", NotificationTypes
  add(query_595648, "TopicARN", newJString(TopicARN))
  add(query_595648, "Version", newJString(Version))
  result = call_595647.call(nil, query_595648, nil, nil, nil)

var getPutNotificationConfiguration* = Call_GetPutNotificationConfiguration_595631(
    name: "getPutNotificationConfiguration", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=PutNotificationConfiguration",
    validator: validate_GetPutNotificationConfiguration_595632, base: "/",
    url: url_GetPutNotificationConfiguration_595633,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutScalingPolicy_595698 = ref object of OpenApiRestCall_593437
proc url_PostPutScalingPolicy_595700(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostPutScalingPolicy_595699(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates or updates a scaling policy for an Auto Scaling group. To update an existing scaling policy, use the existing policy name and set the parameters to change. Any existing parameter not changed in an update to an existing policy is not changed in this update request.</p> <p>For more information about using scaling policies to scale your Auto Scaling group automatically, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scale-based-on-demand.html">Dynamic Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595701 = query.getOrDefault("Action")
  valid_595701 = validateParameter(valid_595701, JString, required = true,
                                 default = newJString("PutScalingPolicy"))
  if valid_595701 != nil:
    section.add "Action", valid_595701
  var valid_595702 = query.getOrDefault("Version")
  valid_595702 = validateParameter(valid_595702, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_595702 != nil:
    section.add "Version", valid_595702
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595703 = header.getOrDefault("X-Amz-Date")
  valid_595703 = validateParameter(valid_595703, JString, required = false,
                                 default = nil)
  if valid_595703 != nil:
    section.add "X-Amz-Date", valid_595703
  var valid_595704 = header.getOrDefault("X-Amz-Security-Token")
  valid_595704 = validateParameter(valid_595704, JString, required = false,
                                 default = nil)
  if valid_595704 != nil:
    section.add "X-Amz-Security-Token", valid_595704
  var valid_595705 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595705 = validateParameter(valid_595705, JString, required = false,
                                 default = nil)
  if valid_595705 != nil:
    section.add "X-Amz-Content-Sha256", valid_595705
  var valid_595706 = header.getOrDefault("X-Amz-Algorithm")
  valid_595706 = validateParameter(valid_595706, JString, required = false,
                                 default = nil)
  if valid_595706 != nil:
    section.add "X-Amz-Algorithm", valid_595706
  var valid_595707 = header.getOrDefault("X-Amz-Signature")
  valid_595707 = validateParameter(valid_595707, JString, required = false,
                                 default = nil)
  if valid_595707 != nil:
    section.add "X-Amz-Signature", valid_595707
  var valid_595708 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595708 = validateParameter(valid_595708, JString, required = false,
                                 default = nil)
  if valid_595708 != nil:
    section.add "X-Amz-SignedHeaders", valid_595708
  var valid_595709 = header.getOrDefault("X-Amz-Credential")
  valid_595709 = validateParameter(valid_595709, JString, required = false,
                                 default = nil)
  if valid_595709 != nil:
    section.add "X-Amz-Credential", valid_595709
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetTrackingConfiguration.CustomizedMetricSpecification: JString
  ##                                                            : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A customized metric. You must specify either a predefined metric or a customized metric.
  ##   PolicyName: JString (required)
  ##             : The name of the policy.
  ##   StepAdjustments: JArray
  ##                  : <p>A set of adjustments that enable you to scale based on the size of the alarm breach.</p> <p>Conditional: If you specify <code>StepScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   TargetTrackingConfiguration.PredefinedMetricSpecification: JString
  ##                                                            : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A predefined metric. You must specify either a predefined metric or a customized metric.
  ##   TargetTrackingConfiguration.DisableScaleIn: JString
  ##                                             : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## Indicates whether scaling in by the target tracking scaling policy is disabled. If scaling in is disabled, the target tracking scaling policy doesn't remove instances from the Auto Scaling group. Otherwise, the target tracking scaling policy can remove instances from the Auto Scaling group. The default is <code>false</code>.
  ##   ScalingAdjustment: JInt
  ##                    : <p>The amount by which a simple scaling policy scales the Auto Scaling group in response to an alarm breach. The adjustment is based on the value that you specified in the <code>AdjustmentType</code> parameter (either an absolute number or a percentage). A positive value adds to the current capacity and a negative value subtracts from the current capacity. For exact capacity, you must specify a positive value. </p> <p>Conditional: If you specify <code>SimpleScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   MinAdjustmentStep: JInt
  ##                    : Available for backward compatibility. Use <code>MinAdjustmentMagnitude</code> instead.
  ##   Cooldown: JInt
  ##           : <p>The amount of time, in seconds, after a scaling activity completes before any further dynamic scaling activities can start. If this parameter is not specified, the default cooldown period for the group applies.</p> <p>Valid only if the policy type is <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MetricAggregationType: JString
  ##                        : <p>The aggregation type for the CloudWatch metrics. The valid values are <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code>. If the aggregation type is null, the value is treated as <code>Average</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code>.</p>
  ##   AdjustmentType: JString
  ##                 : <p>Specifies whether the <code>ScalingAdjustment</code> parameter is an absolute number or a percentage of the current capacity. The valid values are <code>ChangeInCapacity</code>, <code>ExactCapacity</code>, and <code>PercentChangeInCapacity</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment">Scaling Adjustment Types</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   EstimatedInstanceWarmup: JInt
  ##                          : <p>The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. The default is to use the value specified for the default cooldown period for the group.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p>
  ##   MinAdjustmentMagnitude: JInt
  ##                         : <p>The minimum number of instances to scale. If the value of <code>AdjustmentType</code> is <code>PercentChangeInCapacity</code>, the scaling policy changes the <code>DesiredCapacity</code> of the Auto Scaling group by at least this many instances. Otherwise, the error is <code>ValidationError</code>.</p> <p>This property replaces the <code>MinAdjustmentStep</code> property. For example, suppose that you create a step scaling policy to scale out an Auto Scaling group by 25 percent and you specify a <code>MinAdjustmentMagnitude</code> of 2. If the group has 4 instances and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a <code>MinAdjustmentMagnitude</code> of 2, Amazon EC2 Auto Scaling scales out the group by 2 instances.</p> <p>Valid only if the policy type is <code>SimpleScaling</code> or <code>StepScaling</code>.</p>
  ##   TargetTrackingConfiguration.TargetValue: JString
  ##                                          : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## The target value for the metric.
  ##   PolicyType: JString
  ##             : The policy type. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>. If the policy type is null, the value is treated as <code>SimpleScaling</code>.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_595710 = formData.getOrDefault("AutoScalingGroupName")
  valid_595710 = validateParameter(valid_595710, JString, required = true,
                                 default = nil)
  if valid_595710 != nil:
    section.add "AutoScalingGroupName", valid_595710
  var valid_595711 = formData.getOrDefault("TargetTrackingConfiguration.CustomizedMetricSpecification")
  valid_595711 = validateParameter(valid_595711, JString, required = false,
                                 default = nil)
  if valid_595711 != nil:
    section.add "TargetTrackingConfiguration.CustomizedMetricSpecification", valid_595711
  var valid_595712 = formData.getOrDefault("PolicyName")
  valid_595712 = validateParameter(valid_595712, JString, required = true,
                                 default = nil)
  if valid_595712 != nil:
    section.add "PolicyName", valid_595712
  var valid_595713 = formData.getOrDefault("StepAdjustments")
  valid_595713 = validateParameter(valid_595713, JArray, required = false,
                                 default = nil)
  if valid_595713 != nil:
    section.add "StepAdjustments", valid_595713
  var valid_595714 = formData.getOrDefault("TargetTrackingConfiguration.PredefinedMetricSpecification")
  valid_595714 = validateParameter(valid_595714, JString, required = false,
                                 default = nil)
  if valid_595714 != nil:
    section.add "TargetTrackingConfiguration.PredefinedMetricSpecification", valid_595714
  var valid_595715 = formData.getOrDefault("TargetTrackingConfiguration.DisableScaleIn")
  valid_595715 = validateParameter(valid_595715, JString, required = false,
                                 default = nil)
  if valid_595715 != nil:
    section.add "TargetTrackingConfiguration.DisableScaleIn", valid_595715
  var valid_595716 = formData.getOrDefault("ScalingAdjustment")
  valid_595716 = validateParameter(valid_595716, JInt, required = false, default = nil)
  if valid_595716 != nil:
    section.add "ScalingAdjustment", valid_595716
  var valid_595717 = formData.getOrDefault("MinAdjustmentStep")
  valid_595717 = validateParameter(valid_595717, JInt, required = false, default = nil)
  if valid_595717 != nil:
    section.add "MinAdjustmentStep", valid_595717
  var valid_595718 = formData.getOrDefault("Cooldown")
  valid_595718 = validateParameter(valid_595718, JInt, required = false, default = nil)
  if valid_595718 != nil:
    section.add "Cooldown", valid_595718
  var valid_595719 = formData.getOrDefault("MetricAggregationType")
  valid_595719 = validateParameter(valid_595719, JString, required = false,
                                 default = nil)
  if valid_595719 != nil:
    section.add "MetricAggregationType", valid_595719
  var valid_595720 = formData.getOrDefault("AdjustmentType")
  valid_595720 = validateParameter(valid_595720, JString, required = false,
                                 default = nil)
  if valid_595720 != nil:
    section.add "AdjustmentType", valid_595720
  var valid_595721 = formData.getOrDefault("EstimatedInstanceWarmup")
  valid_595721 = validateParameter(valid_595721, JInt, required = false, default = nil)
  if valid_595721 != nil:
    section.add "EstimatedInstanceWarmup", valid_595721
  var valid_595722 = formData.getOrDefault("MinAdjustmentMagnitude")
  valid_595722 = validateParameter(valid_595722, JInt, required = false, default = nil)
  if valid_595722 != nil:
    section.add "MinAdjustmentMagnitude", valid_595722
  var valid_595723 = formData.getOrDefault("TargetTrackingConfiguration.TargetValue")
  valid_595723 = validateParameter(valid_595723, JString, required = false,
                                 default = nil)
  if valid_595723 != nil:
    section.add "TargetTrackingConfiguration.TargetValue", valid_595723
  var valid_595724 = formData.getOrDefault("PolicyType")
  valid_595724 = validateParameter(valid_595724, JString, required = false,
                                 default = nil)
  if valid_595724 != nil:
    section.add "PolicyType", valid_595724
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595725: Call_PostPutScalingPolicy_595698; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates or updates a scaling policy for an Auto Scaling group. To update an existing scaling policy, use the existing policy name and set the parameters to change. Any existing parameter not changed in an update to an existing policy is not changed in this update request.</p> <p>For more information about using scaling policies to scale your Auto Scaling group automatically, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scale-based-on-demand.html">Dynamic Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_595725.validator(path, query, header, formData, body)
  let scheme = call_595725.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595725.url(scheme.get, call_595725.host, call_595725.base,
                         call_595725.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595725, url, valid)

proc call*(call_595726: Call_PostPutScalingPolicy_595698;
          AutoScalingGroupName: string; PolicyName: string;
    TargetTrackingConfigurationCustomizedMetricSpecification: string = "";
          StepAdjustments: JsonNode = nil; TargetTrackingConfigurationPredefinedMetricSpecification: string = "";
          TargetTrackingConfigurationDisableScaleIn: string = "";
          ScalingAdjustment: int = 0; MinAdjustmentStep: int = 0; Cooldown: int = 0;
          Action: string = "PutScalingPolicy"; MetricAggregationType: string = "";
          AdjustmentType: string = ""; EstimatedInstanceWarmup: int = 0;
          MinAdjustmentMagnitude: int = 0;
          TargetTrackingConfigurationTargetValue: string = "";
          Version: string = "2011-01-01"; PolicyType: string = ""): Recallable =
  ## postPutScalingPolicy
  ## <p>Creates or updates a scaling policy for an Auto Scaling group. To update an existing scaling policy, use the existing policy name and set the parameters to change. Any existing parameter not changed in an update to an existing policy is not changed in this update request.</p> <p>For more information about using scaling policies to scale your Auto Scaling group automatically, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scale-based-on-demand.html">Dynamic Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetTrackingConfigurationCustomizedMetricSpecification: string
  ##                                                           : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A customized metric. You must specify either a predefined metric or a customized metric.
  ##   PolicyName: string (required)
  ##             : The name of the policy.
  ##   StepAdjustments: JArray
  ##                  : <p>A set of adjustments that enable you to scale based on the size of the alarm breach.</p> <p>Conditional: If you specify <code>StepScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   TargetTrackingConfigurationPredefinedMetricSpecification: string
  ##                                                           : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A predefined metric. You must specify either a predefined metric or a customized metric.
  ##   TargetTrackingConfigurationDisableScaleIn: string
  ##                                            : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## Indicates whether scaling in by the target tracking scaling policy is disabled. If scaling in is disabled, the target tracking scaling policy doesn't remove instances from the Auto Scaling group. Otherwise, the target tracking scaling policy can remove instances from the Auto Scaling group. The default is <code>false</code>.
  ##   ScalingAdjustment: int
  ##                    : <p>The amount by which a simple scaling policy scales the Auto Scaling group in response to an alarm breach. The adjustment is based on the value that you specified in the <code>AdjustmentType</code> parameter (either an absolute number or a percentage). A positive value adds to the current capacity and a negative value subtracts from the current capacity. For exact capacity, you must specify a positive value. </p> <p>Conditional: If you specify <code>SimpleScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   MinAdjustmentStep: int
  ##                    : Available for backward compatibility. Use <code>MinAdjustmentMagnitude</code> instead.
  ##   Cooldown: int
  ##           : <p>The amount of time, in seconds, after a scaling activity completes before any further dynamic scaling activities can start. If this parameter is not specified, the default cooldown period for the group applies.</p> <p>Valid only if the policy type is <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   MetricAggregationType: string
  ##                        : <p>The aggregation type for the CloudWatch metrics. The valid values are <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code>. If the aggregation type is null, the value is treated as <code>Average</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code>.</p>
  ##   AdjustmentType: string
  ##                 : <p>Specifies whether the <code>ScalingAdjustment</code> parameter is an absolute number or a percentage of the current capacity. The valid values are <code>ChangeInCapacity</code>, <code>ExactCapacity</code>, and <code>PercentChangeInCapacity</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment">Scaling Adjustment Types</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   EstimatedInstanceWarmup: int
  ##                          : <p>The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. The default is to use the value specified for the default cooldown period for the group.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p>
  ##   MinAdjustmentMagnitude: int
  ##                         : <p>The minimum number of instances to scale. If the value of <code>AdjustmentType</code> is <code>PercentChangeInCapacity</code>, the scaling policy changes the <code>DesiredCapacity</code> of the Auto Scaling group by at least this many instances. Otherwise, the error is <code>ValidationError</code>.</p> <p>This property replaces the <code>MinAdjustmentStep</code> property. For example, suppose that you create a step scaling policy to scale out an Auto Scaling group by 25 percent and you specify a <code>MinAdjustmentMagnitude</code> of 2. If the group has 4 instances and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a <code>MinAdjustmentMagnitude</code> of 2, Amazon EC2 Auto Scaling scales out the group by 2 instances.</p> <p>Valid only if the policy type is <code>SimpleScaling</code> or <code>StepScaling</code>.</p>
  ##   TargetTrackingConfigurationTargetValue: string
  ##                                         : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## The target value for the metric.
  ##   Version: string (required)
  ##   PolicyType: string
  ##             : The policy type. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>. If the policy type is null, the value is treated as <code>SimpleScaling</code>.
  var query_595727 = newJObject()
  var formData_595728 = newJObject()
  add(formData_595728, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_595728,
      "TargetTrackingConfiguration.CustomizedMetricSpecification",
      newJString(TargetTrackingConfigurationCustomizedMetricSpecification))
  add(formData_595728, "PolicyName", newJString(PolicyName))
  if StepAdjustments != nil:
    formData_595728.add "StepAdjustments", StepAdjustments
  add(formData_595728,
      "TargetTrackingConfiguration.PredefinedMetricSpecification",
      newJString(TargetTrackingConfigurationPredefinedMetricSpecification))
  add(formData_595728, "TargetTrackingConfiguration.DisableScaleIn",
      newJString(TargetTrackingConfigurationDisableScaleIn))
  add(formData_595728, "ScalingAdjustment", newJInt(ScalingAdjustment))
  add(formData_595728, "MinAdjustmentStep", newJInt(MinAdjustmentStep))
  add(formData_595728, "Cooldown", newJInt(Cooldown))
  add(query_595727, "Action", newJString(Action))
  add(formData_595728, "MetricAggregationType", newJString(MetricAggregationType))
  add(formData_595728, "AdjustmentType", newJString(AdjustmentType))
  add(formData_595728, "EstimatedInstanceWarmup", newJInt(EstimatedInstanceWarmup))
  add(formData_595728, "MinAdjustmentMagnitude", newJInt(MinAdjustmentMagnitude))
  add(formData_595728, "TargetTrackingConfiguration.TargetValue",
      newJString(TargetTrackingConfigurationTargetValue))
  add(query_595727, "Version", newJString(Version))
  add(formData_595728, "PolicyType", newJString(PolicyType))
  result = call_595726.call(nil, query_595727, nil, formData_595728, nil)

var postPutScalingPolicy* = Call_PostPutScalingPolicy_595698(
    name: "postPutScalingPolicy", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=PutScalingPolicy",
    validator: validate_PostPutScalingPolicy_595699, base: "/",
    url: url_PostPutScalingPolicy_595700, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutScalingPolicy_595668 = ref object of OpenApiRestCall_593437
proc url_GetPutScalingPolicy_595670(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetPutScalingPolicy_595669(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Creates or updates a scaling policy for an Auto Scaling group. To update an existing scaling policy, use the existing policy name and set the parameters to change. Any existing parameter not changed in an update to an existing policy is not changed in this update request.</p> <p>For more information about using scaling policies to scale your Auto Scaling group automatically, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scale-based-on-demand.html">Dynamic Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TargetTrackingConfiguration.DisableScaleIn: JString
  ##                                             : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## Indicates whether scaling in by the target tracking scaling policy is disabled. If scaling in is disabled, the target tracking scaling policy doesn't remove instances from the Auto Scaling group. Otherwise, the target tracking scaling policy can remove instances from the Auto Scaling group. The default is <code>false</code>.
  ##   AdjustmentType: JString
  ##                 : <p>Specifies whether the <code>ScalingAdjustment</code> parameter is an absolute number or a percentage of the current capacity. The valid values are <code>ChangeInCapacity</code>, <code>ExactCapacity</code>, and <code>PercentChangeInCapacity</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment">Scaling Adjustment Types</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   TargetTrackingConfiguration.PredefinedMetricSpecification: JString
  ##                                                            : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A predefined metric. You must specify either a predefined metric or a customized metric.
  ##   MetricAggregationType: JString
  ##                        : <p>The aggregation type for the CloudWatch metrics. The valid values are <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code>. If the aggregation type is null, the value is treated as <code>Average</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code>.</p>
  ##   MinAdjustmentStep: JInt
  ##                    : Available for backward compatibility. Use <code>MinAdjustmentMagnitude</code> instead.
  ##   Cooldown: JInt
  ##           : <p>The amount of time, in seconds, after a scaling activity completes before any further dynamic scaling activities can start. If this parameter is not specified, the default cooldown period for the group applies.</p> <p>Valid only if the policy type is <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetTrackingConfiguration.TargetValue: JString
  ##                                          : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## The target value for the metric.
  ##   TargetTrackingConfiguration.CustomizedMetricSpecification: JString
  ##                                                            : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A customized metric. You must specify either a predefined metric or a customized metric.
  ##   Action: JString (required)
  ##   EstimatedInstanceWarmup: JInt
  ##                          : <p>The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. The default is to use the value specified for the default cooldown period for the group.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p>
  ##   MinAdjustmentMagnitude: JInt
  ##                         : <p>The minimum number of instances to scale. If the value of <code>AdjustmentType</code> is <code>PercentChangeInCapacity</code>, the scaling policy changes the <code>DesiredCapacity</code> of the Auto Scaling group by at least this many instances. Otherwise, the error is <code>ValidationError</code>.</p> <p>This property replaces the <code>MinAdjustmentStep</code> property. For example, suppose that you create a step scaling policy to scale out an Auto Scaling group by 25 percent and you specify a <code>MinAdjustmentMagnitude</code> of 2. If the group has 4 instances and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a <code>MinAdjustmentMagnitude</code> of 2, Amazon EC2 Auto Scaling scales out the group by 2 instances.</p> <p>Valid only if the policy type is <code>SimpleScaling</code> or <code>StepScaling</code>.</p>
  ##   StepAdjustments: JArray
  ##                  : <p>A set of adjustments that enable you to scale based on the size of the alarm breach.</p> <p>Conditional: If you specify <code>StepScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   PolicyType: JString
  ##             : The policy type. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>. If the policy type is null, the value is treated as <code>SimpleScaling</code>.
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : The name of the policy.
  ##   ScalingAdjustment: JInt
  ##                    : <p>The amount by which a simple scaling policy scales the Auto Scaling group in response to an alarm breach. The adjustment is based on the value that you specified in the <code>AdjustmentType</code> parameter (either an absolute number or a percentage). A positive value adds to the current capacity and a negative value subtracts from the current capacity. For exact capacity, you must specify a positive value. </p> <p>Conditional: If you specify <code>SimpleScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  section = newJObject()
  var valid_595671 = query.getOrDefault("TargetTrackingConfiguration.DisableScaleIn")
  valid_595671 = validateParameter(valid_595671, JString, required = false,
                                 default = nil)
  if valid_595671 != nil:
    section.add "TargetTrackingConfiguration.DisableScaleIn", valid_595671
  var valid_595672 = query.getOrDefault("AdjustmentType")
  valid_595672 = validateParameter(valid_595672, JString, required = false,
                                 default = nil)
  if valid_595672 != nil:
    section.add "AdjustmentType", valid_595672
  var valid_595673 = query.getOrDefault("TargetTrackingConfiguration.PredefinedMetricSpecification")
  valid_595673 = validateParameter(valid_595673, JString, required = false,
                                 default = nil)
  if valid_595673 != nil:
    section.add "TargetTrackingConfiguration.PredefinedMetricSpecification", valid_595673
  var valid_595674 = query.getOrDefault("MetricAggregationType")
  valid_595674 = validateParameter(valid_595674, JString, required = false,
                                 default = nil)
  if valid_595674 != nil:
    section.add "MetricAggregationType", valid_595674
  var valid_595675 = query.getOrDefault("MinAdjustmentStep")
  valid_595675 = validateParameter(valid_595675, JInt, required = false, default = nil)
  if valid_595675 != nil:
    section.add "MinAdjustmentStep", valid_595675
  var valid_595676 = query.getOrDefault("Cooldown")
  valid_595676 = validateParameter(valid_595676, JInt, required = false, default = nil)
  if valid_595676 != nil:
    section.add "Cooldown", valid_595676
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_595677 = query.getOrDefault("AutoScalingGroupName")
  valid_595677 = validateParameter(valid_595677, JString, required = true,
                                 default = nil)
  if valid_595677 != nil:
    section.add "AutoScalingGroupName", valid_595677
  var valid_595678 = query.getOrDefault("TargetTrackingConfiguration.TargetValue")
  valid_595678 = validateParameter(valid_595678, JString, required = false,
                                 default = nil)
  if valid_595678 != nil:
    section.add "TargetTrackingConfiguration.TargetValue", valid_595678
  var valid_595679 = query.getOrDefault("TargetTrackingConfiguration.CustomizedMetricSpecification")
  valid_595679 = validateParameter(valid_595679, JString, required = false,
                                 default = nil)
  if valid_595679 != nil:
    section.add "TargetTrackingConfiguration.CustomizedMetricSpecification", valid_595679
  var valid_595680 = query.getOrDefault("Action")
  valid_595680 = validateParameter(valid_595680, JString, required = true,
                                 default = newJString("PutScalingPolicy"))
  if valid_595680 != nil:
    section.add "Action", valid_595680
  var valid_595681 = query.getOrDefault("EstimatedInstanceWarmup")
  valid_595681 = validateParameter(valid_595681, JInt, required = false, default = nil)
  if valid_595681 != nil:
    section.add "EstimatedInstanceWarmup", valid_595681
  var valid_595682 = query.getOrDefault("MinAdjustmentMagnitude")
  valid_595682 = validateParameter(valid_595682, JInt, required = false, default = nil)
  if valid_595682 != nil:
    section.add "MinAdjustmentMagnitude", valid_595682
  var valid_595683 = query.getOrDefault("StepAdjustments")
  valid_595683 = validateParameter(valid_595683, JArray, required = false,
                                 default = nil)
  if valid_595683 != nil:
    section.add "StepAdjustments", valid_595683
  var valid_595684 = query.getOrDefault("PolicyType")
  valid_595684 = validateParameter(valid_595684, JString, required = false,
                                 default = nil)
  if valid_595684 != nil:
    section.add "PolicyType", valid_595684
  var valid_595685 = query.getOrDefault("Version")
  valid_595685 = validateParameter(valid_595685, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_595685 != nil:
    section.add "Version", valid_595685
  var valid_595686 = query.getOrDefault("PolicyName")
  valid_595686 = validateParameter(valid_595686, JString, required = true,
                                 default = nil)
  if valid_595686 != nil:
    section.add "PolicyName", valid_595686
  var valid_595687 = query.getOrDefault("ScalingAdjustment")
  valid_595687 = validateParameter(valid_595687, JInt, required = false, default = nil)
  if valid_595687 != nil:
    section.add "ScalingAdjustment", valid_595687
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595688 = header.getOrDefault("X-Amz-Date")
  valid_595688 = validateParameter(valid_595688, JString, required = false,
                                 default = nil)
  if valid_595688 != nil:
    section.add "X-Amz-Date", valid_595688
  var valid_595689 = header.getOrDefault("X-Amz-Security-Token")
  valid_595689 = validateParameter(valid_595689, JString, required = false,
                                 default = nil)
  if valid_595689 != nil:
    section.add "X-Amz-Security-Token", valid_595689
  var valid_595690 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595690 = validateParameter(valid_595690, JString, required = false,
                                 default = nil)
  if valid_595690 != nil:
    section.add "X-Amz-Content-Sha256", valid_595690
  var valid_595691 = header.getOrDefault("X-Amz-Algorithm")
  valid_595691 = validateParameter(valid_595691, JString, required = false,
                                 default = nil)
  if valid_595691 != nil:
    section.add "X-Amz-Algorithm", valid_595691
  var valid_595692 = header.getOrDefault("X-Amz-Signature")
  valid_595692 = validateParameter(valid_595692, JString, required = false,
                                 default = nil)
  if valid_595692 != nil:
    section.add "X-Amz-Signature", valid_595692
  var valid_595693 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595693 = validateParameter(valid_595693, JString, required = false,
                                 default = nil)
  if valid_595693 != nil:
    section.add "X-Amz-SignedHeaders", valid_595693
  var valid_595694 = header.getOrDefault("X-Amz-Credential")
  valid_595694 = validateParameter(valid_595694, JString, required = false,
                                 default = nil)
  if valid_595694 != nil:
    section.add "X-Amz-Credential", valid_595694
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595695: Call_GetPutScalingPolicy_595668; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates or updates a scaling policy for an Auto Scaling group. To update an existing scaling policy, use the existing policy name and set the parameters to change. Any existing parameter not changed in an update to an existing policy is not changed in this update request.</p> <p>For more information about using scaling policies to scale your Auto Scaling group automatically, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scale-based-on-demand.html">Dynamic Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_595695.validator(path, query, header, formData, body)
  let scheme = call_595695.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595695.url(scheme.get, call_595695.host, call_595695.base,
                         call_595695.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595695, url, valid)

proc call*(call_595696: Call_GetPutScalingPolicy_595668;
          AutoScalingGroupName: string; PolicyName: string;
          TargetTrackingConfigurationDisableScaleIn: string = "";
          AdjustmentType: string = ""; TargetTrackingConfigurationPredefinedMetricSpecification: string = "";
          MetricAggregationType: string = ""; MinAdjustmentStep: int = 0;
          Cooldown: int = 0; TargetTrackingConfigurationTargetValue: string = "";
    TargetTrackingConfigurationCustomizedMetricSpecification: string = "";
          Action: string = "PutScalingPolicy"; EstimatedInstanceWarmup: int = 0;
          MinAdjustmentMagnitude: int = 0; StepAdjustments: JsonNode = nil;
          PolicyType: string = ""; Version: string = "2011-01-01";
          ScalingAdjustment: int = 0): Recallable =
  ## getPutScalingPolicy
  ## <p>Creates or updates a scaling policy for an Auto Scaling group. To update an existing scaling policy, use the existing policy name and set the parameters to change. Any existing parameter not changed in an update to an existing policy is not changed in this update request.</p> <p>For more information about using scaling policies to scale your Auto Scaling group automatically, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scale-based-on-demand.html">Dynamic Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   TargetTrackingConfigurationDisableScaleIn: string
  ##                                            : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## Indicates whether scaling in by the target tracking scaling policy is disabled. If scaling in is disabled, the target tracking scaling policy doesn't remove instances from the Auto Scaling group. Otherwise, the target tracking scaling policy can remove instances from the Auto Scaling group. The default is <code>false</code>.
  ##   AdjustmentType: string
  ##                 : <p>Specifies whether the <code>ScalingAdjustment</code> parameter is an absolute number or a percentage of the current capacity. The valid values are <code>ChangeInCapacity</code>, <code>ExactCapacity</code>, and <code>PercentChangeInCapacity</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment">Scaling Adjustment Types</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   TargetTrackingConfigurationPredefinedMetricSpecification: string
  ##                                                           : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A predefined metric. You must specify either a predefined metric or a customized metric.
  ##   MetricAggregationType: string
  ##                        : <p>The aggregation type for the CloudWatch metrics. The valid values are <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code>. If the aggregation type is null, the value is treated as <code>Average</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code>.</p>
  ##   MinAdjustmentStep: int
  ##                    : Available for backward compatibility. Use <code>MinAdjustmentMagnitude</code> instead.
  ##   Cooldown: int
  ##           : <p>The amount of time, in seconds, after a scaling activity completes before any further dynamic scaling activities can start. If this parameter is not specified, the default cooldown period for the group applies.</p> <p>Valid only if the policy type is <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetTrackingConfigurationTargetValue: string
  ##                                         : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## The target value for the metric.
  ##   TargetTrackingConfigurationCustomizedMetricSpecification: string
  ##                                                           : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A customized metric. You must specify either a predefined metric or a customized metric.
  ##   Action: string (required)
  ##   EstimatedInstanceWarmup: int
  ##                          : <p>The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. The default is to use the value specified for the default cooldown period for the group.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p>
  ##   MinAdjustmentMagnitude: int
  ##                         : <p>The minimum number of instances to scale. If the value of <code>AdjustmentType</code> is <code>PercentChangeInCapacity</code>, the scaling policy changes the <code>DesiredCapacity</code> of the Auto Scaling group by at least this many instances. Otherwise, the error is <code>ValidationError</code>.</p> <p>This property replaces the <code>MinAdjustmentStep</code> property. For example, suppose that you create a step scaling policy to scale out an Auto Scaling group by 25 percent and you specify a <code>MinAdjustmentMagnitude</code> of 2. If the group has 4 instances and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a <code>MinAdjustmentMagnitude</code> of 2, Amazon EC2 Auto Scaling scales out the group by 2 instances.</p> <p>Valid only if the policy type is <code>SimpleScaling</code> or <code>StepScaling</code>.</p>
  ##   StepAdjustments: JArray
  ##                  : <p>A set of adjustments that enable you to scale based on the size of the alarm breach.</p> <p>Conditional: If you specify <code>StepScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   PolicyType: string
  ##             : The policy type. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>. If the policy type is null, the value is treated as <code>SimpleScaling</code>.
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : The name of the policy.
  ##   ScalingAdjustment: int
  ##                    : <p>The amount by which a simple scaling policy scales the Auto Scaling group in response to an alarm breach. The adjustment is based on the value that you specified in the <code>AdjustmentType</code> parameter (either an absolute number or a percentage). A positive value adds to the current capacity and a negative value subtracts from the current capacity. For exact capacity, you must specify a positive value. </p> <p>Conditional: If you specify <code>SimpleScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  var query_595697 = newJObject()
  add(query_595697, "TargetTrackingConfiguration.DisableScaleIn",
      newJString(TargetTrackingConfigurationDisableScaleIn))
  add(query_595697, "AdjustmentType", newJString(AdjustmentType))
  add(query_595697, "TargetTrackingConfiguration.PredefinedMetricSpecification",
      newJString(TargetTrackingConfigurationPredefinedMetricSpecification))
  add(query_595697, "MetricAggregationType", newJString(MetricAggregationType))
  add(query_595697, "MinAdjustmentStep", newJInt(MinAdjustmentStep))
  add(query_595697, "Cooldown", newJInt(Cooldown))
  add(query_595697, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_595697, "TargetTrackingConfiguration.TargetValue",
      newJString(TargetTrackingConfigurationTargetValue))
  add(query_595697, "TargetTrackingConfiguration.CustomizedMetricSpecification",
      newJString(TargetTrackingConfigurationCustomizedMetricSpecification))
  add(query_595697, "Action", newJString(Action))
  add(query_595697, "EstimatedInstanceWarmup", newJInt(EstimatedInstanceWarmup))
  add(query_595697, "MinAdjustmentMagnitude", newJInt(MinAdjustmentMagnitude))
  if StepAdjustments != nil:
    query_595697.add "StepAdjustments", StepAdjustments
  add(query_595697, "PolicyType", newJString(PolicyType))
  add(query_595697, "Version", newJString(Version))
  add(query_595697, "PolicyName", newJString(PolicyName))
  add(query_595697, "ScalingAdjustment", newJInt(ScalingAdjustment))
  result = call_595696.call(nil, query_595697, nil, nil, nil)

var getPutScalingPolicy* = Call_GetPutScalingPolicy_595668(
    name: "getPutScalingPolicy", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=PutScalingPolicy",
    validator: validate_GetPutScalingPolicy_595669, base: "/",
    url: url_GetPutScalingPolicy_595670, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutScheduledUpdateGroupAction_595753 = ref object of OpenApiRestCall_593437
proc url_PostPutScheduledUpdateGroupAction_595755(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostPutScheduledUpdateGroupAction_595754(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates or updates a scheduled scaling action for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html">Scheduled Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595756 = query.getOrDefault("Action")
  valid_595756 = validateParameter(valid_595756, JString, required = true, default = newJString(
      "PutScheduledUpdateGroupAction"))
  if valid_595756 != nil:
    section.add "Action", valid_595756
  var valid_595757 = query.getOrDefault("Version")
  valid_595757 = validateParameter(valid_595757, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_595757 != nil:
    section.add "Version", valid_595757
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595758 = header.getOrDefault("X-Amz-Date")
  valid_595758 = validateParameter(valid_595758, JString, required = false,
                                 default = nil)
  if valid_595758 != nil:
    section.add "X-Amz-Date", valid_595758
  var valid_595759 = header.getOrDefault("X-Amz-Security-Token")
  valid_595759 = validateParameter(valid_595759, JString, required = false,
                                 default = nil)
  if valid_595759 != nil:
    section.add "X-Amz-Security-Token", valid_595759
  var valid_595760 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595760 = validateParameter(valid_595760, JString, required = false,
                                 default = nil)
  if valid_595760 != nil:
    section.add "X-Amz-Content-Sha256", valid_595760
  var valid_595761 = header.getOrDefault("X-Amz-Algorithm")
  valid_595761 = validateParameter(valid_595761, JString, required = false,
                                 default = nil)
  if valid_595761 != nil:
    section.add "X-Amz-Algorithm", valid_595761
  var valid_595762 = header.getOrDefault("X-Amz-Signature")
  valid_595762 = validateParameter(valid_595762, JString, required = false,
                                 default = nil)
  if valid_595762 != nil:
    section.add "X-Amz-Signature", valid_595762
  var valid_595763 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595763 = validateParameter(valid_595763, JString, required = false,
                                 default = nil)
  if valid_595763 != nil:
    section.add "X-Amz-SignedHeaders", valid_595763
  var valid_595764 = header.getOrDefault("X-Amz-Credential")
  valid_595764 = validateParameter(valid_595764, JString, required = false,
                                 default = nil)
  if valid_595764 != nil:
    section.add "X-Amz-Credential", valid_595764
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Recurrence: JString
  ##             : <p>The recurring schedule for this action, in Unix cron syntax format. This format consists of five fields separated by white spaces: [Minute] [Hour] [Day_of_Month] [Month_of_Year] [Day_of_Week]. The value must be in quotes (for example, <code>"30 0 1 1,6,12 *"</code>). For more information about this format, see <a href="http://crontab.org">Crontab</a>.</p> <p>When <code>StartTime</code> and <code>EndTime</code> are specified with <code>Recurrence</code>, they form the boundaries of when the recurring action starts and stops.</p>
  ##   DesiredCapacity: JInt
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   Time: JString
  ##       : This parameter is no longer used.
  ##   StartTime: JString
  ##            : <p>The date and time for this action to start, in YYYY-MM-DDThh:mm:ssZ format in UTC/GMT only and in quotes (for example, <code>"2019-06-01T00:00:00Z"</code>).</p> <p>If you specify <code>Recurrence</code> and <code>StartTime</code>, Amazon EC2 Auto Scaling performs the action at this time, and then performs the action based on the specified recurrence.</p> <p>If you try to schedule your action in the past, Amazon EC2 Auto Scaling returns an error message.</p>
  ##   ScheduledActionName: JString (required)
  ##                      : The name of this scaling action.
  ##   MinSize: JInt
  ##          : The minimum number of instances in the Auto Scaling group.
  ##   MaxSize: JInt
  ##          : The maximum number of instances in the Auto Scaling group.
  ##   EndTime: JString
  ##          : The date and time for the recurring schedule to end. Amazon EC2 Auto Scaling does not perform the action after this time. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_595765 = formData.getOrDefault("AutoScalingGroupName")
  valid_595765 = validateParameter(valid_595765, JString, required = true,
                                 default = nil)
  if valid_595765 != nil:
    section.add "AutoScalingGroupName", valid_595765
  var valid_595766 = formData.getOrDefault("Recurrence")
  valid_595766 = validateParameter(valid_595766, JString, required = false,
                                 default = nil)
  if valid_595766 != nil:
    section.add "Recurrence", valid_595766
  var valid_595767 = formData.getOrDefault("DesiredCapacity")
  valid_595767 = validateParameter(valid_595767, JInt, required = false, default = nil)
  if valid_595767 != nil:
    section.add "DesiredCapacity", valid_595767
  var valid_595768 = formData.getOrDefault("Time")
  valid_595768 = validateParameter(valid_595768, JString, required = false,
                                 default = nil)
  if valid_595768 != nil:
    section.add "Time", valid_595768
  var valid_595769 = formData.getOrDefault("StartTime")
  valid_595769 = validateParameter(valid_595769, JString, required = false,
                                 default = nil)
  if valid_595769 != nil:
    section.add "StartTime", valid_595769
  var valid_595770 = formData.getOrDefault("ScheduledActionName")
  valid_595770 = validateParameter(valid_595770, JString, required = true,
                                 default = nil)
  if valid_595770 != nil:
    section.add "ScheduledActionName", valid_595770
  var valid_595771 = formData.getOrDefault("MinSize")
  valid_595771 = validateParameter(valid_595771, JInt, required = false, default = nil)
  if valid_595771 != nil:
    section.add "MinSize", valid_595771
  var valid_595772 = formData.getOrDefault("MaxSize")
  valid_595772 = validateParameter(valid_595772, JInt, required = false, default = nil)
  if valid_595772 != nil:
    section.add "MaxSize", valid_595772
  var valid_595773 = formData.getOrDefault("EndTime")
  valid_595773 = validateParameter(valid_595773, JString, required = false,
                                 default = nil)
  if valid_595773 != nil:
    section.add "EndTime", valid_595773
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595774: Call_PostPutScheduledUpdateGroupAction_595753;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates or updates a scheduled scaling action for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html">Scheduled Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_595774.validator(path, query, header, formData, body)
  let scheme = call_595774.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595774.url(scheme.get, call_595774.host, call_595774.base,
                         call_595774.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595774, url, valid)

proc call*(call_595775: Call_PostPutScheduledUpdateGroupAction_595753;
          AutoScalingGroupName: string; ScheduledActionName: string;
          Recurrence: string = ""; DesiredCapacity: int = 0; Time: string = "";
          StartTime: string = ""; Action: string = "PutScheduledUpdateGroupAction";
          MinSize: int = 0; MaxSize: int = 0; EndTime: string = "";
          Version: string = "2011-01-01"): Recallable =
  ## postPutScheduledUpdateGroupAction
  ## <p>Creates or updates a scheduled scaling action for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html">Scheduled Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Recurrence: string
  ##             : <p>The recurring schedule for this action, in Unix cron syntax format. This format consists of five fields separated by white spaces: [Minute] [Hour] [Day_of_Month] [Month_of_Year] [Day_of_Week]. The value must be in quotes (for example, <code>"30 0 1 1,6,12 *"</code>). For more information about this format, see <a href="http://crontab.org">Crontab</a>.</p> <p>When <code>StartTime</code> and <code>EndTime</code> are specified with <code>Recurrence</code>, they form the boundaries of when the recurring action starts and stops.</p>
  ##   DesiredCapacity: int
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   Time: string
  ##       : This parameter is no longer used.
  ##   StartTime: string
  ##            : <p>The date and time for this action to start, in YYYY-MM-DDThh:mm:ssZ format in UTC/GMT only and in quotes (for example, <code>"2019-06-01T00:00:00Z"</code>).</p> <p>If you specify <code>Recurrence</code> and <code>StartTime</code>, Amazon EC2 Auto Scaling performs the action at this time, and then performs the action based on the specified recurrence.</p> <p>If you try to schedule your action in the past, Amazon EC2 Auto Scaling returns an error message.</p>
  ##   Action: string (required)
  ##   ScheduledActionName: string (required)
  ##                      : The name of this scaling action.
  ##   MinSize: int
  ##          : The minimum number of instances in the Auto Scaling group.
  ##   MaxSize: int
  ##          : The maximum number of instances in the Auto Scaling group.
  ##   EndTime: string
  ##          : The date and time for the recurring schedule to end. Amazon EC2 Auto Scaling does not perform the action after this time. 
  ##   Version: string (required)
  var query_595776 = newJObject()
  var formData_595777 = newJObject()
  add(formData_595777, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_595777, "Recurrence", newJString(Recurrence))
  add(formData_595777, "DesiredCapacity", newJInt(DesiredCapacity))
  add(formData_595777, "Time", newJString(Time))
  add(formData_595777, "StartTime", newJString(StartTime))
  add(query_595776, "Action", newJString(Action))
  add(formData_595777, "ScheduledActionName", newJString(ScheduledActionName))
  add(formData_595777, "MinSize", newJInt(MinSize))
  add(formData_595777, "MaxSize", newJInt(MaxSize))
  add(formData_595777, "EndTime", newJString(EndTime))
  add(query_595776, "Version", newJString(Version))
  result = call_595775.call(nil, query_595776, nil, formData_595777, nil)

var postPutScheduledUpdateGroupAction* = Call_PostPutScheduledUpdateGroupAction_595753(
    name: "postPutScheduledUpdateGroupAction", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=PutScheduledUpdateGroupAction",
    validator: validate_PostPutScheduledUpdateGroupAction_595754, base: "/",
    url: url_PostPutScheduledUpdateGroupAction_595755,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutScheduledUpdateGroupAction_595729 = ref object of OpenApiRestCall_593437
proc url_GetPutScheduledUpdateGroupAction_595731(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetPutScheduledUpdateGroupAction_595730(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates or updates a scheduled scaling action for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html">Scheduled Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DesiredCapacity: JInt
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   ScheduledActionName: JString (required)
  ##                      : The name of this scaling action.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Time: JString
  ##       : This parameter is no longer used.
  ##   StartTime: JString
  ##            : <p>The date and time for this action to start, in YYYY-MM-DDThh:mm:ssZ format in UTC/GMT only and in quotes (for example, <code>"2019-06-01T00:00:00Z"</code>).</p> <p>If you specify <code>Recurrence</code> and <code>StartTime</code>, Amazon EC2 Auto Scaling performs the action at this time, and then performs the action based on the specified recurrence.</p> <p>If you try to schedule your action in the past, Amazon EC2 Auto Scaling returns an error message.</p>
  ##   Recurrence: JString
  ##             : <p>The recurring schedule for this action, in Unix cron syntax format. This format consists of five fields separated by white spaces: [Minute] [Hour] [Day_of_Month] [Month_of_Year] [Day_of_Week]. The value must be in quotes (for example, <code>"30 0 1 1,6,12 *"</code>). For more information about this format, see <a href="http://crontab.org">Crontab</a>.</p> <p>When <code>StartTime</code> and <code>EndTime</code> are specified with <code>Recurrence</code>, they form the boundaries of when the recurring action starts and stops.</p>
  ##   Action: JString (required)
  ##   MaxSize: JInt
  ##          : The maximum number of instances in the Auto Scaling group.
  ##   EndTime: JString
  ##          : The date and time for the recurring schedule to end. Amazon EC2 Auto Scaling does not perform the action after this time. 
  ##   MinSize: JInt
  ##          : The minimum number of instances in the Auto Scaling group.
  ##   Version: JString (required)
  section = newJObject()
  var valid_595732 = query.getOrDefault("DesiredCapacity")
  valid_595732 = validateParameter(valid_595732, JInt, required = false, default = nil)
  if valid_595732 != nil:
    section.add "DesiredCapacity", valid_595732
  assert query != nil, "query argument is necessary due to required `ScheduledActionName` field"
  var valid_595733 = query.getOrDefault("ScheduledActionName")
  valid_595733 = validateParameter(valid_595733, JString, required = true,
                                 default = nil)
  if valid_595733 != nil:
    section.add "ScheduledActionName", valid_595733
  var valid_595734 = query.getOrDefault("AutoScalingGroupName")
  valid_595734 = validateParameter(valid_595734, JString, required = true,
                                 default = nil)
  if valid_595734 != nil:
    section.add "AutoScalingGroupName", valid_595734
  var valid_595735 = query.getOrDefault("Time")
  valid_595735 = validateParameter(valid_595735, JString, required = false,
                                 default = nil)
  if valid_595735 != nil:
    section.add "Time", valid_595735
  var valid_595736 = query.getOrDefault("StartTime")
  valid_595736 = validateParameter(valid_595736, JString, required = false,
                                 default = nil)
  if valid_595736 != nil:
    section.add "StartTime", valid_595736
  var valid_595737 = query.getOrDefault("Recurrence")
  valid_595737 = validateParameter(valid_595737, JString, required = false,
                                 default = nil)
  if valid_595737 != nil:
    section.add "Recurrence", valid_595737
  var valid_595738 = query.getOrDefault("Action")
  valid_595738 = validateParameter(valid_595738, JString, required = true, default = newJString(
      "PutScheduledUpdateGroupAction"))
  if valid_595738 != nil:
    section.add "Action", valid_595738
  var valid_595739 = query.getOrDefault("MaxSize")
  valid_595739 = validateParameter(valid_595739, JInt, required = false, default = nil)
  if valid_595739 != nil:
    section.add "MaxSize", valid_595739
  var valid_595740 = query.getOrDefault("EndTime")
  valid_595740 = validateParameter(valid_595740, JString, required = false,
                                 default = nil)
  if valid_595740 != nil:
    section.add "EndTime", valid_595740
  var valid_595741 = query.getOrDefault("MinSize")
  valid_595741 = validateParameter(valid_595741, JInt, required = false, default = nil)
  if valid_595741 != nil:
    section.add "MinSize", valid_595741
  var valid_595742 = query.getOrDefault("Version")
  valid_595742 = validateParameter(valid_595742, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_595742 != nil:
    section.add "Version", valid_595742
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595743 = header.getOrDefault("X-Amz-Date")
  valid_595743 = validateParameter(valid_595743, JString, required = false,
                                 default = nil)
  if valid_595743 != nil:
    section.add "X-Amz-Date", valid_595743
  var valid_595744 = header.getOrDefault("X-Amz-Security-Token")
  valid_595744 = validateParameter(valid_595744, JString, required = false,
                                 default = nil)
  if valid_595744 != nil:
    section.add "X-Amz-Security-Token", valid_595744
  var valid_595745 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595745 = validateParameter(valid_595745, JString, required = false,
                                 default = nil)
  if valid_595745 != nil:
    section.add "X-Amz-Content-Sha256", valid_595745
  var valid_595746 = header.getOrDefault("X-Amz-Algorithm")
  valid_595746 = validateParameter(valid_595746, JString, required = false,
                                 default = nil)
  if valid_595746 != nil:
    section.add "X-Amz-Algorithm", valid_595746
  var valid_595747 = header.getOrDefault("X-Amz-Signature")
  valid_595747 = validateParameter(valid_595747, JString, required = false,
                                 default = nil)
  if valid_595747 != nil:
    section.add "X-Amz-Signature", valid_595747
  var valid_595748 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595748 = validateParameter(valid_595748, JString, required = false,
                                 default = nil)
  if valid_595748 != nil:
    section.add "X-Amz-SignedHeaders", valid_595748
  var valid_595749 = header.getOrDefault("X-Amz-Credential")
  valid_595749 = validateParameter(valid_595749, JString, required = false,
                                 default = nil)
  if valid_595749 != nil:
    section.add "X-Amz-Credential", valid_595749
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595750: Call_GetPutScheduledUpdateGroupAction_595729;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates or updates a scheduled scaling action for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html">Scheduled Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_595750.validator(path, query, header, formData, body)
  let scheme = call_595750.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595750.url(scheme.get, call_595750.host, call_595750.base,
                         call_595750.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595750, url, valid)

proc call*(call_595751: Call_GetPutScheduledUpdateGroupAction_595729;
          ScheduledActionName: string; AutoScalingGroupName: string;
          DesiredCapacity: int = 0; Time: string = ""; StartTime: string = "";
          Recurrence: string = ""; Action: string = "PutScheduledUpdateGroupAction";
          MaxSize: int = 0; EndTime: string = ""; MinSize: int = 0;
          Version: string = "2011-01-01"): Recallable =
  ## getPutScheduledUpdateGroupAction
  ## <p>Creates or updates a scheduled scaling action for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html">Scheduled Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   DesiredCapacity: int
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   ScheduledActionName: string (required)
  ##                      : The name of this scaling action.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Time: string
  ##       : This parameter is no longer used.
  ##   StartTime: string
  ##            : <p>The date and time for this action to start, in YYYY-MM-DDThh:mm:ssZ format in UTC/GMT only and in quotes (for example, <code>"2019-06-01T00:00:00Z"</code>).</p> <p>If you specify <code>Recurrence</code> and <code>StartTime</code>, Amazon EC2 Auto Scaling performs the action at this time, and then performs the action based on the specified recurrence.</p> <p>If you try to schedule your action in the past, Amazon EC2 Auto Scaling returns an error message.</p>
  ##   Recurrence: string
  ##             : <p>The recurring schedule for this action, in Unix cron syntax format. This format consists of five fields separated by white spaces: [Minute] [Hour] [Day_of_Month] [Month_of_Year] [Day_of_Week]. The value must be in quotes (for example, <code>"30 0 1 1,6,12 *"</code>). For more information about this format, see <a href="http://crontab.org">Crontab</a>.</p> <p>When <code>StartTime</code> and <code>EndTime</code> are specified with <code>Recurrence</code>, they form the boundaries of when the recurring action starts and stops.</p>
  ##   Action: string (required)
  ##   MaxSize: int
  ##          : The maximum number of instances in the Auto Scaling group.
  ##   EndTime: string
  ##          : The date and time for the recurring schedule to end. Amazon EC2 Auto Scaling does not perform the action after this time. 
  ##   MinSize: int
  ##          : The minimum number of instances in the Auto Scaling group.
  ##   Version: string (required)
  var query_595752 = newJObject()
  add(query_595752, "DesiredCapacity", newJInt(DesiredCapacity))
  add(query_595752, "ScheduledActionName", newJString(ScheduledActionName))
  add(query_595752, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_595752, "Time", newJString(Time))
  add(query_595752, "StartTime", newJString(StartTime))
  add(query_595752, "Recurrence", newJString(Recurrence))
  add(query_595752, "Action", newJString(Action))
  add(query_595752, "MaxSize", newJInt(MaxSize))
  add(query_595752, "EndTime", newJString(EndTime))
  add(query_595752, "MinSize", newJInt(MinSize))
  add(query_595752, "Version", newJString(Version))
  result = call_595751.call(nil, query_595752, nil, nil, nil)

var getPutScheduledUpdateGroupAction* = Call_GetPutScheduledUpdateGroupAction_595729(
    name: "getPutScheduledUpdateGroupAction", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=PutScheduledUpdateGroupAction",
    validator: validate_GetPutScheduledUpdateGroupAction_595730, base: "/",
    url: url_GetPutScheduledUpdateGroupAction_595731,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRecordLifecycleActionHeartbeat_595797 = ref object of OpenApiRestCall_593437
proc url_PostRecordLifecycleActionHeartbeat_595799(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRecordLifecycleActionHeartbeat_595798(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using <a>PutLifecycleHook</a>.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p> <b>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</b> </p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html">Auto Scaling Lifecycle</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595800 = query.getOrDefault("Action")
  valid_595800 = validateParameter(valid_595800, JString, required = true, default = newJString(
      "RecordLifecycleActionHeartbeat"))
  if valid_595800 != nil:
    section.add "Action", valid_595800
  var valid_595801 = query.getOrDefault("Version")
  valid_595801 = validateParameter(valid_595801, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_595801 != nil:
    section.add "Version", valid_595801
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595802 = header.getOrDefault("X-Amz-Date")
  valid_595802 = validateParameter(valid_595802, JString, required = false,
                                 default = nil)
  if valid_595802 != nil:
    section.add "X-Amz-Date", valid_595802
  var valid_595803 = header.getOrDefault("X-Amz-Security-Token")
  valid_595803 = validateParameter(valid_595803, JString, required = false,
                                 default = nil)
  if valid_595803 != nil:
    section.add "X-Amz-Security-Token", valid_595803
  var valid_595804 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595804 = validateParameter(valid_595804, JString, required = false,
                                 default = nil)
  if valid_595804 != nil:
    section.add "X-Amz-Content-Sha256", valid_595804
  var valid_595805 = header.getOrDefault("X-Amz-Algorithm")
  valid_595805 = validateParameter(valid_595805, JString, required = false,
                                 default = nil)
  if valid_595805 != nil:
    section.add "X-Amz-Algorithm", valid_595805
  var valid_595806 = header.getOrDefault("X-Amz-Signature")
  valid_595806 = validateParameter(valid_595806, JString, required = false,
                                 default = nil)
  if valid_595806 != nil:
    section.add "X-Amz-Signature", valid_595806
  var valid_595807 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595807 = validateParameter(valid_595807, JString, required = false,
                                 default = nil)
  if valid_595807 != nil:
    section.add "X-Amz-SignedHeaders", valid_595807
  var valid_595808 = header.getOrDefault("X-Amz-Credential")
  valid_595808 = validateParameter(valid_595808, JString, required = false,
                                 default = nil)
  if valid_595808 != nil:
    section.add "X-Amz-Credential", valid_595808
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceId: JString
  ##             : The ID of the instance.
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   LifecycleActionToken: JString
  ##                       : A token that uniquely identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target that you specified when you created the lifecycle hook.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_595809 = formData.getOrDefault("AutoScalingGroupName")
  valid_595809 = validateParameter(valid_595809, JString, required = true,
                                 default = nil)
  if valid_595809 != nil:
    section.add "AutoScalingGroupName", valid_595809
  var valid_595810 = formData.getOrDefault("InstanceId")
  valid_595810 = validateParameter(valid_595810, JString, required = false,
                                 default = nil)
  if valid_595810 != nil:
    section.add "InstanceId", valid_595810
  var valid_595811 = formData.getOrDefault("LifecycleHookName")
  valid_595811 = validateParameter(valid_595811, JString, required = true,
                                 default = nil)
  if valid_595811 != nil:
    section.add "LifecycleHookName", valid_595811
  var valid_595812 = formData.getOrDefault("LifecycleActionToken")
  valid_595812 = validateParameter(valid_595812, JString, required = false,
                                 default = nil)
  if valid_595812 != nil:
    section.add "LifecycleActionToken", valid_595812
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595813: Call_PostRecordLifecycleActionHeartbeat_595797;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using <a>PutLifecycleHook</a>.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p> <b>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</b> </p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html">Auto Scaling Lifecycle</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_595813.validator(path, query, header, formData, body)
  let scheme = call_595813.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595813.url(scheme.get, call_595813.host, call_595813.base,
                         call_595813.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595813, url, valid)

proc call*(call_595814: Call_PostRecordLifecycleActionHeartbeat_595797;
          AutoScalingGroupName: string; LifecycleHookName: string;
          Action: string = "RecordLifecycleActionHeartbeat";
          InstanceId: string = ""; Version: string = "2011-01-01";
          LifecycleActionToken: string = ""): Recallable =
  ## postRecordLifecycleActionHeartbeat
  ## <p>Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using <a>PutLifecycleHook</a>.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p> <b>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</b> </p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html">Auto Scaling Lifecycle</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   InstanceId: string
  ##             : The ID of the instance.
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   Version: string (required)
  ##   LifecycleActionToken: string
  ##                       : A token that uniquely identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target that you specified when you created the lifecycle hook.
  var query_595815 = newJObject()
  var formData_595816 = newJObject()
  add(formData_595816, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_595815, "Action", newJString(Action))
  add(formData_595816, "InstanceId", newJString(InstanceId))
  add(formData_595816, "LifecycleHookName", newJString(LifecycleHookName))
  add(query_595815, "Version", newJString(Version))
  add(formData_595816, "LifecycleActionToken", newJString(LifecycleActionToken))
  result = call_595814.call(nil, query_595815, nil, formData_595816, nil)

var postRecordLifecycleActionHeartbeat* = Call_PostRecordLifecycleActionHeartbeat_595797(
    name: "postRecordLifecycleActionHeartbeat", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=RecordLifecycleActionHeartbeat",
    validator: validate_PostRecordLifecycleActionHeartbeat_595798, base: "/",
    url: url_PostRecordLifecycleActionHeartbeat_595799,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRecordLifecycleActionHeartbeat_595778 = ref object of OpenApiRestCall_593437
proc url_GetRecordLifecycleActionHeartbeat_595780(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRecordLifecycleActionHeartbeat_595779(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using <a>PutLifecycleHook</a>.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p> <b>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</b> </p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html">Auto Scaling Lifecycle</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   InstanceId: JString
  ##             : The ID of the instance.
  ##   Version: JString (required)
  ##   LifecycleActionToken: JString
  ##                       : A token that uniquely identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target that you specified when you created the lifecycle hook.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_595781 = query.getOrDefault("AutoScalingGroupName")
  valid_595781 = validateParameter(valid_595781, JString, required = true,
                                 default = nil)
  if valid_595781 != nil:
    section.add "AutoScalingGroupName", valid_595781
  var valid_595782 = query.getOrDefault("Action")
  valid_595782 = validateParameter(valid_595782, JString, required = true, default = newJString(
      "RecordLifecycleActionHeartbeat"))
  if valid_595782 != nil:
    section.add "Action", valid_595782
  var valid_595783 = query.getOrDefault("LifecycleHookName")
  valid_595783 = validateParameter(valid_595783, JString, required = true,
                                 default = nil)
  if valid_595783 != nil:
    section.add "LifecycleHookName", valid_595783
  var valid_595784 = query.getOrDefault("InstanceId")
  valid_595784 = validateParameter(valid_595784, JString, required = false,
                                 default = nil)
  if valid_595784 != nil:
    section.add "InstanceId", valid_595784
  var valid_595785 = query.getOrDefault("Version")
  valid_595785 = validateParameter(valid_595785, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_595785 != nil:
    section.add "Version", valid_595785
  var valid_595786 = query.getOrDefault("LifecycleActionToken")
  valid_595786 = validateParameter(valid_595786, JString, required = false,
                                 default = nil)
  if valid_595786 != nil:
    section.add "LifecycleActionToken", valid_595786
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595787 = header.getOrDefault("X-Amz-Date")
  valid_595787 = validateParameter(valid_595787, JString, required = false,
                                 default = nil)
  if valid_595787 != nil:
    section.add "X-Amz-Date", valid_595787
  var valid_595788 = header.getOrDefault("X-Amz-Security-Token")
  valid_595788 = validateParameter(valid_595788, JString, required = false,
                                 default = nil)
  if valid_595788 != nil:
    section.add "X-Amz-Security-Token", valid_595788
  var valid_595789 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595789 = validateParameter(valid_595789, JString, required = false,
                                 default = nil)
  if valid_595789 != nil:
    section.add "X-Amz-Content-Sha256", valid_595789
  var valid_595790 = header.getOrDefault("X-Amz-Algorithm")
  valid_595790 = validateParameter(valid_595790, JString, required = false,
                                 default = nil)
  if valid_595790 != nil:
    section.add "X-Amz-Algorithm", valid_595790
  var valid_595791 = header.getOrDefault("X-Amz-Signature")
  valid_595791 = validateParameter(valid_595791, JString, required = false,
                                 default = nil)
  if valid_595791 != nil:
    section.add "X-Amz-Signature", valid_595791
  var valid_595792 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595792 = validateParameter(valid_595792, JString, required = false,
                                 default = nil)
  if valid_595792 != nil:
    section.add "X-Amz-SignedHeaders", valid_595792
  var valid_595793 = header.getOrDefault("X-Amz-Credential")
  valid_595793 = validateParameter(valid_595793, JString, required = false,
                                 default = nil)
  if valid_595793 != nil:
    section.add "X-Amz-Credential", valid_595793
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595794: Call_GetRecordLifecycleActionHeartbeat_595778;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using <a>PutLifecycleHook</a>.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p> <b>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</b> </p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html">Auto Scaling Lifecycle</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_595794.validator(path, query, header, formData, body)
  let scheme = call_595794.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595794.url(scheme.get, call_595794.host, call_595794.base,
                         call_595794.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595794, url, valid)

proc call*(call_595795: Call_GetRecordLifecycleActionHeartbeat_595778;
          AutoScalingGroupName: string; LifecycleHookName: string;
          Action: string = "RecordLifecycleActionHeartbeat";
          InstanceId: string = ""; Version: string = "2011-01-01";
          LifecycleActionToken: string = ""): Recallable =
  ## getRecordLifecycleActionHeartbeat
  ## <p>Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using <a>PutLifecycleHook</a>.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p> <b>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</b> </p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html">Auto Scaling Lifecycle</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   InstanceId: string
  ##             : The ID of the instance.
  ##   Version: string (required)
  ##   LifecycleActionToken: string
  ##                       : A token that uniquely identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target that you specified when you created the lifecycle hook.
  var query_595796 = newJObject()
  add(query_595796, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_595796, "Action", newJString(Action))
  add(query_595796, "LifecycleHookName", newJString(LifecycleHookName))
  add(query_595796, "InstanceId", newJString(InstanceId))
  add(query_595796, "Version", newJString(Version))
  add(query_595796, "LifecycleActionToken", newJString(LifecycleActionToken))
  result = call_595795.call(nil, query_595796, nil, nil, nil)

var getRecordLifecycleActionHeartbeat* = Call_GetRecordLifecycleActionHeartbeat_595778(
    name: "getRecordLifecycleActionHeartbeat", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=RecordLifecycleActionHeartbeat",
    validator: validate_GetRecordLifecycleActionHeartbeat_595779, base: "/",
    url: url_GetRecordLifecycleActionHeartbeat_595780,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResumeProcesses_595834 = ref object of OpenApiRestCall_593437
proc url_PostResumeProcesses_595836(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostResumeProcesses_595835(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Resumes the specified suspended automatic scaling processes, or all suspended process, for the specified Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595837 = query.getOrDefault("Action")
  valid_595837 = validateParameter(valid_595837, JString, required = true,
                                 default = newJString("ResumeProcesses"))
  if valid_595837 != nil:
    section.add "Action", valid_595837
  var valid_595838 = query.getOrDefault("Version")
  valid_595838 = validateParameter(valid_595838, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_595838 != nil:
    section.add "Version", valid_595838
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595839 = header.getOrDefault("X-Amz-Date")
  valid_595839 = validateParameter(valid_595839, JString, required = false,
                                 default = nil)
  if valid_595839 != nil:
    section.add "X-Amz-Date", valid_595839
  var valid_595840 = header.getOrDefault("X-Amz-Security-Token")
  valid_595840 = validateParameter(valid_595840, JString, required = false,
                                 default = nil)
  if valid_595840 != nil:
    section.add "X-Amz-Security-Token", valid_595840
  var valid_595841 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595841 = validateParameter(valid_595841, JString, required = false,
                                 default = nil)
  if valid_595841 != nil:
    section.add "X-Amz-Content-Sha256", valid_595841
  var valid_595842 = header.getOrDefault("X-Amz-Algorithm")
  valid_595842 = validateParameter(valid_595842, JString, required = false,
                                 default = nil)
  if valid_595842 != nil:
    section.add "X-Amz-Algorithm", valid_595842
  var valid_595843 = header.getOrDefault("X-Amz-Signature")
  valid_595843 = validateParameter(valid_595843, JString, required = false,
                                 default = nil)
  if valid_595843 != nil:
    section.add "X-Amz-Signature", valid_595843
  var valid_595844 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595844 = validateParameter(valid_595844, JString, required = false,
                                 default = nil)
  if valid_595844 != nil:
    section.add "X-Amz-SignedHeaders", valid_595844
  var valid_595845 = header.getOrDefault("X-Amz-Credential")
  valid_595845 = validateParameter(valid_595845, JString, required = false,
                                 default = nil)
  if valid_595845 != nil:
    section.add "X-Amz-Credential", valid_595845
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_595846 = formData.getOrDefault("AutoScalingGroupName")
  valid_595846 = validateParameter(valid_595846, JString, required = true,
                                 default = nil)
  if valid_595846 != nil:
    section.add "AutoScalingGroupName", valid_595846
  var valid_595847 = formData.getOrDefault("ScalingProcesses")
  valid_595847 = validateParameter(valid_595847, JArray, required = false,
                                 default = nil)
  if valid_595847 != nil:
    section.add "ScalingProcesses", valid_595847
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595848: Call_PostResumeProcesses_595834; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Resumes the specified suspended automatic scaling processes, or all suspended process, for the specified Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_595848.validator(path, query, header, formData, body)
  let scheme = call_595848.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595848.url(scheme.get, call_595848.host, call_595848.base,
                         call_595848.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595848, url, valid)

proc call*(call_595849: Call_PostResumeProcesses_595834;
          AutoScalingGroupName: string; ScalingProcesses: JsonNode = nil;
          Action: string = "ResumeProcesses"; Version: string = "2011-01-01"): Recallable =
  ## postResumeProcesses
  ## <p>Resumes the specified suspended automatic scaling processes, or all suspended process, for the specified Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595850 = newJObject()
  var formData_595851 = newJObject()
  add(formData_595851, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if ScalingProcesses != nil:
    formData_595851.add "ScalingProcesses", ScalingProcesses
  add(query_595850, "Action", newJString(Action))
  add(query_595850, "Version", newJString(Version))
  result = call_595849.call(nil, query_595850, nil, formData_595851, nil)

var postResumeProcesses* = Call_PostResumeProcesses_595834(
    name: "postResumeProcesses", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=ResumeProcesses",
    validator: validate_PostResumeProcesses_595835, base: "/",
    url: url_PostResumeProcesses_595836, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResumeProcesses_595817 = ref object of OpenApiRestCall_593437
proc url_GetResumeProcesses_595819(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetResumeProcesses_595818(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Resumes the specified suspended automatic scaling processes, or all suspended process, for the specified Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_595820 = query.getOrDefault("ScalingProcesses")
  valid_595820 = validateParameter(valid_595820, JArray, required = false,
                                 default = nil)
  if valid_595820 != nil:
    section.add "ScalingProcesses", valid_595820
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_595821 = query.getOrDefault("AutoScalingGroupName")
  valid_595821 = validateParameter(valid_595821, JString, required = true,
                                 default = nil)
  if valid_595821 != nil:
    section.add "AutoScalingGroupName", valid_595821
  var valid_595822 = query.getOrDefault("Action")
  valid_595822 = validateParameter(valid_595822, JString, required = true,
                                 default = newJString("ResumeProcesses"))
  if valid_595822 != nil:
    section.add "Action", valid_595822
  var valid_595823 = query.getOrDefault("Version")
  valid_595823 = validateParameter(valid_595823, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_595823 != nil:
    section.add "Version", valid_595823
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595824 = header.getOrDefault("X-Amz-Date")
  valid_595824 = validateParameter(valid_595824, JString, required = false,
                                 default = nil)
  if valid_595824 != nil:
    section.add "X-Amz-Date", valid_595824
  var valid_595825 = header.getOrDefault("X-Amz-Security-Token")
  valid_595825 = validateParameter(valid_595825, JString, required = false,
                                 default = nil)
  if valid_595825 != nil:
    section.add "X-Amz-Security-Token", valid_595825
  var valid_595826 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595826 = validateParameter(valid_595826, JString, required = false,
                                 default = nil)
  if valid_595826 != nil:
    section.add "X-Amz-Content-Sha256", valid_595826
  var valid_595827 = header.getOrDefault("X-Amz-Algorithm")
  valid_595827 = validateParameter(valid_595827, JString, required = false,
                                 default = nil)
  if valid_595827 != nil:
    section.add "X-Amz-Algorithm", valid_595827
  var valid_595828 = header.getOrDefault("X-Amz-Signature")
  valid_595828 = validateParameter(valid_595828, JString, required = false,
                                 default = nil)
  if valid_595828 != nil:
    section.add "X-Amz-Signature", valid_595828
  var valid_595829 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595829 = validateParameter(valid_595829, JString, required = false,
                                 default = nil)
  if valid_595829 != nil:
    section.add "X-Amz-SignedHeaders", valid_595829
  var valid_595830 = header.getOrDefault("X-Amz-Credential")
  valid_595830 = validateParameter(valid_595830, JString, required = false,
                                 default = nil)
  if valid_595830 != nil:
    section.add "X-Amz-Credential", valid_595830
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595831: Call_GetResumeProcesses_595817; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Resumes the specified suspended automatic scaling processes, or all suspended process, for the specified Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_595831.validator(path, query, header, formData, body)
  let scheme = call_595831.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595831.url(scheme.get, call_595831.host, call_595831.base,
                         call_595831.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595831, url, valid)

proc call*(call_595832: Call_GetResumeProcesses_595817;
          AutoScalingGroupName: string; ScalingProcesses: JsonNode = nil;
          Action: string = "ResumeProcesses"; Version: string = "2011-01-01"): Recallable =
  ## getResumeProcesses
  ## <p>Resumes the specified suspended automatic scaling processes, or all suspended process, for the specified Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595833 = newJObject()
  if ScalingProcesses != nil:
    query_595833.add "ScalingProcesses", ScalingProcesses
  add(query_595833, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_595833, "Action", newJString(Action))
  add(query_595833, "Version", newJString(Version))
  result = call_595832.call(nil, query_595833, nil, nil, nil)

var getResumeProcesses* = Call_GetResumeProcesses_595817(
    name: "getResumeProcesses", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=ResumeProcesses",
    validator: validate_GetResumeProcesses_595818, base: "/",
    url: url_GetResumeProcesses_595819, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetDesiredCapacity_595870 = ref object of OpenApiRestCall_593437
proc url_PostSetDesiredCapacity_595872(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostSetDesiredCapacity_595871(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the size of the specified Auto Scaling group.</p> <p>For more information about desired capacity, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">What Is Amazon EC2 Auto Scaling?</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595873 = query.getOrDefault("Action")
  valid_595873 = validateParameter(valid_595873, JString, required = true,
                                 default = newJString("SetDesiredCapacity"))
  if valid_595873 != nil:
    section.add "Action", valid_595873
  var valid_595874 = query.getOrDefault("Version")
  valid_595874 = validateParameter(valid_595874, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_595874 != nil:
    section.add "Version", valid_595874
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595875 = header.getOrDefault("X-Amz-Date")
  valid_595875 = validateParameter(valid_595875, JString, required = false,
                                 default = nil)
  if valid_595875 != nil:
    section.add "X-Amz-Date", valid_595875
  var valid_595876 = header.getOrDefault("X-Amz-Security-Token")
  valid_595876 = validateParameter(valid_595876, JString, required = false,
                                 default = nil)
  if valid_595876 != nil:
    section.add "X-Amz-Security-Token", valid_595876
  var valid_595877 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595877 = validateParameter(valid_595877, JString, required = false,
                                 default = nil)
  if valid_595877 != nil:
    section.add "X-Amz-Content-Sha256", valid_595877
  var valid_595878 = header.getOrDefault("X-Amz-Algorithm")
  valid_595878 = validateParameter(valid_595878, JString, required = false,
                                 default = nil)
  if valid_595878 != nil:
    section.add "X-Amz-Algorithm", valid_595878
  var valid_595879 = header.getOrDefault("X-Amz-Signature")
  valid_595879 = validateParameter(valid_595879, JString, required = false,
                                 default = nil)
  if valid_595879 != nil:
    section.add "X-Amz-Signature", valid_595879
  var valid_595880 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595880 = validateParameter(valid_595880, JString, required = false,
                                 default = nil)
  if valid_595880 != nil:
    section.add "X-Amz-SignedHeaders", valid_595880
  var valid_595881 = header.getOrDefault("X-Amz-Credential")
  valid_595881 = validateParameter(valid_595881, JString, required = false,
                                 default = nil)
  if valid_595881 != nil:
    section.add "X-Amz-Credential", valid_595881
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   DesiredCapacity: JInt (required)
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   HonorCooldown: JBool
  ##                : Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before initiating a scaling activity to set your Auto Scaling group to its new capacity. By default, Amazon EC2 Auto Scaling does not honor the cooldown period during manual scaling activities.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_595882 = formData.getOrDefault("AutoScalingGroupName")
  valid_595882 = validateParameter(valid_595882, JString, required = true,
                                 default = nil)
  if valid_595882 != nil:
    section.add "AutoScalingGroupName", valid_595882
  var valid_595883 = formData.getOrDefault("DesiredCapacity")
  valid_595883 = validateParameter(valid_595883, JInt, required = true, default = nil)
  if valid_595883 != nil:
    section.add "DesiredCapacity", valid_595883
  var valid_595884 = formData.getOrDefault("HonorCooldown")
  valid_595884 = validateParameter(valid_595884, JBool, required = false, default = nil)
  if valid_595884 != nil:
    section.add "HonorCooldown", valid_595884
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595885: Call_PostSetDesiredCapacity_595870; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the size of the specified Auto Scaling group.</p> <p>For more information about desired capacity, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">What Is Amazon EC2 Auto Scaling?</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_595885.validator(path, query, header, formData, body)
  let scheme = call_595885.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595885.url(scheme.get, call_595885.host, call_595885.base,
                         call_595885.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595885, url, valid)

proc call*(call_595886: Call_PostSetDesiredCapacity_595870;
          AutoScalingGroupName: string; DesiredCapacity: int;
          HonorCooldown: bool = false; Action: string = "SetDesiredCapacity";
          Version: string = "2011-01-01"): Recallable =
  ## postSetDesiredCapacity
  ## <p>Sets the size of the specified Auto Scaling group.</p> <p>For more information about desired capacity, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">What Is Amazon EC2 Auto Scaling?</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   DesiredCapacity: int (required)
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   HonorCooldown: bool
  ##                : Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before initiating a scaling activity to set your Auto Scaling group to its new capacity. By default, Amazon EC2 Auto Scaling does not honor the cooldown period during manual scaling activities.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595887 = newJObject()
  var formData_595888 = newJObject()
  add(formData_595888, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_595888, "DesiredCapacity", newJInt(DesiredCapacity))
  add(formData_595888, "HonorCooldown", newJBool(HonorCooldown))
  add(query_595887, "Action", newJString(Action))
  add(query_595887, "Version", newJString(Version))
  result = call_595886.call(nil, query_595887, nil, formData_595888, nil)

var postSetDesiredCapacity* = Call_PostSetDesiredCapacity_595870(
    name: "postSetDesiredCapacity", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=SetDesiredCapacity",
    validator: validate_PostSetDesiredCapacity_595871, base: "/",
    url: url_PostSetDesiredCapacity_595872, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetDesiredCapacity_595852 = ref object of OpenApiRestCall_593437
proc url_GetSetDesiredCapacity_595854(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetSetDesiredCapacity_595853(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the size of the specified Auto Scaling group.</p> <p>For more information about desired capacity, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">What Is Amazon EC2 Auto Scaling?</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DesiredCapacity: JInt (required)
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   HonorCooldown: JBool
  ##                : Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before initiating a scaling activity to set your Auto Scaling group to its new capacity. By default, Amazon EC2 Auto Scaling does not honor the cooldown period during manual scaling activities.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `DesiredCapacity` field"
  var valid_595855 = query.getOrDefault("DesiredCapacity")
  valid_595855 = validateParameter(valid_595855, JInt, required = true, default = nil)
  if valid_595855 != nil:
    section.add "DesiredCapacity", valid_595855
  var valid_595856 = query.getOrDefault("AutoScalingGroupName")
  valid_595856 = validateParameter(valid_595856, JString, required = true,
                                 default = nil)
  if valid_595856 != nil:
    section.add "AutoScalingGroupName", valid_595856
  var valid_595857 = query.getOrDefault("Action")
  valid_595857 = validateParameter(valid_595857, JString, required = true,
                                 default = newJString("SetDesiredCapacity"))
  if valid_595857 != nil:
    section.add "Action", valid_595857
  var valid_595858 = query.getOrDefault("HonorCooldown")
  valid_595858 = validateParameter(valid_595858, JBool, required = false, default = nil)
  if valid_595858 != nil:
    section.add "HonorCooldown", valid_595858
  var valid_595859 = query.getOrDefault("Version")
  valid_595859 = validateParameter(valid_595859, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_595859 != nil:
    section.add "Version", valid_595859
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595860 = header.getOrDefault("X-Amz-Date")
  valid_595860 = validateParameter(valid_595860, JString, required = false,
                                 default = nil)
  if valid_595860 != nil:
    section.add "X-Amz-Date", valid_595860
  var valid_595861 = header.getOrDefault("X-Amz-Security-Token")
  valid_595861 = validateParameter(valid_595861, JString, required = false,
                                 default = nil)
  if valid_595861 != nil:
    section.add "X-Amz-Security-Token", valid_595861
  var valid_595862 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595862 = validateParameter(valid_595862, JString, required = false,
                                 default = nil)
  if valid_595862 != nil:
    section.add "X-Amz-Content-Sha256", valid_595862
  var valid_595863 = header.getOrDefault("X-Amz-Algorithm")
  valid_595863 = validateParameter(valid_595863, JString, required = false,
                                 default = nil)
  if valid_595863 != nil:
    section.add "X-Amz-Algorithm", valid_595863
  var valid_595864 = header.getOrDefault("X-Amz-Signature")
  valid_595864 = validateParameter(valid_595864, JString, required = false,
                                 default = nil)
  if valid_595864 != nil:
    section.add "X-Amz-Signature", valid_595864
  var valid_595865 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595865 = validateParameter(valid_595865, JString, required = false,
                                 default = nil)
  if valid_595865 != nil:
    section.add "X-Amz-SignedHeaders", valid_595865
  var valid_595866 = header.getOrDefault("X-Amz-Credential")
  valid_595866 = validateParameter(valid_595866, JString, required = false,
                                 default = nil)
  if valid_595866 != nil:
    section.add "X-Amz-Credential", valid_595866
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595867: Call_GetSetDesiredCapacity_595852; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the size of the specified Auto Scaling group.</p> <p>For more information about desired capacity, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">What Is Amazon EC2 Auto Scaling?</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_595867.validator(path, query, header, formData, body)
  let scheme = call_595867.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595867.url(scheme.get, call_595867.host, call_595867.base,
                         call_595867.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595867, url, valid)

proc call*(call_595868: Call_GetSetDesiredCapacity_595852; DesiredCapacity: int;
          AutoScalingGroupName: string; Action: string = "SetDesiredCapacity";
          HonorCooldown: bool = false; Version: string = "2011-01-01"): Recallable =
  ## getSetDesiredCapacity
  ## <p>Sets the size of the specified Auto Scaling group.</p> <p>For more information about desired capacity, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">What Is Amazon EC2 Auto Scaling?</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   DesiredCapacity: int (required)
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   HonorCooldown: bool
  ##                : Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before initiating a scaling activity to set your Auto Scaling group to its new capacity. By default, Amazon EC2 Auto Scaling does not honor the cooldown period during manual scaling activities.
  ##   Version: string (required)
  var query_595869 = newJObject()
  add(query_595869, "DesiredCapacity", newJInt(DesiredCapacity))
  add(query_595869, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_595869, "Action", newJString(Action))
  add(query_595869, "HonorCooldown", newJBool(HonorCooldown))
  add(query_595869, "Version", newJString(Version))
  result = call_595868.call(nil, query_595869, nil, nil, nil)

var getSetDesiredCapacity* = Call_GetSetDesiredCapacity_595852(
    name: "getSetDesiredCapacity", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=SetDesiredCapacity",
    validator: validate_GetSetDesiredCapacity_595853, base: "/",
    url: url_GetSetDesiredCapacity_595854, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetInstanceHealth_595907 = ref object of OpenApiRestCall_593437
proc url_PostSetInstanceHealth_595909(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostSetInstanceHealth_595908(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the health status of the specified instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595910 = query.getOrDefault("Action")
  valid_595910 = validateParameter(valid_595910, JString, required = true,
                                 default = newJString("SetInstanceHealth"))
  if valid_595910 != nil:
    section.add "Action", valid_595910
  var valid_595911 = query.getOrDefault("Version")
  valid_595911 = validateParameter(valid_595911, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_595911 != nil:
    section.add "Version", valid_595911
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595912 = header.getOrDefault("X-Amz-Date")
  valid_595912 = validateParameter(valid_595912, JString, required = false,
                                 default = nil)
  if valid_595912 != nil:
    section.add "X-Amz-Date", valid_595912
  var valid_595913 = header.getOrDefault("X-Amz-Security-Token")
  valid_595913 = validateParameter(valid_595913, JString, required = false,
                                 default = nil)
  if valid_595913 != nil:
    section.add "X-Amz-Security-Token", valid_595913
  var valid_595914 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595914 = validateParameter(valid_595914, JString, required = false,
                                 default = nil)
  if valid_595914 != nil:
    section.add "X-Amz-Content-Sha256", valid_595914
  var valid_595915 = header.getOrDefault("X-Amz-Algorithm")
  valid_595915 = validateParameter(valid_595915, JString, required = false,
                                 default = nil)
  if valid_595915 != nil:
    section.add "X-Amz-Algorithm", valid_595915
  var valid_595916 = header.getOrDefault("X-Amz-Signature")
  valid_595916 = validateParameter(valid_595916, JString, required = false,
                                 default = nil)
  if valid_595916 != nil:
    section.add "X-Amz-Signature", valid_595916
  var valid_595917 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595917 = validateParameter(valid_595917, JString, required = false,
                                 default = nil)
  if valid_595917 != nil:
    section.add "X-Amz-SignedHeaders", valid_595917
  var valid_595918 = header.getOrDefault("X-Amz-Credential")
  valid_595918 = validateParameter(valid_595918, JString, required = false,
                                 default = nil)
  if valid_595918 != nil:
    section.add "X-Amz-Credential", valid_595918
  result.add "header", section
  ## parameters in `formData` object:
  ##   ShouldRespectGracePeriod: JBool
  ##                           : <p>If the Auto Scaling group of the specified instance has a <code>HealthCheckGracePeriod</code> specified for the group, by default, this call respects the grace period. Set this to <code>False</code>, to have the call not respect the grace period associated with the group.</p> <p>For more information about the health check grace period, see <a>CreateAutoScalingGroup</a>.</p>
  ##   HealthStatus: JString (required)
  ##               : The health status of the instance. Set to <code>Healthy</code> to have the instance remain in service. Set to <code>Unhealthy</code> to have the instance be out of service. Amazon EC2 Auto Scaling terminates and replaces the unhealthy instance.
  ##   InstanceId: JString (required)
  ##             : The ID of the instance.
  section = newJObject()
  var valid_595919 = formData.getOrDefault("ShouldRespectGracePeriod")
  valid_595919 = validateParameter(valid_595919, JBool, required = false, default = nil)
  if valid_595919 != nil:
    section.add "ShouldRespectGracePeriod", valid_595919
  assert formData != nil,
        "formData argument is necessary due to required `HealthStatus` field"
  var valid_595920 = formData.getOrDefault("HealthStatus")
  valid_595920 = validateParameter(valid_595920, JString, required = true,
                                 default = nil)
  if valid_595920 != nil:
    section.add "HealthStatus", valid_595920
  var valid_595921 = formData.getOrDefault("InstanceId")
  valid_595921 = validateParameter(valid_595921, JString, required = true,
                                 default = nil)
  if valid_595921 != nil:
    section.add "InstanceId", valid_595921
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595922: Call_PostSetInstanceHealth_595907; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the health status of the specified instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_595922.validator(path, query, header, formData, body)
  let scheme = call_595922.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595922.url(scheme.get, call_595922.host, call_595922.base,
                         call_595922.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595922, url, valid)

proc call*(call_595923: Call_PostSetInstanceHealth_595907; HealthStatus: string;
          InstanceId: string; ShouldRespectGracePeriod: bool = false;
          Action: string = "SetInstanceHealth"; Version: string = "2011-01-01"): Recallable =
  ## postSetInstanceHealth
  ## <p>Sets the health status of the specified instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   ShouldRespectGracePeriod: bool
  ##                           : <p>If the Auto Scaling group of the specified instance has a <code>HealthCheckGracePeriod</code> specified for the group, by default, this call respects the grace period. Set this to <code>False</code>, to have the call not respect the grace period associated with the group.</p> <p>For more information about the health check grace period, see <a>CreateAutoScalingGroup</a>.</p>
  ##   Action: string (required)
  ##   HealthStatus: string (required)
  ##               : The health status of the instance. Set to <code>Healthy</code> to have the instance remain in service. Set to <code>Unhealthy</code> to have the instance be out of service. Amazon EC2 Auto Scaling terminates and replaces the unhealthy instance.
  ##   InstanceId: string (required)
  ##             : The ID of the instance.
  ##   Version: string (required)
  var query_595924 = newJObject()
  var formData_595925 = newJObject()
  add(formData_595925, "ShouldRespectGracePeriod",
      newJBool(ShouldRespectGracePeriod))
  add(query_595924, "Action", newJString(Action))
  add(formData_595925, "HealthStatus", newJString(HealthStatus))
  add(formData_595925, "InstanceId", newJString(InstanceId))
  add(query_595924, "Version", newJString(Version))
  result = call_595923.call(nil, query_595924, nil, formData_595925, nil)

var postSetInstanceHealth* = Call_PostSetInstanceHealth_595907(
    name: "postSetInstanceHealth", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=SetInstanceHealth",
    validator: validate_PostSetInstanceHealth_595908, base: "/",
    url: url_PostSetInstanceHealth_595909, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetInstanceHealth_595889 = ref object of OpenApiRestCall_593437
proc url_GetSetInstanceHealth_595891(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetSetInstanceHealth_595890(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the health status of the specified instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   HealthStatus: JString (required)
  ##               : The health status of the instance. Set to <code>Healthy</code> to have the instance remain in service. Set to <code>Unhealthy</code> to have the instance be out of service. Amazon EC2 Auto Scaling terminates and replaces the unhealthy instance.
  ##   ShouldRespectGracePeriod: JBool
  ##                           : <p>If the Auto Scaling group of the specified instance has a <code>HealthCheckGracePeriod</code> specified for the group, by default, this call respects the grace period. Set this to <code>False</code>, to have the call not respect the grace period associated with the group.</p> <p>For more information about the health check grace period, see <a>CreateAutoScalingGroup</a>.</p>
  ##   Action: JString (required)
  ##   InstanceId: JString (required)
  ##             : The ID of the instance.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `HealthStatus` field"
  var valid_595892 = query.getOrDefault("HealthStatus")
  valid_595892 = validateParameter(valid_595892, JString, required = true,
                                 default = nil)
  if valid_595892 != nil:
    section.add "HealthStatus", valid_595892
  var valid_595893 = query.getOrDefault("ShouldRespectGracePeriod")
  valid_595893 = validateParameter(valid_595893, JBool, required = false, default = nil)
  if valid_595893 != nil:
    section.add "ShouldRespectGracePeriod", valid_595893
  var valid_595894 = query.getOrDefault("Action")
  valid_595894 = validateParameter(valid_595894, JString, required = true,
                                 default = newJString("SetInstanceHealth"))
  if valid_595894 != nil:
    section.add "Action", valid_595894
  var valid_595895 = query.getOrDefault("InstanceId")
  valid_595895 = validateParameter(valid_595895, JString, required = true,
                                 default = nil)
  if valid_595895 != nil:
    section.add "InstanceId", valid_595895
  var valid_595896 = query.getOrDefault("Version")
  valid_595896 = validateParameter(valid_595896, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_595896 != nil:
    section.add "Version", valid_595896
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595897 = header.getOrDefault("X-Amz-Date")
  valid_595897 = validateParameter(valid_595897, JString, required = false,
                                 default = nil)
  if valid_595897 != nil:
    section.add "X-Amz-Date", valid_595897
  var valid_595898 = header.getOrDefault("X-Amz-Security-Token")
  valid_595898 = validateParameter(valid_595898, JString, required = false,
                                 default = nil)
  if valid_595898 != nil:
    section.add "X-Amz-Security-Token", valid_595898
  var valid_595899 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595899 = validateParameter(valid_595899, JString, required = false,
                                 default = nil)
  if valid_595899 != nil:
    section.add "X-Amz-Content-Sha256", valid_595899
  var valid_595900 = header.getOrDefault("X-Amz-Algorithm")
  valid_595900 = validateParameter(valid_595900, JString, required = false,
                                 default = nil)
  if valid_595900 != nil:
    section.add "X-Amz-Algorithm", valid_595900
  var valid_595901 = header.getOrDefault("X-Amz-Signature")
  valid_595901 = validateParameter(valid_595901, JString, required = false,
                                 default = nil)
  if valid_595901 != nil:
    section.add "X-Amz-Signature", valid_595901
  var valid_595902 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595902 = validateParameter(valid_595902, JString, required = false,
                                 default = nil)
  if valid_595902 != nil:
    section.add "X-Amz-SignedHeaders", valid_595902
  var valid_595903 = header.getOrDefault("X-Amz-Credential")
  valid_595903 = validateParameter(valid_595903, JString, required = false,
                                 default = nil)
  if valid_595903 != nil:
    section.add "X-Amz-Credential", valid_595903
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595904: Call_GetSetInstanceHealth_595889; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the health status of the specified instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_595904.validator(path, query, header, formData, body)
  let scheme = call_595904.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595904.url(scheme.get, call_595904.host, call_595904.base,
                         call_595904.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595904, url, valid)

proc call*(call_595905: Call_GetSetInstanceHealth_595889; HealthStatus: string;
          InstanceId: string; ShouldRespectGracePeriod: bool = false;
          Action: string = "SetInstanceHealth"; Version: string = "2011-01-01"): Recallable =
  ## getSetInstanceHealth
  ## <p>Sets the health status of the specified instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   HealthStatus: string (required)
  ##               : The health status of the instance. Set to <code>Healthy</code> to have the instance remain in service. Set to <code>Unhealthy</code> to have the instance be out of service. Amazon EC2 Auto Scaling terminates and replaces the unhealthy instance.
  ##   ShouldRespectGracePeriod: bool
  ##                           : <p>If the Auto Scaling group of the specified instance has a <code>HealthCheckGracePeriod</code> specified for the group, by default, this call respects the grace period. Set this to <code>False</code>, to have the call not respect the grace period associated with the group.</p> <p>For more information about the health check grace period, see <a>CreateAutoScalingGroup</a>.</p>
  ##   Action: string (required)
  ##   InstanceId: string (required)
  ##             : The ID of the instance.
  ##   Version: string (required)
  var query_595906 = newJObject()
  add(query_595906, "HealthStatus", newJString(HealthStatus))
  add(query_595906, "ShouldRespectGracePeriod", newJBool(ShouldRespectGracePeriod))
  add(query_595906, "Action", newJString(Action))
  add(query_595906, "InstanceId", newJString(InstanceId))
  add(query_595906, "Version", newJString(Version))
  result = call_595905.call(nil, query_595906, nil, nil, nil)

var getSetInstanceHealth* = Call_GetSetInstanceHealth_595889(
    name: "getSetInstanceHealth", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=SetInstanceHealth",
    validator: validate_GetSetInstanceHealth_595890, base: "/",
    url: url_GetSetInstanceHealth_595891, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetInstanceProtection_595944 = ref object of OpenApiRestCall_593437
proc url_PostSetInstanceProtection_595946(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostSetInstanceProtection_595945(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the instance protection settings of the specified instances.</p> <p>For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595947 = query.getOrDefault("Action")
  valid_595947 = validateParameter(valid_595947, JString, required = true,
                                 default = newJString("SetInstanceProtection"))
  if valid_595947 != nil:
    section.add "Action", valid_595947
  var valid_595948 = query.getOrDefault("Version")
  valid_595948 = validateParameter(valid_595948, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_595948 != nil:
    section.add "Version", valid_595948
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595949 = header.getOrDefault("X-Amz-Date")
  valid_595949 = validateParameter(valid_595949, JString, required = false,
                                 default = nil)
  if valid_595949 != nil:
    section.add "X-Amz-Date", valid_595949
  var valid_595950 = header.getOrDefault("X-Amz-Security-Token")
  valid_595950 = validateParameter(valid_595950, JString, required = false,
                                 default = nil)
  if valid_595950 != nil:
    section.add "X-Amz-Security-Token", valid_595950
  var valid_595951 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595951 = validateParameter(valid_595951, JString, required = false,
                                 default = nil)
  if valid_595951 != nil:
    section.add "X-Amz-Content-Sha256", valid_595951
  var valid_595952 = header.getOrDefault("X-Amz-Algorithm")
  valid_595952 = validateParameter(valid_595952, JString, required = false,
                                 default = nil)
  if valid_595952 != nil:
    section.add "X-Amz-Algorithm", valid_595952
  var valid_595953 = header.getOrDefault("X-Amz-Signature")
  valid_595953 = validateParameter(valid_595953, JString, required = false,
                                 default = nil)
  if valid_595953 != nil:
    section.add "X-Amz-Signature", valid_595953
  var valid_595954 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595954 = validateParameter(valid_595954, JString, required = false,
                                 default = nil)
  if valid_595954 != nil:
    section.add "X-Amz-SignedHeaders", valid_595954
  var valid_595955 = header.getOrDefault("X-Amz-Credential")
  valid_595955 = validateParameter(valid_595955, JString, required = false,
                                 default = nil)
  if valid_595955 != nil:
    section.add "X-Amz-Credential", valid_595955
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray (required)
  ##              : One or more instance IDs.
  ##   ProtectedFromScaleIn: JBool (required)
  ##                       : Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling in.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_595956 = formData.getOrDefault("AutoScalingGroupName")
  valid_595956 = validateParameter(valid_595956, JString, required = true,
                                 default = nil)
  if valid_595956 != nil:
    section.add "AutoScalingGroupName", valid_595956
  var valid_595957 = formData.getOrDefault("InstanceIds")
  valid_595957 = validateParameter(valid_595957, JArray, required = true, default = nil)
  if valid_595957 != nil:
    section.add "InstanceIds", valid_595957
  var valid_595958 = formData.getOrDefault("ProtectedFromScaleIn")
  valid_595958 = validateParameter(valid_595958, JBool, required = true, default = nil)
  if valid_595958 != nil:
    section.add "ProtectedFromScaleIn", valid_595958
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595959: Call_PostSetInstanceProtection_595944; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the instance protection settings of the specified instances.</p> <p>For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_595959.validator(path, query, header, formData, body)
  let scheme = call_595959.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595959.url(scheme.get, call_595959.host, call_595959.base,
                         call_595959.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595959, url, valid)

proc call*(call_595960: Call_PostSetInstanceProtection_595944;
          AutoScalingGroupName: string; InstanceIds: JsonNode;
          ProtectedFromScaleIn: bool; Action: string = "SetInstanceProtection";
          Version: string = "2011-01-01"): Recallable =
  ## postSetInstanceProtection
  ## <p>Updates the instance protection settings of the specified instances.</p> <p>For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray (required)
  ##              : One or more instance IDs.
  ##   Action: string (required)
  ##   ProtectedFromScaleIn: bool (required)
  ##                       : Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling in.
  ##   Version: string (required)
  var query_595961 = newJObject()
  var formData_595962 = newJObject()
  add(formData_595962, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if InstanceIds != nil:
    formData_595962.add "InstanceIds", InstanceIds
  add(query_595961, "Action", newJString(Action))
  add(formData_595962, "ProtectedFromScaleIn", newJBool(ProtectedFromScaleIn))
  add(query_595961, "Version", newJString(Version))
  result = call_595960.call(nil, query_595961, nil, formData_595962, nil)

var postSetInstanceProtection* = Call_PostSetInstanceProtection_595944(
    name: "postSetInstanceProtection", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=SetInstanceProtection",
    validator: validate_PostSetInstanceProtection_595945, base: "/",
    url: url_PostSetInstanceProtection_595946,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetInstanceProtection_595926 = ref object of OpenApiRestCall_593437
proc url_GetSetInstanceProtection_595928(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetSetInstanceProtection_595927(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the instance protection settings of the specified instances.</p> <p>For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   InstanceIds: JArray (required)
  ##              : One or more instance IDs.
  ##   ProtectedFromScaleIn: JBool (required)
  ##                       : Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling in.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_595929 = query.getOrDefault("AutoScalingGroupName")
  valid_595929 = validateParameter(valid_595929, JString, required = true,
                                 default = nil)
  if valid_595929 != nil:
    section.add "AutoScalingGroupName", valid_595929
  var valid_595930 = query.getOrDefault("Action")
  valid_595930 = validateParameter(valid_595930, JString, required = true,
                                 default = newJString("SetInstanceProtection"))
  if valid_595930 != nil:
    section.add "Action", valid_595930
  var valid_595931 = query.getOrDefault("InstanceIds")
  valid_595931 = validateParameter(valid_595931, JArray, required = true, default = nil)
  if valid_595931 != nil:
    section.add "InstanceIds", valid_595931
  var valid_595932 = query.getOrDefault("ProtectedFromScaleIn")
  valid_595932 = validateParameter(valid_595932, JBool, required = true, default = nil)
  if valid_595932 != nil:
    section.add "ProtectedFromScaleIn", valid_595932
  var valid_595933 = query.getOrDefault("Version")
  valid_595933 = validateParameter(valid_595933, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_595933 != nil:
    section.add "Version", valid_595933
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595934 = header.getOrDefault("X-Amz-Date")
  valid_595934 = validateParameter(valid_595934, JString, required = false,
                                 default = nil)
  if valid_595934 != nil:
    section.add "X-Amz-Date", valid_595934
  var valid_595935 = header.getOrDefault("X-Amz-Security-Token")
  valid_595935 = validateParameter(valid_595935, JString, required = false,
                                 default = nil)
  if valid_595935 != nil:
    section.add "X-Amz-Security-Token", valid_595935
  var valid_595936 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595936 = validateParameter(valid_595936, JString, required = false,
                                 default = nil)
  if valid_595936 != nil:
    section.add "X-Amz-Content-Sha256", valid_595936
  var valid_595937 = header.getOrDefault("X-Amz-Algorithm")
  valid_595937 = validateParameter(valid_595937, JString, required = false,
                                 default = nil)
  if valid_595937 != nil:
    section.add "X-Amz-Algorithm", valid_595937
  var valid_595938 = header.getOrDefault("X-Amz-Signature")
  valid_595938 = validateParameter(valid_595938, JString, required = false,
                                 default = nil)
  if valid_595938 != nil:
    section.add "X-Amz-Signature", valid_595938
  var valid_595939 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595939 = validateParameter(valid_595939, JString, required = false,
                                 default = nil)
  if valid_595939 != nil:
    section.add "X-Amz-SignedHeaders", valid_595939
  var valid_595940 = header.getOrDefault("X-Amz-Credential")
  valid_595940 = validateParameter(valid_595940, JString, required = false,
                                 default = nil)
  if valid_595940 != nil:
    section.add "X-Amz-Credential", valid_595940
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595941: Call_GetSetInstanceProtection_595926; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the instance protection settings of the specified instances.</p> <p>For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_595941.validator(path, query, header, formData, body)
  let scheme = call_595941.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595941.url(scheme.get, call_595941.host, call_595941.base,
                         call_595941.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595941, url, valid)

proc call*(call_595942: Call_GetSetInstanceProtection_595926;
          AutoScalingGroupName: string; InstanceIds: JsonNode;
          ProtectedFromScaleIn: bool; Action: string = "SetInstanceProtection";
          Version: string = "2011-01-01"): Recallable =
  ## getSetInstanceProtection
  ## <p>Updates the instance protection settings of the specified instances.</p> <p>For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   InstanceIds: JArray (required)
  ##              : One or more instance IDs.
  ##   ProtectedFromScaleIn: bool (required)
  ##                       : Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling in.
  ##   Version: string (required)
  var query_595943 = newJObject()
  add(query_595943, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_595943, "Action", newJString(Action))
  if InstanceIds != nil:
    query_595943.add "InstanceIds", InstanceIds
  add(query_595943, "ProtectedFromScaleIn", newJBool(ProtectedFromScaleIn))
  add(query_595943, "Version", newJString(Version))
  result = call_595942.call(nil, query_595943, nil, nil, nil)

var getSetInstanceProtection* = Call_GetSetInstanceProtection_595926(
    name: "getSetInstanceProtection", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=SetInstanceProtection",
    validator: validate_GetSetInstanceProtection_595927, base: "/",
    url: url_GetSetInstanceProtection_595928, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSuspendProcesses_595980 = ref object of OpenApiRestCall_593437
proc url_PostSuspendProcesses_595982(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostSuspendProcesses_595981(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Suspends the specified automatic scaling processes, or all processes, for the specified Auto Scaling group.</p> <p>If you suspend either the <code>Launch</code> or <code>Terminate</code> process types, it can prevent other process types from functioning properly.</p> <p>To resume processes that have been suspended, use <a>ResumeProcesses</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595983 = query.getOrDefault("Action")
  valid_595983 = validateParameter(valid_595983, JString, required = true,
                                 default = newJString("SuspendProcesses"))
  if valid_595983 != nil:
    section.add "Action", valid_595983
  var valid_595984 = query.getOrDefault("Version")
  valid_595984 = validateParameter(valid_595984, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_595984 != nil:
    section.add "Version", valid_595984
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595985 = header.getOrDefault("X-Amz-Date")
  valid_595985 = validateParameter(valid_595985, JString, required = false,
                                 default = nil)
  if valid_595985 != nil:
    section.add "X-Amz-Date", valid_595985
  var valid_595986 = header.getOrDefault("X-Amz-Security-Token")
  valid_595986 = validateParameter(valid_595986, JString, required = false,
                                 default = nil)
  if valid_595986 != nil:
    section.add "X-Amz-Security-Token", valid_595986
  var valid_595987 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595987 = validateParameter(valid_595987, JString, required = false,
                                 default = nil)
  if valid_595987 != nil:
    section.add "X-Amz-Content-Sha256", valid_595987
  var valid_595988 = header.getOrDefault("X-Amz-Algorithm")
  valid_595988 = validateParameter(valid_595988, JString, required = false,
                                 default = nil)
  if valid_595988 != nil:
    section.add "X-Amz-Algorithm", valid_595988
  var valid_595989 = header.getOrDefault("X-Amz-Signature")
  valid_595989 = validateParameter(valid_595989, JString, required = false,
                                 default = nil)
  if valid_595989 != nil:
    section.add "X-Amz-Signature", valid_595989
  var valid_595990 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595990 = validateParameter(valid_595990, JString, required = false,
                                 default = nil)
  if valid_595990 != nil:
    section.add "X-Amz-SignedHeaders", valid_595990
  var valid_595991 = header.getOrDefault("X-Amz-Credential")
  valid_595991 = validateParameter(valid_595991, JString, required = false,
                                 default = nil)
  if valid_595991 != nil:
    section.add "X-Amz-Credential", valid_595991
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_595992 = formData.getOrDefault("AutoScalingGroupName")
  valid_595992 = validateParameter(valid_595992, JString, required = true,
                                 default = nil)
  if valid_595992 != nil:
    section.add "AutoScalingGroupName", valid_595992
  var valid_595993 = formData.getOrDefault("ScalingProcesses")
  valid_595993 = validateParameter(valid_595993, JArray, required = false,
                                 default = nil)
  if valid_595993 != nil:
    section.add "ScalingProcesses", valid_595993
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595994: Call_PostSuspendProcesses_595980; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Suspends the specified automatic scaling processes, or all processes, for the specified Auto Scaling group.</p> <p>If you suspend either the <code>Launch</code> or <code>Terminate</code> process types, it can prevent other process types from functioning properly.</p> <p>To resume processes that have been suspended, use <a>ResumeProcesses</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_595994.validator(path, query, header, formData, body)
  let scheme = call_595994.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595994.url(scheme.get, call_595994.host, call_595994.base,
                         call_595994.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595994, url, valid)

proc call*(call_595995: Call_PostSuspendProcesses_595980;
          AutoScalingGroupName: string; ScalingProcesses: JsonNode = nil;
          Action: string = "SuspendProcesses"; Version: string = "2011-01-01"): Recallable =
  ## postSuspendProcesses
  ## <p>Suspends the specified automatic scaling processes, or all processes, for the specified Auto Scaling group.</p> <p>If you suspend either the <code>Launch</code> or <code>Terminate</code> process types, it can prevent other process types from functioning properly.</p> <p>To resume processes that have been suspended, use <a>ResumeProcesses</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595996 = newJObject()
  var formData_595997 = newJObject()
  add(formData_595997, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if ScalingProcesses != nil:
    formData_595997.add "ScalingProcesses", ScalingProcesses
  add(query_595996, "Action", newJString(Action))
  add(query_595996, "Version", newJString(Version))
  result = call_595995.call(nil, query_595996, nil, formData_595997, nil)

var postSuspendProcesses* = Call_PostSuspendProcesses_595980(
    name: "postSuspendProcesses", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=SuspendProcesses",
    validator: validate_PostSuspendProcesses_595981, base: "/",
    url: url_PostSuspendProcesses_595982, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSuspendProcesses_595963 = ref object of OpenApiRestCall_593437
proc url_GetSuspendProcesses_595965(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetSuspendProcesses_595964(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Suspends the specified automatic scaling processes, or all processes, for the specified Auto Scaling group.</p> <p>If you suspend either the <code>Launch</code> or <code>Terminate</code> process types, it can prevent other process types from functioning properly.</p> <p>To resume processes that have been suspended, use <a>ResumeProcesses</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_595966 = query.getOrDefault("ScalingProcesses")
  valid_595966 = validateParameter(valid_595966, JArray, required = false,
                                 default = nil)
  if valid_595966 != nil:
    section.add "ScalingProcesses", valid_595966
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_595967 = query.getOrDefault("AutoScalingGroupName")
  valid_595967 = validateParameter(valid_595967, JString, required = true,
                                 default = nil)
  if valid_595967 != nil:
    section.add "AutoScalingGroupName", valid_595967
  var valid_595968 = query.getOrDefault("Action")
  valid_595968 = validateParameter(valid_595968, JString, required = true,
                                 default = newJString("SuspendProcesses"))
  if valid_595968 != nil:
    section.add "Action", valid_595968
  var valid_595969 = query.getOrDefault("Version")
  valid_595969 = validateParameter(valid_595969, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_595969 != nil:
    section.add "Version", valid_595969
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595970 = header.getOrDefault("X-Amz-Date")
  valid_595970 = validateParameter(valid_595970, JString, required = false,
                                 default = nil)
  if valid_595970 != nil:
    section.add "X-Amz-Date", valid_595970
  var valid_595971 = header.getOrDefault("X-Amz-Security-Token")
  valid_595971 = validateParameter(valid_595971, JString, required = false,
                                 default = nil)
  if valid_595971 != nil:
    section.add "X-Amz-Security-Token", valid_595971
  var valid_595972 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595972 = validateParameter(valid_595972, JString, required = false,
                                 default = nil)
  if valid_595972 != nil:
    section.add "X-Amz-Content-Sha256", valid_595972
  var valid_595973 = header.getOrDefault("X-Amz-Algorithm")
  valid_595973 = validateParameter(valid_595973, JString, required = false,
                                 default = nil)
  if valid_595973 != nil:
    section.add "X-Amz-Algorithm", valid_595973
  var valid_595974 = header.getOrDefault("X-Amz-Signature")
  valid_595974 = validateParameter(valid_595974, JString, required = false,
                                 default = nil)
  if valid_595974 != nil:
    section.add "X-Amz-Signature", valid_595974
  var valid_595975 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595975 = validateParameter(valid_595975, JString, required = false,
                                 default = nil)
  if valid_595975 != nil:
    section.add "X-Amz-SignedHeaders", valid_595975
  var valid_595976 = header.getOrDefault("X-Amz-Credential")
  valid_595976 = validateParameter(valid_595976, JString, required = false,
                                 default = nil)
  if valid_595976 != nil:
    section.add "X-Amz-Credential", valid_595976
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595977: Call_GetSuspendProcesses_595963; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Suspends the specified automatic scaling processes, or all processes, for the specified Auto Scaling group.</p> <p>If you suspend either the <code>Launch</code> or <code>Terminate</code> process types, it can prevent other process types from functioning properly.</p> <p>To resume processes that have been suspended, use <a>ResumeProcesses</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_595977.validator(path, query, header, formData, body)
  let scheme = call_595977.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595977.url(scheme.get, call_595977.host, call_595977.base,
                         call_595977.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595977, url, valid)

proc call*(call_595978: Call_GetSuspendProcesses_595963;
          AutoScalingGroupName: string; ScalingProcesses: JsonNode = nil;
          Action: string = "SuspendProcesses"; Version: string = "2011-01-01"): Recallable =
  ## getSuspendProcesses
  ## <p>Suspends the specified automatic scaling processes, or all processes, for the specified Auto Scaling group.</p> <p>If you suspend either the <code>Launch</code> or <code>Terminate</code> process types, it can prevent other process types from functioning properly.</p> <p>To resume processes that have been suspended, use <a>ResumeProcesses</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595979 = newJObject()
  if ScalingProcesses != nil:
    query_595979.add "ScalingProcesses", ScalingProcesses
  add(query_595979, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_595979, "Action", newJString(Action))
  add(query_595979, "Version", newJString(Version))
  result = call_595978.call(nil, query_595979, nil, nil, nil)

var getSuspendProcesses* = Call_GetSuspendProcesses_595963(
    name: "getSuspendProcesses", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=SuspendProcesses",
    validator: validate_GetSuspendProcesses_595964, base: "/",
    url: url_GetSuspendProcesses_595965, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostTerminateInstanceInAutoScalingGroup_596015 = ref object of OpenApiRestCall_593437
proc url_PostTerminateInstanceInAutoScalingGroup_596017(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostTerminateInstanceInAutoScalingGroup_596016(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Terminates the specified instance and optionally adjusts the desired group size.</p> <p>This call simply makes a termination request. The instance is not terminated immediately.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596018 = query.getOrDefault("Action")
  valid_596018 = validateParameter(valid_596018, JString, required = true, default = newJString(
      "TerminateInstanceInAutoScalingGroup"))
  if valid_596018 != nil:
    section.add "Action", valid_596018
  var valid_596019 = query.getOrDefault("Version")
  valid_596019 = validateParameter(valid_596019, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_596019 != nil:
    section.add "Version", valid_596019
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596020 = header.getOrDefault("X-Amz-Date")
  valid_596020 = validateParameter(valid_596020, JString, required = false,
                                 default = nil)
  if valid_596020 != nil:
    section.add "X-Amz-Date", valid_596020
  var valid_596021 = header.getOrDefault("X-Amz-Security-Token")
  valid_596021 = validateParameter(valid_596021, JString, required = false,
                                 default = nil)
  if valid_596021 != nil:
    section.add "X-Amz-Security-Token", valid_596021
  var valid_596022 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596022 = validateParameter(valid_596022, JString, required = false,
                                 default = nil)
  if valid_596022 != nil:
    section.add "X-Amz-Content-Sha256", valid_596022
  var valid_596023 = header.getOrDefault("X-Amz-Algorithm")
  valid_596023 = validateParameter(valid_596023, JString, required = false,
                                 default = nil)
  if valid_596023 != nil:
    section.add "X-Amz-Algorithm", valid_596023
  var valid_596024 = header.getOrDefault("X-Amz-Signature")
  valid_596024 = validateParameter(valid_596024, JString, required = false,
                                 default = nil)
  if valid_596024 != nil:
    section.add "X-Amz-Signature", valid_596024
  var valid_596025 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596025 = validateParameter(valid_596025, JString, required = false,
                                 default = nil)
  if valid_596025 != nil:
    section.add "X-Amz-SignedHeaders", valid_596025
  var valid_596026 = header.getOrDefault("X-Amz-Credential")
  valid_596026 = validateParameter(valid_596026, JString, required = false,
                                 default = nil)
  if valid_596026 != nil:
    section.add "X-Amz-Credential", valid_596026
  result.add "header", section
  ## parameters in `formData` object:
  ##   ShouldDecrementDesiredCapacity: JBool (required)
  ##                                 : Indicates whether terminating the instance also decrements the size of the Auto Scaling group.
  ##   InstanceId: JString (required)
  ##             : The ID of the instance.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ShouldDecrementDesiredCapacity` field"
  var valid_596027 = formData.getOrDefault("ShouldDecrementDesiredCapacity")
  valid_596027 = validateParameter(valid_596027, JBool, required = true, default = nil)
  if valid_596027 != nil:
    section.add "ShouldDecrementDesiredCapacity", valid_596027
  var valid_596028 = formData.getOrDefault("InstanceId")
  valid_596028 = validateParameter(valid_596028, JString, required = true,
                                 default = nil)
  if valid_596028 != nil:
    section.add "InstanceId", valid_596028
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596029: Call_PostTerminateInstanceInAutoScalingGroup_596015;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Terminates the specified instance and optionally adjusts the desired group size.</p> <p>This call simply makes a termination request. The instance is not terminated immediately.</p>
  ## 
  let valid = call_596029.validator(path, query, header, formData, body)
  let scheme = call_596029.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596029.url(scheme.get, call_596029.host, call_596029.base,
                         call_596029.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596029, url, valid)

proc call*(call_596030: Call_PostTerminateInstanceInAutoScalingGroup_596015;
          ShouldDecrementDesiredCapacity: bool; InstanceId: string;
          Action: string = "TerminateInstanceInAutoScalingGroup";
          Version: string = "2011-01-01"): Recallable =
  ## postTerminateInstanceInAutoScalingGroup
  ## <p>Terminates the specified instance and optionally adjusts the desired group size.</p> <p>This call simply makes a termination request. The instance is not terminated immediately.</p>
  ##   ShouldDecrementDesiredCapacity: bool (required)
  ##                                 : Indicates whether terminating the instance also decrements the size of the Auto Scaling group.
  ##   Action: string (required)
  ##   InstanceId: string (required)
  ##             : The ID of the instance.
  ##   Version: string (required)
  var query_596031 = newJObject()
  var formData_596032 = newJObject()
  add(formData_596032, "ShouldDecrementDesiredCapacity",
      newJBool(ShouldDecrementDesiredCapacity))
  add(query_596031, "Action", newJString(Action))
  add(formData_596032, "InstanceId", newJString(InstanceId))
  add(query_596031, "Version", newJString(Version))
  result = call_596030.call(nil, query_596031, nil, formData_596032, nil)

var postTerminateInstanceInAutoScalingGroup* = Call_PostTerminateInstanceInAutoScalingGroup_596015(
    name: "postTerminateInstanceInAutoScalingGroup", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=TerminateInstanceInAutoScalingGroup",
    validator: validate_PostTerminateInstanceInAutoScalingGroup_596016, base: "/",
    url: url_PostTerminateInstanceInAutoScalingGroup_596017,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetTerminateInstanceInAutoScalingGroup_595998 = ref object of OpenApiRestCall_593437
proc url_GetTerminateInstanceInAutoScalingGroup_596000(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetTerminateInstanceInAutoScalingGroup_595999(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Terminates the specified instance and optionally adjusts the desired group size.</p> <p>This call simply makes a termination request. The instance is not terminated immediately.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   ShouldDecrementDesiredCapacity: JBool (required)
  ##                                 : Indicates whether terminating the instance also decrements the size of the Auto Scaling group.
  ##   InstanceId: JString (required)
  ##             : The ID of the instance.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596001 = query.getOrDefault("Action")
  valid_596001 = validateParameter(valid_596001, JString, required = true, default = newJString(
      "TerminateInstanceInAutoScalingGroup"))
  if valid_596001 != nil:
    section.add "Action", valid_596001
  var valid_596002 = query.getOrDefault("ShouldDecrementDesiredCapacity")
  valid_596002 = validateParameter(valid_596002, JBool, required = true, default = nil)
  if valid_596002 != nil:
    section.add "ShouldDecrementDesiredCapacity", valid_596002
  var valid_596003 = query.getOrDefault("InstanceId")
  valid_596003 = validateParameter(valid_596003, JString, required = true,
                                 default = nil)
  if valid_596003 != nil:
    section.add "InstanceId", valid_596003
  var valid_596004 = query.getOrDefault("Version")
  valid_596004 = validateParameter(valid_596004, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_596004 != nil:
    section.add "Version", valid_596004
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596005 = header.getOrDefault("X-Amz-Date")
  valid_596005 = validateParameter(valid_596005, JString, required = false,
                                 default = nil)
  if valid_596005 != nil:
    section.add "X-Amz-Date", valid_596005
  var valid_596006 = header.getOrDefault("X-Amz-Security-Token")
  valid_596006 = validateParameter(valid_596006, JString, required = false,
                                 default = nil)
  if valid_596006 != nil:
    section.add "X-Amz-Security-Token", valid_596006
  var valid_596007 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596007 = validateParameter(valid_596007, JString, required = false,
                                 default = nil)
  if valid_596007 != nil:
    section.add "X-Amz-Content-Sha256", valid_596007
  var valid_596008 = header.getOrDefault("X-Amz-Algorithm")
  valid_596008 = validateParameter(valid_596008, JString, required = false,
                                 default = nil)
  if valid_596008 != nil:
    section.add "X-Amz-Algorithm", valid_596008
  var valid_596009 = header.getOrDefault("X-Amz-Signature")
  valid_596009 = validateParameter(valid_596009, JString, required = false,
                                 default = nil)
  if valid_596009 != nil:
    section.add "X-Amz-Signature", valid_596009
  var valid_596010 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596010 = validateParameter(valid_596010, JString, required = false,
                                 default = nil)
  if valid_596010 != nil:
    section.add "X-Amz-SignedHeaders", valid_596010
  var valid_596011 = header.getOrDefault("X-Amz-Credential")
  valid_596011 = validateParameter(valid_596011, JString, required = false,
                                 default = nil)
  if valid_596011 != nil:
    section.add "X-Amz-Credential", valid_596011
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596012: Call_GetTerminateInstanceInAutoScalingGroup_595998;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Terminates the specified instance and optionally adjusts the desired group size.</p> <p>This call simply makes a termination request. The instance is not terminated immediately.</p>
  ## 
  let valid = call_596012.validator(path, query, header, formData, body)
  let scheme = call_596012.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596012.url(scheme.get, call_596012.host, call_596012.base,
                         call_596012.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596012, url, valid)

proc call*(call_596013: Call_GetTerminateInstanceInAutoScalingGroup_595998;
          ShouldDecrementDesiredCapacity: bool; InstanceId: string;
          Action: string = "TerminateInstanceInAutoScalingGroup";
          Version: string = "2011-01-01"): Recallable =
  ## getTerminateInstanceInAutoScalingGroup
  ## <p>Terminates the specified instance and optionally adjusts the desired group size.</p> <p>This call simply makes a termination request. The instance is not terminated immediately.</p>
  ##   Action: string (required)
  ##   ShouldDecrementDesiredCapacity: bool (required)
  ##                                 : Indicates whether terminating the instance also decrements the size of the Auto Scaling group.
  ##   InstanceId: string (required)
  ##             : The ID of the instance.
  ##   Version: string (required)
  var query_596014 = newJObject()
  add(query_596014, "Action", newJString(Action))
  add(query_596014, "ShouldDecrementDesiredCapacity",
      newJBool(ShouldDecrementDesiredCapacity))
  add(query_596014, "InstanceId", newJString(InstanceId))
  add(query_596014, "Version", newJString(Version))
  result = call_596013.call(nil, query_596014, nil, nil, nil)

var getTerminateInstanceInAutoScalingGroup* = Call_GetTerminateInstanceInAutoScalingGroup_595998(
    name: "getTerminateInstanceInAutoScalingGroup", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=TerminateInstanceInAutoScalingGroup",
    validator: validate_GetTerminateInstanceInAutoScalingGroup_595999, base: "/",
    url: url_GetTerminateInstanceInAutoScalingGroup_596000,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateAutoScalingGroup_596067 = ref object of OpenApiRestCall_593437
proc url_PostUpdateAutoScalingGroup_596069(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostUpdateAutoScalingGroup_596068(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the configuration for the specified Auto Scaling group.</p> <p>To update an Auto Scaling group, specify the name of the group and the parameter that you want to change. Any parameters that you don't specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. Scaling activities that are currently in progress aren't affected.</p> <p>If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.</p> <p>Note the following about changing <code>DesiredCapacity</code>, <code>MaxSize</code>, or <code>MinSize</code>:</p> <ul> <li> <p>If a scale-in event occurs as a result of a new <code>DesiredCapacity</code> value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.</p> </li> <li> <p>If you specify a new value for <code>MinSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MinSize</code> is larger than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MinSize</code> value.</p> </li> <li> <p>If you specify a new value for <code>MaxSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MaxSize</code> is smaller than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MaxSize</code> value.</p> </li> </ul> <p>To see which parameters have been set, use <a>DescribeAutoScalingGroups</a>. You can also view the scaling policies for an Auto Scaling group using <a>DescribePolicies</a>. If the group has scaling policies, you can update them using <a>PutScalingPolicy</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596070 = query.getOrDefault("Action")
  valid_596070 = validateParameter(valid_596070, JString, required = true,
                                 default = newJString("UpdateAutoScalingGroup"))
  if valid_596070 != nil:
    section.add "Action", valid_596070
  var valid_596071 = query.getOrDefault("Version")
  valid_596071 = validateParameter(valid_596071, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_596071 != nil:
    section.add "Version", valid_596071
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596072 = header.getOrDefault("X-Amz-Date")
  valid_596072 = validateParameter(valid_596072, JString, required = false,
                                 default = nil)
  if valid_596072 != nil:
    section.add "X-Amz-Date", valid_596072
  var valid_596073 = header.getOrDefault("X-Amz-Security-Token")
  valid_596073 = validateParameter(valid_596073, JString, required = false,
                                 default = nil)
  if valid_596073 != nil:
    section.add "X-Amz-Security-Token", valid_596073
  var valid_596074 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596074 = validateParameter(valid_596074, JString, required = false,
                                 default = nil)
  if valid_596074 != nil:
    section.add "X-Amz-Content-Sha256", valid_596074
  var valid_596075 = header.getOrDefault("X-Amz-Algorithm")
  valid_596075 = validateParameter(valid_596075, JString, required = false,
                                 default = nil)
  if valid_596075 != nil:
    section.add "X-Amz-Algorithm", valid_596075
  var valid_596076 = header.getOrDefault("X-Amz-Signature")
  valid_596076 = validateParameter(valid_596076, JString, required = false,
                                 default = nil)
  if valid_596076 != nil:
    section.add "X-Amz-Signature", valid_596076
  var valid_596077 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596077 = validateParameter(valid_596077, JString, required = false,
                                 default = nil)
  if valid_596077 != nil:
    section.add "X-Amz-SignedHeaders", valid_596077
  var valid_596078 = header.getOrDefault("X-Amz-Credential")
  valid_596078 = validateParameter(valid_596078, JString, required = false,
                                 default = nil)
  if valid_596078 != nil:
    section.add "X-Amz-Credential", valid_596078
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LaunchTemplate.LaunchTemplateId: JString
  ##                                  : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  ##   LaunchConfigurationName: JString
  ##                          : <p>The name of the launch configuration. If you specify <code>LaunchConfigurationName</code> in your update request, you can't specify <code>LaunchTemplate</code> or <code>MixedInstancesPolicy</code>.</p> <important> <p>To update an Auto Scaling group with a launch configuration with <code>InstanceMonitoring</code> set to <code>false</code>, you must first disable the collection of group metrics. Otherwise, you get an error. If you have previously enabled the collection of group metrics, you can disable it using <a>DisableMetricsCollection</a>.</p> </important>
  ##   HealthCheckType: JString
  ##                  : The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.
  ##   ServiceLinkedRoleARN: JString
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   DesiredCapacity: JInt
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group.
  ##   HealthCheckGracePeriod: JInt
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   VPCZoneIdentifier: JString
  ##                    : <p>A comma-separated list of subnet IDs for virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p>
  ##   AvailabilityZones: JArray
  ##                    : One or more Availability Zones for the group.
  ##   MinSize: JInt
  ##          : The minimum size of the Auto Scaling group.
  ##   DefaultCooldown: JInt
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>. This cooldown period is not used when a scaling-specific cooldown is specified.</p> <p>Cooldown periods are not supported for target tracking scaling policies, step scaling policies, or scheduled scaling. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MixedInstancesPolicy.LaunchTemplate: JString
  ##                                      : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   MaxSize: JInt
  ##          : The maximum size of the Auto Scaling group.
  ##   MixedInstancesPolicy.InstancesDistribution: JString
  ##                                             : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified when creating a mixed instances policy, the default values are used.</p>
  ##   PlacementGroup: JString
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   NewInstancesProtectedFromScaleIn: JBool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LaunchTemplate.Version: JString
  ##                         : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   TerminationPolicies: JArray
  ##                      : <p>A standalone termination policy or a list of termination policies used to select the instance to terminate. The policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LaunchTemplate.LaunchTemplateName: JString
  ##                                    : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_596079 = formData.getOrDefault("AutoScalingGroupName")
  valid_596079 = validateParameter(valid_596079, JString, required = true,
                                 default = nil)
  if valid_596079 != nil:
    section.add "AutoScalingGroupName", valid_596079
  var valid_596080 = formData.getOrDefault("LaunchTemplate.LaunchTemplateId")
  valid_596080 = validateParameter(valid_596080, JString, required = false,
                                 default = nil)
  if valid_596080 != nil:
    section.add "LaunchTemplate.LaunchTemplateId", valid_596080
  var valid_596081 = formData.getOrDefault("LaunchConfigurationName")
  valid_596081 = validateParameter(valid_596081, JString, required = false,
                                 default = nil)
  if valid_596081 != nil:
    section.add "LaunchConfigurationName", valid_596081
  var valid_596082 = formData.getOrDefault("HealthCheckType")
  valid_596082 = validateParameter(valid_596082, JString, required = false,
                                 default = nil)
  if valid_596082 != nil:
    section.add "HealthCheckType", valid_596082
  var valid_596083 = formData.getOrDefault("ServiceLinkedRoleARN")
  valid_596083 = validateParameter(valid_596083, JString, required = false,
                                 default = nil)
  if valid_596083 != nil:
    section.add "ServiceLinkedRoleARN", valid_596083
  var valid_596084 = formData.getOrDefault("DesiredCapacity")
  valid_596084 = validateParameter(valid_596084, JInt, required = false, default = nil)
  if valid_596084 != nil:
    section.add "DesiredCapacity", valid_596084
  var valid_596085 = formData.getOrDefault("HealthCheckGracePeriod")
  valid_596085 = validateParameter(valid_596085, JInt, required = false, default = nil)
  if valid_596085 != nil:
    section.add "HealthCheckGracePeriod", valid_596085
  var valid_596086 = formData.getOrDefault("VPCZoneIdentifier")
  valid_596086 = validateParameter(valid_596086, JString, required = false,
                                 default = nil)
  if valid_596086 != nil:
    section.add "VPCZoneIdentifier", valid_596086
  var valid_596087 = formData.getOrDefault("AvailabilityZones")
  valid_596087 = validateParameter(valid_596087, JArray, required = false,
                                 default = nil)
  if valid_596087 != nil:
    section.add "AvailabilityZones", valid_596087
  var valid_596088 = formData.getOrDefault("MinSize")
  valid_596088 = validateParameter(valid_596088, JInt, required = false, default = nil)
  if valid_596088 != nil:
    section.add "MinSize", valid_596088
  var valid_596089 = formData.getOrDefault("DefaultCooldown")
  valid_596089 = validateParameter(valid_596089, JInt, required = false, default = nil)
  if valid_596089 != nil:
    section.add "DefaultCooldown", valid_596089
  var valid_596090 = formData.getOrDefault("MixedInstancesPolicy.LaunchTemplate")
  valid_596090 = validateParameter(valid_596090, JString, required = false,
                                 default = nil)
  if valid_596090 != nil:
    section.add "MixedInstancesPolicy.LaunchTemplate", valid_596090
  var valid_596091 = formData.getOrDefault("MaxSize")
  valid_596091 = validateParameter(valid_596091, JInt, required = false, default = nil)
  if valid_596091 != nil:
    section.add "MaxSize", valid_596091
  var valid_596092 = formData.getOrDefault("MixedInstancesPolicy.InstancesDistribution")
  valid_596092 = validateParameter(valid_596092, JString, required = false,
                                 default = nil)
  if valid_596092 != nil:
    section.add "MixedInstancesPolicy.InstancesDistribution", valid_596092
  var valid_596093 = formData.getOrDefault("PlacementGroup")
  valid_596093 = validateParameter(valid_596093, JString, required = false,
                                 default = nil)
  if valid_596093 != nil:
    section.add "PlacementGroup", valid_596093
  var valid_596094 = formData.getOrDefault("NewInstancesProtectedFromScaleIn")
  valid_596094 = validateParameter(valid_596094, JBool, required = false, default = nil)
  if valid_596094 != nil:
    section.add "NewInstancesProtectedFromScaleIn", valid_596094
  var valid_596095 = formData.getOrDefault("LaunchTemplate.Version")
  valid_596095 = validateParameter(valid_596095, JString, required = false,
                                 default = nil)
  if valid_596095 != nil:
    section.add "LaunchTemplate.Version", valid_596095
  var valid_596096 = formData.getOrDefault("TerminationPolicies")
  valid_596096 = validateParameter(valid_596096, JArray, required = false,
                                 default = nil)
  if valid_596096 != nil:
    section.add "TerminationPolicies", valid_596096
  var valid_596097 = formData.getOrDefault("LaunchTemplate.LaunchTemplateName")
  valid_596097 = validateParameter(valid_596097, JString, required = false,
                                 default = nil)
  if valid_596097 != nil:
    section.add "LaunchTemplate.LaunchTemplateName", valid_596097
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596098: Call_PostUpdateAutoScalingGroup_596067; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the configuration for the specified Auto Scaling group.</p> <p>To update an Auto Scaling group, specify the name of the group and the parameter that you want to change. Any parameters that you don't specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. Scaling activities that are currently in progress aren't affected.</p> <p>If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.</p> <p>Note the following about changing <code>DesiredCapacity</code>, <code>MaxSize</code>, or <code>MinSize</code>:</p> <ul> <li> <p>If a scale-in event occurs as a result of a new <code>DesiredCapacity</code> value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.</p> </li> <li> <p>If you specify a new value for <code>MinSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MinSize</code> is larger than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MinSize</code> value.</p> </li> <li> <p>If you specify a new value for <code>MaxSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MaxSize</code> is smaller than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MaxSize</code> value.</p> </li> </ul> <p>To see which parameters have been set, use <a>DescribeAutoScalingGroups</a>. You can also view the scaling policies for an Auto Scaling group using <a>DescribePolicies</a>. If the group has scaling policies, you can update them using <a>PutScalingPolicy</a>.</p>
  ## 
  let valid = call_596098.validator(path, query, header, formData, body)
  let scheme = call_596098.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596098.url(scheme.get, call_596098.host, call_596098.base,
                         call_596098.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596098, url, valid)

proc call*(call_596099: Call_PostUpdateAutoScalingGroup_596067;
          AutoScalingGroupName: string;
          LaunchTemplateLaunchTemplateId: string = "";
          LaunchConfigurationName: string = ""; HealthCheckType: string = "";
          ServiceLinkedRoleARN: string = ""; DesiredCapacity: int = 0;
          HealthCheckGracePeriod: int = 0; VPCZoneIdentifier: string = "";
          Action: string = "UpdateAutoScalingGroup";
          AvailabilityZones: JsonNode = nil; MinSize: int = 0; DefaultCooldown: int = 0;
          MixedInstancesPolicyLaunchTemplate: string = ""; MaxSize: int = 0;
          MixedInstancesPolicyInstancesDistribution: string = "";
          PlacementGroup: string = "";
          NewInstancesProtectedFromScaleIn: bool = false;
          LaunchTemplateVersion: string = ""; TerminationPolicies: JsonNode = nil;
          Version: string = "2011-01-01";
          LaunchTemplateLaunchTemplateName: string = ""): Recallable =
  ## postUpdateAutoScalingGroup
  ## <p>Updates the configuration for the specified Auto Scaling group.</p> <p>To update an Auto Scaling group, specify the name of the group and the parameter that you want to change. Any parameters that you don't specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. Scaling activities that are currently in progress aren't affected.</p> <p>If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.</p> <p>Note the following about changing <code>DesiredCapacity</code>, <code>MaxSize</code>, or <code>MinSize</code>:</p> <ul> <li> <p>If a scale-in event occurs as a result of a new <code>DesiredCapacity</code> value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.</p> </li> <li> <p>If you specify a new value for <code>MinSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MinSize</code> is larger than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MinSize</code> value.</p> </li> <li> <p>If you specify a new value for <code>MaxSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MaxSize</code> is smaller than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MaxSize</code> value.</p> </li> </ul> <p>To see which parameters have been set, use <a>DescribeAutoScalingGroups</a>. You can also view the scaling policies for an Auto Scaling group using <a>DescribePolicies</a>. If the group has scaling policies, you can update them using <a>PutScalingPolicy</a>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   LaunchTemplateLaunchTemplateId: string
  ##                                 : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  ##   LaunchConfigurationName: string
  ##                          : <p>The name of the launch configuration. If you specify <code>LaunchConfigurationName</code> in your update request, you can't specify <code>LaunchTemplate</code> or <code>MixedInstancesPolicy</code>.</p> <important> <p>To update an Auto Scaling group with a launch configuration with <code>InstanceMonitoring</code> set to <code>false</code>, you must first disable the collection of group metrics. Otherwise, you get an error. If you have previously enabled the collection of group metrics, you can disable it using <a>DisableMetricsCollection</a>.</p> </important>
  ##   HealthCheckType: string
  ##                  : The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.
  ##   ServiceLinkedRoleARN: string
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   DesiredCapacity: int
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group.
  ##   HealthCheckGracePeriod: int
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   VPCZoneIdentifier: string
  ##                    : <p>A comma-separated list of subnet IDs for virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p>
  ##   Action: string (required)
  ##   AvailabilityZones: JArray
  ##                    : One or more Availability Zones for the group.
  ##   MinSize: int
  ##          : The minimum size of the Auto Scaling group.
  ##   DefaultCooldown: int
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>. This cooldown period is not used when a scaling-specific cooldown is specified.</p> <p>Cooldown periods are not supported for target tracking scaling policies, step scaling policies, or scheduled scaling. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MixedInstancesPolicyLaunchTemplate: string
  ##                                     : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   MaxSize: int
  ##          : The maximum size of the Auto Scaling group.
  ##   MixedInstancesPolicyInstancesDistribution: string
  ##                                            : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified when creating a mixed instances policy, the default values are used.</p>
  ##   PlacementGroup: string
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   NewInstancesProtectedFromScaleIn: bool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LaunchTemplateVersion: string
  ##                        : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   TerminationPolicies: JArray
  ##                      : <p>A standalone termination policy or a list of termination policies used to select the instance to terminate. The policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Version: string (required)
  ##   LaunchTemplateLaunchTemplateName: string
  ##                                   : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  var query_596100 = newJObject()
  var formData_596101 = newJObject()
  add(formData_596101, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_596101, "LaunchTemplate.LaunchTemplateId",
      newJString(LaunchTemplateLaunchTemplateId))
  add(formData_596101, "LaunchConfigurationName",
      newJString(LaunchConfigurationName))
  add(formData_596101, "HealthCheckType", newJString(HealthCheckType))
  add(formData_596101, "ServiceLinkedRoleARN", newJString(ServiceLinkedRoleARN))
  add(formData_596101, "DesiredCapacity", newJInt(DesiredCapacity))
  add(formData_596101, "HealthCheckGracePeriod", newJInt(HealthCheckGracePeriod))
  add(formData_596101, "VPCZoneIdentifier", newJString(VPCZoneIdentifier))
  add(query_596100, "Action", newJString(Action))
  if AvailabilityZones != nil:
    formData_596101.add "AvailabilityZones", AvailabilityZones
  add(formData_596101, "MinSize", newJInt(MinSize))
  add(formData_596101, "DefaultCooldown", newJInt(DefaultCooldown))
  add(formData_596101, "MixedInstancesPolicy.LaunchTemplate",
      newJString(MixedInstancesPolicyLaunchTemplate))
  add(formData_596101, "MaxSize", newJInt(MaxSize))
  add(formData_596101, "MixedInstancesPolicy.InstancesDistribution",
      newJString(MixedInstancesPolicyInstancesDistribution))
  add(formData_596101, "PlacementGroup", newJString(PlacementGroup))
  add(formData_596101, "NewInstancesProtectedFromScaleIn",
      newJBool(NewInstancesProtectedFromScaleIn))
  add(formData_596101, "LaunchTemplate.Version", newJString(LaunchTemplateVersion))
  if TerminationPolicies != nil:
    formData_596101.add "TerminationPolicies", TerminationPolicies
  add(query_596100, "Version", newJString(Version))
  add(formData_596101, "LaunchTemplate.LaunchTemplateName",
      newJString(LaunchTemplateLaunchTemplateName))
  result = call_596099.call(nil, query_596100, nil, formData_596101, nil)

var postUpdateAutoScalingGroup* = Call_PostUpdateAutoScalingGroup_596067(
    name: "postUpdateAutoScalingGroup", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=UpdateAutoScalingGroup",
    validator: validate_PostUpdateAutoScalingGroup_596068, base: "/",
    url: url_PostUpdateAutoScalingGroup_596069,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateAutoScalingGroup_596033 = ref object of OpenApiRestCall_593437
proc url_GetUpdateAutoScalingGroup_596035(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetUpdateAutoScalingGroup_596034(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the configuration for the specified Auto Scaling group.</p> <p>To update an Auto Scaling group, specify the name of the group and the parameter that you want to change. Any parameters that you don't specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. Scaling activities that are currently in progress aren't affected.</p> <p>If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.</p> <p>Note the following about changing <code>DesiredCapacity</code>, <code>MaxSize</code>, or <code>MinSize</code>:</p> <ul> <li> <p>If a scale-in event occurs as a result of a new <code>DesiredCapacity</code> value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.</p> </li> <li> <p>If you specify a new value for <code>MinSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MinSize</code> is larger than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MinSize</code> value.</p> </li> <li> <p>If you specify a new value for <code>MaxSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MaxSize</code> is smaller than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MaxSize</code> value.</p> </li> </ul> <p>To see which parameters have been set, use <a>DescribeAutoScalingGroups</a>. You can also view the scaling policies for an Auto Scaling group using <a>DescribePolicies</a>. If the group has scaling policies, you can update them using <a>PutScalingPolicy</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   HealthCheckGracePeriod: JInt
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   TerminationPolicies: JArray
  ##                      : <p>A standalone termination policy or a list of termination policies used to select the instance to terminate. The policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   HealthCheckType: JString
  ##                  : The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.
  ##   DesiredCapacity: JInt
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group.
  ##   DefaultCooldown: JInt
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>. This cooldown period is not used when a scaling-specific cooldown is specified.</p> <p>Cooldown periods are not supported for target tracking scaling policies, step scaling policies, or scheduled scaling. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LaunchTemplate.LaunchTemplateId: JString
  ##                                  : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  ##   LaunchTemplate.LaunchTemplateName: JString
  ##                                    : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   AvailabilityZones: JArray
  ##                    : One or more Availability Zones for the group.
  ##   VPCZoneIdentifier: JString
  ##                    : <p>A comma-separated list of subnet IDs for virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p>
  ##   NewInstancesProtectedFromScaleIn: JBool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MixedInstancesPolicy.LaunchTemplate: JString
  ##                                      : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   LaunchConfigurationName: JString
  ##                          : <p>The name of the launch configuration. If you specify <code>LaunchConfigurationName</code> in your update request, you can't specify <code>LaunchTemplate</code> or <code>MixedInstancesPolicy</code>.</p> <important> <p>To update an Auto Scaling group with a launch configuration with <code>InstanceMonitoring</code> set to <code>false</code>, you must first disable the collection of group metrics. Otherwise, you get an error. If you have previously enabled the collection of group metrics, you can disable it using <a>DisableMetricsCollection</a>.</p> </important>
  ##   Action: JString (required)
  ##   PlacementGroup: JString
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   MixedInstancesPolicy.InstancesDistribution: JString
  ##                                             : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified when creating a mixed instances policy, the default values are used.</p>
  ##   LaunchTemplate.Version: JString
  ##                         : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   MaxSize: JInt
  ##          : The maximum size of the Auto Scaling group.
  ##   MinSize: JInt
  ##          : The minimum size of the Auto Scaling group.
  ##   Version: JString (required)
  ##   ServiceLinkedRoleARN: JString
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  section = newJObject()
  var valid_596036 = query.getOrDefault("HealthCheckGracePeriod")
  valid_596036 = validateParameter(valid_596036, JInt, required = false, default = nil)
  if valid_596036 != nil:
    section.add "HealthCheckGracePeriod", valid_596036
  var valid_596037 = query.getOrDefault("TerminationPolicies")
  valid_596037 = validateParameter(valid_596037, JArray, required = false,
                                 default = nil)
  if valid_596037 != nil:
    section.add "TerminationPolicies", valid_596037
  var valid_596038 = query.getOrDefault("HealthCheckType")
  valid_596038 = validateParameter(valid_596038, JString, required = false,
                                 default = nil)
  if valid_596038 != nil:
    section.add "HealthCheckType", valid_596038
  var valid_596039 = query.getOrDefault("DesiredCapacity")
  valid_596039 = validateParameter(valid_596039, JInt, required = false, default = nil)
  if valid_596039 != nil:
    section.add "DesiredCapacity", valid_596039
  var valid_596040 = query.getOrDefault("DefaultCooldown")
  valid_596040 = validateParameter(valid_596040, JInt, required = false, default = nil)
  if valid_596040 != nil:
    section.add "DefaultCooldown", valid_596040
  var valid_596041 = query.getOrDefault("LaunchTemplate.LaunchTemplateId")
  valid_596041 = validateParameter(valid_596041, JString, required = false,
                                 default = nil)
  if valid_596041 != nil:
    section.add "LaunchTemplate.LaunchTemplateId", valid_596041
  var valid_596042 = query.getOrDefault("LaunchTemplate.LaunchTemplateName")
  valid_596042 = validateParameter(valid_596042, JString, required = false,
                                 default = nil)
  if valid_596042 != nil:
    section.add "LaunchTemplate.LaunchTemplateName", valid_596042
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_596043 = query.getOrDefault("AutoScalingGroupName")
  valid_596043 = validateParameter(valid_596043, JString, required = true,
                                 default = nil)
  if valid_596043 != nil:
    section.add "AutoScalingGroupName", valid_596043
  var valid_596044 = query.getOrDefault("AvailabilityZones")
  valid_596044 = validateParameter(valid_596044, JArray, required = false,
                                 default = nil)
  if valid_596044 != nil:
    section.add "AvailabilityZones", valid_596044
  var valid_596045 = query.getOrDefault("VPCZoneIdentifier")
  valid_596045 = validateParameter(valid_596045, JString, required = false,
                                 default = nil)
  if valid_596045 != nil:
    section.add "VPCZoneIdentifier", valid_596045
  var valid_596046 = query.getOrDefault("NewInstancesProtectedFromScaleIn")
  valid_596046 = validateParameter(valid_596046, JBool, required = false, default = nil)
  if valid_596046 != nil:
    section.add "NewInstancesProtectedFromScaleIn", valid_596046
  var valid_596047 = query.getOrDefault("MixedInstancesPolicy.LaunchTemplate")
  valid_596047 = validateParameter(valid_596047, JString, required = false,
                                 default = nil)
  if valid_596047 != nil:
    section.add "MixedInstancesPolicy.LaunchTemplate", valid_596047
  var valid_596048 = query.getOrDefault("LaunchConfigurationName")
  valid_596048 = validateParameter(valid_596048, JString, required = false,
                                 default = nil)
  if valid_596048 != nil:
    section.add "LaunchConfigurationName", valid_596048
  var valid_596049 = query.getOrDefault("Action")
  valid_596049 = validateParameter(valid_596049, JString, required = true,
                                 default = newJString("UpdateAutoScalingGroup"))
  if valid_596049 != nil:
    section.add "Action", valid_596049
  var valid_596050 = query.getOrDefault("PlacementGroup")
  valid_596050 = validateParameter(valid_596050, JString, required = false,
                                 default = nil)
  if valid_596050 != nil:
    section.add "PlacementGroup", valid_596050
  var valid_596051 = query.getOrDefault("MixedInstancesPolicy.InstancesDistribution")
  valid_596051 = validateParameter(valid_596051, JString, required = false,
                                 default = nil)
  if valid_596051 != nil:
    section.add "MixedInstancesPolicy.InstancesDistribution", valid_596051
  var valid_596052 = query.getOrDefault("LaunchTemplate.Version")
  valid_596052 = validateParameter(valid_596052, JString, required = false,
                                 default = nil)
  if valid_596052 != nil:
    section.add "LaunchTemplate.Version", valid_596052
  var valid_596053 = query.getOrDefault("MaxSize")
  valid_596053 = validateParameter(valid_596053, JInt, required = false, default = nil)
  if valid_596053 != nil:
    section.add "MaxSize", valid_596053
  var valid_596054 = query.getOrDefault("MinSize")
  valid_596054 = validateParameter(valid_596054, JInt, required = false, default = nil)
  if valid_596054 != nil:
    section.add "MinSize", valid_596054
  var valid_596055 = query.getOrDefault("Version")
  valid_596055 = validateParameter(valid_596055, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_596055 != nil:
    section.add "Version", valid_596055
  var valid_596056 = query.getOrDefault("ServiceLinkedRoleARN")
  valid_596056 = validateParameter(valid_596056, JString, required = false,
                                 default = nil)
  if valid_596056 != nil:
    section.add "ServiceLinkedRoleARN", valid_596056
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596057 = header.getOrDefault("X-Amz-Date")
  valid_596057 = validateParameter(valid_596057, JString, required = false,
                                 default = nil)
  if valid_596057 != nil:
    section.add "X-Amz-Date", valid_596057
  var valid_596058 = header.getOrDefault("X-Amz-Security-Token")
  valid_596058 = validateParameter(valid_596058, JString, required = false,
                                 default = nil)
  if valid_596058 != nil:
    section.add "X-Amz-Security-Token", valid_596058
  var valid_596059 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596059 = validateParameter(valid_596059, JString, required = false,
                                 default = nil)
  if valid_596059 != nil:
    section.add "X-Amz-Content-Sha256", valid_596059
  var valid_596060 = header.getOrDefault("X-Amz-Algorithm")
  valid_596060 = validateParameter(valid_596060, JString, required = false,
                                 default = nil)
  if valid_596060 != nil:
    section.add "X-Amz-Algorithm", valid_596060
  var valid_596061 = header.getOrDefault("X-Amz-Signature")
  valid_596061 = validateParameter(valid_596061, JString, required = false,
                                 default = nil)
  if valid_596061 != nil:
    section.add "X-Amz-Signature", valid_596061
  var valid_596062 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596062 = validateParameter(valid_596062, JString, required = false,
                                 default = nil)
  if valid_596062 != nil:
    section.add "X-Amz-SignedHeaders", valid_596062
  var valid_596063 = header.getOrDefault("X-Amz-Credential")
  valid_596063 = validateParameter(valid_596063, JString, required = false,
                                 default = nil)
  if valid_596063 != nil:
    section.add "X-Amz-Credential", valid_596063
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596064: Call_GetUpdateAutoScalingGroup_596033; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the configuration for the specified Auto Scaling group.</p> <p>To update an Auto Scaling group, specify the name of the group and the parameter that you want to change. Any parameters that you don't specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. Scaling activities that are currently in progress aren't affected.</p> <p>If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.</p> <p>Note the following about changing <code>DesiredCapacity</code>, <code>MaxSize</code>, or <code>MinSize</code>:</p> <ul> <li> <p>If a scale-in event occurs as a result of a new <code>DesiredCapacity</code> value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.</p> </li> <li> <p>If you specify a new value for <code>MinSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MinSize</code> is larger than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MinSize</code> value.</p> </li> <li> <p>If you specify a new value for <code>MaxSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MaxSize</code> is smaller than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MaxSize</code> value.</p> </li> </ul> <p>To see which parameters have been set, use <a>DescribeAutoScalingGroups</a>. You can also view the scaling policies for an Auto Scaling group using <a>DescribePolicies</a>. If the group has scaling policies, you can update them using <a>PutScalingPolicy</a>.</p>
  ## 
  let valid = call_596064.validator(path, query, header, formData, body)
  let scheme = call_596064.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596064.url(scheme.get, call_596064.host, call_596064.base,
                         call_596064.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596064, url, valid)

proc call*(call_596065: Call_GetUpdateAutoScalingGroup_596033;
          AutoScalingGroupName: string; HealthCheckGracePeriod: int = 0;
          TerminationPolicies: JsonNode = nil; HealthCheckType: string = "";
          DesiredCapacity: int = 0; DefaultCooldown: int = 0;
          LaunchTemplateLaunchTemplateId: string = "";
          LaunchTemplateLaunchTemplateName: string = "";
          AvailabilityZones: JsonNode = nil; VPCZoneIdentifier: string = "";
          NewInstancesProtectedFromScaleIn: bool = false;
          MixedInstancesPolicyLaunchTemplate: string = "";
          LaunchConfigurationName: string = "";
          Action: string = "UpdateAutoScalingGroup"; PlacementGroup: string = "";
          MixedInstancesPolicyInstancesDistribution: string = "";
          LaunchTemplateVersion: string = ""; MaxSize: int = 0; MinSize: int = 0;
          Version: string = "2011-01-01"; ServiceLinkedRoleARN: string = ""): Recallable =
  ## getUpdateAutoScalingGroup
  ## <p>Updates the configuration for the specified Auto Scaling group.</p> <p>To update an Auto Scaling group, specify the name of the group and the parameter that you want to change. Any parameters that you don't specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. Scaling activities that are currently in progress aren't affected.</p> <p>If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.</p> <p>Note the following about changing <code>DesiredCapacity</code>, <code>MaxSize</code>, or <code>MinSize</code>:</p> <ul> <li> <p>If a scale-in event occurs as a result of a new <code>DesiredCapacity</code> value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.</p> </li> <li> <p>If you specify a new value for <code>MinSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MinSize</code> is larger than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MinSize</code> value.</p> </li> <li> <p>If you specify a new value for <code>MaxSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MaxSize</code> is smaller than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MaxSize</code> value.</p> </li> </ul> <p>To see which parameters have been set, use <a>DescribeAutoScalingGroups</a>. You can also view the scaling policies for an Auto Scaling group using <a>DescribePolicies</a>. If the group has scaling policies, you can update them using <a>PutScalingPolicy</a>.</p>
  ##   HealthCheckGracePeriod: int
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   TerminationPolicies: JArray
  ##                      : <p>A standalone termination policy or a list of termination policies used to select the instance to terminate. The policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   HealthCheckType: string
  ##                  : The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.
  ##   DesiredCapacity: int
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group.
  ##   DefaultCooldown: int
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>. This cooldown period is not used when a scaling-specific cooldown is specified.</p> <p>Cooldown periods are not supported for target tracking scaling policies, step scaling policies, or scheduled scaling. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LaunchTemplateLaunchTemplateId: string
  ##                                 : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  ##   LaunchTemplateLaunchTemplateName: string
  ##                                   : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   AvailabilityZones: JArray
  ##                    : One or more Availability Zones for the group.
  ##   VPCZoneIdentifier: string
  ##                    : <p>A comma-separated list of subnet IDs for virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p>
  ##   NewInstancesProtectedFromScaleIn: bool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MixedInstancesPolicyLaunchTemplate: string
  ##                                     : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   LaunchConfigurationName: string
  ##                          : <p>The name of the launch configuration. If you specify <code>LaunchConfigurationName</code> in your update request, you can't specify <code>LaunchTemplate</code> or <code>MixedInstancesPolicy</code>.</p> <important> <p>To update an Auto Scaling group with a launch configuration with <code>InstanceMonitoring</code> set to <code>false</code>, you must first disable the collection of group metrics. Otherwise, you get an error. If you have previously enabled the collection of group metrics, you can disable it using <a>DisableMetricsCollection</a>.</p> </important>
  ##   Action: string (required)
  ##   PlacementGroup: string
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   MixedInstancesPolicyInstancesDistribution: string
  ##                                            : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified when creating a mixed instances policy, the default values are used.</p>
  ##   LaunchTemplateVersion: string
  ##                        : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   MaxSize: int
  ##          : The maximum size of the Auto Scaling group.
  ##   MinSize: int
  ##          : The minimum size of the Auto Scaling group.
  ##   Version: string (required)
  ##   ServiceLinkedRoleARN: string
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  var query_596066 = newJObject()
  add(query_596066, "HealthCheckGracePeriod", newJInt(HealthCheckGracePeriod))
  if TerminationPolicies != nil:
    query_596066.add "TerminationPolicies", TerminationPolicies
  add(query_596066, "HealthCheckType", newJString(HealthCheckType))
  add(query_596066, "DesiredCapacity", newJInt(DesiredCapacity))
  add(query_596066, "DefaultCooldown", newJInt(DefaultCooldown))
  add(query_596066, "LaunchTemplate.LaunchTemplateId",
      newJString(LaunchTemplateLaunchTemplateId))
  add(query_596066, "LaunchTemplate.LaunchTemplateName",
      newJString(LaunchTemplateLaunchTemplateName))
  add(query_596066, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if AvailabilityZones != nil:
    query_596066.add "AvailabilityZones", AvailabilityZones
  add(query_596066, "VPCZoneIdentifier", newJString(VPCZoneIdentifier))
  add(query_596066, "NewInstancesProtectedFromScaleIn",
      newJBool(NewInstancesProtectedFromScaleIn))
  add(query_596066, "MixedInstancesPolicy.LaunchTemplate",
      newJString(MixedInstancesPolicyLaunchTemplate))
  add(query_596066, "LaunchConfigurationName", newJString(LaunchConfigurationName))
  add(query_596066, "Action", newJString(Action))
  add(query_596066, "PlacementGroup", newJString(PlacementGroup))
  add(query_596066, "MixedInstancesPolicy.InstancesDistribution",
      newJString(MixedInstancesPolicyInstancesDistribution))
  add(query_596066, "LaunchTemplate.Version", newJString(LaunchTemplateVersion))
  add(query_596066, "MaxSize", newJInt(MaxSize))
  add(query_596066, "MinSize", newJInt(MinSize))
  add(query_596066, "Version", newJString(Version))
  add(query_596066, "ServiceLinkedRoleARN", newJString(ServiceLinkedRoleARN))
  result = call_596065.call(nil, query_596066, nil, nil, nil)

var getUpdateAutoScalingGroup* = Call_GetUpdateAutoScalingGroup_596033(
    name: "getUpdateAutoScalingGroup", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=UpdateAutoScalingGroup",
    validator: validate_GetUpdateAutoScalingGroup_596034, base: "/",
    url: url_GetUpdateAutoScalingGroup_596035,
    schemes: {Scheme.Https, Scheme.Http})
export
  rest

proc sign(recall: var Recallable; query: JsonNode; algo: SigningAlgo = SHA256) =
  let
    date = makeDateTime()
    access = os.getEnv("AWS_ACCESS_KEY_ID", "")
    secret = os.getEnv("AWS_SECRET_ACCESS_KEY", "")
    region = os.getEnv("AWS_REGION", "")
  assert secret != "", "need secret key in env"
  assert access != "", "need access key in env"
  assert region != "", "need region in env"
  var
    normal: PathNormal
    url = normalizeUrl(recall.url, query, normalize = normal)
    scheme = parseEnum[Scheme](url.scheme)
  assert scheme in awsServers, "unknown scheme `" & $scheme & "`"
  assert region in awsServers[scheme], "unknown region `" & region & "`"
  url.hostname = awsServers[scheme][region]
  case awsServiceName.toLowerAscii
  of "s3":
    normal = PathNormal.S3
  else:
    normal = PathNormal.Default
  recall.headers["Host"] = url.hostname
  recall.headers["X-Amz-Date"] = date
  let
    algo = SHA256
    scope = credentialScope(region = region, service = awsServiceName, date = date)
    request = canonicalRequest(recall.meth, $url, query, recall.headers, recall.body,
                             normalize = normal, digest = algo)
    sts = stringToSign(request.hash(algo), scope, date = date, digest = algo)
    signature = calculateSignature(secret = secret, date = date, region = region,
                                 service = awsServiceName, sts, digest = algo)
  var auth = $algo & " "
  auth &= "Credential=" & access / scope & ", "
  auth &= "SignedHeaders=" & recall.headers.signedHeaders & ", "
  auth &= "Signature=" & signature
  recall.headers["Authorization"] = auth
  recall.headers.del "Host"
  recall.url = $url

method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  let headers = massageHeaders(input.getOrDefault("header"))
  result = newRecallable(call, url, headers, input.getOrDefault("body").getStr)
  result.sign(input.getOrDefault("query"), SHA256)
